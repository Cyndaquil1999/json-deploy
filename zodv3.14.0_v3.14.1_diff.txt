diff --git a/coverage.svg b/coverage.svg
index 66a0c9f15..d1bfd484d 100644
--- a/coverage.svg
+++ b/coverage.svg
@@ -1,5 +1 @@
-<<<<<<< HEAD
 <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="116" height="20" role="img" aria-label="Coverage: 96.16%"><title>Coverage: 96.16%</title><linearGradient id="s" x2="0" y2="100%"><stop offset="0" stop-color="#bbb" stop-opacity=".1"/><stop offset="1" stop-opacity=".1"/></linearGradient><clipPath id="r"><rect width="116" height="20" rx="3" fill="#fff"/></clipPath><g clip-path="url(#r)"><rect width="63" height="20" fill="#555"/><rect x="63" width="53" height="20" fill="#4c1"/><rect width="116" height="20" fill="url(#s)"/></g><g fill="#fff" text-anchor="middle" font-family="Verdana,Geneva,DejaVu Sans,sans-serif" text-rendering="geometricPrecision" font-size="110"><text aria-hidden="true" x="325" y="150" fill="#010101" fill-opacity=".3" transform="scale(.1)" textLength="530">Coverage</text><text x="325" y="140" transform="scale(.1)" fill="#fff" textLength="530">Coverage</text><text aria-hidden="true" x="885" y="150" fill="#010101" fill-opacity=".3" transform="scale(.1)" textLength="430">96.16%</text><text x="885" y="140" transform="scale(.1)" fill="#fff" textLength="430">96.16%</text></g></svg>
-=======
-<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="110" height="20" role="img" aria-label="Coverage: 96.1%"><title>Coverage: 96.1%</title><linearGradient id="s" x2="0" y2="100%"><stop offset="0" stop-color="#bbb" stop-opacity=".1"/><stop offset="1" stop-opacity=".1"/></linearGradient><clipPath id="r"><rect width="110" height="20" rx="3" fill="#fff"/></clipPath><g clip-path="url(#r)"><rect width="63" height="20" fill="#555"/><rect x="63" width="47" height="20" fill="#4c1"/><rect width="110" height="20" fill="url(#s)"/></g><g fill="#fff" text-anchor="middle" font-family="Verdana,Geneva,DejaVu Sans,sans-serif" text-rendering="geometricPrecision" font-size="110"><text aria-hidden="true" x="325" y="150" fill="#010101" fill-opacity=".3" transform="scale(.1)" textLength="530">Coverage</text><text x="325" y="140" transform="scale(.1)" fill="#fff" textLength="530">Coverage</text><text aria-hidden="true" x="855" y="150" fill="#010101" fill-opacity=".3" transform="scale(.1)" textLength="370">96.1%</text><text x="855" y="140" transform="scale(.1)" fill="#fff" textLength="370">96.1%</text></g></svg>
->>>>>>> 3b6802c (Fast unions)
diff --git a/deno/lib/benchmarks/index.ts b/deno/lib/benchmarks/index.ts
index b700b023c..fa6525ea1 100644
--- a/deno/lib/benchmarks/index.ts
+++ b/deno/lib/benchmarks/index.ts
@@ -1,11 +1,13 @@
 import discriminatedUnionBenchmarks from "./discriminatedUnion.ts";
 import objectBenchmarks from "./object.ts";
+import primitiveBenchmarks from "./primitives.ts";
 import realworld from "./realworld.ts";
 import stringBenchmarks from "./string.ts";
 import unionBenchmarks from "./union.ts";
 
 for (const suite of [
   ...realworld.suites,
+  ...primitiveBenchmarks.suites,
   ...stringBenchmarks.suites,
   ...objectBenchmarks.suites,
   ...unionBenchmarks.suites,
diff --git a/deno/lib/benchmarks/primitives.ts b/deno/lib/benchmarks/primitives.ts
new file mode 100644
index 000000000..003e2ebbb
--- /dev/null
+++ b/deno/lib/benchmarks/primitives.ts
@@ -0,0 +1,78 @@
+import Benchmark from "benchmark";
+
+import { z } from "../index.ts";
+
+const enumSuite = new Benchmark.Suite("z.enum");
+const enumSchema = z.enum(["a", "b", "c"]);
+
+enumSuite
+  .add("valid", () => {
+    enumSchema.parse("a");
+  })
+  .add("invalid", () => {
+    try {
+      enumSchema.parse("x");
+    } catch (e) {}
+  })
+  .on("cycle", (e: Benchmark.Event) => {
+    console.log(`z.enum: ${e.target}`);
+  });
+
+const undefinedSuite = new Benchmark.Suite("z.undefined");
+const undefinedSchema = z.undefined();
+
+undefinedSuite
+  .add("valid", () => {
+    undefinedSchema.parse(undefined);
+  })
+  .add("invalid", () => {
+    try {
+      undefinedSchema.parse(1);
+    } catch (e) {}
+  })
+  .on("cycle", (e: Benchmark.Event) => {
+    console.log(`z.undefined: ${e.target}`);
+  });
+
+const literalSuite = new Benchmark.Suite("z.literal");
+const short = "short";
+const bad = "bad";
+const literalSchema = z.literal("short");
+
+literalSuite
+  .add("valid", () => {
+    literalSchema.parse(short);
+  })
+  .add("invalid", () => {
+    try {
+      literalSchema.parse(bad);
+    } catch (e) {}
+  })
+  .on("cycle", (e: Benchmark.Event) => {
+    console.log(`z.literal: ${e.target}`);
+  });
+
+const numberSuite = new Benchmark.Suite("z.number");
+const numberSchema = z.number().int();
+
+numberSuite
+  .add("valid", () => {
+    numberSchema.parse(1);
+  })
+  .add("invalid type", () => {
+    try {
+      numberSchema.parse("bad");
+    } catch (e) {}
+  })
+  .add("invalid number", () => {
+    try {
+      numberSchema.parse(0.5);
+    } catch (e) {}
+  })
+  .on("cycle", (e: Benchmark.Event) => {
+    console.log(`z.number: ${e.target}`);
+  });
+
+export default {
+  suites: [enumSuite, undefinedSuite, literalSuite, numberSuite],
+};
diff --git a/deno/lib/helpers/parseUtil.ts b/deno/lib/helpers/parseUtil.ts
index 577ab6c21..81790a58a 100644
--- a/deno/lib/helpers/parseUtil.ts
+++ b/deno/lib/helpers/parseUtil.ts
@@ -125,11 +125,14 @@ export type ParsePath = ParsePathComponent[];
 export const EMPTY_PATH: ParsePath = [];
 
 export interface ParseContext {
+  readonly common: {
+    readonly issues: ZodIssue[];
+    readonly contextualErrorMap?: ZodErrorMap;
+    readonly async: boolean;
+    readonly typeCache: Map<any, ZodParsedType> | undefined;
+  };
   readonly path: ParsePath;
-  readonly issues: ZodIssue[];
   readonly schemaErrorMap?: ZodErrorMap;
-  readonly contextualErrorMap?: ZodErrorMap;
-  readonly async: boolean;
   readonly parent: ParseContext | null;
   readonly data: any;
   readonly parsedType: ZodParsedType;
@@ -150,13 +153,13 @@ export function addIssueToContext(
     data: ctx.data,
     path: ctx.path,
     errorMaps: [
-      ctx.contextualErrorMap, // contextual error map is first priority
+      ctx.common.contextualErrorMap, // contextual error map is first priority
       ctx.schemaErrorMap, // then schema-bound map if available
       overrideErrorMap, // then global override map
       defaultErrorMap, // then global default map
     ].filter((x) => !!x) as ZodErrorMap[],
   });
-  ctx.issues.push(issue);
+  ctx.common.issues.push(issue);
 }
 
 export type ObjectPair = {
diff --git a/deno/lib/types.ts b/deno/lib/types.ts
index bec55020f..4aa3b0814 100644
--- a/deno/lib/types.ts
+++ b/deno/lib/types.ts
@@ -85,10 +85,10 @@ const handleResult = <Input, Output>(
   if (isValid(result)) {
     return { success: true, data: result.value };
   } else {
-    if (!ctx.issues.length) {
+    if (!ctx.common.issues.length) {
       throw new Error("Validation failed but no issues detected.");
     }
-    const error = new ZodError(ctx.issues);
+    const error = new ZodError(ctx.common.issues);
     return { success: false, error };
   }
 };
@@ -145,6 +145,28 @@ export abstract class ZodType<
 
   abstract _parse(input: ParseInput): ParseReturnType<Output>;
 
+  _getType(input: ParseInput): string {
+    return getParsedType(input.data);
+  }
+
+  _getOrReturnCtx(
+    input: ParseInput,
+    ctx?: ParseContext | undefined
+  ): ParseContext {
+    return (
+      ctx || {
+        common: input.parent.common,
+        data: input.data,
+
+        parsedType: getParsedType(input.data),
+
+        schemaErrorMap: this._def.errorMap,
+        path: input.path,
+        parent: input.parent,
+      }
+    );
+  }
+
   _processInputParams(input: ParseInput): {
     status: ParseStatus;
     ctx: ParseContext;
@@ -152,9 +174,11 @@ export abstract class ZodType<
     return {
       status: new ParseStatus(),
       ctx: {
-        ...input.parent,
+        common: input.parent.common,
         data: input.data,
+
         parsedType: getParsedType(input.data),
+
         schemaErrorMap: this._def.errorMap,
         path: input.path,
         parent: input.parent,
@@ -187,11 +211,14 @@ export abstract class ZodType<
     params?: Partial<ParseParams>
   ): SafeParseReturnType<Input, Output> {
     const ctx: ParseContext = {
+      common: {
+        issues: [],
+        async: params?.async ?? false,
+        typeCache: typeof Map !== "undefined" ? new Map() : undefined,
+        contextualErrorMap: params?.errorMap,
+      },
       path: params?.path || [],
-      issues: [],
-      contextualErrorMap: params?.errorMap,
       schemaErrorMap: this._def.errorMap,
-      async: params?.async ?? false,
       parent: null,
       data,
       parsedType: getParsedType(data),
@@ -215,11 +242,14 @@ export abstract class ZodType<
     params?: Partial<ParseParams>
   ): Promise<SafeParseReturnType<Input, Output>> {
     const ctx: ParseContext = {
+      common: {
+        issues: [],
+        contextualErrorMap: params?.errorMap,
+        async: true,
+        typeCache: typeof Map !== "undefined" ? new Map() : undefined,
+      },
       path: params?.path || [],
-      issues: [],
-      contextualErrorMap: params?.errorMap,
       schemaErrorMap: this._def.errorMap,
-      async: true,
       parent: null,
       data,
       parsedType: getParsedType(data),
@@ -444,9 +474,10 @@ const emailRegex =
 
 export class ZodString extends ZodType<string, ZodStringDef> {
   _parse(input: ParseInput): ParseReturnType<string> {
-    const { status, ctx } = this._processInputParams(input);
+    const parsedType = this._getType(input);
 
-    if (ctx.parsedType !== ZodParsedType.string) {
+    if (parsedType !== ZodParsedType.string) {
+      const ctx = this._getOrReturnCtx(input);
       addIssueToContext(
         ctx,
         {
@@ -459,9 +490,13 @@ export class ZodString extends ZodType<string, ZodStringDef> {
       return INVALID;
     }
 
+    const status = new ParseStatus();
+    let ctx: undefined | ParseContext = undefined;
+
     for (const check of this._def.checks) {
       if (check.kind === "min") {
-        if (ctx.data.length < check.value) {
+        if (input.data.length < check.value) {
+          ctx = this._getOrReturnCtx(input, ctx);
           addIssueToContext(ctx, {
             code: ZodIssueCode.too_small,
             minimum: check.value,
@@ -472,7 +507,8 @@ export class ZodString extends ZodType<string, ZodStringDef> {
           status.dirty();
         }
       } else if (check.kind === "max") {
-        if (ctx.data.length > check.value) {
+        if (input.data.length > check.value) {
+          ctx = this._getOrReturnCtx(input, ctx);
           addIssueToContext(ctx, {
             code: ZodIssueCode.too_big,
             maximum: check.value,
@@ -483,7 +519,8 @@ export class ZodString extends ZodType<string, ZodStringDef> {
           status.dirty();
         }
       } else if (check.kind === "email") {
-        if (!emailRegex.test(ctx.data)) {
+        if (!emailRegex.test(input.data)) {
+          ctx = this._getOrReturnCtx(input, ctx);
           addIssueToContext(ctx, {
             validation: "email",
             code: ZodIssueCode.invalid_string,
@@ -492,7 +529,8 @@ export class ZodString extends ZodType<string, ZodStringDef> {
           status.dirty();
         }
       } else if (check.kind === "uuid") {
-        if (!uuidRegex.test(ctx.data)) {
+        if (!uuidRegex.test(input.data)) {
+          ctx = this._getOrReturnCtx(input, ctx);
           addIssueToContext(ctx, {
             validation: "uuid",
             code: ZodIssueCode.invalid_string,
@@ -501,7 +539,8 @@ export class ZodString extends ZodType<string, ZodStringDef> {
           status.dirty();
         }
       } else if (check.kind === "cuid") {
-        if (!cuidRegex.test(ctx.data)) {
+        if (!cuidRegex.test(input.data)) {
+          ctx = this._getOrReturnCtx(input, ctx);
           addIssueToContext(ctx, {
             validation: "cuid",
             code: ZodIssueCode.invalid_string,
@@ -511,8 +550,9 @@ export class ZodString extends ZodType<string, ZodStringDef> {
         }
       } else if (check.kind === "url") {
         try {
-          new URL(ctx.data);
+          new URL(input.data);
         } catch {
+          ctx = this._getOrReturnCtx(input, ctx);
           addIssueToContext(ctx, {
             validation: "url",
             code: ZodIssueCode.invalid_string,
@@ -522,8 +562,9 @@ export class ZodString extends ZodType<string, ZodStringDef> {
         }
       } else if (check.kind === "regex") {
         check.regex.lastIndex = 0;
-        const testResult = check.regex.test(ctx.data);
+        const testResult = check.regex.test(input.data);
         if (!testResult) {
+          ctx = this._getOrReturnCtx(input, ctx);
           addIssueToContext(ctx, {
             validation: "regex",
             code: ZodIssueCode.invalid_string,
@@ -534,7 +575,7 @@ export class ZodString extends ZodType<string, ZodStringDef> {
       }
     }
 
-    return { status: status.value, value: ctx.data };
+    return { status: status.value, value: input.data };
   }
 
   protected _regex = (
@@ -675,8 +716,9 @@ export interface ZodNumberDef extends ZodTypeDef {
 
 export class ZodNumber extends ZodType<number, ZodNumberDef> {
   _parse(input: ParseInput): ParseReturnType<number> {
-    const { status, ctx } = this._processInputParams(input);
-    if (ctx.parsedType !== ZodParsedType.number) {
+    const parsedType = this._getType(input);
+    if (parsedType !== ZodParsedType.number) {
+      const ctx = this._getOrReturnCtx(input);
       addIssueToContext(ctx, {
         code: ZodIssueCode.invalid_type,
         expected: ZodParsedType.number,
@@ -685,9 +727,13 @@ export class ZodNumber extends ZodType<number, ZodNumberDef> {
       return INVALID;
     }
 
+    let ctx: undefined | ParseContext = undefined;
+    const status = new ParseStatus();
+
     for (const check of this._def.checks) {
       if (check.kind === "int") {
-        if (!util.isInteger(ctx.data)) {
+        if (!util.isInteger(input.data)) {
+          ctx = this._getOrReturnCtx(input, ctx);
           addIssueToContext(ctx, {
             code: ZodIssueCode.invalid_type,
             expected: "integer",
@@ -698,9 +744,10 @@ export class ZodNumber extends ZodType<number, ZodNumberDef> {
         }
       } else if (check.kind === "min") {
         const tooSmall = check.inclusive
-          ? ctx.data < check.value
-          : ctx.data <= check.value;
+          ? input.data < check.value
+          : input.data <= check.value;
         if (tooSmall) {
+          ctx = this._getOrReturnCtx(input, ctx);
           addIssueToContext(ctx, {
             code: ZodIssueCode.too_small,
             minimum: check.value,
@@ -712,9 +759,10 @@ export class ZodNumber extends ZodType<number, ZodNumberDef> {
         }
       } else if (check.kind === "max") {
         const tooBig = check.inclusive
-          ? ctx.data > check.value
-          : ctx.data >= check.value;
+          ? input.data > check.value
+          : input.data >= check.value;
         if (tooBig) {
+          ctx = this._getOrReturnCtx(input, ctx);
           addIssueToContext(ctx, {
             code: ZodIssueCode.too_big,
             maximum: check.value,
@@ -725,7 +773,8 @@ export class ZodNumber extends ZodType<number, ZodNumberDef> {
           status.dirty();
         }
       } else if (check.kind === "multipleOf") {
-        if (floatSafeRemainder(ctx.data, check.value) !== 0) {
+        if (floatSafeRemainder(input.data, check.value) !== 0) {
+          ctx = this._getOrReturnCtx(input, ctx);
           addIssueToContext(ctx, {
             code: ZodIssueCode.not_multiple_of,
             multipleOf: check.value,
@@ -738,7 +787,7 @@ export class ZodNumber extends ZodType<number, ZodNumberDef> {
       }
     }
 
-    return { status: status.value, value: ctx.data };
+    return { status: status.value, value: input.data };
   }
 
   static create = (params?: RawCreateParams): ZodNumber => {
@@ -886,8 +935,9 @@ export interface ZodBigIntDef extends ZodTypeDef {
 
 export class ZodBigInt extends ZodType<bigint, ZodBigIntDef> {
   _parse(input: ParseInput): ParseReturnType<bigint> {
-    const { ctx } = this._processInputParams(input);
-    if (ctx.parsedType !== ZodParsedType.bigint) {
+    const parsedType = this._getType(input);
+    if (parsedType !== ZodParsedType.bigint) {
+      const ctx = this._getOrReturnCtx(input);
       addIssueToContext(ctx, {
         code: ZodIssueCode.invalid_type,
         expected: ZodParsedType.bigint,
@@ -895,7 +945,7 @@ export class ZodBigInt extends ZodType<bigint, ZodBigIntDef> {
       });
       return INVALID;
     }
-    return OK(ctx.data);
+    return OK(input.data);
   }
 
   static create = (params?: RawCreateParams): ZodBigInt => {
@@ -919,8 +969,9 @@ export interface ZodBooleanDef extends ZodTypeDef {
 
 export class ZodBoolean extends ZodType<boolean, ZodBooleanDef> {
   _parse(input: ParseInput): ParseReturnType<boolean> {
-    const { ctx } = this._processInputParams(input);
-    if (ctx.parsedType !== ZodParsedType.boolean) {
+    const parsedType = this._getType(input);
+    if (parsedType !== ZodParsedType.boolean) {
+      const ctx = this._getOrReturnCtx(input);
       addIssueToContext(ctx, {
         code: ZodIssueCode.invalid_type,
         expected: ZodParsedType.boolean,
@@ -928,7 +979,7 @@ export class ZodBoolean extends ZodType<boolean, ZodBooleanDef> {
       });
       return INVALID;
     }
-    return OK(ctx.data);
+    return OK(input.data);
   }
 
   static create = (params?: RawCreateParams): ZodBoolean => {
@@ -952,8 +1003,9 @@ export interface ZodDateDef extends ZodTypeDef {
 
 export class ZodDate extends ZodType<Date, ZodDateDef> {
   _parse(input: ParseInput): ParseReturnType<this["_output"]> {
-    const { status, ctx } = this._processInputParams(input);
-    if (ctx.parsedType !== ZodParsedType.date) {
+    const parsedType = this._getType(input);
+    if (parsedType !== ZodParsedType.date) {
+      const ctx = this._getOrReturnCtx(input);
       addIssueToContext(ctx, {
         code: ZodIssueCode.invalid_type,
         expected: ZodParsedType.date,
@@ -961,7 +1013,8 @@ export class ZodDate extends ZodType<Date, ZodDateDef> {
       });
       return INVALID;
     }
-    if (isNaN(ctx.data.getTime())) {
+    if (isNaN(input.data.getTime())) {
+      const ctx = this._getOrReturnCtx(input);
       addIssueToContext(ctx, {
         code: ZodIssueCode.invalid_date,
       });
@@ -969,8 +1022,8 @@ export class ZodDate extends ZodType<Date, ZodDateDef> {
     }
 
     return {
-      status: status.value,
-      value: new Date((ctx.data as Date).getTime()),
+      status: "valid",
+      value: new Date((input.data as Date).getTime()),
     };
   }
 
@@ -995,8 +1048,9 @@ export interface ZodUndefinedDef extends ZodTypeDef {
 
 export class ZodUndefined extends ZodType<undefined, ZodUndefinedDef> {
   _parse(input: ParseInput): ParseReturnType<this["_output"]> {
-    const { ctx } = this._processInputParams(input);
-    if (ctx.parsedType !== ZodParsedType.undefined) {
+    const parsedType = this._getType(input);
+    if (parsedType !== ZodParsedType.undefined) {
+      const ctx = this._getOrReturnCtx(input);
       addIssueToContext(ctx, {
         code: ZodIssueCode.invalid_type,
         expected: ZodParsedType.undefined,
@@ -1004,7 +1058,7 @@ export class ZodUndefined extends ZodType<undefined, ZodUndefinedDef> {
       });
       return INVALID;
     }
-    return OK(ctx.data);
+    return OK(input.data);
   }
   params?: RawCreateParams;
 
@@ -1029,8 +1083,9 @@ export interface ZodNullDef extends ZodTypeDef {
 
 export class ZodNull extends ZodType<null, ZodNullDef> {
   _parse(input: ParseInput): ParseReturnType<this["_output"]> {
-    const { ctx } = this._processInputParams(input);
-    if (ctx.parsedType !== ZodParsedType.null) {
+    const parsedType = this._getType(input);
+    if (parsedType !== ZodParsedType.null) {
+      const ctx = this._getOrReturnCtx(input);
       addIssueToContext(ctx, {
         code: ZodIssueCode.invalid_type,
         expected: ZodParsedType.null,
@@ -1038,7 +1093,7 @@ export class ZodNull extends ZodType<null, ZodNullDef> {
       });
       return INVALID;
     }
-    return OK(ctx.data);
+    return OK(input.data);
   }
   static create = (params?: RawCreateParams): ZodNull => {
     return new ZodNull({
@@ -1063,8 +1118,7 @@ export class ZodAny extends ZodType<any, ZodAnyDef> {
   // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.
   _any: true = true;
   _parse(input: ParseInput): ParseReturnType<this["_output"]> {
-    const { ctx } = this._processInputParams(input);
-    return OK(ctx.data);
+    return OK(input.data);
   }
   static create = (params?: RawCreateParams): ZodAny => {
     return new ZodAny({
@@ -1089,8 +1143,7 @@ export class ZodUnknown extends ZodType<unknown, ZodUnknownDef> {
   // required
   _unknown: true = true;
   _parse(input: ParseInput): ParseReturnType<this["_output"]> {
-    const { ctx } = this._processInputParams(input);
-    return OK(ctx.data);
+    return OK(input.data);
   }
 
   static create = (params?: RawCreateParams): ZodUnknown => {
@@ -1114,7 +1167,7 @@ export interface ZodNeverDef extends ZodTypeDef {
 
 export class ZodNever extends ZodType<never, ZodNeverDef> {
   _parse(input: ParseInput): ParseReturnType<this["_output"]> {
-    const { ctx } = this._processInputParams(input);
+    const ctx = this._getOrReturnCtx(input);
     addIssueToContext(ctx, {
       code: ZodIssueCode.invalid_type,
       expected: ZodParsedType.never,
@@ -1143,8 +1196,9 @@ export interface ZodVoidDef extends ZodTypeDef {
 
 export class ZodVoid extends ZodType<void, ZodVoidDef> {
   _parse(input: ParseInput): ParseReturnType<this["_output"]> {
-    const { ctx } = this._processInputParams(input);
-    if (ctx.parsedType !== ZodParsedType.undefined) {
+    const parsedType = this._getType(input);
+    if (parsedType !== ZodParsedType.undefined) {
+      const ctx = this._getOrReturnCtx(input);
       addIssueToContext(ctx, {
         code: ZodIssueCode.invalid_type,
         expected: ZodParsedType.void,
@@ -1152,7 +1206,7 @@ export class ZodVoid extends ZodType<void, ZodVoidDef> {
       });
       return INVALID;
     }
-    return OK(ctx.data);
+    return OK(input.data);
   }
 
   static create = (params?: RawCreateParams): ZodVoid => {
@@ -1197,7 +1251,7 @@ export class ZodArray<
     : T["_input"][]
 > {
   _parse(input: ParseInput): ParseReturnType<this["_output"]> {
-    const { status, ctx } = this._processInputParams(input);
+    const { ctx, status } = this._processInputParams(input);
 
     const def = this._def;
 
@@ -1236,7 +1290,7 @@ export class ZodArray<
       }
     }
 
-    if (ctx.async) {
+    if (ctx.common.async) {
       return Promise.all(
         (ctx.data as any[]).map((item, i) => {
           return def.type._parseAsync({
@@ -1475,8 +1529,9 @@ export class ZodObject<
   }
 
   _parse(input: ParseInput): ParseReturnType<this["_output"]> {
-    const { status, ctx } = this._processInputParams(input);
-    if (ctx.parsedType !== ZodParsedType.object) {
+    const parsedType = this._getType(input);
+    if (parsedType !== ZodParsedType.object) {
+      const ctx = this._getOrReturnCtx(input);
       addIssueToContext(ctx, {
         code: ZodIssueCode.invalid_type,
         expected: ZodParsedType.object,
@@ -1485,6 +1540,8 @@ export class ZodObject<
       return INVALID;
     }
 
+    const { status, ctx } = this._processInputParams(input);
+
     const { shape, keys: shapeKeys } = this._getCached();
     const dataKeys = util.objectKeys(ctx.data);
     const extraKeys = dataKeys.filter((k) => !shapeKeys.includes(k));
@@ -1546,7 +1603,7 @@ export class ZodObject<
       }
     }
 
-    if (ctx.async) {
+    if (ctx.common.async) {
       return Promise.resolve()
         .then(async () => {
           const syncPairs: any[] = [];
@@ -1841,14 +1898,14 @@ export class ZodUnion<T extends ZodUnionOptions> extends ZodType<
         if (result.result.status === "dirty") {
           // add issues from dirty option
 
-          ctx.issues.push(...result.ctx.issues);
+          ctx.common.issues.push(...result.ctx.common.issues);
           return result.result;
         }
       }
 
       // return invalid
       const unionErrors = results.map(
-        (result) => new ZodError(result.ctx.issues)
+        (result) => new ZodError(result.ctx.common.issues)
       );
 
       addIssueToContext(ctx, {
@@ -1858,12 +1915,15 @@ export class ZodUnion<T extends ZodUnionOptions> extends ZodType<
       return INVALID;
     }
 
-    if (ctx.async) {
+    if (ctx.common.async) {
       return Promise.all(
         options.map(async (option) => {
           const childCtx: ParseContext = {
             ...ctx,
-            issues: [],
+            common: {
+              ...ctx.common,
+              issues: [],
+            },
             parent: null,
           };
           return {
@@ -1883,7 +1943,10 @@ export class ZodUnion<T extends ZodUnionOptions> extends ZodType<
       for (const option of options) {
         const childCtx: ParseContext = {
           ...ctx,
-          issues: [],
+          common: {
+            ...ctx.common,
+            issues: [],
+          },
           parent: null,
         };
         const result = option._parseSync({
@@ -1898,13 +1961,13 @@ export class ZodUnion<T extends ZodUnionOptions> extends ZodType<
           dirty = { result, ctx: childCtx };
         }
 
-        if (childCtx.issues.length) {
-          issues.push(childCtx.issues);
+        if (childCtx.common.issues.length) {
+          issues.push(childCtx.common.issues);
         }
       }
 
       if (dirty) {
-        ctx.issues.push(...dirty.ctx.issues);
+        ctx.common.issues.push(...dirty.ctx.common.issues);
         return dirty.result;
       }
 
@@ -1997,7 +2060,7 @@ export class ZodDiscriminatedUnion<
       return INVALID;
     }
 
-    if (ctx.async) {
+    if (ctx.common.async) {
       return option._parseAsync({
         data: ctx.data,
         path: ctx.path,
@@ -2182,7 +2245,7 @@ export class ZodIntersection<
       return { status: status.value, value: merged.data as any };
     };
 
-    if (ctx.async) {
+    if (ctx.common.async) {
       return Promise.all([
         this._def.left._parseAsync({
           data: ctx.data,
@@ -2317,7 +2380,7 @@ export class ZodTuple<
       })
       .filter((x) => !!x); // filter nulls
 
-    if (ctx.async) {
+    if (ctx.common.async) {
       return Promise.all(items).then((results) => {
         return ParseStatus.mergeArray(status, results);
       });
@@ -2422,7 +2485,7 @@ export class ZodRecord<
       });
     }
 
-    if (ctx.async) {
+    if (ctx.common.async) {
       return ParseStatus.mergeObjectAsync(status, pairs);
     } else {
       return ParseStatus.mergeObjectSync(status, pairs as any);
@@ -2516,7 +2579,7 @@ export class ZodMap<
       }
     );
 
-    if (ctx.async) {
+    if (ctx.common.async) {
       const finalMap = new Map();
       return Promise.resolve().then(async () => {
         for (const pair of pairs) {
@@ -2642,7 +2705,7 @@ export class ZodSet<Value extends ZodTypeAny = ZodTypeAny> extends ZodType<
       valueType._parse({ data: item, path: [...ctx.path, i], parent: ctx })
     );
 
-    if (ctx.async) {
+    if (ctx.common.async) {
       return Promise.all(elements).then((elements) => finalizeSet(elements));
     } else {
       return finalizeSet(elements as SyncParseReturnType[]);
@@ -2739,7 +2802,7 @@ export class ZodFunction<
         data: args,
         path: ctx.path,
         errorMaps: [
-          ctx.contextualErrorMap,
+          ctx.common.contextualErrorMap,
           ctx.schemaErrorMap,
           overrideErrorMap,
           defaultErrorMap,
@@ -2756,7 +2819,7 @@ export class ZodFunction<
         data: returns,
         path: ctx.path,
         errorMaps: [
-          ctx.contextualErrorMap,
+          ctx.common.contextualErrorMap,
           ctx.schemaErrorMap,
           overrideErrorMap,
           defaultErrorMap,
@@ -2768,7 +2831,7 @@ export class ZodFunction<
       });
     }
 
-    const params = { errorMap: ctx.contextualErrorMap };
+    const params = { errorMap: ctx.common.contextualErrorMap };
     const fn = ctx.data;
 
     if (this._def.returns instanceof ZodPromise) {
@@ -2920,8 +2983,8 @@ export interface ZodLiteralDef<T extends any = any> extends ZodTypeDef {
 
 export class ZodLiteral<T extends any> extends ZodType<T, ZodLiteralDef<T>> {
   _parse(input: ParseInput): ParseReturnType<this["_output"]> {
-    const { status, ctx } = this._processInputParams(input);
-    if (ctx.data !== this._def.value) {
+    if (input.data !== this._def.value) {
+      const ctx = this._getOrReturnCtx(input);
       addIssueToContext(ctx, {
         code: ZodIssueCode.invalid_type,
         expected: getParsedType(this._def.value),
@@ -2929,7 +2992,7 @@ export class ZodLiteral<T extends any> extends ZodType<T, ZodLiteralDef<T>> {
       });
       return INVALID;
     }
-    return { status: status.value, value: ctx.data };
+    return { status: "valid", value: input.data };
   }
 
   get value() {
@@ -2990,15 +3053,15 @@ export class ZodEnum<T extends [string, ...string[]]> extends ZodType<
   ZodEnumDef<T>
 > {
   _parse(input: ParseInput): ParseReturnType<this["_output"]> {
-    const { ctx } = this._processInputParams(input);
-    if (this._def.values.indexOf(ctx.data) === -1) {
+    if (this._def.values.indexOf(input.data) === -1) {
+      const ctx = this._getOrReturnCtx(input);
       addIssueToContext(ctx, {
         code: ZodIssueCode.invalid_enum_value,
         options: this._def.values,
       });
       return INVALID;
     }
-    return OK(ctx.data);
+    return OK(input.data);
   }
 
   get options() {
@@ -3052,16 +3115,16 @@ export class ZodNativeEnum<T extends EnumLike> extends ZodType<
   ZodNativeEnumDef<T>
 > {
   _parse(input: ParseInput): ParseReturnType<T[keyof T]> {
-    const { ctx } = this._processInputParams(input);
     const nativeEnumValues = util.getValidEnumValues(this._def.values);
-    if (nativeEnumValues.indexOf(ctx.data) === -1) {
+    if (nativeEnumValues.indexOf(input.data) === -1) {
+      const ctx = this._getOrReturnCtx(input);
       addIssueToContext(ctx, {
         code: ZodIssueCode.invalid_enum_value,
         options: util.objectValues(nativeEnumValues),
       });
       return INVALID;
     }
-    return OK(ctx.data);
+    return OK(input.data);
   }
 
   get enum() {
@@ -3100,7 +3163,10 @@ export class ZodPromise<T extends ZodTypeAny> extends ZodType<
 > {
   _parse(input: ParseInput): ParseReturnType<this["_output"]> {
     const { ctx } = this._processInputParams(input);
-    if (ctx.parsedType !== ZodParsedType.promise && ctx.async === false) {
+    if (
+      ctx.parsedType !== ZodParsedType.promise &&
+      ctx.common.async === false
+    ) {
       addIssueToContext(ctx, {
         code: ZodIssueCode.invalid_type,
         expected: ZodParsedType.promise,
@@ -3118,7 +3184,7 @@ export class ZodPromise<T extends ZodTypeAny> extends ZodType<
       promisified.then((data: any) => {
         return this._def.type.parseAsync(data, {
           path: ctx.path,
-          errorMap: ctx.contextualErrorMap,
+          errorMap: ctx.common.contextualErrorMap,
         });
       })
     );
@@ -3188,7 +3254,7 @@ export class ZodEffects<
     if (effect.type === "preprocess") {
       const processed = effect.transform(ctx.data);
 
-      if (ctx.async) {
+      if (ctx.common.async) {
         return Promise.resolve(processed).then((processed) => {
           return this._def.schema._parseAsync({
             data: processed,
@@ -3227,7 +3293,7 @@ export class ZodEffects<
         // effect: RefinementEffect<any>
       ): any => {
         const result = effect.refinement(acc, checkCtx);
-        if (ctx.async) {
+        if (ctx.common.async) {
           return Promise.resolve(result);
         }
         if (result instanceof Promise) {
@@ -3238,7 +3304,7 @@ export class ZodEffects<
         return acc;
       };
 
-      if (ctx.async === false) {
+      if (ctx.common.async === false) {
         const inner = this._def.schema._parseSync({
           data: ctx.data,
           path: ctx.path,
@@ -3265,7 +3331,7 @@ export class ZodEffects<
     }
 
     if (effect.type === "transform") {
-      if (ctx.async === false) {
+      if (ctx.common.async === false) {
         const base = this._def.schema._parseSync({
           data: ctx.data,
           path: ctx.path,
@@ -3351,10 +3417,11 @@ export class ZodOptional<T extends ZodTypeAny> extends ZodType<
   T["_input"] | undefined
 > {
   _parse(input: ParseInput): ParseReturnType<this["_output"]> {
-    const { ctx } = this._processInputParams(input);
-    if (ctx.parsedType === ZodParsedType.undefined) {
+    const parsedType = this._getType(input);
+    if (parsedType === ZodParsedType.undefined) {
       return OK(undefined);
     }
+    const { ctx } = this._processInputParams(input);
     return this._def.innerType._parse({
       data: ctx.data,
       path: ctx.path,
@@ -3399,10 +3466,11 @@ export class ZodNullable<T extends ZodTypeAny> extends ZodType<
   T["_input"] | null
 > {
   _parse(input: ParseInput): ParseReturnType<this["_output"]> {
-    const { ctx } = this._processInputParams(input);
-    if (ctx.parsedType === ZodParsedType.null) {
+    const parsedType = this._getType(input);
+    if (parsedType === ZodParsedType.null) {
       return OK(null);
     }
+    const { ctx } = this._processInputParams(input);
     return this._def.innerType._parse({
       data: ctx.data,
       path: ctx.path,
@@ -3488,8 +3556,9 @@ export interface ZodNaNDef extends ZodTypeDef {
 
 export class ZodNaN extends ZodType<number, ZodNaNDef> {
   _parse(input: ParseInput): ParseReturnType<any> {
-    const { status, ctx } = this._processInputParams(input);
-    if (ctx.parsedType !== ZodParsedType.nan) {
+    const parsedType = this._getType(input);
+    if (parsedType !== ZodParsedType.nan) {
+      const ctx = this._getOrReturnCtx(input);
       addIssueToContext(ctx, {
         code: ZodIssueCode.invalid_type,
         expected: ZodParsedType.nan,
@@ -3498,7 +3567,7 @@ export class ZodNaN extends ZodType<number, ZodNaNDef> {
       return INVALID;
     }
 
-    return { status: status.value, value: ctx.data };
+    return { status: "valid", value: input.data };
   }
 
   static create = (params?: RawCreateParams): ZodNaN => {
diff --git a/package.json b/package.json
index 51dff86ea..a3938c20a 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "zod",
-  "version": "3.13.4",
+  "version": "3.14.1",
   "description": "TypeScript-first schema declaration and validation library with static type inference",
   "main": "./lib/index.js",
   "types": "./lib/index.d.ts",
@@ -85,6 +85,7 @@
     "prettier": "^2.2.1",
     "rollup": "^2.42.1",
     "rollup-plugin-uglify": "^6.0.4",
+    "table": "^6.8.0",
     "ts-jest": "^26.4.4",
     "ts-node": "^9.1.0",
     "tslib": "^2.3.1",
diff --git a/src/benchmarks/index.ts b/src/benchmarks/index.ts
index e94003cee..4ed7ea88c 100644
--- a/src/benchmarks/index.ts
+++ b/src/benchmarks/index.ts
@@ -1,11 +1,13 @@
 import discriminatedUnionBenchmarks from "./discriminatedUnion";
 import objectBenchmarks from "./object";
+import primitiveBenchmarks from "./primitives";
 import realworld from "./realworld";
 import stringBenchmarks from "./string";
 import unionBenchmarks from "./union";
 
 for (const suite of [
   ...realworld.suites,
+  ...primitiveBenchmarks.suites,
   ...stringBenchmarks.suites,
   ...objectBenchmarks.suites,
   ...unionBenchmarks.suites,
diff --git a/src/benchmarks/primitives.ts b/src/benchmarks/primitives.ts
new file mode 100644
index 000000000..7e4a99eac
--- /dev/null
+++ b/src/benchmarks/primitives.ts
@@ -0,0 +1,78 @@
+import Benchmark from "benchmark";
+
+import { z } from "../index";
+
+const enumSuite = new Benchmark.Suite("z.enum");
+const enumSchema = z.enum(["a", "b", "c"]);
+
+enumSuite
+  .add("valid", () => {
+    enumSchema.parse("a");
+  })
+  .add("invalid", () => {
+    try {
+      enumSchema.parse("x");
+    } catch (e) {}
+  })
+  .on("cycle", (e: Benchmark.Event) => {
+    console.log(`z.enum: ${e.target}`);
+  });
+
+const undefinedSuite = new Benchmark.Suite("z.undefined");
+const undefinedSchema = z.undefined();
+
+undefinedSuite
+  .add("valid", () => {
+    undefinedSchema.parse(undefined);
+  })
+  .add("invalid", () => {
+    try {
+      undefinedSchema.parse(1);
+    } catch (e) {}
+  })
+  .on("cycle", (e: Benchmark.Event) => {
+    console.log(`z.undefined: ${e.target}`);
+  });
+
+const literalSuite = new Benchmark.Suite("z.literal");
+const short = "short";
+const bad = "bad";
+const literalSchema = z.literal("short");
+
+literalSuite
+  .add("valid", () => {
+    literalSchema.parse(short);
+  })
+  .add("invalid", () => {
+    try {
+      literalSchema.parse(bad);
+    } catch (e) {}
+  })
+  .on("cycle", (e: Benchmark.Event) => {
+    console.log(`z.literal: ${e.target}`);
+  });
+
+const numberSuite = new Benchmark.Suite("z.number");
+const numberSchema = z.number().int();
+
+numberSuite
+  .add("valid", () => {
+    numberSchema.parse(1);
+  })
+  .add("invalid type", () => {
+    try {
+      numberSchema.parse("bad");
+    } catch (e) {}
+  })
+  .add("invalid number", () => {
+    try {
+      numberSchema.parse(0.5);
+    } catch (e) {}
+  })
+  .on("cycle", (e: Benchmark.Event) => {
+    console.log(`z.number: ${e.target}`);
+  });
+
+export default {
+  suites: [enumSuite, undefinedSuite, literalSuite, numberSuite],
+};
diff --git a/src/helpers/parseUtil.ts b/src/helpers/parseUtil.ts
index 4cd7f03c5..c8b0d35c1 100644
--- a/src/helpers/parseUtil.ts
+++ b/src/helpers/parseUtil.ts
@@ -125,11 +125,14 @@ export type ParsePath = ParsePathComponent[];
 export const EMPTY_PATH: ParsePath = [];
 
 export interface ParseContext {
+  readonly common: {
+    readonly issues: ZodIssue[];
+    readonly contextualErrorMap?: ZodErrorMap;
+    readonly async: boolean;
+    readonly typeCache: Map<any, ZodParsedType> | undefined;
+  };
   readonly path: ParsePath;
-  readonly issues: ZodIssue[];
   readonly schemaErrorMap?: ZodErrorMap;
-  readonly contextualErrorMap?: ZodErrorMap;
-  readonly async: boolean;
   readonly parent: ParseContext | null;
   readonly data: any;
   readonly parsedType: ZodParsedType;
@@ -150,13 +153,13 @@ export function addIssueToContext(
     data: ctx.data,
     path: ctx.path,
     errorMaps: [
-      ctx.contextualErrorMap, // contextual error map is first priority
+      ctx.common.contextualErrorMap, // contextual error map is first priority
       ctx.schemaErrorMap, // then schema-bound map if available
       overrideErrorMap, // then global override map
       defaultErrorMap, // then global default map
     ].filter((x) => !!x) as ZodErrorMap[],
   });
-  ctx.issues.push(issue);
+  ctx.common.issues.push(issue);
 }
 
 export type ObjectPair = {
diff --git a/src/types.ts b/src/types.ts
index 29db38b2a..7ea81df47 100644
--- a/src/types.ts
+++ b/src/types.ts
@@ -85,10 +85,10 @@ const handleResult = <Input, Output>(
   if (isValid(result)) {
     return { success: true, data: result.value };
   } else {
-    if (!ctx.issues.length) {
+    if (!ctx.common.issues.length) {
       throw new Error("Validation failed but no issues detected.");
     }
-    const error = new ZodError(ctx.issues);
+    const error = new ZodError(ctx.common.issues);
     return { success: false, error };
   }
 };
@@ -145,6 +145,28 @@ export abstract class ZodType<
 
   abstract _parse(input: ParseInput): ParseReturnType<Output>;
 
+  _getType(input: ParseInput): string {
+    return getParsedType(input.data);
+  }
+
+  _getOrReturnCtx(
+    input: ParseInput,
+    ctx?: ParseContext | undefined
+  ): ParseContext {
+    return (
+      ctx || {
+        common: input.parent.common,
+        data: input.data,
+
+        parsedType: getParsedType(input.data),
+
+        schemaErrorMap: this._def.errorMap,
+        path: input.path,
+        parent: input.parent,
+      }
+    );
+  }
+
   _processInputParams(input: ParseInput): {
     status: ParseStatus;
     ctx: ParseContext;
@@ -152,9 +174,11 @@ export abstract class ZodType<
     return {
       status: new ParseStatus(),
       ctx: {
-        ...input.parent,
+        common: input.parent.common,
         data: input.data,
+
         parsedType: getParsedType(input.data),
+
         schemaErrorMap: this._def.errorMap,
         path: input.path,
         parent: input.parent,
@@ -187,11 +211,14 @@ export abstract class ZodType<
     params?: Partial<ParseParams>
   ): SafeParseReturnType<Input, Output> {
     const ctx: ParseContext = {
+      common: {
+        issues: [],
+        async: params?.async ?? false,
+        typeCache: typeof Map !== "undefined" ? new Map() : undefined,
+        contextualErrorMap: params?.errorMap,
+      },
       path: params?.path || [],
-      issues: [],
-      contextualErrorMap: params?.errorMap,
       schemaErrorMap: this._def.errorMap,
-      async: params?.async ?? false,
       parent: null,
       data,
       parsedType: getParsedType(data),
@@ -215,11 +242,14 @@ export abstract class ZodType<
     params?: Partial<ParseParams>
   ): Promise<SafeParseReturnType<Input, Output>> {
     const ctx: ParseContext = {
+      common: {
+        issues: [],
+        contextualErrorMap: params?.errorMap,
+        async: true,
+        typeCache: typeof Map !== "undefined" ? new Map() : undefined,
+      },
       path: params?.path || [],
-      issues: [],
-      contextualErrorMap: params?.errorMap,
       schemaErrorMap: this._def.errorMap,
-      async: true,
       parent: null,
       data,
       parsedType: getParsedType(data),
@@ -444,9 +474,10 @@ const emailRegex =
 
 export class ZodString extends ZodType<string, ZodStringDef> {
   _parse(input: ParseInput): ParseReturnType<string> {
-    const { status, ctx } = this._processInputParams(input);
+    const parsedType = this._getType(input);
 
-    if (ctx.parsedType !== ZodParsedType.string) {
+    if (parsedType !== ZodParsedType.string) {
+      const ctx = this._getOrReturnCtx(input);
       addIssueToContext(
         ctx,
         {
@@ -459,9 +490,13 @@ export class ZodString extends ZodType<string, ZodStringDef> {
       return INVALID;
     }
 
+    const status = new ParseStatus();
+    let ctx: undefined | ParseContext = undefined;
+
     for (const check of this._def.checks) {
       if (check.kind === "min") {
-        if (ctx.data.length < check.value) {
+        if (input.data.length < check.value) {
+          ctx = this._getOrReturnCtx(input, ctx);
           addIssueToContext(ctx, {
             code: ZodIssueCode.too_small,
             minimum: check.value,
@@ -472,7 +507,8 @@ export class ZodString extends ZodType<string, ZodStringDef> {
           status.dirty();
         }
       } else if (check.kind === "max") {
-        if (ctx.data.length > check.value) {
+        if (input.data.length > check.value) {
+          ctx = this._getOrReturnCtx(input, ctx);
           addIssueToContext(ctx, {
             code: ZodIssueCode.too_big,
             maximum: check.value,
@@ -483,7 +519,8 @@ export class ZodString extends ZodType<string, ZodStringDef> {
           status.dirty();
         }
       } else if (check.kind === "email") {
-        if (!emailRegex.test(ctx.data)) {
+        if (!emailRegex.test(input.data)) {
+          ctx = this._getOrReturnCtx(input, ctx);
           addIssueToContext(ctx, {
             validation: "email",
             code: ZodIssueCode.invalid_string,
@@ -492,7 +529,8 @@ export class ZodString extends ZodType<string, ZodStringDef> {
           status.dirty();
         }
       } else if (check.kind === "uuid") {
-        if (!uuidRegex.test(ctx.data)) {
+        if (!uuidRegex.test(input.data)) {
+          ctx = this._getOrReturnCtx(input, ctx);
           addIssueToContext(ctx, {
             validation: "uuid",
             code: ZodIssueCode.invalid_string,
@@ -501,7 +539,8 @@ export class ZodString extends ZodType<string, ZodStringDef> {
           status.dirty();
         }
       } else if (check.kind === "cuid") {
-        if (!cuidRegex.test(ctx.data)) {
+        if (!cuidRegex.test(input.data)) {
+          ctx = this._getOrReturnCtx(input, ctx);
           addIssueToContext(ctx, {
             validation: "cuid",
             code: ZodIssueCode.invalid_string,
@@ -511,8 +550,9 @@ export class ZodString extends ZodType<string, ZodStringDef> {
         }
       } else if (check.kind === "url") {
         try {
-          new URL(ctx.data);
+          new URL(input.data);
         } catch {
+          ctx = this._getOrReturnCtx(input, ctx);
           addIssueToContext(ctx, {
             validation: "url",
             code: ZodIssueCode.invalid_string,
@@ -522,8 +562,9 @@ export class ZodString extends ZodType<string, ZodStringDef> {
         }
       } else if (check.kind === "regex") {
         check.regex.lastIndex = 0;
-        const testResult = check.regex.test(ctx.data);
+        const testResult = check.regex.test(input.data);
         if (!testResult) {
+          ctx = this._getOrReturnCtx(input, ctx);
           addIssueToContext(ctx, {
             validation: "regex",
             code: ZodIssueCode.invalid_string,
@@ -534,7 +575,7 @@ export class ZodString extends ZodType<string, ZodStringDef> {
       }
     }
 
-    return { status: status.value, value: ctx.data };
+    return { status: status.value, value: input.data };
   }
 
   protected _regex = (
@@ -675,8 +716,9 @@ export interface ZodNumberDef extends ZodTypeDef {
 
 export class ZodNumber extends ZodType<number, ZodNumberDef> {
   _parse(input: ParseInput): ParseReturnType<number> {
-    const { status, ctx } = this._processInputParams(input);
-    if (ctx.parsedType !== ZodParsedType.number) {
+    const parsedType = this._getType(input);
+    if (parsedType !== ZodParsedType.number) {
+      const ctx = this._getOrReturnCtx(input);
       addIssueToContext(ctx, {
         code: ZodIssueCode.invalid_type,
         expected: ZodParsedType.number,
@@ -685,9 +727,13 @@ export class ZodNumber extends ZodType<number, ZodNumberDef> {
       return INVALID;
     }
 
+    let ctx: undefined | ParseContext = undefined;
+    const status = new ParseStatus();
+
     for (const check of this._def.checks) {
       if (check.kind === "int") {
-        if (!util.isInteger(ctx.data)) {
+        if (!util.isInteger(input.data)) {
+          ctx = this._getOrReturnCtx(input, ctx);
           addIssueToContext(ctx, {
             code: ZodIssueCode.invalid_type,
             expected: "integer",
@@ -698,9 +744,10 @@ export class ZodNumber extends ZodType<number, ZodNumberDef> {
         }
       } else if (check.kind === "min") {
         const tooSmall = check.inclusive
-          ? ctx.data < check.value
-          : ctx.data <= check.value;
+          ? input.data < check.value
+          : input.data <= check.value;
         if (tooSmall) {
+          ctx = this._getOrReturnCtx(input, ctx);
           addIssueToContext(ctx, {
             code: ZodIssueCode.too_small,
             minimum: check.value,
@@ -712,9 +759,10 @@ export class ZodNumber extends ZodType<number, ZodNumberDef> {
         }
       } else if (check.kind === "max") {
         const tooBig = check.inclusive
-          ? ctx.data > check.value
-          : ctx.data >= check.value;
+          ? input.data > check.value
+          : input.data >= check.value;
         if (tooBig) {
+          ctx = this._getOrReturnCtx(input, ctx);
           addIssueToContext(ctx, {
             code: ZodIssueCode.too_big,
             maximum: check.value,
@@ -725,7 +773,8 @@ export class ZodNumber extends ZodType<number, ZodNumberDef> {
           status.dirty();
         }
       } else if (check.kind === "multipleOf") {
-        if (floatSafeRemainder(ctx.data, check.value) !== 0) {
+        if (floatSafeRemainder(input.data, check.value) !== 0) {
+          ctx = this._getOrReturnCtx(input, ctx);
           addIssueToContext(ctx, {
             code: ZodIssueCode.not_multiple_of,
             multipleOf: check.value,
@@ -738,7 +787,7 @@ export class ZodNumber extends ZodType<number, ZodNumberDef> {
       }
     }
 
-    return { status: status.value, value: ctx.data };
+    return { status: status.value, value: input.data };
   }
 
   static create = (params?: RawCreateParams): ZodNumber => {
@@ -886,8 +935,9 @@ export interface ZodBigIntDef extends ZodTypeDef {
 
 export class ZodBigInt extends ZodType<bigint, ZodBigIntDef> {
   _parse(input: ParseInput): ParseReturnType<bigint> {
-    const { ctx } = this._processInputParams(input);
-    if (ctx.parsedType !== ZodParsedType.bigint) {
+    const parsedType = this._getType(input);
+    if (parsedType !== ZodParsedType.bigint) {
+      const ctx = this._getOrReturnCtx(input);
       addIssueToContext(ctx, {
         code: ZodIssueCode.invalid_type,
         expected: ZodParsedType.bigint,
@@ -895,7 +945,7 @@ export class ZodBigInt extends ZodType<bigint, ZodBigIntDef> {
       });
       return INVALID;
     }
-    return OK(ctx.data);
+    return OK(input.data);
   }
 
   static create = (params?: RawCreateParams): ZodBigInt => {
@@ -919,8 +969,9 @@ export interface ZodBooleanDef extends ZodTypeDef {
 
 export class ZodBoolean extends ZodType<boolean, ZodBooleanDef> {
   _parse(input: ParseInput): ParseReturnType<boolean> {
-    const { ctx } = this._processInputParams(input);
-    if (ctx.parsedType !== ZodParsedType.boolean) {
+    const parsedType = this._getType(input);
+    if (parsedType !== ZodParsedType.boolean) {
+      const ctx = this._getOrReturnCtx(input);
       addIssueToContext(ctx, {
         code: ZodIssueCode.invalid_type,
         expected: ZodParsedType.boolean,
@@ -928,7 +979,7 @@ export class ZodBoolean extends ZodType<boolean, ZodBooleanDef> {
       });
       return INVALID;
     }
-    return OK(ctx.data);
+    return OK(input.data);
   }
 
   static create = (params?: RawCreateParams): ZodBoolean => {
@@ -952,8 +1003,9 @@ export interface ZodDateDef extends ZodTypeDef {
 
 export class ZodDate extends ZodType<Date, ZodDateDef> {
   _parse(input: ParseInput): ParseReturnType<this["_output"]> {
-    const { status, ctx } = this._processInputParams(input);
-    if (ctx.parsedType !== ZodParsedType.date) {
+    const parsedType = this._getType(input);
+    if (parsedType !== ZodParsedType.date) {
+      const ctx = this._getOrReturnCtx(input);
       addIssueToContext(ctx, {
         code: ZodIssueCode.invalid_type,
         expected: ZodParsedType.date,
@@ -961,7 +1013,8 @@ export class ZodDate extends ZodType<Date, ZodDateDef> {
       });
       return INVALID;
     }
-    if (isNaN(ctx.data.getTime())) {
+    if (isNaN(input.data.getTime())) {
+      const ctx = this._getOrReturnCtx(input);
       addIssueToContext(ctx, {
         code: ZodIssueCode.invalid_date,
       });
@@ -969,8 +1022,8 @@ export class ZodDate extends ZodType<Date, ZodDateDef> {
     }
 
     return {
-      status: status.value,
-      value: new Date((ctx.data as Date).getTime()),
+      status: "valid",
+      value: new Date((input.data as Date).getTime()),
     };
   }
 
@@ -995,8 +1048,9 @@ export interface ZodUndefinedDef extends ZodTypeDef {
 
 export class ZodUndefined extends ZodType<undefined, ZodUndefinedDef> {
   _parse(input: ParseInput): ParseReturnType<this["_output"]> {
-    const { ctx } = this._processInputParams(input);
-    if (ctx.parsedType !== ZodParsedType.undefined) {
+    const parsedType = this._getType(input);
+    if (parsedType !== ZodParsedType.undefined) {
+      const ctx = this._getOrReturnCtx(input);
       addIssueToContext(ctx, {
         code: ZodIssueCode.invalid_type,
         expected: ZodParsedType.undefined,
@@ -1004,7 +1058,7 @@ export class ZodUndefined extends ZodType<undefined, ZodUndefinedDef> {
       });
       return INVALID;
     }
-    return OK(ctx.data);
+    return OK(input.data);
   }
   params?: RawCreateParams;
 
@@ -1029,8 +1083,9 @@ export interface ZodNullDef extends ZodTypeDef {
 
 export class ZodNull extends ZodType<null, ZodNullDef> {
   _parse(input: ParseInput): ParseReturnType<this["_output"]> {
-    const { ctx } = this._processInputParams(input);
-    if (ctx.parsedType !== ZodParsedType.null) {
+    const parsedType = this._getType(input);
+    if (parsedType !== ZodParsedType.null) {
+      const ctx = this._getOrReturnCtx(input);
       addIssueToContext(ctx, {
         code: ZodIssueCode.invalid_type,
         expected: ZodParsedType.null,
@@ -1038,7 +1093,7 @@ export class ZodNull extends ZodType<null, ZodNullDef> {
       });
       return INVALID;
     }
-    return OK(ctx.data);
+    return OK(input.data);
   }
   static create = (params?: RawCreateParams): ZodNull => {
     return new ZodNull({
@@ -1063,8 +1118,7 @@ export class ZodAny extends ZodType<any, ZodAnyDef> {
   // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.
   _any: true = true;
   _parse(input: ParseInput): ParseReturnType<this["_output"]> {
-    const { ctx } = this._processInputParams(input);
-    return OK(ctx.data);
+    return OK(input.data);
   }
   static create = (params?: RawCreateParams): ZodAny => {
     return new ZodAny({
@@ -1089,8 +1143,7 @@ export class ZodUnknown extends ZodType<unknown, ZodUnknownDef> {
   // required
   _unknown: true = true;
   _parse(input: ParseInput): ParseReturnType<this["_output"]> {
-    const { ctx } = this._processInputParams(input);
-    return OK(ctx.data);
+    return OK(input.data);
   }
 
   static create = (params?: RawCreateParams): ZodUnknown => {
@@ -1114,7 +1167,7 @@ export interface ZodNeverDef extends ZodTypeDef {
 
 export class ZodNever extends ZodType<never, ZodNeverDef> {
   _parse(input: ParseInput): ParseReturnType<this["_output"]> {
-    const { ctx } = this._processInputParams(input);
+    const ctx = this._getOrReturnCtx(input);
     addIssueToContext(ctx, {
       code: ZodIssueCode.invalid_type,
       expected: ZodParsedType.never,
@@ -1143,8 +1196,9 @@ export interface ZodVoidDef extends ZodTypeDef {
 
 export class ZodVoid extends ZodType<void, ZodVoidDef> {
   _parse(input: ParseInput): ParseReturnType<this["_output"]> {
-    const { ctx } = this._processInputParams(input);
-    if (ctx.parsedType !== ZodParsedType.undefined) {
+    const parsedType = this._getType(input);
+    if (parsedType !== ZodParsedType.undefined) {
+      const ctx = this._getOrReturnCtx(input);
       addIssueToContext(ctx, {
         code: ZodIssueCode.invalid_type,
         expected: ZodParsedType.void,
@@ -1152,7 +1206,7 @@ export class ZodVoid extends ZodType<void, ZodVoidDef> {
       });
       return INVALID;
     }
-    return OK(ctx.data);
+    return OK(input.data);
   }
 
   static create = (params?: RawCreateParams): ZodVoid => {
@@ -1197,7 +1251,7 @@ export class ZodArray<
     : T["_input"][]
 > {
   _parse(input: ParseInput): ParseReturnType<this["_output"]> {
-    const { status, ctx } = this._processInputParams(input);
+    const { ctx, status } = this._processInputParams(input);
 
     const def = this._def;
 
@@ -1236,7 +1290,7 @@ export class ZodArray<
       }
     }
 
-    if (ctx.async) {
+    if (ctx.common.async) {
       return Promise.all(
         (ctx.data as any[]).map((item, i) => {
           return def.type._parseAsync({
@@ -1475,8 +1529,9 @@ export class ZodObject<
   }
 
   _parse(input: ParseInput): ParseReturnType<this["_output"]> {
-    const { status, ctx } = this._processInputParams(input);
-    if (ctx.parsedType !== ZodParsedType.object) {
+    const parsedType = this._getType(input);
+    if (parsedType !== ZodParsedType.object) {
+      const ctx = this._getOrReturnCtx(input);
       addIssueToContext(ctx, {
         code: ZodIssueCode.invalid_type,
         expected: ZodParsedType.object,
@@ -1485,6 +1540,8 @@ export class ZodObject<
       return INVALID;
     }
 
+    const { status, ctx } = this._processInputParams(input);
+
     const { shape, keys: shapeKeys } = this._getCached();
     const dataKeys = util.objectKeys(ctx.data);
     const extraKeys = dataKeys.filter((k) => !shapeKeys.includes(k));
@@ -1546,7 +1603,7 @@ export class ZodObject<
       }
     }
 
-    if (ctx.async) {
+    if (ctx.common.async) {
       return Promise.resolve()
         .then(async () => {
           const syncPairs: any[] = [];
@@ -1841,14 +1898,14 @@ export class ZodUnion<T extends ZodUnionOptions> extends ZodType<
         if (result.result.status === "dirty") {
           // add issues from dirty option
 
-          ctx.issues.push(...result.ctx.issues);
+          ctx.common.issues.push(...result.ctx.common.issues);
           return result.result;
         }
       }
 
       // return invalid
       const unionErrors = results.map(
-        (result) => new ZodError(result.ctx.issues)
+        (result) => new ZodError(result.ctx.common.issues)
       );
 
       addIssueToContext(ctx, {
@@ -1858,12 +1915,15 @@ export class ZodUnion<T extends ZodUnionOptions> extends ZodType<
       return INVALID;
     }
 
-    if (ctx.async) {
+    if (ctx.common.async) {
       return Promise.all(
         options.map(async (option) => {
           const childCtx: ParseContext = {
             ...ctx,
-            issues: [],
+            common: {
+              ...ctx.common,
+              issues: [],
+            },
             parent: null,
           };
           return {
@@ -1883,7 +1943,10 @@ export class ZodUnion<T extends ZodUnionOptions> extends ZodType<
       for (const option of options) {
         const childCtx: ParseContext = {
           ...ctx,
-          issues: [],
+          common: {
+            ...ctx.common,
+            issues: [],
+          },
           parent: null,
         };
         const result = option._parseSync({
@@ -1898,13 +1961,13 @@ export class ZodUnion<T extends ZodUnionOptions> extends ZodType<
           dirty = { result, ctx: childCtx };
         }
 
-        if (childCtx.issues.length) {
-          issues.push(childCtx.issues);
+        if (childCtx.common.issues.length) {
+          issues.push(childCtx.common.issues);
         }
       }
 
       if (dirty) {
-        ctx.issues.push(...dirty.ctx.issues);
+        ctx.common.issues.push(...dirty.ctx.common.issues);
         return dirty.result;
       }
 
@@ -1997,7 +2060,7 @@ export class ZodDiscriminatedUnion<
       return INVALID;
     }
 
-    if (ctx.async) {
+    if (ctx.common.async) {
       return option._parseAsync({
         data: ctx.data,
         path: ctx.path,
@@ -2182,7 +2245,7 @@ export class ZodIntersection<
       return { status: status.value, value: merged.data as any };
     };
 
-    if (ctx.async) {
+    if (ctx.common.async) {
       return Promise.all([
         this._def.left._parseAsync({
           data: ctx.data,
@@ -2317,7 +2380,7 @@ export class ZodTuple<
       })
       .filter((x) => !!x); // filter nulls
 
-    if (ctx.async) {
+    if (ctx.common.async) {
       return Promise.all(items).then((results) => {
         return ParseStatus.mergeArray(status, results);
       });
@@ -2422,7 +2485,7 @@ export class ZodRecord<
       });
     }
 
-    if (ctx.async) {
+    if (ctx.common.async) {
       return ParseStatus.mergeObjectAsync(status, pairs);
     } else {
       return ParseStatus.mergeObjectSync(status, pairs as any);
@@ -2516,7 +2579,7 @@ export class ZodMap<
       }
     );
 
-    if (ctx.async) {
+    if (ctx.common.async) {
       const finalMap = new Map();
       return Promise.resolve().then(async () => {
         for (const pair of pairs) {
@@ -2642,7 +2705,7 @@ export class ZodSet<Value extends ZodTypeAny = ZodTypeAny> extends ZodType<
       valueType._parse({ data: item, path: [...ctx.path, i], parent: ctx })
     );
 
-    if (ctx.async) {
+    if (ctx.common.async) {
       return Promise.all(elements).then((elements) => finalizeSet(elements));
     } else {
       return finalizeSet(elements as SyncParseReturnType[]);
@@ -2739,7 +2802,7 @@ export class ZodFunction<
         data: args,
         path: ctx.path,
         errorMaps: [
-          ctx.contextualErrorMap,
+          ctx.common.contextualErrorMap,
           ctx.schemaErrorMap,
           overrideErrorMap,
           defaultErrorMap,
@@ -2756,7 +2819,7 @@ export class ZodFunction<
         data: returns,
         path: ctx.path,
         errorMaps: [
-          ctx.contextualErrorMap,
+          ctx.common.contextualErrorMap,
           ctx.schemaErrorMap,
           overrideErrorMap,
           defaultErrorMap,
@@ -2768,7 +2831,7 @@ export class ZodFunction<
       });
     }
 
-    const params = { errorMap: ctx.contextualErrorMap };
+    const params = { errorMap: ctx.common.contextualErrorMap };
     const fn = ctx.data;
 
     if (this._def.returns instanceof ZodPromise) {
@@ -2920,8 +2983,8 @@ export interface ZodLiteralDef<T extends any = any> extends ZodTypeDef {
 
 export class ZodLiteral<T extends any> extends ZodType<T, ZodLiteralDef<T>> {
   _parse(input: ParseInput): ParseReturnType<this["_output"]> {
-    const { status, ctx } = this._processInputParams(input);
-    if (ctx.data !== this._def.value) {
+    if (input.data !== this._def.value) {
+      const ctx = this._getOrReturnCtx(input);
       addIssueToContext(ctx, {
         code: ZodIssueCode.invalid_type,
         expected: getParsedType(this._def.value),
@@ -2929,7 +2992,7 @@ export class ZodLiteral<T extends any> extends ZodType<T, ZodLiteralDef<T>> {
       });
       return INVALID;
     }
-    return { status: status.value, value: ctx.data };
+    return { status: "valid", value: input.data };
   }
 
   get value() {
@@ -2990,15 +3053,15 @@ export class ZodEnum<T extends [string, ...string[]]> extends ZodType<
   ZodEnumDef<T>
 > {
   _parse(input: ParseInput): ParseReturnType<this["_output"]> {
-    const { ctx } = this._processInputParams(input);
-    if (this._def.values.indexOf(ctx.data) === -1) {
+    if (this._def.values.indexOf(input.data) === -1) {
+      const ctx = this._getOrReturnCtx(input);
       addIssueToContext(ctx, {
         code: ZodIssueCode.invalid_enum_value,
         options: this._def.values,
       });
       return INVALID;
     }
-    return OK(ctx.data);
+    return OK(input.data);
   }
 
   get options() {
@@ -3052,16 +3115,16 @@ export class ZodNativeEnum<T extends EnumLike> extends ZodType<
   ZodNativeEnumDef<T>
 > {
   _parse(input: ParseInput): ParseReturnType<T[keyof T]> {
-    const { ctx } = this._processInputParams(input);
     const nativeEnumValues = util.getValidEnumValues(this._def.values);
-    if (nativeEnumValues.indexOf(ctx.data) === -1) {
+    if (nativeEnumValues.indexOf(input.data) === -1) {
+      const ctx = this._getOrReturnCtx(input);
       addIssueToContext(ctx, {
         code: ZodIssueCode.invalid_enum_value,
         options: util.objectValues(nativeEnumValues),
       });
       return INVALID;
     }
-    return OK(ctx.data);
+    return OK(input.data);
   }
 
   get enum() {
@@ -3100,7 +3163,10 @@ export class ZodPromise<T extends ZodTypeAny> extends ZodType<
 > {
   _parse(input: ParseInput): ParseReturnType<this["_output"]> {
     const { ctx } = this._processInputParams(input);
-    if (ctx.parsedType !== ZodParsedType.promise && ctx.async === false) {
+    if (
+      ctx.parsedType !== ZodParsedType.promise &&
+      ctx.common.async === false
+    ) {
       addIssueToContext(ctx, {
         code: ZodIssueCode.invalid_type,
         expected: ZodParsedType.promise,
@@ -3118,7 +3184,7 @@ export class ZodPromise<T extends ZodTypeAny> extends ZodType<
       promisified.then((data: any) => {
         return this._def.type.parseAsync(data, {
           path: ctx.path,
-          errorMap: ctx.contextualErrorMap,
+          errorMap: ctx.common.contextualErrorMap,
         });
       })
     );
@@ -3188,7 +3254,7 @@ export class ZodEffects<
     if (effect.type === "preprocess") {
       const processed = effect.transform(ctx.data);
 
-      if (ctx.async) {
+      if (ctx.common.async) {
         return Promise.resolve(processed).then((processed) => {
           return this._def.schema._parseAsync({
             data: processed,
@@ -3227,7 +3293,7 @@ export class ZodEffects<
         // effect: RefinementEffect<any>
       ): any => {
         const result = effect.refinement(acc, checkCtx);
-        if (ctx.async) {
+        if (ctx.common.async) {
           return Promise.resolve(result);
         }
         if (result instanceof Promise) {
@@ -3238,7 +3304,7 @@ export class ZodEffects<
         return acc;
       };
 
-      if (ctx.async === false) {
+      if (ctx.common.async === false) {
         const inner = this._def.schema._parseSync({
           data: ctx.data,
           path: ctx.path,
@@ -3265,7 +3331,7 @@ export class ZodEffects<
     }
 
     if (effect.type === "transform") {
-      if (ctx.async === false) {
+      if (ctx.common.async === false) {
         const base = this._def.schema._parseSync({
           data: ctx.data,
           path: ctx.path,
@@ -3351,10 +3417,11 @@ export class ZodOptional<T extends ZodTypeAny> extends ZodType<
   T["_input"] | undefined
 > {
   _parse(input: ParseInput): ParseReturnType<this["_output"]> {
-    const { ctx } = this._processInputParams(input);
-    if (ctx.parsedType === ZodParsedType.undefined) {
+    const parsedType = this._getType(input);
+    if (parsedType === ZodParsedType.undefined) {
       return OK(undefined);
     }
+    const { ctx } = this._processInputParams(input);
     return this._def.innerType._parse({
       data: ctx.data,
       path: ctx.path,
@@ -3399,10 +3466,11 @@ export class ZodNullable<T extends ZodTypeAny> extends ZodType<
   T["_input"] | null
 > {
   _parse(input: ParseInput): ParseReturnType<this["_output"]> {
-    const { ctx } = this._processInputParams(input);
-    if (ctx.parsedType === ZodParsedType.null) {
+    const parsedType = this._getType(input);
+    if (parsedType === ZodParsedType.null) {
       return OK(null);
     }
+    const { ctx } = this._processInputParams(input);
     return this._def.innerType._parse({
       data: ctx.data,
       path: ctx.path,
@@ -3488,8 +3556,9 @@ export interface ZodNaNDef extends ZodTypeDef {
 
 export class ZodNaN extends ZodType<number, ZodNaNDef> {
   _parse(input: ParseInput): ParseReturnType<any> {
-    const { status, ctx } = this._processInputParams(input);
-    if (ctx.parsedType !== ZodParsedType.nan) {
+    const parsedType = this._getType(input);
+    if (parsedType !== ZodParsedType.nan) {
+      const ctx = this._getOrReturnCtx(input);
       addIssueToContext(ctx, {
         code: ZodIssueCode.invalid_type,
         expected: ZodParsedType.nan,
@@ -3498,7 +3567,7 @@ export class ZodNaN extends ZodType<number, ZodNaNDef> {
       return INVALID;
     }
 
-    return { status: status.value, value: ctx.data };
+    return { status: "valid", value: input.data };
   }
 
   static create = (params?: RawCreateParams): ZodNaN => {
diff --git a/yarn.lock b/yarn.lock
index ff5973588..a8b8da76d 100644
--- a/yarn.lock
+++ b/yarn.lock
@@ -4989,6 +4989,17 @@ table@^6.0.9:
     string-width "^4.2.3"
     strip-ansi "^6.0.1"
 
+table@^6.8.0:
+  version "6.8.0"
+  resolved "https://registry.yarnpkg.com/table/-/table-6.8.0.tgz#87e28f14fa4321c3377ba286f07b79b281a3b3ca"
+  integrity sha512-s/fitrbVeEyHKFa7mFdkuQMWlH1Wgw/yEXMt5xACT4ZpzWFluehAxRtUUQKPuWhaLAWhFcVx6w3oC8VKaUfPGA==
+  dependencies:
+    ajv "^8.0.1"
+    lodash.truncate "^4.4.2"
+    slice-ansi "^4.0.0"
+    string-width "^4.2.3"
+    strip-ansi "^6.0.1"
+
 tapable@^2.0.0, tapable@^2.2.0:
   version "2.2.1"
   resolved "https://registry.npmjs.org/tapable/-/tapable-2.2.1.tgz"
