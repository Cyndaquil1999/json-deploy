diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml
index 17ce471a7ea..fec1690b933 100644
--- a/.github/workflows/ci.yml
+++ b/.github/workflows/ci.yml
@@ -3,10 +3,8 @@ name: ci
 on:
   push:
     branches: [main]
-    paths-ignore: [www/**]
   pull_request:
     branches: [main]
-    paths-ignore: [www/**]
 
 jobs:
   test:
@@ -38,7 +36,7 @@ jobs:
 
       - name: Cache dependencies
         if: startsWith(matrix.os, 'ubuntu') && matrix.deno == 'v1.x'
-        run: deno cache --no-check --import-map=./www/import_map.json src/dev/deps.ts src/server/deps.ts www/main.ts
+        run: deno cache --config=www/deno.json src/dev/deps.ts src/server/deps.ts www/main.ts
 
       - name: Cache Chrome (Linux)
         if: startsWith(matrix.os, 'ubuntu')
@@ -73,7 +71,7 @@ jobs:
         run: set "PUPPETEER_PRODUCT=chrome" && deno run -A --unstable https://deno.land/x/puppeteer@16.2.0/install.ts
 
       - name: Run tests
-        run: deno test -A
+        run: deno test -A --parallel
 
       - name: Type check init script
         run: deno check --remote init.ts
@@ -82,9 +80,9 @@ jobs:
         run: deno check main.ts dev.ts
         working-directory: www/
 
-      - name: Type check examples/counter
+      - name: Type check demo
         run: deno check --remote main.ts dev.ts
-        working-directory: examples/counter
+        working-directory: demo
 
       - name: Type check tests/fixture
         run: deno check main.ts dev.ts
diff --git a/.github/workflows/www.yml b/.github/workflows/www.yml
deleted file mode 100644
index a8f7b6f1dbc..00000000000
--- a/.github/workflows/www.yml
+++ /dev/null
@@ -1,37 +0,0 @@
-name: www
-
-on:
-  push:
-    branches: [main]
-    paths: [www/**]
-  pull_request:
-    branches: [main]
-    paths: [www/**]
-
-jobs:
-  test:
-    runs-on: ubuntu-latest
-    timeout-minutes: 5
-
-    steps:
-      - name: Checkout repo
-        uses: actions/checkout@v3
-
-      - name: Setup Deno
-        uses: denoland/setup-deno@v1
-
-      - name: Verify formatting
-        run: deno fmt --check
-        working-directory: www/
-
-      - name: Run linter
-        run: deno lint
-        working-directory: www/
-
-      - name: Type check website
-        run: deno check main.ts dev.ts
-        working-directory: www/
-
-      - name: Run tests
-        run: deno test -A
-        working-directory: www/
diff --git a/.vscode/import_map.json b/.vscode/import_map.json
index f7937c91f59..92204dd8d61 100644
--- a/.vscode/import_map.json
+++ b/.vscode/import_map.json
@@ -6,11 +6,11 @@
     "$fresh/": "../",
     "twind": "https://esm.sh/twind@0.16.19",
     "twind/": "https://esm.sh/twind@0.16.19/",
-    "preact": "https://esm.sh/preact@10.13.1",
-    "preact/": "https://esm.sh/preact@10.13.1/",
-    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@5.2.6",
+    "preact": "https://esm.sh/preact@10.15.1",
+    "preact/": "https://esm.sh/preact@10.15.1/",
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.1.0",
     "@preact/signals": "https://esm.sh/*@preact/signals@1.1.3",
     "@preact/signals-core": "https://esm.sh/@preact/signals-core@1.2.3",
-    "$std/": "https://deno.land/std@0.178.0/"
+    "$std/": "https://deno.land/std@0.190.0/"
   }
 }
diff --git a/README.md b/README.md
index 5b577df73c7..281019dbe8c 100644
--- a/README.md
+++ b/README.md
@@ -28,10 +28,10 @@ The [documentation](https://fresh.deno.dev/docs/) is available on
 Install [Deno CLI](https://deno.land/) version 1.25.0 or higher.
 
 You can scaffold a new project by running the Fresh init script. To scaffold a
-project in the `deno-fresh-demo` folder, run the following:
+project run the following:
 
 ```sh
-deno run -A -r https://fresh.deno.dev deno-fresh-demo
+deno run -A -r https://fresh.deno.dev
 ```
 
 Then navigate to the newly created project folder:
@@ -90,7 +90,12 @@ preferably with source code on GitHub, but not required.
 
 ```html
 <a href="https://fresh.deno.dev">
-   <img width="197" height="37" src="https://fresh.deno.dev/fresh-badge.svg" alt="Made with Fresh" />
+  <img
+    width="197"
+    height="37"
+    src="https://fresh.deno.dev/fresh-badge.svg"
+    alt="Made with Fresh"
+  />
 </a>
 ```
 
@@ -102,6 +107,11 @@ preferably with source code on GitHub, but not required.
 
 ```html
 <a href="https://fresh.deno.dev">
-   <img width="197" height="37" src="https://fresh.deno.dev/fresh-badge-dark.svg" alt="Made with Fresh" />
+  <img
+    width="197"
+    height="37"
+    src="https://fresh.deno.dev/fresh-badge-dark.svg"
+    alt="Made with Fresh"
+  />
 </a>
 ```
diff --git a/examples/counter/README.md b/demo/README.md
similarity index 100%
rename from examples/counter/README.md
rename to demo/README.md
diff --git a/demo/deno.json b/demo/deno.json
new file mode 100644
index 00000000000..5ca4a4f374f
--- /dev/null
+++ b/demo/deno.json
@@ -0,0 +1,18 @@
+{
+  "lock": false,
+  "tasks": {
+    "start": "deno run -A --watch=static/,routes/ dev.ts"
+  },
+  "imports": {
+    "$fresh/": "../",
+    "preact": "https://esm.sh/preact@10.15.1",
+    "preact/": "https://esm.sh/preact@10.15.1/",
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.1.0",
+    "@preact/signals": "https://esm.sh/*@preact/signals@1.1.3",
+    "@preact/signals-core": "https://esm.sh/@preact/signals-core@1.2.3"
+  },
+  "compilerOptions": {
+    "jsx": "react-jsx",
+    "jsxImportSource": "preact"
+  }
+}
diff --git a/examples/counter/dev.ts b/demo/dev.ts
similarity index 100%
rename from examples/counter/dev.ts
rename to demo/dev.ts
diff --git a/examples/counter/fresh.gen.ts b/demo/fresh.gen.ts
similarity index 72%
rename from examples/counter/fresh.gen.ts
rename to demo/fresh.gen.ts
index 8d5fc01d5a2..15c6c328ba7 100644
--- a/examples/counter/fresh.gen.ts
+++ b/demo/fresh.gen.ts
@@ -2,19 +2,21 @@
 // This file SHOULD be checked into source version control.
 // This file is automatically updated during development when running `dev.ts`.
 
-import config from "./deno.json" assert { type: "json" };
 import * as $0 from "./routes/index.tsx";
+import * as $1 from "./routes/passthrough.tsx";
 import * as $$0 from "./islands/Counter.tsx";
+import * as $$1 from "./islands/Passthrough.tsx";
 
 const manifest = {
   routes: {
     "./routes/index.tsx": $0,
+    "./routes/passthrough.tsx": $1,
   },
   islands: {
     "./islands/Counter.tsx": $$0,
+    "./islands/Passthrough.tsx": $$1,
   },
   baseUrl: import.meta.url,
-  config,
 };
 
 export default manifest;
diff --git a/demo/islands/Counter.tsx b/demo/islands/Counter.tsx
new file mode 100644
index 00000000000..9a325f396b1
--- /dev/null
+++ b/demo/islands/Counter.tsx
@@ -0,0 +1,20 @@
+import { Signal } from "@preact/signals";
+import { IS_BROWSER } from "$fresh/runtime.ts";
+
+interface CounterProps {
+  count: Signal<number>;
+}
+
+export default function Counter({ count }: CounterProps) {
+  return (
+    <div>
+      <p>{count}</p>
+      <button onClick={() => count.value -= 1} disabled={!IS_BROWSER}>
+        -1
+      </button>
+      <button onClick={() => count.value += 1} disabled={!IS_BROWSER}>
+        +1
+      </button>
+    </div>
+  );
+}
diff --git a/demo/islands/Passthrough.tsx b/demo/islands/Passthrough.tsx
new file mode 100644
index 00000000000..39f457dce62
--- /dev/null
+++ b/demo/islands/Passthrough.tsx
@@ -0,0 +1,25 @@
+import { useState } from "preact/hooks";
+import { ComponentChildren } from "preact";
+
+interface PassthroughProps {
+  children: ComponentChildren;
+  n: number;
+}
+
+export default function Passthrough({ children, n }: PassthroughProps) {
+  const [v, set] = useState(0);
+  return (
+    <div
+      class="pass-through"
+      style="background: #85efac; padding: 1rem; border: 4px solid blue; border-radius: .5rem; margin: 1rem;"
+    >
+      <h2>This is an Island #{n}</h2>
+      <button
+        onClick={() => set((v2) => v2 + 1)}
+      >
+        update {v}
+      </button>
+      <div style="padding: 1rem 0">{children}</div>
+    </div>
+  );
+}
diff --git a/examples/counter/main.ts b/demo/main.ts
similarity index 100%
rename from examples/counter/main.ts
rename to demo/main.ts
diff --git a/examples/counter/routes/index.tsx b/demo/routes/index.tsx
similarity index 58%
rename from examples/counter/routes/index.tsx
rename to demo/routes/index.tsx
index 46a70ce1f57..5b2d109eb2a 100644
--- a/examples/counter/routes/index.tsx
+++ b/demo/routes/index.tsx
@@ -1,13 +1,17 @@
+import { useSignal } from "@preact/signals";
 import Counter from "../islands/Counter.tsx";
 
 export default function Home() {
+  const count = useSignal(3);
   return (
     <div>
       <p>
         Welcome to Fresh. Try to update this message in the ./routes/index.tsx
         file, and refresh.
       </p>
-      <Counter start={3} />
+      <Counter count={count} />
+      <Counter count={count} />
+      <Counter count={count} />
     </div>
   );
 }
diff --git a/demo/routes/passthrough.tsx b/demo/routes/passthrough.tsx
new file mode 100644
index 00000000000..468082fe757
--- /dev/null
+++ b/demo/routes/passthrough.tsx
@@ -0,0 +1,55 @@
+import { ComponentChildren } from "preact";
+import Passthrough from "../islands/Passthrough.tsx";
+
+export interface FooProps {
+  children?: ComponentChildren;
+  n: number;
+}
+
+function Foo(props: FooProps) {
+  return (
+    <div style="background: #e6afaf; border: 4px solid red; border-radius: .5rem; padding: 1rem; margin: 1rem;">
+      <h2 class="foobar">This is static server content: #{props.n}</h2>
+      <h3 class="foobar">This is static server content: #{props.n}</h3>
+      {props.children}
+    </div>
+  );
+}
+
+export default function PassthroughPage() {
+  return (
+    <div style="padding: 2rem">
+      <h2>Single</h2>
+      <Passthrough n={1}>
+        <Foo n={1} />
+      </Passthrough>
+
+      <h2>Nested</h2>
+      <Passthrough n={2}>
+        <Foo n={2}>
+          <Passthrough n={3}>
+            <Foo n={3}>
+              <Passthrough n={4}>
+                <Foo n={4} />
+              </Passthrough>
+            </Foo>
+          </Passthrough>
+          <Passthrough n={5}>
+            <Foo n={5}>
+              <Passthrough n={6}>
+                <Foo n={6} />
+              </Passthrough>
+            </Foo>
+          </Passthrough>
+        </Foo>
+      </Passthrough>
+
+      <h2>Island in Island</h2>
+      <Passthrough n={4}>
+        <Passthrough n={5}>
+          <Foo n={4} />
+        </Passthrough>
+      </Passthrough>
+    </div>
+  );
+}
diff --git a/deno.json b/deno.json
index 51e728e7c0d..6ca5be78145 100644
--- a/deno.json
+++ b/deno.json
@@ -1,7 +1,7 @@
 {
   "lock": false,
   "tasks": {
-    "test": "deno test -A && deno check --config=www/deno.json www/main.ts www/dev.ts && deno check init.ts",
+    "test": "deno test -A --parallel && deno check --config=www/deno.json www/main.ts www/dev.ts && deno check init.ts",
     "fixture": "deno run -A --watch=static/,routes/ tests/fixture/dev.ts",
     "www": "deno task --cwd=www start",
     "screenshot": "deno run -A www/utils/screenshot.ts"
diff --git a/docs/concepts/app-wrapper.md b/docs/concepts/app-wrapper.md
index 20df80569d2..28e36640f4d 100644
--- a/docs/concepts/app-wrapper.md
+++ b/docs/concepts/app-wrapper.md
@@ -23,32 +23,3 @@ export default function App({ Component }: AppProps) {
   );
 }
 ```
-
-There is also a possibility to modify the document template by using special
-tags `html`, `Head` or `body`. This can be done in any other Preact component,
-but using it in the application wrapper lets you define one common document
-template.
-
-```tsx
-// routes/_app.tsx
-
-import { asset, Head } from "$fresh/runtime.ts";
-import { AppProps } from "$fresh/src/server/types.ts";
-
-export default function App({ Component }: AppProps) {
-  return (
-    <html data-custom="data">
-      <Head>
-        <title>Fresh</title>
-        <link rel="stylesheet" href={asset("style.css")} />
-      </Head>
-      <body class="bodyClass">
-        <Component />
-      </body>
-    </html>
-  );
-}
-```
-
-Currently, there is no way of overriding default tags/attributes from provided
-template.
diff --git a/docs/concepts/deployment.md b/docs/concepts/deployment.md
index f51bd8ca438..051d0d54b62 100644
--- a/docs/concepts/deployment.md
+++ b/docs/concepts/deployment.md
@@ -44,7 +44,7 @@ ENV DENO_DEPLOYMENT_ID=${GIT_REVISION}
 WORKDIR /app
 
 COPY . .
-RUN deno cache main.ts --import-map=import_map.json
+RUN deno cache main.ts
 
 EXPOSE 8000
 
diff --git a/docs/concepts/islands.md b/docs/concepts/islands.md
index 5e30d135b55..39f4f08c1d5 100644
--- a/docs/concepts/islands.md
+++ b/docs/concepts/islands.md
@@ -14,15 +14,15 @@ island. The file must have a default export that is a regular Preact component.
 ```tsx
 // islands/MyIsland.tsx
 
-import { useState } from "preact/hooks";
+import type { Signal } from "@preact/signals";
 
 export default function MyIsland() {
-  const [count, setCount] = useState(0);
+  const count = useSignal(0);
 
   return (
     <div>
       Counter is at {count}.{" "}
-      <button onClick={() => setCount(count + 1)}>+</button>
+      <button onClick={() => (count.value += 1)}>+</button>
     </div>
   );
 }
@@ -31,10 +31,87 @@ export default function MyIsland() {
 An island can be used in a page like a regular Preact component. Fresh will take
 care of automatically re-hydrating the island on the client.
 
-Passing props to islands is supported, but only if the props are JSON
-serializable. This means that you can only pass primitive types, plain objects,
-and arrays. It is currently not possible to pass complex objects like `Date`,
-custom classes, or functions. This means that it is not possible to pass
-`children` to an island, as `children` are VNodes, which are not serializable.
+Passing props to islands is supported, but only if the props are serializable.
+Fresh can serialize the following types of values:
 
-It is also not supported to nest islands within other islands.
+- Primitive types `string`, `boolean`, and `null`
+- Most `number`s (`Infinity`, `-Infinity`, and `NaN` are silently converted to
+  `null`, and `bigint`s are not supported)
+- Plain objects with string keys and serializable values
+- Arrays containing serializable values
+- Uint8Array
+- JSX Elements (restricted to `props.children`)
+- Preact Signals (if the inner value is serializable)
+
+Circular references are supported. If an object or signal is referenced multiple
+times, it is only serialized once and the references are restored upon
+deserialization. Passing complex objects like `Date`, custom classes, or
+functions is not supported.
+
+## Passing JSX to islands
+
+Islands support passing JSX elements via the `children` property. This allows
+you to pass static content rendered by the server to an island in the browser.
+
+```jsx
+// file: /route/index.tsx
+import MyIsland from "../islands/my-island.tsx";
+
+export default function Home() {
+  return (
+    <MyIsland>
+      <p>This text is rendered on the server</p>
+    </MyIsland>
+  );
+}
+```
+
+We can deduce which parts were rendered by the server and which parts where
+rendered by an island from the HTML alone. It contains all the information we
+need, which allows us to skip the work of having to send a serialized version of
+`props.children` to the browser.
+
+### Nesting islands
+
+Islands can be nested within other islands as well. In that scenario they act
+like a normal Preact component, but still receive the serialized props if any
+were present.
+
+```jsx
+// file: /route/index.tsx
+import MyIsland from "../islands/my-island.tsx";
+import OtherIsland from "../islands/other-island.tsx";
+
+export default function Home() {
+  return (
+    <MyIsland>
+      <OtherIsland foo="this prop will be serialized">
+        <p>This text is rendered on the server</p>
+      </OtherIsland>
+    </MyIsland>
+  );
+}
+```
+
+In essence, fresh allows you to mix static and interactive parts in your app in
+a way that's most optimal for your use app. We'll keep sending only the
+JavaScript that is needed for the islands to the browser.
+
+```jsx
+// file: /route/index.tsx
+import MyIsland from "../islands/my-island.tsx";
+import OtherIsland from "../islands/other-island.tsx";
+
+export default function Home() {
+  return (
+    <MyIsland>
+      <div>
+        <h1>Rendered by server</h1>
+        <OtherIsland>
+          <p>also rendered by server</p>
+        </OtherIsland>
+      </div>
+    </MyIsland>
+  );
+}
+```
diff --git a/docs/concepts/plugins.md b/docs/concepts/plugins.md
index d1f31ec3d78..4ce4d7d6508 100644
--- a/docs/concepts/plugins.md
+++ b/docs/concepts/plugins.md
@@ -99,3 +99,29 @@ serializable JavaScript value.
 
 For an example of a plugin that uses the `render` hook, see the first-party
 [Twind plugin](https://github.com/denoland/fresh/blob/main/plugins/twind.ts).
+
+### Hook: `renderAsync`
+
+This hook is largely the same as the `render` hook, with a couple of key
+differences to make asynchronous style and script generation possible. It must
+asynchronously return its
+[`PluginRenderResult`](https://deno.land/x/fresh/server.ts?s=PluginRenderResult),
+either from an `async/await` function or wrapped within a promise.
+
+The render hook is called with the
+[`AsyncPluginRenderContext`](https://deno.land/x/fresh/server.ts?s=AsyncPluginRenderContext)
+object, which contains a `renderAsync()` method. This method must be invoked
+during the render hook to actually render the page. It is a terminal error to
+not call the `renderAsync()` method during the render hook.
+
+This is useful for when plugins are generating styles and scripts with
+asynchronous dependencies based on the `htmlText`. Unlike the synchronous render
+hook, async render hooks for multiple pages can be running at the same time.
+This means that unlike the synchronous render hook, you can not use global
+variables to propagate state between the render hook and the renderer.
+
+The `renderAsync` hooks start before any page rendering occurs, and finish after
+all rendering is complete -- they wrap around the underlying JSX->string
+rendering, plugin `render` hooks, and the
+[`RenderFunction`](https://deno.land/x/fresh/server.ts?s=RenderFunction) that
+may be provided to Fresh's `start` entrypoint in the `main.ts` file.
diff --git a/docs/concepts/server-configuration.md b/docs/concepts/server-configuration.md
new file mode 100644
index 00000000000..93f446f296f
--- /dev/null
+++ b/docs/concepts/server-configuration.md
@@ -0,0 +1,95 @@
+---
+description: |
+  The ability to configure the core Fresh server leads to its flexibility.
+---
+
+In this page we discuss how the server can be configured during startup.
+
+The signature of the primary method looks like this:
+
+```ts
+export async function start(routes: Manifest, opts: StartOptions = {});
+```
+
+## Options
+
+`Manifest` comes from `fresh.gen.ts`, so nothing to do there. `opts` is where
+things get interesting. `StartOptions` looks like this:
+
+```
+export type StartOptions = ServeInit & FreshOptions & {
+  /**
+   * UNSTABLE: use the `Deno.serve` API as the underlying HTTP server instead of
+   * the `std/http` API. Do not use this in production.
+   *
+   * This option is experimental and may be removed in a future Fresh release.
+   */
+  experimentalDenoServe?: boolean;
+};
+```
+
+You can play around with `Deno.serve` if you'd like, but heed the warning. The
+good stuff is really in...
+
+```ts
+export interface FreshOptions {
+  render?: RenderFunction;
+  plugins?: Plugin[];
+  staticDir?: string;
+  router?: RouterOptions;
+}
+```
+
+And for brevity here are the remaining two types:
+
+```ts
+export type RenderFunction = (
+  ctx: RenderContext,
+  render: InnerRenderFunction,
+) => void | Promise<void>;
+
+export interface RouterOptions {
+  /**
+   *  @default {false}
+   */
+  trailingSlash?: boolean;
+}
+```
+
+## Plugins
+
+See the [docs](./docs/concepts/plugins) on this topic for more detail. But for
+completion, you can do something like this to load plugins:
+
+```ts
+await start(manifest, { plugins: [twindPlugin(twindConfig)] });
+```
+
+## StaticDir
+
+This allows you to specify the location where your site's static assets are
+stored. Here's an example:
+
+```ts
+await start(manifest, { staticDir: "./custom_static" });
+```
+
+## Render
+
+This is by far the most complicated option currently available. It allows you to
+configure how your components get rendered.
+
+A detailed, concrete example of this is changing the language of the `<html>`
+tag. See the documentation [here](./docs/examples/setting-the-language.md).
+
+## RouterOptions
+
+### TrailingSlash
+
+By default Fresh uses URLs like `https://www.example.com/about`. If you'd like,
+you can configure this to `https://www.example.com/about/` by using the
+`trailingSlash` setting.
+
+```ts
+await start(manifest, { router: { trailingSlash: true } });
+```
diff --git a/docs/concepts/updating.md b/docs/concepts/updating.md
index 2a9d0917ff9..44973b77ad7 100644
--- a/docs/concepts/updating.md
+++ b/docs/concepts/updating.md
@@ -18,24 +18,25 @@ For the most part these pieces can be updated independently. Certain versions of
 Fresh may require a minimum version of a given dependency. This is documented
 below.
 
-| Fresh version | Preact           | preact-render-to-string | Deno      |
-| ------------- | ---------------- | ----------------------- | --------- |
-| 1.0.0-1.0.2   | >=10.8.1 <11.0.0 | >=5.2.0 <6.0.0          | >= 1.23.0 |
-| 1.1.0-1.1.5   | >=10.8.1 <11.0.0 | >=5.2.0 <6.0.0          | >= 1.25.0 |
+| Fresh version | Preact            | preact-render-to-string | Deno      |
+| ------------- | ----------------- | ----------------------- | --------- |
+| 1.0.0-1.0.2   | >=10.8.1 <11.0.0  | >=5.2.0 <6.0.0          | >= 1.23.0 |
+| 1.1.0-1.1.5   | >=10.8.1 <11.0.0  | >=5.2.0 <6.0.0          | >= 1.25.0 |
+| 1.2.0         | >=10.15.0 <11.0.0 | >=6.1.0                 | >= 1.25.0 |
 
 ## Updating dependencies
 
 To update your dependencies, you have two options:
 
 - Run the fresh updater to update your project dependencies.
-- Manually update the dependency versions in your `import_map.json` file.
+- Manually update the dependency versions in your `deno.json` file.
 
 ### Auto updater
 
 The auto updater is a command line tool that will update your project's
-`import_map.json` file to the latest versions of Fresh and its dependencies. It
-may also contain code mods for your project that will update your code to the
-latest recommended patterns for Fresh projects.
+`deno.json` file to the latest versions of Fresh and its dependencies. It may
+also contain code mods for your project that will update your code to the latest
+recommended patterns for Fresh projects.
 
 To run the auto updater, run the following command from the root of your
 project:
@@ -48,11 +49,10 @@ You will be prompted to confirm the changes that will be made to your project.
 
 ### Manual update
 
-To manually update your project's dependencies, you can edit the
-`import_map.json` file in the root of your projects directory. Dependency
-versions are encoded into the URLs in this file. For example, here is how to
-update a project from Fresh 1.0.2 to 1.1.3, and update Preact to the latest
-version:
+To manually update your project's dependencies, you can edit the `deno.json`
+file in the root of your projects directory. Dependency versions are encoded
+into the URLs in this file. For example, here is how to update a project from
+Fresh 1.0.2 to 1.1.3, and update Preact to the latest version:
 
 ```diff
   {
@@ -66,7 +66,7 @@ version:
 +     "preact/": "https://esm.sh/preact@10.11.0/",
 
 -     "preact-render-to-string": "https://esm.sh/*preact-render-to-string@5.2.0",
-+     "preact-render-to-string": "https://esm.sh/*preact-render-to-string@5.2.4",
++     "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.1.0",
 
       "twind": "https://esm.sh/twind@0.16.17",
       "twind/": "https://esm.sh/twind@0.16.17/"
diff --git a/docs/examples/changing-the-src-dir.md b/docs/examples/changing-the-src-dir.md
new file mode 100644
index 00000000000..f4501d7bbb6
--- /dev/null
+++ b/docs/examples/changing-the-src-dir.md
@@ -0,0 +1,76 @@
+---
+description: |
+  Change the source directory to effectively manage your project.
+---
+
+When you initialize a project with `deno run -A -r https://fresh.deno.dev`,
+you'll end up with a project like the following:
+
+```
+.
+├── README.md
+├── components
+│   └── Button.tsx
+├── deno.json
+├── dev.ts
+├── fresh.gen.ts
+├── islands
+│   └── Counter.tsx
+├── main.ts
+├── routes
+│   ├── [name].tsx
+│   ├── api
+│   │   └── joke.ts
+│   └── index.tsx
+└── static
+    ├── favicon.ico
+    └── logo.svg
+```
+
+## Using a `src` directory
+
+If you'd like your code to live in an `src` directory (or any other directory of
+your choosing), then you'll need to do the following things:
+
+1. Move all your files, except `deno.json` and `README.md`, to the `src`
+   directory.
+2. Modify the `start` task in `deno.json` to point to the new directory.
+
+Here's what the diff of `deno.json` looks like:
+
+```diff
+ {
+   "lock": false,
+   "tasks": {
+-    "start": "deno run -A --watch=static/,routes/ dev.ts"
++    "start": "deno run -A --watch=src/static/,src/routes/ src/dev.ts"
+   },
+   "imports": {
+     "$fresh/": "file:///Users/reed/code/fresh/",
+```
+
+The resulting file structure looks like this:
+
+```
+.
+├── README.md
+├── deno.json
+└── src
+    ├── components
+    │   └── Button.tsx
+    ├── dev.ts
+    ├── fresh.gen.ts
+    ├── islands
+    │   └── Counter.tsx
+    ├── main.ts
+    ├── routes
+    │   ├── [name].tsx
+    │   ├── api
+    │   │   └── joke.ts
+    │   └── index.tsx
+    └── static
+        ├── favicon.ico
+        └── logo.svg
+```
+
+Success! Your code now lives elsewhere.
diff --git a/docs/examples/index.md b/docs/examples/index.md
new file mode 100644
index 00000000000..852b49201b5
--- /dev/null
+++ b/docs/examples/index.md
@@ -0,0 +1,14 @@
+---
+description: |
+  In this chapter of the Fresh documentation, you can find examples of features that you may like in your Fresh project.
+---
+
+In this chapter of the Fresh documentation, you can find examples of features
+that you may like in your Fresh project. If there's a specific example you'd
+like to see here, please open
+[a GitHub discussion](https://github.com/denoland/fresh/discussions/new?category=ideas).
+
+- [Modifying the `<head>`](./examples/modifying-the-head)
+- [Setting the language](./examples/setting-the-language)
+- [Writing tests](./examples/writing-tests)
+- [Changing the source directory](./changing-the-src-dir.md)
diff --git a/docs/examples/modifying-the-head.md b/docs/examples/modifying-the-head.md
new file mode 100644
index 00000000000..856544a7fdc
--- /dev/null
+++ b/docs/examples/modifying-the-head.md
@@ -0,0 +1,40 @@
+---
+description: |
+  Add components like <title> or <meta> to a <head> tag using Fresh's <Head> component.
+---
+
+We can use the `<Head />` component in `$fresh/runtime.ts` to add elements as
+children of the `<head>` element. By adding elements as children of Fresh's
+`<Head />` tag, these automatically get injected into the `<head>` element of
+the web page. Some uses include:
+
+- Setting the document title using `<title>`
+- Specifying page metadata using `<meta>`
+- Linking to resources like stylesheets using `<link>`
+- Including third-party JavaScript code using `<script>`
+
+```tsx
+// routes/index.tsx
+import { Head } from "$fresh/runtime.ts";
+import Counter from "../islands/Counter.tsx";
+
+export default function Home() {
+  return (
+    <>
+      <Head>
+        <meta charset="UTF-8" />
+        <title>Fresh App</title>
+        <meta
+          name="description"
+          content="This is a brief description of Fresh"
+        />
+        <link rel="stylesheet" href="styles.css" />
+        <script src="script.js"></script>
+      </Head>
+      <div class="p-4 mx-auto max-w-screen-md">
+        <h1>Hello World</h1>
+      </div>
+    </>
+  );
+}
+```
diff --git a/docs/examples/setting-the-language.md b/docs/examples/setting-the-language.md
new file mode 100644
index 00000000000..cb09101259e
--- /dev/null
+++ b/docs/examples/setting-the-language.md
@@ -0,0 +1,52 @@
+---
+description: |
+  Set the lang attribute in the <html> tag.
+---
+
+When you initialize a project with `deno run -A -r https://fresh.deno.dev`,
+you'll end up with a `main.ts` like the following:
+
+```
+/// <reference no-default-lib="true" />
+/// <reference lib="dom" />
+/// <reference lib="dom.iterable" />
+/// <reference lib="dom.asynciterable" />
+/// <reference lib="deno.ns" />
+
+import { start } from "$fresh/server.ts";
+import manifest from "./fresh.gen.ts";
+
+import twindPlugin from "$fresh/plugins/twind.ts";
+import twindConfig from "./twind.config.ts";
+
+await start(manifest, { plugins: [twindPlugin(twindConfig)] });
+```
+
+This is a great start if your site is in English, but let's say you want to
+change the language, as per the `<html lang=asdf>` tag. Then you'll need to do
+something like this:
+
+```
+/// <reference no-default-lib="true" />
+/// <reference lib="dom" />
+/// <reference lib="dom.iterable" />
+/// <reference lib="dom.asynciterable" />
+/// <reference lib="deno.ns" />
+
+import { start } from "$fresh/server.ts";
+import manifest from "./fresh.gen.ts";
+
+import twindPlugin from "$fresh/plugins/twind.ts";
+import twindConfig from "./twind.config.ts";
+
+await start(manifest, {
+  plugins: [twindPlugin(twindConfig)],
+  render: (ctx, render) => {
+    ctx.lang = "de";
+    render();
+  },
+});
+```
+
+If you're curious how this works, start by checking out `TemplateOptions` in
+`render.ts`.
diff --git a/docs/examples/writing-tests.md b/docs/examples/writing-tests.md
new file mode 100644
index 00000000000..7d5a251afbd
--- /dev/null
+++ b/docs/examples/writing-tests.md
@@ -0,0 +1,108 @@
+---
+description: |
+  You can write HTTP tests for your Fresh project by creating an application handler.
+---
+
+You can write tests for your Fresh project by creating an application handler
+through
+[`createHandler()`](https://deno.land/x/fresh/server.ts?doc=&s=createHandler).
+
+## 1. Create your routes
+
+```tsx
+// routes/index.tsx
+
+import { Handlers } from "$fresh/server.ts";
+
+export const handler: Handlers = {
+  async POST(req) {
+    const form = await req.formData();
+
+    // Processing something
+
+    return new Response(null, {
+      status: 303,
+      headers: { location: "/" },
+    });
+  },
+};
+
+export default function HomePage() {
+  return (
+    <div>
+      Hello Deno!
+    </div>
+  );
+}
+```
+
+```tsx
+// routes/foo.tsx
+
+export default function FooPage() {
+  return (
+    <div>
+      Hello Foo!
+    </div>
+  );
+}
+```
+
+## 2. Write your tests
+
+```ts
+// tests/main_test.ts
+
+import { createHandler } from "$fresh/server.ts";
+import manifest from "../fresh.gen.ts";
+import { assert, assertEquals } from "$std/testing/asserts.ts";
+import type { ConnInfo } from "$std/http/server.ts";
+
+const CONN_INFO: ConnInfo = {
+  localAddr: { hostname: "127.0.0.1", port: 8000, transport: "tcp" },
+  remoteAddr: { hostname: "127.0.0.1", port: 53496, transport: "tcp" },
+};
+
+Deno.test("HTTP assert test.", async (t) => {
+  const handler = await createHandler(manifest);
+
+  await t.step("#1 GET /", async () => {
+    const resp = await handler(new Request("http://127.0.0.1/"), CONN_INFO);
+    assertEquals(resp.status, 200);
+  });
+
+  await t.step("#2 POST /", async () => {
+    const formData = new FormData();
+    formData.append("text", "Deno!");
+    const req = new Request("http://127.0.0.1/", {
+      method: "POST",
+      body: formData,
+    });
+    const resp = await handler(req, CONN_INFO);
+    assertEquals(resp.status, 303);
+  });
+
+  await t.step("#3 GET /foo", async () => {
+    const resp = await handler(
+      new Request("http://127.0.0.1/foo"),
+      CONN_INFO,
+    );
+    const text = await resp.text();
+    assert(text.includes("<div>Hello Foo!</div>"));
+  });
+});
+```
+
+## 3. Run the tests
+
+```sh
+$ deno test --allow-read --allow-env --allow-net
+running 1 test from ./tests/main_test.ts
+HTTP assert test. ...
+  #1 GET / ... ok (31ms)
+  #2 POST / ... ok (35ms)
+  #3 GET /foo ... ok (12ms)
+HTTP assert test. ... ok (118ms)
+
+ok | 1 passed (3 steps) | 0 failed (236ms)
+```
diff --git a/docs/getting-started/adding-interactivity.md b/docs/getting-started/adding-interactivity.md
index 981e1c7e635..b840c0cada2 100644
--- a/docs/getting-started/adding-interactivity.md
+++ b/docs/getting-started/adding-interactivity.md
@@ -31,7 +31,8 @@ Here is an example of an island component that counts down to a specific time.
 ```tsx
 // islands/Countdown.tsx
 
-import { useEffect, useState } from "preact/hooks";
+import { useSignal } from "@preact/signals";
+import { useEffect } from "preact/hooks";
 
 const timeFmt = new Intl.RelativeTimeFormat("en-US");
 
@@ -39,30 +40,31 @@ const timeFmt = new Intl.RelativeTimeFormat("en-US");
 // props to island components need to be JSON (de)serializable.
 export default function Countdown(props: { target: string }) {
   const target = new Date(props.target);
-  const [now, setNow] = useState(new Date());
+  const now = useSignal(new Date());
 
   // Set up an interval to update the `now` date every second with the current
   // date as long as the component is mounted.
   useEffect(() => {
     const timer = setInterval(() => {
-      setNow((now) => {
-        if (now > target) {
-          clearInterval(timer);
-        }
-        return new Date();
-      });
+      if (now.value > target) {
+        clearInterval(timer);
+      }
+      now.value = new Date();
     }, 1000);
     return () => clearInterval(timer);
   }, [props.target]);
 
+  const secondsLeft = Math.floor(
+    (target.getTime() - now.value.getTime()) / 1000,
+  );
+
   // If the target date has passed, we stop counting down.
-  if (now > target) {
+  if (secondsLeft <= 0) {
     return <span>🎉</span>;
   }
 
   // Otherwise, we format the remaining time using `Intl.RelativeTimeFormat` and
   // render it.
-  const secondsLeft = Math.floor((target.getTime() - now.getTime()) / 1000);
   return <span>{timeFmt.format(secondsLeft, "seconds")}</span>;
 }
 ```
diff --git a/docs/getting-started/create-a-project.md b/docs/getting-started/create-a-project.md
index 34f8ef08924..30e998f5dfd 100644
--- a/docs/getting-started/create-a-project.md
+++ b/docs/getting-started/create-a-project.md
@@ -10,8 +10,8 @@ will scaffold out a new project with some example files to get you started.
 To create a new project, run:
 
 ```
-deno run -A -r https://fresh.deno.dev my-project
-cd my-project
+deno run -A -r https://fresh.deno.dev
+cd fresh-project
 deno task start
 ```
 
@@ -30,15 +30,13 @@ files that are strictly necessary to run a fresh project:
 - **`fresh.gen.ts`**: This is the manifest file that contains information about
   your routes and islands. This file is automatically generated in development
   based on your `routes/` and `islands/` folders.
-- **`import_map.json`**: This is an [import map][import-map] that is used to
-  manage dependencies for the project. This allows for easy importing and
-  updating of dependencies.
 
 A **`deno.json`** file is also created in the project directory. This file does
 two things:
 
-- It tells Deno about the location of the import map, so that it can be loaded
-  automatically.
+- It defines the "imports" field. This is an [import map][import-map] that is
+  used to manage dependencies for the project. This allows for easy importing
+  and updating of dependencies.
 - It registers a "start" [task][task-runner] to run the project without having
   to type a long `deno run` command.
 
diff --git a/docs/getting-started/custom-handlers.md b/docs/getting-started/custom-handlers.md
index 766af258355..169803df8a1 100644
--- a/docs/getting-started/custom-handlers.md
+++ b/docs/getting-started/custom-handlers.md
@@ -33,7 +33,7 @@ then adds a custom header to the response before returning it:
 import { Handlers } from "$fresh/server.ts";
 
 export const handler: Handlers = {
-  async GET(req, ctx) {
+  async GET(_req, ctx) {
     const resp = await ctx.render();
     resp.headers.set("X-Custom-Header", "Hello");
     return resp;
@@ -60,7 +60,7 @@ response:
 import { Handlers } from "$fresh/server.ts";
 
 export const handler: Handlers = {
-  GET(req) {
+  GET(_req) {
     const uuid = crypto.randomUUID();
     return new Response(JSON.stringify(uuid), {
       headers: { "Content-Type": "application/json" },
diff --git a/docs/getting-started/running-locally.md b/docs/getting-started/running-locally.md
index 4e4d32191e6..a8646393dab 100644
--- a/docs/getting-started/running-locally.md
+++ b/docs/getting-started/running-locally.md
@@ -11,7 +11,8 @@ automatically read from `.env`.
 ```
 $ deno task start
 Watcher Process started.
-Listening on http://localhost:8000
+ 🍋 Fresh ready
+     Local: http://localhost:8000
 ```
 
 If you want to start manually without Deno task, `deno run` the `main.ts` with
@@ -41,12 +42,19 @@ call in `main.ts` to include an explicit port number:
 await start(manifest, { port: 3000 });
 ```
 
+You can also change the port by setting the `PORT` environment variable:
+
+```
+$ PORT=3000 deno task start
+```
+
 Combining all of this we get the following `deno run` command:
 
 ```
 $ deno run --allow-net --allow-read --allow-env --allow-run --watch=static/,routes/ main.ts
 Watcher Process started.
-Listening on http://localhost:8000
+ 🍋 Fresh ready
+     Local: http://localhost:8000
 ```
 
 If you now visit http://localhost:8000, you can see the running project. Try
diff --git a/docs/toc.json b/docs/toc.json
index 5ec37a830d9..5238120a756 100644
--- a/docs/toc.json
+++ b/docs/toc.json
@@ -31,10 +31,20 @@
       ["deployment", "Deployment"],
       ["plugins", "Plugins"],
       ["updating", "Updating Fresh"],
-      ["app-wrapper", "Application wrapper"]
+      ["app-wrapper", "Application wrapper"],
+      ["server-configuration", "Server configuration"]
     ]
   },
   "integrations": {
     "title": "Integrations"
+  },
+  "examples": {
+    "title": "Examples",
+    "pages": [
+      ["modifying-the-head", "Modifying the <head>"],
+      ["setting-the-language", "Setting the language"],
+      ["writing-tests", "Writing tests"],
+      ["changing-the-src-dir", "Changing the source directory"]
+    ]
   }
 }
diff --git a/examples/counter/deno.json b/examples/counter/deno.json
deleted file mode 100644
index b691b285acd..00000000000
--- a/examples/counter/deno.json
+++ /dev/null
@@ -1,11 +0,0 @@
-{
-  "lock": false,
-  "tasks": {
-    "start": "deno run -A --watch=static/,routes/ dev.ts"
-  },
-  "importMap": "./import_map.json",
-  "compilerOptions": {
-    "jsx": "react-jsx",
-    "jsxImportSource": "preact"
-  }
-}
diff --git a/examples/counter/import_map.json b/examples/counter/import_map.json
deleted file mode 100644
index bf3f2f997b9..00000000000
--- a/examples/counter/import_map.json
+++ /dev/null
@@ -1,8 +0,0 @@
-{
-  "imports": {
-    "$fresh/": "../../",
-    "preact": "https://esm.sh/preact@10.13.1",
-    "preact/": "https://esm.sh/preact@10.13.1/",
-    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@5.2.6"
-  }
-}
diff --git a/examples/counter/islands/Counter.tsx b/examples/counter/islands/Counter.tsx
deleted file mode 100644
index 8f78ff43d29..00000000000
--- a/examples/counter/islands/Counter.tsx
+++ /dev/null
@@ -1,21 +0,0 @@
-import { useState } from "preact/hooks";
-import { IS_BROWSER } from "$fresh/runtime.ts";
-
-interface CounterProps {
-  start: number;
-}
-
-export default function Counter(props: CounterProps) {
-  const [count, setCount] = useState(props.start);
-  return (
-    <div>
-      <p>{count}</p>
-      <button onClick={() => setCount(count - 1)} disabled={!IS_BROWSER}>
-        -1
-      </button>
-      <button onClick={() => setCount(count + 1)} disabled={!IS_BROWSER}>
-        +1
-      </button>
-    </div>
-  );
-}
diff --git a/init.ts b/init.ts
index 1d892653a86..7f78eac7122 100644
--- a/init.ts
+++ b/init.ts
@@ -21,7 +21,7 @@ To generate a project in the current directory:
   fresh-init .
 
 USAGE:
-    fresh-init <DIRECTORY>
+    fresh-init [DIRECTORY]
 
 OPTIONS:
     --force   Overwrite existing files
@@ -42,17 +42,22 @@ const flags = parse(Deno.args, {
   default: { "force": null, "twind": null, "vscode": null },
 });
 
-if (flags._.length !== 1) {
-  error(help);
-}
-
 console.log(
   `\n%c  🍋 Fresh: the next-gen web framework.  %c\n`,
   "background-color: #86efac; color: black; font-weight: bold",
   "",
 );
 
-const unresolvedDirectory = Deno.args[0];
+let unresolvedDirectory = Deno.args[0];
+if (flags._.length !== 1) {
+  const userInput = prompt("Project Name", "fresh-project");
+  if (!userInput) {
+    error(help);
+  }
+
+  unresolvedDirectory = userInput;
+}
+
 const resolvedDirectory = resolve(unresolvedDirectory);
 
 try {
@@ -101,20 +106,12 @@ await Deno.writeTextFile(
   GITIGNORE,
 );
 
-const importMap = { imports: {} as Record<string, string> };
-freshImports(importMap.imports);
-if (useTwind) twindImports(importMap.imports);
-dotenvImports(importMap.imports);
-const IMPORT_MAP_JSON = JSON.stringify(importMap, null, 2) + "\n";
-await Deno.writeTextFile(
-  join(resolvedDirectory, "import_map.json"),
-  IMPORT_MAP_JSON,
-);
-
 const ROUTES_INDEX_TSX = `import { Head } from "$fresh/runtime.ts";
+import { useSignal } from "@preact/signals";
 import Counter from "../islands/Counter.tsx";
 
 export default function Home() {
+  const count = useSignal(3);
   return (
     <>
       <Head>
@@ -132,7 +129,7 @@ export default function Home() {
           Welcome to \`fresh\`. Try updating this message in the
           ./routes/index.tsx file, and refresh.
         </p>
-        <Counter start={3} />
+        <Counter count={count} />
       </div>
     </>
   );
@@ -164,20 +161,21 @@ await Deno.writeTextFile(
   COMPONENTS_BUTTON_TSX,
 );
 
-const ISLANDS_COUNTER_TSX = `import { useState } from "preact/hooks";
+const ISLANDS_COUNTER_TSX = `import type { Signal } from "@preact/signals";
 import { Button } from "../components/Button.tsx";
 
 interface CounterProps {
-  start: number;
+  count: Signal<number>;
 }
 
 export default function Counter(props: CounterProps) {
-  const [count, setCount] = useState(props.start);
   return (
     <div${useTwind ? ' class="flex gap-2 w-full"' : ""}>
-      <p${useTwind ? ' class="flex-grow-1 font-bold text-xl"' : ""}>{count}</p>
-      <Button onClick={() => setCount(count - 1)}>-1</Button>
-      <Button onClick={() => setCount(count + 1)}>+1</Button>
+      <p${
+  useTwind ? ' class="flex-grow-1 font-bold text-xl"' : ""
+}>{props.count}</p>
+      <Button onClick={() => props.count.value -= 1}>-1</Button>
+      <Button onClick={() => props.count.value += 1}>+1</Button>
     </div>
   );
 }
@@ -306,22 +304,32 @@ const config = {
   lock: false,
   tasks: {
     start: "deno run -A --watch=static/,routes/ dev.ts",
+    update: "deno run -A -r https://fresh.deno.dev/update .",
   },
-  importMap: "./import_map.json",
+  imports: {} as Record<string, string>,
   compilerOptions: {
     jsx: "react-jsx",
     jsxImportSource: "preact",
   },
 };
+freshImports(config.imports);
+if (useTwind) twindImports(config.imports);
+dotenvImports(config.imports);
+
 const DENO_CONFIG = JSON.stringify(config, null, 2) + "\n";
 
 await Deno.writeTextFile(join(resolvedDirectory, "deno.json"), DENO_CONFIG);
 
-const README_MD = `# fresh project
+const README_MD = `# Fresh project
+
+Your new Fresh project is ready to go. You can follow the Fresh "Getting
+Started" guide here: https://fresh.deno.dev/docs/getting-started
 
 ### Usage
 
-Start the project:
+Make sure to install Deno: https://deno.land/manual/getting_started/installation
+
+Then start the project:
 
 \`\`\`
 deno task start
diff --git a/src/build/deps.ts b/src/build/deps.ts
new file mode 100644
index 00000000000..c3508eadeca
--- /dev/null
+++ b/src/build/deps.ts
@@ -0,0 +1,20 @@
+// -- $std --
+export {
+  fromFileUrl,
+  toFileUrl,
+} from "https://deno.land/std@0.190.0/path/mod.ts";
+export { escape as regexpEscape } from "https://deno.land/std@0.190.0/regexp/escape.ts";
+
+// -- esbuild --
+// @deno-types="https://deno.land/x/esbuild@v0.17.11/mod.d.ts"
+import * as esbuildWasm from "https://deno.land/x/esbuild@v0.17.19/wasm.js";
+import * as esbuildNative from "https://deno.land/x/esbuild@v0.17.19/mod.js";
+// @ts-ignore trust me
+// deno-lint-ignore no-deprecated-deno-api
+const esbuild: typeof esbuildWasm = Deno.run === undefined
+  ? esbuildWasm
+  : esbuildNative;
+const esbuildWasmURL = new URL("./esbuild_v0.17.19.wasm", import.meta.url).href;
+export { esbuild, esbuildWasm as esbuildTypes, esbuildWasmURL };
+
+export { denoPlugins } from "https://deno.land/x/esbuild_deno_loader@0.8.1/mod.ts";
diff --git a/src/build/esbuild.ts b/src/build/esbuild.ts
new file mode 100644
index 00000000000..fa7b0d659cd
--- /dev/null
+++ b/src/build/esbuild.ts
@@ -0,0 +1,176 @@
+import {
+  denoPlugins,
+  esbuild,
+  esbuildTypes,
+  esbuildWasmURL,
+  fromFileUrl,
+  regexpEscape,
+  toFileUrl,
+} from "./deps.ts";
+import { Builder, BuildSnapshot } from "./mod.ts";
+
+export interface EsbuildBuilderOptions {
+  /** The build ID. */
+  buildID: string;
+  /** The entrypoints, mapped from name to URL. */
+  entrypoints: Record<string, string>;
+  /** Whether or not this is a dev build. */
+  dev: boolean;
+  /** The path to the deno.json / deno.jsonc config file. */
+  configPath: string;
+  /** The JSX configuration. */
+  jsxConfig: JSXConfig;
+}
+
+export interface JSXConfig {
+  jsx: "react" | "react-jsx";
+  jsxImportSource?: string;
+}
+
+export class EsbuildBuilder implements Builder {
+  #options: EsbuildBuilderOptions;
+
+  constructor(options: EsbuildBuilderOptions) {
+    this.#options = options;
+  }
+
+  async build(): Promise<EsbuildSnapshot> {
+    const opts = this.#options;
+    try {
+      await initEsbuild();
+
+      const absWorkingDir = Deno.cwd();
+
+      // In dev-mode we skip identifier minification to be able to show proper
+      // component names in Preact DevTools instead of single characters.
+      const minifyOptions: Partial<esbuildTypes.BuildOptions> = opts.dev
+        ? {
+          minifyIdentifiers: false,
+          minifySyntax: true,
+          minifyWhitespace: true,
+        }
+        : { minify: true };
+
+      const bundle = await esbuild.build({
+        entryPoints: opts.entrypoints,
+
+        platform: "browser",
+        target: ["chrome99", "firefox99", "safari15"],
+
+        format: "esm",
+        bundle: true,
+        splitting: true,
+        treeShaking: true,
+        sourcemap: opts.dev ? "linked" : false,
+        ...minifyOptions,
+
+        jsx: JSX_RUNTIME_MODE[opts.jsxConfig.jsx],
+        jsxImportSource: opts.jsxConfig.jsxImportSource,
+
+        absWorkingDir,
+        outdir: ".",
+        write: false,
+        metafile: true,
+
+        plugins: [
+          buildIdPlugin(opts.buildID),
+          ...denoPlugins({ configPath: opts.configPath }),
+        ],
+      });
+
+      const files = new Map<string, Uint8Array>();
+      const dependencies = new Map<string, string[]>();
+
+      const absWorkingDirLen = toFileUrl(absWorkingDir).href.length + 1;
+
+      for (const file of bundle.outputFiles) {
+        const path = toFileUrl(file.path).href.slice(absWorkingDirLen);
+        files.set(path, file.contents);
+      }
+
+      const metaOutputs = new Map(Object.entries(bundle.metafile.outputs));
+
+      for (const [path, entry] of metaOutputs.entries()) {
+        const imports = entry.imports
+          .filter(({ kind }) => kind === "import-statement")
+          .map(({ path }) => path);
+        dependencies.set(path, imports);
+      }
+
+      return new EsbuildSnapshot(files, dependencies);
+    } finally {
+      stopEsbuild();
+    }
+  }
+}
+
+const JSX_RUNTIME_MODE = {
+  "react": "transform",
+  "react-jsx": "automatic",
+} as const;
+
+async function initEsbuild() {
+  // deno-lint-ignore no-deprecated-deno-api
+  if (Deno.run === undefined) {
+    await esbuild.initialize({
+      wasmURL: esbuildWasmURL,
+      worker: false,
+    });
+  } else {
+    await esbuild.initialize({});
+  }
+}
+
+function stopEsbuild() {
+  esbuild.stop();
+}
+
+function buildIdPlugin(buildId: string): esbuildTypes.Plugin {
+  const file = import.meta.resolve("../runtime/build_id.ts");
+  const url = new URL(file);
+  let options: esbuildTypes.OnLoadOptions;
+  if (url.protocol === "file:") {
+    const path = fromFileUrl(url);
+    const filter = new RegExp(`^${regexpEscape(path)}$`);
+    options = { filter, namespace: "file" };
+  } else {
+    const namespace = url.protocol.slice(0, -1);
+    const path = url.href.slice(namespace.length + 1);
+    const filter = new RegExp(`^${regexpEscape(path)}$`);
+    options = { filter, namespace };
+  }
+  return {
+    name: "fresh-build-id",
+    setup(build) {
+      build.onLoad(
+        options,
+        () => ({ contents: `export const BUILD_ID = "${buildId}";` }),
+      );
+    },
+  };
+}
+
+export class EsbuildSnapshot implements BuildSnapshot {
+  #files: Map<string, Uint8Array>;
+  #dependencies: Map<string, string[]>;
+
+  constructor(
+    files: Map<string, Uint8Array>,
+    dependencies: Map<string, string[]>,
+  ) {
+    this.#files = files;
+    this.#dependencies = dependencies;
+  }
+
+  get paths(): string[] {
+    return Object.keys(this.#files);
+  }
+
+  read(path: string): Uint8Array | null {
+    return this.#files.get(path) ?? null;
+  }
+
+  dependencies(path: string): string[] {
+    return this.#dependencies.get(path) ?? [];
+  }
+}
diff --git a/src/server/esbuild_v0.17.11.wasm b/src/build/esbuild_v0.17.19.wasm
similarity index 62%
rename from src/server/esbuild_v0.17.11.wasm
rename to src/build/esbuild_v0.17.19.wasm
index 359e887a8ec..1d350d7c045 100644
Binary files a/src/server/esbuild_v0.17.11.wasm and b/src/build/esbuild_v0.17.19.wasm differ
diff --git a/src/build/mod.ts b/src/build/mod.ts
new file mode 100644
index 00000000000..a23a58af742
--- /dev/null
+++ b/src/build/mod.ts
@@ -0,0 +1,23 @@
+export {
+  EsbuildBuilder,
+  type EsbuildBuilderOptions,
+  EsbuildSnapshot,
+  type JSXConfig,
+} from "./esbuild.ts";
+export interface Builder {
+  build(): Promise<BuildSnapshot>;
+}
+
+export interface BuildSnapshot {
+  /** The list of files contained in this snapshot, not prefixed by a slash. */
+  readonly paths: string[];
+
+  /** For a given file, return it's contents.
+   * @throws If the file is not contained in this snapshot. */
+  read(path: string): ReadableStream<Uint8Array> | Uint8Array | null;
+
+  /** For a given entrypoint, return it's list of dependencies.
+   *
+   * Returns an empty array if the entrypoint does not exist. */
+  dependencies(path: string): string[];
+}
diff --git a/src/dev/deps.ts b/src/dev/deps.ts
index b6f819b9a2b..b25b6ea7e1f 100644
--- a/src/dev/deps.ts
+++ b/src/dev/deps.ts
@@ -4,12 +4,14 @@ export {
   extname,
   fromFileUrl,
   join,
+  relative,
   resolve,
+  SEP,
   toFileUrl,
-} from "https://deno.land/std@0.178.0/path/mod.ts";
-export { walk } from "https://deno.land/std@0.178.0/fs/walk.ts";
-export { parse } from "https://deno.land/std@0.178.0/flags/mod.ts";
-export { gte } from "https://deno.land/std@0.178.0/semver/mod.ts";
+} from "https://deno.land/std@0.190.0/path/mod.ts";
+export { walk } from "https://deno.land/std@0.190.0/fs/walk.ts";
+export { parse } from "https://deno.land/std@0.190.0/flags/mod.ts";
+export { gte } from "https://deno.land/std@0.190.0/semver/mod.ts";
 
 // ts-morph
 export { Node, Project } from "https://deno.land/x/ts_morph@17.0.1/mod.ts";
diff --git a/src/dev/imports.ts b/src/dev/imports.ts
index 692bb7d5d91..7615171ff98 100644
--- a/src/dev/imports.ts
+++ b/src/dev/imports.ts
@@ -1,9 +1,9 @@
-export const RECOMMENDED_PREACT_VERSION = "10.13.1";
-export const RECOMMENDED_PREACT_RTS_VERSION = "5.2.6";
+export const RECOMMENDED_PREACT_VERSION = "10.15.1";
+export const RECOMMENDED_PREACT_RTS_VERSION = "6.1.0";
 export const RECOMMENDED_PREACT_SIGNALS_VERSION = "1.1.3";
 export const RECOMMENDED_PREACT_SIGNALS_CORE_VERSION = "1.2.3";
 export const RECOMMENDED_TWIND_VERSION = "0.16.19";
-export const RECOMMENDED_STD_VERSION = "0.187.0";
+export const RECOMMENDED_STD_VERSION = "0.190.0";
 
 export function freshImports(imports: Record<string, string>) {
   imports["$fresh/"] = new URL("../../", import.meta.url).href;
diff --git a/src/dev/mod.ts b/src/dev/mod.ts
index 37bf5aaa9ed..a42c6b63ce9 100644
--- a/src/dev/mod.ts
+++ b/src/dev/mod.ts
@@ -1,12 +1,4 @@
-import {
-  dirname,
-  extname,
-  fromFileUrl,
-  gte,
-  join,
-  toFileUrl,
-  walk,
-} from "./deps.ts";
+import { dirname, fromFileUrl, gte, join, toFileUrl, walk } from "./deps.ts";
 import { error } from "./error.ts";
 
 const MIN_DENO_VERSION = "1.25.0";
@@ -28,70 +20,34 @@ export function ensureMinDenoVersion() {
   }
 }
 
+async function collectDir(dir: string): Promise<string[]> {
+  const dirUrl = toFileUrl(dir);
+  const paths = [];
+  const routesFolder = walk(dir, {
+    includeDirs: false,
+    includeFiles: true,
+    exts: ["tsx", "jsx", "ts", "js"],
+  });
+  for await (const entry of routesFolder) {
+    const path = toFileUrl(entry.path).href.substring(
+      dirUrl.href.length,
+    );
+    paths.push(path);
+  }
+  paths.sort();
+  return paths;
+}
+
 interface Manifest {
   routes: string[];
   islands: string[];
 }
 
 export async function collect(directory: string): Promise<Manifest> {
-  const routesDir = join(directory, "./routes");
-  const islandsDir = join(directory, "./islands");
-
-  const routes = [];
-  try {
-    const routesUrl = toFileUrl(routesDir);
-    // TODO(lucacasonato): remove the extranious Deno.readDir when
-    // https://github.com/denoland/deno_std/issues/1310 is fixed.
-    for await (const _ of Deno.readDir(routesDir)) {
-      // do nothing
-    }
-    const routesFolder = walk(routesDir, {
-      includeDirs: false,
-      includeFiles: true,
-      exts: ["tsx", "jsx", "ts", "js"],
-    });
-    for await (const entry of routesFolder) {
-      if (entry.isFile) {
-        const file = toFileUrl(entry.path).href.substring(
-          routesUrl.href.length,
-        );
-        routes.push(file);
-      }
-    }
-  } catch (err) {
-    if (err instanceof Deno.errors.NotFound) {
-      // Do nothing.
-    } else {
-      throw err;
-    }
-  }
-  routes.sort();
-
-  const islands = [];
-  try {
-    const islandsUrl = toFileUrl(islandsDir);
-    for await (const entry of Deno.readDir(islandsDir)) {
-      if (entry.isDirectory) {
-        error(
-          `Found subdirectory '${entry.name}' in islands/. The islands/ folder must not contain any subdirectories.`,
-        );
-      }
-      if (entry.isFile) {
-        const ext = extname(entry.name);
-        if (![".tsx", ".jsx", ".ts", ".js"].includes(ext)) continue;
-        const path = join(islandsDir, entry.name);
-        const file = toFileUrl(path).href.substring(islandsUrl.href.length);
-        islands.push(file);
-      }
-    }
-  } catch (err) {
-    if (err instanceof Deno.errors.NotFound) {
-      // Do nothing.
-    } else {
-      throw err;
-    }
-  }
-  islands.sort();
+  const [routes, islands] = await Promise.all([
+    collectDir(join(directory, "./routes")),
+    collectDir(join(directory, "./islands")),
+  ]);
 
   return { routes, islands };
 }
@@ -103,7 +59,6 @@ export async function generate(directory: string, manifest: Manifest) {
 // This file SHOULD be checked into source version control.
 // This file is automatically updated during development when running \`dev.ts\`.
 
-import config from "./deno.json" assert { type: "json" };
 ${
     routes.map((file, i) => `import * as $${i} from "./routes${file}";`).join(
       "\n",
@@ -128,7 +83,6 @@ const manifest = {
   }
   },
   baseUrl: import.meta.url,
-  config,
 };
 
 export default manifest;
diff --git a/src/runtime/build_id.ts b/src/runtime/build_id.ts
new file mode 100644
index 00000000000..a7ad66a0ad9
--- /dev/null
+++ b/src/runtime/build_id.ts
@@ -0,0 +1,2 @@
+// Note: in the client build this file is replaced with a file exporting a static string
+export { BUILD_ID } from "../server/build_id.ts";
diff --git a/src/runtime/deserializer.ts b/src/runtime/deserializer.ts
new file mode 100644
index 00000000000..75b2d262699
--- /dev/null
+++ b/src/runtime/deserializer.ts
@@ -0,0 +1,60 @@
+// Run `deno run -A npm:esbuild --minify src/runtime/deserializer.ts` to minify
+// this file. It is embedded into src/server/deserializer_code.ts.
+
+export const KEY = "_f";
+
+interface Signal<T> {
+  peek(): T;
+  value: T;
+}
+
+function b64decode(b64: string): Uint8Array {
+  const binString = atob(b64);
+  const size = binString.length;
+  const bytes = new Uint8Array(size);
+  for (let i = 0; i < size; i++) {
+    bytes[i] = binString.charCodeAt(i);
+  }
+  return bytes;
+}
+
+export function deserialize(
+  str: string,
+  signal?: <T>(a: T) => Signal<T>,
+): unknown {
+  function reviver(this: unknown, _key: string, value: unknown): unknown {
+    if (typeof value === "object" && value && KEY in value) {
+      // deno-lint-ignore no-explicit-any
+      const v: any = value;
+      if (v[KEY] === "s") {
+        return signal!(v.v);
+      }
+      if (v[KEY] === "u8a") {
+        return b64decode(v.d);
+      }
+      if (v[KEY] === "l") {
+        const val = v.v;
+        val[KEY] = v.k;
+        return val;
+      }
+      throw new Error(`Unknown key: ${v[KEY]}`);
+    }
+    return value;
+  }
+
+  const { v, r } = JSON.parse(str, reviver);
+  const references = (r ?? []) as [string[], ...string[][]][];
+  for (const [targetPath, ...refPaths] of references) {
+    const target = targetPath.reduce((o, k) => k === null ? o : o[k], v);
+    for (const refPath of refPaths) {
+      if (refPath.length === 0) throw new Error("Invalid reference");
+      // set the reference to the target object
+      const parent = refPath.slice(0, -1).reduce(
+        (o, k) => k === null ? o : o[k],
+        v,
+      );
+      parent[refPath.at(-1)!] = target;
+    }
+  }
+  return v;
+}
diff --git a/src/runtime/entrypoints/deserializer.ts b/src/runtime/entrypoints/deserializer.ts
new file mode 100644
index 00000000000..b031787c965
--- /dev/null
+++ b/src/runtime/entrypoints/deserializer.ts
@@ -0,0 +1 @@
+export { deserialize } from "../deserializer.ts";
diff --git a/src/runtime/entrypoints/main.ts b/src/runtime/entrypoints/main.ts
new file mode 100644
index 00000000000..39c545b9a68
--- /dev/null
+++ b/src/runtime/entrypoints/main.ts
@@ -0,0 +1,301 @@
+import {
+  ComponentChildren,
+  ComponentType,
+  Fragment,
+  h,
+  options,
+  render,
+  VNode,
+} from "preact";
+import { assetHashingHook } from "../utils.ts";
+
+function createRootFragment(
+  parent: Element,
+  replaceNode: Node | Node[],
+) {
+  replaceNode = ([] as Node[]).concat(replaceNode);
+  // @ts-ignore this is fine
+  return parent.__k = {
+    nodeType: 1,
+    parentNode: parent,
+    firstChild: replaceNode[0],
+    childNodes: replaceNode,
+    insertBefore(node: Node, child: Node) {
+      parent.insertBefore(node, child);
+    },
+    appendChild(child: Node) {
+      parent.appendChild(child);
+    },
+    removeChild(child: Node) {
+      parent.removeChild(child);
+    },
+  };
+}
+
+function isCommentNode(node: Node): node is Comment {
+  return node.nodeType === Node.COMMENT_NODE;
+}
+function isTextNode(node: Node): node is Text {
+  return node.nodeType === Node.TEXT_NODE;
+}
+function isElementNode(node: Node): node is HTMLElement {
+  return node.nodeType === Node.ELEMENT_NODE;
+}
+
+// deno-lint-ignore no-explicit-any
+export function revive(islands: Record<string, ComponentType>, props: any[]) {
+  _walkInner(
+    islands,
+    props,
+    // markerstack
+    [],
+    // Keep a root node in the vnode stack to save a couple of checks
+    // later during iteration
+    [h(Fragment, null)],
+    document.body,
+  );
+}
+
+function ServerComponent(
+  props: { children: ComponentChildren },
+): ComponentChildren {
+  return props.children;
+}
+ServerComponent.displayName = "PreactServerComponent";
+
+function addPropsChild(parent: VNode, vnode: ComponentChildren) {
+  const props = parent.props;
+  if (props.children === null) {
+    props.children = vnode;
+  } else {
+    if (!Array.isArray(props.children)) {
+      props.children = [props.children, vnode];
+    } else {
+      props.children.push(vnode);
+    }
+  }
+}
+
+const enum MarkerKind {
+  Island,
+  Slot,
+}
+
+interface Marker {
+  kind: MarkerKind;
+  // We can remove this once we drop support for RTS <6.1.0 where
+  // we rendered incorrect comments leading to `!--` and `--` being
+  // included in the comment text. Therefore this is a normalized
+  // string representing the actual intended comment value which makes
+  // a bunch of stuff easier.
+  text: string;
+  startNode: Comment;
+  endNode: Comment | null;
+}
+
+/**
+ * Revive islands and stich together any server rendered content.
+ *
+ * Conceptually we're doing an inorder depth first search over the DOM
+ * to find all our comment nodes `<!--frsh-something-->` which act as
+ * a marker for islands or server rendered JSX (=slots in islands).
+ * Every island or server JSX has a start and an end marker, which
+ * means there is no _single_ root nodes for these elements.
+ * The hierarchy we need to construct for the virtual-dom tree might
+ * be rendered in a flattened manner in the DOM.
+ *
+ * Example:
+ *   <div>
+ *     <!--frsh-island:0-->
+ *     <!--frsh-slot:children-->
+ *     <p>server content</p>
+ *     <!--/frsh-slot:children-->
+ *     <!--/frsh-island:0-->
+ *   </div>
+ *
+ * Here we have a flat DOM structure, but from the virtual-dom
+ * perspective we should render:
+ *   <div> -> <Island> -> ServerComponent -> <p>server content</p>
+ *
+ * To solve this we're keeping track of the virtual-dom hierarchy
+ * in a stack-like manner, but do the actual iteration in a list-based
+ * fashion over an HTMLElement's children list.
+ */
+function _walkInner(
+  islands: Record<string, ComponentType>,
+  // deno-lint-ignore no-explicit-any
+  props: any[],
+  markerStack: Marker[],
+  vnodeStack: VNode[],
+  node: Node | Comment,
+) {
+  let sib: Node | null = node;
+  while (sib !== null) {
+    const marker = markerStack.length > 0
+      ? markerStack[markerStack.length - 1]
+      : null;
+
+    // We use comment nodes to mark fresh islands and slots
+    if (isCommentNode(sib)) {
+      let comment = sib.data;
+      if (comment.startsWith("!--")) {
+        comment = comment.slice(3, -2);
+      }
+
+      if (comment.startsWith("frsh-slot")) {
+        // Note: Nested slots are not possible as they're flattened
+        // already on the server.
+        markerStack.push({
+          startNode: sib,
+          text: comment,
+          endNode: null,
+          kind: MarkerKind.Slot,
+        });
+        // @ts-ignore TS gets confused
+        vnodeStack.push(h(ServerComponent, { key: comment }));
+      } else if (
+        marker !== null && (
+          comment.startsWith("/frsh") ||
+          // Check for old Preact RTS
+          marker.text === comment
+        )
+      ) {
+        // We're closing either a slot or an island
+        marker.endNode = sib;
+
+        markerStack.pop();
+        const parent = markerStack.length > 0
+          ? markerStack[markerStack.length - 1]
+          : null;
+
+        if (marker.kind === MarkerKind.Slot) {
+          // If we're closing a slot than it's assumed that we're
+          // inside an island
+          if (parent?.kind === MarkerKind.Island) {
+            const vnode = vnodeStack.pop();
+
+            // For now only `props.children` is supported.
+            const islandParent = vnodeStack[vnodeStack.length - 1]!;
+            // Overwrite serialized `{__slot: "children"}` with the
+            // actual vnode child.
+            islandParent.props.children = vnode;
+          }
+
+          // Remove markers
+          marker.startNode.remove();
+          sib = sib.nextSibling;
+          marker.endNode.remove();
+          continue;
+        } else if (marker.kind === MarkerKind.Island) {
+          // We're ready to revive this island if it has
+          // no roots of its own. Otherwise we'll treat it
+          // as a standard component
+          if (markerStack.length === 0) {
+            const children: Node[] = [];
+
+            let child: Node | null = marker.startNode;
+            while (
+              (child = child.nextSibling) !== null && child !== marker.endNode
+            ) {
+              children.push(child);
+            }
+
+            const vnode = vnodeStack.pop();
+
+            const parentNode = sib.parentNode! as HTMLElement;
+            const _render = () =>
+              render(
+                vnode,
+                createRootFragment(
+                  parentNode,
+                  children,
+                  // deno-lint-ignore no-explicit-any
+                ) as any as HTMLElement,
+              );
+
+            "scheduler" in window
+              // `scheduler.postTask` is async but that can easily
+              // fire in the background. We don't want waiting for
+              // the hydration of an island block us.
+              // @ts-ignore scheduler API is not in types yet
+              ? scheduler!.postTask(_render)
+              : setTimeout(_render, 0);
+
+            // Remove markers
+            marker.startNode.remove();
+            sib = sib.nextSibling;
+            marker.endNode.remove();
+            continue;
+          } else if (parent?.kind === MarkerKind.Slot) {
+            // Treat the island as a standard component when it
+            // has an island parent or a slot parent
+            const vnode = vnodeStack.pop();
+            const parent = vnodeStack[vnodeStack.length - 1]!;
+            addPropsChild(parent, vnode);
+          }
+        }
+      } else if (comment.startsWith("frsh")) {
+        // We're opening a new island
+        const [id, n] = comment.slice(5).split(":");
+        const islandProps = props[Number(n)];
+
+        markerStack.push({
+          startNode: sib,
+          endNode: null,
+          text: comment,
+          kind: MarkerKind.Island,
+        });
+        const vnode = h(islands[id], islandProps);
+        vnodeStack.push(vnode);
+      }
+    } else if (isTextNode(sib)) {
+      const parentVNode = vnodeStack[vnodeStack.length - 1]!;
+      if (
+        marker !== null && marker.kind === MarkerKind.Slot
+      ) {
+        addPropsChild(parentVNode, sib.data);
+      }
+    } else {
+      const parentVNode = vnodeStack[vnodeStack.length - 1];
+      if (
+        marker !== null &&
+        marker.kind === MarkerKind.Slot && isElementNode(sib)
+      ) {
+        // Parse the server rendered DOM into vnodes that we can
+        // attach to the virtual-dom tree. In the future, once
+        // Preact supports a way to skip over subtrees, this
+        // can be dropped.
+        const childLen = sib.childNodes.length;
+        const props: Record<string, unknown> = {
+          children: childLen <= 1 ? null : [],
+        };
+        for (let i = 0; i < sib.attributes.length; i++) {
+          const attr = sib.attributes[i];
+          props[attr.nodeName] = attr.nodeValue;
+        }
+        const vnode = h(sib.localName, props);
+        addPropsChild(parentVNode, vnode);
+        vnodeStack.push(vnode);
+      }
+
+      // TODO: What about script tags?
+      if (
+        sib.firstChild && (sib.nodeName !== "SCRIPT")
+      ) {
+        _walkInner(islands, props, markerStack, vnodeStack, sib.firstChild);
+      }
+
+      if (marker !== null && marker.kind === MarkerKind.Slot) {
+        vnodeStack.pop();
+      }
+    }
+
+    sib = sib.nextSibling;
+  }
+}
+
+const originalHook = options.vnode;
+options.vnode = (vnode) => {
+  assetHashingHook(vnode);
+  if (originalHook) originalHook(vnode);
+};
diff --git a/src/runtime/entrypoints/main_dev.ts b/src/runtime/entrypoints/main_dev.ts
new file mode 100644
index 00000000000..4e4f0c5634b
--- /dev/null
+++ b/src/runtime/entrypoints/main_dev.ts
@@ -0,0 +1,2 @@
+import "preact/debug";
+export * from "./main.ts";
diff --git a/src/runtime/entrypoints/signals.ts b/src/runtime/entrypoints/signals.ts
new file mode 100644
index 00000000000..0c33f9daa6e
--- /dev/null
+++ b/src/runtime/entrypoints/signals.ts
@@ -0,0 +1 @@
+export { signal } from "@preact/signals";
diff --git a/src/runtime/main.ts b/src/runtime/main.ts
deleted file mode 100644
index d3451996af0..00000000000
--- a/src/runtime/main.ts
+++ /dev/null
@@ -1,71 +0,0 @@
-import { ComponentType, h, options, render } from "preact";
-import { assetHashingHook } from "./utils.ts";
-
-function createRootFragment(
-  parent: Element,
-  replaceNode: Node | Node[],
-) {
-  replaceNode = ([] as Node[]).concat(replaceNode);
-  // @ts-ignore this is fine
-  return parent.__k = {
-    nodeType: 1,
-    parentNode: parent,
-    firstChild: replaceNode[0],
-    childNodes: replaceNode,
-    insertBefore(node: Node, child: Node) {
-      parent.insertBefore(node, child);
-    },
-    appendChild(child: Node) {
-      parent.appendChild(child);
-    },
-    removeChild(child: Node) {
-      parent.removeChild(child);
-    },
-  };
-}
-
-// deno-lint-ignore no-explicit-any
-export function revive(islands: Record<string, ComponentType>, props: any[]) {
-  function walk(node: Node | null) {
-    const tag = node!.nodeType === 8 &&
-      ((node as Comment).data.match(/^\s*frsh-(.*)\s*$/) || [])[1];
-    let endNode: Node | null = null;
-    if (tag) {
-      const startNode = node!;
-      const children = [];
-      const parent = node!.parentNode;
-      // collect all children of the island
-      while ((node = node!.nextSibling) && node.nodeType !== 8) {
-        children.push(node);
-      }
-      startNode.parentNode!.removeChild(startNode); // remove start tag node
-
-      const [id, n] = tag.split(":");
-      render(
-        h(islands[id], props[Number(n)]),
-        createRootFragment(
-          parent! as HTMLElement,
-          children,
-          // deno-lint-ignore no-explicit-any
-        ) as any as HTMLElement,
-      );
-      endNode = node;
-    }
-
-    const sib = node!.nextSibling;
-    const fc = node!.firstChild;
-    if (endNode) {
-      endNode.parentNode?.removeChild(endNode); // remove end tag node
-    }
-
-    if (sib) walk(sib);
-    if (fc) walk(fc);
-  }
-  walk(document.body);
-}
-
-const originalHook = options.vnode;
-options.vnode = (vnode) => {
-  assetHashingHook(vnode);
-  if (originalHook) originalHook(vnode);
-};
diff --git a/src/runtime/main_dev.ts b/src/runtime/main_dev.ts
deleted file mode 100644
index 2551dd5e099..00000000000
--- a/src/runtime/main_dev.ts
+++ /dev/null
@@ -1,2 +0,0 @@
-import "preact/debug";
-export { revive } from "./main.ts";
diff --git a/src/runtime/utils.ts b/src/runtime/utils.ts
index b6e5c93a071..ff89bef9066 100644
--- a/src/runtime/utils.ts
+++ b/src/runtime/utils.ts
@@ -1,4 +1,5 @@
 import { VNode } from "preact";
+import { BUILD_ID } from "./build_id.ts";
 
 export const INTERNAL_PREFIX = "/_frsh";
 export const ASSET_CACHE_BUST_KEY = "__frsh_c";
@@ -20,7 +21,7 @@ export function asset(path: string) {
     ) {
       return path;
     }
-    url.searchParams.set(ASSET_CACHE_BUST_KEY, __FRSH_BUILD_ID);
+    url.searchParams.set(ASSET_CACHE_BUST_KEY, BUILD_ID);
     return url.pathname + url.search + url.hash;
   } catch (err) {
     console.warn(
diff --git a/src/runtime/utils_test.ts b/src/runtime/utils_test.ts
index c1e8cb4f293..a4e484bea02 100644
--- a/src/runtime/utils_test.ts
+++ b/src/runtime/utils_test.ts
@@ -1,13 +1,12 @@
 import { assertEquals } from "../../tests/deps.ts";
 import { asset, assetSrcSet } from "./utils.ts";
-
-globalThis.__FRSH_BUILD_ID = "ID123";
+import { BUILD_ID } from "./build_id.ts";
 
 Deno.test("asset", () => {
-  assertEquals(asset("/test.png"), "/test.png?__frsh_c=ID123");
-  assertEquals(asset("/test?f=1"), "/test?f=1&__frsh_c=ID123");
-  assertEquals(asset("/test#foo"), "/test?__frsh_c=ID123#foo");
-  assertEquals(asset("/test?f=1#foo"), "/test?f=1&__frsh_c=ID123#foo");
+  assertEquals(asset("/test.png"), `/test.png?__frsh_c=${BUILD_ID}`);
+  assertEquals(asset("/test?f=1"), `/test?f=1&__frsh_c=${BUILD_ID}`);
+  assertEquals(asset("/test#foo"), `/test?__frsh_c=${BUILD_ID}#foo`);
+  assertEquals(asset("/test?f=1#foo"), `/test?f=1&__frsh_c=${BUILD_ID}#foo`);
 
   assertEquals(asset("./test.png"), "./test.png");
   assertEquals(asset("//example.com/logo.png"), "//example.com/logo.png");
@@ -19,31 +18,31 @@ Deno.test("asset", () => {
 });
 
 Deno.test("assetSrcSet", () => {
-  assertEquals(assetSrcSet("/img.png"), "/img.png?__frsh_c=ID123");
+  assertEquals(assetSrcSet("/img.png"), `/img.png?__frsh_c=${BUILD_ID}`);
   assertEquals(
     assetSrcSet("/img.png, /img.png 2x"),
-    "/img.png?__frsh_c=ID123, /img.png?__frsh_c=ID123 2x",
+    `/img.png?__frsh_c=${BUILD_ID}, /img.png?__frsh_c=${BUILD_ID} 2x`,
   );
-  assertEquals(assetSrcSet("/img.png 1x"), "/img.png?__frsh_c=ID123 1x");
+  assertEquals(assetSrcSet("/img.png 1x"), `/img.png?__frsh_c=${BUILD_ID} 1x`);
   assertEquals(
     assetSrcSet("/img.png 1x, /img.png 2x"),
-    "/img.png?__frsh_c=ID123 1x, /img.png?__frsh_c=ID123 2x",
+    `/img.png?__frsh_c=${BUILD_ID} 1x, /img.png?__frsh_c=${BUILD_ID} 2x`,
   );
   assertEquals(
     assetSrcSet("/img.png 1.5x, /img.png 3x"),
-    "/img.png?__frsh_c=ID123 1.5x, /img.png?__frsh_c=ID123 3x",
+    `/img.png?__frsh_c=${BUILD_ID} 1.5x, /img.png?__frsh_c=${BUILD_ID} 3x`,
   );
 
   //test with queries
   assertEquals(
     assetSrcSet("/img.png?w=140, /img.png?w=200 2x"),
-    "/img.png?w=140&__frsh_c=ID123, /img.png?w=200&__frsh_c=ID123 2x",
+    `/img.png?w=140&__frsh_c=${BUILD_ID}, /img.png?w=200&__frsh_c=${BUILD_ID} 2x`,
   );
 
   // test with extra spaces
   assertEquals(
     assetSrcSet("/img-s.png 300w,  /img-l.png  600w , /img-xl.png  900w"),
-    "/img-s.png?__frsh_c=ID123 300w,  /img-l.png?__frsh_c=ID123  600w , /img-xl.png?__frsh_c=ID123  900w",
+    `/img-s.png?__frsh_c=${BUILD_ID} 300w,  /img-l.png?__frsh_c=${BUILD_ID}  600w , /img-xl.png?__frsh_c=${BUILD_ID}  900w`,
   );
 
   // test with ( syntax
diff --git a/src/server/__snapshots__/serializer_test.ts.snap b/src/server/__snapshots__/serializer_test.ts.snap
new file mode 100644
index 00000000000..fc4e3467954
--- /dev/null
+++ b/src/server/__snapshots__/serializer_test.ts.snap
@@ -0,0 +1,23 @@
+export const snapshot = {};
+
+snapshot[`serializer - primitives & plain objects 1`] = `'{"v":{"a":1,"b":"2","c":true,"d":null,"f":[1,2,3],"g":{"a":1,"b":2,"c":3}}}'`;
+
+snapshot[`serializer - Uint8Array 1`] = `'{"v":{"a":{"_f":"u8a","d":"AQID"}}}'`;
+
+snapshot[`serializer - signals 1`] = `'{"v":{"a":1,"b":{"_f":"s","v":2}}}'`;
+
+snapshot[`serializer - magic key 1`] = `'{"v":{"_f":"l","k":"f","v":{"a":1}}}'`;
+
+snapshot[`serializer - circular reference objects 1`] = `'{"v":{"a":1,"b":0},"r":[[[],["b"]]]}'`;
+
+snapshot[`serializer - circular reference nested objects 1`] = `'{"v":{"a":1,"b":{"c":2,"d":0}},"r":[[[],["b","d"]]]}'`;
+
+snapshot[`serializer - circular reference array 1`] = `'{"v":[1,2,3,0],"r":[[[],["3"]]]}'`;
+
+snapshot[`serializer - multiple reference 1`] = `'{"v":{"a":1,"b":{"c":2},"d":0},"r":[[["b"],["d"]]]}'`;
+
+snapshot[`serializer - multiple reference signals 1`] = `'{"v":{"inner":{"_f":"l","k":"x","v":{"x":1,"y":0}},"a":{"_f":"s","v":0},"b":{"c":0}},"r":[[["inner"],["inner",null,"y"],["a","value"]],[["a"],["b","c"]]]}'`;
+
+snapshot[`serializer - multiple reference in magic key 1`] = `'{"v":{"literal":{"_f":"l","k":"x","v":{"inner":{"foo":"bar"}}},"inner":0},"r":[[["literal",null,"inner"],["inner"]]]}'`;
+
+snapshot[`serializer - multiple reference in signal 1`] = `'{"v":{"s":{"_f":"s","v":{"foo":"bar"}},"inner":0},"r":[[["s","value"],["inner"]]]}'`;
diff --git a/src/server/build_id.ts b/src/server/build_id.ts
new file mode 100644
index 00000000000..f347c425038
--- /dev/null
+++ b/src/server/build_id.ts
@@ -0,0 +1,10 @@
+import { toHashString } from "./deps.ts";
+
+const deploymentId = Deno.env.get("DENO_DEPLOYMENT_ID") ||
+  crypto.randomUUID();
+const buildIdHash = await crypto.subtle.digest(
+  "SHA-1",
+  new TextEncoder().encode(deploymentId),
+);
+
+export const BUILD_ID = toHashString(buildIdHash, "hex");
diff --git a/src/server/bundle.ts b/src/server/bundle.ts
deleted file mode 100644
index 7cfe71c5449..00000000000
--- a/src/server/bundle.ts
+++ /dev/null
@@ -1,151 +0,0 @@
-import { BuildOptions } from "https://deno.land/x/esbuild@v0.17.11/mod.js";
-import { BUILD_ID } from "./constants.ts";
-import { denoPlugin, esbuild, toFileUrl } from "./deps.ts";
-import { Island, Plugin } from "./types.ts";
-
-export interface JSXConfig {
-  jsx: "react" | "react-jsx";
-  jsxImportSource?: string;
-}
-
-let esbuildInitialized: boolean | Promise<void> = false;
-async function ensureEsbuildInitialized() {
-  if (esbuildInitialized === false) {
-    // deno-lint-ignore no-deprecated-deno-api
-    if (Deno.run === undefined) {
-      const wasmURL = new URL("./esbuild_v0.17.11.wasm", import.meta.url).href;
-      esbuildInitialized = fetch(wasmURL).then(async (r) => {
-        const resp = new Response(r.body, {
-          headers: { "Content-Type": "application/wasm" },
-        });
-        const wasmModule = await WebAssembly.compileStreaming(resp);
-        await esbuild.initialize({
-          wasmModule,
-          worker: false,
-        });
-      });
-    } else {
-      esbuild.initialize({});
-    }
-    await esbuildInitialized;
-    esbuildInitialized = true;
-  } else if (esbuildInitialized instanceof Promise) {
-    await esbuildInitialized;
-  }
-}
-
-const JSX_RUNTIME_MODE = {
-  "react": "transform",
-  "react-jsx": "automatic",
-} as const;
-
-export class Bundler {
-  #importMapURL: URL;
-  #jsxConfig: JSXConfig;
-  #islands: Island[];
-  #plugins: Plugin[];
-  #cache: Map<string, Uint8Array> | Promise<void> | undefined = undefined;
-  #dev: boolean;
-
-  constructor(
-    islands: Island[],
-    plugins: Plugin[],
-    importMapURL: URL,
-    jsxConfig: JSXConfig,
-    dev: boolean,
-  ) {
-    this.#islands = islands;
-    this.#plugins = plugins;
-    this.#importMapURL = importMapURL;
-    this.#jsxConfig = jsxConfig;
-    this.#dev = dev;
-  }
-
-  async bundle() {
-    const entryPoints: Record<string, string> = {
-      main: this.#dev
-        ? new URL("../../src/runtime/main_dev.ts", import.meta.url).href
-        : new URL("../../src/runtime/main.ts", import.meta.url).href,
-    };
-
-    for (const island of this.#islands) {
-      entryPoints[`island-${island.id}`] = island.url;
-    }
-
-    for (const plugin of this.#plugins) {
-      for (const [name, url] of Object.entries(plugin.entrypoints ?? {})) {
-        entryPoints[`plugin-${plugin.name}-${name}`] = url;
-      }
-    }
-
-    const absWorkingDir = Deno.cwd();
-    await ensureEsbuildInitialized();
-    // In dev-mode we skip identifier minification to be able to show proper
-    // component names in Preact DevTools instead of single characters.
-    const minifyOptions: Partial<BuildOptions> = this.#dev
-      ? { minifyIdentifiers: false, minifySyntax: true, minifyWhitespace: true }
-      : { minify: true };
-    const bundle = await esbuild.build({
-      bundle: true,
-      define: { __FRSH_BUILD_ID: `"${BUILD_ID}"` },
-      entryPoints,
-      format: "esm",
-      metafile: true,
-      ...minifyOptions,
-      outdir: ".",
-      // This is requried to ensure the format of the outputFiles path is the same
-      // between windows and linux
-      absWorkingDir,
-      outfile: "",
-      platform: "neutral",
-      plugins: [denoPlugin({ importMapURL: this.#importMapURL })],
-      sourcemap: this.#dev ? "linked" : false,
-      splitting: true,
-      target: ["chrome99", "firefox99", "safari15"],
-      treeShaking: true,
-      write: false,
-      jsx: JSX_RUNTIME_MODE[this.#jsxConfig.jsx],
-      jsxImportSource: this.#jsxConfig.jsxImportSource,
-    });
-    // const metafileOutputs = bundle.metafile!.outputs;
-
-    // for (const path in metafileOutputs) {
-    //   const meta = metafileOutputs[path];
-    //   const imports = meta.imports
-    //     .filter(({ kind }) => kind === "import-statement")
-    //     .map(({ path }) => `/${path}`);
-    //   this.#preloads.set(`/${path}`, imports);
-    // }
-
-    const cache = new Map<string, Uint8Array>();
-    const absDirUrlLength = toFileUrl(absWorkingDir).href.length;
-    for (const file of bundle.outputFiles) {
-      cache.set(
-        toFileUrl(file.path).href.substring(absDirUrlLength),
-        file.contents,
-      );
-    }
-    this.#cache = cache;
-
-    return;
-  }
-
-  async cache(): Promise<Map<string, Uint8Array>> {
-    if (this.#cache === undefined) {
-      this.#cache = this.bundle();
-    }
-    if (this.#cache instanceof Promise) {
-      await this.#cache;
-    }
-    return this.#cache as Map<string, Uint8Array>;
-  }
-
-  async get(path: string): Promise<Uint8Array | null> {
-    const cache = await this.cache();
-    return cache.get(path) ?? null;
-  }
-
-  // getPreloads(path: string): string[] {
-  //   return this.#preloads.get(path) ?? [];
-  // }
-}
diff --git a/src/server/constants.ts b/src/server/constants.ts
index 4c042593a1b..2567ed90204 100644
--- a/src/server/constants.ts
+++ b/src/server/constants.ts
@@ -1,30 +1,11 @@
 import { INTERNAL_PREFIX } from "../runtime/utils.ts";
-import { toHashString } from "./deps.ts";
+import { BUILD_ID } from "./build_id.ts";
 
 export const REFRESH_JS_URL = `${INTERNAL_PREFIX}/refresh.js`;
 export const ALIVE_URL = `${INTERNAL_PREFIX}/alive`;
 export const JS_PREFIX = `/js`;
 export const DEBUG = !Deno.env.get("DENO_DEPLOYMENT_ID");
 
-const deploymentId = Deno.env.get("DENO_DEPLOYMENT_ID") ||
-  crypto.randomUUID();
-const buildIdHash = await crypto.subtle.digest(
-  "SHA-1",
-  new TextEncoder().encode(deploymentId),
-);
-export const BUILD_ID = toHashString(buildIdHash, "hex");
-
 export function bundleAssetUrl(path: string) {
   return `${INTERNAL_PREFIX}${JS_PREFIX}/${BUILD_ID}${path}`;
 }
-
-globalThis.__FRSH_BUILD_ID = BUILD_ID;
-
-declare global {
-  interface Crypto {
-    randomUUID(): string;
-  }
-
-  // deno-lint-ignore no-var
-  var __FRSH_BUILD_ID: string;
-}
diff --git a/src/server/context.ts b/src/server/context.ts
index 0881c8e06fe..16fead47faf 100644
--- a/src/server/context.ts
+++ b/src/server/context.ts
@@ -1,7 +1,10 @@
 import {
   ConnInfo,
+  dirname,
   extname,
   fromFileUrl,
+  join,
+  JSONC,
   RequestHandler,
   Status,
   toFileUrl,
@@ -10,9 +13,9 @@ import {
 } from "./deps.ts";
 import { h } from "preact";
 import * as router from "./router.ts";
-import { Manifest } from "./mod.ts";
-import { Bundler, JSXConfig } from "./bundle.ts";
-import { ALIVE_URL, BUILD_ID, JS_PREFIX, REFRESH_JS_URL } from "./constants.ts";
+import { DenoConfig, Manifest } from "./mod.ts";
+import { ALIVE_URL, JS_PREFIX, REFRESH_JS_URL } from "./constants.ts";
+import { BUILD_ID } from "./build_id.ts";
 import DefaultErrorHandler from "./default_error_page.ts";
 import {
   AppModule,
@@ -27,18 +30,38 @@ import {
   MiddlewareRoute,
   Plugin,
   RenderFunction,
+  RenderOptions,
   Route,
   RouteModule,
+  RouterOptions,
   UnknownPage,
   UnknownPageModule,
 } from "./types.ts";
 import { render as internalRender } from "./render.ts";
 import { ContentSecurityPolicyDirectives, SELF } from "../runtime/csp.ts";
 import { ASSET_CACHE_BUST_KEY, INTERNAL_PREFIX } from "../runtime/utils.ts";
+import {
+  Builder,
+  BuildSnapshot,
+  EsbuildBuilder,
+  JSXConfig,
+} from "../build/mod.ts";
+
 interface RouterState {
   state: Record<string, unknown>;
 }
 
+function isObject(value: unknown) {
+  return typeof value === "object" &&
+    !Array.isArray(value) &&
+    value !== null;
+}
+
+function isDevMode() {
+  // Env var is only set in prod (on Deploy).
+  return Deno.env.get("DENO_DEPLOYMENT_ID") === undefined;
+}
+
 interface StaticFile {
   /** The URL to the static file on disk. */
   localUrl: URL;
@@ -57,13 +80,14 @@ export class ServerContext {
   #routes: Route[];
   #islands: Island[];
   #staticFiles: StaticFile[];
-  #bundler: Bundler;
   #renderFn: RenderFunction;
   #middlewares: MiddlewareRoute[];
   #app: AppModule;
   #notFound: UnknownPage;
   #error: ErrorPage;
   #plugins: Plugin[];
+  #builder: Builder | Promise<BuildSnapshot> | BuildSnapshot;
+  #routerOptions: RouterOptions;
 
   constructor(
     routes: Route[],
@@ -75,8 +99,10 @@ export class ServerContext {
     notFound: UnknownPage,
     error: ErrorPage,
     plugins: Plugin[],
-    importMapURL: URL,
+    configPath: string,
     jsxConfig: JSXConfig,
+    dev: boolean = isDevMode(),
+    routerOptions: RouterOptions,
   ) {
     this.#routes = routes;
     this.#islands = islands;
@@ -87,14 +113,15 @@ export class ServerContext {
     this.#notFound = notFound;
     this.#error = error;
     this.#plugins = plugins;
-    this.#dev = typeof Deno.env.get("DENO_DEPLOYMENT_ID") !== "string"; // Env var is only set in prod (on Deploy).
-    this.#bundler = new Bundler(
-      this.#islands,
-      this.#plugins,
-      importMapURL,
+    this.#dev = dev;
+    this.#builder = new EsbuildBuilder({
+      buildID: BUILD_ID,
+      entrypoints: collectEntrypoints(this.#dev, this.#islands, this.#plugins),
+      configPath,
+      dev: this.#dev,
       jsxConfig,
-      this.#dev,
-    );
+    });
+    this.#routerOptions = routerOptions;
   }
 
   /**
@@ -107,11 +134,14 @@ export class ServerContext {
     // Get the manifest' base URL.
     const baseUrl = new URL("./", manifest.baseUrl).href;
 
-    const config = manifest.config || { importMap: "./import_map.json" };
-    if (typeof config.importMap !== "string") {
-      throw new Error("deno.json must contain an 'importMap' property.");
+    const { config, path: configPath } = await readDenoConfig(
+      fromFileUrl(baseUrl),
+    );
+    if (typeof config.importMap !== "string" && !isObject(config.imports)) {
+      throw new Error(
+        "deno.json must contain an 'importMap' or 'imports' property.",
+      );
     }
-    const importMapURL = new URL(config.importMap, manifest.baseUrl);
 
     config.compilerOptions ??= {};
 
@@ -160,11 +190,25 @@ export class ServerContext {
         let { handler } = module as RouteModule;
         handler ??= {};
         if (
-          component &&
-          typeof handler === "object" && handler.GET === undefined
+          component && typeof handler === "object" && handler.GET === undefined
         ) {
           handler.GET = (_req, { render }) => render();
         }
+        if (
+          typeof handler === "object" && handler.GET !== undefined &&
+          handler.HEAD === undefined
+        ) {
+          const GET = handler.GET;
+          handler.HEAD = async (req, ctx) => {
+            const resp = await GET(req, ctx);
+            resp.body?.cancel();
+            return new Response(null, {
+              headers: resp.headers,
+              status: resp.status,
+              statusText: resp.statusText,
+            });
+          };
+        }
         const route: Route = {
           pattern,
           url,
@@ -249,18 +293,13 @@ export class ServerContext {
         opts.staticDir ?? "./static",
         manifest.baseUrl,
       );
-      // TODO(lucacasonato): remove the extranious Deno.readDir when
-      // https://github.com/denoland/deno_std/issues/1310 is fixed.
-      for await (const _ of Deno.readDir(fromFileUrl(staticFolder))) {
-        // do nothing
-      }
-      const entires = walk(fromFileUrl(staticFolder), {
+      const entries = walk(fromFileUrl(staticFolder), {
         includeFiles: true,
         includeDirs: false,
         followSymlinks: false,
       });
       const encoder = new TextEncoder();
-      for await (const entry of entires) {
+      for await (const entry of entries) {
         const localUrl = toFileUrl(entry.path);
         const path = localUrl.href.substring(staticFolder.href.length);
         const stat = await Deno.stat(localUrl);
@@ -284,13 +323,19 @@ export class ServerContext {
         staticFiles.push(staticFile);
       }
     } catch (err) {
-      if (err instanceof Deno.errors.NotFound) {
+      if (err.cause instanceof Deno.errors.NotFound) {
         // Do nothing.
       } else {
         throw err;
       }
     }
 
+    const dev = isDevMode();
+    if (dev) {
+      // Ensure that debugging hooks are set up for SSR rendering
+      await import("preact/debug");
+    }
+
     return new ServerContext(
       routes,
       islands,
@@ -301,8 +346,10 @@ export class ServerContext {
       notFound,
       error,
       opts.plugins ?? [],
-      importMapURL,
+      configPath,
       jsxConfig,
+      dev,
+      opts.router ?? DEFAULT_ROUTER_OPTIONS,
     );
   }
 
@@ -317,33 +364,53 @@ export class ServerContext {
       this.#middlewares,
       handlers.errorHandler,
     );
+    const trailingSlashEnabled = this.#routerOptions?.trailingSlash;
     return async function handler(req: Request, connInfo: ConnInfo) {
       // Redirect requests that end with a trailing slash to their non-trailing
       // slash counterpart.
+      // Ex: /about/ -> /about
       const url = new URL(req.url);
-      if (cleanPathname(url)) {
-        return Response.redirect(url.href, Status.TemporaryRedirect);
-      }
-
-      // HEAD requests should be handled as GET requests but without the body.
-      const originalMethod = req.method;
-      // Internally, HEAD is handled in the same way as GET.
-      if (req.method === "HEAD") {
-        req = new Request(req.url, { method: "GET", headers: req.headers });
-      }
-      const res = await withMiddlewares(req, connInfo, inner);
-      if (originalMethod === "HEAD") {
-        res.body?.cancel();
+      if (
+        url.pathname.length > 1 && url.pathname.endsWith("/") &&
+        !trailingSlashEnabled
+      ) {
+        // Remove trailing slashes
+        const path = url.pathname.replace(/\/+$/, "");
+        const location = `${path}${url.search}`;
         return new Response(null, {
-          headers: res.headers,
-          status: res.status,
-          statusText: res.statusText,
+          status: Status.TemporaryRedirect,
+          headers: { location },
         });
+      } else if (trailingSlashEnabled && !url.pathname.endsWith("/")) {
+        return Response.redirect(url.href + "/", Status.PermanentRedirect);
       }
-      return res;
+
+      return await withMiddlewares(req, connInfo, inner);
     };
   }
 
+  #maybeBuildSnapshot(): BuildSnapshot | null {
+    if ("build" in this.#builder || this.#builder instanceof Promise) {
+      return null;
+    }
+    return this.#builder;
+  }
+
+  async #buildSnapshot() {
+    if ("build" in this.#builder) {
+      const builder = this.#builder;
+      this.#builder = builder.build();
+      try {
+        const snapshot = await this.#builder;
+        this.#builder = snapshot;
+      } catch (err) {
+        this.#builder = builder;
+        throw err;
+      }
+    }
+    return this.#builder;
+  }
+
   /**
    * Identify which middlewares should be applied for a request,
    * chain them and return a handler response
@@ -461,7 +528,12 @@ export class ServerContext {
     ) {
       const route = sanitizePathToRegex(path);
       staticRoutes[route] = {
-        "GET": this.#staticFileHandler(
+        "HEAD": this.#staticFileHeadHandler(
+          size,
+          contentType,
+          etag,
+        ),
+        "GET": this.#staticFileGetHandler(
           localUrl,
           size,
           contentType,
@@ -475,15 +547,13 @@ export class ServerContext {
       status: number,
     ) => {
       const imports: string[] = [];
-      if (this.#dev) {
-        imports.push(REFRESH_JS_URL);
-      }
+      if (this.#dev) imports.push(REFRESH_JS_URL);
       return (
         req: Request,
         params: Record<string, string>,
         error?: unknown,
       ) => {
-        return async (data?: Data) => {
+        return async (data?: Data, options?: RenderOptions) => {
           if (route.component === undefined) {
             throw new Error("This page does not have a component to render.");
           }
@@ -497,14 +567,16 @@ export class ServerContext {
             );
           }
 
-          const preloads: string[] = [];
           const resp = await internalRender({
             route,
             islands: this.#islands,
             plugins: this.#plugins,
             app: this.#app,
             imports,
-            preloads,
+            dependenciesFn: (path) => {
+              const snapshot = this.#maybeBuildSnapshot();
+              return snapshot?.dependencies(path) ?? [];
+            },
             renderFn: this.#renderFn,
             url: new URL(req.url),
             params,
@@ -531,7 +603,13 @@ export class ServerContext {
               headers["content-security-policy"] = directive;
             }
           }
-          return new Response(body, { status, headers });
+          return new Response(body, {
+            status: options?.status ?? status,
+            statusText: options?.statusText,
+            headers: options?.headers
+              ? { ...headers, ...options.headers }
+              : headers,
+          });
         };
       };
     };
@@ -539,6 +617,9 @@ export class ServerContext {
     const createUnknownRender = genRender(this.#notFound, Status.NotFound);
 
     for (const route of this.#routes) {
+      if (this.#routerOptions.trailingSlash && route.pattern != "/") {
+        route.pattern += "/";
+      }
       const createRender = genRender(route, Status.OK);
       if (typeof route.handler === "function") {
         routes[route.pattern] = {
@@ -607,7 +688,43 @@ export class ServerContext {
     return { internalRoutes, staticRoutes, routes, otherHandler, errorHandler };
   }
 
-  #staticFileHandler(
+  #staticFileHeadHandler(
+    size: number,
+    contentType: string,
+    etag: string,
+  ): router.MatchHandler {
+    return (req: Request) => {
+      const url = new URL(req.url);
+      const key = url.searchParams.get(ASSET_CACHE_BUST_KEY);
+      if (key !== null && BUILD_ID !== key) {
+        url.searchParams.delete(ASSET_CACHE_BUST_KEY);
+        const location = url.pathname + url.search;
+        return new Response(null, {
+          status: 307,
+          headers: {
+            location,
+          },
+        });
+      }
+      const headers = new Headers({
+        "content-type": contentType,
+        etag,
+        vary: "If-None-Match",
+      });
+      if (key !== null) {
+        headers.set("Cache-Control", "public, max-age=31536000, immutable");
+      }
+      const ifNoneMatch = req.headers.get("if-none-match");
+      if (ifNoneMatch === etag || ifNoneMatch === "W/" + etag) {
+        return new Response(null, { status: 304, headers });
+      } else {
+        headers.set("content-length", String(size));
+        return new Response(null, { status: 200, headers });
+      }
+    };
+  }
+
+  #staticFileGetHandler(
     localUrl: URL,
     size: number,
     contentType: string,
@@ -652,27 +769,20 @@ export class ServerContext {
    */
   #bundleAssetRoute = (): router.MatchHandler => {
     return async (_req, _ctx, params) => {
-      const path = `/${params.path}`;
-      const file = await this.#bundler.get(path);
-      let res;
-      if (file) {
-        const headers = new Headers({
-          "Cache-Control": "public, max-age=604800, immutable",
-        });
+      const snapshot = await this.#buildSnapshot();
+      const contents = snapshot.read(params.path);
+      if (!contents) return new Response(null, { status: 404 });
 
-        const contentType = typeByExtension(extname(path));
-        if (contentType) {
-          headers.set("Content-Type", contentType);
-        }
+      const headers: Record<string, string> = {
+        "Cache-Control": "public, max-age=604800, immutable",
+      };
 
-        res = new Response(file, {
-          status: 200,
-          headers,
-        });
-      }
+      const contentType = typeByExtension(extname(params.path));
+      if (contentType) headers["Content-Type"] = contentType;
 
-      return res ?? new Response(null, {
-        status: 404,
+      return new Response(contents, {
+        status: 200,
+        headers,
       });
     };
   };
@@ -682,6 +792,10 @@ const DEFAULT_RENDER_FN: RenderFunction = (_ctx, render) => {
   render();
 };
 
+const DEFAULT_ROUTER_OPTIONS: RouterOptions = {
+  trailingSlash: false,
+};
+
 const DEFAULT_APP: AppModule = {
   default: ({ Component }) => h(Component, {}),
 };
@@ -834,17 +948,65 @@ es.addEventListener("message", function listener(e) {
 });`;
 }
 
-/**
- * Clean the pathname in the given URL by removing all trailing slashes.
- *
- * Returns true if the pathname was changed.
- */
-export function cleanPathname(url: URL): boolean {
-  const pathname = url.pathname.replace(/\/+$/, "");
-  if (pathname === "") return false;
-  if (pathname !== url.pathname) {
-    url.pathname = pathname;
-    return true;
+function collectEntrypoints(
+  dev: boolean,
+  islands: Island[],
+  plugins: Plugin[],
+): Record<string, string> {
+  const entrypointBase = "../runtime/entrypoints";
+  const entryPoints: Record<string, string> = {
+    main: dev
+      ? import.meta.resolve(`${entrypointBase}/main_dev.ts`)
+      : import.meta.resolve(`${entrypointBase}/main.ts`),
+    deserializer: import.meta.resolve(`${entrypointBase}/deserializer.ts`),
+  };
+
+  try {
+    import.meta.resolve("@preact/signals");
+    entryPoints.signals = import.meta.resolve(`${entrypointBase}/signals.ts`);
+  } catch {
+    // @preact/signals is not in the import map
+  }
+
+  for (const island of islands) {
+    entryPoints[`island-${island.id}`] = island.url;
+  }
+
+  for (const plugin of plugins) {
+    for (const [name, url] of Object.entries(plugin.entrypoints ?? {})) {
+      entryPoints[`plugin-${plugin.name}-${name}`] = url;
+    }
+  }
+
+  return entryPoints;
+}
+
+async function readDenoConfig(
+  directory: string,
+): Promise<{ config: DenoConfig; path: string }> {
+  let dir = directory;
+  while (true) {
+    for (const name of ["deno.json", "deno.jsonc"]) {
+      const path = join(dir, name);
+      try {
+        const file = await Deno.readTextFile(path);
+        if (name.endsWith(".jsonc")) {
+          return { config: JSONC.parse(file) as DenoConfig, path };
+        } else {
+          return { config: JSON.parse(file), path };
+        }
+      } catch (err) {
+        if (!(err instanceof Deno.errors.NotFound)) {
+          throw err;
+        }
+      }
+    }
+    const parent = dirname(dir);
+    if (parent === dir) {
+      throw new Error(
+        `Could not find a deno.json file in the current directory or any parent directory.`,
+      );
+    }
+    dir = parent;
   }
-  return false;
 }
diff --git a/src/server/default_error_page.ts b/src/server/default_error_page.ts
index 2f54f2b1a7a..e5f22c0aa2d 100644
--- a/src/server/default_error_page.ts
+++ b/src/server/default_error_page.ts
@@ -17,6 +17,7 @@ export default function DefaultErrorPage(props: ErrorPageProps) {
   return h(
     "div",
     {
+      class: "frsh-error-page",
       style: {
         display: "flex",
         justifyContent: "center",
diff --git a/src/server/deps.ts b/src/server/deps.ts
index f333b97a747..9a2bbd3e367 100644
--- a/src/server/deps.ts
+++ b/src/server/deps.ts
@@ -1,21 +1,28 @@
 // -- std --
 export {
+  dirname,
   extname,
   fromFileUrl,
+  join,
   toFileUrl,
-} from "https://deno.land/std@0.178.0/path/mod.ts";
-export { walk } from "https://deno.land/std@0.178.0/fs/walk.ts";
-export { serve } from "https://deno.land/std@0.178.0/http/server.ts";
+} from "https://deno.land/std@0.190.0/path/mod.ts";
+export { walk } from "https://deno.land/std@0.190.0/fs/walk.ts";
+export {
+  type Handler as ServeHandler,
+  serve,
+} from "https://deno.land/std@0.190.0/http/server.ts";
 export type {
   ConnInfo,
   Handler as RequestHandler,
   ServeInit,
-} from "https://deno.land/std@0.178.0/http/server.ts";
-export { Status } from "https://deno.land/std@0.178.0/http/http_status.ts";
+} from "https://deno.land/std@0.190.0/http/server.ts";
+export { Status } from "https://deno.land/std@0.190.0/http/http_status.ts";
 export {
   typeByExtension,
-} from "https://deno.land/std@0.178.0/media_types/mod.ts";
-export { toHashString } from "https://deno.land/std@0.178.0/crypto/to_hash_string.ts";
+} from "https://deno.land/std@0.190.0/media_types/mod.ts";
+export { toHashString } from "https://deno.land/std@0.190.0/crypto/to_hash_string.ts";
+export { escape } from "https://deno.land/std@0.190.0/regexp/escape.ts";
+export * as JSONC from "https://deno.land/std@0.190.0/jsonc/mod.ts";
 
 // -- esbuild --
 // @deno-types="https://deno.land/x/esbuild@v0.17.11/mod.d.ts"
@@ -28,5 +35,4 @@ const esbuild: typeof esbuildWasm = Deno.run === undefined
   : esbuildNative;
 export { esbuild, esbuildWasm as esbuildTypes };
 
-// TODO(lino-levan): Replace with versioned import
-export { denoPlugin } from "https://raw.githubusercontent.com/lucacasonato/esbuild_deno_loader/8031f71afa1bbcd3237a94b11f53a2e5c5c0e7bf/mod.ts";
+export { denoPlugins } from "https://deno.land/x/esbuild_deno_loader@0.7.0/mod.ts";
diff --git a/src/server/mod.ts b/src/server/mod.ts
index 37cec50ebd7..82a57988cb5 100644
--- a/src/server/mod.ts
+++ b/src/server/mod.ts
@@ -1,5 +1,6 @@
 import { ServerContext } from "./context.ts";
-import { serve } from "./deps.ts";
+import * as colors from "https://deno.land/std@0.190.0/fmt/colors.ts";
+import { serve, ServeHandler } from "./deps.ts";
 export { Status } from "./deps.ts";
 import {
   AppModule,
@@ -47,11 +48,11 @@ export interface Manifest {
   >;
   islands: Record<string, IslandModule>;
   baseUrl: string;
-  config?: DenoConfig;
 }
 
 export interface DenoConfig {
-  importMap: string;
+  imports?: Record<string, string>;
+  importMap?: string;
   compilerOptions?: {
     jsx?: string;
     jsxImportSource?: string;
@@ -60,13 +61,75 @@ export interface DenoConfig {
 
 export { ServerContext };
 
+export async function createHandler(
+  routes: Manifest,
+  opts: StartOptions = {},
+) {
+  const ctx = await ServerContext.fromManifest(routes, opts);
+  return ctx.handler();
+}
+
 export async function start(routes: Manifest, opts: StartOptions = {}) {
   const ctx = await ServerContext.fromManifest(routes, opts);
-  opts.port ??= 8000;
+
+  if (!opts.onListen) {
+    opts.onListen = (params) => {
+      console.log(
+        `\n%c 🍋 Fresh ready %c`,
+        "background-color: #86efac; color: black; font-weight: bold",
+        "",
+      );
+      const address = colors.cyan(`http://localhost:${params.port}/`);
+      const localLabel = colors.bold("Local:");
+      console.log(`    ${localLabel} ${address}\n`);
+    };
+  }
+
+  const portEnv = Deno.env.get("PORT");
+  if (portEnv !== undefined) {
+    opts.port ??= parseInt(portEnv, 10);
+  }
+
+  const handler = ctx.handler();
+
+  if (opts.port) {
+    await bootServer(handler, opts);
+  } else {
+    // No port specified, check for a free port. Instead of picking just
+    // any port we'll check if the next one is free for UX reasons.
+    // That way the user only needs to increment a number when running
+    // multiple apps vs having to remember completely different ports.
+    let firstError;
+    for (let port = 8000; port < 8020; port++) {
+      try {
+        await bootServer(handler, { ...opts, port });
+        firstError = undefined;
+        break;
+      } catch (err) {
+        if (err instanceof Deno.errors.AddrInUse) {
+          // Throw first EADDRINUSE error
+          // if no port is free
+          if (!firstError) {
+            firstError = err;
+          }
+          continue;
+        }
+
+        throw err;
+      }
+    }
+
+    if (firstError) {
+      throw firstError;
+    }
+  }
+}
+
+async function bootServer(handler: ServeHandler, opts: StartOptions) {
   if (opts.experimentalDenoServe === true) {
     // @ts-ignore as `Deno.serve` is still unstable.
-    await Deno.serve(ctx.handler() as Deno.ServeHandler, opts);
+    await Deno.serve({ ...opts, handler }).finished;
   } else {
-    await serve(ctx.handler(), opts);
+    await serve(handler, opts);
   }
 }
diff --git a/src/server/render.ts b/src/server/render.ts
index 347c7960fad..086292c3975 100644
--- a/src/server/render.ts
+++ b/src/server/render.ts
@@ -1,5 +1,14 @@
 import { renderToString } from "preact-render-to-string";
-import { ComponentChildren, ComponentType, h, options } from "preact";
+import {
+  Component,
+  ComponentChildren,
+  ComponentType,
+  Fragment,
+  h,
+  Options as PreactOptions,
+  options as preactOptions,
+  VNode,
+} from "preact";
 import {
   AppModule,
   ErrorPage,
@@ -18,6 +27,17 @@ import { ContentSecurityPolicy } from "../runtime/csp.ts";
 import { bundleAssetUrl } from "./constants.ts";
 import { assetHashingHook } from "../runtime/utils.ts";
 import { htmlEscapeJsonString } from "./htmlescape.ts";
+import { serialize } from "./serializer.ts";
+
+// These hooks are long stable, but when we originally added them we
+// weren't sure if they should be public.
+export interface AdvancedPreactOptions extends PreactOptions {
+  /** Attach a hook that is invoked after a tree was mounted or was updated. */
+  __c?(vnode: VNode, commitQueue: Component[]): void;
+  /** Attach a hook that is invoked before a vnode has rendered. */
+  __r?(vnode: VNode): void;
+}
+const options = preactOptions as AdvancedPreactOptions;
 
 export interface RenderOptions<Data> {
   route: Route<Data> | UnknownPage | ErrorPage;
@@ -25,7 +45,7 @@ export interface RenderOptions<Data> {
   plugins: Plugin[];
   app: AppModule;
   imports: string[];
-  preloads: string[];
+  dependenciesFn: (path: string) => string[];
   url: URL;
   params: Record<string, string | string[]>;
   renderFn: RenderFunction;
@@ -129,6 +149,10 @@ export async function render<Data>(
     children: h(HEAD_CONTEXT.Provider, {
       value: headComponents,
       children: h(opts.app.default, {
+        params: opts.params as Record<string, string>,
+        url: opts.url,
+        route: opts.route.pattern,
+        data: opts.data,
         Component() {
           return h(opts.route.component! as ComponentType<unknown>, props);
         },
@@ -163,18 +187,18 @@ export async function render<Data>(
 
   let bodyHtml: string | null = null;
 
-  function realRender(): string {
+  function renderInner(): string {
     bodyHtml = renderToString(vnode);
     return bodyHtml;
   }
 
-  const plugins = opts.plugins.filter((p) => p.render !== null);
+  const syncPlugins = opts.plugins.filter((p) => p.render);
   const renderResults: [Plugin, PluginRenderResult][] = [];
 
-  function render(): PluginRenderFunctionResult {
-    const plugin = plugins.shift();
+  function renderSync(): PluginRenderFunctionResult {
+    const plugin = syncPlugins.shift();
     if (plugin) {
-      const res = plugin.render!({ render });
+      const res = plugin.render!({ render: renderSync });
       if (res === undefined) {
         throw new Error(
           `${plugin?.name}'s render hook did not return a PluginRenderResult object.`,
@@ -182,7 +206,7 @@ export async function render<Data>(
       }
       renderResults.push([plugin, res]);
     } else {
-      realRender();
+      renderInner();
     }
     if (bodyHtml === null) {
       throw new Error(
@@ -195,15 +219,43 @@ export async function render<Data>(
     };
   }
 
-  await opts.renderFn(ctx, () => render().htmlText);
+  const asyncPlugins = opts.plugins.filter((p) => p.renderAsync);
 
-  if (bodyHtml === null) {
-    throw new Error("The `render` function was not called by the renderer.");
+  async function renderAsync(): Promise<PluginRenderFunctionResult> {
+    const plugin = asyncPlugins.shift();
+    if (plugin) {
+      const res = await plugin.renderAsync!({ renderAsync });
+      if (res === undefined) {
+        throw new Error(
+          `${plugin?.name}'s async render hook did not return a PluginRenderResult object.`,
+        );
+      }
+      renderResults.push([plugin, res]);
+      if (bodyHtml === null) {
+        throw new Error(
+          `The 'renderAsync' function was not called by ${plugin?.name}'s async render hook.`,
+        );
+      }
+    } else {
+      await opts.renderFn(ctx, () => renderSync().htmlText);
+      if (bodyHtml === null) {
+        throw new Error(
+          `The 'render' function was not called by the legacy async render hook.`,
+        );
+      }
+    }
+    return {
+      htmlText: bodyHtml,
+      requiresHydration: ENCOUNTERED_ISLANDS.size > 0,
+    };
   }
 
-  bodyHtml = bodyHtml as string;
+  await renderAsync();
+  bodyHtml = bodyHtml as unknown as string;
+
+  const moduleScripts: [string, string][] = [];
 
-  const imports = opts.imports.map((url) => {
+  for (const url of opts.imports) {
     const randomNonce = crypto.randomUUID().replace(/-/g, "");
     if (csp) {
       csp.directives.scriptSrc = [
@@ -211,76 +263,98 @@ export async function render<Data>(
         nonce(randomNonce),
       ];
     }
-    return [url, randomNonce] as const;
-  });
+    moduleScripts.push([url, randomNonce]);
+  }
+
+  const preloadSet = new Set<string>();
+  function addImport(path: string): string {
+    const randomNonce = crypto.randomUUID().replace(/-/g, "");
+    if (csp) {
+      csp.directives.scriptSrc = [
+        ...csp.directives.scriptSrc ?? [],
+        nonce(randomNonce),
+      ];
+    }
+    const url = bundleAssetUrl(`/${path}`);
+    preloadSet.add(url);
+    for (const depPath of opts.dependenciesFn(path)) {
+      const url = bundleAssetUrl(`/${depPath}`);
+      preloadSet.add(url);
+    }
+    return url;
+  }
 
   const state: [islands: unknown[], plugins: unknown[]] = [ISLAND_PROPS, []];
   const styleTags: PluginRenderStyleTag[] = [];
-
-  let script =
-    `const STATE_COMPONENT = document.getElementById("__FRSH_STATE");const STATE = JSON.parse(STATE_COMPONENT?.textContent ?? "[[],[]]");`;
+  const pluginScripts: [string, string, number][] = [];
 
   for (const [plugin, res] of renderResults) {
     for (const hydrate of res.scripts ?? []) {
       const i = state[1].push(hydrate.state) - 1;
-      const randomNonce = crypto.randomUUID().replace(/-/g, "");
-      if (csp) {
-        csp.directives.scriptSrc = [
-          ...csp.directives.scriptSrc ?? [],
-          nonce(randomNonce),
-        ];
-      }
-      const url = bundleAssetUrl(
-        `/plugin-${plugin.name}-${hydrate.entrypoint}.js`,
-      );
-      imports.push([url, randomNonce] as const);
-
-      script += `import p${i} from "${url}";p${i}(STATE[1][${i}]);`;
+      pluginScripts.push([plugin.name, hydrate.entrypoint, i]);
     }
     styleTags.splice(styleTags.length, 0, ...res.styles ?? []);
   }
 
-  if (ENCOUNTERED_ISLANDS.size > 0) {
-    // Load the main.js script
-    {
-      const randomNonce = crypto.randomUUID().replace(/-/g, "");
-      if (csp) {
-        csp.directives.scriptSrc = [
-          ...csp.directives.scriptSrc ?? [],
-          nonce(randomNonce),
-        ];
+  // The inline script that will hydrate the page.
+  let script = "";
+
+  // Serialize the state into the <script id=__FRSH_STATE> tag and generate the
+  // inline script to deserialize it. This script starts by deserializing the
+  // state in the tag. This potentially requires importing @preact/signals.
+  if (state[0].length > 0 || state[1].length > 0) {
+    const res = serialize(state);
+    const escapedState = htmlEscapeJsonString(res.serialized);
+    bodyHtml +=
+      `<script id="__FRSH_STATE" type="application/json">${escapedState}</script>`;
+
+    if (res.requiresDeserializer) {
+      const url = addImport("deserializer.js");
+      script += `import { deserialize } from "${url}";`;
+    }
+    if (res.hasSignals) {
+      const url = addImport("signals.js");
+      script += `import { signal } from "${url}";`;
+    }
+    script += `const ST = document.getElementById("__FRSH_STATE").textContent;`;
+    script += `const STATE = `;
+    if (res.requiresDeserializer) {
+      if (res.hasSignals) {
+        script += `deserialize(ST, signal);`;
+      } else {
+        script += `deserialize(ST);`;
       }
-      const url = bundleAssetUrl("/main.js");
-      imports.push([url, randomNonce] as const);
+    } else {
+      script += `JSON.parse(ST).v;`;
     }
+  }
 
-    script += `import { revive } from "${bundleAssetUrl("/main.js")}";`;
+  // Then it imports all plugin scripts and executes them (with their respective
+  // state).
+  for (const [pluginName, entrypoint, i] of pluginScripts) {
+    const url = addImport(`plugin-${pluginName}-${entrypoint}.js`);
+    script += `import p${i} from "${url}";p${i}(STATE[1][${i}]);`;
+  }
+
+  // Finally, it loads all island scripts and hydrates the islands using the
+  // reviver from the "main" script.
+  if (ENCOUNTERED_ISLANDS.size > 0) {
+    // Load the main.js script
+    const url = addImport("main.js");
+    script += `import { revive } from "${url}";`;
 
     // Prepare the inline script that loads and revives the islands
     let islandRegistry = "";
     for (const island of ENCOUNTERED_ISLANDS) {
-      const randomNonce = crypto.randomUUID().replace(/-/g, "");
-      if (csp) {
-        csp.directives.scriptSrc = [
-          ...csp.directives.scriptSrc ?? [],
-          nonce(randomNonce),
-        ];
-      }
-      const url = bundleAssetUrl(`/island-${island.id}.js`);
-      imports.push([url, randomNonce] as const);
+      const url = addImport(`island-${island.id}.js`);
       script += `import ${island.name} from "${url}";`;
       islandRegistry += `${island.id}:${island.name},`;
     }
     script += `revive({${islandRegistry}}, STATE[0]);`;
   }
 
-  if (state[0].length > 0 || state[1].length > 0) {
-    // Append state to the body
-    bodyHtml += `<script id="__FRSH_STATE" type="application/json">${
-      htmlEscapeJsonString(JSON.stringify(state))
-    }</script>`;
-
-    // Append the inline script to the body
+  // Append the inline script.
+  if (script !== "") {
     const randomNonce = crypto.randomUUID().replace(/-/g, "");
     if (csp) {
       csp.directives.scriptSrc = [
@@ -309,11 +383,12 @@ export async function render<Data>(
     headComponents.splice(0, 0, node);
   }
 
+  const preloads = [...preloadSet];
   const html = template({
     bodyHtml,
     headComponents,
-    imports,
-    preloads: opts.preloads,
+    moduleScripts,
+    preloads,
     lang: ctx.lang,
   });
 
@@ -323,7 +398,7 @@ export async function render<Data>(
 export interface TemplateOptions {
   bodyHtml: string;
   headComponents: ComponentChildren[];
-  imports: (readonly [string, string])[];
+  moduleScripts: (readonly [string, string])[];
   preloads: string[];
   lang: string;
 }
@@ -343,7 +418,7 @@ export function template(opts: TemplateOptions): string {
       opts.preloads.map((src) =>
         h("link", { rel: "modulepreload", href: src })
       ),
-      opts.imports.map(([src, nonce]) =>
+      opts.moduleScripts.map(([src, nonce]) =>
         h("script", { src: src, nonce: nonce, type: "module" })
       ),
       opts.headComponents,
@@ -353,35 +428,142 @@ export function template(opts: TemplateOptions): string {
   return "<!DOCTYPE html>" + renderToString(page);
 }
 
+const supportsUnstableComments = renderToString(h(Fragment, {
+  // @ts-ignore unstable features not supported in types
+  UNSTABLE_comment: "foo",
+})) !== "";
+
+if (!supportsUnstableComments) {
+  console.warn(
+    "⚠️  Found old version of 'preact-render-to-string'. Please upgrade it to >=6.1.0",
+  );
+}
+
+function wrapWithMarker(vnode: ComponentChildren, markerText: string) {
+  // Newer versions of preact-render-to-string allow you to render comments
+  if (supportsUnstableComments) {
+    return h(
+      Fragment,
+      null,
+      h(Fragment, {
+        // @ts-ignore unstable property is not typed
+        UNSTABLE_comment: markerText,
+      }),
+      vnode,
+      h(Fragment, {
+        // @ts-ignore unstable property is not typed
+        UNSTABLE_comment: "/" + markerText,
+      }),
+    );
+  } else {
+    return h(
+      `!--${markerText}--`,
+      null,
+      vnode,
+    );
+  }
+}
+
 // Set up a preact option hook to track when vnode with custom functions are
 // created.
 const ISLANDS: Island[] = [];
 const ENCOUNTERED_ISLANDS: Set<Island> = new Set([]);
 let ISLAND_PROPS: unknown[] = [];
+
+// Keep track of which component rendered which vnode. This allows us
+// to detect when an island is rendered within another instead of being
+// passed as children.
+let ownerStack: VNode[] = [];
+const islandOwners = new Map<VNode, VNode>();
+
 const originalHook = options.vnode;
 let ignoreNext = false;
 options.vnode = (vnode) => {
   assetHashingHook(vnode);
   const originalType = vnode.type as ComponentType<unknown>;
+
+  // Use a labelled statement that allows ous to break out of it
+  // whilst still continuing execution. We still want to call previous
+  // `options.vnode` hooks if there were any, otherwise we'd break
+  // the change for other plugins hooking into Preact.
+  patchIslands:
   if (typeof vnode.type === "function") {
     const island = ISLANDS.find((island) => island.component === originalType);
     if (island) {
+      const hasOwners = ownerStack.length > 0;
+      if (hasOwners) {
+        const prevOwner = ownerStack[ownerStack.length - 1];
+        islandOwners.set(vnode, prevOwner);
+      }
+
+      // Check if we already patched this component
       if (ignoreNext) {
         ignoreNext = false;
-        return;
+        break patchIslands;
+      }
+
+      // Check if an island is rendered inside another island, not just
+      // passed as a child. Example:
+      //   function Island() {}
+      //     return <OtherIsland />
+      //   }
+      if (hasOwners) {
+        const prevOwner = ownerStack[ownerStack.length - 1];
+        if (islandOwners.has(prevOwner)) {
+          break patchIslands;
+        }
       }
+
       ENCOUNTERED_ISLANDS.add(island);
       vnode.type = (props) => {
         ignoreNext = true;
+
+        // Only passing children JSX to islands is supported for now
+        if ("children" in props) {
+          const children = props.children;
+          // @ts-ignore nonono
+          props.children = wrapWithMarker(
+            children,
+            `frsh-slot-${island.id}:children`,
+          );
+        }
+
         const child = h(originalType, props);
         ISLAND_PROPS.push(props);
-        return h(
-          `!--frsh-${island.id}:${ISLAND_PROPS.length - 1}--`,
-          null,
+
+        return wrapWithMarker(
           child,
+          `frsh-${island.id}:${ISLAND_PROPS.length - 1}`,
         );
       };
     }
   }
   if (originalHook) originalHook(vnode);
 };
+
+// Keep track of owners
+const oldDiffed = options.diffed;
+const oldRender = options.__r;
+const oldCommit = options.__c;
+options.__r = (vnode) => {
+  if (
+    typeof vnode.type === "function" &&
+    vnode.type !== Fragment
+  ) {
+    ownerStack.push(vnode);
+  }
+  oldRender?.(vnode);
+};
+options.diffed = (vnode) => {
+  if (typeof vnode.type === "function") {
+    if (vnode.type !== Fragment) {
+      ownerStack.pop();
+    }
+  }
+  oldDiffed?.(vnode);
+};
+options.__c = (vnode, queue) => {
+  oldCommit?.(vnode, queue);
+  ownerStack = [];
+  islandOwners.clear();
+};
diff --git a/src/server/render_test.ts b/src/server/render_test.ts
index 40a6d0f9cce..9e2172f7f5d 100644
--- a/src/server/render_test.ts
+++ b/src/server/render_test.ts
@@ -6,7 +6,7 @@ Deno.test("check lang", () => {
   const body = template({
     bodyHtml: "",
     headComponents: [],
-    imports: [],
+    moduleScripts: [],
     preloads: [],
     lang,
   });
diff --git a/src/server/router.ts b/src/server/router.ts
index 24a7f15d22d..bca17c036e0 100644
--- a/src/server/router.ts
+++ b/src/server/router.ts
@@ -157,6 +157,11 @@ export function router<T = unknown>(
           }
         }
 
+        // If not overridden, HEAD requests should be handled as GET requests but without the body.
+        if (req.method === "HEAD" && !route.methods["HEAD"]) {
+          req = new Request(req.url, { method: "GET", headers: req.headers });
+        }
+
         for (const [method, handler] of Object.entries(route.methods)) {
           if (req.method === method) {
             return {
diff --git a/src/server/serializer.ts b/src/server/serializer.ts
new file mode 100644
index 00000000000..99c7167e43e
--- /dev/null
+++ b/src/server/serializer.ts
@@ -0,0 +1,199 @@
+/**
+ * This module contains a serializer for island props. The serializer is capable
+ * of serializing the following:
+ *
+ * - `null`
+ * - `boolean`
+ * - `number`
+ * - `string`
+ * - `array`
+ * - `object` (no prototypes)
+ * - `Uint8Array`
+ * - `Signal` from `@preact/signals`
+ *
+ * Circular references are supported and objects with the same reference are
+ * serialized only once.
+ *
+ * The corresponding deserializer is in `src/runtime/deserializer.ts`.
+ */
+import { isValidElement, VNode } from "preact";
+import { KEY } from "../runtime/deserializer.ts";
+
+interface SerializeResult {
+  /** The string serialization. */
+  serialized: string;
+  /** If the deserializer is required to deserialize this string. If this is
+   * `false` the serialized string can be deserialized with `JSON.parse`. */
+  requiresDeserializer: boolean;
+  /** If the serialization contains serialized signals. If this is `true` the
+   * deserializer must be passed a factory functions for signals. */
+  hasSignals: boolean;
+}
+
+interface Signal {
+  peek(): unknown;
+  value: unknown;
+}
+
+// deno-lint-ignore no-explicit-any
+function isSignal(x: any): x is Signal {
+  return (
+    x !== null &&
+    typeof x === "object" &&
+    typeof x.peek === "function" &&
+    "value" in x
+  );
+}
+
+// deno-lint-ignore no-explicit-any
+function isVNode(x: any): x is VNode {
+  return x !== null && typeof x === "object" && "type" in x && "ref" in x &&
+    "__k" in x &&
+    isValidElement(x);
+}
+
+export function serialize(data: unknown): SerializeResult {
+  let requiresDeserializer = false;
+  let hasSignals = false;
+  const seen = new Map<unknown, (string | null)[]>();
+  const references = new Map<(string | null)[], (string | null)[][]>();
+
+  const keyStack: (string | null)[] = [];
+  const parentStack: unknown[] = [];
+
+  let earlyReturn = false;
+
+  const toSerialize = {
+    v: data,
+    get r() {
+      earlyReturn = true;
+      if (references.size > 0) {
+        const refs = [];
+        for (const [targetPath, refPaths] of references) {
+          refs.push([targetPath, ...refPaths]);
+        }
+        return refs;
+      }
+      return undefined;
+    },
+  };
+
+  function replacer(
+    this: unknown,
+    key: string | null,
+    value: unknown,
+  ): unknown {
+    if (value === toSerialize || earlyReturn) {
+      return value;
+    }
+
+    // For some object types, the path in the object graph from root is not the
+    // same between the serialized representation, and deserialized objects. For
+    // these cases, we have to change the contents of the key stack to match the
+    // deserialized object.
+    if (typeof this === "object" && this !== null && KEY in this) {
+      if (this[KEY] === "s" && key === "v") key = "value"; // signals
+      if (this[KEY] === "l" && key === "v") key = null; // literals (magic key object)
+    }
+
+    if (this !== toSerialize) {
+      const parentIndex = parentStack.indexOf(this);
+      parentStack.splice(parentIndex + 1);
+      keyStack.splice(parentIndex);
+      keyStack.push(key);
+      // the parent is pushed before return
+    }
+
+    if (typeof value === "object" && value !== null) {
+      const path = seen.get(value);
+      const currentPath = [...keyStack];
+      if (path !== undefined) {
+        requiresDeserializer = true;
+        const referenceArr = references.get(path);
+        if (referenceArr === undefined) {
+          references.set(path, [currentPath]);
+        } else {
+          referenceArr.push(currentPath);
+        }
+        return 0;
+      } else if (isVNode(value)) {
+        requiresDeserializer = true;
+        // No need to serialize JSX as we pick that up from
+        // the rendered HTML in the browser.
+        const res = null;
+        parentStack.push(res);
+        return res;
+      } else {
+        seen.set(value, currentPath);
+      }
+    }
+
+    if (isSignal(value)) {
+      requiresDeserializer = true;
+      hasSignals = true;
+      const res = { [KEY]: "s", v: value.peek() };
+      parentStack.push(res);
+      return res;
+    } else if (value instanceof Uint8Array) {
+      requiresDeserializer = true;
+      const res = { [KEY]: "u8a", d: b64encode(value) };
+      parentStack.push(res);
+      return res;
+    } else if (typeof value === "object" && value && KEY in value) {
+      requiresDeserializer = true;
+      // deno-lint-ignore no-explicit-any
+      const v: any = { ...value };
+      const k = v[KEY];
+      delete v[KEY];
+      const res = { [KEY]: "l", k, v };
+      parentStack.push(res);
+      return res;
+    } else {
+      parentStack.push(value);
+      return value;
+    }
+  }
+
+  const serialized = JSON.stringify(toSerialize, replacer);
+  return { serialized, requiresDeserializer, hasSignals };
+}
+
+// deno-fmt-ignore
+const base64abc = [
+  "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O",
+  "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d",
+  "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s",
+  "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7",
+  "8", "9", "+", "/",
+];
+
+/**
+ * CREDIT: https://gist.github.com/enepomnyaschih/72c423f727d395eeaa09697058238727
+ * Encodes a given Uint8Array, ArrayBuffer or string into RFC4648 base64 representation
+ */
+export function b64encode(buffer: ArrayBuffer): string {
+  const uint8 = new Uint8Array(buffer);
+  let result = "",
+    i;
+  const l = uint8.length;
+  for (i = 2; i < l; i += 3) {
+    result += base64abc[uint8[i - 2] >> 2];
+    result += base64abc[((uint8[i - 2] & 0x03) << 4) | (uint8[i - 1] >> 4)];
+    result += base64abc[((uint8[i - 1] & 0x0f) << 2) | (uint8[i] >> 6)];
+    result += base64abc[uint8[i] & 0x3f];
+  }
+  if (i === l + 1) {
+    // 1 octet yet to write
+    result += base64abc[uint8[i - 2] >> 2];
+    result += base64abc[(uint8[i - 2] & 0x03) << 4];
+    result += "==";
+  }
+  if (i === l) {
+    // 2 octets yet to write
+    result += base64abc[uint8[i - 2] >> 2];
+    result += base64abc[((uint8[i - 2] & 0x03) << 4) | (uint8[i - 1] >> 4)];
+    result += base64abc[(uint8[i - 1] & 0x0f) << 2];
+    result += "=";
+  }
+  return result;
+}
diff --git a/src/server/serializer_test.ts b/src/server/serializer_test.ts
new file mode 100644
index 00000000000..9674b2250f0
--- /dev/null
+++ b/src/server/serializer_test.ts
@@ -0,0 +1,149 @@
+// deno-lint-ignore-file no-explicit-any
+
+import { serialize } from "./serializer.ts";
+import { assert, assertEquals, assertSnapshot } from "../../tests/deps.ts";
+import { deserialize, KEY } from "../runtime/deserializer.ts";
+import { signal } from "@preact/signals";
+
+Deno.test("serializer - primitives & plain objects", async (t) => {
+  const data = {
+    a: 1,
+    b: "2",
+    c: true,
+    d: null,
+    f: [1, 2, 3],
+    g: { a: 1, b: 2, c: 3 },
+  };
+  const res = serialize(data);
+  assert(!res.requiresDeserializer);
+  assert(!res.hasSignals);
+  await assertSnapshot(t, res.serialized);
+  const deserialized = deserialize(res.serialized);
+  assertEquals(deserialized, data);
+});
+
+Deno.test("serializer - Uint8Array", async (t) => {
+  const data = { a: new Uint8Array([1, 2, 3]) };
+  const res = serialize(data);
+  assert(res.requiresDeserializer);
+  assert(!res.hasSignals);
+  await assertSnapshot(t, res.serialized);
+  const deserialized = deserialize(res.serialized);
+  assertEquals(deserialized, data);
+});
+
+Deno.test("serializer - signals", async (t) => {
+  const data = {
+    a: 1,
+    b: signal(2),
+  };
+  const res = serialize(data);
+  assert(res.requiresDeserializer);
+  assert(res.hasSignals);
+  await assertSnapshot(t, res.serialized);
+  const deserialized: any = deserialize(res.serialized, signal);
+  assertEquals(typeof deserialized, "object");
+  assertEquals(deserialized.a, 1);
+  assertEquals(deserialized.b.value, 2);
+  assertEquals(deserialized.b.peek(), 2);
+});
+
+Deno.test("serializer - magic key", async (t) => {
+  const data = { [KEY]: "f", a: 1 };
+  const res = serialize(data);
+  assert(res.requiresDeserializer);
+  assert(!res.hasSignals);
+  await assertSnapshot(t, res.serialized);
+  const deserialized = deserialize(res.serialized);
+  assertEquals(deserialized, data);
+});
+
+Deno.test("serializer - circular reference objects", async (t) => {
+  const data: any = { a: 1 };
+  data.b = data;
+  const res = serialize(data);
+  assert(res.requiresDeserializer);
+  assert(!res.hasSignals);
+  await assertSnapshot(t, res.serialized);
+  const deserialized = deserialize(res.serialized);
+  assertEquals(deserialized, data);
+});
+
+Deno.test("serializer - circular reference nested objects", async (t) => {
+  const data: any = { a: 1, b: { c: 2 } };
+  data.b.d = data;
+  const res = serialize(data);
+  assert(res.requiresDeserializer);
+  assert(!res.hasSignals);
+  await assertSnapshot(t, res.serialized);
+  const deserialized = deserialize(res.serialized);
+  assertEquals(deserialized, data);
+});
+
+Deno.test("serializer - circular reference array", async (t) => {
+  const data: any = [1, 2, 3];
+  data.push(data);
+  const res = serialize(data);
+  assert(res.requiresDeserializer);
+  assert(!res.hasSignals);
+  await assertSnapshot(t, res.serialized);
+  const deserialized: any = deserialize(res.serialized);
+  assertEquals(deserialized, data);
+  assertEquals(deserialized.length, 4);
+});
+
+Deno.test("serializer - multiple reference", async (t) => {
+  const data: any = { a: 1, b: { c: 2 } };
+  data.d = data.b;
+  const res = serialize(data);
+  assert(res.requiresDeserializer);
+  assert(!res.hasSignals);
+  await assertSnapshot(t, res.serialized);
+  const deserialized = deserialize(res.serialized);
+  assertEquals(deserialized, data);
+});
+
+Deno.test("serializer - multiple reference signals", async (t) => {
+  const inner: any = { [KEY]: "x", x: 1 };
+  inner.y = inner;
+  const s = signal(inner);
+  const data = { inner, a: s, b: { c: s } };
+  const res = serialize(data);
+  assert(res.requiresDeserializer);
+  assert(res.hasSignals);
+  await assertSnapshot(t, res.serialized);
+  const deserialized: any = deserialize(res.serialized, signal);
+  assertEquals(deserialized.a.value, inner);
+  assertEquals(deserialized.a.peek(), inner);
+  assertEquals(deserialized.b.c.value, inner);
+  assertEquals(deserialized.b.c.peek(), inner);
+  deserialized.a.value = 2;
+  assertEquals(deserialized.a.value, 2);
+  assertEquals(deserialized.b.c.value, 2);
+});
+
+Deno.test("serializer - multiple reference in magic key", async (t) => {
+  const inner = { foo: "bar" };
+  const literal: any = { [KEY]: "x", inner };
+  const data = { literal, inner };
+  const res = serialize(data);
+  assert(res.requiresDeserializer);
+  assert(!res.hasSignals);
+  await assertSnapshot(t, res.serialized);
+  const deserialized: any = deserialize(res.serialized);
+  assertEquals(deserialized, data);
+});
+
+Deno.test("serializer - multiple reference in signal", async (t) => {
+  const inner = { foo: "bar" };
+  const s = signal(inner);
+  const data = { s, inner };
+  const res = serialize(data);
+  assert(res.requiresDeserializer);
+  assert(res.hasSignals);
+  await assertSnapshot(t, res.serialized);
+  const deserialized: any = deserialize(res.serialized, signal);
+  assertEquals(deserialized.s.value, inner);
+  assertEquals(deserialized.s.peek(), inner);
+  assertEquals(deserialized.inner, inner);
+});
diff --git a/src/server/types.ts b/src/server/types.ts
index e52ab3a4425..760e24cc45c 100644
--- a/src/server/types.ts
+++ b/src/server/types.ts
@@ -19,6 +19,15 @@ export interface FreshOptions {
   render?: RenderFunction;
   plugins?: Plugin[];
   staticDir?: string;
+  router?: RouterOptions;
+}
+
+export interface RouterOptions {
+  /**
+   *  Controls whether Fresh will append a trailing slash to the URL.
+   *  @default {false}
+   */
+  trailingSlash?: boolean;
 }
 
 export type RenderFunction = (
@@ -72,10 +81,16 @@ export interface RouteConfig {
   csp?: boolean;
 }
 
+// deno-lint-ignore no-empty-interface
+export interface RenderOptions extends ResponseInit {}
+
 export interface HandlerContext<Data = unknown, State = Record<string, unknown>>
   extends ConnInfo {
   params: Record<string, string>;
-  render: (data?: Data) => Response | Promise<Response>;
+  render: (
+    data?: Data,
+    options?: RenderOptions,
+  ) => Response | Promise<Response>;
   renderNotFound: () => Response | Promise<Response>;
   state: State;
 }
@@ -110,7 +125,7 @@ export interface Route<Data = any> {
 
 // --- APP ---
 
-export interface AppProps {
+export interface AppProps extends PageProps {
   Component: ComponentType<Record<never, never>>;
 }
 
@@ -263,11 +278,27 @@ export interface Plugin {
    * inject CSS into the page, or load additional JS files on the client.
    */
   render?(ctx: PluginRenderContext): PluginRenderResult;
+
+  /** The asynchronous render hook is called on the server every time some
+   * JSX needs to be turned into HTML, wrapped around all synchronous render
+   * hooks. The render hook needs to call the `ctx.renderAsync` function
+   * exactly once, and await the result.
+   *
+   * This is useful for when plugins are generating styles and scripts with
+   * asynchronous dependencies. Unlike the synchronous render hook, async render
+   * hooks for multiple pages can be running at the same time. This means that
+   * unlike the synchronous render hook, you can not use global variables to
+   * propagate state between the render hook and the renderer.
+   */
+  renderAsync?(ctx: PluginAsyncRenderContext): Promise<PluginRenderResult>;
 }
 
 export interface PluginRenderContext {
   render: PluginRenderFunction;
 }
+export interface PluginAsyncRenderContext {
+  renderAsync: PluginAsyncRenderFunction;
+}
 
 export interface PluginRenderResult {
   /** CSS styles to be injected into the page. */
@@ -297,12 +328,14 @@ export interface PluginRenderScripts {
 }
 
 export type PluginRenderFunction = () => PluginRenderFunctionResult;
+export type PluginAsyncRenderFunction = () =>
+  | PluginRenderFunctionResult
+  | Promise<PluginRenderFunctionResult>;
 
 export interface PluginRenderFunctionResult {
   /** The HTML text that was rendered. */
   htmlText: string;
   /** If the renderer encountered any islands that require hydration on the
-   * client.
-   */
+   * client. */
   requiresHydration: boolean;
 }
diff --git a/tests/cli_test.ts b/tests/cli_test.ts
index a3c06f0da1e..9c9b67ad95e 100644
--- a/tests/cli_test.ts
+++ b/tests/cli_test.ts
@@ -1,3 +1,5 @@
+import * as path from "$std/path/mod.ts";
+import { assertNotMatch } from "https://deno.land/std@0.190.0/testing/asserts.ts";
 import { Status } from "../src/server/deps.ts";
 import {
   assert,
@@ -6,10 +8,8 @@ import {
   delay,
   puppeteer,
   retry,
-  TextLineStream,
 } from "./deps.ts";
-import * as path from "$std/path/mod.ts";
-import { assertNotMatch } from "https://deno.land/std@0.178.0/testing/asserts.ts";
+import { startFreshServer } from "./test_utils.ts";
 
 type FileTree = {
   type: "file";
@@ -65,7 +65,6 @@ Deno.test({
         "name": tmpDirName,
         "contents": [
           { "type": "file", "name": "README.md" },
-          { "type": "file", "name": "import_map.json" },
           { "type": "file", "name": "fresh.gen.ts" },
           {
             "type": "directory",
@@ -113,34 +112,15 @@ Deno.test({
     });
 
     await t.step("start up the server and access the root page", async () => {
-      const serverProcess = new Deno.Command(Deno.execPath(), {
+      const { serverProcess, lines, address } = await startFreshServer({
         args: ["run", "-A", "--check", "main.ts"],
-        stdin: "null",
-        stdout: "piped",
-        stderr: "inherit",
         cwd: tmpDirName,
-      }).spawn();
-
-      const lines = serverProcess.stdout
-        .pipeThrough(new TextDecoderStream())
-        .pipeThrough(new TextLineStream());
-
-      let started = false;
-      for await (const line of lines) {
-        console.log(line);
-        if (line.includes("Listening on http://")) {
-          started = true;
-          break;
-        }
-      }
-      if (!started) {
-        throw new Error("Server didn't start up");
-      }
+      });
 
       await delay(100);
 
       // Access the root page
-      const res = await fetch("http://localhost:8000");
+      const res = await fetch(address);
       await res.body?.cancel();
       assertEquals(res.status, Status.OK);
 
@@ -149,7 +129,7 @@ Deno.test({
         args: ["--no-sandbox"],
       });
       const page = await browser.newPage();
-      await page.goto("http://localhost:8000", { waitUntil: "networkidle2" });
+      await page.goto(address, { waitUntil: "networkidle2" });
       const counter = await page.$("body > div > div > p");
       let counterValue = await counter?.evaluate((el) => el.textContent);
       assert(counterValue === "3");
@@ -204,7 +184,6 @@ Deno.test({
         "name": tmpDirName,
         "contents": [
           { "type": "file", "name": "README.md" },
-          { "type": "file", "name": "import_map.json" },
           { "type": "file", "name": "fresh.gen.ts" },
           { "type": "file", "name": "twind.config.ts" },
           {
@@ -262,41 +241,22 @@ Deno.test({
     });
 
     await t.step("start up the server and access the root page", async () => {
-      const serverProcess = new Deno.Command(Deno.execPath(), {
+      const { serverProcess, lines, address } = await startFreshServer({
         args: ["run", "-A", "--check", "main.ts"],
-        stdin: "null",
-        stdout: "piped",
-        stderr: "inherit",
         cwd: tmpDirName,
-      }).spawn();
-
-      const lines = serverProcess.stdout
-        .pipeThrough(new TextDecoderStream())
-        .pipeThrough(new TextLineStream());
-
-      let started = false;
-      for await (const line of lines) {
-        console.log(line);
-        if (line.includes("Listening on http://")) {
-          started = true;
-          break;
-        }
-      }
-      if (!started) {
-        throw new Error("Server didn't start up");
-      }
+      });
 
       await delay(100);
 
       // Access the root page
-      const res = await fetch("http://localhost:8000");
+      const res = await fetch(address);
       await res.body?.cancel();
       assertEquals(res.status, Status.OK);
 
       // verify the island is revived.
       const browser = await puppeteer.launch({ args: ["--no-sandbox"] });
       const page = await browser.newPage();
-      await page.goto("http://localhost:8000", { waitUntil: "networkidle2" });
+      await page.goto(address, { waitUntil: "networkidle2" });
 
       const counter = await page.$("body > div > div > p");
       let counterValue = await counter?.evaluate((el) => el.textContent);
@@ -398,3 +358,79 @@ Deno.test("fresh-init .", async function (t) {
     assertEquals(code, 0);
   });
 });
+
+Deno.test({
+  name: "fresh-init subdirectory",
+  async fn(t) {
+    // Preparation
+    const tmpDirName = await Deno.makeTempDir();
+
+    await Deno.mkdir(path.join(tmpDirName, "subdirectory"));
+
+    const cliProcess = new Deno.Command(Deno.execPath(), {
+      args: [
+        "run",
+        "-A",
+        path.join(Deno.cwd(), "init.ts"),
+        "subdirectory/subsubdirectory",
+      ],
+      cwd: tmpDirName,
+      stdin: "null",
+      stdout: "piped",
+      stderr: "inherit",
+    });
+
+    await cliProcess.output();
+
+    // move deno.json one level up
+    await Deno.rename(
+      path.join(tmpDirName, "subdirectory", "subsubdirectory", "deno.json"),
+      path.join(tmpDirName, "deno.json"),
+    );
+
+    const targetFileTree: FileTree[] = [
+      {
+        "type": "directory",
+        "name": tmpDirName,
+        "contents": [
+          { "type": "file", "name": "deno.json" },
+          {
+            "type": "directory",
+            "name": "subdirectory",
+            contents: [
+              {
+                "type": "directory",
+                "name": "subsubdirectory",
+                "contents": [
+                  { "type": "file", "name": "main.ts" },
+                  { "type": "file", "name": "dev.ts" },
+                  { "type": "file", "name": "fresh.gen.ts" },
+                ],
+              },
+            ],
+          },
+        ],
+      },
+    ];
+
+    await t.step("check generated files", async () => {
+      await assertFileExistence(targetFileTree);
+    });
+
+    await t.step("start up the server", async () => {
+      const { serverProcess, lines } = await startFreshServer({
+        args: ["run", "-A", "--check", "subdirectory/subsubdirectory/dev.ts"],
+        cwd: tmpDirName,
+      });
+
+      await delay(100);
+
+      await lines.cancel();
+      serverProcess.kill("SIGTERM");
+      await delay(100);
+    });
+
+    await retry(() => Deno.remove(tmpDirName, { recursive: true }));
+  },
+  sanitizeResources: false,
+});
diff --git a/tests/deps.ts b/tests/deps.ts
index 22f8b1ab3ea..e86870f711a 100644
--- a/tests/deps.ts
+++ b/tests/deps.ts
@@ -8,12 +8,13 @@ export {
   assert,
   assertEquals,
   assertStringIncludes,
-} from "https://deno.land/std@0.178.0/testing/asserts.ts";
+} from "https://deno.land/std@0.190.0/testing/asserts.ts";
+export { assertSnapshot } from "https://deno.land/std@0.190.0/testing/snapshot.ts";
 export {
   TextLineStream,
-} from "https://deno.land/std@0.178.0/streams/text_line_stream.ts";
-export { delay } from "https://deno.land/std@0.178.0/async/delay.ts";
-export { retry } from "https://deno.land/std@0.178.0/async/retry.ts";
+} from "https://deno.land/std@0.190.0/streams/text_line_stream.ts";
+export { delay } from "https://deno.land/std@0.190.0/async/delay.ts";
+export { retry } from "https://deno.land/std@0.190.0/async/retry.ts";
 export {
   default as puppeteer,
   Page,
diff --git a/tests/fixture/deno.json b/tests/fixture/deno.json
index a5d3115d3f8..7e98181c54a 100644
--- a/tests/fixture/deno.json
+++ b/tests/fixture/deno.json
@@ -1,6 +1,13 @@
 {
   "lock": false,
-  "importMap": "./import_map.json",
+  "imports": {
+    "$fresh/": "../../",
+    "preact": "https://esm.sh/preact@10.15.1",
+    "preact/": "https://esm.sh/preact@10.15.1/",
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.1.0",
+    "@preact/signals": "https://esm.sh/*@preact/signals@1.1.3",
+    "@preact/signals-core": "https://esm.sh/@preact/signals-core@1.2.3"
+  },
   "compilerOptions": {
     "jsx": "react-jsx",
     "jsxImportSource": "preact"
diff --git a/tests/fixture/fresh.gen.ts b/tests/fixture/fresh.gen.ts
index 2e21274d45d..9adaa57d137 100644
--- a/tests/fixture/fresh.gen.ts
+++ b/tests/fixture/fresh.gen.ts
@@ -2,42 +2,46 @@
 // This file SHOULD be checked into source version control.
 // This file is automatically updated during development when running `dev.ts`.
 
-import config from "./deno.json" assert { type: "json" };
 import * as $0 from "./routes/[name].tsx";
 import * as $1 from "./routes/_404.tsx";
 import * as $2 from "./routes/_500.tsx";
 import * as $3 from "./routes/_app.tsx";
 import * as $4 from "./routes/_middleware.ts";
 import * as $5 from "./routes/api/get_only.ts";
-import * as $6 from "./routes/assetsCaching/index.tsx";
-import * as $7 from "./routes/books/[id].tsx";
-import * as $8 from "./routes/connInfo.ts";
-import * as $9 from "./routes/evil.tsx";
-import * as $10 from "./routes/failure.ts";
-import * as $11 from "./routes/index.tsx";
-import * as $12 from "./routes/intercept.tsx";
-import * as $13 from "./routes/intercept_args.tsx";
-import * as $14 from "./routes/islands/index.tsx";
-import * as $15 from "./routes/islands/root_fragment.tsx";
-import * as $16 from "./routes/islands/root_fragment_conditional_first.tsx";
-import * as $17 from "./routes/layeredMdw/_middleware.ts";
-import * as $18 from "./routes/layeredMdw/layer2-no-mw/without_mw.ts";
-import * as $19 from "./routes/layeredMdw/layer2/_middleware.ts";
-import * as $20 from "./routes/layeredMdw/layer2/abc.ts";
-import * as $21 from "./routes/layeredMdw/layer2/index.ts";
-import * as $22 from "./routes/layeredMdw/layer2/layer3/[id].ts";
-import * as $23 from "./routes/layeredMdw/layer2/layer3/_middleware.ts";
-import * as $24 from "./routes/middleware_root.ts";
-import * as $25 from "./routes/not_found.ts";
-import * as $26 from "./routes/params.tsx";
-import * as $27 from "./routes/props/[id].tsx";
-import * as $28 from "./routes/static.tsx";
-import * as $29 from "./routes/wildcard.tsx";
+import * as $6 from "./routes/api/head_override.ts";
+import * as $7 from "./routes/assetsCaching/index.tsx";
+import * as $8 from "./routes/books/[id].tsx";
+import * as $9 from "./routes/connInfo.ts";
+import * as $10 from "./routes/evil.tsx";
+import * as $11 from "./routes/failure.ts";
+import * as $12 from "./routes/index.tsx";
+import * as $13 from "./routes/intercept.tsx";
+import * as $14 from "./routes/intercept_args.tsx";
+import * as $15 from "./routes/islands/index.tsx";
+import * as $16 from "./routes/islands/returning_null.tsx";
+import * as $17 from "./routes/islands/root_fragment.tsx";
+import * as $18 from "./routes/islands/root_fragment_conditional_first.tsx";
+import * as $19 from "./routes/layeredMdw/_middleware.ts";
+import * as $20 from "./routes/layeredMdw/layer2-no-mw/without_mw.ts";
+import * as $21 from "./routes/layeredMdw/layer2/_middleware.ts";
+import * as $22 from "./routes/layeredMdw/layer2/abc.ts";
+import * as $23 from "./routes/layeredMdw/layer2/index.ts";
+import * as $24 from "./routes/layeredMdw/layer2/layer3/[id].ts";
+import * as $25 from "./routes/layeredMdw/layer2/layer3/_middleware.ts";
+import * as $26 from "./routes/middleware_root.ts";
+import * as $27 from "./routes/not_found.ts";
+import * as $28 from "./routes/params.tsx";
+import * as $29 from "./routes/props/[id].tsx";
+import * as $30 from "./routes/static.tsx";
+import * as $31 from "./routes/status_overwrite.tsx";
+import * as $32 from "./routes/wildcard.tsx";
 import * as $$0 from "./islands/Counter.tsx";
-import * as $$1 from "./islands/RootFragment.tsx";
-import * as $$2 from "./islands/RootFragmentWithConditionalFirst.tsx";
-import * as $$3 from "./islands/Test.tsx";
-import * as $$4 from "./islands/kebab-case-counter-test.tsx";
+import * as $$1 from "./islands/ReturningNull.tsx";
+import * as $$2 from "./islands/RootFragment.tsx";
+import * as $$3 from "./islands/RootFragmentWithConditionalFirst.tsx";
+import * as $$4 from "./islands/Test.tsx";
+import * as $$5 from "./islands/folder/Counter.tsx";
+import * as $$6 from "./islands/kebab-case-counter-test.tsx";
 
 const manifest = {
   routes: {
@@ -47,40 +51,44 @@ const manifest = {
     "./routes/_app.tsx": $3,
     "./routes/_middleware.ts": $4,
     "./routes/api/get_only.ts": $5,
-    "./routes/assetsCaching/index.tsx": $6,
-    "./routes/books/[id].tsx": $7,
-    "./routes/connInfo.ts": $8,
-    "./routes/evil.tsx": $9,
-    "./routes/failure.ts": $10,
-    "./routes/index.tsx": $11,
-    "./routes/intercept.tsx": $12,
-    "./routes/intercept_args.tsx": $13,
-    "./routes/islands/index.tsx": $14,
-    "./routes/islands/root_fragment.tsx": $15,
-    "./routes/islands/root_fragment_conditional_first.tsx": $16,
-    "./routes/layeredMdw/_middleware.ts": $17,
-    "./routes/layeredMdw/layer2-no-mw/without_mw.ts": $18,
-    "./routes/layeredMdw/layer2/_middleware.ts": $19,
-    "./routes/layeredMdw/layer2/abc.ts": $20,
-    "./routes/layeredMdw/layer2/index.ts": $21,
-    "./routes/layeredMdw/layer2/layer3/[id].ts": $22,
-    "./routes/layeredMdw/layer2/layer3/_middleware.ts": $23,
-    "./routes/middleware_root.ts": $24,
-    "./routes/not_found.ts": $25,
-    "./routes/params.tsx": $26,
-    "./routes/props/[id].tsx": $27,
-    "./routes/static.tsx": $28,
-    "./routes/wildcard.tsx": $29,
+    "./routes/api/head_override.ts": $6,
+    "./routes/assetsCaching/index.tsx": $7,
+    "./routes/books/[id].tsx": $8,
+    "./routes/connInfo.ts": $9,
+    "./routes/evil.tsx": $10,
+    "./routes/failure.ts": $11,
+    "./routes/index.tsx": $12,
+    "./routes/intercept.tsx": $13,
+    "./routes/intercept_args.tsx": $14,
+    "./routes/islands/index.tsx": $15,
+    "./routes/islands/returning_null.tsx": $16,
+    "./routes/islands/root_fragment.tsx": $17,
+    "./routes/islands/root_fragment_conditional_first.tsx": $18,
+    "./routes/layeredMdw/_middleware.ts": $19,
+    "./routes/layeredMdw/layer2-no-mw/without_mw.ts": $20,
+    "./routes/layeredMdw/layer2/_middleware.ts": $21,
+    "./routes/layeredMdw/layer2/abc.ts": $22,
+    "./routes/layeredMdw/layer2/index.ts": $23,
+    "./routes/layeredMdw/layer2/layer3/[id].ts": $24,
+    "./routes/layeredMdw/layer2/layer3/_middleware.ts": $25,
+    "./routes/middleware_root.ts": $26,
+    "./routes/not_found.ts": $27,
+    "./routes/params.tsx": $28,
+    "./routes/props/[id].tsx": $29,
+    "./routes/static.tsx": $30,
+    "./routes/status_overwrite.tsx": $31,
+    "./routes/wildcard.tsx": $32,
   },
   islands: {
     "./islands/Counter.tsx": $$0,
-    "./islands/RootFragment.tsx": $$1,
-    "./islands/RootFragmentWithConditionalFirst.tsx": $$2,
-    "./islands/Test.tsx": $$3,
-    "./islands/kebab-case-counter-test.tsx": $$4,
+    "./islands/ReturningNull.tsx": $$1,
+    "./islands/RootFragment.tsx": $$2,
+    "./islands/RootFragmentWithConditionalFirst.tsx": $$3,
+    "./islands/Test.tsx": $$4,
+    "./islands/folder/Counter.tsx": $$5,
+    "./islands/kebab-case-counter-test.tsx": $$6,
   },
   baseUrl: import.meta.url,
-  config,
 };
 
 export default manifest;
diff --git a/tests/fixture/import_map.json b/tests/fixture/import_map.json
deleted file mode 100644
index bf3f2f997b9..00000000000
--- a/tests/fixture/import_map.json
+++ /dev/null
@@ -1,8 +0,0 @@
-{
-  "imports": {
-    "$fresh/": "../../",
-    "preact": "https://esm.sh/preact@10.13.1",
-    "preact/": "https://esm.sh/preact@10.13.1/",
-    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@5.2.6"
-  }
-}
diff --git a/tests/fixture/islands/Counter.tsx b/tests/fixture/islands/Counter.tsx
index 953a2a60362..5f015b1ee1f 100644
--- a/tests/fixture/islands/Counter.tsx
+++ b/tests/fixture/islands/Counter.tsx
@@ -1,19 +1,18 @@
-import { useState } from "preact/hooks";
+import type { Signal } from "@preact/signals";
 import { IS_BROWSER } from "$fresh/runtime.ts";
 
 interface CounterProps {
-  start: number;
+  count: Signal<number>;
   id: string;
 }
 
 export default function Counter(props: CounterProps) {
-  const [count, setCount] = useState(props.start);
   return (
     <div id={props.id}>
-      <p>{count}</p>
+      <p>{props.count}</p>
       <button
         id={`b-${props.id}`}
-        onClick={() => setCount(count + 1)}
+        onClick={() => props.count.value += 1}
         disabled={!IS_BROWSER}
       >
         +1
diff --git a/tests/fixture/islands/ReturningNull.tsx b/tests/fixture/islands/ReturningNull.tsx
new file mode 100644
index 00000000000..954ab9163a2
--- /dev/null
+++ b/tests/fixture/islands/ReturningNull.tsx
@@ -0,0 +1,13 @@
+import { useEffect } from "preact/hooks";
+
+export default function ReturningNull() {
+  useEffect(() => {
+    const p = document.createElement("p");
+    p.textContent = "Hello, null!";
+    p.className = "added-by-use-effect";
+
+    document.body.appendChild(p);
+  }, []);
+
+  return null;
+}
diff --git a/tests/fixture/islands/RootFragment.tsx b/tests/fixture/islands/RootFragment.tsx
index 9f1a268e5a2..42cad83fcc7 100644
--- a/tests/fixture/islands/RootFragment.tsx
+++ b/tests/fixture/islands/RootFragment.tsx
@@ -1,15 +1,15 @@
-import { useState } from "preact/hooks";
+import { useSignal } from "@preact/signals";
 
 export default function RootFragment() {
-  const [shown, setShown] = useState(false);
+  const shown = useSignal(false);
 
   return (
     <>
       Hello
-      <div onClick={() => setShown(true)} id="root-fragment-click-me">
+      <div onClick={() => shown.value = true} id="root-fragment-click-me">
         World
       </div>
-      {shown && <div>I'm rendered now</div>}
+      {shown.value && <div>I'm rendered now</div>}
     </>
   );
 }
diff --git a/tests/fixture/islands/RootFragmentWithConditionalFirst.tsx b/tests/fixture/islands/RootFragmentWithConditionalFirst.tsx
index 1023615bdec..e4cf4156996 100644
--- a/tests/fixture/islands/RootFragmentWithConditionalFirst.tsx
+++ b/tests/fixture/islands/RootFragmentWithConditionalFirst.tsx
@@ -1,14 +1,14 @@
-import { useState } from "preact/hooks";
+import { useSignal } from "@preact/signals";
 
 export default function RootFragmentWithConditionalFirst() {
-  const [shown, setShown] = useState(false);
+  const shown = useSignal(false);
 
   return (
     <>
-      {shown && <div>I'm rendered on top</div>}
+      {shown.value && <div>I'm rendered on top</div>}
       Hello
       <div
-        onClick={() => setShown(true)}
+        onClick={() => shown.value = true}
         id="root-fragment-conditional-first-click-me"
       >
         World
diff --git a/tests/fixture/islands/folder/Counter.tsx b/tests/fixture/islands/folder/Counter.tsx
new file mode 100644
index 00000000000..5f015b1ee1f
--- /dev/null
+++ b/tests/fixture/islands/folder/Counter.tsx
@@ -0,0 +1,22 @@
+import type { Signal } from "@preact/signals";
+import { IS_BROWSER } from "$fresh/runtime.ts";
+
+interface CounterProps {
+  count: Signal<number>;
+  id: string;
+}
+
+export default function Counter(props: CounterProps) {
+  return (
+    <div id={props.id}>
+      <p>{props.count}</p>
+      <button
+        id={`b-${props.id}`}
+        onClick={() => props.count.value += 1}
+        disabled={!IS_BROWSER}
+      >
+        +1
+      </button>
+    </div>
+  );
+}
diff --git a/tests/fixture/islands/kebab-case-counter-test.tsx b/tests/fixture/islands/kebab-case-counter-test.tsx
index 88612aaddc7..6ee842d0420 100644
--- a/tests/fixture/islands/kebab-case-counter-test.tsx
+++ b/tests/fixture/islands/kebab-case-counter-test.tsx
@@ -1,21 +1,20 @@
-import { useState } from "preact/hooks";
+import type { Signal } from "@preact/signals";
 import { IS_BROWSER } from "$fresh/runtime.ts";
 
 interface KebabCaseFileNameTestProps {
-  start: number;
+  count: Signal<number>;
   id: string;
 }
 
 export default function KebabCaseFileNameTest(
   props: KebabCaseFileNameTestProps,
 ) {
-  const [count, setCount] = useState(props.start);
   return (
     <div id={props.id}>
-      <p>{count}</p>
+      <p>{props.count}</p>
       <button
         id={`b-${props.id}`}
-        onClick={() => setCount(count + 1)}
+        onClick={() => props.count.value += 1}
         disabled={!IS_BROWSER}
       >
         +1
diff --git a/tests/fixture/routes/api/head_override.ts b/tests/fixture/routes/api/head_override.ts
new file mode 100644
index 00000000000..b317194d3d5
--- /dev/null
+++ b/tests/fixture/routes/api/head_override.ts
@@ -0,0 +1,17 @@
+export const handler = {
+  HEAD() {
+    return new Response(null, {
+      status: 204,
+      headers: {
+        "Content-Type": "text/html; charset=utf-8",
+      },
+    });
+  },
+  GET() {
+    return new Response("Get fresh!", {
+      headers: {
+        "Content-Type": "application/json; charset=utf-8",
+      },
+    });
+  },
+};
diff --git a/tests/fixture/routes/islands/index.tsx b/tests/fixture/routes/islands/index.tsx
index a0dfb4d15bd..52b449413c2 100644
--- a/tests/fixture/routes/islands/index.tsx
+++ b/tests/fixture/routes/islands/index.tsx
@@ -1,13 +1,19 @@
+import { useSignal } from "@preact/signals";
 import Counter from "../../islands/Counter.tsx";
+import FolderCounter from "../../islands/folder/Counter.tsx";
 import KebabCaseFileNameTest from "../../islands/kebab-case-counter-test.tsx";
 import Test from "../../islands/Test.tsx";
 
 export default function Home() {
   return (
     <div>
-      <Counter id="counter1" start={3} />
-      <Counter id="counter2" start={10} />
-      <KebabCaseFileNameTest id="kebab-case-file-counter" start={5} />
+      <Counter id="counter1" count={useSignal(3)} />
+      <Counter id="counter2" count={useSignal(10)} />
+      <FolderCounter id="folder-counter" count={useSignal(3)} />
+      <KebabCaseFileNameTest
+        id="kebab-case-file-counter"
+        count={useSignal(5)}
+      />
       <Test message="" />
       <Test message={`</script><script>alert('test')</script>`} />
     </div>
diff --git a/tests/fixture/routes/islands/returning_null.tsx b/tests/fixture/routes/islands/returning_null.tsx
new file mode 100644
index 00000000000..3756e01a700
--- /dev/null
+++ b/tests/fixture/routes/islands/returning_null.tsx
@@ -0,0 +1,5 @@
+import ReturningNull from "$fresh/tests/fixture/islands/ReturningNull.tsx";
+
+export default function Home() {
+  return <ReturningNull />;
+}
diff --git a/tests/fixture/routes/status_overwrite.tsx b/tests/fixture/routes/status_overwrite.tsx
new file mode 100644
index 00000000000..83dfe8ecaa5
--- /dev/null
+++ b/tests/fixture/routes/status_overwrite.tsx
@@ -0,0 +1,14 @@
+import { HandlerContext } from "$fresh/server.ts";
+
+export default function Page() {
+  return <div>This is HTML</div>;
+}
+
+export const handler = {
+  GET(req: Request, { render }: HandlerContext) {
+    return render(undefined, {
+      status: 401,
+      headers: { "x-some-header": "foo" },
+    });
+  },
+};
diff --git a/tests/fixture/static/image.png b/tests/fixture/static/image.png
index c2d41252c49..9878dc99297 100644
Binary files a/tests/fixture/static/image.png and b/tests/fixture/static/image.png differ
diff --git a/tests/fixture_error/deno.json b/tests/fixture_error/deno.json
index e99326100e2..fa257c4d860 100644
--- a/tests/fixture_error/deno.json
+++ b/tests/fixture_error/deno.json
@@ -1,5 +1,11 @@
 {
-  "importMap": "./import_map.json",
+  "lock": false,
+  "imports": {
+    "$fresh/": "../../",
+    "preact": "https://esm.sh/preact@10.15.1",
+    "preact/": "https://esm.sh/preact@10.15.1/",
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.1.0"
+  },
   "compilerOptions": {
     "jsx": "react-jsx",
     "jsxImportSource": "preact"
diff --git a/tests/fixture_error/fresh.gen.ts b/tests/fixture_error/fresh.gen.ts
index 39130ea3df2..e24e6727c04 100644
--- a/tests/fixture_error/fresh.gen.ts
+++ b/tests/fixture_error/fresh.gen.ts
@@ -2,7 +2,6 @@
 // This file SHOULD be checked into source version control.
 // This file is automatically updated during development when running `dev.ts`.
 
-import config from "./deno.json" assert { type: "json" };
 import * as $0 from "./routes/[...all].ts";
 import * as $1 from "./routes/index.tsx";
 
@@ -13,7 +12,6 @@ const manifest = {
   },
   islands: {},
   baseUrl: import.meta.url,
-  config,
 };
 
 export default manifest;
diff --git a/tests/fixture_error/import_map.json b/tests/fixture_error/import_map.json
deleted file mode 100644
index bf3f2f997b9..00000000000
--- a/tests/fixture_error/import_map.json
+++ /dev/null
@@ -1,8 +0,0 @@
-{
-  "imports": {
-    "$fresh/": "../../",
-    "preact": "https://esm.sh/preact@10.13.1",
-    "preact/": "https://esm.sh/preact@10.13.1/",
-    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@5.2.6"
-  }
-}
diff --git a/tests/fixture_island_nesting/deno.json b/tests/fixture_island_nesting/deno.json
new file mode 100644
index 00000000000..5a9ac92f1e7
--- /dev/null
+++ b/tests/fixture_island_nesting/deno.json
@@ -0,0 +1,18 @@
+{
+  "lock": false,
+  "tasks": {
+    "start": "deno run -A --watch=static/,routes/ dev.ts"
+  },
+  "imports": {
+    "$fresh/": "../../",
+    "preact": "https://esm.sh/preact@10.15.1",
+    "preact/": "https://esm.sh/preact@10.15.1/",
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.1.0",
+    "@preact/signals": "https://esm.sh/*@preact/signals@1.1.3",
+    "@preact/signals-core": "https://esm.sh/@preact/signals-core@1.2.3"
+  },
+  "compilerOptions": {
+    "jsx": "react-jsx",
+    "jsxImportSource": "preact"
+  }
+}
diff --git a/tests/fixture_island_nesting/dev.ts b/tests/fixture_island_nesting/dev.ts
new file mode 100755
index 00000000000..2d85d6c183c
--- /dev/null
+++ b/tests/fixture_island_nesting/dev.ts
@@ -0,0 +1,5 @@
+#!/usr/bin/env -S deno run -A --watch=static/,routes/
+
+import dev from "$fresh/dev.ts";
+
+await dev(import.meta.url, "./main.ts");
diff --git a/tests/fixture_island_nesting/fresh.gen.ts b/tests/fixture_island_nesting/fresh.gen.ts
new file mode 100644
index 00000000000..070d9e8ca5f
--- /dev/null
+++ b/tests/fixture_island_nesting/fresh.gen.ts
@@ -0,0 +1,38 @@
+// DO NOT EDIT. This file is generated by fresh.
+// This file SHOULD be checked into source version control.
+// This file is automatically updated during development when running `dev.ts`.
+
+import * as $0 from "./routes/index.tsx";
+import * as $1 from "./routes/island_in_island.tsx";
+import * as $2 from "./routes/island_in_island_definition.tsx";
+import * as $3 from "./routes/island_jsx_child.tsx";
+import * as $4 from "./routes/island_jsx_children.tsx";
+import * as $5 from "./routes/island_jsx_island_jsx.tsx";
+import * as $6 from "./routes/island_jsx_text.tsx";
+import * as $7 from "./routes/island_nested_props.tsx";
+import * as $8 from "./routes/island_siblings.tsx";
+import * as $$0 from "./islands/Island.tsx";
+import * as $$1 from "./islands/IslandInsideIsland.tsx";
+import * as $$2 from "./islands/IslandWithProps.tsx";
+
+const manifest = {
+  routes: {
+    "./routes/index.tsx": $0,
+    "./routes/island_in_island.tsx": $1,
+    "./routes/island_in_island_definition.tsx": $2,
+    "./routes/island_jsx_child.tsx": $3,
+    "./routes/island_jsx_children.tsx": $4,
+    "./routes/island_jsx_island_jsx.tsx": $5,
+    "./routes/island_jsx_text.tsx": $6,
+    "./routes/island_nested_props.tsx": $7,
+    "./routes/island_siblings.tsx": $8,
+  },
+  islands: {
+    "./islands/Island.tsx": $$0,
+    "./islands/IslandInsideIsland.tsx": $$1,
+    "./islands/IslandWithProps.tsx": $$2,
+  },
+  baseUrl: import.meta.url,
+};
+
+export default manifest;
diff --git a/tests/fixture_island_nesting/islands/Island.tsx b/tests/fixture_island_nesting/islands/Island.tsx
new file mode 100644
index 00000000000..1887f5af380
--- /dev/null
+++ b/tests/fixture_island_nesting/islands/Island.tsx
@@ -0,0 +1,9 @@
+import { ComponentChildren } from "preact";
+
+export default function Island(props: { children?: ComponentChildren }) {
+  return (
+    <div class="island">
+      {props.children}
+    </div>
+  );
+}
diff --git a/tests/fixture_island_nesting/islands/IslandInsideIsland.tsx b/tests/fixture_island_nesting/islands/IslandInsideIsland.tsx
new file mode 100644
index 00000000000..03448481758
--- /dev/null
+++ b/tests/fixture_island_nesting/islands/IslandInsideIsland.tsx
@@ -0,0 +1,14 @@
+import { ComponentChildren } from "preact";
+import Island from "./Island.tsx";
+
+export default function IslandInsideIsland(
+  props: { children?: ComponentChildren },
+) {
+  return (
+    <div class="island">
+      <Island>
+        {props.children}
+      </Island>
+    </div>
+  );
+}
diff --git a/tests/fixture_island_nesting/islands/IslandWithProps.tsx b/tests/fixture_island_nesting/islands/IslandWithProps.tsx
new file mode 100644
index 00000000000..035a6ab5fda
--- /dev/null
+++ b/tests/fixture_island_nesting/islands/IslandWithProps.tsx
@@ -0,0 +1,19 @@
+import { useEffect, useState } from "preact/hooks";
+
+export default function IslandWithProps(
+  props: { foo: { bar: string } },
+) {
+  const [showText, setShowText] = useState(false);
+
+  useEffect(() => {
+    setShowText(true);
+  }, []);
+
+  return (
+    <div class="island">
+      <p>
+        {showText ? props.foo.bar : "it doesn't work"}
+      </p>
+    </div>
+  );
+}
diff --git a/tests/fixture_island_nesting/main.ts b/tests/fixture_island_nesting/main.ts
new file mode 100644
index 00000000000..f6b0fc28fcf
--- /dev/null
+++ b/tests/fixture_island_nesting/main.ts
@@ -0,0 +1,12 @@
+/// <reference no-default-lib="true" />
+/// <reference lib="dom" />
+/// <reference lib="dom.iterable" />
+/// <reference lib="dom.asynciterable" />
+/// <reference lib="deno.ns" />
+
+import { start } from "$fresh/server.ts";
+import routes from "./fresh.gen.ts";
+
+const experimentalDenoServe = Deno.args.includes("--experimental-deno-serve");
+
+await start(routes, { experimentalDenoServe });
diff --git a/tests/fixture_island_nesting/main_wasm.ts b/tests/fixture_island_nesting/main_wasm.ts
new file mode 100644
index 00000000000..66b916c81f3
--- /dev/null
+++ b/tests/fixture_island_nesting/main_wasm.ts
@@ -0,0 +1,15 @@
+// Simulate Deno Deploy environment
+
+/// <reference no-default-lib="true" />
+/// <reference lib="dom" />
+/// <reference lib="dom.iterable" />
+/// <reference lib="dom.asynciterable" />
+/// <reference lib="deno.ns" />
+
+import "./polyfill_deno_deploy.ts";
+import { start } from "$fresh/server.ts";
+import routes from "./fresh.gen.ts";
+
+const experimentalDenoServe = Deno.args.includes("--experimental-deno-serve");
+
+await start(routes, { experimentalDenoServe });
diff --git a/tests/fixture_island_nesting/polyfill_deno_deploy.ts b/tests/fixture_island_nesting/polyfill_deno_deploy.ts
new file mode 100644
index 00000000000..73380028741
--- /dev/null
+++ b/tests/fixture_island_nesting/polyfill_deno_deploy.ts
@@ -0,0 +1,5 @@
+// Simulate Deno Deploy environment
+
+//@ts-ignore: Remove Deno.run for simulating deno deploy env
+// deno-lint-ignore no-deprecated-deno-api
+delete Deno.run;
diff --git a/tests/fixture_island_nesting/routes/index.tsx b/tests/fixture_island_nesting/routes/index.tsx
new file mode 100644
index 00000000000..545694fe385
--- /dev/null
+++ b/tests/fixture_island_nesting/routes/index.tsx
@@ -0,0 +1,3 @@
+export default function Home() {
+  return <div />;
+}
diff --git a/tests/fixture_island_nesting/routes/island_in_island.tsx b/tests/fixture_island_nesting/routes/island_in_island.tsx
new file mode 100644
index 00000000000..e7b42610c0b
--- /dev/null
+++ b/tests/fixture_island_nesting/routes/island_in_island.tsx
@@ -0,0 +1,13 @@
+import Island from "../islands/Island.tsx";
+
+export default function Home() {
+  return (
+    <div id="page">
+      <Island>
+        <Island>
+          <p>it works</p>
+        </Island>
+      </Island>
+    </div>
+  );
+}
diff --git a/tests/fixture_island_nesting/routes/island_in_island_definition.tsx b/tests/fixture_island_nesting/routes/island_in_island_definition.tsx
new file mode 100644
index 00000000000..9e6ebd27bd3
--- /dev/null
+++ b/tests/fixture_island_nesting/routes/island_in_island_definition.tsx
@@ -0,0 +1,11 @@
+import IslandInsideIsland from "../islands/IslandInsideIsland.tsx";
+
+export default function Home() {
+  return (
+    <div id="page">
+      <IslandInsideIsland>
+        <p>it works</p>
+      </IslandInsideIsland>
+    </div>
+  );
+}
diff --git a/tests/fixture_island_nesting/routes/island_jsx_child.tsx b/tests/fixture_island_nesting/routes/island_jsx_child.tsx
new file mode 100644
index 00000000000..0fe5826031d
--- /dev/null
+++ b/tests/fixture_island_nesting/routes/island_jsx_child.tsx
@@ -0,0 +1,11 @@
+import Island from "../islands/Island.tsx";
+
+export default function Home() {
+  return (
+    <div id="page">
+      <Island>
+        <p>it works</p>
+      </Island>
+    </div>
+  );
+}
diff --git a/tests/fixture_island_nesting/routes/island_jsx_children.tsx b/tests/fixture_island_nesting/routes/island_jsx_children.tsx
new file mode 100644
index 00000000000..fa416fe823c
--- /dev/null
+++ b/tests/fixture_island_nesting/routes/island_jsx_children.tsx
@@ -0,0 +1,12 @@
+import Island from "../islands/Island.tsx";
+
+export default function Home() {
+  return (
+    <div id="page">
+      <Island>
+        <p>it{" "}</p>
+        <p>works</p>
+      </Island>
+    </div>
+  );
+}
diff --git a/tests/fixture_island_nesting/routes/island_jsx_island_jsx.tsx b/tests/fixture_island_nesting/routes/island_jsx_island_jsx.tsx
new file mode 100644
index 00000000000..dc944acddd7
--- /dev/null
+++ b/tests/fixture_island_nesting/routes/island_jsx_island_jsx.tsx
@@ -0,0 +1,26 @@
+import { ComponentChildren } from "preact";
+import Island from "../islands/Island.tsx";
+
+function Foo(props: { children?: ComponentChildren }) {
+  return (
+    <div class="server">
+      {props.children}
+    </div>
+  );
+}
+
+export default function Home() {
+  return (
+    <div id="page">
+      <Island>
+        <Foo>
+          <Island>
+            <Foo>
+              <p>it works</p>
+            </Foo>
+          </Island>
+        </Foo>
+      </Island>
+    </div>
+  );
+}
diff --git a/tests/fixture_island_nesting/routes/island_jsx_text.tsx b/tests/fixture_island_nesting/routes/island_jsx_text.tsx
new file mode 100644
index 00000000000..93765af7fa9
--- /dev/null
+++ b/tests/fixture_island_nesting/routes/island_jsx_text.tsx
@@ -0,0 +1,11 @@
+import Island from "../islands/Island.tsx";
+
+export default function Home() {
+  return (
+    <div id="page">
+      <Island>
+        {"it"} {"works"}
+      </Island>
+    </div>
+  );
+}
diff --git a/tests/fixture_island_nesting/routes/island_nested_props.tsx b/tests/fixture_island_nesting/routes/island_nested_props.tsx
new file mode 100644
index 00000000000..82f5b9965cb
--- /dev/null
+++ b/tests/fixture_island_nesting/routes/island_nested_props.tsx
@@ -0,0 +1,12 @@
+import IslandWithProps from "../islands/IslandWithProps.tsx";
+import Island from "../islands/Island.tsx";
+
+export default function Home() {
+  return (
+    <div id="page">
+      <Island>
+        <IslandWithProps foo={{ bar: "it works" }} />
+      </Island>
+    </div>
+  );
+}
diff --git a/tests/fixture_island_nesting/routes/island_siblings.tsx b/tests/fixture_island_nesting/routes/island_siblings.tsx
new file mode 100644
index 00000000000..4deea04f9d5
--- /dev/null
+++ b/tests/fixture_island_nesting/routes/island_siblings.tsx
@@ -0,0 +1,14 @@
+import Island from "../islands/Island.tsx";
+
+export default function Home() {
+  return (
+    <div id="page">
+      <Island>
+        <p class="a">it works</p>
+      </Island>
+      <Island>
+        <p class="b">it works</p>
+      </Island>
+    </div>
+  );
+}
diff --git a/tests/fixture_jsx_pragma/deno.json b/tests/fixture_jsx_pragma/deno.json
index 28cb918d845..dc989730829 100644
--- a/tests/fixture_jsx_pragma/deno.json
+++ b/tests/fixture_jsx_pragma/deno.json
@@ -1,4 +1,9 @@
 {
   "lock": false,
-  "importMap": "./import-map.json"
+  "imports": {
+    "$fresh/": "../../",
+    "preact": "https://esm.sh/preact@10.15.1",
+    "preact/": "https://esm.sh/preact@10.15.1/",
+    "preact-render-to-string": "https://esm.sh/preact-render-to-string@6.1.0?external=preact"
+  }
 }
diff --git a/tests/fixture_jsx_pragma/fresh.gen.ts b/tests/fixture_jsx_pragma/fresh.gen.ts
index 9ad340821d5..221a8cd3fe2 100644
--- a/tests/fixture_jsx_pragma/fresh.gen.ts
+++ b/tests/fixture_jsx_pragma/fresh.gen.ts
@@ -2,7 +2,6 @@
 // This file SHOULD be checked into source version control.
 // This file is automatically updated during development when running `dev.ts`.
 
-import config from "./deno.json" assert { type: "json" };
 import * as $0 from "./routes/index.tsx";
 import * as $$0 from "./islands/Island.tsx";
 
@@ -14,7 +13,6 @@ const manifest = {
     "./islands/Island.tsx": $$0,
   },
   baseUrl: import.meta.url,
-  config,
 };
 
 export default manifest;
diff --git a/tests/fixture_jsx_pragma/import-map.json b/tests/fixture_jsx_pragma/import-map.json
deleted file mode 100644
index 68f2947f151..00000000000
--- a/tests/fixture_jsx_pragma/import-map.json
+++ /dev/null
@@ -1,8 +0,0 @@
-{
-  "imports": {
-    "$fresh/": "../../",
-    "preact": "https://esm.sh/preact@10.13.1",
-    "preact/": "https://esm.sh/preact@10.13.1/",
-    "preact-render-to-string": "https://esm.sh/preact-render-to-string@5.2.6?external=preact"
-  }
-}
diff --git a/tests/fixture_npm/deno.json b/tests/fixture_npm/deno.json
new file mode 100644
index 00000000000..7e98181c54a
--- /dev/null
+++ b/tests/fixture_npm/deno.json
@@ -0,0 +1,15 @@
+{
+  "lock": false,
+  "imports": {
+    "$fresh/": "../../",
+    "preact": "https://esm.sh/preact@10.15.1",
+    "preact/": "https://esm.sh/preact@10.15.1/",
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.1.0",
+    "@preact/signals": "https://esm.sh/*@preact/signals@1.1.3",
+    "@preact/signals-core": "https://esm.sh/@preact/signals-core@1.2.3"
+  },
+  "compilerOptions": {
+    "jsx": "react-jsx",
+    "jsxImportSource": "preact"
+  }
+}
diff --git a/tests/fixture_npm/dev.ts b/tests/fixture_npm/dev.ts
new file mode 100755
index 00000000000..2d85d6c183c
--- /dev/null
+++ b/tests/fixture_npm/dev.ts
@@ -0,0 +1,5 @@
+#!/usr/bin/env -S deno run -A --watch=static/,routes/
+
+import dev from "$fresh/dev.ts";
+
+await dev(import.meta.url, "./main.ts");
diff --git a/tests/fixture_npm/fresh.gen.ts b/tests/fixture_npm/fresh.gen.ts
new file mode 100644
index 00000000000..e3235c834c0
--- /dev/null
+++ b/tests/fixture_npm/fresh.gen.ts
@@ -0,0 +1,18 @@
+// DO NOT EDIT. This file is generated by fresh.
+// This file SHOULD be checked into source version control.
+// This file is automatically updated during development when running `dev.ts`.
+
+import * as $0 from "./routes/index.tsx";
+import * as $$0 from "./islands/Test.tsx";
+
+const manifest = {
+  routes: {
+    "./routes/index.tsx": $0,
+  },
+  islands: {
+    "./islands/Test.tsx": $$0,
+  },
+  baseUrl: import.meta.url,
+};
+
+export default manifest;
diff --git a/tests/fixture_npm/islands/Test.tsx b/tests/fixture_npm/islands/Test.tsx
new file mode 100644
index 00000000000..eefe625adc6
--- /dev/null
+++ b/tests/fixture_npm/islands/Test.tsx
@@ -0,0 +1,8 @@
+import { IS_BROWSER } from "../../../runtime.ts";
+import isNumber from "npm:is-number";
+
+export default function Test() {
+  let id = IS_BROWSER ? "browser" : "server";
+  id += "-" + String(isNumber(1));
+  return <div id={id}>{id}</div>;
+}
diff --git a/tests/fixture_npm/main.ts b/tests/fixture_npm/main.ts
new file mode 100644
index 00000000000..bb97cc80de2
--- /dev/null
+++ b/tests/fixture_npm/main.ts
@@ -0,0 +1,10 @@
+/// <reference no-default-lib="true" />
+/// <reference lib="dom" />
+/// <reference lib="dom.iterable" />
+/// <reference lib="dom.asynciterable" />
+/// <reference lib="deno.ns" />
+
+import { start } from "$fresh/server.ts";
+import routes from "./fresh.gen.ts";
+
+await start(routes);
diff --git a/tests/fixture_npm/routes/index.tsx b/tests/fixture_npm/routes/index.tsx
new file mode 100644
index 00000000000..756b29807c7
--- /dev/null
+++ b/tests/fixture_npm/routes/index.tsx
@@ -0,0 +1,9 @@
+import Test from "../islands/Test.tsx";
+
+export default function Home() {
+  return (
+    <div>
+      <Test />
+    </div>
+  );
+}
diff --git a/tests/fixture_plugin/deno.json b/tests/fixture_plugin/deno.json
index a5d3115d3f8..fa257c4d860 100644
--- a/tests/fixture_plugin/deno.json
+++ b/tests/fixture_plugin/deno.json
@@ -1,6 +1,11 @@
 {
   "lock": false,
-  "importMap": "./import_map.json",
+  "imports": {
+    "$fresh/": "../../",
+    "preact": "https://esm.sh/preact@10.15.1",
+    "preact/": "https://esm.sh/preact@10.15.1/",
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.1.0"
+  },
   "compilerOptions": {
     "jsx": "react-jsx",
     "jsxImportSource": "preact"
diff --git a/tests/fixture_plugin/fresh.gen.ts b/tests/fixture_plugin/fresh.gen.ts
index 464e32d6f88..39739cd607e 100644
--- a/tests/fixture_plugin/fresh.gen.ts
+++ b/tests/fixture_plugin/fresh.gen.ts
@@ -2,7 +2,6 @@
 // This file SHOULD be checked into source version control.
 // This file is automatically updated during development when running `dev.ts`.
 
-import config from "./deno.json" assert { type: "json" };
 import * as $0 from "./routes/static.tsx";
 import * as $1 from "./routes/with-island.tsx";
 import * as $$0 from "./islands/Island.tsx";
@@ -16,7 +15,6 @@ const manifest = {
     "./islands/Island.tsx": $$0,
   },
   baseUrl: import.meta.url,
-  config,
 };
 
 export default manifest;
diff --git a/tests/fixture_plugin/import_map.json b/tests/fixture_plugin/import_map.json
deleted file mode 100644
index bf3f2f997b9..00000000000
--- a/tests/fixture_plugin/import_map.json
+++ /dev/null
@@ -1,8 +0,0 @@
-{
-  "imports": {
-    "$fresh/": "../../",
-    "preact": "https://esm.sh/preact@10.13.1",
-    "preact/": "https://esm.sh/preact@10.13.1/",
-    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@5.2.6"
-  }
-}
diff --git a/tests/fixture_plugin/options.ts b/tests/fixture_plugin/options.ts
index a31c710bc27..5555a2848dc 100644
--- a/tests/fixture_plugin/options.ts
+++ b/tests/fixture_plugin/options.ts
@@ -1,5 +1,12 @@
 import { FreshOptions } from "$fresh/server.ts";
 import cssInjectPlugin from "./utils/css-inject-plugin.ts";
 import jsInjectPlugin from "./utils/js-inject-plugin.ts";
+import cssInjectPluginAsync from "./utils/css-inject-plugin-async.ts";
 
-export default { plugins: [cssInjectPlugin, jsInjectPlugin] } as FreshOptions;
+export default {
+  plugins: [
+    cssInjectPlugin,
+    jsInjectPlugin,
+    cssInjectPluginAsync,
+  ],
+} as FreshOptions;
diff --git a/tests/fixture_plugin/utils/css-inject-plugin-async.ts b/tests/fixture_plugin/utils/css-inject-plugin-async.ts
new file mode 100644
index 00000000000..356ad1d4d13
--- /dev/null
+++ b/tests/fixture_plugin/utils/css-inject-plugin-async.ts
@@ -0,0 +1,15 @@
+import { Plugin } from "$fresh/server.ts";
+
+let CSS_TO_INJECT = "h1 { text-decoration: underline; }";
+
+export default {
+  name: "css-inject-async",
+  async renderAsync(ctx) {
+    await new Promise((res) => setTimeout(res, 50));
+    const res = await ctx.renderAsync();
+    if (res.requiresHydration) {
+      CSS_TO_INJECT += " h1 { font-style: italic; }";
+    }
+    return { styles: [{ cssText: CSS_TO_INJECT, id: "def" }] };
+  },
+} as Plugin;
diff --git a/tests/fixture_preact_rts_v5/deno.json b/tests/fixture_preact_rts_v5/deno.json
new file mode 100644
index 00000000000..f4f731d2db4
--- /dev/null
+++ b/tests/fixture_preact_rts_v5/deno.json
@@ -0,0 +1,18 @@
+{
+  "lock": false,
+  "tasks": {
+    "start": "deno run -A --watch=static/,routes/ dev.ts"
+  },
+  "imports": {
+    "$fresh/": "../../",
+    "preact": "https://esm.sh/preact@10.15.1",
+    "preact/": "https://esm.sh/preact@10.15.1/",
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@5.2.4",
+    "@preact/signals": "https://esm.sh/*@preact/signals@1.1.3",
+    "@preact/signals-core": "https://esm.sh/@preact/signals-core@1.2.3"
+  },
+  "compilerOptions": {
+    "jsx": "react-jsx",
+    "jsxImportSource": "preact"
+  }
+}
diff --git a/tests/fixture_preact_rts_v5/dev.ts b/tests/fixture_preact_rts_v5/dev.ts
new file mode 100755
index 00000000000..2d85d6c183c
--- /dev/null
+++ b/tests/fixture_preact_rts_v5/dev.ts
@@ -0,0 +1,5 @@
+#!/usr/bin/env -S deno run -A --watch=static/,routes/
+
+import dev from "$fresh/dev.ts";
+
+await dev(import.meta.url, "./main.ts");
diff --git a/tests/fixture_preact_rts_v5/fresh.gen.ts b/tests/fixture_preact_rts_v5/fresh.gen.ts
new file mode 100644
index 00000000000..e3235c834c0
--- /dev/null
+++ b/tests/fixture_preact_rts_v5/fresh.gen.ts
@@ -0,0 +1,18 @@
+// DO NOT EDIT. This file is generated by fresh.
+// This file SHOULD be checked into source version control.
+// This file is automatically updated during development when running `dev.ts`.
+
+import * as $0 from "./routes/index.tsx";
+import * as $$0 from "./islands/Test.tsx";
+
+const manifest = {
+  routes: {
+    "./routes/index.tsx": $0,
+  },
+  islands: {
+    "./islands/Test.tsx": $$0,
+  },
+  baseUrl: import.meta.url,
+};
+
+export default manifest;
diff --git a/tests/fixture_preact_rts_v5/islands/Test.tsx b/tests/fixture_preact_rts_v5/islands/Test.tsx
new file mode 100644
index 00000000000..fb5e7527c76
--- /dev/null
+++ b/tests/fixture_preact_rts_v5/islands/Test.tsx
@@ -0,0 +1,13 @@
+import { useEffect } from "preact/hooks";
+
+export default function Test() {
+  useEffect(() => {
+    document.getElementById("foo")!.textContent = "it works";
+  }, []);
+
+  return (
+    <p id="foo">
+      it doesn't work
+    </p>
+  );
+}
diff --git a/tests/fixture_preact_rts_v5/main.ts b/tests/fixture_preact_rts_v5/main.ts
new file mode 100644
index 00000000000..da8c854a3d1
--- /dev/null
+++ b/tests/fixture_preact_rts_v5/main.ts
@@ -0,0 +1,13 @@
+/// <reference no-default-lib="true" />
+/// <reference lib="dom" />
+/// <reference lib="dom.iterable" />
+/// <reference lib="dom.asynciterable" />
+/// <reference lib="deno.ns" />
+
+import { start } from "$fresh/server.ts";
+import routes from "./fresh.gen.ts";
+import options from "./options.ts";
+
+const experimentalDenoServe = Deno.args.includes("--experimental-deno-serve");
+
+await start(routes, { ...options, experimentalDenoServe });
diff --git a/tests/fixture_preact_rts_v5/main_wasm.ts b/tests/fixture_preact_rts_v5/main_wasm.ts
new file mode 100644
index 00000000000..a48ed37cd78
--- /dev/null
+++ b/tests/fixture_preact_rts_v5/main_wasm.ts
@@ -0,0 +1,16 @@
+// Simulate Deno Deploy environment
+
+/// <reference no-default-lib="true" />
+/// <reference lib="dom" />
+/// <reference lib="dom.iterable" />
+/// <reference lib="dom.asynciterable" />
+/// <reference lib="deno.ns" />
+
+import "./polyfill_deno_deploy.ts";
+import { start } from "$fresh/server.ts";
+import routes from "./fresh.gen.ts";
+import options from "./options.ts";
+
+const experimentalDenoServe = Deno.args.includes("--experimental-deno-serve");
+
+await start(routes, { ...options, experimentalDenoServe });
diff --git a/tests/fixture_preact_rts_v5/options.ts b/tests/fixture_preact_rts_v5/options.ts
new file mode 100644
index 00000000000..8d1b39864d3
--- /dev/null
+++ b/tests/fixture_preact_rts_v5/options.ts
@@ -0,0 +1,11 @@
+import { FreshOptions } from "$fresh/server.ts";
+
+export default {
+  async render(_ctx, render) {
+    await new Promise<void>((r) => r());
+    const body = render();
+    if (typeof body !== "string") {
+      throw new Error("body is missing");
+    }
+  },
+} as FreshOptions;
diff --git a/tests/fixture_preact_rts_v5/polyfill_deno_deploy.ts b/tests/fixture_preact_rts_v5/polyfill_deno_deploy.ts
new file mode 100644
index 00000000000..73380028741
--- /dev/null
+++ b/tests/fixture_preact_rts_v5/polyfill_deno_deploy.ts
@@ -0,0 +1,5 @@
+// Simulate Deno Deploy environment
+
+//@ts-ignore: Remove Deno.run for simulating deno deploy env
+// deno-lint-ignore no-deprecated-deno-api
+delete Deno.run;
diff --git a/tests/fixture_preact_rts_v5/routes/index.tsx b/tests/fixture_preact_rts_v5/routes/index.tsx
new file mode 100644
index 00000000000..756b29807c7
--- /dev/null
+++ b/tests/fixture_preact_rts_v5/routes/index.tsx
@@ -0,0 +1,9 @@
+import Test from "../islands/Test.tsx";
+
+export default function Home() {
+  return (
+    <div>
+      <Test />
+    </div>
+  );
+}
diff --git a/tests/fixture_render_error/deno.json b/tests/fixture_render_error/deno.json
new file mode 100644
index 00000000000..fa257c4d860
--- /dev/null
+++ b/tests/fixture_render_error/deno.json
@@ -0,0 +1,13 @@
+{
+  "lock": false,
+  "imports": {
+    "$fresh/": "../../",
+    "preact": "https://esm.sh/preact@10.15.1",
+    "preact/": "https://esm.sh/preact@10.15.1/",
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.1.0"
+  },
+  "compilerOptions": {
+    "jsx": "react-jsx",
+    "jsxImportSource": "preact"
+  }
+}
diff --git a/tests/fixture_render_error/dev.ts b/tests/fixture_render_error/dev.ts
new file mode 100755
index 00000000000..2d85d6c183c
--- /dev/null
+++ b/tests/fixture_render_error/dev.ts
@@ -0,0 +1,5 @@
+#!/usr/bin/env -S deno run -A --watch=static/,routes/
+
+import dev from "$fresh/dev.ts";
+
+await dev(import.meta.url, "./main.ts");
diff --git a/tests/fixture_render_error/fresh.gen.ts b/tests/fixture_render_error/fresh.gen.ts
new file mode 100644
index 00000000000..799a93fba0a
--- /dev/null
+++ b/tests/fixture_render_error/fresh.gen.ts
@@ -0,0 +1,15 @@
+// DO NOT EDIT. This file is generated by fresh.
+// This file SHOULD be checked into source version control.
+// This file is automatically updated during development when running `dev.ts`.
+
+import * as $0 from "./routes/index.tsx";
+
+const manifest = {
+  routes: {
+    "./routes/index.tsx": $0,
+  },
+  islands: {},
+  baseUrl: import.meta.url,
+};
+
+export default manifest;
diff --git a/tests/fixture_render_error/main.ts b/tests/fixture_render_error/main.ts
new file mode 100644
index 00000000000..dedce9cbb04
--- /dev/null
+++ b/tests/fixture_render_error/main.ts
@@ -0,0 +1,10 @@
+/// <reference no-default-lib="true" />
+/// <reference lib="dom" />
+/// <reference lib="dom.iterable" />
+/// <reference lib="dom.asynciterable" />
+/// <reference lib="deno.ns" />
+
+import { start } from "$fresh/server.ts";
+import manifest from "./fresh.gen.ts";
+
+await start(manifest);
diff --git a/tests/fixture_render_error/routes/index.tsx b/tests/fixture_render_error/routes/index.tsx
new file mode 100644
index 00000000000..4ddf89e7d6e
--- /dev/null
+++ b/tests/fixture_render_error/routes/index.tsx
@@ -0,0 +1,3 @@
+export default function Home() {
+  return <h1>it should error {{ foo: 123 }}</h1>;
+}
diff --git a/tests/fixture_router/dev.ts b/tests/fixture_router/dev.ts
new file mode 100644
index 00000000000..2d85d6c183c
--- /dev/null
+++ b/tests/fixture_router/dev.ts
@@ -0,0 +1,5 @@
+#!/usr/bin/env -S deno run -A --watch=static/,routes/
+
+import dev from "$fresh/dev.ts";
+
+await dev(import.meta.url, "./main.ts");
diff --git a/tests/fixture_router/fresh.gen.ts b/tests/fixture_router/fresh.gen.ts
new file mode 100644
index 00000000000..0fd4d6748c0
--- /dev/null
+++ b/tests/fixture_router/fresh.gen.ts
@@ -0,0 +1,17 @@
+// DO NOT EDIT. This file is generated by fresh.
+// This file SHOULD be checked into source version control.
+// This file is automatically updated during development when running `dev.ts`.
+
+import * as $0 from "./routes/about.tsx";
+import * as $1 from "./routes/index.tsx";
+
+const manifest = {
+  routes: {
+    "./routes/about.tsx": $0,
+    "./routes/index.tsx": $1,
+  },
+  islands: {},
+  baseUrl: import.meta.url,
+};
+
+export default manifest;
diff --git a/tests/fixture_router/main.ts b/tests/fixture_router/main.ts
new file mode 100644
index 00000000000..0f15e8defa4
--- /dev/null
+++ b/tests/fixture_router/main.ts
@@ -0,0 +1,10 @@
+/// <reference no-default-lib="true" />
+/// <reference lib="dom" />
+/// <reference lib="dom.asynciterable" />
+/// <reference lib="deno.ns" />
+/// <reference lib="deno.unstable" />
+
+import { start } from "$fresh/server.ts";
+import manifest from "./fresh.gen.ts";
+
+await start(manifest);
diff --git a/tests/fixture_router/routes/about.tsx b/tests/fixture_router/routes/about.tsx
new file mode 100644
index 00000000000..b7f9b36995a
--- /dev/null
+++ b/tests/fixture_router/routes/about.tsx
@@ -0,0 +1,7 @@
+export default function About() {
+  return (
+    <div>
+      About
+    </div>
+  );
+}
diff --git a/tests/fixture_router/routes/index.tsx b/tests/fixture_router/routes/index.tsx
new file mode 100644
index 00000000000..e8dd3d6f5ff
--- /dev/null
+++ b/tests/fixture_router/routes/index.tsx
@@ -0,0 +1,7 @@
+export default function Home() {
+  return (
+    <div>
+      Hello
+    </div>
+  );
+}
diff --git a/tests/fixture_twind_hydrate/deno.json b/tests/fixture_twind_hydrate/deno.json
index b691b285acd..5236a198c2a 100644
--- a/tests/fixture_twind_hydrate/deno.json
+++ b/tests/fixture_twind_hydrate/deno.json
@@ -3,7 +3,14 @@
   "tasks": {
     "start": "deno run -A --watch=static/,routes/ dev.ts"
   },
-  "importMap": "./import_map.json",
+  "imports": {
+    "$fresh/": "../../",
+    "preact": "https://esm.sh/preact@10.11.0",
+    "preact/": "https://esm.sh/preact@10.11.0/",
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.1.0",
+    "@preact/signals": "https://esm.sh/*@preact/signals@1.0.3",
+    "@preact/signals-core": "https://esm.sh/*@preact/signals-core@1.0.1"
+  },
   "compilerOptions": {
     "jsx": "react-jsx",
     "jsxImportSource": "preact"
diff --git a/tests/fixture_twind_hydrate/fresh.gen.ts b/tests/fixture_twind_hydrate/fresh.gen.ts
index 521f4ee531b..d32cac5dc82 100644
--- a/tests/fixture_twind_hydrate/fresh.gen.ts
+++ b/tests/fixture_twind_hydrate/fresh.gen.ts
@@ -2,7 +2,6 @@
 // This file SHOULD be checked into source version control.
 // This file is automatically updated during development when running `dev.ts`.
 
-import config from "./deno.json" assert { type: "json" };
 import * as $0 from "./routes/check-duplication.tsx";
 import * as $1 from "./routes/insert-cssrules.tsx";
 import * as $2 from "./routes/static.tsx";
@@ -20,7 +19,6 @@ const manifest = {
     "./islands/InsertCssrules.tsx": $$1,
   },
   baseUrl: import.meta.url,
-  config,
 };
 
 export default manifest;
diff --git a/tests/fixture_twind_hydrate/import_map.json b/tests/fixture_twind_hydrate/import_map.json
deleted file mode 100644
index 2914af6c4e1..00000000000
--- a/tests/fixture_twind_hydrate/import_map.json
+++ /dev/null
@@ -1,10 +0,0 @@
-{
-  "imports": {
-    "$fresh/": "../../",
-    "preact": "https://esm.sh/preact@10.11.0",
-    "preact/": "https://esm.sh/preact@10.11.0/",
-    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@5.2.4",
-    "@preact/signals": "https://esm.sh/*@preact/signals@1.0.3",
-    "@preact/signals-core": "https://esm.sh/*@preact/signals-core@1.0.1"
-  }
-}
diff --git a/tests/fixture_twind_hydrate/islands/CheckDuplication.tsx b/tests/fixture_twind_hydrate/islands/CheckDuplication.tsx
index 1c8d5245601..08fc60ad5e9 100644
--- a/tests/fixture_twind_hydrate/islands/CheckDuplication.tsx
+++ b/tests/fixture_twind_hydrate/islands/CheckDuplication.tsx
@@ -1,6 +1,7 @@
 // https://github.com/denoland/fresh/pull/1050
-import { useEffect, useState } from "preact/hooks";
+import { useEffect } from "preact/hooks";
 import { cmpCssRules } from "../utils/utils.ts";
+import { useSignal } from "@preact/signals";
 
 /**
  * Returns a cssrulelist of styleElement matching the selector.
@@ -11,22 +12,18 @@ function getCssrules(selector: string) {
 }
 
 export default function CheckDuplication() {
-  const [cssRulesFRSHTWIND, setCssRulesFRSHTWIND] = useState<
-    undefined | CSSRuleList
-  >(undefined);
-  const [cssRulesClaimed, setCssRulesClaimed] = useState<
-    undefined | CSSRuleList
-  >(undefined);
+  const cssRulesFRSHTWIND = useSignal<undefined | CSSRuleList>(undefined);
+  const cssRulesClaimed = useSignal<undefined | CSSRuleList>(undefined);
 
   // Init
   useEffect(() => {
     // get <style id="__FRSH_TWIND">
-    setCssRulesFRSHTWIND(getCssrules("#__FRSH_TWIND"));
+    cssRulesFRSHTWIND.value = getCssrules("#__FRSH_TWIND");
 
     // get <style data-twind="claimed">
     // see https://github.com/tw-in-js/twind/blob/main/packages/core/src/sheets.ts#L5-L16
-    setCssRulesClaimed(
-      getCssrules('[data-twind="claimed"]:not(#__FRSH_TWIND)'),
+    cssRulesClaimed.value = getCssrules(
+      '[data-twind="claimed"]:not(#__FRSH_TWIND)',
     );
   });
 
@@ -37,22 +34,24 @@ export default function CheckDuplication() {
 
       {/* Status of duplicates */}
       {(() => {
-        if (cssRulesFRSHTWIND != null && cssRulesClaimed != null) {
+        if (cssRulesFRSHTWIND.value != null && cssRulesClaimed.value != null) {
           return (
             <div>
               <p>Error :</p>
               <p id="numDuplicates">
                 {`${
                   cmpCssRules(
-                    cssRulesFRSHTWIND,
-                    cssRulesClaimed,
+                    cssRulesFRSHTWIND.value,
+                    cssRulesClaimed.value,
                   )
                 }`}
               </p>
               <p>cssrules are duplicated</p>
             </div>
           );
-        } else if (cssRulesFRSHTWIND != null && cssRulesClaimed == null) {
+        } else if (
+          cssRulesFRSHTWIND.value != null && cssRulesClaimed.value == null
+        ) {
           return <p id="okNoDuplicates">Ok : No duplicates</p>;
         } else {
           return <p id="errorNoExistsRules">Error : Cssrules does not exist</p>;
diff --git a/tests/fixture_twind_hydrate/islands/InsertCssrules.tsx b/tests/fixture_twind_hydrate/islands/InsertCssrules.tsx
index 2fd979c24d8..320f8eebda5 100644
--- a/tests/fixture_twind_hydrate/islands/InsertCssrules.tsx
+++ b/tests/fixture_twind_hydrate/islands/InsertCssrules.tsx
@@ -1,5 +1,6 @@
 // https://github.com/denoland/fresh/pull/1050
-import { useEffect, useState } from "preact/hooks";
+import { useEffect } from "preact/hooks";
+import { useSignal } from "@preact/signals";
 
 /**
  * Returns a number of cssrules set by twind.
@@ -10,21 +11,19 @@ function getNumCssrules(): number | undefined {
 }
 
 export default function InsertCssrules() {
-  const [numDefCssRules, setNumDefCssRules] = useState<number | undefined>(
-    undefined,
-  );
-  const [numCssRules, setNumCssRules] = useState<number | undefined>(undefined);
-  const [insertedStyles, setInsertedStyles] = useState("");
+  const numDefCssRules = useSignal<number | undefined>(undefined);
+  const numCssRules = useSignal<number | undefined>(undefined);
+  const insertedStyles = useSignal("");
 
   // Init numDefCssRules
   useEffect(() => {
-    setNumDefCssRules(getNumCssrules());
+    numDefCssRules.value = getNumCssrules();
   }, []);
 
   // Init and Update numCssRules
   useEffect(() => {
-    setNumCssRules(getNumCssrules());
-  }, [insertedStyles]);
+    numCssRules.value = getNumCssrules();
+  }, [insertedStyles.value]);
 
   return (
     <div>
@@ -33,22 +32,26 @@ export default function InsertCssrules() {
       <div>
         <p>Default Number of __FRSH_TWIND CssRules :</p>
         <p id="defaultNumCssRules" class={`text-xl`}>
-          {numDefCssRules ? numDefCssRules : "Error : Cannot get cssrules"}
+          {numDefCssRules.value
+            ? numDefCssRules.value
+            : "Error : Cannot get cssrules"}
         </p>
       </div>
 
       <div>
         <p>Current Number of __FRSH_TWIND CssRules :</p>
-        <p id="currentNumCssRules" class={`text-xl ${insertedStyles}`}>
-          {numCssRules ? numCssRules : "Error : Cannot get cssrules"}
+        <p id="currentNumCssRules" class={`text-xl ${insertedStyles.value}`}>
+          {numCssRules.value
+            ? numCssRules.value
+            : "Error : Cannot get cssrules"}
         </p>
       </div>
 
       {/* Status of insert css rules */}
       {(() => {
-        if (insertedStyles === "") {
+        if (insertedStyles.value === "") {
           return <p id="waitClickButton">Plese click button</p>;
-        } else if (numDefCssRules === numCssRules) {
+        } else if (numDefCssRules.value === numCssRules.value) {
           return (
             <p id="errorInsertCssrules">
               {'Error: A cssrule has been inserted into a style sheet other than <style id="__FRSH_TWIND">'}
@@ -62,9 +65,9 @@ export default function InsertCssrules() {
       <button
         id="insertCssRuleButton"
         onClick={() => {
-          setInsertedStyles("text-green-600");
+          insertedStyles.value = "text-green-600";
         }}
-        disabled={insertedStyles === "" ? false : true}
+        disabled={insertedStyles.value === "" ? false : true}
       >
         Add `text-green-600` to Cureent Number Class
       </button>
diff --git a/tests/islands_test.ts b/tests/islands_test.ts
index 67b6d595a7d..271c1c3fd5d 100644
--- a/tests/islands_test.ts
+++ b/tests/islands_test.ts
@@ -1,16 +1,17 @@
 import {
   assert,
+  assertEquals,
   assertStringIncludes,
   delay,
   Page,
   puppeteer,
-  TextLineStream,
 } from "./deps.ts";
+import { startFreshServer } from "./test_utils.ts";
 
 Deno.test({
   name: "island tests",
   async fn(t) {
-    await withPage(async (page) => {
+    await withPage(async (page, address) => {
       async function counterTest(counterId: string, originalValue: number) {
         const pElem = await page.waitForSelector(`#${counterId} > p`);
 
@@ -26,13 +27,14 @@ Deno.test({
         assert(value === `${originalValue + 1}`, `${counterId} click`);
       }
 
-      await page.goto("http://localhost:8000/islands", {
+      await page.goto(`${address}/islands`, {
         waitUntil: "networkidle2",
       });
 
-      await t.step("Ensure 3 islands on 1 page are revived", async () => {
+      await t.step("Ensure 4 islands on 1 page are revived", async () => {
         await counterTest("counter1", 3);
         await counterTest("counter2", 10);
+        await counterTest("folder-counter", 3);
         await counterTest("kebab-case-file-counter", 5);
       });
 
@@ -43,7 +45,7 @@ Deno.test({
         assertStringIncludes(srcString, "image.png?__frsh_c=");
 
         // Ensure src path is the same as server rendered
-        const resp = await fetch(new Request("http://localhost:8000/islands"));
+        const resp = await fetch(new Request(`${address}/islands`));
         const body = await resp.text();
 
         const imgFilePath = body.match(/img id="img-in-island" src="(.*?)"/)
@@ -57,31 +59,25 @@ Deno.test({
   sanitizeResources: false,
 });
 
-async function withPage(fn: (page: Page) => Promise<void>) {
-  const serverProcess = new Deno.Command(Deno.execPath(), {
-    args: ["run", "-A", "./tests/fixture/main.ts"],
-    stdout: "piped",
-    stderr: "inherit",
-  }).spawn();
-
-  const textDecoderStream = new TextDecoderStream();
-  const textLineStream = new TextLineStream();
+function withPage(fn: (page: Page, address: string) => Promise<void>) {
+  return withPageName("./tests/fixture/main.ts", fn);
+}
 
-  const lines = serverProcess.stdout
-    .pipeThrough(textDecoderStream)
-    .pipeThrough(textLineStream);
+async function withPageName(
+  name: string,
+  fn: (page: Page, address: string) => Promise<void>,
+) {
+  const { lines, serverProcess, address } = await startFreshServer({
+    args: ["run", "-A", name],
+  });
 
   try {
-    if (!await didServerStart(lines)) {
-      throw new Error("Server didn't start up");
-    }
-
     await delay(100);
     const browser = await puppeteer.launch({ args: ["--no-sandbox"] });
 
     try {
       const page = await browser.newPage();
-      await fn(page);
+      await fn(page, address);
     } finally {
       await browser.close();
     }
@@ -95,28 +91,16 @@ async function withPage(fn: (page: Page) => Promise<void>) {
   }
 }
 
-async function didServerStart(
-  stdoutLines: ReadableStream<string>,
-): Promise<boolean> {
-  for await (const line of stdoutLines) {
-    if (line.includes("Listening on http://")) {
-      return true;
-    }
-  }
-
-  return false;
-}
-
 Deno.test({
   name: "island tests with </script>",
 
   async fn(t) {
-    await withPage(async (page) => {
+    await withPage(async (page, address) => {
       page.on("dialog", () => {
         assert(false, "There is XSS");
       });
 
-      await page.goto("http://localhost:8000/evil", {
+      await page.goto(`${address}/evil`, {
         waitUntil: "networkidle2",
       });
 
@@ -141,8 +125,8 @@ Deno.test({
   name: "island with fragment as root",
 
   async fn(_t) {
-    await withPage(async (page) => {
-      await page.goto("http://localhost:8000/islands/root_fragment", {
+    await withPage(async (page, address) => {
+      await page.goto(`${address}/islands/root_fragment`, {
         waitUntil: "networkidle2",
       });
 
@@ -176,9 +160,9 @@ Deno.test({
   name: "island with fragment as root and conditional child first",
 
   async fn(_t) {
-    await withPage(async (page) => {
+    await withPage(async (page, address) => {
       await page.goto(
-        "http://localhost:8000/islands/root_fragment_conditional_first",
+        `${address}/islands/root_fragment_conditional_first`,
         {
           waitUntil: "networkidle2",
         },
@@ -205,3 +189,273 @@ Deno.test({
 async function getIslandParentTextContent(page: Page) {
   return await page.$eval("#island-parent", (el: Element) => el.textContent);
 }
+
+Deno.test({
+  name: "island that returns `null`",
+
+  async fn(_t) {
+    await withPage(async (page, address) => {
+      await page.goto(`${address}/islands/returning_null`, {
+        waitUntil: "networkidle2",
+      });
+
+      await page.waitForSelector(".added-by-use-effect");
+    });
+  },
+
+  sanitizeOps: false,
+  sanitizeResources: false,
+});
+
+Deno.test({
+  name: "island using `npm:` specifiers",
+
+  async fn(_t) {
+    await withPageName("./tests/fixture_npm/main.ts", async (page, address) => {
+      await page.setJavaScriptEnabled(false);
+      await page.goto(address, { waitUntil: "networkidle2" });
+      assert(await page.waitForSelector("#server-true"));
+
+      await page.setJavaScriptEnabled(true);
+      await page.reload({ waitUntil: "networkidle2" });
+      assert(await page.waitForSelector("#browser-true"));
+    });
+  },
+
+  sanitizeOps: false,
+  sanitizeResources: false,
+});
+
+Deno.test({
+  name: "works with older preact-render-to-string v5",
+
+  async fn(_t) {
+    await withPageName(
+      "./tests/fixture_preact_rts_v5/main.ts",
+      async (page, address) => {
+        await page.goto(address, {
+          waitUntil: "networkidle2",
+        });
+        await page.waitForSelector("#foo");
+
+        await delay(100);
+        const text = await page.$eval("#foo", (el) => el.textContent);
+        assertEquals(text, "it works");
+      },
+    );
+  },
+
+  sanitizeOps: false,
+  sanitizeResources: false,
+});
+
+Deno.test({
+  name: "pass single JSX child to island",
+
+  async fn(_t) {
+    await withPageName(
+      "./tests/fixture_island_nesting/main.ts",
+      async (page, address) => {
+        await page.goto(`${address}/island_jsx_child`, {
+          waitUntil: "networkidle2",
+        });
+        await page.waitForSelector(".island");
+
+        await delay(100);
+        const text = await page.$eval(".island", (el) => el.textContent);
+        assertEquals(text, "it works");
+      },
+    );
+  },
+
+  sanitizeOps: false,
+  sanitizeResources: false,
+});
+
+Deno.test({
+  name: "pass multiple JSX children to island",
+
+  async fn(_t) {
+    await withPageName(
+      "./tests/fixture_island_nesting/main.ts",
+      async (page, address) => {
+        await page.goto(`${address}/island_jsx_children`, {
+          waitUntil: "networkidle2",
+        });
+        await page.waitForSelector(".island");
+
+        await delay(100);
+        const text = await page.$eval(".island", (el) => el.textContent);
+        assertEquals(text, "it works");
+      },
+    );
+  },
+
+  sanitizeOps: false,
+  sanitizeResources: false,
+});
+
+Deno.test({
+  name: "pass multiple text JSX children to island",
+
+  async fn(_t) {
+    await withPageName(
+      "./tests/fixture_island_nesting/main.ts",
+      async (page, address) => {
+        await page.goto(`${address}/island_jsx_text`, {
+          waitUntil: "networkidle2",
+        });
+        await page.waitForSelector(".island");
+
+        await delay(100);
+        const text = await page.$eval(".island", (el) => el.textContent);
+        assertEquals(text, "it works");
+      },
+    );
+  },
+
+  sanitizeOps: false,
+  sanitizeResources: false,
+});
+
+Deno.test({
+  name: "render island in island",
+
+  async fn(_t) {
+    await withPageName(
+      "./tests/fixture_island_nesting/main.ts",
+      async (page, address) => {
+        await page.goto(`${address}/island_in_island`, {
+          waitUntil: "networkidle2",
+        });
+        await page.waitForSelector(".island");
+
+        await delay(100);
+        const text = await page.$eval(
+          ".island .island p",
+          (el) => el.textContent,
+        );
+        assertEquals(text, "it works");
+      },
+    );
+  },
+
+  sanitizeOps: false,
+  sanitizeResources: false,
+});
+
+Deno.test({
+  name: "render island inside island definition",
+
+  async fn(_t) {
+    await withPageName(
+      "./tests/fixture_island_nesting/main.ts",
+      async (page, address) => {
+        await page.goto(`${address}/island_in_island_definition`, {
+          waitUntil: "networkidle2",
+        });
+        await page.waitForSelector(".island");
+
+        await delay(100);
+        const text = await page.$eval(
+          ".island .island p",
+          (el) => el.textContent,
+        );
+        assertEquals(text, "it works");
+
+        // Check that there is no duplicated content which could happen
+        // when islands aren't initialized correctly
+        const pageText = await page.$eval("#page", (el) => el.textContent);
+        assertEquals(pageText, "it works");
+      },
+    );
+  },
+
+  sanitizeOps: false,
+  sanitizeResources: false,
+});
+
+Deno.test({
+  name:
+    "render island with JSX children that render another island with JSX children",
+
+  async fn(_t) {
+    await withPageName(
+      "./tests/fixture_island_nesting/main.ts",
+      async (page, address) => {
+        await page.goto(`${address}/island_jsx_island_jsx`, {
+          waitUntil: "networkidle2",
+        });
+        await page.waitForSelector(".island");
+
+        await delay(100);
+        const text = await page.$eval(
+          ".island .server .island .server p",
+          (el) => el.textContent,
+        );
+        assertEquals(text, "it works");
+      },
+    );
+  },
+
+  sanitizeOps: false,
+  sanitizeResources: false,
+});
+
+Deno.test({
+  name: "render sibling islands",
+
+  async fn(_t) {
+    await withPageName(
+      "./tests/fixture_island_nesting/main.ts",
+      async (page, address) => {
+        await page.goto(`${address}/island_siblings`, {
+          waitUntil: "networkidle2",
+        });
+        await page.waitForSelector(".island");
+
+        await delay(100);
+        const text = await page.$eval(
+          ".island .a",
+          (el) => el.textContent,
+        );
+        assertEquals(text, "it works");
+
+        const text2 = await page.$eval(
+          ".island + .island .b",
+          (el) => el.textContent,
+        );
+        assertEquals(text2, "it works");
+      },
+    );
+  },
+
+  sanitizeOps: false,
+  sanitizeResources: false,
+});
+
+Deno.test({
+  name: "serialize inner island props",
+
+  async fn(_t) {
+    await withPageName(
+      "./tests/fixture_island_nesting/main.ts",
+      async (page, address) => {
+        await page.goto(`${address}/island_nested_props`, {
+          waitUntil: "networkidle2",
+        });
+        await page.waitForSelector(".island");
+
+        await delay(100);
+        const text = await page.$eval(
+          ".island .island p",
+          (el) => el.textContent,
+        );
+        assertEquals(text, "it works");
+      },
+    );
+  },
+
+  sanitizeOps: false,
+  sanitizeResources: false,
+});
diff --git a/tests/islands_wasm_test.ts b/tests/islands_wasm_test.ts
index 1cbd51852f1..0204e886e6a 100644
--- a/tests/islands_wasm_test.ts
+++ b/tests/islands_wasm_test.ts
@@ -1,30 +1,14 @@
-import { assert, delay, puppeteer, TextLineStream } from "./deps.ts";
+import { assert, delay, puppeteer } from "./deps.ts";
+import { startFreshServer } from "./test_utils.ts";
 
 Deno.test({
   name: "wasm island tests",
   ignore: Deno.build.os === "windows",
   async fn(t) {
     // Preparation
-    const serverProcess = new Deno.Command(Deno.execPath(), {
+    const { lines, serverProcess, address } = await startFreshServer({
       args: ["run", "-A", "./tests/fixture/main_wasm.ts"],
-      stdout: "piped",
-    }).spawn();
-
-    const decoder = new TextDecoderStream();
-    const lines = serverProcess.stdout
-      .pipeThrough(decoder)
-      .pipeThrough(new TextLineStream());
-
-    let started = false;
-    for await (const line of lines) {
-      if (line.includes("Listening on http://")) {
-        started = true;
-        break;
-      }
-    }
-    if (!started) {
-      throw new Error("Server didn't start up");
-    }
+    });
 
     await delay(100);
 
@@ -43,7 +27,7 @@ Deno.test({
       assert(value === `${originalValue + 1}`, `${counterId} click`);
     }
 
-    await page.goto("http://localhost:8000/islands", {
+    await page.goto(`${address}/islands`, {
       waitUntil: "networkidle2",
     });
 
diff --git a/tests/main_test.ts b/tests/main_test.ts
index c1cd23eb189..dc0ee2f1ffc 100644
--- a/tests/main_test.ts
+++ b/tests/main_test.ts
@@ -5,10 +5,11 @@ import {
   assertStringIncludes,
   delay,
   puppeteer,
-  TextLineStream,
 } from "./deps.ts";
 import manifest from "./fixture/fresh.gen.ts";
 import options from "./fixture/options.ts";
+import { BUILD_ID } from "../src/server/build_id.ts";
+import { startFreshServer } from "./test_utils.ts";
 
 const ctx = await ServerContext.fromManifest(manifest, options);
 const handler = ctx.handler();
@@ -38,11 +39,12 @@ Deno.test("/ page prerender", async () => {
   assertStringIncludes(body, "test.js");
   assertStringIncludes(body, "<p>Hello!</p>");
   assertStringIncludes(body, "<p>Viewing JIT render.</p>");
-  assertStringIncludes(body, `>[[{"message":"Hello!"}],[]]</script>`);
+  assertStringIncludes(body, `>{"v":[[{"message":"Hello!"}],[]]}</script>`);
   assertStringIncludes(
     body,
-    `<meta name="description" content="Hello world!" />`,
+    '<meta name="description" content="Hello world!"/>',
   );
+  assertStringIncludes(body, `<link rel="modulepreload"`);
 });
 
 Deno.test("/props/123 page prerender", async () => {
@@ -66,6 +68,34 @@ Deno.test("/[name] page prerender", async () => {
   assertStringIncludes(body, "<div>Hello bar</div>");
 });
 
+Deno.test("/api/head_override - HEAD", async () => {
+  const req = new Request("https://fresh.deno.dev/api/head_override", {
+    method: "HEAD",
+  });
+  const resp = await router(req);
+  assert(resp);
+  assertEquals(resp.status, Status.NoContent);
+  assertEquals(resp.body, null);
+  assertEquals(
+    resp.headers.get("content-type"),
+    "text/html; charset=utf-8",
+  );
+});
+
+Deno.test("/api/get_only - HEAD fallback", async () => {
+  const req = new Request("https://fresh.deno.dev/api/get_only", {
+    method: "HEAD",
+  });
+  const resp = await router(req);
+  assert(resp);
+  assertEquals(resp.status, Status.OK);
+  assertEquals(resp.body, null);
+  assertEquals(
+    resp.headers.get("content-type"),
+    "application/json; charset=utf-8",
+  );
+});
+
 Deno.test("/intercept - GET html", async () => {
   const req = new Request("https://fresh.deno.dev/intercept", {
     headers: { "accept": "text/html" },
@@ -119,6 +149,18 @@ Deno.test("/intercept_args - GET html", async () => {
   assertStringIncludes(body, "<div>intercepted</div>");
 });
 
+Deno.test("/status_overwrite", async () => {
+  const req = new Request("https://fresh.deno.dev/status_overwrite", {
+    headers: { "accept": "text/html" },
+  });
+  const resp = await router(req);
+  assert(resp);
+  assertEquals(resp.status, Status.Unauthorized);
+  assertEquals(resp.headers.get("x-some-header"), "foo");
+  const body = await resp.text();
+  assertStringIncludes(body, "<div>This is HTML</div>");
+});
+
 Deno.test("/api/get_only - NOTAMETHOD", async () => {
   const resp = await router(
     new Request("https://fresh.deno.dev/api/get_only", {
@@ -171,7 +213,7 @@ Deno.test("redirect /pages/fresh/ to /pages/fresh", async () => {
   assertEquals(resp.status, Status.TemporaryRedirect);
   assertEquals(
     resp.headers.get("location"),
-    "https://fresh.deno.dev/pages/fresh",
+    "/pages/fresh",
   );
 });
 
@@ -183,7 +225,7 @@ Deno.test("redirect /pages/////fresh///// to /pages/////fresh", async () => {
   assertEquals(resp.status, Status.TemporaryRedirect);
   assertEquals(
     resp.headers.get("location"),
-    "https://fresh.deno.dev/pages/////fresh",
+    "/pages/////fresh",
   );
 });
 
@@ -195,7 +237,7 @@ Deno.test("redirect /pages/////fresh/ to /pages/////fresh", async () => {
   assertEquals(resp.status, Status.TemporaryRedirect);
   assertEquals(
     resp.headers.get("location"),
-    "https://fresh.deno.dev/pages/////fresh",
+    "/pages/////fresh",
   );
 });
 
@@ -317,7 +359,7 @@ Deno.test("static file - by 'hashed' path", async () => {
   const body = await resp.text();
   const imgFilePath = body.match(/img id="img-with-hashing" src="(.*?)"/)?.[1];
   assert(imgFilePath);
-  assert(imgFilePath.includes(`?__frsh_c=${globalThis.__FRSH_BUILD_ID}`));
+  assert(imgFilePath.includes(`?__frsh_c=${BUILD_ID}`));
 
   // check the static file is served corectly under its cacheable route
   const resp2 = await router(
@@ -345,20 +387,20 @@ Deno.test("static file - by 'hashed' path", async () => {
   )?.[1];
   assert(imgFilePathWithNoCache);
   assert(
-    !imgFilePathWithNoCache.includes(globalThis.__FRSH_BUILD_ID),
+    !imgFilePathWithNoCache.includes(BUILD_ID),
     "img-without-hashing",
   );
 
   // ensure asset hook is applied on img within an island
   const imgInIsland = body.match(/img id="img-in-island" src="(.*?)"/)?.[1];
   assert(imgInIsland);
-  assert(imgInIsland.includes(globalThis.__FRSH_BUILD_ID), "img-in-island");
+  assert(imgInIsland.includes(BUILD_ID), "img-in-island");
 
   // verify that the asset hook is applied to the srcset
   const imgInIslandSrcSet = body.match(/srcset="(.*?)"/)?.[1];
   assert(imgInIslandSrcSet);
   assert(
-    imgInIslandSrcSet.includes(globalThis.__FRSH_BUILD_ID),
+    imgInIslandSrcSet.includes(BUILD_ID),
     "img-in-island-srcset",
   );
 
@@ -366,7 +408,7 @@ Deno.test("static file - by 'hashed' path", async () => {
   const imgMissing = body.match(/img id="img-missing" src="(.*?)"/)?.[1];
   assert(imgMissing);
   assert(
-    !imgMissing.includes(globalThis.__FRSH_BUILD_ID),
+    !imgMissing.includes(BUILD_ID),
     "Applying hash on unknown asset",
   );
 });
@@ -564,7 +606,7 @@ Deno.test("experimental Deno.serve", {
   ignore: Deno.build.os === "windows", // TODO: Deno.serve hang on Windows?
 }, async (t) => {
   // Preparation
-  const serverProcess = new Deno.Command(Deno.execPath(), {
+  const { serverProcess, lines, address } = await startFreshServer({
     args: [
       "run",
       "-A",
@@ -572,30 +614,12 @@ Deno.test("experimental Deno.serve", {
       "./tests/fixture/main.ts",
       "--experimental-deno-serve",
     ],
-    stdout: "piped",
-    stderr: "inherit",
-  }).spawn();
-
-  const decoder = new TextDecoderStream();
-  const lines = serverProcess.stdout
-    .pipeThrough(decoder)
-    .pipeThrough(new TextLineStream());
-
-  let started = false;
-  for await (const line of lines) {
-    if (line.includes("Listening on http://")) {
-      started = true;
-      break;
-    }
-  }
-  if (!started) {
-    throw new Error("Server didn't start up");
-  }
+  });
 
   await delay(100);
 
   await t.step("ssr", async () => {
-    const resp = await fetch("http://localhost:8000");
+    const resp = await fetch(address);
     assert(resp);
     assertEquals(resp.status, Status.OK);
     assertEquals(resp.headers.get("content-type"), "text/html; charset=utf-8");
@@ -605,15 +629,15 @@ Deno.test("experimental Deno.serve", {
     assertStringIncludes(body, "test.js");
     assertStringIncludes(body, "<p>Hello!</p>");
     assertStringIncludes(body, "<p>Viewing JIT render.</p>");
-    assertStringIncludes(body, `>[[{"message":"Hello!"}],[]]</script>`);
+    assertStringIncludes(body, `>{"v":[[{"message":"Hello!"}],[]]}</script>`);
     assertStringIncludes(
       body,
-      `<meta name="description" content="Hello world!" />`,
+      '<meta name="description" content="Hello world!"/>',
     );
   });
 
   await t.step("static file", async () => {
-    const resp = await fetch("http://localhost:8000/foo.txt");
+    const resp = await fetch(`${address}/foo.txt`);
     assertEquals(resp.status, Status.OK);
     const body = await resp.text();
     assert(body.startsWith("bar"));
@@ -634,32 +658,14 @@ Deno.test("jsx pragma works", {
   sanitizeResources: false,
 }, async (t) => {
   // Preparation
-  const serverProcess = new Deno.Command(Deno.execPath(), {
+  const { serverProcess, lines, address } = await startFreshServer({
     args: ["run", "-A", "./tests/fixture_jsx_pragma/main.ts"],
-    stdout: "piped",
-    stderr: "inherit",
-  }).spawn();
-
-  const decoder = new TextDecoderStream();
-  const lines = serverProcess.stdout
-    .pipeThrough(decoder)
-    .pipeThrough(new TextLineStream());
-
-  let started = false;
-  for await (const line of lines) {
-    if (line.includes("Listening on http://")) {
-      started = true;
-      break;
-    }
-  }
-  if (!started) {
-    throw new Error("Server didn't start up");
-  }
+  });
 
   await delay(100);
 
   await t.step("ssr", async () => {
-    const resp = await fetch("http://localhost:8000");
+    const resp = await fetch(address);
     assertEquals(resp.status, Status.OK);
     const text = await resp.text();
     assertStringIncludes(text, "Hello World");
@@ -669,7 +675,7 @@ Deno.test("jsx pragma works", {
   const browser = await puppeteer.launch({ args: ["--no-sandbox"] });
   const page = await browser.newPage();
 
-  await page.goto("http://localhost:8000", {
+  await page.goto(address, {
     waitUntil: "networkidle2",
   });
 
@@ -682,3 +688,110 @@ Deno.test("jsx pragma works", {
   await lines.cancel();
   serverProcess.kill("SIGTERM");
 });
+
+Deno.test("preact/debug is active in dev mode", {
+  sanitizeOps: false,
+  sanitizeResources: false,
+}, async (t) => {
+  // Preparation
+  const { serverProcess, lines, address } = await startFreshServer({
+    args: ["run", "-A", "./tests/fixture_render_error/main.ts"],
+  });
+
+  await delay(100);
+
+  await t.step("SSR error is shown", async () => {
+    const resp = await fetch(address);
+    assertEquals(resp.status, Status.InternalServerError);
+    const text = await resp.text();
+    assertStringIncludes(text, "Objects are not valid as a child");
+  });
+
+  const browser = await puppeteer.launch({ args: ["--no-sandbox"] });
+  const page = await browser.newPage();
+
+  await page.goto(address, {
+    waitUntil: "networkidle2",
+  });
+
+  await t.step("error page is shown with error message", async () => {
+    const el = await page.waitForSelector(".frsh-error-page");
+    const text = await page.evaluate((el) => el.textContent, el);
+    assertStringIncludes(text, "Objects are not valid as a child");
+  });
+
+  await browser.close();
+
+  await lines.cancel();
+  serverProcess.kill("SIGTERM");
+});
+
+Deno.test("preloading javascript files", {
+  sanitizeOps: false,
+  sanitizeResources: false,
+}, async () => {
+  // Preparation
+  const { serverProcess, lines, address } = await startFreshServer({
+    args: ["run", "-A", "./tests/fixture/main.ts"],
+  });
+
+  const browser = await puppeteer.launch({ args: ["--no-sandbox"] });
+  const page = await browser.newPage();
+
+  try {
+    // request js file to start esbuild execution
+    await page.goto(address, {
+      waitUntil: "networkidle2",
+    });
+
+    await delay(5000); // wait running esbuild
+
+    await page.goto(address, {
+      waitUntil: "networkidle2",
+    });
+
+    const preloads: string[] = await page.$$eval(
+      'link[rel="modulepreload"]',
+      (elements) => elements.map((element) => element.getAttribute("href")),
+    );
+
+    assert(
+      preloads.some((url) => url.match(/\/_frsh\/js\/.*\/main\.js/)),
+      "preloads does not include main.js",
+    );
+    assert(
+      preloads.some((url) => url.match(/\/_frsh\/js\/.*\/island-.*\.js/)),
+      "preloads does not include island-*.js",
+    );
+    assert(
+      preloads.some((url) => url.match(/\/_frsh\/js\/.*\/chunk-.*\.js/)),
+      "preloads does not include chunk-*.js",
+    );
+  } finally {
+    await browser.close();
+
+    await lines.cancel();
+    serverProcess.kill("SIGTERM");
+  }
+});
+
+Deno.test("PORT environment variable", {
+  sanitizeOps: false,
+  sanitizeResources: false,
+}, async () => {
+  const PORT = "8765";
+  // Preparation
+  const { serverProcess, lines } = await startFreshServer({
+    args: ["run", "-A", "./tests/fixture/main.ts"],
+    env: { PORT },
+  });
+
+  await delay(100);
+
+  const resp = await fetch("http://localhost:" + PORT);
+  assert(resp);
+  assertEquals(resp.status, Status.OK);
+
+  await lines.cancel();
+  serverProcess.kill("SIGTERM");
+});
diff --git a/tests/plugin_test.ts b/tests/plugin_test.ts
index 0f1f067e162..320ff3077d9 100644
--- a/tests/plugin_test.ts
+++ b/tests/plugin_test.ts
@@ -5,10 +5,10 @@ import {
   assertStringIncludes,
   delay,
   puppeteer,
-  TextLineStream,
 } from "./deps.ts";
 import manifest from "./fixture_plugin/fresh.gen.ts";
 import options from "./fixture_plugin/options.ts";
+import { startFreshServer } from "./test_utils.ts";
 
 const ctx = await ServerContext.fromManifest(manifest, options);
 const handler = ctx.handler();
@@ -33,8 +33,12 @@ Deno.test("/static page prerender", async () => {
   assertEquals(resp.status, Status.OK);
   const body = await resp.text();
   assertStringIncludes(body, '<style id="abc">body { color: red; }</style>');
-  assert(!body.includes(`>[[],[]]</script>`));
+  assert(!body.includes(`>{"v":[[],[]]}</script>`));
   assert(!body.includes(`import`));
+  assertStringIncludes(
+    body,
+    '<style id="def">h1 { text-decoration: underline; }</style>',
+  );
 });
 
 Deno.test("/with-island prerender", async () => {
@@ -46,42 +50,28 @@ Deno.test("/with-island prerender", async () => {
     body,
     '<style id="abc">body { color: red; } h1 { color: blue; }</style>',
   );
-  assertStringIncludes(body, `>[[{}],["JS injected!"]]</script>`);
+  assertStringIncludes(body, `>{"v":[[{}],["JS injected!"]]}</script>`);
   assertStringIncludes(body, `/plugin-js-inject-main.js"`);
+  assertStringIncludes(
+    body,
+    '<style id="def">h1 { text-decoration: underline; } h1 { font-style: italic; }</style>',
+  );
 });
 
 Deno.test({
   name: "/with-island hydration",
   async fn(t) {
     // Preparation
-    const serverProcess = new Deno.Command(Deno.execPath(), {
+    const { lines, serverProcess, address } = await startFreshServer({
       args: ["run", "-A", "./tests/fixture_plugin/main.ts"],
-      stdout: "piped",
-      stderr: "inherit",
-    }).spawn();
-
-    const decoder = new TextDecoderStream();
-    const lines = serverProcess.stdout
-      .pipeThrough(decoder)
-      .pipeThrough(new TextLineStream());
-
-    let started = false;
-    for await (const line of lines) {
-      if (line.includes("Listening on http://")) {
-        started = true;
-        break;
-      }
-    }
-    if (!started) {
-      throw new Error("Server didn't start up");
-    }
+    });
 
     await delay(100);
 
     const browser = await puppeteer.launch({ args: ["--no-sandbox"] });
     const page = await browser.newPage();
 
-    await page.goto("http://localhost:8000/with-island", {
+    await page.goto(`${address}/with-island`, {
       waitUntil: "networkidle2",
     });
 
diff --git a/tests/test_utils.ts b/tests/test_utils.ts
new file mode 100644
index 00000000000..53ebac13d57
--- /dev/null
+++ b/tests/test_utils.ts
@@ -0,0 +1,31 @@
+import { TextLineStream } from "./deps.ts";
+
+export async function startFreshServer(options: Deno.CommandOptions) {
+  const serverProcess = new Deno.Command(Deno.execPath(), {
+    ...options,
+    stdin: "null",
+    stdout: "piped",
+    stderr: "inherit",
+  }).spawn();
+
+  const decoder = new TextDecoderStream();
+  const lines: ReadableStream<string> = serverProcess.stdout
+    .pipeThrough(decoder)
+    .pipeThrough(new TextLineStream(), {
+      preventCancel: true,
+    });
+
+  let address = "";
+  for await (const line of lines) {
+    const match = line.match(/https?:\/\/localhost:\d+/g);
+    if (match) {
+      address = match[0];
+      break;
+    }
+  }
+  if (!address) {
+    throw new Error("Server didn't start up");
+  }
+
+  return { serverProcess, lines, address };
+}
diff --git a/tests/trailing_slash_test.ts b/tests/trailing_slash_test.ts
new file mode 100644
index 00000000000..63fa5231da9
--- /dev/null
+++ b/tests/trailing_slash_test.ts
@@ -0,0 +1,32 @@
+import { ServerContext, Status } from "../server.ts";
+import { assert, assertEquals } from "./deps.ts";
+import manifest from "./fixture_router/fresh.gen.ts";
+
+const ctx = await ServerContext.fromManifest(manifest, {
+  router: {
+    trailingSlash: true,
+  },
+});
+const router = (req: Request) => {
+  return ctx.handler()(req, {
+    localAddr: {
+      transport: "tcp",
+      hostname: "127.0.0.1",
+      port: 80,
+    },
+    remoteAddr: {
+      transport: "tcp",
+      hostname: "127.0.0.1",
+      port: 80,
+    },
+  });
+};
+
+Deno.test("forwards slash placed at the end of url", async () => {
+  const targetUrl = "https://fresh.deno.dev/about";
+  const resp = await router(new Request(targetUrl));
+  assert(resp);
+  assertEquals(resp.status, Status.PermanentRedirect);
+  // forwarded location should be with trailing slash
+  assertEquals(resp.headers.get("location"), targetUrl + "/");
+});
diff --git a/tests/twind_test.ts b/tests/twind_test.ts
index 62ee355a326..2507c3d7a25 100644
--- a/tests/twind_test.ts
+++ b/tests/twind_test.ts
@@ -1,6 +1,7 @@
-import { assert, delay, puppeteer, TextLineStream } from "./deps.ts";
+import { assert, delay, puppeteer } from "./deps.ts";
 
 import { cmpStringArray } from "./fixture_twind_hydrate/utils/utils.ts";
+import { startFreshServer } from "./test_utils.ts";
 
 /**
  * Start the server with the main file.
@@ -8,34 +9,10 @@ import { cmpStringArray } from "./fixture_twind_hydrate/utils/utils.ts";
  * Returns a page instance and a method to terminate the server.
  */
 async function setUpServer(path: string) {
-  const serverProcessCmd = new Deno.Command("deno", {
-    args: [
-      "run",
-      "-A",
-      path,
-    ],
-    stdout: "piped",
-    stderr: "inherit",
+  const { lines, serverProcess, address } = await startFreshServer({
+    args: ["run", "-A", path],
   });
 
-  const serverProcess = serverProcessCmd.spawn();
-
-  const lines = serverProcess.stdout
-    .pipeThrough(new TextDecoderStream())
-    .pipeThrough(new TextLineStream());
-
-  let started = false;
-
-  for await (const line of lines) {
-    if (line.includes("Listening on http://")) {
-      started = true;
-      break;
-    }
-  }
-  if (!started) {
-    throw new Error("Server didn't start up");
-  }
-
   await delay(100);
 
   const browser = await puppeteer.launch({ args: ["--no-sandbox"] });
@@ -45,6 +22,7 @@ async function setUpServer(path: string) {
    * terminate server
    */
   const terminate = async () => {
+    await lines.cancel();
     await browser.close();
 
     serverProcess.kill("SIGKILL");
@@ -62,7 +40,7 @@ async function setUpServer(path: string) {
     }
   };
 
-  return { page: page, terminate: terminate };
+  return { page: page, terminate: terminate, address };
 }
 
 /**
@@ -118,7 +96,7 @@ Deno.test({
       }
     }
 
-    await page.goto("http://localhost:8000/static", {
+    await page.goto(`${server.address}/static`, {
       waitUntil: "networkidle2",
     });
 
@@ -189,7 +167,7 @@ Deno.test({
       assert(false, `${numDuplicates} cssrules are duplicated`);
     }
 
-    await page.goto("http://localhost:8000/check-duplication", {
+    await page.goto(`${server.address}/check-duplication`, {
       waitUntil: "networkidle2",
     });
 
@@ -297,7 +275,7 @@ Deno.test({
       );
     }
 
-    await page.goto("http://localhost:8000/insert-cssrules", {
+    await page.goto(`${server.address}/insert-cssrules`, {
       waitUntil: "networkidle2",
     });
 
diff --git a/update.ts b/update.ts
index 52df9800f64..658b7a99375 100644
--- a/update.ts
+++ b/update.ts
@@ -26,25 +26,34 @@ if (flags._.length !== 1) {
 const unresolvedDirectory = Deno.args[0];
 const resolvedDirectory = resolve(unresolvedDirectory);
 
-// Update dependencies in the import map.
-const IMPORT_MAP_PATH = join(resolvedDirectory, "import_map.json");
-let importMapText = await Deno.readTextFile(IMPORT_MAP_PATH);
-const importMap = JSON.parse(importMapText);
-freshImports(importMap.imports);
-if (importMap.imports["twind"]) {
-  twindImports(importMap.imports);
+// Update dependencies in the import map. The import map can either be embedded
+// in a deno.json file or be in a separate JSON file referenced with the
+// `importMap` key in deno.json.
+const DENO_JSON_PATH = join(resolvedDirectory, "deno.json");
+let denoJsonText = await Deno.readTextFile(DENO_JSON_PATH);
+let denoJson = JSON.parse(denoJsonText);
+if (denoJson.importMap) {
+  const IMPORT_MAP_PATH = join(resolvedDirectory, denoJson.importMap);
+  const importMapText = await Deno.readTextFile(IMPORT_MAP_PATH);
+  const importMap = JSON.parse(importMapText);
+  denoJson.imports = importMap.imports;
+  denoJson.scopes = importMap.scopes;
+  delete denoJson.importMap;
+  await Deno.remove(IMPORT_MAP_PATH);
+}
+
+freshImports(denoJson.imports);
+if (denoJson.imports["twind"]) {
+  twindImports(denoJson.imports);
 }
-importMapText = JSON.stringify(importMap, null, 2);
-await Deno.writeTextFile(IMPORT_MAP_PATH, importMapText);
+denoJsonText = JSON.stringify(denoJson, null, 2);
+await Deno.writeTextFile(DENO_JSON_PATH, denoJsonText);
 
 // Code mod for classic JSX -> automatic JSX.
 const JSX_CODEMOD =
   `This project is using the classic JSX transform. Would you like to update to the
 automatic JSX transform? This will remove the /** @jsx h */ pragma from your
 source code and add the jsx: "react-jsx" compiler option to your deno.json file.`;
-const DENO_JSON_PATH = join(resolvedDirectory, "deno.json");
-let denoJsonText = await Deno.readTextFile(DENO_JSON_PATH);
-const denoJson = JSON.parse(denoJsonText);
 if (denoJson.compilerOptions?.jsx !== "react-jsx" && confirm(JSX_CODEMOD)) {
   console.log("Updating config file...");
   denoJson.compilerOptions = denoJson.compilerOptions || {};
@@ -88,12 +97,12 @@ const TWIND_CODEMOD =
   `This project is using an old version of the twind integration. Would you like to
 update to the new twind plugin? This will remove the 'class={tw\`border\`}'
 boilerplate from your source code replace it with the simpler 'class="border"'.`;
-if (importMap.imports["@twind"] && confirm(TWIND_CODEMOD)) {
-  await Deno.remove(join(resolvedDirectory, importMap.imports["@twind"]));
+if (denoJson.imports["@twind"] && confirm(TWIND_CODEMOD)) {
+  await Deno.remove(join(resolvedDirectory, denoJson.imports["@twind"]));
 
-  delete importMap.imports["@twind"];
-  importMapText = JSON.stringify(importMap, null, 2);
-  await Deno.writeTextFile(IMPORT_MAP_PATH, importMapText);
+  delete denoJson.imports["@twind"];
+  denoJson = JSON.stringify(denoJson, null, 2);
+  await Deno.writeTextFile(DENO_JSON_PATH, denoJson);
 
   const MAIN_TS = `/// <reference no-default-lib="true" />
 /// <reference lib="dom" />
diff --git a/versions.json b/versions.json
index 2499476a1e8..4bb3310a685 100644
--- a/versions.json
+++ b/versions.json
@@ -1,4 +1,6 @@
 [
+  "1.2.0",
+  "1.1.6",
   "1.1.5",
   "1.1.4",
   "1.1.3",
diff --git a/www/components/DocsSidebar.tsx b/www/components/DocsSidebar.tsx
index 8bff7e54bf6..bd86dd17158 100644
--- a/www/components/DocsSidebar.tsx
+++ b/www/components/DocsSidebar.tsx
@@ -15,9 +15,15 @@ export default function DocsSidebar(props: { path: string; mobile?: boolean }) {
           <button
             type="button"
             class="bg-gray-200 font-bold text-gray-400 rounded-full py-1 px-2 w-full mb-2"
-            // @ts-ignore: Inline event handler
-            onClick={`document.querySelector(".DocSearch.DocSearch-Button").click()`}
           >
+            <script
+              dangerouslySetInnerHTML={{
+                __html:
+                  `document.currentScript.parentNode.onclick = function () {
+                    document.querySelector(".DocSearch.DocSearch-Button").click()
+                  }`,
+              }}
+            />
             <span class="DocSearch-Button-Container">
               <svg
                 width="20"
diff --git a/www/components/DocsTitle.tsx b/www/components/DocsTitle.tsx
index 5a08c6b1538..aad07ee36b1 100644
--- a/www/components/DocsTitle.tsx
+++ b/www/components/DocsTitle.tsx
@@ -4,6 +4,7 @@ export default function DocsTitle(props: { title: string }) {
       <a
         href="/"
         class="text(2xl gray-900) flex items-center"
+        aria-label="Top Page"
       >
         <svg
           preserveAspectRatio="xMinYMin"
diff --git a/www/components/Header.tsx b/www/components/Header.tsx
index 08fe92fe60e..eac272850cf 100644
--- a/www/components/Header.tsx
+++ b/www/components/Header.tsx
@@ -25,7 +25,7 @@ export default function Header(props: { title: string; active: string }) {
 
 function Logo() {
   return (
-    <a href="/" class="flex mr-3 items-center">
+    <a href="/" class="flex mr-3 items-center" aria-label="Top Page">
       <img
         src="/logo.svg"
         alt="Fresh logo"
diff --git a/www/components/Icons.tsx b/www/components/Icons.tsx
index 12a555744b0..6b612b345a9 100644
--- a/www/components/Icons.tsx
+++ b/www/components/Icons.tsx
@@ -127,6 +127,23 @@ export function GitHub(props: { class?: string }) {
   );
 }
 
+export function Discord(props: { class?: string }) {
+  return (
+    <svg
+      class={`h-6 w-6 ${props.class ?? ""}`}
+      fill="currentColor"
+      viewBox="0 0 24 24"
+    >
+      <path
+        fill="currentColor"
+        fillRule="evenodd"
+        clipRule="evenodd"
+        d="M20.16 4.50747C18.5996 3.79309 16.9523 3.28628 15.2603 3C15.0287 3.41393 14.8192 3.8398 14.6326 4.27584C12.8302 4.00424 10.9973 4.00424 9.19488 4.27584C9.00819 3.83984 8.79868 3.41398 8.56723 3C6.87405 3.2887 5.22569 3.79671 3.66374 4.51121C0.56287 9.099 -0.277728 13.5729 0.142571 17.9832C1.95852 19.3249 3.99108 20.3453 6.15191 21C6.63846 20.3456 7.069 19.6514 7.43896 18.9247C6.73628 18.6622 6.05807 18.3384 5.41219 17.957C5.58217 17.8337 5.74842 17.7067 5.90907 17.5834C7.78846 18.4673 9.83971 18.9255 11.9165 18.9255C13.9934 18.9255 16.0446 18.4673 17.924 17.5834C18.0865 17.7161 18.2528 17.8431 18.4209 17.957C17.7738 18.339 17.0943 18.6635 16.3904 18.9265C16.7599 19.6529 17.1905 20.3466 17.6774 21C19.8401 20.3479 21.8742 19.328 23.6905 17.9851C24.1837 12.8705 22.848 8.43773 20.16 4.50747ZM7.97134 15.2709C6.80011 15.2709 5.83248 14.208 5.83248 12.9004C5.83248 11.5928 6.76648 10.5205 7.9676 10.5205C9.16872 10.5205 10.1289 11.5928 10.1083 12.9004C10.0878 14.208 9.16499 15.2709 7.97134 15.2709ZM15.8617 15.2709C14.6886 15.2709 13.7248 14.208 13.7248 12.9004C13.7248 11.5928 14.6588 10.5205 15.8617 10.5205C17.0647 10.5205 18.0174 11.5928 17.9969 12.9004C17.9763 14.208 17.0554 15.2709 15.8617 15.2709Z"
+      />
+    </svg>
+  );
+}
+
 export function ArrowRight() {
   return (
     <svg
diff --git a/www/components/NavigationBar.tsx b/www/components/NavigationBar.tsx
index 1a0d186746a..20265728f3e 100644
--- a/www/components/NavigationBar.tsx
+++ b/www/components/NavigationBar.tsx
@@ -17,8 +17,8 @@ export default function NavigationBar(
       href: "/components",
     },
     {
-      name: "Discord",
-      href: "https://discord.com/invite/deno",
+      name: "Blog",
+      href: "https://deno.com/blog?tag=fresh",
     },
   ];
   const isHome = props.active == "/";
@@ -44,10 +44,20 @@ export default function NavigationBar(
           <a
             href="https://github.com/denoland/fresh"
             class="hover:text-green-600 inline-block"
+            aria-label="GitHub"
           >
             <Icons.GitHub />
           </a>
         </li>
+        <li class="flex items-center">
+          <a
+            href="https://discord.com/invite/deno"
+            class="hover:text-green-600 inline-block"
+            aria-label="Discord"
+          >
+            <Icons.Discord />
+          </a>
+        </li>
       </ul>
     </nav>
   );
diff --git a/www/components/gallery/Carousel.tsx b/www/components/gallery/Carousel.tsx
index 008250d15b1..ac5715a4fd7 100644
--- a/www/components/gallery/Carousel.tsx
+++ b/www/components/gallery/Carousel.tsx
@@ -48,7 +48,7 @@ const Slide = (props: SlideProps) => {
       class={`${props.class} ${color} h-80 w-full text-center text-black p-5`}
     >
       {text}
-      <img src={url} />
+      <img src={url} alt={text} />
     </div>
   );
 };
diff --git a/www/components/gallery/CodeBox.tsx b/www/components/gallery/CodeBox.tsx
index 87677c52510..5f66aceb10d 100644
--- a/www/components/gallery/CodeBox.tsx
+++ b/www/components/gallery/CodeBox.tsx
@@ -1,4 +1,4 @@
-import { useState } from "preact/hooks";
+import { useSignal } from "@preact/signals";
 
 import Prism from "https://esm.sh/prismjs@1.27.0";
 import "https://esm.sh/prismjs@1.27.0/components/prism-typescript?no-check";
@@ -15,10 +15,10 @@ export default function CodeBox(props: CodeBoxProps) {
   );
   const onCopy = () => {
     navigator.clipboard.writeText(props.code);
-    setCopied(true);
+    copied.value = true;
   };
 
-  const [copied, setCopied] = useState(false);
+  const copied = useSignal(false);
   return (
     <div class="">
       <details>
@@ -35,7 +35,7 @@ export default function CodeBox(props: CodeBoxProps) {
             onClick={onCopy}
             class="absolute top-2 right-2 px-3 py-2 border border-gray-400 rounded text-white bg-gray-800"
           >
-            {copied ? "Copied!" : "Copy"}
+            {copied.value ? "Copied!" : "Copy"}
           </button>
         </div>
       </details>
diff --git a/www/components/gallery/Footer.tsx b/www/components/gallery/Footer.tsx
index f019a35fc2b..196bf53645c 100644
--- a/www/components/gallery/Footer.tsx
+++ b/www/components/gallery/Footer.tsx
@@ -67,6 +67,7 @@ export default function Footer({ children }: Props) {
         <a
           href="https://github.com/denoland/fresh"
           class="inline-block hover:text-black"
+          aria-label="GitHub"
         >
           <BrandGithub />
         </a>
diff --git a/www/data/showcase.json b/www/data/showcase.json
index aa5896ce71a..e93c478c730 100644
--- a/www/data/showcase.json
+++ b/www/data/showcase.json
@@ -1,4 +1,10 @@
 [
+  {
+    "title": "OpenAI Semantic Search",
+    "link": "https://supabase-openai-doc-search.deno.dev/",
+    "github": "supabase-community/deno-fresh-openai-doc-search",
+    "image": "openai-semantic-search"
+  },
   {
     "title": "Deno SaaSKit",
     "link": "https://saaskit.deno.dev/",
diff --git a/www/deno.json b/www/deno.json
index b691b285acd..bee87de37cc 100644
--- a/www/deno.json
+++ b/www/deno.json
@@ -3,7 +3,18 @@
   "tasks": {
     "start": "deno run -A --watch=static/,routes/ dev.ts"
   },
-  "importMap": "./import_map.json",
+  "imports": {
+    "$fresh/": "../",
+    "twind": "https://esm.sh/twind@0.16.19",
+    "twind/": "https://esm.sh/twind@0.16.19/",
+    "preact": "https://esm.sh/preact@10.15.1",
+    "preact/": "https://esm.sh/preact@10.15.1/",
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.1.0",
+    "@preact/signals": "https://esm.sh/*@preact/signals@1.1.3",
+    "@preact/signals-core": "https://esm.sh/@preact/signals-core@1.2.3",
+    "$std/": "https://deno.land/std@0.190.0/",
+    "$ga4": "https://raw.githubusercontent.com/denoland/ga4/main/mod.ts"
+  },
   "compilerOptions": {
     "jsx": "react-jsx",
     "jsxImportSource": "preact"
diff --git a/www/fresh.gen.ts b/www/fresh.gen.ts
index bb028f8c28c..95c92ee202a 100644
--- a/www/fresh.gen.ts
+++ b/www/fresh.gen.ts
@@ -2,7 +2,6 @@
 // This file SHOULD be checked into source version control.
 // This file is automatically updated during development when running `dev.ts`.
 
-import config from "./deno.json" assert { type: "json" };
 import * as $0 from "./routes/_404.tsx";
 import * as $1 from "./routes/_500.tsx";
 import * as $2 from "./routes/_middleware.ts";
@@ -40,7 +39,6 @@ const manifest = {
     "./islands/SearchButton.tsx": $$4,
   },
   baseUrl: import.meta.url,
-  config,
 };
 
 export default manifest;
diff --git a/www/import_map.json b/www/import_map.json
deleted file mode 100644
index 8a2dcbabb01..00000000000
--- a/www/import_map.json
+++ /dev/null
@@ -1,14 +0,0 @@
-{
-  "imports": {
-    "$fresh/": "../",
-    "twind": "https://esm.sh/twind@0.16.19",
-    "twind/": "https://esm.sh/twind@0.16.19/",
-    "preact": "https://esm.sh/preact@10.13.1",
-    "preact/": "https://esm.sh/preact@10.13.1/",
-    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@5.2.6",
-    "@preact/signals": "https://esm.sh/*@preact/signals@1.1.3",
-    "@preact/signals-core": "https://esm.sh/@preact/signals-core@1.2.3",
-    "$std/": "https://deno.land/std@0.178.0/",
-    "$ga4": "https://raw.githubusercontent.com/denoland/ga4/main/mod.ts"
-  }
-}
diff --git a/www/islands/CopyArea.tsx b/www/islands/CopyArea.tsx
index f812d323214..073eef3aac1 100644
--- a/www/islands/CopyArea.tsx
+++ b/www/islands/CopyArea.tsx
@@ -1,10 +1,11 @@
 import { ComponentChildren } from "preact";
-import { useEffect, useState } from "preact/hooks";
+import { useEffect } from "preact/hooks";
 import { IS_BROWSER } from "$fresh/runtime.ts";
 import * as Icons from "../components/Icons.tsx";
+import { useSignal } from "@preact/signals";
 
 export default function CopyArea(props: { children: ComponentChildren }) {
-  const [copied, setCopied] = useState(false);
+  const copied = useSignal(false);
 
   async function handleClick() {
     if (props.children === undefined || props.children === null) {
@@ -12,22 +13,22 @@ export default function CopyArea(props: { children: ComponentChildren }) {
     }
     try {
       await navigator.clipboard.writeText(props.children.toString());
-      setCopied(true);
+      copied.value = true;
     } catch (error) {
-      setCopied(false);
+      copied.value = false;
       console.error((error && error.message) || "Copy failed");
     }
   }
 
   useEffect(() => {
-    if (!copied) {
+    if (!copied.value) {
       return;
     }
     const timer = setTimeout(() => {
-      setCopied(false);
+      copied.value = false;
     }, 2000);
     return () => clearTimeout(timer);
-  }, [copied]);
+  }, [copied.value]);
 
   return (
     <div class="bg(gray-800) rounded text-white flex items-center">
@@ -38,7 +39,7 @@ export default function CopyArea(props: { children: ComponentChildren }) {
       <div class="relative my-2 mr-4">
         <div
           class={`transition ease-in-out absolute pointer-events-none bg-gray-900 text-white absolute p-2 -top-1/3 left-1/2 transform -translate-x-1/2 -translate-y-full box-border rounded opacity-0 ${
-            copied && "opacity-100"
+            copied.value && "opacity-100"
           }`}
         >
           Copied!
@@ -47,11 +48,11 @@ export default function CopyArea(props: { children: ComponentChildren }) {
           aria-label="Copy to Clipboard"
           disabled={!IS_BROWSER}
           class={`rounded p-1.5 border border-gray-300 hover:bg-gray-700 ${
-            copied ? "text-green-500" : ""
+            copied.value ? "text-green-500" : ""
           } relative`}
           onClick={handleClick}
         >
-          {copied ? <Icons.Check /> : <Icons.Copy />}
+          {copied.value ? <Icons.Check /> : <Icons.Copy />}
         </button>
       </div>
     </div>
diff --git a/www/islands/Counter.tsx b/www/islands/Counter.tsx
index 449bb046bc3..55cea51e4b3 100644
--- a/www/islands/Counter.tsx
+++ b/www/islands/Counter.tsx
@@ -1,4 +1,4 @@
-import { useState } from "preact/hooks";
+import { useSignal } from "@preact/signals";
 import { IS_BROWSER } from "$fresh/runtime.ts";
 import { RoundedButton } from "../components/Button.tsx";
 import { IconMinus, IconPlus } from "../components/Icons.tsx";
@@ -8,20 +8,20 @@ interface CounterProps {
 }
 
 export default function Counter(props: CounterProps) {
-  const [count, setCount] = useState(props.start);
+  const count = useSignal(props.start);
   return (
     <div class="bg-gray-100 p-4 border border-gray-200 flex items-center justify-around">
       <RoundedButton
         title="Subtract 1"
-        onClick={() => setCount(count - 1)}
-        disabled={!IS_BROWSER || count <= 0}
+        onClick={() => count.value -= 1}
+        disabled={!IS_BROWSER || count.value <= 0}
       >
         <IconMinus />
       </RoundedButton>
       <div class="text-3xl tabular-nums">{count}</div>
       <RoundedButton
         title="Add 1"
-        onClick={() => setCount(count + 1)}
+        onClick={() => count.value += 1}
         disabled={!IS_BROWSER}
       >
         <IconPlus />
diff --git a/www/islands/LemonDrop.tsx b/www/islands/LemonDrop.tsx
index 331612834af..1aae7c0dea1 100644
--- a/www/islands/LemonDrop.tsx
+++ b/www/islands/LemonDrop.tsx
@@ -1,5 +1,6 @@
-import { useEffect, useRef, useState } from "preact/hooks";
-import { Spring, WaveTank } from "../components/WaveTank.ts";
+import { useEffect, useRef } from "preact/hooks";
+import { useSignal } from "@preact/signals";
+import { WaveTank } from "../components/WaveTank.ts";
 
 function easeInCirc(x: number) {
   return 1 - Math.sqrt(1 - Math.pow(x, 2));
@@ -9,44 +10,44 @@ const waveTank = new WaveTank();
 
 function LemonDrop() {
   const SVG_WIDTH = 100;
-  const [counter, setCounter] = useState(0);
-  const [dropy, setDropy] = useState(60);
-  const [width, setWidth] = useState(SVG_WIDTH);
-  const widthRef = useRef(width);
-  const [springs, setSprings] = useState<Spring[]>(waveTank.springs);
+  const counter = useSignal(0);
+  const dropy = useSignal(60);
+  const width = useSignal(SVG_WIDTH);
+  const widthRef = useRef(width.value);
+  const springs = useSignal(waveTank.springs);
   const requestIdRef = useRef<number>();
   const grid = SVG_WIDTH / waveTank.waveLength;
   const points = [
     [0, 100],
     [0, 0],
-    ...springs.map((x, i) => [i * grid, x.p]),
-    [width, 0],
-    [width, 100],
+    ...springs.value.map((x, i) => [i * grid, x.p]),
+    [width.value, 0],
+    [width.value, 100],
   ];
   const springsPath = `${points.map((x) => x.join(",")).join(" ")}`;
-  const juice = `M18 ${63 + counter} C15 ${63 + counter} 16 ${
-    63 + counter
+  const juice = `M18 ${63 + counter.value} C15 ${63 + counter.value} 16 ${
+    63 + counter.value
   } 12 61L9 56C2 33 62 -3 80 12C103 27 44 56 29 58C27 58 25 59 24 61C20 ${
-    63 + counter
-  } 21 ${63 + counter} 18 ${63 + counter}Z`;
+    63 + counter.value
+  } 21 ${63 + counter.value} 18 ${63 + counter.value}Z`;
 
   function updateJuice(timestamp: number) {
     const amp = 40;
     const x = timestamp / 2000;
     const saw = x - Math.floor(x);
     if (saw < 0.6) {
-      setCounter(easeInCirc(saw) * amp);
-      setDropy(-100);
+      counter.value = easeInCirc(saw) * amp;
+      dropy.value = -100;
     } else {
-      setCounter(easeInCirc(1 - saw) * amp * 0.1);
-      setDropy(70 + Math.pow(saw - 0.6, 2) * 10000);
+      counter.value = easeInCirc(1 - saw) * amp * 0.1;
+      dropy.value = 70 + Math.pow(saw - 0.6, 2) * 10000;
     }
   }
 
   function update(timestamp: number) {
     updateJuice(timestamp);
     waveTank.update(waveTank.springs);
-    setSprings([...waveTank.springs]);
+    springs.value = [...waveTank.springs];
 
     const offset = 500;
     const saw = (timestamp + offset) / 2000 -
@@ -58,7 +59,7 @@ function LemonDrop() {
   }
 
   function resize() {
-    setWidth(document.body.clientWidth);
+    width.value = document.body.clientWidth;
   }
 
   function drop() {
@@ -69,8 +70,8 @@ function LemonDrop() {
   }
 
   useEffect(() => {
-    widthRef.current = width;
-  }, [width]);
+    widthRef.current = width.value;
+  }, [width.value]);
 
   useEffect(() => {
     const mediaQuery = window.matchMedia("(prefers-reduced-motion: reduce)");
@@ -102,7 +103,7 @@ function LemonDrop() {
         role="img"
         aria-label="Fresh logo"
       >
-        <circle cx="18" cy={dropy} r="4" fill="white"></circle>
+        <circle cx="18" cy={dropy.value} r="4" fill="white"></circle>
         <path
           d="M11.9 96.3v24H7v-24h4.9Zm7.5 10.2v4h-8.8v-4h8.8Zm1-10.2v4h-9.8v-4h9.8ZM23.2 96.3H31c1.6 0 3 .3 4.1.9 1.1.5 2 1.3 2.6 2.4a8 8 0 0 1 1 4c0 1.3-.2 2.4-.6 3.3-.3 1-.8 1.7-1.5 2.3-.7.6-1.4 1-2.3 1.5l-1.5.8h-6.3v-4h4.3a3 3 0 0 0 1.7-.4c.4-.3.7-.7 1-1.2a5 5 0 0 0 .3-2c0-.7-.1-1.3-.3-1.9-.2-.5-.5-1-1-1.2-.3-.3-.9-.5-1.5-.5h-3v20h-4.8v-24Zm11 24-4.4-10.7h5l4.6 10.5v.2h-5.2ZM55.9 116.3v4H45.4v-4h10.5Zm-9-20v24H42v-24H47Zm7.6 9.8v3.8h-9.1v-3.8h9Zm1.4-9.8v4H45.4v-4h10.5ZM69 114c0-.4 0-.8-.2-1.1 0-.4-.2-.7-.5-1l-1-1-1.9-.8-2.6-1.2-2.2-1.5a6.5 6.5 0 0 1-1.7-2 6 6 0 0 1-.5-2.7c0-1 .1-2 .5-2.7a6 6 0 0 1 1.6-2.2c.7-.5 1.5-1 2.4-1.3a9.5 9.5 0 0 1 7.1.5c1.2.6 2 1.5 2.7 2.6.6 1 1 2.4 1 3.8h-5a5 5 0 0 0-.2-1.8c-.2-.5-.5-1-1-1.2-.4-.3-1-.5-1.6-.5-.6 0-1.1.2-1.5.4-.4.2-.7.6-1 1l-.2 1.4c0 .4.1.8.3 1.1l.8.8a21.3 21.3 0 0 0 2.8 1.4l2.9 1.4a9 9 0 0 1 2 1.8c.7.6 1 1.3 1.4 2a7.9 7.9 0 0 1-.1 5.5c-.4.8-.9 1.5-1.5 2.1a7 7 0 0 1-2.5 1.4c-2 .5-1 1.8-3 1.8s-1.3-1.5-3.2-1.8c-1-.3-2-.8-2.7-1.4a6.7 6.7 0 0 1-1.8-2.5c-.4-1-.6-2.2-.6-3.5h4.9c0 .7 0 1.3.2 1.8.1.5.3 1 .6 1.3.3.2.7.5 1.1.6.5.2 1 .2 1.5.2.7 0 1.2 0 1.6-.3.4-.3.6-.6.8-1 .2-.4.3-.9.3-1.4ZM90.5 106v4h-10v-4h10Zm-8.6-9.7v24h-4.8v-24h4.8Zm12.1 0v24h-4.8v-24H94Z"
           fill="#0A140C"
diff --git a/www/main_test.ts b/www/main_test.ts
index d2803d57e5e..383d7c97617 100644
--- a/www/main_test.ts
+++ b/www/main_test.ts
@@ -1,34 +1,15 @@
 import { assertEquals } from "$std/testing/asserts.ts";
-import { TextLineStream } from "$std/streams/text_line_stream.ts";
 import { delay } from "$std/async/delay.ts";
+import { startFreshServer } from "../tests/test_utils.ts";
 
 Deno.test("CORS should not set on GET /fresh-badge.svg", {
   sanitizeResources: false,
 }, async () => {
-  const serverProcess = new Deno.Command(Deno.execPath(), {
+  const { serverProcess, lines, address } = await startFreshServer({
     args: ["run", "-A", "./main.ts"],
-    stdin: "null",
-    stdout: "piped",
-    stderr: "inherit",
-  }).spawn();
+  });
 
-  const decoder = new TextDecoderStream();
-  const lines = serverProcess.stdout
-    .pipeThrough(decoder)
-    .pipeThrough(new TextLineStream());
-
-  let started = false;
-  for await (const line of lines) {
-    if (line.includes("Listening on http://")) {
-      started = true;
-      break;
-    }
-  }
-  if (!started) {
-    throw new Error("Server didn't start up");
-  }
-
-  const res = await fetch("http://localhost:8000/fresh-badge.svg");
+  const res = await fetch(`${address}/fresh-badge.svg`);
   await res.body?.cancel();
 
   assertEquals(res.headers.get("cross-origin-resource-policy"), null);
diff --git a/www/routes/_middleware.ts b/www/routes/_middleware.ts
index c813f0538a8..e92285916ba 100644
--- a/www/routes/_middleware.ts
+++ b/www/routes/_middleware.ts
@@ -4,6 +4,8 @@ import { GA4Report, isDocument, isServerError } from "$ga4";
 
 const GA4_MEASUREMENT_ID = Deno.env.get("GA4_MEASUREMENT_ID");
 
+let showedMissingEnvWarning = false;
+
 function ga4(
   request: Request,
   conn: MiddlewareHandlerContext,
@@ -11,6 +13,15 @@ function ga4(
   _start: number,
   error?: unknown,
 ) {
+  if (GA4_MEASUREMENT_ID === undefined) {
+    if (!showedMissingEnvWarning) {
+      showedMissingEnvWarning = true;
+      console.warn(
+        "GA4_MEASUREMENT_ID environment variable not set. Google Analytics reporting disabled.",
+      );
+    }
+    return;
+  }
   Promise.resolve().then(async () => {
     // We're tracking page views and file downloads. These are the only two
     // HTTP methods that _might_ be used.
diff --git a/www/routes/components.tsx b/www/routes/components.tsx
index f2515dcf262..7aeda47ab80 100644
--- a/www/routes/components.tsx
+++ b/www/routes/components.tsx
@@ -2,7 +2,7 @@ import PageFooter from "../components/Footer.tsx";
 import Header from "../components/Header.tsx";
 import ComponentGallery from "../islands/ComponentGallery.tsx";
 
-import { Head } from "$fresh/runtime.ts";
+import { asset, Head } from "$fresh/runtime.ts";
 import { Handlers, PageProps } from "$fresh/server.ts";
 
 function getSource(path: string) {
@@ -30,19 +30,29 @@ export const handler: Handlers<HomeProps> = {
   },
 };
 
+const TITLE = "Components | fresh";
+const DESCRIPTION = "A collection of components made for Fresh.";
+
 interface HomeProps {
   sources: Record<string, string>;
 }
 
 export default function Home(props: PageProps<HomeProps>) {
+  const ogImageUrl = new URL(asset("/home-og.png"), props.url).href;
   return (
     <div class="bg-white h-full">
       <Head>
-        <title>Components | fresh</title>
+        <title>{TITLE}</title>
         <link
           rel="stylesheet"
           href="https://esm.sh/prismjs@1.27.0/themes/prism-dark.min.css"
         />
+        <meta name="description" content={DESCRIPTION} />
+        <meta property="og:title" content={TITLE} />
+        <meta property="og:description" content={DESCRIPTION} />
+        <meta property="og:type" content="website" />
+        <meta property="og:url" content={props.url.href} />
+        <meta property="og:image" content={ogImageUrl} />
       </Head>
       <Header title="components" active="/components" />
 
diff --git a/www/routes/docs/[...slug].tsx b/www/routes/docs/[...slug].tsx
index 7398bd62ffc..c612cc3dc2e 100644
--- a/www/routes/docs/[...slug].tsx
+++ b/www/routes/docs/[...slug].tsx
@@ -1,4 +1,4 @@
-import { Head } from "$fresh/runtime.ts";
+import { asset, Head } from "$fresh/runtime.ts";
 import { Handlers, PageProps } from "$fresh/server.ts";
 import { frontMatter, gfm } from "../../utils/markdown.ts";
 
@@ -51,7 +51,9 @@ export const handler: Handlers<Data> = {
 };
 
 export default function DocsPage(props: PageProps<Data>) {
-  let description;
+  const ogImageUrl = new URL(asset("/home-og.png"), props.url).href;
+  const title = `${props.data.page?.title ?? "Not Found"} | fresh docs`;
+  let description = "Fresh Document";
 
   if (props.data.page.data.description) {
     description = String(props.data.page.data.description);
@@ -60,9 +62,14 @@ export default function DocsPage(props: PageProps<Data>) {
   return (
     <>
       <Head>
-        <title>{props.data.page?.title ?? "Not Found"} | fresh docs</title>
-        <link rel="stylesheet" href={`/gfm.css?build=${__FRSH_BUILD_ID}`} />
-        {description && <meta name="description" content={description} />}
+        <title>{title}</title>
+        <link rel="stylesheet" href={asset("/gfm.css")} />
+        <meta name="description" content={description} />
+        <meta property="og:title" content={title} />
+        <meta property="og:description" content={description} />
+        <meta property="og:type" content="website" />
+        <meta property="og:url" content={props.url.href} />
+        <meta property="og:image" content={ogImageUrl} />
       </Head>
       <div class="flex flex-col min-h-screen">
         <Header title="docs" active="/docs" />
diff --git a/www/routes/index.tsx b/www/routes/index.tsx
index e53f592e875..c84683cd318 100644
--- a/www/routes/index.tsx
+++ b/www/routes/index.tsx
@@ -212,7 +212,7 @@ function GettingStarted(props: { origin: string }) {
       </p>
 
       <CopyArea>
-        {`deno run -A -r ${props.origin} my-project`}
+        {`deno run -A -r ${props.origin}`}
       </CopyArea>
 
       <p class="text-gray-600">
diff --git a/www/routes/showcase.tsx b/www/routes/showcase.tsx
index 57c390bec8f..27e54e31e27 100644
--- a/www/routes/showcase.tsx
+++ b/www/routes/showcase.tsx
@@ -1,14 +1,25 @@
-import { Head } from "$fresh/runtime.ts";
+import { asset, Head } from "$fresh/runtime.ts";
+import { PageProps } from "$fresh/server.ts";
 import Projects, { Project } from "../components/Projects.tsx";
 import Header from "../components/Header.tsx";
 import Footer from "../components/Footer.tsx";
 import projects from "../data/showcase.json" assert { type: "json" };
 
-export default function ShowcasePage() {
+const TITLE = "Showcase | fresh";
+const DESCRIPTION = "Selection of projects that have been built with Fresh.";
+
+export default function ShowcasePage(props: PageProps) {
+  const ogImageUrl = new URL(asset("/home-og.png"), props.url).href;
   return (
     <>
       <Head>
-        <title>Showcase | fresh</title>
+        <title>{TITLE}</title>
+        <meta name="description" content={DESCRIPTION} />
+        <meta property="og:title" content={TITLE} />
+        <meta property="og:description" content={DESCRIPTION} />
+        <meta property="og:type" content="website" />
+        <meta property="og:url" content={props.url.href} />
+        <meta property="og:image" content={ogImageUrl} />
       </Head>
       <Header title="showcase" active="/showcase" />
 
diff --git a/www/routes/update.tsx b/www/routes/update.tsx
index 26c15a5efe6..eb0900de53c 100644
--- a/www/routes/update.tsx
+++ b/www/routes/update.tsx
@@ -199,7 +199,7 @@ function GettingStarted(props: { origin: string }) {
       </p>
 
       <CopyArea>
-        {`deno run -A -r ${props.origin} my-project`}
+        {`deno run -A -r ${props.origin}`}
       </CopyArea>
 
       <p class="text-gray-600">
diff --git a/www/static/gallery/banner-chart.png b/www/static/gallery/banner-chart.png
index 6e92a1fff11..7712d48039d 100644
Binary files a/www/static/gallery/banner-chart.png and b/www/static/gallery/banner-chart.png differ
diff --git a/www/static/gallery/banner-tabler-icons.png b/www/static/gallery/banner-tabler-icons.png
index adfdcfa83dd..3737915bc91 100644
Binary files a/www/static/gallery/banner-tabler-icons.png and b/www/static/gallery/banner-tabler-icons.png differ
diff --git a/www/static/gallery/grid.svg b/www/static/gallery/grid.svg
index 1eb1c910b4a..ed1081464db 100644
--- a/www/static/gallery/grid.svg
+++ b/www/static/gallery/grid.svg
@@ -1,11 +1 @@
-<svg xmlns="http://www.w3.org/2000/svg" width="100%" height="100%">
-    <style type="text/css">
-        circle { fill: #bbb; }
-    </style>
-    <defs>
-        <pattern id="grid" patternUnits="userSpaceOnUse" width="20" height="20">
-            <circle cx="10" cy="10" r="1"></circle>
-        </pattern>
-    </defs>
-    <rect width="100%" height="100%" fill="url(#grid)" />
-</svg>
\ No newline at end of file
+<svg xmlns="http://www.w3.org/2000/svg" width="100%" height="100%"><style type="text/css">circle{fill:#bbb}</style><defs><pattern id="grid" width="20" height="20" patternUnits="userSpaceOnUse"><circle cx="10" cy="10" r="1"/></pattern></defs><rect width="100%" height="100%" fill="url(#grid)"/></svg>
\ No newline at end of file
diff --git a/www/static/home-og.png b/www/static/home-og.png
index 0e523fd0747..0fbcb7c1941 100644
Binary files a/www/static/home-og.png and b/www/static/home-og.png differ
diff --git a/www/static/illustration/deno-plush.svg b/www/static/illustration/deno-plush.svg
index 9039f863b8a..063a80f737d 100644
--- a/www/static/illustration/deno-plush.svg
+++ b/www/static/illustration/deno-plush.svg
@@ -1,42 +1 @@
-<svg width="248" height="275" viewBox="0 0 248 275" fill="none" xmlns="http://www.w3.org/2000/svg">
-<ellipse cx="117.507" cy="201.768" rx="73.9807" ry="14.6763" fill="#C2D2A7" fill-opacity="0.51"/>
-<path d="M150.936 231.884L153.445 216.599C153.862 214.058 155.564 211.913 157.943 210.928L173.02 204.69C174.742 203.977 176.669 203.936 178.42 204.576L220.544 219.974C225.139 221.653 226.891 227.234 224.08 231.239L206.077 256.887C204.002 259.844 200.103 260.883 196.831 259.352L155.124 239.83C152.107 238.417 150.396 235.172 150.936 231.884Z" fill="#D9B68E" stroke="#A25700" stroke-width="4.46512" stroke-linecap="round"/>
-<circle cx="164.163" cy="218.837" r="2.60465" fill="white" stroke="black" stroke-width="2.23256" stroke-linecap="round"/>
-<path d="M137 198C141.81 208.023 149.296 213.211 162.302 218.465" stroke="#A73F28" stroke-width="4.46512" stroke-linecap="round"/>
-<path d="M180.943 215.648C181.058 215.697 181.161 215.827 181.252 216.039C181.354 216.247 181.381 216.4 181.33 216.497C181.095 216.952 180.757 217.568 180.315 218.345C180.207 218.535 180.077 218.767 179.926 219.039C179.779 219.305 179.613 219.616 179.428 219.974C178.842 221.109 178.484 221.976 178.354 222.576C178.253 222.752 178.108 222.849 177.918 222.868C177.732 222.879 177.565 222.854 177.418 222.79C177.09 222.65 176.927 222.452 176.928 222.198C176.938 221.947 177.043 221.627 177.243 221.239C177.987 219.799 178.688 218.482 179.346 217.287C177.91 217.839 176.761 218.326 175.902 218.751C175.902 218.751 175.805 218.764 175.611 218.791C175.414 218.843 175.27 218.85 175.18 218.811C174.967 218.72 174.816 218.596 174.726 218.439C174.637 218.282 174.575 218.083 174.54 217.84L174.344 216.826C174.204 216.128 174.109 215.605 174.059 215.255C173.704 215.942 173.259 216.89 172.724 218.101C172.431 218.805 172.195 219.328 172.018 219.671C171.925 219.85 171.797 219.982 171.633 220.067C171.473 220.144 171.287 220.137 171.073 220.046C170.86 219.955 170.703 219.842 170.603 219.708C170.51 219.577 170.498 219.435 170.567 219.282C170.641 219.159 170.753 218.952 170.903 218.661C171.204 218.079 171.55 217.361 171.941 216.508L172.228 215.893L172.609 215.099C172.72 214.864 172.851 214.592 173 214.283C173.154 213.966 173.325 213.624 173.514 213.259C173.746 212.811 174.128 212.701 174.66 212.929C174.824 213 174.969 213.107 175.094 213.252C175.228 213.4 175.299 213.563 175.308 213.74C175.238 214.029 175.257 214.565 175.362 215.349C175.468 216.132 175.585 216.875 175.713 217.577C176.289 217.313 176.746 217.126 177.084 217.015C177.666 216.818 178.165 216.617 178.581 216.413C179.005 216.212 179.483 215.956 180.013 215.646C180.133 215.588 180.279 215.559 180.449 215.559C180.623 215.551 180.788 215.581 180.943 215.648Z" fill="#5A3911"/>
-<path d="M185.497 225.581C185.412 225.745 185.243 225.841 184.988 225.868C184.742 225.9 184.537 225.88 184.373 225.81C184.061 225.677 183.829 225.536 183.675 225.388C183.533 225.236 183.434 225.03 183.379 224.769C183.077 224.85 182.719 224.856 182.304 224.787C181.892 224.711 181.531 224.607 181.22 224.473C180.712 224.256 180.357 223.954 180.157 223.567C179.96 223.173 179.987 222.733 180.237 222.248C180.345 222.039 180.505 221.875 180.717 221.756C180.932 221.63 181.181 221.545 181.464 221.502C181.775 221.462 182.101 221.47 182.443 221.525C182.788 221.573 183.125 221.667 183.453 221.807C183.625 221.881 183.815 221.999 184.021 222.16C184.228 222.322 184.38 222.464 184.476 222.587L184.569 222.408C184.777 222.005 184.813 221.684 184.677 221.443C184.545 221.195 184.241 220.969 183.766 220.766C183.627 220.706 183.474 220.673 183.308 220.665C183.149 220.661 182.961 220.667 182.743 220.683C182.455 220.697 182.209 220.66 182.004 220.572C181.931 220.54 181.884 220.466 181.865 220.348C181.849 220.223 181.861 220.123 181.9 220.049C182.011 219.832 182.218 219.693 182.521 219.631C182.831 219.573 183.161 219.573 183.511 219.632C183.865 219.683 184.165 219.761 184.411 219.867C184.657 219.972 184.916 220.138 185.19 220.364C185.467 220.583 185.67 220.811 185.797 221.048C185.943 221.347 186.014 221.656 186.01 221.973C186.018 222.286 185.943 222.596 185.785 222.902C185.735 222.999 185.652 223.141 185.535 223.328C185.411 223.53 185.31 223.705 185.233 223.855C185.198 223.922 185.138 224.019 185.052 224.146C184.951 224.303 184.875 224.43 184.825 224.527C184.779 224.617 184.775 224.711 184.814 224.81C184.857 224.901 184.928 224.968 185.026 225.01L185.376 225.146C185.466 225.185 185.521 225.245 185.539 225.325C185.557 225.406 185.543 225.491 185.497 225.581ZM181.689 223.594C182.041 223.745 182.354 223.838 182.626 223.873C182.898 223.907 183.249 223.907 183.678 223.872C183.776 223.759 183.883 223.6 183.999 223.395C183.649 223.008 183.326 222.751 183.031 222.624C182.695 222.481 182.367 222.408 182.047 222.408C181.727 222.408 181.493 222.549 181.347 222.833C181.273 222.974 181.277 223.122 181.358 223.275C181.439 223.428 181.55 223.535 181.689 223.594Z" fill="#5A3911"/>
-<path d="M194.563 221.562C194.524 221.637 194.397 221.833 194.183 222.152C193.669 222.934 193.194 223.746 192.758 224.59C192.376 225.328 192.098 225.897 191.922 226.295C191.746 226.694 191.653 227.019 191.643 227.27C191.638 227.513 191.737 227.679 191.942 227.767C192.336 227.935 192.471 228.139 192.347 228.378C192.266 228.534 192.111 228.632 191.881 228.67C191.655 228.701 191.439 228.672 191.234 228.585C190.988 228.479 190.786 228.329 190.627 228.133C190.468 227.937 190.383 227.705 190.371 227.436C190.08 227.593 189.733 227.673 189.332 227.674C188.943 227.672 188.597 227.606 188.294 227.476C187.827 227.276 187.459 227.009 187.191 226.675C186.923 226.342 186.77 225.98 186.731 225.59C186.696 225.192 186.775 224.807 186.968 224.434C187.153 224.075 187.375 223.752 187.635 223.462C187.907 223.168 188.181 222.948 188.457 222.802C188.824 222.613 189.235 222.516 189.689 222.51C190.155 222.499 190.568 222.572 190.928 222.726C191.15 222.821 191.337 222.951 191.492 223.118C191.65 223.277 191.774 223.444 191.863 223.619C192.122 223.119 192.28 222.804 192.337 222.673L192.458 222.438C192.817 221.744 193.128 221.258 193.392 220.979C193.645 220.704 193.943 220.641 194.287 220.788C194.475 220.869 194.595 220.966 194.647 221.079C194.699 221.192 194.671 221.353 194.563 221.562ZM188.197 224.933C188.019 225.276 187.983 225.597 188.088 225.898C188.202 226.201 188.41 226.418 188.713 226.548C189.148 226.734 189.531 226.748 189.863 226.589C190.203 226.434 190.474 226.163 190.674 225.775L191.234 224.662C191.081 224.204 190.832 223.901 190.487 223.754C190.25 223.652 189.995 223.611 189.724 223.632C189.466 223.649 189.219 223.739 188.984 223.903C188.717 224.089 188.455 224.433 188.197 224.933Z" fill="#5A3911"/>
-<path d="M194.022 226.757C194.257 226.302 194.562 225.973 194.938 225.769C195.317 225.558 195.773 225.402 196.305 225.302C196.458 225.277 196.684 225.296 196.981 225.359C197.282 225.416 197.536 225.487 197.74 225.575C197.986 225.681 198.219 225.84 198.44 226.052C198.672 226.261 198.844 226.462 198.954 226.655C199.153 226.987 199.241 227.311 199.217 227.629C199.196 227.939 199.092 228.277 198.903 228.643C198.822 228.8 198.645 228.91 198.371 228.975C198.109 229.036 197.868 229.02 197.646 228.925L197.185 228.714C196.947 228.612 196.603 228.474 196.153 228.299L195.889 228.2C195.701 228.137 195.562 228.087 195.472 228.048C195.341 227.992 195.168 227.9 194.954 227.772C194.805 228.137 194.806 228.474 194.956 228.784C195.11 229.087 195.334 229.302 195.63 229.428C196.146 229.649 196.555 229.71 196.856 229.612C197.086 229.573 197.237 229.552 197.31 229.546C197.383 229.541 197.481 229.565 197.604 229.617C197.735 229.674 197.821 229.779 197.861 229.933C197.902 230.087 197.893 230.22 197.835 230.332C197.77 230.459 197.616 230.552 197.375 230.613C197.145 230.669 196.85 230.707 196.49 230.726C196.304 230.719 196.064 230.68 195.77 230.609C195.476 230.538 195.239 230.464 195.059 230.387C194.772 230.264 194.491 230.052 194.216 229.752C193.944 229.445 193.771 229.161 193.695 228.9C193.619 228.64 193.605 228.31 193.651 227.911C193.705 227.515 193.829 227.13 194.022 226.757ZM196.624 227.503C197.206 227.752 197.642 227.916 197.932 227.995C198.027 227.771 198.044 227.564 197.982 227.374C197.924 227.176 197.806 226.979 197.626 226.784C197.568 226.722 197.514 226.672 197.464 226.633C197.415 226.593 197.353 226.557 197.279 226.526C196.902 226.364 196.534 226.321 196.176 226.395C195.825 226.473 195.55 226.647 195.351 226.917C195.749 227.114 196.173 227.31 196.624 227.503Z" fill="#5A3911"/>
-<path d="M205.732 226.127C206.007 226.272 206.216 226.448 206.359 226.656C206.515 226.859 206.533 227.076 206.413 227.307C206.324 227.479 206.167 227.58 205.941 227.611C205.719 227.634 205.48 227.591 205.226 227.483C204.989 227.381 204.854 227.255 204.821 227.104C204.789 226.954 204.804 226.819 204.865 226.699C204.977 226.483 205.1 226.312 205.235 226.188C205.373 226.056 205.539 226.035 205.732 226.127ZM203.097 230.644L203.265 230.32C203.458 229.947 203.613 229.598 203.73 229.275C203.859 228.947 203.939 228.745 203.969 228.666C204.02 228.588 204.122 228.536 204.275 228.51C204.428 228.485 204.55 228.492 204.64 228.53C204.796 228.597 204.936 228.693 205.061 228.82C205.198 228.942 205.266 229.053 205.264 229.153C205.163 229.446 205.073 229.668 204.996 229.817C204.826 230.145 204.565 230.69 204.212 231.45L203.999 231.892L203.804 232.328C203.75 232.45 203.685 232.596 203.609 232.763C203.532 232.931 203.44 233.119 203.332 233.328C203.259 233.47 203.119 233.556 202.913 233.586C202.716 233.62 202.535 233.602 202.371 233.532C202.133 233.43 201.99 233.31 201.942 233.17C201.902 233.035 201.936 232.863 202.044 232.654L203.097 230.644Z" fill="#5A3911"/>
-<path d="M206.475 230.41C206.433 230.337 206.403 230.269 206.385 230.207C206.371 230.137 206.397 230.039 206.462 229.912C206.535 229.77 206.645 229.685 206.79 229.656C206.947 229.623 207.099 229.638 207.247 229.701C207.534 229.824 207.745 229.996 207.88 230.219C208.024 230.444 208.083 230.697 208.058 230.978C208.397 230.75 208.734 230.639 209.071 230.646C209.411 230.646 209.827 230.752 210.319 230.962C210.515 231.046 210.687 231.188 210.834 231.388C210.993 231.584 211.119 231.797 211.21 232.027C211.264 232.251 211.277 232.507 211.248 232.795C211.223 233.076 211.161 233.314 211.06 233.508C211.002 233.62 210.9 233.799 210.752 234.046C210.597 234.307 210.479 234.516 210.398 234.673C210.128 235.195 210.073 235.564 210.233 235.778C210.258 235.807 210.31 235.852 210.388 235.913C210.467 235.974 210.521 236.024 210.55 236.064C210.588 236.108 210.595 236.152 210.572 236.197C210.488 236.379 210.337 236.497 210.119 236.549C209.914 236.598 209.705 236.577 209.492 236.486C209.172 236.349 208.962 236.163 208.863 235.929C208.764 235.696 208.76 235.402 208.852 235.05C208.873 234.913 208.943 234.729 209.062 234.498C209.128 234.371 209.242 234.169 209.405 233.892C209.545 233.679 209.681 233.446 209.812 233.192C209.947 232.931 209.983 232.668 209.919 232.404C209.859 232.132 209.686 231.935 209.399 231.812C209.227 231.738 209.022 231.71 208.783 231.726C208.548 231.735 208.359 231.791 208.216 231.893C207.974 232.072 207.77 232.272 207.606 232.493C207.268 232.914 206.99 233.336 206.77 233.762C206.716 233.866 206.62 234.071 206.482 234.377C206.471 234.399 206.442 234.455 206.396 234.545C206.353 234.627 206.3 234.7 206.237 234.764C206.182 234.831 206.115 234.885 206.035 234.923C205.987 234.939 205.91 234.943 205.804 234.934C205.699 234.925 205.613 234.907 205.547 234.879C205.433 234.829 205.312 234.723 205.186 234.56C205.061 234.397 205.01 234.252 205.035 234.126L205.104 233.964C205.135 233.904 205.189 233.818 205.267 233.706C205.636 233.226 205.92 232.792 206.12 232.404C206.209 232.232 206.273 232.1 206.311 232.007L206.564 231.487C206.645 231.33 206.673 231.16 206.648 230.976C206.627 230.784 206.569 230.596 206.475 230.41Z" fill="#5A3911"/>
-<path d="M171.132 235.54C171.049 235.641 170.926 235.707 170.76 235.736C170.607 235.762 170.424 235.729 170.211 235.638C170.03 235.56 169.91 235.454 169.85 235.319C169.798 235.187 169.793 235.071 169.835 234.971C170.046 234.678 170.313 234.219 170.637 233.592C170.83 233.219 171.102 232.634 171.454 231.837C171.774 231.081 172.081 230.42 172.374 229.852C172.532 229.547 172.71 229.24 172.909 228.933C172.963 228.829 173.086 228.745 173.279 228.682C173.48 228.622 173.707 228.628 173.96 228.7C174.778 228.959 175.752 229.331 176.883 229.815L177.276 229.984C177.571 230.11 177.833 230.281 178.062 230.498C178.298 230.717 178.355 230.947 178.232 231.186C178.151 231.342 178.046 231.448 177.918 231.502C177.79 231.557 177.615 231.536 177.394 231.442C177.287 231.396 177.168 231.336 177.036 231.261C176.905 231.187 176.812 231.133 176.759 231.101C176.47 230.923 176.24 230.797 176.068 230.724C175.117 230.316 174.369 230.069 173.824 229.981C173.697 230.228 173.499 230.63 173.23 231.189L172.872 231.911C173.298 232.094 173.687 232.242 174.038 232.356C174.394 232.463 174.598 232.523 174.651 232.536C175.1 232.674 175.395 232.773 175.534 232.832C175.731 232.917 175.873 233.028 175.962 233.166C176.063 233.3 176.071 233.45 175.986 233.614C175.793 233.987 175.41 234.051 174.836 233.805C174.697 233.745 174.572 233.696 174.462 233.658C174.351 233.62 174.257 233.589 174.18 233.565C173.869 233.468 173.628 233.383 173.456 233.309C173.079 233.148 172.753 233.022 172.479 232.932C172.337 233.208 172.199 233.504 172.065 233.821C172.015 233.918 171.942 234.069 171.846 234.274C171.758 234.482 171.672 234.669 171.587 234.833C171.514 234.975 171.443 235.103 171.373 235.219C171.303 235.335 171.223 235.442 171.132 235.54Z" fill="#5A3911"/>
-<path d="M177.547 238.233C177.481 238.359 177.37 238.449 177.213 238.5C177.057 238.551 176.901 238.544 176.745 238.477C176.499 238.372 176.34 238.253 176.267 238.122C176.199 237.983 176.225 237.798 176.344 237.567C176.487 237.291 176.666 236.926 176.88 236.471C177.057 236.091 177.211 235.774 177.342 235.52C177.403 235.401 177.493 235.248 177.609 235.061C177.718 234.889 177.796 234.758 177.842 234.668C177.891 234.516 177.889 234.374 177.837 234.242C177.789 234.103 177.687 234 177.531 233.934C177.457 233.902 177.411 233.846 177.393 233.765C177.378 233.677 177.388 233.599 177.423 233.532C177.512 233.36 177.653 233.261 177.847 233.235C178.049 233.212 178.256 233.246 178.469 233.338C178.912 233.527 179.096 233.898 179.021 234.449C179.35 234.316 179.684 234.241 180.024 234.222C180.376 234.2 180.679 234.243 180.933 234.352C181.236 234.482 181.473 234.674 181.641 234.929C181.818 235.187 181.841 235.442 181.71 235.696C181.637 235.838 181.492 235.954 181.276 236.043C181.067 236.136 180.894 236.153 180.754 236.093C180.68 236.062 180.623 236.019 180.581 235.964C180.551 235.906 180.516 235.827 180.477 235.729C180.434 235.619 180.391 235.537 180.349 235.482C180.311 235.421 180.255 235.374 180.181 235.342C180.05 235.286 179.918 235.252 179.784 235.24C179.65 235.228 179.549 235.24 179.481 235.274C179.253 235.405 179.068 235.531 178.925 235.652C178.791 235.776 178.679 235.925 178.591 236.096C178.525 236.223 178.469 236.322 178.422 236.393L178.08 237.026C178.03 237.123 177.978 237.233 177.925 237.356C177.871 237.479 177.833 237.572 177.811 237.635C177.731 237.847 177.643 238.046 177.547 238.233Z" fill="#5A3911"/>
-<path d="M181.51 237.579C181.656 237.295 181.86 237.036 182.122 236.802C182.387 236.56 182.675 236.36 182.987 236.202C183.299 236.044 183.698 235.978 184.185 236.004C184.676 236.023 185.081 236.101 185.401 236.238C185.729 236.378 186.039 236.562 186.333 236.788C186.635 237.017 186.807 237.246 186.849 237.473C186.952 237.991 186.907 238.437 186.714 238.81C186.61 239.011 186.473 239.162 186.301 239.262C186.137 239.365 185.927 239.462 185.67 239.552C185.462 239.627 185.194 239.621 184.868 239.536C184.55 239.455 184.243 239.351 183.948 239.224C183.759 239.144 183.538 239.03 183.283 238.885C183.031 238.732 182.792 238.575 182.565 238.413C182.504 238.57 182.47 238.733 182.463 238.903C182.455 239.072 182.477 239.214 182.528 239.327C182.619 239.539 182.741 239.701 182.894 239.812C183.055 239.926 183.275 240.043 183.553 240.163C183.848 240.289 184.146 240.362 184.446 240.381C184.686 240.402 184.871 240.44 185.002 240.496C185.158 240.563 185.254 240.659 185.289 240.783C185.329 240.9 185.314 241.026 185.245 241.16C185.148 241.347 184.95 241.449 184.651 241.467C184.352 241.484 184.031 241.456 183.689 241.382C183.358 241.305 183.099 241.226 182.91 241.145C182.525 240.98 182.185 240.757 181.89 240.475C181.595 240.194 181.388 239.887 181.27 239.554C181.181 239.261 181.155 238.944 181.19 238.604C181.23 238.256 181.336 237.915 181.51 237.579ZM184.971 237.216C184.79 237.138 184.593 237.095 184.378 237.085C184.167 237.067 183.975 237.09 183.802 237.153C183.581 237.231 183.419 237.303 183.316 237.368C183.224 237.429 183.131 237.531 183.038 237.673C183.212 237.82 183.623 238.033 184.27 238.31C184.623 238.461 184.918 238.528 185.157 238.512C185.404 238.499 185.568 238.414 185.648 238.258C185.729 238.101 185.696 237.914 185.549 237.696C185.401 237.477 185.208 237.317 184.971 237.216Z" fill="#5A3911"/>
-<path d="M190.933 241.56C190.979 241.625 191.069 241.75 191.204 241.935C191.35 242.117 191.422 242.289 191.418 242.451C191.414 242.613 191.35 242.814 191.227 243.053C191.088 243.321 190.879 243.523 190.599 243.658C190.323 243.786 190.02 243.848 189.692 243.844C189.465 243.838 189.237 243.795 189.008 243.715C188.787 243.639 188.525 243.536 188.222 243.406C188.058 243.336 187.856 243.222 187.617 243.065C187.386 242.911 187.231 242.795 187.152 242.715C186.959 242.469 186.819 242.217 186.731 241.961C186.643 241.705 186.648 241.483 186.744 241.297C186.821 241.148 186.936 241.051 187.089 241.007C187.242 240.963 187.404 240.978 187.576 241.052C187.667 241.09 187.741 241.15 187.8 241.23C187.871 241.305 187.909 241.377 187.915 241.443C187.905 241.675 187.981 241.886 188.144 242.074C188.307 242.262 188.499 242.404 188.721 242.499C189.499 242.832 189.954 242.872 190.085 242.618C190.12 242.551 190.126 242.49 190.105 242.435C190.095 242.376 190.069 242.311 190.027 242.238C189.955 242.125 189.84 241.989 189.682 241.83C189.532 241.675 189.393 241.547 189.264 241.447C188.963 241.236 188.687 240.994 188.437 240.723C188.211 240.463 188.06 240.184 187.983 239.886C187.911 239.582 187.957 239.269 188.123 238.948C188.223 238.754 188.399 238.597 188.651 238.478C188.916 238.354 189.179 238.289 189.442 238.283C189.617 238.294 189.888 238.342 190.255 238.426C190.621 238.51 190.866 238.579 190.989 238.631C191.178 238.712 191.373 238.818 191.575 238.951C191.781 239.075 191.922 239.199 191.998 239.323C192.158 239.537 192.272 239.741 192.342 239.935C192.416 240.122 192.411 240.297 192.326 240.461C192.283 240.543 192.217 240.624 192.126 240.704C192.038 240.776 191.96 240.811 191.891 240.808C191.741 240.808 191.584 240.773 191.421 240.702C191.347 240.671 191.295 240.626 191.265 240.567C191.243 240.513 191.217 240.428 191.185 240.315C191.161 240.149 191.113 240.038 191.043 239.98C190.956 239.916 190.826 239.828 190.653 239.718C190.484 239.6 190.367 239.527 190.301 239.498C190.096 239.411 189.88 239.364 189.653 239.358C189.434 239.355 189.292 239.417 189.226 239.544C189.149 239.693 189.219 239.878 189.435 240.098C189.569 240.247 189.725 240.391 189.903 240.531C190.089 240.674 190.203 240.764 190.244 240.8C190.347 240.872 190.468 240.987 190.606 241.146C190.752 241.309 190.861 241.447 190.933 241.56Z" fill="#5A3911"/>
-<path d="M196.87 238.389C196.77 238.583 196.648 238.808 196.505 239.066C196.366 239.316 196.257 239.507 196.179 239.638C195.958 240.008 195.749 240.383 195.553 240.763C195.294 241.263 195.098 241.672 194.965 241.988C195.373 241.643 195.805 241.437 196.261 241.368C196.721 241.291 197.173 241.348 197.615 241.537C197.918 241.667 198.138 241.911 198.273 242.27C198.408 242.629 198.427 242.988 198.331 243.348C198.32 243.389 198.295 243.446 198.257 243.521C198.211 243.61 198.129 243.749 198.013 243.936C197.907 244.082 197.814 244.233 197.733 244.39C197.525 244.793 197.379 245.113 197.296 245.351C197.217 245.582 197.194 245.791 197.228 245.978C197.265 246.158 197.377 246.338 197.564 246.518C197.639 246.587 197.679 246.654 197.685 246.72C197.703 246.783 197.686 246.862 197.636 246.959C197.567 247.094 197.437 247.161 197.247 247.162C197.064 247.166 196.903 247.138 196.764 247.078C196.477 246.955 196.256 246.774 196.1 246.534C195.943 246.294 195.868 246.033 195.872 245.753C195.871 245.561 195.914 245.352 196.002 245.125C196.089 244.898 196.208 244.639 196.358 244.348L196.874 243.379C197.147 242.85 197.096 242.504 196.719 242.343C196.448 242.227 196.082 242.316 195.62 242.61C195.157 242.904 194.708 243.29 194.27 243.768C193.833 244.246 193.524 244.661 193.343 245.011C193.258 245.175 193.137 245.274 192.98 245.307C192.835 245.336 192.705 245.326 192.59 245.277C192.41 245.199 192.271 245.081 192.173 244.921C192.08 244.753 192.066 244.606 192.131 244.479C192.478 243.944 192.991 243.02 193.669 241.706C193.792 241.468 194.229 240.575 194.978 239.027L195.473 237.982C195.558 237.818 195.714 237.711 195.939 237.662C196.169 237.605 196.386 237.621 196.591 237.709C196.771 237.786 196.883 237.879 196.926 237.989C196.97 238.099 196.951 238.232 196.87 238.389Z" fill="#5A3911"/>
-<path d="M114.851 38.3068C132.223 52.8617 144.803 114.684 151.392 158.413C166.668 179.08 196.619 170.693 197.817 169.795C199.015 168.896 211.895 158.413 208.3 177.283C204.706 196.152 175.653 201.843 151.392 197.051C151.392 201.244 137.015 219.814 118.146 221.911C103.05 223.588 92.2875 213.424 88.7931 208.133L77.711 202.742C75.1152 204.139 60.0395 208.372 43.2666 208.133C22.3004 207.833 23.1989 184.471 29.4888 173.389C34.5207 164.523 49.7561 163.505 56.7448 164.104L62.7352 150.027C60.7384 150.226 48.2984 149.008 45.6627 148.529C42.368 147.93 33.9768 136.454 37.5757 120.674C41.4695 103.601 74.1168 100.307 77.711 98.8092C81.3052 97.3116 82.8028 83.2343 82.5033 70.0556C66.9284 68.2585 50.9042 60.471 54.9477 41.6014C60.339 16.442 92.6868 19.7368 114.851 38.3068Z" fill="#B1F491" stroke="black" stroke-width="3.5942" stroke-linecap="round"/>
-<path d="M81.0057 70.0556C84.5999 70.4549 92.3874 70.7145 94.7835 68.558" stroke="#3E7B28" stroke-opacity="0.55" stroke-width="3.5942" stroke-linecap="round"/>
-<path d="M68.7255 193.157C71.1217 199.746 79.2086 203.341 79.2086 203.341" stroke="#3E7B28" stroke-opacity="0.55" stroke-width="3.5942" stroke-linecap="round"/>
-<path d="M149.595 182.973C150.494 185.669 151.692 197.051 149.595 200.944" stroke="#3E7B28" stroke-opacity="0.55" stroke-width="3.5942" stroke-linecap="round"/>
-<circle cx="90.8898" cy="40.8044" r="2.99517" fill="black"/>
-<circle cx="71.1216" cy="34.814" r="2.99517" fill="black"/>
-<path d="M41.4695 114.684C46.2618 117.479 55.9661 124.867 56.4453 132.056C57.0444 141.041 51.6531 147.031 47.4598 148.529" stroke="#3E7B28" stroke-opacity="0.55" stroke-width="3.5942" stroke-linecap="round"/>
-<path d="M32.4839 169.196C37.0765 170.394 44.7641 175.785 46.2617 184.172C47.7593 192.558 49.8559 204.239 41.1699 208.133" stroke="#3E7B28" stroke-opacity="0.55" stroke-width="3.5942" stroke-linecap="round"/>
-<path d="M46.8608 123.669L52.8511 118.278" stroke="#3E7B28" stroke-opacity="0.55" stroke-width="3.5942" stroke-linecap="round"/>
-<path d="M51.3535 136.249L60.0395 138.345" stroke="#3E7B28" stroke-opacity="0.55" stroke-width="3.5942" stroke-linecap="round"/>
-<path d="M39.3729 178.181L45.9622 174.587" stroke="#3E7B28" stroke-opacity="0.55" stroke-width="3.5942" stroke-linecap="round"/>
-<path d="M44.1651 194.655L51.9525 196.751" stroke="#3E7B28" stroke-opacity="0.55" stroke-width="3.5942" stroke-linecap="round"/>
-<path d="M81.5103 135.92C76.6824 134.134 74.2685 139.848 70.1303 140.205C37.567 138.885 20.0417 183.377 43.5766 209.135C45.4278 211.161 45.9906 220.207 50.8185 221.635C55.6464 223.064 60.1775 216.369 63.9229 216.992C95.3045 222.211 115.651 166.634 85.9934 146.277C82.8975 144.152 86.3383 137.705 81.5103 135.92Z" fill="#FDE82B" stroke="black" stroke-width="3.5942"/>
-<path d="M83.2261 147.63C78.4338 138.525 87.8186 129.06 93.1101 125.466L130.25 138.046C130.35 143.138 128.393 154.699 119.767 160.21C108.985 167.099 89.2164 159.012 83.2261 147.63Z" fill="#B1F491"/>
-<path d="M89.6917 209.331C79.8676 195.433 93.7851 183.572 101.972 179.379C108.049 178.655 120.862 180.023 123.498 191.285C126.792 205.362 108.9 223.783 89.6917 209.331Z" fill="#B1F491"/>
-<path d="M101.972 179.379C90.6307 182.148 79.5246 197.984 94.145 214.048" stroke="black" stroke-width="3.5942" stroke-linecap="round"/>
-<path d="M93.1101 125.466C87.8186 129.06 78.4338 138.525 83.2261 147.63C89.2164 159.012 108.985 167.099 119.767 160.21C128.393 154.699 130.35 143.138 130.25 138.046" stroke="black" stroke-width="3.5942" stroke-linecap="round"/>
-<path d="M82.8028 140.442C86.6965 138.545 96.7004 135.889 105.566 140.442C116.648 146.133 122.339 154.519 122.938 157.215" stroke="#3E7B28" stroke-opacity="0.55" stroke-width="3.5942" stroke-linecap="round"/>
-<path d="M93.8849 142.239L96.5806 133.853" stroke="#3E7B28" stroke-opacity="0.55" stroke-width="3.5942" stroke-linecap="round"/>
-<path d="M114.851 151.824L120.242 145.833" stroke="#3E7B28" stroke-opacity="0.55" stroke-width="3.5942" stroke-linecap="round"/>
-<path d="M93.8849 185.669C109.16 183.872 116.349 191.659 117.846 200.645C119.344 209.63 116.948 221.611 110.658 222.21" stroke="#3E7B28" stroke-opacity="0.55" stroke-width="3.5942" stroke-linecap="round"/>
-<path d="M107.663 191.959L112.455 185.37" stroke="#3E7B28" stroke-opacity="0.55" stroke-width="3.5942" stroke-linecap="round"/>
-<path d="M114.252 203.94L122.938 200.345" stroke="#3E7B28" stroke-opacity="0.55" stroke-width="3.5942" stroke-linecap="round"/>
-<ellipse cx="69.5845" cy="202.667" rx="3.29469" ry="2.99517" fill="#ED9C24"/>
-<ellipse cx="78.5701" cy="193.082" rx="3.29469" ry="2.99517" fill="#ED9C24"/>
-</svg>
+<svg xmlns="http://www.w3.org/2000/svg" width="248" height="275" fill="none" viewBox="0 0 248 275"><ellipse cx="117.507" cy="201.768" fill="#C2D2A7" fill-opacity=".51" rx="73.981" ry="14.676"/><path fill="#D9B68E" stroke="#A25700" stroke-linecap="round" stroke-width="4.465" d="M150.936 231.884L153.445 216.599C153.862 214.058 155.564 211.913 157.943 210.928L173.02 204.69C174.742 203.977 176.669 203.936 178.42 204.576L220.544 219.974C225.139 221.653 226.891 227.234 224.08 231.239L206.077 256.887C204.002 259.844 200.103 260.883 196.831 259.352L155.124 239.83C152.107 238.417 150.396 235.172 150.936 231.884Z"/><circle cx="164.163" cy="218.837" r="2.605" fill="#fff" stroke="#000" stroke-linecap="round" stroke-width="2.233"/><path stroke="#A73F28" stroke-linecap="round" stroke-width="4.465" d="M137 198C141.81 208.023 149.296 213.211 162.302 218.465"/><path fill="#5A3911" d="M180.943 215.648C181.058 215.697 181.161 215.827 181.252 216.039C181.354 216.247 181.381 216.4 181.33 216.497C181.095 216.952 180.757 217.568 180.315 218.345C180.207 218.535 180.077 218.767 179.926 219.039C179.779 219.305 179.613 219.616 179.428 219.974C178.842 221.109 178.484 221.976 178.354 222.576C178.253 222.752 178.108 222.849 177.918 222.868C177.732 222.879 177.565 222.854 177.418 222.79C177.09 222.65 176.927 222.452 176.928 222.198C176.938 221.947 177.043 221.627 177.243 221.239C177.987 219.799 178.688 218.482 179.346 217.287C177.91 217.839 176.761 218.326 175.902 218.751C175.902 218.751 175.805 218.764 175.611 218.791C175.414 218.843 175.27 218.85 175.18 218.811C174.967 218.72 174.816 218.596 174.726 218.439C174.637 218.282 174.575 218.083 174.54 217.84L174.344 216.826C174.204 216.128 174.109 215.605 174.059 215.255C173.704 215.942 173.259 216.89 172.724 218.101C172.431 218.805 172.195 219.328 172.018 219.671C171.925 219.85 171.797 219.982 171.633 220.067C171.473 220.144 171.287 220.137 171.073 220.046C170.86 219.955 170.703 219.842 170.603 219.708C170.51 219.577 170.498 219.435 170.567 219.282C170.641 219.159 170.753 218.952 170.903 218.661C171.204 218.079 171.55 217.361 171.941 216.508L172.228 215.893L172.609 215.099C172.72 214.864 172.851 214.592 173 214.283C173.154 213.966 173.325 213.624 173.514 213.259C173.746 212.811 174.128 212.701 174.66 212.929C174.824 213 174.969 213.107 175.094 213.252C175.228 213.4 175.299 213.563 175.308 213.74C175.238 214.029 175.257 214.565 175.362 215.349C175.468 216.132 175.585 216.875 175.713 217.577C176.289 217.313 176.746 217.126 177.084 217.015C177.666 216.818 178.165 216.617 178.581 216.413C179.005 216.212 179.483 215.956 180.013 215.646C180.133 215.588 180.279 215.559 180.449 215.559C180.623 215.551 180.788 215.581 180.943 215.648Z"/><path fill="#5A3911" d="M185.497 225.581C185.412 225.745 185.243 225.841 184.988 225.868C184.742 225.9 184.537 225.88 184.373 225.81C184.061 225.677 183.829 225.536 183.675 225.388C183.533 225.236 183.434 225.03 183.379 224.769C183.077 224.85 182.719 224.856 182.304 224.787C181.892 224.711 181.531 224.607 181.22 224.473C180.712 224.256 180.357 223.954 180.157 223.567C179.96 223.173 179.987 222.733 180.237 222.248C180.345 222.039 180.505 221.875 180.717 221.756C180.932 221.63 181.181 221.545 181.464 221.502C181.775 221.462 182.101 221.47 182.443 221.525C182.788 221.573 183.125 221.667 183.453 221.807C183.625 221.881 183.815 221.999 184.021 222.16C184.228 222.322 184.38 222.464 184.476 222.587L184.569 222.408C184.777 222.005 184.813 221.684 184.677 221.443C184.545 221.195 184.241 220.969 183.766 220.766C183.627 220.706 183.474 220.673 183.308 220.665C183.149 220.661 182.961 220.667 182.743 220.683C182.455 220.697 182.209 220.66 182.004 220.572C181.931 220.54 181.884 220.466 181.865 220.348C181.849 220.223 181.861 220.123 181.9 220.049C182.011 219.832 182.218 219.693 182.521 219.631C182.831 219.573 183.161 219.573 183.511 219.632C183.865 219.683 184.165 219.761 184.411 219.867C184.657 219.972 184.916 220.138 185.19 220.364C185.467 220.583 185.67 220.811 185.797 221.048C185.943 221.347 186.014 221.656 186.01 221.973C186.018 222.286 185.943 222.596 185.785 222.902C185.735 222.999 185.652 223.141 185.535 223.328C185.411 223.53 185.31 223.705 185.233 223.855C185.198 223.922 185.138 224.019 185.052 224.146C184.951 224.303 184.875 224.43 184.825 224.527C184.779 224.617 184.775 224.711 184.814 224.81C184.857 224.901 184.928 224.968 185.026 225.01L185.376 225.146C185.466 225.185 185.521 225.245 185.539 225.325C185.557 225.406 185.543 225.491 185.497 225.581ZM181.689 223.594C182.041 223.745 182.354 223.838 182.626 223.873C182.898 223.907 183.249 223.907 183.678 223.872C183.776 223.759 183.883 223.6 183.999 223.395C183.649 223.008 183.326 222.751 183.031 222.624C182.695 222.481 182.367 222.408 182.047 222.408C181.727 222.408 181.493 222.549 181.347 222.833C181.273 222.974 181.277 223.122 181.358 223.275C181.439 223.428 181.55 223.535 181.689 223.594Z"/><path fill="#5A3911" d="M194.563 221.562C194.524 221.637 194.397 221.833 194.183 222.152C193.669 222.934 193.194 223.746 192.758 224.59C192.376 225.328 192.098 225.897 191.922 226.295C191.746 226.694 191.653 227.019 191.643 227.27C191.638 227.513 191.737 227.679 191.942 227.767C192.336 227.935 192.471 228.139 192.347 228.378C192.266 228.534 192.111 228.632 191.881 228.67C191.655 228.701 191.439 228.672 191.234 228.585C190.988 228.479 190.786 228.329 190.627 228.133C190.468 227.937 190.383 227.705 190.371 227.436C190.08 227.593 189.733 227.673 189.332 227.674C188.943 227.672 188.597 227.606 188.294 227.476C187.827 227.276 187.459 227.009 187.191 226.675C186.923 226.342 186.77 225.98 186.731 225.59C186.696 225.192 186.775 224.807 186.968 224.434C187.153 224.075 187.375 223.752 187.635 223.462C187.907 223.168 188.181 222.948 188.457 222.802C188.824 222.613 189.235 222.516 189.689 222.51C190.155 222.499 190.568 222.572 190.928 222.726C191.15 222.821 191.337 222.951 191.492 223.118C191.65 223.277 191.774 223.444 191.863 223.619C192.122 223.119 192.28 222.804 192.337 222.673L192.458 222.438C192.817 221.744 193.128 221.258 193.392 220.979C193.645 220.704 193.943 220.641 194.287 220.788C194.475 220.869 194.595 220.966 194.647 221.079C194.699 221.192 194.671 221.353 194.563 221.562ZM188.197 224.933C188.019 225.276 187.983 225.597 188.088 225.898C188.202 226.201 188.41 226.418 188.713 226.548C189.148 226.734 189.531 226.748 189.863 226.589C190.203 226.434 190.474 226.163 190.674 225.775L191.234 224.662C191.081 224.204 190.832 223.901 190.487 223.754C190.25 223.652 189.995 223.611 189.724 223.632C189.466 223.649 189.219 223.739 188.984 223.903C188.717 224.089 188.455 224.433 188.197 224.933Z"/><path fill="#5A3911" d="M194.022 226.757C194.257 226.302 194.562 225.973 194.938 225.769C195.317 225.558 195.773 225.402 196.305 225.302C196.458 225.277 196.684 225.296 196.981 225.359C197.282 225.416 197.536 225.487 197.74 225.575C197.986 225.681 198.219 225.84 198.44 226.052C198.672 226.261 198.844 226.462 198.954 226.655C199.153 226.987 199.241 227.311 199.217 227.629C199.196 227.939 199.092 228.277 198.903 228.643C198.822 228.8 198.645 228.91 198.371 228.975C198.109 229.036 197.868 229.02 197.646 228.925L197.185 228.714C196.947 228.612 196.603 228.474 196.153 228.299L195.889 228.2C195.701 228.137 195.562 228.087 195.472 228.048C195.341 227.992 195.168 227.9 194.954 227.772C194.805 228.137 194.806 228.474 194.956 228.784C195.11 229.087 195.334 229.302 195.63 229.428C196.146 229.649 196.555 229.71 196.856 229.612C197.086 229.573 197.237 229.552 197.31 229.546C197.383 229.541 197.481 229.565 197.604 229.617C197.735 229.674 197.821 229.779 197.861 229.933C197.902 230.087 197.893 230.22 197.835 230.332C197.77 230.459 197.616 230.552 197.375 230.613C197.145 230.669 196.85 230.707 196.49 230.726C196.304 230.719 196.064 230.68 195.77 230.609C195.476 230.538 195.239 230.464 195.059 230.387C194.772 230.264 194.491 230.052 194.216 229.752C193.944 229.445 193.771 229.161 193.695 228.9C193.619 228.64 193.605 228.31 193.651 227.911C193.705 227.515 193.829 227.13 194.022 226.757ZM196.624 227.503C197.206 227.752 197.642 227.916 197.932 227.995C198.027 227.771 198.044 227.564 197.982 227.374C197.924 227.176 197.806 226.979 197.626 226.784C197.568 226.722 197.514 226.672 197.464 226.633C197.415 226.593 197.353 226.557 197.279 226.526C196.902 226.364 196.534 226.321 196.176 226.395C195.825 226.473 195.55 226.647 195.351 226.917C195.749 227.114 196.173 227.31 196.624 227.503Z"/><path fill="#5A3911" d="M205.732 226.127C206.007 226.272 206.216 226.448 206.359 226.656C206.515 226.859 206.533 227.076 206.413 227.307C206.324 227.479 206.167 227.58 205.941 227.611C205.719 227.634 205.48 227.591 205.226 227.483C204.989 227.381 204.854 227.255 204.821 227.104C204.789 226.954 204.804 226.819 204.865 226.699C204.977 226.483 205.1 226.312 205.235 226.188C205.373 226.056 205.539 226.035 205.732 226.127ZM203.097 230.644L203.265 230.32C203.458 229.947 203.613 229.598 203.73 229.275C203.859 228.947 203.939 228.745 203.969 228.666C204.02 228.588 204.122 228.536 204.275 228.51C204.428 228.485 204.55 228.492 204.64 228.53C204.796 228.597 204.936 228.693 205.061 228.82C205.198 228.942 205.266 229.053 205.264 229.153C205.163 229.446 205.073 229.668 204.996 229.817C204.826 230.145 204.565 230.69 204.212 231.45L203.999 231.892L203.804 232.328C203.75 232.45 203.685 232.596 203.609 232.763C203.532 232.931 203.44 233.119 203.332 233.328C203.259 233.47 203.119 233.556 202.913 233.586C202.716 233.62 202.535 233.602 202.371 233.532C202.133 233.43 201.99 233.31 201.942 233.17C201.902 233.035 201.936 232.863 202.044 232.654L203.097 230.644Z"/><path fill="#5A3911" d="M206.475 230.41C206.433 230.337 206.403 230.269 206.385 230.207C206.371 230.137 206.397 230.039 206.462 229.912C206.535 229.77 206.645 229.685 206.79 229.656C206.947 229.623 207.099 229.638 207.247 229.701C207.534 229.824 207.745 229.996 207.88 230.219C208.024 230.444 208.083 230.697 208.058 230.978C208.397 230.75 208.734 230.639 209.071 230.646C209.411 230.646 209.827 230.752 210.319 230.962C210.515 231.046 210.687 231.188 210.834 231.388C210.993 231.584 211.119 231.797 211.21 232.027C211.264 232.251 211.277 232.507 211.248 232.795C211.223 233.076 211.161 233.314 211.06 233.508C211.002 233.62 210.9 233.799 210.752 234.046C210.597 234.307 210.479 234.516 210.398 234.673C210.128 235.195 210.073 235.564 210.233 235.778C210.258 235.807 210.31 235.852 210.388 235.913C210.467 235.974 210.521 236.024 210.55 236.064C210.588 236.108 210.595 236.152 210.572 236.197C210.488 236.379 210.337 236.497 210.119 236.549C209.914 236.598 209.705 236.577 209.492 236.486C209.172 236.349 208.962 236.163 208.863 235.929C208.764 235.696 208.76 235.402 208.852 235.05C208.873 234.913 208.943 234.729 209.062 234.498C209.128 234.371 209.242 234.169 209.405 233.892C209.545 233.679 209.681 233.446 209.812 233.192C209.947 232.931 209.983 232.668 209.919 232.404C209.859 232.132 209.686 231.935 209.399 231.812C209.227 231.738 209.022 231.71 208.783 231.726C208.548 231.735 208.359 231.791 208.216 231.893C207.974 232.072 207.77 232.272 207.606 232.493C207.268 232.914 206.99 233.336 206.77 233.762C206.716 233.866 206.62 234.071 206.482 234.377C206.471 234.399 206.442 234.455 206.396 234.545C206.353 234.627 206.3 234.7 206.237 234.764C206.182 234.831 206.115 234.885 206.035 234.923C205.987 234.939 205.91 234.943 205.804 234.934C205.699 234.925 205.613 234.907 205.547 234.879C205.433 234.829 205.312 234.723 205.186 234.56C205.061 234.397 205.01 234.252 205.035 234.126L205.104 233.964C205.135 233.904 205.189 233.818 205.267 233.706C205.636 233.226 205.92 232.792 206.12 232.404C206.209 232.232 206.273 232.1 206.311 232.007L206.564 231.487C206.645 231.33 206.673 231.16 206.648 230.976C206.627 230.784 206.569 230.596 206.475 230.41Z"/><path fill="#5A3911" d="M171.132 235.54C171.049 235.641 170.926 235.707 170.76 235.736C170.607 235.762 170.424 235.729 170.211 235.638C170.03 235.56 169.91 235.454 169.85 235.319C169.798 235.187 169.793 235.071 169.835 234.971C170.046 234.678 170.313 234.219 170.637 233.592C170.83 233.219 171.102 232.634 171.454 231.837C171.774 231.081 172.081 230.42 172.374 229.852C172.532 229.547 172.71 229.24 172.909 228.933C172.963 228.829 173.086 228.745 173.279 228.682C173.48 228.622 173.707 228.628 173.96 228.7C174.778 228.959 175.752 229.331 176.883 229.815L177.276 229.984C177.571 230.11 177.833 230.281 178.062 230.498C178.298 230.717 178.355 230.947 178.232 231.186C178.151 231.342 178.046 231.448 177.918 231.502C177.79 231.557 177.615 231.536 177.394 231.442C177.287 231.396 177.168 231.336 177.036 231.261C176.905 231.187 176.812 231.133 176.759 231.101C176.47 230.923 176.24 230.797 176.068 230.724C175.117 230.316 174.369 230.069 173.824 229.981C173.697 230.228 173.499 230.63 173.23 231.189L172.872 231.911C173.298 232.094 173.687 232.242 174.038 232.356C174.394 232.463 174.598 232.523 174.651 232.536C175.1 232.674 175.395 232.773 175.534 232.832C175.731 232.917 175.873 233.028 175.962 233.166C176.063 233.3 176.071 233.45 175.986 233.614C175.793 233.987 175.41 234.051 174.836 233.805C174.697 233.745 174.572 233.696 174.462 233.658C174.351 233.62 174.257 233.589 174.18 233.565C173.869 233.468 173.628 233.383 173.456 233.309C173.079 233.148 172.753 233.022 172.479 232.932C172.337 233.208 172.199 233.504 172.065 233.821C172.015 233.918 171.942 234.069 171.846 234.274C171.758 234.482 171.672 234.669 171.587 234.833C171.514 234.975 171.443 235.103 171.373 235.219C171.303 235.335 171.223 235.442 171.132 235.54Z"/><path fill="#5A3911" d="M177.547 238.233C177.481 238.359 177.37 238.449 177.213 238.5C177.057 238.551 176.901 238.544 176.745 238.477C176.499 238.372 176.34 238.253 176.267 238.122C176.199 237.983 176.225 237.798 176.344 237.567C176.487 237.291 176.666 236.926 176.88 236.471C177.057 236.091 177.211 235.774 177.342 235.52C177.403 235.401 177.493 235.248 177.609 235.061C177.718 234.889 177.796 234.758 177.842 234.668C177.891 234.516 177.889 234.374 177.837 234.242C177.789 234.103 177.687 234 177.531 233.934C177.457 233.902 177.411 233.846 177.393 233.765C177.378 233.677 177.388 233.599 177.423 233.532C177.512 233.36 177.653 233.261 177.847 233.235C178.049 233.212 178.256 233.246 178.469 233.338C178.912 233.527 179.096 233.898 179.021 234.449C179.35 234.316 179.684 234.241 180.024 234.222C180.376 234.2 180.679 234.243 180.933 234.352C181.236 234.482 181.473 234.674 181.641 234.929C181.818 235.187 181.841 235.442 181.71 235.696C181.637 235.838 181.492 235.954 181.276 236.043C181.067 236.136 180.894 236.153 180.754 236.093C180.68 236.062 180.623 236.019 180.581 235.964C180.551 235.906 180.516 235.827 180.477 235.729C180.434 235.619 180.391 235.537 180.349 235.482C180.311 235.421 180.255 235.374 180.181 235.342C180.05 235.286 179.918 235.252 179.784 235.24C179.65 235.228 179.549 235.24 179.481 235.274C179.253 235.405 179.068 235.531 178.925 235.652C178.791 235.776 178.679 235.925 178.591 236.096C178.525 236.223 178.469 236.322 178.422 236.393L178.08 237.026C178.03 237.123 177.978 237.233 177.925 237.356C177.871 237.479 177.833 237.572 177.811 237.635C177.731 237.847 177.643 238.046 177.547 238.233Z"/><path fill="#5A3911" d="M181.51 237.579C181.656 237.295 181.86 237.036 182.122 236.802C182.387 236.56 182.675 236.36 182.987 236.202C183.299 236.044 183.698 235.978 184.185 236.004C184.676 236.023 185.081 236.101 185.401 236.238C185.729 236.378 186.039 236.562 186.333 236.788C186.635 237.017 186.807 237.246 186.849 237.473C186.952 237.991 186.907 238.437 186.714 238.81C186.61 239.011 186.473 239.162 186.301 239.262C186.137 239.365 185.927 239.462 185.67 239.552C185.462 239.627 185.194 239.621 184.868 239.536C184.55 239.455 184.243 239.351 183.948 239.224C183.759 239.144 183.538 239.03 183.283 238.885C183.031 238.732 182.792 238.575 182.565 238.413C182.504 238.57 182.47 238.733 182.463 238.903C182.455 239.072 182.477 239.214 182.528 239.327C182.619 239.539 182.741 239.701 182.894 239.812C183.055 239.926 183.275 240.043 183.553 240.163C183.848 240.289 184.146 240.362 184.446 240.381C184.686 240.402 184.871 240.44 185.002 240.496C185.158 240.563 185.254 240.659 185.289 240.783C185.329 240.9 185.314 241.026 185.245 241.16C185.148 241.347 184.95 241.449 184.651 241.467C184.352 241.484 184.031 241.456 183.689 241.382C183.358 241.305 183.099 241.226 182.91 241.145C182.525 240.98 182.185 240.757 181.89 240.475C181.595 240.194 181.388 239.887 181.27 239.554C181.181 239.261 181.155 238.944 181.19 238.604C181.23 238.256 181.336 237.915 181.51 237.579ZM184.971 237.216C184.79 237.138 184.593 237.095 184.378 237.085C184.167 237.067 183.975 237.09 183.802 237.153C183.581 237.231 183.419 237.303 183.316 237.368C183.224 237.429 183.131 237.531 183.038 237.673C183.212 237.82 183.623 238.033 184.27 238.31C184.623 238.461 184.918 238.528 185.157 238.512C185.404 238.499 185.568 238.414 185.648 238.258C185.729 238.101 185.696 237.914 185.549 237.696C185.401 237.477 185.208 237.317 184.971 237.216Z"/><path fill="#5A3911" d="M190.933 241.56C190.979 241.625 191.069 241.75 191.204 241.935C191.35 242.117 191.422 242.289 191.418 242.451C191.414 242.613 191.35 242.814 191.227 243.053C191.088 243.321 190.879 243.523 190.599 243.658C190.323 243.786 190.02 243.848 189.692 243.844C189.465 243.838 189.237 243.795 189.008 243.715C188.787 243.639 188.525 243.536 188.222 243.406C188.058 243.336 187.856 243.222 187.617 243.065C187.386 242.911 187.231 242.795 187.152 242.715C186.959 242.469 186.819 242.217 186.731 241.961C186.643 241.705 186.648 241.483 186.744 241.297C186.821 241.148 186.936 241.051 187.089 241.007C187.242 240.963 187.404 240.978 187.576 241.052C187.667 241.09 187.741 241.15 187.8 241.23C187.871 241.305 187.909 241.377 187.915 241.443C187.905 241.675 187.981 241.886 188.144 242.074C188.307 242.262 188.499 242.404 188.721 242.499C189.499 242.832 189.954 242.872 190.085 242.618C190.12 242.551 190.126 242.49 190.105 242.435C190.095 242.376 190.069 242.311 190.027 242.238C189.955 242.125 189.84 241.989 189.682 241.83C189.532 241.675 189.393 241.547 189.264 241.447C188.963 241.236 188.687 240.994 188.437 240.723C188.211 240.463 188.06 240.184 187.983 239.886C187.911 239.582 187.957 239.269 188.123 238.948C188.223 238.754 188.399 238.597 188.651 238.478C188.916 238.354 189.179 238.289 189.442 238.283C189.617 238.294 189.888 238.342 190.255 238.426C190.621 238.51 190.866 238.579 190.989 238.631C191.178 238.712 191.373 238.818 191.575 238.951C191.781 239.075 191.922 239.199 191.998 239.323C192.158 239.537 192.272 239.741 192.342 239.935C192.416 240.122 192.411 240.297 192.326 240.461C192.283 240.543 192.217 240.624 192.126 240.704C192.038 240.776 191.96 240.811 191.891 240.808C191.741 240.808 191.584 240.773 191.421 240.702C191.347 240.671 191.295 240.626 191.265 240.567C191.243 240.513 191.217 240.428 191.185 240.315C191.161 240.149 191.113 240.038 191.043 239.98C190.956 239.916 190.826 239.828 190.653 239.718C190.484 239.6 190.367 239.527 190.301 239.498C190.096 239.411 189.88 239.364 189.653 239.358C189.434 239.355 189.292 239.417 189.226 239.544C189.149 239.693 189.219 239.878 189.435 240.098C189.569 240.247 189.725 240.391 189.903 240.531C190.089 240.674 190.203 240.764 190.244 240.8C190.347 240.872 190.468 240.987 190.606 241.146C190.752 241.309 190.861 241.447 190.933 241.56Z"/><path fill="#5A3911" d="M196.87 238.389C196.77 238.583 196.648 238.808 196.505 239.066C196.366 239.316 196.257 239.507 196.179 239.638C195.958 240.008 195.749 240.383 195.553 240.763C195.294 241.263 195.098 241.672 194.965 241.988C195.373 241.643 195.805 241.437 196.261 241.368C196.721 241.291 197.173 241.348 197.615 241.537C197.918 241.667 198.138 241.911 198.273 242.27C198.408 242.629 198.427 242.988 198.331 243.348C198.32 243.389 198.295 243.446 198.257 243.521C198.211 243.61 198.129 243.749 198.013 243.936C197.907 244.082 197.814 244.233 197.733 244.39C197.525 244.793 197.379 245.113 197.296 245.351C197.217 245.582 197.194 245.791 197.228 245.978C197.265 246.158 197.377 246.338 197.564 246.518C197.639 246.587 197.679 246.654 197.685 246.72C197.703 246.783 197.686 246.862 197.636 246.959C197.567 247.094 197.437 247.161 197.247 247.162C197.064 247.166 196.903 247.138 196.764 247.078C196.477 246.955 196.256 246.774 196.1 246.534C195.943 246.294 195.868 246.033 195.872 245.753C195.871 245.561 195.914 245.352 196.002 245.125C196.089 244.898 196.208 244.639 196.358 244.348L196.874 243.379C197.147 242.85 197.096 242.504 196.719 242.343C196.448 242.227 196.082 242.316 195.62 242.61C195.157 242.904 194.708 243.29 194.27 243.768C193.833 244.246 193.524 244.661 193.343 245.011C193.258 245.175 193.137 245.274 192.98 245.307C192.835 245.336 192.705 245.326 192.59 245.277C192.41 245.199 192.271 245.081 192.173 244.921C192.08 244.753 192.066 244.606 192.131 244.479C192.478 243.944 192.991 243.02 193.669 241.706C193.792 241.468 194.229 240.575 194.978 239.027L195.473 237.982C195.558 237.818 195.714 237.711 195.939 237.662C196.169 237.605 196.386 237.621 196.591 237.709C196.771 237.786 196.883 237.879 196.926 237.989C196.97 238.099 196.951 238.232 196.87 238.389Z"/><path fill="#B1F491" stroke="#000" stroke-linecap="round" stroke-width="3.594" d="M114.851 38.3068C132.223 52.8617 144.803 114.684 151.392 158.413C166.668 179.08 196.619 170.693 197.817 169.795C199.015 168.896 211.895 158.413 208.3 177.283C204.706 196.152 175.653 201.843 151.392 197.051C151.392 201.244 137.015 219.814 118.146 221.911C103.05 223.588 92.2875 213.424 88.7931 208.133L77.711 202.742C75.1152 204.139 60.0395 208.372 43.2666 208.133C22.3004 207.833 23.1989 184.471 29.4888 173.389C34.5207 164.523 49.7561 163.505 56.7448 164.104L62.7352 150.027C60.7384 150.226 48.2984 149.008 45.6627 148.529C42.368 147.93 33.9768 136.454 37.5757 120.674C41.4695 103.601 74.1168 100.307 77.711 98.8092C81.3052 97.3116 82.8028 83.2343 82.5033 70.0556C66.9284 68.2585 50.9042 60.471 54.9477 41.6014C60.339 16.442 92.6868 19.7368 114.851 38.3068Z"/><path stroke="#3E7B28" stroke-linecap="round" stroke-opacity=".55" stroke-width="3.594" d="M81.0057 70.0556C84.5999 70.4549 92.3874 70.7145 94.7835 68.558"/><path stroke="#3E7B28" stroke-linecap="round" stroke-opacity=".55" stroke-width="3.594" d="M68.7255 193.157C71.1217 199.746 79.2086 203.341 79.2086 203.341"/><path stroke="#3E7B28" stroke-linecap="round" stroke-opacity=".55" stroke-width="3.594" d="M149.595 182.973C150.494 185.669 151.692 197.051 149.595 200.944"/><circle cx="90.89" cy="40.804" r="2.995" fill="#000"/><circle cx="71.122" cy="34.814" r="2.995" fill="#000"/><path stroke="#3E7B28" stroke-linecap="round" stroke-opacity=".55" stroke-width="3.594" d="M41.4695 114.684C46.2618 117.479 55.9661 124.867 56.4453 132.056C57.0444 141.041 51.6531 147.031 47.4598 148.529"/><path stroke="#3E7B28" stroke-linecap="round" stroke-opacity=".55" stroke-width="3.594" d="M32.4839 169.196C37.0765 170.394 44.7641 175.785 46.2617 184.172C47.7593 192.558 49.8559 204.239 41.1699 208.133"/><path stroke="#3E7B28" stroke-linecap="round" stroke-opacity=".55" stroke-width="3.594" d="M46.8608 123.669L52.8511 118.278"/><path stroke="#3E7B28" stroke-linecap="round" stroke-opacity=".55" stroke-width="3.594" d="M51.3535 136.249L60.0395 138.345"/><path stroke="#3E7B28" stroke-linecap="round" stroke-opacity=".55" stroke-width="3.594" d="M39.3729 178.181L45.9622 174.587"/><path stroke="#3E7B28" stroke-linecap="round" stroke-opacity=".55" stroke-width="3.594" d="M44.1651 194.655L51.9525 196.751"/><path fill="#FDE82B" stroke="#000" stroke-width="3.594" d="M81.5103 135.92C76.6824 134.134 74.2685 139.848 70.1303 140.205C37.567 138.885 20.0417 183.377 43.5766 209.135C45.4278 211.161 45.9906 220.207 50.8185 221.635C55.6464 223.064 60.1775 216.369 63.9229 216.992C95.3045 222.211 115.651 166.634 85.9934 146.277C82.8975 144.152 86.3383 137.705 81.5103 135.92Z"/><path fill="#B1F491" d="M83.2261 147.63C78.4338 138.525 87.8186 129.06 93.1101 125.466L130.25 138.046C130.35 143.138 128.393 154.699 119.767 160.21C108.985 167.099 89.2164 159.012 83.2261 147.63Z"/><path fill="#B1F491" d="M89.6917 209.331C79.8676 195.433 93.7851 183.572 101.972 179.379C108.049 178.655 120.862 180.023 123.498 191.285C126.792 205.362 108.9 223.783 89.6917 209.331Z"/><path stroke="#000" stroke-linecap="round" stroke-width="3.594" d="M101.972 179.379C90.6307 182.148 79.5246 197.984 94.145 214.048"/><path stroke="#000" stroke-linecap="round" stroke-width="3.594" d="M93.1101 125.466C87.8186 129.06 78.4338 138.525 83.2261 147.63C89.2164 159.012 108.985 167.099 119.767 160.21C128.393 154.699 130.35 143.138 130.25 138.046"/><path stroke="#3E7B28" stroke-linecap="round" stroke-opacity=".55" stroke-width="3.594" d="M82.8028 140.442C86.6965 138.545 96.7004 135.889 105.566 140.442C116.648 146.133 122.339 154.519 122.938 157.215"/><path stroke="#3E7B28" stroke-linecap="round" stroke-opacity=".55" stroke-width="3.594" d="M93.8849 142.239L96.5806 133.853"/><path stroke="#3E7B28" stroke-linecap="round" stroke-opacity=".55" stroke-width="3.594" d="M114.851 151.824L120.242 145.833"/><path stroke="#3E7B28" stroke-linecap="round" stroke-opacity=".55" stroke-width="3.594" d="M93.8849 185.669C109.16 183.872 116.349 191.659 117.846 200.645C119.344 209.63 116.948 221.611 110.658 222.21"/><path stroke="#3E7B28" stroke-linecap="round" stroke-opacity=".55" stroke-width="3.594" d="M107.663 191.959L112.455 185.37"/><path stroke="#3E7B28" stroke-linecap="round" stroke-opacity=".55" stroke-width="3.594" d="M114.252 203.94L122.938 200.345"/><ellipse cx="69.585" cy="202.667" fill="#ED9C24" rx="3.295" ry="2.995"/><ellipse cx="78.57" cy="193.082" fill="#ED9C24" rx="3.295" ry="2.995"/></svg>
\ No newline at end of file
diff --git a/www/static/illustration/lemon-squash.svg b/www/static/illustration/lemon-squash.svg
index 2d2a7d7bb40..220d4763e02 100644
--- a/www/static/illustration/lemon-squash.svg
+++ b/www/static/illustration/lemon-squash.svg
@@ -1,36 +1 @@
-<svg width="221" height="186" fill="none"
-  xmlns="http://www.w3.org/2000/svg">
-  <path d="M176.9 53c3 20.5 7.5 64 17 91h-53.5c0-7-5-51.5-7-69-49-4.5-45.3-55.4 0-57 29.5-1 40.5 14.5 43.5 35Z" fill="#fff"/>
-  <path d="M197.5 143H27c39.7 34.2 129 46.6 170.5 0Z" fill="#DAF8E1"/>
-  <path d="M180.9 53c3 20.5 7.5 64 17 91h-53.5c0-7-5-51.5-7-69-49-4.5-45.3-55.4 0-57 29.5-1 40.5 14.5 43.5 35Z" fill="#B1DCA7"/>
-  <circle cx="131.5" cy="32" r="2.5" fill="#000"/>
-  <circle cx="114.5" cy="32" r="2.5" fill="#000"/>
-  <rect x="33" y="106.5" width="39" height="33" rx="4" fill="#FFE1C7"/>
-  <path d="m58.7 96.2 3.6 8a2 2 0 0 1-1.9 2.8h-12a2 2 0 0 1-1.3-3.4l8.3-8a2 2 0 0 1 3.3.6Z" fill="#B56964"/>
-  <path fill="#FDF4D7" d="M33 118.5h39v11H33z"/>
-  <path d="m47.3 122.6 3 4.3a1 1 0 0 1-.7 1.6H43a1 1 0 0 1-.8-1.6l3.4-4.4a1 1 0 0 1 1.6 0Z" fill="#FF8B8B"/>
-  <path d="m37.8 125.5 3-5.5a1 1 0 0 0-1-1.5h-5.3a1 1 0 0 0-1 1v5.5c0 .6.4 1 1 1h2.4c.4 0 .7-.2.9-.5Z" fill="#F99946"/>
-  <path d="m60 123.2.7-3a1 1 0 0 0-1-1.2h-6.6a1 1 0 0 0-1 1l.2 3c0 .6.4 1 1 1h5.6a1 1 0 0 0 1-.8Z" fill="#FF8B8B"/>
-  <path d="M33 109a3 3 0 0 1 3-3h33a3 3 0 0 1 3 3v2H33v-2Z" fill="#fff"/>
-  <path d="m63.4 127.2 6.5-5a1 1 0 0 1 1.6.8v5c0 .6-.4 1-1 1H64a1 1 0 0 1-.6-1.8Z" fill="#F99946"/>
-  <rect x="33" y="105.5" width="39" height="33" rx="4" stroke="#E1B893" stroke-width="3"/>
-  <path d="M53 143c18.2 0 33-3.3 33-7.5H20c0 4.2 14.8 7.5 33 7.5Z" fill="#A2D6EC"/>
-  <path d="M89.5 144 87 86h38l-3 58H89.5Z" fill="#fff"/>
-  <path fill="#7FD0F2" d="m118.6 71.7 5 .7-9 67.5-5-.7z"/>
-  <path d="m89 92.3 11-20.5C86.6 65.5 75.9 85 89 92.3Z" fill="#FFED63" stroke="#FFCB7D" stroke-width="3"/>
-  <path d="M111.5 85.5H86l.7 14.5M115 85.5h9l-3 58H89L87 105" stroke="#B8EAFF" stroke-width="3" stroke-linecap="round"/>
-  <path d="M89 102.5h32l-2.5 39h-27l-2.5-39Z" fill="#FFF851" fill-opacity=".9"/>
-  <circle cx="112.5" cy="122.5" r="1.5" fill="#fff"/>
-  <circle cx="98.5" cy="129.5" r="1.5" fill="#fff"/>
-  <circle cx="111.5" cy="135.5" r="1.5" fill="#fff"/>
-  <circle cx="94" cy="122" r="1" fill="#fff"/>
-  <path d="m104 106.1 3.2-5.6a2 2 0 0 1 2.4-.9l8.3 3.1a2 2 0 0 1 1.1 2.8l-3.1 6.3a2 2 0 0 1-2.7.9l-8.2-3.8a2 2 0 0 1-1-2.8Z" fill="#fff" stroke="#BCEBFF" stroke-width="3"/>
-  <path d="m103.6 109.4 1.3-3a2 2 0 0 0-1.3-2.7l-8.6-2.5a2 2 0 0 0-2 .5l-.7.7a2 2 0 0 0-.6 1.6l.4 4a2 2 0 0 0 1.8 1.9l7.7.7a2 2 0 0 0 2-1.2Z" fill="#fff" stroke="#BCEBFF" stroke-width="3"/>
-  <path d="m108.5 106.2-1.5-.9a2 2 0 0 0-1.1-.2l-3 .2a2 2 0 0 0-1.9 2v3.6c0 1.1 1 2 2.1 2l3.6-.3a2 2 0 0 0 1.7-1.3l1-2.7c.4-1 0-2-.9-2.4Z" fill="#fff" stroke="#BCEBFF" stroke-width="3"/>
-  <path d="M92 105.9c2.5-11.5 8.5-11.5 13-10.5-2.3 4.5-2.2 10-13 10.5Z" fill="#65D488"/>
-  <path d="M92.9 106.4c-5-2-4.7-5.7-4-8.4 1.9 1.6 4.3 1.7 4 8.4Z" fill="#65D488"/>
-  <path d="M177.5 53c3 20.5 7.5 64 17 91H141c0-7-5-51.5-7-69a51 51 0 0 1-20.8-6m63.3-21.5C172.3 29.8 160.8 17.1 134 18c-35.7 1.3-45.6 33.3-24 49" stroke="#72B961" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"/>
-  <path d="M133 75c3.8.3 9.6.7 12-.5" stroke="#72B961" stroke-width="3" stroke-linecap="round"/>
-  <path d="M15 144h192" stroke="#60ACCC" stroke-width="3" stroke-linecap="round"/>
-  <path d="M92.5 105.5c-1 1.2-2.5 5-2 7.5" stroke="#65D488" stroke-width="2" stroke-linecap="round"/>
-</svg>
\ No newline at end of file
+<svg xmlns="http://www.w3.org/2000/svg" width="221" height="186" fill="none"><path fill="#fff" d="M176.9 53c3 20.5 7.5 64 17 91h-53.5c0-7-5-51.5-7-69-49-4.5-45.3-55.4 0-57 29.5-1 40.5 14.5 43.5 35Z"/><path fill="#DAF8E1" d="M197.5 143H27c39.7 34.2 129 46.6 170.5 0Z"/><path fill="#B1DCA7" d="M180.9 53c3 20.5 7.5 64 17 91h-53.5c0-7-5-51.5-7-69-49-4.5-45.3-55.4 0-57 29.5-1 40.5 14.5 43.5 35Z"/><circle cx="131.5" cy="32" r="2.5" fill="#000"/><circle cx="114.5" cy="32" r="2.5" fill="#000"/><rect width="39" height="33" x="33" y="106.5" fill="#FFE1C7" rx="4"/><path fill="#B56964" d="m58.7 96.2 3.6 8a2 2 0 0 1-1.9 2.8h-12a2 2 0 0 1-1.3-3.4l8.3-8a2 2 0 0 1 3.3.6Z"/><path fill="#FDF4D7" d="M33 118.5h39v11H33z"/><path fill="#FF8B8B" d="m47.3 122.6 3 4.3a1 1 0 0 1-.7 1.6H43a1 1 0 0 1-.8-1.6l3.4-4.4a1 1 0 0 1 1.6 0Z"/><path fill="#F99946" d="m37.8 125.5 3-5.5a1 1 0 0 0-1-1.5h-5.3a1 1 0 0 0-1 1v5.5c0 .6.4 1 1 1h2.4c.4 0 .7-.2.9-.5Z"/><path fill="#FF8B8B" d="m60 123.2.7-3a1 1 0 0 0-1-1.2h-6.6a1 1 0 0 0-1 1l.2 3c0 .6.4 1 1 1h5.6a1 1 0 0 0 1-.8Z"/><path fill="#fff" d="M33 109a3 3 0 0 1 3-3h33a3 3 0 0 1 3 3v2H33v-2Z"/><path fill="#F99946" d="m63.4 127.2 6.5-5a1 1 0 0 1 1.6.8v5c0 .6-.4 1-1 1H64a1 1 0 0 1-.6-1.8Z"/><rect width="39" height="33" x="33" y="105.5" stroke="#E1B893" stroke-width="3" rx="4"/><path fill="#A2D6EC" d="M53 143c18.2 0 33-3.3 33-7.5H20c0 4.2 14.8 7.5 33 7.5Z"/><path fill="#fff" d="M89.5 144 87 86h38l-3 58H89.5Z"/><path fill="#7FD0F2" d="m118.6 71.7 5 .7-9 67.5-5-.7z"/><path fill="#FFED63" stroke="#FFCB7D" stroke-width="3" d="m89 92.3 11-20.5C86.6 65.5 75.9 85 89 92.3Z"/><path stroke="#B8EAFF" stroke-linecap="round" stroke-width="3" d="M111.5 85.5H86l.7 14.5M115 85.5h9l-3 58H89L87 105"/><path fill="#FFF851" fill-opacity=".9" d="M89 102.5h32l-2.5 39h-27l-2.5-39Z"/><circle cx="112.5" cy="122.5" r="1.5" fill="#fff"/><circle cx="98.5" cy="129.5" r="1.5" fill="#fff"/><circle cx="111.5" cy="135.5" r="1.5" fill="#fff"/><circle cx="94" cy="122" r="1" fill="#fff"/><path fill="#fff" stroke="#BCEBFF" stroke-width="3" d="m104 106.1 3.2-5.6a2 2 0 0 1 2.4-.9l8.3 3.1a2 2 0 0 1 1.1 2.8l-3.1 6.3a2 2 0 0 1-2.7.9l-8.2-3.8a2 2 0 0 1-1-2.8Z"/><path fill="#fff" stroke="#BCEBFF" stroke-width="3" d="m103.6 109.4 1.3-3a2 2 0 0 0-1.3-2.7l-8.6-2.5a2 2 0 0 0-2 .5l-.7.7a2 2 0 0 0-.6 1.6l.4 4a2 2 0 0 0 1.8 1.9l7.7.7a2 2 0 0 0 2-1.2Z"/><path fill="#fff" stroke="#BCEBFF" stroke-width="3" d="m108.5 106.2-1.5-.9a2 2 0 0 0-1.1-.2l-3 .2a2 2 0 0 0-1.9 2v3.6c0 1.1 1 2 2.1 2l3.6-.3a2 2 0 0 0 1.7-1.3l1-2.7c.4-1 0-2-.9-2.4Z"/><path fill="#65D488" d="M92 105.9c2.5-11.5 8.5-11.5 13-10.5-2.3 4.5-2.2 10-13 10.5Z"/><path fill="#65D488" d="M92.9 106.4c-5-2-4.7-5.7-4-8.4 1.9 1.6 4.3 1.7 4 8.4Z"/><path stroke="#72B961" stroke-linecap="round" stroke-linejoin="round" stroke-width="3" d="M177.5 53c3 20.5 7.5 64 17 91H141c0-7-5-51.5-7-69a51 51 0 0 1-20.8-6m63.3-21.5C172.3 29.8 160.8 17.1 134 18c-35.7 1.3-45.6 33.3-24 49"/><path stroke="#72B961" stroke-linecap="round" stroke-width="3" d="M133 75c3.8.3 9.6.7 12-.5"/><path stroke="#60ACCC" stroke-linecap="round" stroke-width="3" d="M15 144h192"/><path stroke="#65D488" stroke-linecap="round" stroke-width="2" d="M92.5 105.5c-1 1.2-2.5 5-2 7.5"/></svg>
\ No newline at end of file
diff --git a/www/static/showcase/adam-portfolio1x.jpg b/www/static/showcase/adam-portfolio1x.jpg
index 4ab0c1e245c..4dad30287ac 100644
Binary files a/www/static/showcase/adam-portfolio1x.jpg and b/www/static/showcase/adam-portfolio1x.jpg differ
diff --git a/www/static/showcase/adam-portfolio2x.jpg b/www/static/showcase/adam-portfolio2x.jpg
index 377759e1c58..a3ecc615de4 100644
Binary files a/www/static/showcase/adam-portfolio2x.jpg and b/www/static/showcase/adam-portfolio2x.jpg differ
diff --git a/www/static/showcase/balello1x.jpg b/www/static/showcase/balello1x.jpg
index fcb73c3c235..be30ed50e30 100644
Binary files a/www/static/showcase/balello1x.jpg and b/www/static/showcase/balello1x.jpg differ
diff --git a/www/static/showcase/balello2x.jpg b/www/static/showcase/balello2x.jpg
index 92614aca07f..5397b6902bb 100644
Binary files a/www/static/showcase/balello2x.jpg and b/www/static/showcase/balello2x.jpg differ
diff --git a/www/static/showcase/cgpa-au-20211x.jpg b/www/static/showcase/cgpa-au-20211x.jpg
index e862446a73f..29fa612ab1c 100644
Binary files a/www/static/showcase/cgpa-au-20211x.jpg and b/www/static/showcase/cgpa-au-20211x.jpg differ
diff --git a/www/static/showcase/cgpa-au-20212x.jpg b/www/static/showcase/cgpa-au-20212x.jpg
index 1f214955c05..c713dcd7a4d 100644
Binary files a/www/static/showcase/cgpa-au-20212x.jpg and b/www/static/showcase/cgpa-au-20212x.jpg differ
diff --git a/www/static/showcase/d3nodata1x.jpg b/www/static/showcase/d3nodata1x.jpg
index cb9b83558f1..fa7d086ffe8 100644
Binary files a/www/static/showcase/d3nodata1x.jpg and b/www/static/showcase/d3nodata1x.jpg differ
diff --git a/www/static/showcase/deno-diary1x.jpg b/www/static/showcase/deno-diary1x.jpg
index 00ef66a9b07..67e2c68d02b 100644
Binary files a/www/static/showcase/deno-diary1x.jpg and b/www/static/showcase/deno-diary1x.jpg differ
diff --git a/www/static/showcase/deno-diary2x.jpg b/www/static/showcase/deno-diary2x.jpg
index 23a23494463..b69b0229ca0 100644
Binary files a/www/static/showcase/deno-diary2x.jpg and b/www/static/showcase/deno-diary2x.jpg differ
diff --git a/www/static/showcase/deno-paste1x.jpg b/www/static/showcase/deno-paste1x.jpg
index 104082e6f74..ae2726729c1 100644
Binary files a/www/static/showcase/deno-paste1x.jpg and b/www/static/showcase/deno-paste1x.jpg differ
diff --git a/www/static/showcase/deno-paste2x.jpg b/www/static/showcase/deno-paste2x.jpg
index 52d6168bf70..7b74056ff83 100644
Binary files a/www/static/showcase/deno-paste2x.jpg and b/www/static/showcase/deno-paste2x.jpg differ
diff --git a/www/static/showcase/fondest1x.jpg b/www/static/showcase/fondest1x.jpg
index 5bc0728de3e..a78ca743f65 100644
Binary files a/www/static/showcase/fondest1x.jpg and b/www/static/showcase/fondest1x.jpg differ
diff --git a/www/static/showcase/fondest2x.jpg b/www/static/showcase/fondest2x.jpg
index a6adf5989e1..b31a53cfb07 100644
Binary files a/www/static/showcase/fondest2x.jpg and b/www/static/showcase/fondest2x.jpg differ
diff --git a/www/static/showcase/fresh-notion-blog1x.jpg b/www/static/showcase/fresh-notion-blog1x.jpg
index 796d23db6ae..3a8e1b6ffa6 100644
Binary files a/www/static/showcase/fresh-notion-blog1x.jpg and b/www/static/showcase/fresh-notion-blog1x.jpg differ
diff --git a/www/static/showcase/fresh-notion-blog2x.jpg b/www/static/showcase/fresh-notion-blog2x.jpg
index 8d4bc88011f..0a6954a5a6a 100644
Binary files a/www/static/showcase/fresh-notion-blog2x.jpg and b/www/static/showcase/fresh-notion-blog2x.jpg differ
diff --git a/www/static/showcase/fresh-strapi1x.jpg b/www/static/showcase/fresh-strapi1x.jpg
index 9d8f6657f91..a77f8b7c8fc 100644
Binary files a/www/static/showcase/fresh-strapi1x.jpg and b/www/static/showcase/fresh-strapi1x.jpg differ
diff --git a/www/static/showcase/fresh-todo1x.jpg b/www/static/showcase/fresh-todo1x.jpg
index 27dde2807ec..939460d6eab 100644
Binary files a/www/static/showcase/fresh-todo1x.jpg and b/www/static/showcase/fresh-todo1x.jpg differ
diff --git a/www/static/showcase/fresh-todo2x.jpg b/www/static/showcase/fresh-todo2x.jpg
index 003f9e2ce2b..2ef28281943 100644
Binary files a/www/static/showcase/fresh-todo2x.jpg and b/www/static/showcase/fresh-todo2x.jpg differ
diff --git a/www/static/showcase/grape-chat1x.jpg b/www/static/showcase/grape-chat1x.jpg
index cb5d4905980..d2b5cda8fb6 100644
Binary files a/www/static/showcase/grape-chat1x.jpg and b/www/static/showcase/grape-chat1x.jpg differ
diff --git a/www/static/showcase/grape-chat2x.jpg b/www/static/showcase/grape-chat2x.jpg
index 23ef666a096..d78a31139c4 100644
Binary files a/www/static/showcase/grape-chat2x.jpg and b/www/static/showcase/grape-chat2x.jpg differ
diff --git a/www/static/showcase/guigui641x.jpg b/www/static/showcase/guigui641x.jpg
index e15ed611cbb..d13f6693eba 100644
Binary files a/www/static/showcase/guigui641x.jpg and b/www/static/showcase/guigui641x.jpg differ
diff --git a/www/static/showcase/guigui642x.jpg b/www/static/showcase/guigui642x.jpg
index 8c906364614..f9dde3d2439 100644
Binary files a/www/static/showcase/guigui642x.jpg and b/www/static/showcase/guigui642x.jpg differ
diff --git a/www/static/showcase/hn1x.jpg b/www/static/showcase/hn1x.jpg
index 7057f723712..1e2f690295d 100644
Binary files a/www/static/showcase/hn1x.jpg and b/www/static/showcase/hn1x.jpg differ
diff --git a/www/static/showcase/hn2x.jpg b/www/static/showcase/hn2x.jpg
index 8cc500e96fa..7330fa408dc 100644
Binary files a/www/static/showcase/hn2x.jpg and b/www/static/showcase/hn2x.jpg differ
diff --git a/www/static/showcase/imasparql-dd1x.jpg b/www/static/showcase/imasparql-dd1x.jpg
index 3ea39d9a987..ee17c6b7d9c 100644
Binary files a/www/static/showcase/imasparql-dd1x.jpg and b/www/static/showcase/imasparql-dd1x.jpg differ
diff --git a/www/static/showcase/imasparql-dd2x.jpg b/www/static/showcase/imasparql-dd2x.jpg
index ac20ddd9c93..c00bc4860ed 100644
Binary files a/www/static/showcase/imasparql-dd2x.jpg and b/www/static/showcase/imasparql-dd2x.jpg differ
diff --git a/www/static/showcase/javaminidoodle1x.jpg b/www/static/showcase/javaminidoodle1x.jpg
index 751c27a5605..2d15519b966 100644
Binary files a/www/static/showcase/javaminidoodle1x.jpg and b/www/static/showcase/javaminidoodle1x.jpg differ
diff --git a/www/static/showcase/javaminidoodle2x.jpg b/www/static/showcase/javaminidoodle2x.jpg
index f339676e5ff..b3dd2d55125 100644
Binary files a/www/static/showcase/javaminidoodle2x.jpg and b/www/static/showcase/javaminidoodle2x.jpg differ
diff --git a/www/static/showcase/joesalinasdev1x.jpg b/www/static/showcase/joesalinasdev1x.jpg
index ba8eaae2639..e9e9bbead69 100644
Binary files a/www/static/showcase/joesalinasdev1x.jpg and b/www/static/showcase/joesalinasdev1x.jpg differ
diff --git a/www/static/showcase/joesalinasdev2x.jpg b/www/static/showcase/joesalinasdev2x.jpg
index ec813175120..ecf6a45c5f4 100644
Binary files a/www/static/showcase/joesalinasdev2x.jpg and b/www/static/showcase/joesalinasdev2x.jpg differ
diff --git a/www/static/showcase/kadode_portal1x.jpg b/www/static/showcase/kadode_portal1x.jpg
index da46324d45b..3bd2020f6b2 100644
Binary files a/www/static/showcase/kadode_portal1x.jpg and b/www/static/showcase/kadode_portal1x.jpg differ
diff --git a/www/static/showcase/kadode_portal2x.jpg b/www/static/showcase/kadode_portal2x.jpg
index 635e92fc5dc..12968939a84 100644
Binary files a/www/static/showcase/kadode_portal2x.jpg and b/www/static/showcase/kadode_portal2x.jpg differ
diff --git a/www/static/showcase/kita1x.jpg b/www/static/showcase/kita1x.jpg
index 2f82679f7f3..4cb958c638e 100644
Binary files a/www/static/showcase/kita1x.jpg and b/www/static/showcase/kita1x.jpg differ
diff --git a/www/static/showcase/kita2x.jpg b/www/static/showcase/kita2x.jpg
index c6dc72b79fc..2021ed90b25 100644
Binary files a/www/static/showcase/kita2x.jpg and b/www/static/showcase/kita2x.jpg differ
diff --git a/www/static/showcase/ldkit1x.jpg b/www/static/showcase/ldkit1x.jpg
index 1283b08f9aa..53797e4f722 100644
Binary files a/www/static/showcase/ldkit1x.jpg and b/www/static/showcase/ldkit1x.jpg differ
diff --git a/www/static/showcase/ldkit2x.jpg b/www/static/showcase/ldkit2x.jpg
index 75276995729..f23825d7920 100644
Binary files a/www/static/showcase/ldkit2x.jpg and b/www/static/showcase/ldkit2x.jpg differ
diff --git a/www/static/showcase/linksapp1x.jpg b/www/static/showcase/linksapp1x.jpg
index 90b9985e5ed..dd70f676ef8 100644
Binary files a/www/static/showcase/linksapp1x.jpg and b/www/static/showcase/linksapp1x.jpg differ
diff --git a/www/static/showcase/linksapp2x.jpg b/www/static/showcase/linksapp2x.jpg
index 735aed3bd9b..80921b65d98 100644
Binary files a/www/static/showcase/linksapp2x.jpg and b/www/static/showcase/linksapp2x.jpg differ
diff --git a/www/static/showcase/localseostudio1x.jpg b/www/static/showcase/localseostudio1x.jpg
index cc66a0d1671..8606816f732 100644
Binary files a/www/static/showcase/localseostudio1x.jpg and b/www/static/showcase/localseostudio1x.jpg differ
diff --git a/www/static/showcase/localseostudio2x.jpg b/www/static/showcase/localseostudio2x.jpg
index c7def8a6c11..7ebb5154990 100644
Binary files a/www/static/showcase/localseostudio2x.jpg and b/www/static/showcase/localseostudio2x.jpg differ
diff --git a/www/static/showcase/m33t1x.jpg b/www/static/showcase/m33t1x.jpg
index 9562b029005..caa81d84392 100644
Binary files a/www/static/showcase/m33t1x.jpg and b/www/static/showcase/m33t1x.jpg differ
diff --git a/www/static/showcase/m33t2x.jpg b/www/static/showcase/m33t2x.jpg
index acb90b3e2dd..8839ac049b7 100644
Binary files a/www/static/showcase/m33t2x.jpg and b/www/static/showcase/m33t2x.jpg differ
diff --git a/www/static/showcase/melon1x.jpg b/www/static/showcase/melon1x.jpg
index 59d54d63d4c..106283726b8 100644
Binary files a/www/static/showcase/melon1x.jpg and b/www/static/showcase/melon1x.jpg differ
diff --git a/www/static/showcase/melon2x.jpg b/www/static/showcase/melon2x.jpg
index ae181a8da42..29f3bfed0a9 100644
Binary files a/www/static/showcase/melon2x.jpg and b/www/static/showcase/melon2x.jpg differ
diff --git a/www/static/showcase/moe-counter1x.jpg b/www/static/showcase/moe-counter1x.jpg
index 5889bb2b81c..0bb2d7184b7 100644
Binary files a/www/static/showcase/moe-counter1x.jpg and b/www/static/showcase/moe-counter1x.jpg differ
diff --git a/www/static/showcase/moe-counter2x.jpg b/www/static/showcase/moe-counter2x.jpg
index bf55fd12383..bd4055c7d87 100644
Binary files a/www/static/showcase/moe-counter2x.jpg and b/www/static/showcase/moe-counter2x.jpg differ
diff --git a/www/static/showcase/openai-semantic-search1x.jpg b/www/static/showcase/openai-semantic-search1x.jpg
new file mode 100644
index 00000000000..c0316153630
Binary files /dev/null and b/www/static/showcase/openai-semantic-search1x.jpg differ
diff --git a/www/static/showcase/openai-semantic-search2x.jpg b/www/static/showcase/openai-semantic-search2x.jpg
new file mode 100644
index 00000000000..4c7fd8d0314
Binary files /dev/null and b/www/static/showcase/openai-semantic-search2x.jpg differ
diff --git a/www/static/showcase/optimem1x.jpg b/www/static/showcase/optimem1x.jpg
index 57ce5ec39ee..a112aaf4f99 100644
Binary files a/www/static/showcase/optimem1x.jpg and b/www/static/showcase/optimem1x.jpg differ
diff --git a/www/static/showcase/optimem2x.jpg b/www/static/showcase/optimem2x.jpg
index 25871e42da1..2666c68176b 100644
Binary files a/www/static/showcase/optimem2x.jpg and b/www/static/showcase/optimem2x.jpg differ
diff --git a/www/static/showcase/ppaste1x.jpg b/www/static/showcase/ppaste1x.jpg
index 4175c5cc12a..0e09af0202e 100644
Binary files a/www/static/showcase/ppaste1x.jpg and b/www/static/showcase/ppaste1x.jpg differ
diff --git a/www/static/showcase/ppaste2x.jpg b/www/static/showcase/ppaste2x.jpg
index f3c2bbb81fe..2036e24f548 100644
Binary files a/www/static/showcase/ppaste2x.jpg and b/www/static/showcase/ppaste2x.jpg differ
diff --git a/www/static/showcase/videopoker-academy1x.jpg b/www/static/showcase/videopoker-academy1x.jpg
index f9883fabc16..109b16965ac 100644
Binary files a/www/static/showcase/videopoker-academy1x.jpg and b/www/static/showcase/videopoker-academy1x.jpg differ
diff --git a/www/static/showcase/videopoker-academy2x.jpg b/www/static/showcase/videopoker-academy2x.jpg
index 55b2c8fe5da..77d6ea03da0 100644
Binary files a/www/static/showcase/videopoker-academy2x.jpg and b/www/static/showcase/videopoker-academy2x.jpg differ
diff --git a/www/static/showcase/webhook-manager1x.jpg b/www/static/showcase/webhook-manager1x.jpg
index a852f688d65..87dcfc8c2d0 100644
Binary files a/www/static/showcase/webhook-manager1x.jpg and b/www/static/showcase/webhook-manager1x.jpg differ
diff --git a/www/static/showcase/webhook-manager2x.jpg b/www/static/showcase/webhook-manager2x.jpg
index e30b076faa0..ad2b2b37943 100644
Binary files a/www/static/showcase/webhook-manager2x.jpg and b/www/static/showcase/webhook-manager2x.jpg differ
diff --git a/www/static/showcase/wricord1x.jpg b/www/static/showcase/wricord1x.jpg
index 0cf6bad1623..9a021c24ba9 100644
Binary files a/www/static/showcase/wricord1x.jpg and b/www/static/showcase/wricord1x.jpg differ
diff --git a/www/static/showcase/wricord2x.jpg b/www/static/showcase/wricord2x.jpg
index 553c811742d..63ef80aff58 100644
Binary files a/www/static/showcase/wricord2x.jpg and b/www/static/showcase/wricord2x.jpg differ
diff --git a/www/static/showcase/yaml-to-ts1x.jpg b/www/static/showcase/yaml-to-ts1x.jpg
index 70b741332ce..77553f60453 100644
Binary files a/www/static/showcase/yaml-to-ts1x.jpg and b/www/static/showcase/yaml-to-ts1x.jpg differ
diff --git a/www/static/showcase/yaml-to-ts2x.jpg b/www/static/showcase/yaml-to-ts2x.jpg
index b7c40323aa9..26a2183d673 100644
Binary files a/www/static/showcase/yaml-to-ts2x.jpg and b/www/static/showcase/yaml-to-ts2x.jpg differ
diff --git a/www/static/showcase/ycrm1x.jpg b/www/static/showcase/ycrm1x.jpg
index 6b5aa3d226e..8f253afc958 100644
Binary files a/www/static/showcase/ycrm1x.jpg and b/www/static/showcase/ycrm1x.jpg differ
diff --git a/www/static/showcase/ycrm2x.jpg b/www/static/showcase/ycrm2x.jpg
index b97c0e498a0..cfbb7586136 100644
Binary files a/www/static/showcase/ycrm2x.jpg and b/www/static/showcase/ycrm2x.jpg differ
diff --git a/www/static/wordmark.svg b/www/static/wordmark.svg
index 7e58d933e0f..3324d76f512 100644
--- a/www/static/wordmark.svg
+++ b/www/static/wordmark.svg
@@ -1,3 +1 @@
-<svg width="250" height="75" viewBox="0 0 250 75" fill="none" xmlns="http://www.w3.org/2000/svg">
-<path d="M14.0805 0.761269V70.0893H0V0.761269H14.0805ZM35.6322 30.2257V41.7803H10.3448V30.2257H35.6322ZM38.5057 0.761269V12.3159H10.3448V0.761269H38.5057ZM46.5517 0.761269H68.9655C73.5632 0.761269 77.5862 1.62785 80.7471 3.36105C83.908 4.80538 86.4943 7.11632 88.2184 10.2939C90.1641 13.8269 91.1548 17.8107 91.092 21.8485C91.092 25.6038 90.5172 28.7813 89.3678 31.3811C88.5057 34.2698 87.069 36.2919 85.0575 38.0251C83.046 39.7583 81.0345 40.9137 78.4483 42.3581L74.1379 44.669H56.0345V33.1143H68.3908C70.0971 33.2247 71.7975 32.8225 73.2759 31.9589C74.4253 31.0923 75.2874 29.9368 76.1494 28.4925C76.8253 26.6458 77.1186 24.6798 77.0115 22.7151C77.0115 20.6931 76.7241 18.9599 76.1494 17.2267C75.5747 15.7823 74.7126 14.338 73.2759 13.7603C72.4138 12.8937 70.6897 12.3159 68.9655 12.3159H60.3448V70.0893H46.5517V0.761269V0.761269ZM78.1609 70.0893L65.5172 39.1805H79.8851L93.1035 69.5115V70.0893H78.1609ZM140.517 58.5346V70.0893H110.345V58.5346H140.517ZM114.655 0.761269V70.0893H100.575V0.761269H114.943H114.655ZM136.494 29.0702V40.0471H110.345V29.0702H136.207H136.494ZM140.517 0.761269V12.3159H110.345V0.761269H140.517ZM178.161 51.8907C178.161 50.7352 178.161 49.5797 177.586 48.7131C177.586 47.5577 177.012 46.6911 176.149 45.8245L173.276 42.9358L167.816 40.6249L160.345 37.1585L154.023 32.8255C152.021 31.2537 150.359 29.2878 149.138 27.0481C148.066 24.5949 147.574 21.9252 147.701 19.2487C147.701 16.3601 147.989 13.4714 149.138 11.4493C150.166 9.00506 151.739 6.83084 153.736 5.09427C155.747 3.64994 158.046 2.20559 160.632 1.33899C167.362 -0.855543 174.677 -0.337717 181.034 2.78333C184.483 4.51653 186.782 7.11632 188.793 10.2939C190.517 13.1825 191.667 17.2267 191.667 21.2708H177.299C177.424 19.5169 177.229 17.7548 176.724 16.0712C176.149 14.6269 175.287 13.1825 173.851 12.6048C172.701 11.7382 170.977 11.1605 169.253 11.1605C167.529 11.1605 166.092 11.7382 164.943 12.3159C163.793 12.8937 162.931 14.0491 162.069 15.2046L161.494 19.2487C161.494 20.4042 161.782 21.5597 162.356 22.4263L164.655 24.7372C167.235 26.2818 169.924 27.6335 172.701 28.7813L181.034 32.8255C183.199 34.2594 185.136 36.0121 186.782 38.0251C188.793 39.7583 189.655 41.7803 190.805 43.8024C192.605 48.9619 192.503 54.5998 190.517 59.6901C189.368 62.001 187.931 64.0231 186.207 65.7563C184.115 67.5878 181.669 68.9647 179.023 69.8004C173.276 71.2447 176.149 75 170.402 75C164.655 75 166.667 70.667 161.207 69.8004C158.333 68.9338 155.46 67.4895 153.448 65.7563C151.19 63.7856 149.419 61.313 148.276 58.5346C147.126 55.6459 146.552 52.1795 146.552 48.4243H160.632C160.632 50.4463 160.632 52.1795 161.207 53.6239C161.494 55.0682 162.069 56.5125 162.931 57.3791C163.793 57.9569 164.943 58.8235 166.092 59.1123C167.529 59.6901 168.966 59.6901 170.402 59.6901C172.414 59.6901 173.851 59.6901 175 58.8235C176.149 57.9569 176.724 57.0903 177.299 55.9348C177.874 54.7793 178.161 53.335 178.161 51.8907V51.8907ZM239.943 28.7813V40.336H211.207V28.7813H239.943ZM215.23 0.761269V70.0893H201.437V0.761269H215.23ZM250 0.761269V70.0893H236.207V0.761269H250Z" fill="#0A140C"/>
-</svg>
+<svg xmlns="http://www.w3.org/2000/svg" width="250" height="75" fill="none" viewBox="0 0 250 75"><path fill="#0A140C" d="M14.0805 0.761269V70.0893H0V0.761269H14.0805ZM35.6322 30.2257V41.7803H10.3448V30.2257H35.6322ZM38.5057 0.761269V12.3159H10.3448V0.761269H38.5057ZM46.5517 0.761269H68.9655C73.5632 0.761269 77.5862 1.62785 80.7471 3.36105C83.908 4.80538 86.4943 7.11632 88.2184 10.2939C90.1641 13.8269 91.1548 17.8107 91.092 21.8485C91.092 25.6038 90.5172 28.7813 89.3678 31.3811C88.5057 34.2698 87.069 36.2919 85.0575 38.0251C83.046 39.7583 81.0345 40.9137 78.4483 42.3581L74.1379 44.669H56.0345V33.1143H68.3908C70.0971 33.2247 71.7975 32.8225 73.2759 31.9589C74.4253 31.0923 75.2874 29.9368 76.1494 28.4925C76.8253 26.6458 77.1186 24.6798 77.0115 22.7151C77.0115 20.6931 76.7241 18.9599 76.1494 17.2267C75.5747 15.7823 74.7126 14.338 73.2759 13.7603C72.4138 12.8937 70.6897 12.3159 68.9655 12.3159H60.3448V70.0893H46.5517V0.761269V0.761269ZM78.1609 70.0893L65.5172 39.1805H79.8851L93.1035 69.5115V70.0893H78.1609ZM140.517 58.5346V70.0893H110.345V58.5346H140.517ZM114.655 0.761269V70.0893H100.575V0.761269H114.943H114.655ZM136.494 29.0702V40.0471H110.345V29.0702H136.207H136.494ZM140.517 0.761269V12.3159H110.345V0.761269H140.517ZM178.161 51.8907C178.161 50.7352 178.161 49.5797 177.586 48.7131C177.586 47.5577 177.012 46.6911 176.149 45.8245L173.276 42.9358L167.816 40.6249L160.345 37.1585L154.023 32.8255C152.021 31.2537 150.359 29.2878 149.138 27.0481C148.066 24.5949 147.574 21.9252 147.701 19.2487C147.701 16.3601 147.989 13.4714 149.138 11.4493C150.166 9.00506 151.739 6.83084 153.736 5.09427C155.747 3.64994 158.046 2.20559 160.632 1.33899C167.362 -0.855543 174.677 -0.337717 181.034 2.78333C184.483 4.51653 186.782 7.11632 188.793 10.2939C190.517 13.1825 191.667 17.2267 191.667 21.2708H177.299C177.424 19.5169 177.229 17.7548 176.724 16.0712C176.149 14.6269 175.287 13.1825 173.851 12.6048C172.701 11.7382 170.977 11.1605 169.253 11.1605C167.529 11.1605 166.092 11.7382 164.943 12.3159C163.793 12.8937 162.931 14.0491 162.069 15.2046L161.494 19.2487C161.494 20.4042 161.782 21.5597 162.356 22.4263L164.655 24.7372C167.235 26.2818 169.924 27.6335 172.701 28.7813L181.034 32.8255C183.199 34.2594 185.136 36.0121 186.782 38.0251C188.793 39.7583 189.655 41.7803 190.805 43.8024C192.605 48.9619 192.503 54.5998 190.517 59.6901C189.368 62.001 187.931 64.0231 186.207 65.7563C184.115 67.5878 181.669 68.9647 179.023 69.8004C173.276 71.2447 176.149 75 170.402 75C164.655 75 166.667 70.667 161.207 69.8004C158.333 68.9338 155.46 67.4895 153.448 65.7563C151.19 63.7856 149.419 61.313 148.276 58.5346C147.126 55.6459 146.552 52.1795 146.552 48.4243H160.632C160.632 50.4463 160.632 52.1795 161.207 53.6239C161.494 55.0682 162.069 56.5125 162.931 57.3791C163.793 57.9569 164.943 58.8235 166.092 59.1123C167.529 59.6901 168.966 59.6901 170.402 59.6901C172.414 59.6901 173.851 59.6901 175 58.8235C176.149 57.9569 176.724 57.0903 177.299 55.9348C177.874 54.7793 178.161 53.335 178.161 51.8907V51.8907ZM239.943 28.7813V40.336H211.207V28.7813H239.943ZM215.23 0.761269V70.0893H201.437V0.761269H215.23ZM250 0.761269V70.0893H236.207V0.761269H250Z"/></svg>
\ No newline at end of file
diff --git a/www/utils/markdown.ts b/www/utils/markdown.ts
index e3da90d40d8..26fc1b27b9f 100644
--- a/www/utils/markdown.ts
+++ b/www/utils/markdown.ts
@@ -4,4 +4,4 @@ import "https://esm.sh/prismjs@1.29.0/components/prism-typescript.js?no-check";
 import "https://esm.sh/prismjs@1.29.0/components/prism-tsx.js?no-check";
 import "https://esm.sh/prismjs@1.29.0/components/prism-diff.js?no-check";
 
-export { extract as frontMatter } from "$std/encoding/front_matter/yaml.ts";
+export { extract as frontMatter } from "$std/front_matter/yaml.ts";
diff --git a/www/utils/screenshot.ts b/www/utils/screenshot.ts
index aa287b02767..d8b06d68a23 100644
--- a/www/utils/screenshot.ts
+++ b/www/utils/screenshot.ts
@@ -1,6 +1,6 @@
 import puppeteer from "https://deno.land/x/puppeteer@16.2.0/mod.ts";
 import { Image } from "https://deno.land/x/imagescript@1.2.15/mod.ts";
-import { join } from "https://deno.land/std@0.178.0/path/mod.ts";
+import { join } from "https://deno.land/std@0.190.0/path/mod.ts";
 
 const url = Deno.args[0];
 const id = Deno.args[1];
