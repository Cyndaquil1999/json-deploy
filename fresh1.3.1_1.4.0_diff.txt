diff --git a/.gitattributes b/.gitattributes
new file mode 100644
index 00000000000..a34b868bda0
--- /dev/null
+++ b/.gitattributes
@@ -0,0 +1,2 @@
+# Use Unix line endings in all text files.
+* text=auto eol=lf
\ No newline at end of file
diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml
index dcab28fe0d2..c6d1c749460 100644
--- a/.github/workflows/ci.yml
+++ b/.github/workflows/ci.yml
@@ -16,6 +16,13 @@ jobs:
       matrix:
         deno: ["v1.x", "canary"]
         os: [macOS-latest, windows-latest, ubuntu-latest]
+        include:
+        - os: ubuntu-latest
+          cache_path: ~/.cache/deno/
+        - os: macos-latest
+          cache_path: ~/Library/Caches/deno/
+        - os: windows-latest
+          cache_path: ~\AppData\Local\deno\
 
     steps:
       - name: Checkout repo
@@ -27,67 +34,35 @@ jobs:
           deno-version: ${{ matrix.deno }}
 
       - name: Verify formatting
-        if: startsWith(matrix.os, 'ubuntu') && matrix.deno == 'v1.x'
         run: deno fmt --check
 
       - name: Run linter
-        if: startsWith(matrix.os, 'ubuntu') && matrix.deno == 'canary'
         run: deno lint
 
-      - name: Cache dependencies
-        if: startsWith(matrix.os, 'ubuntu') && matrix.deno == 'v1.x'
-        run: deno cache --config=www/deno.json src/dev/deps.ts src/server/deps.ts www/main.ts
-
-      - name: Cache Chrome (Linux)
-        if: startsWith(matrix.os, 'ubuntu')
-        uses: actions/cache@v3
-        with:
-          path: ~/.cache/deno/deno_puppeteer
-          key: chrome-1022525-${{ runner.os }}-${{ hashFiles('tests/deps.ts') }}
-          restore-keys: chrome-1022525-${{ runner.os }}-
-
-      - name: Cache Chrome (macOS)
-        if: startsWith(matrix.os, 'mac')
-        uses: actions/cache@v3
-        with:
-          path: ~/Library/Caches/deno/deno_puppeteer
-          key: chrome-1022525-${{ runner.os }}-${{ hashFiles('tests/deps.ts') }}
-          restore-keys: chrome-1022525-${{ runner.os }}-
+      - name: Spell-check
+        if: startsWith(matrix.os, 'ubuntu') && matrix.deno == 'canary'
+        uses: crate-ci/typos@master
 
-      - name: Cache Chrome (Windows)
-        if: startsWith(matrix.os, 'win')
+      - name: Cache dependencies and Chrome
         uses: actions/cache@v3
         with:
-          path: "C:\\Users\\RUNNER~1\\AppData\\Local\\deno\\deno_puppeteer"
-          key: chrome-1022525-${{ runner.os }}-${{ hashFiles('tests/deps.ts') }}
-          restore-keys: chrome-1022525-${{ runner.os }}-
+          path: |
+            ${{ matrix.cache_path }}deps
+            ${{ matrix.cache_path }}deno_puppeteer
+          key: ${{ runner.os }}-${{ hashFiles('**/*deps.ts', 'tests/fixture_twind_hydrate/twind.config.ts') }}
 
-      - name: Install Chromium (Unix)
-        if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'mac')
-        run: PUPPETEER_PRODUCT=chrome deno run -A --unstable https://deno.land/x/puppeteer@16.2.0/install.ts
+      - name: Install Chromium
+        run: deno run -A --unstable https://deno.land/x/puppeteer@16.2.0/install.ts
+        env:
+          PUPPETEER_PRODUCT: chrome
 
-      - name: Install Chromium (Windows)
-        if: startsWith(matrix.os, 'windows')
-        run: set "PUPPETEER_PRODUCT=chrome" && deno run -A --unstable https://deno.land/x/puppeteer@16.2.0/install.ts
+      - name: Type check project
+        run: deno task check:types
 
-      - name: Run tests
+      - name: Run tests Windows
+        if: matrix.os == 'windows-latest'
         run: deno test -A
 
-      - name: Type check init script
-        run: deno check --remote init.ts
-
-      - name: Type check website
-        run: deno check main.ts dev.ts
-        working-directory: www/
-
-      - name: Type check demo
-        run: deno check --remote main.ts dev.ts
-        working-directory: demo
-
-      - name: Type check tests/fixture
-        run: deno check main.ts dev.ts
-        working-directory: tests/fixture/
-
-      - name: Type check tests/fixture_error
-        run: deno check main.ts dev.ts
-        working-directory: tests/fixture_error/
+      - name: Run tests macOS + Linux
+        if: matrix.os != 'windows-latest'
+        run: deno test -A --parallel
diff --git a/.github/workflows/deploy.yml b/.github/workflows/deploy.yml
new file mode 100644
index 00000000000..9be233d19f1
--- /dev/null
+++ b/.github/workflows/deploy.yml
@@ -0,0 +1,35 @@
+name: Deploy
+on:
+  push:
+    branches: [main]
+  pull_request:
+    branches: main
+
+jobs:
+  deploy:
+    name: Deploy
+    runs-on: ubuntu-latest
+
+    permissions:
+      id-token: write # Needed for auth with Deno Deploy
+      contents: read # Needed to clone the repository
+
+    steps:
+      - name: Clone repository
+        uses: actions/checkout@v3
+
+      - name: Install Deno
+        uses: denoland/setup-deno@v1
+        with:
+          deno-version: v1.x
+
+      - name: Build step
+        working-directory: ./www
+        run: "deno task build" # üìù Update the build command(s) if necessary
+
+      - name: Upload to Deno Deploy
+        uses: denoland/deployctl@v1
+        with:
+          project: "fresh" # üìù Update the deploy project name if necessary
+          entrypoint: "./www/main.ts" # üìù Update the entrypoint if necessary
+          root: "."
diff --git a/.github/workflows/lighthouse.yml b/.github/workflows/lighthouse.yml
index 26ec2ced53c..67c2b49fabc 100644
--- a/.github/workflows/lighthouse.yml
+++ b/.github/workflows/lighthouse.yml
@@ -13,15 +13,15 @@ jobs:
       URL: ${{ github.event.deployment_status.environment_url }}
 
     steps:
-      - uses: actions/checkout@v3
+      - name: Setup repo
+        uses: actions/checkout@v3
 
-      - name: Install Node.js
-        uses: actions/setup-node@v3
-
-      - name: Install Lighthouse CI
-        run: npm install -g @lhci/cli@0.9.x
-
-      - name: Run Lighthouse
-        run: lhci autorun --collect.url="$URL" --collect.url="$URL/docs/introduction" --upload.target="temporary-public-storage"
+      - name: Audit URLs using Lighthouse
+        uses: treosh/lighthouse-ci-action@v10
         env:
           LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
+        with:
+          temporaryPublicStorage: true
+          urls: |
+            $URL
+            $URL/docs/introduction
diff --git a/.gitignore b/.gitignore
new file mode 100644
index 00000000000..03b773a3a49
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1 @@
+_fresh/
diff --git a/.vscode/import_map.json b/.vscode/import_map.json
index 235bcbfb26e..eb692025c58 100644
--- a/.vscode/import_map.json
+++ b/.vscode/import_map.json
@@ -8,12 +8,13 @@
     "twind/": "https://esm.sh/twind@0.16.19/",
     "preact": "https://esm.sh/preact@10.15.1",
     "preact/": "https://esm.sh/preact@10.15.1/",
-    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.2.0",
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.2.1",
     "@preact/signals": "https://esm.sh/*@preact/signals@1.1.3",
     "@preact/signals-core": "https://esm.sh/@preact/signals-core@1.2.3",
     "@preact/signals-core@1.2.3": "https://esm.sh/@preact/signals-core@1.2.3",
     "@preact/signals-core@1.3.0": "https://esm.sh/@preact/signals-core@1.3.0",
     "$std/": "https://deno.land/std@0.193.0/",
-    "$ga4": "https://raw.githubusercontent.com/denoland/ga4/main/mod.ts"
+    "$ga4": "https://raw.githubusercontent.com/denoland/ga4/main/mod.ts",
+    "$marked-mangle": "https://esm.sh/marked-mangle@1.0.1"
   }
 }
diff --git a/.vscode/settings.json b/.vscode/settings.json
index 0e367099119..1fb8e806636 100644
--- a/.vscode/settings.json
+++ b/.vscode/settings.json
@@ -3,6 +3,7 @@
   "deno.lint": true,
   "deno.importMap": "./.vscode/import_map.json",
   "deno.codeLens.test": true,
+  "editor.formatOnSave": true,
   "editor.defaultFormatter": "denoland.vscode-deno",
   "[typescriptreact]": {
     "editor.defaultFormatter": "denoland.vscode-deno"
diff --git a/README.md b/README.md
index 17dbd8f94b7..53d82ca491c 100644
--- a/README.md
+++ b/README.md
@@ -3,7 +3,7 @@
 
 # fresh
 
-<img align="right" src="https://fresh.deno.dev/logo.svg" height="150px" alt="the fresh logo: a sliced lemon dripping with juice">
+<img align="right" src="https://fresh.deno.dev/logo.svg" height="150px" alt="The Fresh logo: a sliced lemon dripping with juice">
 
 **Fresh** is a next generation web framework, built for speed, reliability, and
 simplicity.
@@ -70,7 +70,7 @@ We appreciate your help! To contribute, please read our
 
 ## Adding your project to the showcase
 
-If you feel that your project would be helpful to other fresh users, please
+If you feel that your project would be helpful to other Fresh users, please
 consider putting your project on the
 [showcase](https://fresh.deno.dev/showcase). However, websites that are just for
 promotional purposes may not be listed.
diff --git a/demo/README.md b/demo/README.md
index f605bd96f69..8db8195420a 100644
--- a/demo/README.md
+++ b/demo/README.md
@@ -1,4 +1,4 @@
-# fresh project
+# Fresh project
 
 ### Usage
 
diff --git a/demo/deno.json b/demo/deno.json
index 4cd7f216d3e..8e5d0fb4af7 100644
--- a/demo/deno.json
+++ b/demo/deno.json
@@ -7,7 +7,7 @@
     "$fresh/": "../",
     "preact": "https://esm.sh/preact@10.15.1",
     "preact/": "https://esm.sh/preact@10.15.1/",
-    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.2.0",
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.2.1",
     "@preact/signals": "https://esm.sh/*@preact/signals@1.1.3",
     "@preact/signals-core": "https://esm.sh/@preact/signals-core@1.2.3"
   },
diff --git a/demo/fresh.gen.ts b/demo/fresh.gen.ts
index 15c6c328ba7..bf86bdbdc76 100644
--- a/demo/fresh.gen.ts
+++ b/demo/fresh.gen.ts
@@ -1,4 +1,4 @@
-// DO NOT EDIT. This file is generated by fresh.
+// DO NOT EDIT. This file is generated by Fresh.
 // This file SHOULD be checked into source version control.
 // This file is automatically updated during development when running `dev.ts`.
 
diff --git a/deno.json b/deno.json
index 6ca5be78145..0284e689ea4 100644
--- a/deno.json
+++ b/deno.json
@@ -1,17 +1,16 @@
 {
   "lock": false,
   "tasks": {
-    "test": "deno test -A --parallel && deno check --config=www/deno.json www/main.ts www/dev.ts && deno check init.ts",
+    "test": "deno test -A --parallel",
     "fixture": "deno run -A --watch=static/,routes/ tests/fixture/dev.ts",
     "www": "deno task --cwd=www start",
-    "screenshot": "deno run -A www/utils/screenshot.ts"
+    "screenshot": "deno run -A www/utils/screenshot.ts",
+    "check:types": "deno check **/*.ts && deno check **/*.tsx",
+    "ok": "deno fmt --check && deno lint && deno task check:types && deno task test"
   },
   "importMap": "./.vscode/import_map.json",
   "compilerOptions": {
     "jsx": "react-jsx",
     "jsxImportSource": "preact"
-  },
-  "test": {
-    "exclude": ["www/"]
   }
 }
diff --git a/docs/concepts/app-wrapper.md b/docs/concepts/app-wrapper.md
deleted file mode 100644
index 7d83bafcc82..00000000000
--- a/docs/concepts/app-wrapper.md
+++ /dev/null
@@ -1,28 +0,0 @@
----
-description: |
-  Add a global application wrapper to provide common meta tags or context for application routes.
----
-
-An application wrapper is defined in an `_app.tsx` file in `routes/` folder. It
-must contain a default export that is a regular Preact component. Only one such
-wrapper is allowed per application.
-
-The component to be wrapped is received via props, in addition to a few other
-things. This allows for the introduction of a global container functioning as a
-template which can be conditioned based on state and params. Note that any state
-set by middleware is available via `props.state`.
-
-```tsx
-// routes/_app.tsx
-
-import { AppProps } from "$fresh/server.ts";
-
-export default function App({ Component, state }: AppProps) {
-  //do something with state here
-  return (
-    <div class="wrapper">
-      <Component />
-    </div>
-  );
-}
-```
diff --git a/docs/getting-started/fetching-data.md b/docs/getting-started/fetching-data.md
deleted file mode 100644
index 7716e6c76b6..00000000000
--- a/docs/getting-started/fetching-data.md
+++ /dev/null
@@ -1,64 +0,0 @@
----
-description: |
-  Fetch data for routes dynamically by creating a custom handler and passing
-  data to the render function.
----
-
-All of the pages in the demo project so far have not used any dynamic data
-during rendering. In real projects, this is often different. In many cases you
-may need to read a file from disk (e.g. markdown for a blog post), or fetch some
-user data from an API or database.
-
-These operations are all asynchronous. Rendering however, is always synchronous.
-Instead of fetching data directly during rendering, it should be loaded in a
-route's `handler` function and then passed to the page component via first
-argument to `ctx.render()`.
-
-The data that is passed to `ctx.render()` can then be accessed via the
-`props.data` field on the page component.
-
-Here is an example of a route that fetches user data from the GitHub API and
-renders it in a page component.
-
-```tsx
-// routes/github/[username].tsx
-
-import { Handlers, PageProps } from "$fresh/server.ts";
-
-interface User {
-  login: string;
-  name: string;
-  avatar_url: string;
-}
-
-export const handler: Handlers<User | null> = {
-  async GET(_, ctx) {
-    const { username } = ctx.params;
-    const resp = await fetch(`https://api.github.com/users/${username}`);
-    if (resp.status === 404) {
-      return ctx.render(null);
-    }
-    const user: User = await resp.json();
-    return ctx.render(user);
-  },
-};
-
-export default function Page({ data }: PageProps<User | null>) {
-  if (!data) {
-    return <h1>User not found</h1>;
-  }
-
-  return (
-    <div>
-      <img src={data.avatar_url} width={64} height={64} />
-      <h1>{data.name}</h1>
-      <p>{data.login}</p>
-    </div>
-  );
-}
-```
-
-The data is first fetched inside of the handler by making an API call to GitHub.
-If the API call succeeds, the data is passed to the page component. If the API
-call fails, the page component is rendered with `null` as the data. The page
-component grabs the data from the props and renders it.
diff --git a/docs/latest/concepts/ahead-of-time-builds.md b/docs/latest/concepts/ahead-of-time-builds.md
new file mode 100644
index 00000000000..e569f067a59
--- /dev/null
+++ b/docs/latest/concepts/ahead-of-time-builds.md
@@ -0,0 +1,135 @@
+---
+description: |
+  Fresh optimize assets ahead of time, which makes pages load way quicker.
+---
+
+Fresh enables you to pre-optimize frontend assets before the code is deployed.
+During that process the code for Islands will be compressed and optimized, so
+that Fresh can send as little code as possible to the browser. Depending on the
+amount of code an island needs, this process can take several seconds if done on
+the fly serverside.
+
+Doing those optimizations ahead-of-time and deploying the already optimized
+assets alongside with your code, allows Fresh to treat them as like any other
+static file and can serve it immediately without any further processing. On
+pages with islands, having to do no processing greatly speeds up page load
+times.
+
+## Creating an optimized build
+
+To have Fresh optimize all the assets, run one of the following commands:
+
+```sh
+# As a task in newer Fresh projects
+deno task build
+# or invoke it manually
+deno run -A dev.ts build
+```
+
+This will create a `_fresh` folder in the project directory. That folder
+contains the optimized assets and a `snapshot.json` file which includes some
+metadata for Fresh.
+
+> ‚ÑπÔ∏è The `_fresh` folder should not be committed to the repository. Add an entry
+> in the `.gitignore` file to ensure that it is not committed. Create that file
+> at the root of your git repository if not present.
+>
+> ```gitignore .gitignore
+> # Ignore fresh build directory
+> _fresh/
+> ```
+
+## Running Fresh with optimized assets
+
+When Fresh is started in non-development mode (usually via `main.ts`), Fresh
+will automatically pick up optimized assets when a `_fresh` folder exists. If
+found, Fresh will print the following message to the terminal:
+
+```sh Terminal output
+Using snapshot found at /path/to/project/_fresh
+```
+
+## Deploying an optimized Fresh project
+
+To generate optimized assets whenever you push changes to the `main` branch of
+your project, copy the following GitHub action and add it under
+`.github/workflows/deploy.yml` in your project.
+
+```yml .github/workflows/deploy.yml
+name: Deploy
+on:
+  push:
+    branches: [main]
+  pull_request:
+    branches: main
+
+jobs:
+  deploy:
+    name: Deploy
+    runs-on: ubuntu-latest
+
+    permissions:
+      id-token: write # Needed for auth with Deno Deploy
+      contents: read # Needed to clone the repository
+
+    steps:
+      - name: Clone repository
+        uses: actions/checkout@v3
+
+      - name: Install Deno
+        uses: denoland/setup-deno@v1
+        with:
+          deno-version: v1.x
+
+      - name: Build step
+        run: "deno task build" # üìù Update the build command(s) if necessary
+
+      - name: Upload to Deno Deploy
+        uses: denoland/deployctl@v1
+        with:
+          project: "example-project" # üìù Update the deploy project name if necessary
+          entrypoint: "./main.ts" # üìù Update the entrypoint if necessary
+```
+
+> ‚ÑπÔ∏è **Important:** The project name here must match the project name you've
+> picked in Deno Deploy.
+
+On the Deno Deploy side change the GitHub integration mode to GitHub Actions.
+You need to unlink first, if you have an existing project that's linked with the
+"Automatic" mode.
+
+![Deno Deploy UI screenshot that shows the project dropdown and highlights the GitHub Action option](/docs/deno-deploy-gh-action.jpg)
+
+Once this is set up you're ready for your next deployment. Whenever a new PR is
+merged into the `main` branch on GitHub the deploy action will be executed and
+deploy the optimized assets to Deno Deploy.
+
+## Migrating existing projects with Plugins
+
+If you're using Fresh plugins, extract them into a `fresh.config.ts` file, so
+that both the `dev.ts` and `main.ts` script have access to them.
+
+```ts fresh.config.ts
+import { defineConfig } from "$fresh/server.ts";
+import twindPlugin from "$fresh/plugins/twind.ts";
+import twindConfig from "./twind.config.ts";
+
+export default defineConfig({
+  plugins: [twindPlugin(twindConfig)],
+});
+```
+
+```ts main.ts
+import { start } from "$fresh/server.ts";
+import manifest from "./fresh.gen.ts";
+import config from "./fresh.config.ts";
+
+await start(manifest, config);
+```
+
+```ts dev.ts
+import dev from "$fresh/dev.ts";
+import config from "./fresh.config.ts";
+
+await dev(import.meta.url, "./main.ts", config);
+```
diff --git a/docs/latest/concepts/app-wrapper.md b/docs/latest/concepts/app-wrapper.md
new file mode 100644
index 00000000000..47a96c34e5a
--- /dev/null
+++ b/docs/latest/concepts/app-wrapper.md
@@ -0,0 +1,104 @@
+---
+description: |
+  Add a global app wrapper to provide common meta tags or context for application routes.
+---
+
+An app wrapper is defined in an `_app.tsx` file in `routes/` folder and is
+typically used to create the outer structure of an HTML document. It must
+contain a default export that is a regular Preact component. Only one such
+wrapper is allowed per application.
+
+The component to be wrapped is received via props, in addition to a few other
+things. This allows for the introduction of a global container functioning as a
+template which can be conditioned based on state and params. Note that any state
+set by middleware is available via `props.state`.
+
+```tsx routes/_app.tsx
+import { AppProps } from "$fresh/server.ts";
+
+export default function App({ Component, state }: AppProps) {
+  // do something with state here
+  return (
+    <html>
+      <head>
+        <meta charSet="utf-8" />
+        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
+        <title>My Fresh app</title>
+      </head>
+      <body>
+        <Component />
+      </body>
+    </html>
+  );
+}
+```
+
+## Async app wrapper
+
+Similar to routes and layouts, the app wrapper can be made asynchronous. This
+changes the function signature so that the first argument is the `Request`
+instsance and the second one is the `AppContext`.
+
+```tsx routes/_app.tsx
+import { AppContext } from "$fresh/server.ts";
+
+export default async function App(req: Request, ctx: AppContext) {
+  const data = await loadData();
+
+  return (
+    <html>
+      <head>
+        <meta charSet="utf-8" />
+        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
+        <title>My Fresh app</title>
+      </head>
+      <body>
+        <h1>Hello {data.name}</h1>
+        <ctx.Component />
+      </body>
+    </html>
+  );
+}
+```
+
+### Define helper
+
+To make it quicker to type the async app wrapper, Fresh includes a `defineApp`
+helper which already infers the correct types for you.
+
+```tsx routes/_app.tsx
+import { defineApp } from "$fresh/server.ts";
+
+export default defineApp(async (req, ctx) => {
+  const data = await loadData();
+
+  return (
+    <html>
+      <head>
+        <meta charSet="utf-8" />
+        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
+        <title>My Fresh app</title>
+      </head>
+      <body>
+        <h1>Hello {data.name}</h1>
+        <ctx.Component />
+      </body>
+    </html>
+  );
+});
+```
+
+## Disabling the app wrapper
+
+Rendering the app wrapper can be skipped on a route or layout basis. To do that,
+set `skipAppWrapper: true` to the layout or route config.
+
+```tsx routes/my-special-route.tsx
+export const config: RouteConfig {
+  skipAppWrapper: true; // Skip the app wrapper during rendering
+}
+
+export default function Page() {
+  // ...
+}
+```
diff --git a/docs/concepts/architecture.md b/docs/latest/concepts/architecture.md
similarity index 100%
rename from docs/concepts/architecture.md
rename to docs/latest/concepts/architecture.md
diff --git a/docs/concepts/data-fetching.md b/docs/latest/concepts/data-fetching.md
similarity index 97%
rename from docs/concepts/data-fetching.md
rename to docs/latest/concepts/data-fetching.md
index 6581d802b51..2504b597847 100644
--- a/docs/concepts/data-fetching.md
+++ b/docs/latest/concepts/data-fetching.md
@@ -10,7 +10,7 @@ component through the `data` property on the `props`.
 
 Here is an example:
 
-```tsx
+```tsx routes/projects/[id].tsx
 interface Project {
   name: string;
   stars: number;
diff --git a/docs/concepts/deployment.md b/docs/latest/concepts/deployment.md
similarity index 97%
rename from docs/concepts/deployment.md
rename to docs/latest/concepts/deployment.md
index 14e3586dd97..414a0afce25 100644
--- a/docs/concepts/deployment.md
+++ b/docs/latest/concepts/deployment.md
@@ -35,7 +35,7 @@ caching **will** cause your project to not function correctly.
 
 Here is an example `Dockerfile` for a Fresh project:
 
-```dockerfile
+```dockerfile Dockerfile
 FROM denoland/deno:1.35.0
 
 ARG GIT_REVISION
@@ -53,13 +53,13 @@ CMD ["run", "-A", "main.ts"]
 
 To build your Docker image inside of a Git repository:
 
-```sh
+```sh Terminal
 $ docker build --build-arg GIT_REVISION=$(git rev-parse HEAD) -t my-fresh-app .
 ```
 
 Then run your Docker container:
 
-```sh
+```sh Terminal
 $ docker run -t -i -p 80:8000 my-fresh-app
 ```
 
diff --git a/docs/concepts/error-pages.md b/docs/latest/concepts/error-pages.md
similarity index 96%
rename from docs/concepts/error-pages.md
rename to docs/latest/concepts/error-pages.md
index dc5cd30d336..f57c8bb1fe8 100644
--- a/docs/concepts/error-pages.md
+++ b/docs/latest/concepts/error-pages.md
@@ -14,7 +14,7 @@ The 404 page can be customized by creating a `_404.tsx` file in the `routes/`
 folder. The file must have a default export that is a regular Preact component.
 A props object of type `UnknownPageProps` is passed in as an argument.
 
-```tsx
+```tsx routes/_404.tsx
 import { UnknownPageProps } from "$fresh/server.ts";
 
 export default function NotFoundPage({ url }: UnknownPageProps) {
@@ -29,7 +29,7 @@ In some cases, one needs to manually trigger the rendering of the 404 page, for
 example when the route did match, but the requested resource does not exist.
 This can be achieved with `ctx.renderNotFound`.
 
-```tsx
+```tsx routes/blog/[slug].tsx
 import { Handlers, PageProps } from "$fresh/server.ts";
 
 export const handler: Handlers = {
@@ -60,7 +60,7 @@ The 500 page can be customized by creating a `_500.tsx` file in the `routes/`
 folder. The file must have a default export that is a regular Preact component.
 A props object of type `ErrorPageProps` is passed in as an argument.
 
-```tsx
+```tsx routes/_500.tsx
 import { ErrorPageProps } from "$fresh/server.ts";
 
 export default function Error500Page({ error }: ErrorPageProps) {
diff --git a/docs/concepts/forms.md b/docs/latest/concepts/forms.md
similarity index 98%
rename from docs/concepts/forms.md
rename to docs/latest/concepts/forms.md
index c972a090e78..307d82bdf43 100644
--- a/docs/concepts/forms.md
+++ b/docs/latest/concepts/forms.md
@@ -18,8 +18,7 @@ or as a `POST` request with `multipart/form-data`.
 This example demonstrates how to handle `multipart/form-data` `<form>`
 submissions:
 
-```tsx
-// routes/subscribe.tsx
+```tsx routes/subscribe.tsx
 import { Handlers } from "$fresh/server.ts";
 
 export const handler: Handlers = {
diff --git a/docs/concepts/index.md b/docs/latest/concepts/index.md
similarity index 100%
rename from docs/concepts/index.md
rename to docs/latest/concepts/index.md
diff --git a/docs/concepts/islands.md b/docs/latest/concepts/islands.md
similarity index 54%
rename from docs/concepts/islands.md
rename to docs/latest/concepts/islands.md
index 4451445dfcf..5a65765cb4b 100644
--- a/docs/concepts/islands.md
+++ b/docs/latest/concepts/islands.md
@@ -11,9 +11,7 @@ Islands are defined by creating a file in the `islands/` folder in a Fresh
 project. The name of this file must be a PascalCase or kebab-case name of the
 island.
 
-```tsx
-// islands/MyIsland.tsx
-
+```tsx islands/my-island.tsx
 import { useSignal } from "@preact/signals";
 
 export default function MyIsland() {
@@ -31,6 +29,56 @@ export default function MyIsland() {
 An island can be used in a page like a regular Preact component. Fresh will take
 care of automatically re-hydrating the island on the client.
 
+```tsx route/index.tsx
+import MyIsland from "../islands/my-island.tsx";
+
+export default function Home() {
+  return <MyIsland />;
+}
+```
+
+## Passing JSX to islands
+
+Islands support passing JSX elements via the `children` property.
+
+```tsx islands/my-island.tsx
+import { useSignal } from "@preact/signals";
+import { ComponentChildren } from "preact";
+
+interface Props {
+  children: ComponentChildren;
+}
+
+export default function MyIsland({ children }: Props) {
+  const count = useSignal(0);
+
+  return (
+    <div>
+      Counter is at {count}.{" "}
+      <button onClick={() => (count.value += 1)}>+</button>
+      {children}
+    </div>
+  );
+}
+```
+
+This allows you to pass static content rendered by the server to an island in
+the browser.
+
+```tsx routes/index.tsx
+import MyIsland from "../islands/my-island.tsx";
+
+export default function Home() {
+  return (
+    <MyIsland>
+      <p>This text is rendered on the server</p>
+    </MyIsland>
+  );
+}
+```
+
+## Passing other props to islands
+
 Passing props to islands is supported, but only if the props are serializable.
 Fresh can serialize the following types of values:
 
@@ -48,70 +96,74 @@ times, it is only serialized once and the references are restored upon
 deserialization. Passing complex objects like `Date`, custom classes, or
 functions is not supported.
 
-## Passing JSX to islands
-
-Islands support passing JSX elements via the `children` property. This allows
-you to pass static content rendered by the server to an island in the browser.
-
-```jsx
-// route/index.tsx
-import MyIsland from "../islands/my-island.tsx";
-
-export default function Home() {
-  return (
-    <MyIsland>
-      <p>This text is rendered on the server</p>
-    </MyIsland>
-  );
-}
+During server side rendering, Fresh annotates the HTML with special comments
+that indicate where each island will go. This gives the code sent to the client
+enough information to put the islands where they are supposed to go without
+requiring hydration for the static children of interactive islands. No
+Javascript is sent to the client when no interactivity is needed.
+
+```html
+<!--frsh-myisland_default:default:0-->
+<div>
+  Counter is at 0.
+  <button>+</button>
+  <!--frsh-slot-myisland_default:children-->
+  <p>This text is rendered on the server</p>
+  <!--/frsh-slot-myisland_default:children-->
+</div>
+<!--/frsh-myisland_default:default:0-->
 ```
 
-We can deduce which parts were rendered by the server and which parts where
-rendered by an island from the HTML alone. It contains all the information we
-need, which allows us to skip the work of having to send a serialized version of
-`props.children` to the browser.
-
 ### Nesting islands
 
 Islands can be nested within other islands as well. In that scenario they act
 like a normal Preact component, but still receive the serialized props if any
 were present.
 
-```jsx
-// route/index.tsx
-import MyIsland from "../islands/my-island.tsx";
-import OtherIsland from "../islands/other-island.tsx";
+```tsx islands/other-island.tsx
+import { useSignal } from "@preact/signals";
+import { ComponentChildren } from "preact";
+
+interface Props {
+  children: ComponentChildren;
+  foo: string;
+}
+
+function randomNumber() {
+  return Math.floor(Math.random() * 100);
+}
+
+export default function MyIsland({ children, foo }: Props) {
+  const number = useSignal(randomNumber());
 
-export default function Home() {
   return (
-    <MyIsland>
-      <OtherIsland foo="this prop will be serialized">
-        <p>This text is rendered on the server</p>
-      </OtherIsland>
-    </MyIsland>
+    <div>
+      <p>String from props: {foo}</p>
+      <p>
+        <button onClick={() => (number.value = randomNumber())}>Random</button>{" "}
+        number is: {number}.
+      </p>
+    </div>
   );
 }
 ```
 
-In essence, fresh allows you to mix static and interactive parts in your app in
+In essence, Fresh allows you to mix static and interactive parts in your app in
 a way that's most optimal for your use app. We'll keep sending only the
 JavaScript that is needed for the islands to the browser.
 
-```jsx
-// route/index.tsx
+```tsx route/index.tsx
 import MyIsland from "../islands/my-island.tsx";
 import OtherIsland from "../islands/other-island.tsx";
 
 export default function Home() {
   return (
-    <MyIsland>
-      <div>
-        <h1>Rendered by server</h1>
-        <OtherIsland>
-          <p>also rendered by server</p>
-        </OtherIsland>
-      </div>
-    </MyIsland>
+    <div>
+      <MyIsland>
+        <OtherIsland foo="this prop will be serialized" />
+      </MyIsland>
+      <p>Some more server rendered text</p>
+    </div>
   );
 }
 ```
diff --git a/docs/latest/concepts/layouts.md b/docs/latest/concepts/layouts.md
new file mode 100644
index 00000000000..730a9e8965c
--- /dev/null
+++ b/docs/latest/concepts/layouts.md
@@ -0,0 +1,124 @@
+---
+description: |
+  Add a layout to provide common meta tags, context for application sub routes, and common layout.
+---
+
+An layout is defined in a `_layout.tsx` file in any sub directory (at any level)
+under the `routes/` folder. It must contain a default export that is a regular
+Preact component. Only one such layout is allowed per sub directory.
+
+```txt Project structure
+‚îî‚îÄ‚îÄ routes
+ ¬†¬† ‚îú‚îÄ‚îÄ sub
+ ¬†¬† ‚îÇ   ‚îú‚îÄ‚îÄ page.tsx
+ ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ index.tss
+    ‚îú‚îÄ‚îÄ other
+    ‚îÇ   ‚îú‚îÄ‚îÄ _layout.tsx  # will be applied on top of `routes/_layout.tsx`
+    ‚îÇ   ‚îî‚îÄ‚îÄ page.tsx
+    ‚îú‚îÄ‚îÄ _layout.tsx  # will be applied to all routes
+    ‚îî‚îÄ‚îÄ _app.tsx
+```
+
+The component to be wrapped is received via props, in addition to a few other
+things. This allows for the introduction of a global container functioning as a
+template which can be conditioned based on state and params. Note that any state
+set by middleware is available via `props.state`.
+
+```tsx routes/sub/_layout.tsx
+import { LayoutProps } from "$fresh/server.ts";
+
+export default function Layout({ Component, state }: LayoutProps) {
+  // do something with state here
+  return (
+    <div class="layout">
+      <Component />
+    </div>
+  );
+}
+```
+
+## Async layouts
+
+In case you need to fetch data asynchronously before rendering the layout, you
+can use an async layout to do so.
+
+```tsx routes/sub/_layout.tsx
+import { LayoutProps } from "$fresh/server.ts";
+
+export default async function Layout(req: Request, ctx: LayoutContext) {
+  // do something with state here
+  const data = await loadData();
+
+  return (
+    <div class="layout">
+      <p>{data.greeting}</p>
+      <ctx.Component />
+    </div>
+  );
+}
+```
+
+### Define helper
+
+To make it a little quicker to write async layouts, Fresh ships with a
+`defineLayout` helper which automatically infers the correct types for the
+function arguments.
+
+```tsx
+import { defineLayout } from "$fresh/server.ts";
+
+export default defineLayout(async (req, ctx) => {
+  const data = await loadData();
+
+  return (
+    <div class="layout">
+      <p>{data.greeting}</p>
+      <ctx.Component />
+    </div>
+  );
+});
+```
+
+## Opting out of layout inheritance
+
+Sometimes you want to opt out of the layout inheritance mechanism for a
+particular route. This can be done via route configuration. Picture a directory
+structure like this:
+
+```txt Project structure
+‚îî‚îÄ‚îÄ routes
+ ¬†¬† ‚îú‚îÄ‚îÄ sub
+ ¬†¬† ‚îÇ   ‚îú‚îÄ‚îÄ _layout_.tsx
+ ¬†¬† ‚îÇ   ‚îú‚îÄ‚îÄ special.tsx  # should not inherit layouts
+ ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ index.tss
+    ‚îî‚îÄ‚îÄ _layout.tsx
+```
+
+To make `routes/sub/special.tsx` opt out of rendering layouts we can set
+`skipInheritedLayouts: true`.
+
+```tsx routes/sub/special.tsx
+import { RouteConfig } from "$fresh/server.ts";
+
+export const config: RouteConfig = {
+  skipInheritedLayouts: true, // Skip already inherited layouts
+};
+
+export default function MyPage() {
+  return <p>Hello world</p>;
+}
+```
+
+You can skip already inherited layouts inside a layout file:
+
+```tsx routes/special/_layout.sx
+import { LayoutConfig } from "$fresh/server.ts";
+
+export const config: LayoutConfig = {
+  skipInheritedLayouts: true, // Skip already inherited layouts
+};
+
+export default function MyPage() {
+  return <p>Hello world</p>;
+}
+```
diff --git a/docs/concepts/middleware.md b/docs/latest/concepts/middleware.md
similarity index 86%
rename from docs/concepts/middleware.md
rename to docs/latest/concepts/middleware.md
index 5f272f103ca..f232ac399dc 100644
--- a/docs/concepts/middleware.md
+++ b/docs/latest/concepts/middleware.md
@@ -13,10 +13,11 @@ used to trigger child handlers. The `ctx` also has a `state` property that can
 be used to pass arbitrary data to downstream (or upstream) handlers. This
 `state` is included in `PageProps` by default, which is available to both the
 special [\_app](/docs/concepts/app-wrapper.md) wrapper and normal
-[routes](/docs/concepts/routes.md).
+[routes](/docs/concepts/routes.md). `ctx.state` is normally set by modifying its
+properties, e.g. `ctx.state.loggedIn = true`, but you can also replace the
+entire object like `ctx.state = { loggedIn = true }`.
 
-```ts
-// routes/_middleware.ts
+```ts routes/_middleware.ts
 import { MiddlewareHandlerContext } from "$fresh/server.ts";
 
 interface State {
@@ -25,7 +26,7 @@ interface State {
 
 export async function handler(
   req: Request,
-  ctx: MiddlewareHandlerContext<State>,
+  ctx: MiddlewareHandlerContext<State>
 ) {
   ctx.state.data = "myData";
   const resp = await ctx.next();
@@ -34,8 +35,7 @@ export async function handler(
 }
 ```
 
-```ts
-// routes/myHandler.ts
+```ts routes/myHandler.ts
 export const handler: Handlers<any, { data: string }> = {
   GET(_req, ctx) {
     return new Response(`middleware data is ${ctx.state.data}`);
@@ -50,7 +50,7 @@ specific first).
 
 For example, take a project with the following routes:
 
-```
+```txt Project Structure
 ‚îî‚îÄ‚îÄ routes
  ¬†¬† ‚îú‚îÄ‚îÄ _middleware.ts
  ¬†¬† ‚îú‚îÄ‚îÄ index.ts
@@ -83,9 +83,7 @@ A single middleware file can also define multiple middlewares (all for the same
 route) by exporting an array of handlers instead of a single handler. For
 example:
 
-```ts
-// routes/_middleware.ts
-
+```ts routes/_middleware.ts
 export const handler = [
   async function middleware1(req, ctx) {
     // do something
@@ -101,7 +99,7 @@ export const handler = [
 It should be noted that `middleware` has access to route parameters. If you're
 running a fictitious `routes/[tenant]/admin/_middleware.ts` like this:
 
-```ts
+```ts routes/[tenant]/admin/_middleware.ts
 import { MiddlewareHandlerContext } from "$fresh/server.ts";
 
 export async function handler(_req: Request, ctx: MiddlewareHandlerContext) {
@@ -146,7 +144,7 @@ for a `route`, as opposed to something like `http://localhost:8001/favicon.ico`.
 Initiate a new Fresh project (`deno run -A -r https://fresh.deno.dev/`) and then
 create a `_middleware.ts` file in the `routes` folder like this:
 
-```ts
+```ts routes/_middleware.ts
 import { MiddlewareHandlerContext } from "$fresh/server.ts";
 
 export async function handler(req: Request, ctx: MiddlewareHandlerContext) {
@@ -159,7 +157,7 @@ export async function handler(req: Request, ctx: MiddlewareHandlerContext) {
 
 If you start up your server (`deno task start`) you'll see the following:
 
-```
+```sh Terminal
 Task start deno run -A --watch=static/,routes/ dev.ts
 Watcher Process started.
 The manifest has been generated for 4 routes and 1 islands.
@@ -197,3 +195,26 @@ That first `route` request is for when `Fresh` responds with the root level
 `index.tsx` route. The rest, as you can see, are either `internal` or `static`
 requests. You can use `ctx.destination` to filter these out if your middleware
 is only supposed to deal with routes.
+
+## Middleware Redirects
+
+If you want to redirect a request from a middleware, you can do so by returning:
+
+```ts
+export function handler(req: Request): Response {
+  return Response.redirect("https://example.com", 307);
+}
+```
+
+`307` stands for temporary redirect. You can also use `301` for permanent
+redirect. You can also redirect to a relative path by doing:
+
+````ts
+export function handler(req: Request): Response {
+  return new Response("", {
+    status: 307,
+    headers: { Location: "/my/new/relative/path" },
+  });
+}
+```****
+````
diff --git a/docs/concepts/plugins.md b/docs/latest/concepts/plugins.md
similarity index 99%
rename from docs/concepts/plugins.md
rename to docs/latest/concepts/plugins.md
index c86e3c07fc2..7bfef9953e0 100644
--- a/docs/concepts/plugins.md
+++ b/docs/latest/concepts/plugins.md
@@ -6,9 +6,7 @@ Plugins can dynamically add new functionality to Fresh without exposing
 significant complexity to the user. Users can add plugins by importing and
 initializing them in their `main.ts` file:
 
-```ts
-// main.ts
-
+```ts main.ts
 import { start } from "$fresh/server.ts";
 import manifest from "./fresh.gen.ts";
 
diff --git a/docs/concepts/routes.md b/docs/latest/concepts/routes.md
similarity index 89%
rename from docs/concepts/routes.md
rename to docs/latest/concepts/routes.md
index 7b394ef7711..b517c5efd70 100644
--- a/docs/concepts/routes.md
+++ b/docs/latest/concepts/routes.md
@@ -1,6 +1,6 @@
 ---
 description: |
-  Routes are the basic building block of fresh applications. They are used to define the behaviour the application when a given path is requested.
+  Routes are the basic building block of Fresh applications. They are used to define the behaviour the application when a given path is requested.
 ---
 
 At their core, routes describe how a request for a given path should be handled,
@@ -25,9 +25,7 @@ the handler's `render` function.
 
 Let's look at a basic route that returns a plain text string:
 
-```tsx
-// routes/plain.tsx
-
+```tsx routes/plain.tsx
 import { HandlerContext, Handlers } from "$fresh/server.ts";
 
 export const handler: Handlers = {
@@ -48,9 +46,7 @@ have a corresponding handler, a 405 HTTP error is returned.
 
 Now, let's render some HTML using the route component:
 
-```tsx
-// routes/html.tsx
-
+```tsx routes/html.tsx
 import { PageProps } from "$fresh/server.ts";
 
 export default function Page(props: PageProps) {
@@ -71,9 +67,7 @@ should work.
 In the below example, a custom handler is used to add a custom header to the
 response after rendering the page component.
 
-```tsx
-// routes/html.tsx
-
+```tsx routes/html.tsx
 import { HandlerContext, Handlers, PageProps } from "$fresh/server.ts";
 
 export const handler: Handlers = {
@@ -96,7 +90,7 @@ test these in isolation, but can become a bit cumbersome to maintain. They
 require some additional indirection of declaring an interface for the component
 `Data` when you're passing it around through `ctx.render()`.
 
-```tsx
+```tsx routes/page.tsx
 interface Data {
   foo: number;
 }
@@ -117,7 +111,7 @@ When a route has both a component and a `GET` handler, they are typically very
 closely coupled. With async route components you can merge the two together and
 avoid having to create the `Data` interface boilerplate.
 
-```tsx
+```tsx routes/page.tsx
 // Async route component
 export default async function MyPage(req: Request, ctx: RouteContext) {
   const value = await loadFooValue();
@@ -130,7 +124,7 @@ can think of async route components inlining the `GET` handler into the
 component function. Note, that you can still add additional HTTP handlers in the
 same file like before.
 
-```tsx
+```tsx routes/page.tsx
 export const handler: Handlers = {
   async POST(req) {
     // ... do something here
@@ -148,7 +142,7 @@ export default async function MyPage(req: Request, ctx: RouteContext) {
 Quite often a route handler needs to render a 404 page or bail out of rendering
 in another manner. This can be done by returning a `Response` object.
 
-```tsx
+```tsx route/page.tsx
 // Async route component
 export default async function MyPage(req: Request, ctx: RouteContext) {
   const value = await loadFooValue();
@@ -171,3 +165,23 @@ export default async function MyPage(req: Request, ctx: RouteContext) {
   return <p>foo is: {value}</p>;
 }
 ```
+
+### Define helper
+
+To make it a little quicker to write async routes, Fresh ships with a
+`defineRoute` helper which automatically infers the correct types for the
+function arguments.
+
+```tsx
+import { defineRoute } from "$fresh/server.ts";
+
+export default defineRoute(async (req, ctx) => {
+  const data = await loadData();
+
+  return (
+    <div class="page">
+      <h1>Hello {data.name}</h1>
+    </div>
+  );
+});
+```
diff --git a/docs/concepts/routing.md b/docs/latest/concepts/routing.md
similarity index 56%
rename from docs/concepts/routing.md
rename to docs/latest/concepts/routing.md
index fe7a009f7fc..da49e0bd070 100644
--- a/docs/concepts/routing.md
+++ b/docs/latest/concepts/routing.md
@@ -41,9 +41,7 @@ Advanced use-cases can require that a more complex pattern be used for matching.
 A custom [URL pattern][urlpattern] can be specified in the route configuration.
 This pattern will be used instead of the file path based pattern:
 
-```ts
-// routes/x.ts
-
+```ts routes/x.ts
 import { RouteConfig } from "$fresh/server.ts";
 
 export const config: RouteConfig = {
@@ -53,4 +51,60 @@ export const config: RouteConfig = {
 // ...
 ```
 
+## Route Groups
+
+When working with [route layouts](/docs/canary/concepts/route-layout) or
+[route middlewares](/docs/canary/concepts/middleware), you'll sometimes come
+across a situation where you want your routes to inherit from a layout other
+than what's suggested by the URL segment.
+
+Let's illustrate that with an example:
+
+```txt
+/about -> layout A
+/career -> layout A
+/archive -> layout B
+/contact -> layout B
+```
+
+Without any way to group routes this is a problem because every route segment
+can only have one `_layout` file.
+
+```txt Project structure
+‚îî‚îÄ‚îÄ routes
+ ¬†¬† ‚îú‚îÄ‚îÄ _layout.tsx  # applies to all routes here :(
+ ¬†¬† ‚îú‚îÄ‚îÄ about.tsx
+ ¬†¬† ‚îú‚îÄ‚îÄ career.tsx
+ ¬†¬† ‚îú‚îÄ‚îÄ archive.tsx
+ ¬†¬† ‚îî‚îÄ‚îÄ contact.tsx
+```
+
+We can solve this problem with route groups. A route group is a folder which has
+a name that is wrapped in braces. For example `(pages)` would be considered a
+route and so would be `(marketing)`. This enables us to group related routes in
+a folder and use a different `_layout` file for each group.
+
+```txt Project structure
+‚îî‚îÄ‚îÄ routes
+ ¬†¬† ‚îú‚îÄ‚îÄ (marketing)
+ ¬†¬† ‚îÇ   ‚îú‚îÄ‚îÄ _layout.tsx  # only applies to about.tsx and career.tsx
+ ¬†¬† ‚îÇ   ‚îú‚îÄ‚îÄ about.tsx
+ ¬†¬† ‚îÇ   ‚îî‚îÄ‚îÄ career.tsx
+ ¬†¬† ‚îî‚îÄ‚îÄ (info)
+ ¬†¬†     ‚îú‚îÄ‚îÄ _layout.tsx  # only applies to archive.tsx and contact.tsx
+ ¬†¬†     ‚îú‚îÄ‚îÄ archive.tsx
+ ¬†¬†     ‚îî‚îÄ‚îÄ contact.tsx
+```
+
+> ‚ÑπÔ∏è Be careful about routes in different groups which match to the same URL.
+> Such scenarios will lead to ambiguity as to which route file should be picked.
+>
+> ```txt Project structure
+> ‚îî‚îÄ‚îÄ routes
+>  ¬†¬† ‚îú‚îÄ‚îÄ (group-1)
+>  ¬†¬† ‚îÇ   ‚îî‚îÄ‚îÄ about.tsx  # Bad: Maps to same `/about` url
+>  ¬†¬† ‚îî‚îÄ‚îÄ (group-2)
+>  ¬†¬†     ‚îî‚îÄ‚îÄ about.tsx  # Bad: Maps to same `/about` url
+> ```
+
 [urlpattern]: https://developer.mozilla.org/en-US/docs/Web/API/URL_Pattern_API
diff --git a/docs/concepts/server-components.md b/docs/latest/concepts/server-components.md
similarity index 100%
rename from docs/concepts/server-components.md
rename to docs/latest/concepts/server-components.md
diff --git a/docs/concepts/server-configuration.md b/docs/latest/concepts/server-configuration.md
similarity index 97%
rename from docs/concepts/server-configuration.md
rename to docs/latest/concepts/server-configuration.md
index 393dad8adfb..31b3f09fcd9 100644
--- a/docs/concepts/server-configuration.md
+++ b/docs/latest/concepts/server-configuration.md
@@ -7,7 +7,7 @@ In this page we discuss how the server can be configured during startup.
 
 The signature of the primary method looks like this:
 
-```ts
+```ts main.ts
 export async function start(routes: Manifest, opts: StartOptions = {});
 ```
 
@@ -52,7 +52,7 @@ export interface RouterOptions {
 See the [docs](/docs/concepts/plugins) on this topic for more detail. But for
 completion, you can do something like this to load plugins:
 
-```ts
+```ts main.ts
 await start(manifest, { plugins: [twindPlugin(twindConfig)] });
 ```
 
@@ -61,7 +61,7 @@ await start(manifest, { plugins: [twindPlugin(twindConfig)] });
 This allows you to specify the location where your site's static assets are
 stored. Here's an example:
 
-```ts
+```ts main.ts
 await start(manifest, { staticDir: "./custom_static" });
 ```
 
@@ -81,6 +81,6 @@ By default Fresh uses URLs like `https://www.example.com/about`. If you'd like,
 you can configure this to `https://www.example.com/about/` by using the
 `trailingSlash` setting.
 
-```ts
+```ts main.ts
 await start(manifest, { router: { trailingSlash: true } });
 ```
diff --git a/docs/concepts/static-files.md b/docs/latest/concepts/static-files.md
similarity index 98%
rename from docs/concepts/static-files.md
rename to docs/latest/concepts/static-files.md
index a2771402f10..b3c96d7a201 100644
--- a/docs/concepts/static-files.md
+++ b/docs/latest/concepts/static-files.md
@@ -29,7 +29,7 @@ version of this path that contains a build ID for cache busting. When the asset
 is requested at this "locked" path, it will be served with a cache lifetime of
 one year.
 
-```jsx
+```jsx routes/page.tsx
 import { asset } from "$fresh/runtime.ts";
 
 export default function Page() {
diff --git a/docs/concepts/updating.md b/docs/latest/concepts/updating.md
similarity index 96%
rename from docs/concepts/updating.md
rename to docs/latest/concepts/updating.md
index 83c7aaeb29e..165956f334f 100644
--- a/docs/concepts/updating.md
+++ b/docs/latest/concepts/updating.md
@@ -3,7 +3,7 @@ description: |
   New versions of Fresh are regularly released. This page explains how to update your project.
 ---
 
-Fresh constists of multiple pieces which are independently versioned and
+Fresh consists of multiple pieces which are independently versioned and
 released.
 
 - Fresh (https://deno.land/x/fresh)
@@ -28,7 +28,7 @@ below.
 
 To update your dependencies, you have two options:
 
-- Run the fresh updater to update your project dependencies.
+- Run the Fresh updater to update your project dependencies.
 - Manually update the dependency versions in your `deno.json` file.
 
 ### Auto updater
@@ -41,7 +41,7 @@ recommended patterns for Fresh projects.
 To run the auto updater, run the following command from the root of your
 project:
 
-```bash
+```sh Terminal
 $ deno run -A -r https://fresh.deno.dev/update .
 ```
 
@@ -54,7 +54,7 @@ file in the root of your projects directory. Dependency versions are encoded
 into the URLs in this file. For example, here is how to update a project from
 Fresh 1.0.2 to 1.1.3, and update Preact to the latest version:
 
-```diff
+```diff deno.json
   {
     "imports": {
 -     "$fresh/": "https://deno.land/x/fresh@1.0.2/",
diff --git a/docs/examples/changing-the-src-dir.md b/docs/latest/examples/changing-the-src-dir.md
similarity index 96%
rename from docs/examples/changing-the-src-dir.md
rename to docs/latest/examples/changing-the-src-dir.md
index e7f2990362d..a85dea6e09b 100644
--- a/docs/examples/changing-the-src-dir.md
+++ b/docs/latest/examples/changing-the-src-dir.md
@@ -6,7 +6,7 @@ description: |
 When you initialize a project with `deno run -A -r https://fresh.deno.dev`,
 you'll end up with a project like the following:
 
-```
+```txt Project Structure
 .
 ‚îú‚îÄ‚îÄ README.md
 ‚îú‚îÄ‚îÄ components
@@ -40,7 +40,7 @@ your choosing), then you'll need to do the following things:
 
 Here's what the diff of `deno.json` looks like:
 
-```diff
+```diff deno.json
  {
    "lock": false,
    "tasks": {
@@ -53,7 +53,7 @@ Here's what the diff of `deno.json` looks like:
 
 The resulting file structure looks like this:
 
-```
+```txt Project Structure
 .
 ‚îú‚îÄ‚îÄ README.md
 ‚îú‚îÄ‚îÄ deno.json
diff --git a/docs/examples/creating-a-crud-api.md b/docs/latest/examples/creating-a-crud-api.md
similarity index 85%
rename from docs/examples/creating-a-crud-api.md
rename to docs/latest/examples/creating-a-crud-api.md
index 62497783e63..54fcc92ecc6 100644
--- a/docs/examples/creating-a-crud-api.md
+++ b/docs/latest/examples/creating-a-crud-api.md
@@ -19,12 +19,12 @@ In this example we'll be creating a small API that uses
 Our project structure will look like this (in addition to the rest of the Fresh
 code from a new project):
 
-```
-‚îú‚îÄ‚îÄ routes
-‚îÇ¬†¬† ‚îî‚îÄ‚îÄ api
-‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ users
-‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ [id].ts
-‚îÇ¬†¬†         ‚îî‚îÄ‚îÄ index.ts
+```txt Project Structure
+routes
+‚îî‚îÄ‚îÄ api
+    ‚îî‚îÄ‚îÄ users
+        ‚îú‚îÄ‚îÄ [id].ts
+        ‚îî‚îÄ‚îÄ index.ts
 ```
 
 In each section about a method, only the relevant handler will be shown. The
@@ -34,15 +34,12 @@ full files are available at the bottom for reference.
 
 `POST` (create) is used to create a resource.
 
-```tsx
-// routes/api/users/index.ts
+```tsx routes/api/users/index.ts
 export const handler: Handlers<User | null> = {
   async POST(req, _ctx) {
-    const user = await req.json() as User;
+    const user = (await req.json()) as User;
     const userKey = ["user", user.id];
-    const ok = await kv.atomic()
-      .set(userKey, user)
-      .commit();
+    const ok = await kv.atomic().set(userKey, user).commit();
     if (!ok) throw new Error("Something went wrong.");
     return new Response(JSON.stringify(user));
   },
@@ -71,8 +68,7 @@ You should receive the same thing back:
 `GET` (read) is used to retrieve a resource and is by far the most common HTTP
 method. You can use `GET` to fetch database content, markdown, or static files.
 
-```tsx
-// routes/api/users/[id].ts
+```tsx routes/api/users/[id].ts
 export const handler: Handlers<User | null> = {
   async GET(_req, ctx) {
     const id = ctx.params.id;
@@ -102,19 +98,15 @@ The short version of it: `PUT` requires the entire object to be submitted, while
 
 An example of an update endpoint using `PUT`:
 
-```tsx
-// routes/api/users/[id].ts
+```tsx routes/api/users/[id].ts
 export const handler: Handlers<User | null> = {
   async PUT(req, ctx) {
     const id = ctx.params.id;
-    const user = await req.json() as User;
+    const user = (await req.json()) as User;
     const userKey = ["user", id];
     const userRes = await kv.get(userKey);
     if (!userRes.value) return new Response(`no user with id ${id} found`);
-    const ok = await kv.atomic()
-      .check(userRes)
-      .set(userKey, user)
-      .commit();
+    const ok = await kv.atomic().check(userRes).set(userKey, user).commit();
     if (!ok) throw new Error("Something went wrong.");
     return new Response(JSON.stringify(user));
   },
@@ -152,18 +144,14 @@ No need to send in the id in this case.
 
 `DELETE` (delete) is used to delete a resource.
 
-```tsx
-// routes/api/users/[id].ts
+```tsx routes/api/users/[id].ts
 export const handler: Handlers<User | null> = {
   async DELETE(_req, ctx) {
     const id = ctx.params.id;
     const userKey = ["user", id];
     const userRes = await kv.get(userKey);
     if (!userRes.value) return new Response(`no user with id ${id} found`);
-    const ok = await kv.atomic()
-      .check(userRes)
-      .delete(userKey)
-      .commit();
+    const ok = await kv.atomic().check(userRes).delete(userKey).commit();
     if (!ok) throw new Error("Something went wrong.");
     return new Response(`user ${id} deleted`);
   },
@@ -173,7 +161,7 @@ export const handler: Handlers<User | null> = {
 Try sending `DELETE` to `http://localhost:8000/api/users/2` without a body.
 We'll get back:
 
-```
+```txt
 user 2 deleted
 ```
 
@@ -210,23 +198,17 @@ export const handler: Handlers<User | null> = {
     const userKey = ["user", id];
     const userRes = await kv.get(userKey);
     if (!userRes.value) return new Response(`no user with id ${id} found`);
-    const ok = await kv.atomic()
-      .check(userRes)
-      .delete(userKey)
-      .commit();
+    const ok = await kv.atomic().check(userRes).delete(userKey).commit();
     if (!ok) throw new Error("Something went wrong.");
     return new Response(`user ${id} deleted`);
   },
   async PUT(req, ctx) {
     const id = ctx.params.id;
-    const user = await req.json() as User;
+    const user = (await req.json()) as User;
     const userKey = ["user", id];
     const userRes = await kv.get(userKey);
     if (!userRes.value) return new Response(`no user with id ${id} found`);
-    const ok = await kv.atomic()
-      .check(userRes)
-      .set(userKey, user)
-      .commit();
+    const ok = await kv.atomic().check(userRes).set(userKey, user).commit();
     if (!ok) throw new Error("Something went wrong.");
     return new Response(JSON.stringify(user));
   },
@@ -257,11 +239,9 @@ export const handler: Handlers<User | null> = {
     return new Response(JSON.stringify(users));
   },
   async POST(req, _ctx) {
-    const user = await req.json() as User;
+    const user = (await req.json()) as User;
     const userKey = ["user", user.id];
-    const ok = await kv.atomic()
-      .set(userKey, user)
-      .commit();
+    const ok = await kv.atomic().set(userKey, user).commit();
     if (!ok) throw new Error("Something went wrong.");
     return new Response(JSON.stringify(user));
   },
diff --git a/docs/examples/dealing-with-cors.md b/docs/latest/examples/dealing-with-cors.md
similarity index 88%
rename from docs/examples/dealing-with-cors.md
rename to docs/latest/examples/dealing-with-cors.md
index 2e1303d209a..d98c0d7a23b 100644
--- a/docs/examples/dealing-with-cors.md
+++ b/docs/latest/examples/dealing-with-cors.md
@@ -15,13 +15,10 @@ As per the above link, "simple" requests involve `GET`, `HEAD`, or `POST`
 requests. You can CORS enable all the routes affected by some `middleware` by
 doing the following:
 
-```ts
+```ts routes/_middleware.ts
 import { MiddlewareHandlerContext } from "$fresh/server.ts";
 
-export async function handler(
-  req: Request,
-  ctx: MiddlewareHandlerContext,
-) {
+export async function handler(req: Request, ctx: MiddlewareHandlerContext) {
   const origin = req.headers.get("Origin") || "*";
   const resp = await ctx.next();
   const headers = resp.headers;
@@ -30,11 +27,11 @@ export async function handler(
   headers.set("Access-Control-Allow-Credentials", "true");
   headers.set(
     "Access-Control-Allow-Headers",
-    "Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization, accept, origin, Cache-Control, X-Requested-With",
+    "Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization, accept, origin, Cache-Control, X-Requested-With"
   );
   headers.set(
     "Access-Control-Allow-Methods",
-    "POST, OPTIONS, GET, PUT, DELETE",
+    "POST, OPTIONS, GET, PUT, DELETE"
   );
 
   return resp;
@@ -47,13 +44,10 @@ What about for one of the other HTTP methods? Then you'll need to be able to
 deal with "preflight requests". Let's imagine you're trying to support a
 `DELETE` route. Then you'd need to do something like this:
 
-```ts
+```ts routes/_middleware.ts
 import { MiddlewareHandlerContext } from "$fresh/server.ts";
 
-export async function handler(
-  _req: Request,
-  ctx: MiddlewareHandlerContext,
-) {
+export async function handler(_req: Request, ctx: MiddlewareHandlerContext) {
   if (_req.method == "OPTIONS") {
     const resp = new Response(null, {
       status: 204,
@@ -61,10 +55,7 @@ export async function handler(
     const origin = _req.headers.get("Origin") || "*";
     const headers = resp.headers;
     headers.set("Access-Control-Allow-Origin", origin);
-    headers.set(
-      "Access-Control-Allow-Methods",
-      "DELETE",
-    );
+    headers.set("Access-Control-Allow-Methods", "DELETE");
     return resp;
   }
   const origin = _req.headers.get("Origin") || "*";
@@ -75,11 +66,11 @@ export async function handler(
   headers.set("Access-Control-Allow-Credentials", "true");
   headers.set(
     "Access-Control-Allow-Headers",
-    "Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization, accept, origin, Cache-Control, X-Requested-With",
+    "Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization, accept, origin, Cache-Control, X-Requested-With"
   );
   headers.set(
     "Access-Control-Allow-Methods",
-    "POST, OPTIONS, GET, PUT, DELETE",
+    "POST, OPTIONS, GET, PUT, DELETE"
   );
 
   return resp;
diff --git a/docs/examples/handling-complex-routes.md b/docs/latest/examples/handling-complex-routes.md
similarity index 98%
rename from docs/examples/handling-complex-routes.md
rename to docs/latest/examples/handling-complex-routes.md
index eb68af84a3c..edf0a110200 100644
--- a/docs/examples/handling-complex-routes.md
+++ b/docs/latest/examples/handling-complex-routes.md
@@ -16,7 +16,7 @@ Here you can define named groups, wildcards, regex groups, and other bits.
 Let's look at the example from the routing page more closely. We'll flesh out
 the handler so that we end up with something like the following:
 
-```ts
+```ts routes/x.tsx
 import { HandlerContext, RouteConfig } from "$fresh/server.ts";
 
 export const handler = {
@@ -47,7 +47,7 @@ show the following:
 
 Let's look at something a bit more complex:
 
-```ts
+```ts routes/api.tsx
 import { HandlerContext, RouteConfig } from "$fresh/server.ts";
 
 export const handler = {
diff --git a/docs/examples/index.md b/docs/latest/examples/index.md
similarity index 100%
rename from docs/examples/index.md
rename to docs/latest/examples/index.md
diff --git a/docs/examples/init-the-server.md b/docs/latest/examples/init-the-server.md
similarity index 95%
rename from docs/examples/init-the-server.md
rename to docs/latest/examples/init-the-server.md
index 855067c3146..1e5aad83f01 100644
--- a/docs/examples/init-the-server.md
+++ b/docs/latest/examples/init-the-server.md
@@ -7,7 +7,7 @@ Let's pretend you've just initialized a new Fresh project. You want to do some
 complicated setup that runs once, before the server is started. This is,
 fortunately, quite easy. Here's how:
 
-```diff
+```diff main.ts
  import { start } from "$fresh/server.ts";
  import manifest from "./fresh.gen.ts";
 +import { Context } from "./routes/_middleware.ts";
@@ -18,7 +18,7 @@ fortunately, quite easy. Here's how:
 
 So your full `main.ts` should look like this:
 
-```ts
+```ts main.ts
 /// <reference no-default-lib="true" />
 /// <reference lib="dom" />
 /// <reference lib="dom.iterable" />
@@ -37,7 +37,7 @@ await start(manifest);
 
 But what's going on in this new `_middleware.ts` we've created?
 
-```ts
+```ts routes/_middleware.ts
 import { MiddlewareHandlerContext } from "$fresh/server.ts";
 
 export interface State {
@@ -66,7 +66,7 @@ export class Context {
 
 export async function handler(
   req: Request,
-  ctx: MiddlewareHandlerContext<State>,
+  ctx: MiddlewareHandlerContext<State>
 ) {
   ctx.state.context = Context.instance();
   const resp = await ctx.next();
diff --git a/docs/examples/modifying-the-head.md b/docs/latest/examples/modifying-the-head.md
similarity index 97%
rename from docs/examples/modifying-the-head.md
rename to docs/latest/examples/modifying-the-head.md
index 856544a7fdc..d65d22ecd78 100644
--- a/docs/examples/modifying-the-head.md
+++ b/docs/latest/examples/modifying-the-head.md
@@ -13,8 +13,7 @@ the web page. Some uses include:
 - Linking to resources like stylesheets using `<link>`
 - Including third-party JavaScript code using `<script>`
 
-```tsx
-// routes/index.tsx
+```tsx routes/index.tsx
 import { Head } from "$fresh/runtime.ts";
 import Counter from "../islands/Counter.tsx";
 
diff --git a/docs/examples/rendering-markdown.md b/docs/latest/examples/rendering-markdown.md
similarity index 97%
rename from docs/examples/rendering-markdown.md
rename to docs/latest/examples/rendering-markdown.md
index 55fb6b73f96..2be2ea64aea 100644
--- a/docs/examples/rendering-markdown.md
+++ b/docs/latest/examples/rendering-markdown.md
@@ -14,8 +14,7 @@ The following file uses
 [dynamic routing](https://fresh.deno.dev/docs/getting-started/dynamic-routes) to
 handle the three cases. It's assumed this file is called `[slug].tsx`:
 
-```ts
-// routes/[slug].tsx
+```ts routes/[slug].tsx
 import { Handlers, PageProps } from "$fresh/server.ts";
 import { extract } from "$std/front_matter/yaml.ts";
 import { CSS, render } from "$gfm";
@@ -31,7 +30,7 @@ export const handler: Handlers<Page> = {
     let rawMarkdown = "";
     if (ctx.params.slug === "remote") {
       const resp = await fetch(
-        `https://raw.githubusercontent.com/denoland/fresh/main/docs/introduction/index.md`,
+        `https://raw.githubusercontent.com/denoland/fresh/main/docs/introduction/index.md`
       );
       if (resp.status !== 200) {
         return ctx.render(undefined);
@@ -81,7 +80,7 @@ export default function MarkdownPage({ data }: PageProps<Page | null>) {
 
 The contents of the `text.md` file are the following:
 
-```md
+```md text.md
 ---
 description: testFromText
 ---
diff --git a/docs/examples/setting-the-language.md b/docs/latest/examples/setting-the-language.md
similarity index 98%
rename from docs/examples/setting-the-language.md
rename to docs/latest/examples/setting-the-language.md
index 645ec49e121..a8b4b176e43 100644
--- a/docs/examples/setting-the-language.md
+++ b/docs/latest/examples/setting-the-language.md
@@ -6,7 +6,7 @@ description: |
 When you initialize a project with `deno run -A -r https://fresh.deno.dev`,
 you'll end up with a `main.ts` like the following:
 
-```ts
+```ts main.ts
 /// <reference no-default-lib="true" />
 /// <reference lib="dom" />
 /// <reference lib="dom.iterable" />
@@ -26,7 +26,7 @@ This is a great start if your site is in English, but let's say you want to
 change the language, as per the `<html lang=asdf>` tag. Then you'll need to do
 something like this:
 
-```ts
+```ts main.ts
 /// <reference no-default-lib="true" />
 /// <reference lib="dom" />
 /// <reference lib="dom.iterable" />
diff --git a/docs/examples/sharing-state-between-islands.md b/docs/latest/examples/sharing-state-between-islands.md
similarity index 91%
rename from docs/examples/sharing-state-between-islands.md
rename to docs/latest/examples/sharing-state-between-islands.md
index 62ba827c0da..b95585c1d9a 100644
--- a/docs/examples/sharing-state-between-islands.md
+++ b/docs/latest/examples/sharing-state-between-islands.md
@@ -11,8 +11,7 @@ All of this content is lifted from this great
 
 Imagine we have `Counter.tsx` like this:
 
-```ts
-// islands/Counter.tsx
+```tsx islands/Counter.tsx
 import { useSignal } from "@preact/signals";
 import { Button } from "../components/Button.tsx";
 
@@ -37,7 +36,7 @@ export default function Counter(props: CounterProps) {
 Note how `useSignal` is within the `Counter` component. Then if we instantiate
 some counters like this...
 
-```ts
+```tsx
 <Counter start={3} />
 <Counter start={4} />
 ```
@@ -49,8 +48,7 @@ here, yet.
 
 But we can switch things up by looking at a `SynchronizedSlider.tsx` like this:
 
-```ts
-// islands/SynchronizedSlider.tsx
+```tsx islands/SynchronizedSlider.tsx
 import { Signal } from "@preact/signals";
 
 interface SliderProps {
@@ -67,7 +65,7 @@ export default function SynchronizedSlider(props: SliderProps) {
       min={1}
       max={100}
       value={props.slider.value}
-      onInput={(e) => props.slider.value = Number(e.currentTarget.value)}
+      onInput={(e) => (props.slider.value = Number(e.currentTarget.value))}
     />
   );
 }
@@ -75,8 +73,7 @@ export default function SynchronizedSlider(props: SliderProps) {
 
 Now if we were to do the following...
 
-```ts
-// routes/index.tsx
+```tsx routes/index.tsx
 export default function Home() {
   const sliderSignal = useSignal(50);
   return (
@@ -96,15 +93,13 @@ they would all use the same value.
 We can also create a `signal` in a utility file and export it for consumption
 across multiple places.
 
-```ts
-// utils/cart.ts
+```ts utils/cart.ts
 import { signal } from "@preact/signals";
 
 export const cart = signal<string[]>([]);
 ```
 
-```ts
-// islands/AddToCart.tsx
+```tsx islands/AddToCart.tsx
 import { Button } from "../components/Button.tsx";
 import { cart } from "../utils/cart.ts";
 
@@ -116,18 +111,17 @@ interface AddToCartProps {
 export default function AddToCart(props: AddToCartProps) {
   return (
     <Button
-      onClick={() => cart.value = [...cart.value, props.product]}
+      onClick={() => (cart.value = [...cart.value, props.product])}
       class="w-full"
     >
-      Add{cart.value.includes(props.product) ? " another" : ""}{" "}
-      "{props.product}" to cart
+      Add{cart.value.includes(props.product) ? " another" : ""} "{props.product}
+      " to cart
     </Button>
   );
 }
 ```
 
-```ts
-// islands/Cart.tsx
+```tsx islands/Cart.tsx
 import { Button } from "../components/Button.tsx";
 import { cart } from "../utils/cart.ts";
 import * as icons from "../components/Icons.tsx";
@@ -185,7 +179,7 @@ function CartItem(props: CartItemProps) {
 
 Now we can add the islands to our site by doing the following:
 
-```ts
+```tsx
 <AddToCart product="Lemon" />
 <AddToCart product="Lime" />
 <Cart />
diff --git a/docs/examples/using-csp.md b/docs/latest/examples/using-csp.md
similarity index 93%
rename from docs/examples/using-csp.md
rename to docs/latest/examples/using-csp.md
index 07d2545e954..04365751a68 100644
--- a/docs/examples/using-csp.md
+++ b/docs/latest/examples/using-csp.md
@@ -145,8 +145,7 @@ applied to any of the directives.
 
 We'll start off by having an example stylesheet defined like this:
 
-```css
-/* static/example.css */
+```css static/example.css
 h1 {
   font-size: 25px;
   font-weight: normal;
@@ -161,8 +160,7 @@ To kick things off, we'll create the following control route which doesn't do
 anything with CSP. We include a stylesheet to confirm that our sheet correctly
 styles the response.
 
-```tsx
-// routes/noCSP.tsx
+```tsx routes/noCSP.tsx
 import { RouteContext } from "$fresh/server.ts";
 
 export default function Home(req: Request, ctx: RouteContext) {
@@ -177,7 +175,7 @@ export default function Home(req: Request, ctx: RouteContext) {
 
 We can hit `http://localhost:8000/noCSP` and we should see the following:
 
-```
+```txt
 This page doesn't use CSP at all. Styles will be applied.
 ```
 
@@ -188,8 +186,7 @@ closely, we're using the wrong URL! This will cause the browser to reject the
 stylesheet, due to the header that Fresh produces. We get a `(blocked:csp)`
 status when the browser tries to request this resource.
 
-```tsx
-// routes/incorrectCSP.tsx
+```tsx routes/incorrectCSP.tsx
 import { RouteConfig, RouteContext } from "$fresh/server.ts";
 import { useCSP } from "$fresh/runtime.ts";
 
@@ -198,9 +195,7 @@ export default function Home(req: Request, ctx: RouteContext) {
     if (!csp.directives.styleSrc) {
       csp.directives.styleSrc = [];
     }
-    csp.directives.styleSrc.push(
-      "http://www.example.com",
-    );
+    csp.directives.styleSrc.push("http://www.example.com");
   });
   return (
     <>
@@ -217,7 +212,7 @@ export const config: RouteConfig = {
 
 We can hit `http://localhost:8000/incorrectCSP` and we should see the following:
 
-```
+```txt
 This page violates our configured CSP. Styles won't be applied.
 ```
 
@@ -226,8 +221,7 @@ This page violates our configured CSP. Styles won't be applied.
 Let's fix our simple mistake and use the correct URL. Everything is working
 correctly here.
 
-```tsx
-// routes/correctCSP.tsx
+```tsx routes/correctCSP.tsx
 import { RouteConfig, RouteContext } from "$fresh/server.ts";
 import { useCSP } from "$fresh/runtime.ts";
 
@@ -236,9 +230,7 @@ export default function Home(req: Request, ctx: RouteContext) {
     if (!csp.directives.styleSrc) {
       csp.directives.styleSrc = [];
     }
-    csp.directives.styleSrc.push(
-      "http://localhost:8000/example.css",
-    );
+    csp.directives.styleSrc.push("http://localhost:8000/example.css");
   });
   return (
     <>
@@ -255,7 +247,7 @@ export const config: RouteConfig = {
 
 We can hit `http://localhost:8000/correctCSP` and we should see the following:
 
-```
+```txt
 This page adheres to our configured CSP. Styles will be applied.
 ```
 
@@ -263,8 +255,7 @@ This page adheres to our configured CSP. Styles will be applied.
 
 What happens if we forget to use a `RouteConfig` in our route?
 
-```tsx
-// routes/cspNoRouteConfig.tsx
+```tsx routes/cspNoRouteConfig.tsx
 import { RouteContext } from "$fresh/server.ts";
 import { useCSP } from "$fresh/runtime.ts";
 
@@ -273,16 +264,14 @@ export default function Home(req: Request, ctx: RouteContext) {
     if (!csp.directives.styleSrc) {
       csp.directives.styleSrc = [];
     }
-    csp.directives.styleSrc.push(
-      "http://www.example.com",
-    );
+    csp.directives.styleSrc.push("http://www.example.com");
   });
   return (
     <>
       <h1>
         This page violates our configured CSP. But we don't have a{" "}
-        <code>RouteConfig</code>{" "}
-        enabled, so Fresh doesn't know to use the CSP. Styles will be applied.
+        <code>RouteConfig</code> enabled, so Fresh doesn't know to use the CSP.
+        Styles will be applied.
       </h1>
       <link rel="stylesheet" type="text/css" href="example.css" />
     </>
@@ -293,7 +282,7 @@ export default function Home(req: Request, ctx: RouteContext) {
 We can hit `http://localhost:8000/cspNoRouteConfig` and we should see the
 following:
 
-```
+```txt
 This page violates our configured CSP. But we don't have a RouteConfig enabled, so Fresh doesn't know to use the CSP. Styles will be applied.
 ```
 
@@ -305,8 +294,7 @@ should be able to receive `POST` requests. If the `reportOnly` flag is enabled,
 then the browser will ignore the CSP headers and log any issues to the
 `reportUri` destination.
 
-```tsx
-// routes/incorrectCSPwithReport.tsx
+```tsx routes/incorrectCSPwithReport.tsx
 import { RouteConfig, RouteContext } from "$fresh/server.ts";
 import { useCSP } from "$fresh/runtime.ts";
 
@@ -317,9 +305,7 @@ export default function Home(req: Request, ctx: RouteContext) {
       csp.directives.styleSrc = [];
     }
     csp.directives.reportUri = "http://localhost:8000/reportHandler";
-    csp.directives.styleSrc.push(
-      "http://www.example.com",
-    );
+    csp.directives.styleSrc.push("http://www.example.com");
   });
   return (
     <>
@@ -337,8 +323,7 @@ export const config: RouteConfig = {
 };
 ```
 
-```ts
-// routes/reportHandler.ts
+```ts routes/reportHandler.ts
 import { HandlerContext } from "$fresh/server.ts";
 
 export const handler = {
@@ -357,14 +342,14 @@ export const handler = {
 We can hit `http://localhost:8000/incorrectCSPwithReport` and we should see the
 following:
 
-```
+```txt
 This page violates our configured CSP. But we're using "reportOnly". Styles will be applied.
 ```
 
 We can then check our server and we'll see that `csp-reports.txt` has an entry
 like this:
 
-```json
+```json csp-reports.txt
 {
   "csp-report": {
     "document-uri": "http://localhost:8000/incorrectCSPwithReport",
diff --git a/docs/examples/using-deno-kv-oauth.md b/docs/latest/examples/using-deno-kv-oauth.md
similarity index 96%
rename from docs/examples/using-deno-kv-oauth.md
rename to docs/latest/examples/using-deno-kv-oauth.md
index 2124d6826c1..d97159fb920 100644
--- a/docs/examples/using-deno-kv-oauth.md
+++ b/docs/latest/examples/using-deno-kv-oauth.md
@@ -22,8 +22,7 @@ available.
 2. Create your pre-configured OAuth client instance. For reusability the
    instance is stored in `utils/oauth2_client.ts`.
 
-   ```ts
-   // utils/oauth2_client.ts
+   ```ts utils/oauth2_client.ts
    import { createGitHubOAuth2Client } from "https://deno.land/x/deno_kv_oauth@v0.2.4/mod.ts";
 
    export const oauth2Client = createGitHubOAuth2Client();
@@ -35,8 +34,7 @@ available.
    Please ensure that the `callback` handler matches the authorization callback
    URL in the configured OAuth application.
 
-   ```ts
-   // routes/signin.ts
+   ```ts routes/signin.ts
    import { Handlers } from "$fresh/server.ts";
    import { signIn } from "https://deno.land/x/deno_kv_oauth@v0.2.4/mod.ts";
    import { oauth2Client } from "../utils/oauth2_client.ts";
@@ -48,8 +46,7 @@ available.
    };
    ```
 
-   ```ts
-   // routes/signout.ts
+   ```ts routes/signout.ts
    import { Handlers } from "$fresh/server.ts";
    import { signOut } from "https://deno.land/x/deno_kv_oauth@v0.2.4/mod.ts";
 
@@ -60,8 +57,7 @@ available.
    };
    ```
 
-   ```ts
-   // routes/callback.ts
+   ```ts routes/callback.ts
    import { Handlers } from "$fresh/server.ts";
    import { handleCallback } from "https://deno.land/x/deno_kv_oauth@v0.2.4/mod.ts";
    import { oauth2Client } from "../utils/oauth2_client.ts";
@@ -77,8 +73,7 @@ available.
 
 4. Use Deno KV OAuth's helper functions where needed.
 
-   ```tsx
-   // routes/index.tsx
+   ```tsx routes/index.tsx
    import { Handlers, PageProps } from "$fresh/server.ts";
    import {
      getSessionAccessToken,
diff --git a/docs/examples/using-fresh-canary-version.md b/docs/latest/examples/using-fresh-canary-version.md
similarity index 96%
rename from docs/examples/using-fresh-canary-version.md
rename to docs/latest/examples/using-fresh-canary-version.md
index 464e8d7cea7..b026adebaf2 100644
--- a/docs/examples/using-fresh-canary-version.md
+++ b/docs/latest/examples/using-fresh-canary-version.md
@@ -16,7 +16,7 @@ How can you modify your project to no longer use the current release, but
 instead this one particular commit? Just make the following changes to your
 `deno.json`:
 
-```diff
+```diff deno.json
      "update": "deno run -A -r https://fresh.deno.dev/update ."
    },
    "imports": {
@@ -34,7 +34,7 @@ worry, you can use the same approach to reference any branch in a fork as well.
 Here's an example of referencing a feature in a forked repository that hasn't
 been merged yet (at the time of writing this):
 
-```diff
+```diff deno.json
      "update": "deno run -A -r https://fresh.deno.dev/update ."
    },
    "imports": {
@@ -55,13 +55,13 @@ create a test project based on your local changes.
 
 Instead of doing it like this:
 
-```sh
+```sh Terminal
 deno run -A -r https://fresh.deno.dev/
 ```
 
 do it like this:
 
-```sh
+```sh Terminal
 deno run -A -r path/to/fresh/init.ts
 ```
 
@@ -73,6 +73,6 @@ Of course there's no reason why you have to check out the Fresh source. You can
 create a project from the latest commit by combining the techniques on this page
 like this:
 
-```sh
+```sh Terminal
 deno run -A -r https://raw.githubusercontent.com/denoland/fresh/main/init.ts
 ```
diff --git a/docs/examples/using-twind-v1.md b/docs/latest/examples/using-twind-v1.md
similarity index 97%
rename from docs/examples/using-twind-v1.md
rename to docs/latest/examples/using-twind-v1.md
index bd162c5e57f..0577bead8f6 100644
--- a/docs/examples/using-twind-v1.md
+++ b/docs/latest/examples/using-twind-v1.md
@@ -6,7 +6,7 @@ description: |
 When you initialize a project with `deno run -A -r https://fresh.deno.dev`,
 you'll end up with a `main.ts` like the following:
 
-```ts
+```ts main.ts
 /// <reference no-default-lib="true" />
 /// <reference lib="dom" />
 /// <reference lib="dom.iterable" />
@@ -26,7 +26,7 @@ The template generates a Twind v0 project by default. If you want to use Twind
 v1 you can follow this guide. First of all, change the import path to use the
 `twindv1` plugin:
 
-```ts
+```ts main.ts
 /// <reference no-default-lib="true" />
 /// <reference lib="dom" />
 /// <reference lib="dom.iterable" />
@@ -45,7 +45,7 @@ await start(manifest, { plugins: [twindPlugin(twindConfig)] });
 The twind config object has changed significantly in v1, so we must also go
 change `twind.config.ts`. A good base looks like this:
 
-```ts
+```ts twind.config.ts
 import { defineConfig, Preset } from "https://esm.sh/@twind/core@1.1.3";
 import presetTailwind from "https://esm.sh/@twind/preset-tailwind@1.1.4";
 import presetAutoprefix from "https://esm.sh/@twind/preset-autoprefix@1.0.7";
diff --git a/docs/examples/writing-tests.md b/docs/latest/examples/writing-tests.md
similarity index 86%
rename from docs/examples/writing-tests.md
rename to docs/latest/examples/writing-tests.md
index fe675d9843a..99c8a43fe98 100644
--- a/docs/examples/writing-tests.md
+++ b/docs/latest/examples/writing-tests.md
@@ -9,9 +9,7 @@ through
 
 ## 1. Create your routes
 
-```tsx
-// routes/index.tsx
-
+```tsx routes/index.tsx
 import { Handlers } from "$fresh/server.ts";
 
 export const handler: Handlers = {
@@ -28,31 +26,19 @@ export const handler: Handlers = {
 };
 
 export default function HomePage() {
-  return (
-    <div>
-      Hello Deno!
-    </div>
-  );
+  return <div>Hello Deno!</div>;
 }
 ```
 
-```tsx
-// routes/foo.tsx
-
+```tsx routes/foo.tsx
 export default function FooPage() {
-  return (
-    <div>
-      Hello Foo!
-    </div>
-  );
+  return <div>Hello Foo!</div>;
 }
 ```
 
 ## 2. Write your tests
 
-```ts
-// tests/main_test.ts
-
+```ts tests/main_test.ts
 import { createHandler, ServeHandlerInfo } from "$fresh/server.ts";
 import manifest from "../fresh.gen.ts";
 import { assert, assertEquals } from "$std/testing/asserts.ts";
@@ -81,10 +67,7 @@ Deno.test("HTTP assert test.", async (t) => {
   });
 
   await t.step("#3 GET /foo", async () => {
-    const resp = await handler(
-      new Request("http://127.0.0.1/foo"),
-      CONN_INFO,
-    );
+    const resp = await handler(new Request("http://127.0.0.1/foo"), CONN_INFO);
     const text = await resp.text();
     assert(text.includes("<div>Hello Foo!</div>"));
   });
@@ -93,7 +76,7 @@ Deno.test("HTTP assert test.", async (t) => {
 
 ## 3. Run the tests
 
-```sh
+```sh Terminal
 $ deno test --allow-read --allow-env --allow-net
 running 1 test from ./tests/main_test.ts
 HTTP assert test. ...
diff --git a/docs/getting-started/adding-interactivity.md b/docs/latest/getting-started/adding-interactivity.md
similarity index 95%
rename from docs/getting-started/adding-interactivity.md
rename to docs/latest/getting-started/adding-interactivity.md
index b840c0cada2..2fdcb2cdf9c 100644
--- a/docs/getting-started/adding-interactivity.md
+++ b/docs/latest/getting-started/adding-interactivity.md
@@ -1,7 +1,7 @@
 ---
 description: |
   Add JavaScript based interactivity to your project without sacrificing user
-  experience, by using fresh's powerful islands system. 
+  experience, by using Fresh's powerful islands system.
 ---
 
 Up to now none of the pages in the demo project have contained any client side
@@ -28,9 +28,7 @@ component. For example a counter component would be defined in the file
 
 Here is an example of an island component that counts down to a specific time.
 
-```tsx
-// islands/Countdown.tsx
-
+```tsx islands/Countdown.tsx
 import { useSignal } from "@preact/signals";
 import { useEffect } from "preact/hooks";
 
@@ -55,7 +53,7 @@ export default function Countdown(props: { target: string }) {
   }, [props.target]);
 
   const secondsLeft = Math.floor(
-    (target.getTime() - now.value.getTime()) / 1000,
+    (target.getTime() - now.value.getTime()) / 1000
   );
 
   // If the target date has passed, we stop counting down.
@@ -73,9 +71,7 @@ To include this in a page component, one can just use the component normally.
 Fresh will take care of automatically mounting the island component on the
 client with the correct props:
 
-```tsx
-// routes/countdown.tsx
-
+```tsx routes/countdown.tsx
 import Countdown from "../islands/Countdown.tsx";
 
 export default function Page() {
diff --git a/docs/getting-started/create-a-project.md b/docs/latest/getting-started/create-a-project.md
similarity index 90%
rename from docs/getting-started/create-a-project.md
rename to docs/latest/getting-started/create-a-project.md
index 30e998f5dfd..8c880bd2bff 100644
--- a/docs/getting-started/create-a-project.md
+++ b/docs/latest/getting-started/create-a-project.md
@@ -1,15 +1,15 @@
 ---
 description: |
-  Create a new fresh project by running the fresh project creation tool. This
-  scaffolds out the various files and folders a fresh project needs.
+  Create a new Fresh project by running the Fresh project creation tool. This
+  scaffolds out the various files and folders a Fresh project needs.
 ---
 
-New Fresh projects can be created by using the fresh project creation tool. It
+New Fresh projects can be created by using the Fresh project creation tool. It
 will scaffold out a new project with some example files to get you started.
 
 To create a new project, run:
 
-```
+```sh Terminal
 deno run -A -r https://fresh.deno.dev
 cd fresh-project
 deno task start
@@ -19,7 +19,7 @@ This will scaffold out the new project, then switch into the newly created
 directory, and then start the development server.
 
 This will create a directory containing some files and directories. There are 4
-files that are strictly necessary to run a fresh project:
+files that are strictly necessary to run a Fresh project:
 
 - **`dev.ts`**: This is the development entry point for your project. This is
   the file that you run to start your project. This file doesn't need to be
diff --git a/docs/getting-started/create-a-route.md b/docs/latest/getting-started/create-a-route.md
similarity index 95%
rename from docs/getting-started/create-a-route.md
rename to docs/latest/getting-started/create-a-route.md
index 90223ae077d..b5f6dec4569 100644
--- a/docs/getting-started/create-a-route.md
+++ b/docs/latest/getting-started/create-a-route.md
@@ -1,7 +1,7 @@
 ---
 description: |
-  Create a new route to a fresh project by creating a new file in the `routes/`
-  folder. 
+  Create a new route to a Fresh project by creating a new file in the `routes/`
+  folder.
 ---
 
 After getting the project running locally, the next step is to add a new route
@@ -34,9 +34,7 @@ This is done with JSX.
 > [Preact][preact], a lighter weight virtual dom library that works similar to
 > React.
 
-```tsx
-// routes/about.tsx
-
+```tsx routes/about.tsx
 export default function AboutPage() {
   return (
     <main>
diff --git a/docs/getting-started/custom-handlers.md b/docs/latest/getting-started/custom-handlers.md
similarity index 97%
rename from docs/getting-started/custom-handlers.md
rename to docs/latest/getting-started/custom-handlers.md
index 169803df8a1..e0255505a81 100644
--- a/docs/getting-started/custom-handlers.md
+++ b/docs/latest/getting-started/custom-handlers.md
@@ -27,9 +27,7 @@ the HTTP method it handles.
 Here is an example of a custom `GET` handler that renders the page component and
 then adds a custom header to the response before returning it:
 
-```tsx
-// routes/about.tsx
-
+```tsx routes/about.tsx
 import { Handlers } from "$fresh/server.ts";
 
 export const handler: Handlers = {
@@ -54,9 +52,7 @@ Note that handlers do not need to call `ctx.render()`. This feature can be used
 to create API routes. Here is an API route that returns a random UUID as a JSON
 response:
 
-```ts
-// routes/api/random-uuid.ts
-
+```ts routes/api/random-uuid.ts
 import { Handlers } from "$fresh/server.ts";
 
 export const handler: Handlers = {
diff --git a/docs/getting-started/deploy-to-production.md b/docs/latest/getting-started/deploy-to-production.md
similarity index 95%
rename from docs/getting-started/deploy-to-production.md
rename to docs/latest/getting-started/deploy-to-production.md
index dec979ed68b..0591b269787 100644
--- a/docs/getting-started/deploy-to-production.md
+++ b/docs/latest/getting-started/deploy-to-production.md
@@ -1,6 +1,6 @@
 ---
 description: |
-  Deploy a fresh application to Deno Deploy in seconds, making it available on
+  Deploy a Fresh application to Deno Deploy in seconds, making it available on
   the edge globally - resulting in fantastic user latency worldwide.
 ---
 
diff --git a/docs/getting-started/dynamic-routes.md b/docs/latest/getting-started/dynamic-routes.md
similarity index 92%
rename from docs/getting-started/dynamic-routes.md
rename to docs/latest/getting-started/dynamic-routes.md
index df15a1fbfec..9c4b0323ac1 100644
--- a/docs/getting-started/dynamic-routes.md
+++ b/docs/latest/getting-started/dynamic-routes.md
@@ -1,6 +1,6 @@
 ---
 description: |
-  Create a dynamic route in fresh by adding a dynamic segment to the route name
+  Create a dynamic route in Fresh by adding a dynamic segment to the route name
   in the routes' file name on disk: `/greet/[name].tsx`.
 ---
 
@@ -12,7 +12,7 @@ that contains the name passed in the path.
 Before diving in, a quick refresher on "dynamic" routes. Dynamic routes don't
 just match a single static path, but rather a whole bunch of different paths
 based on a pattern. For example, the `/greet/:name` route will match the paths
-`/greet/Luca` and `/John`, but not `/greet/Luca/John`.
+`/greet/Luca` and `/greet/John`, but not `/greet/Luca/John`.
 
 Fresh supports dynamic routes out of the box through file system routing. To
 make any path segment dynamic, just put square brackets around that segment in
@@ -24,9 +24,7 @@ render a page. The module must once again expose a component as a default
 export. This time the component will receive the matched path segment properties
 as arguments in its `props` object though.
 
-```tsx
-// routes/greet/[name].tsx
-
+```tsx routes/greet/[name].tsx
 import { PageProps } from "$fresh/server.ts";
 
 export default function GreetPage(props: PageProps) {
diff --git a/docs/latest/getting-started/fetching-data.md b/docs/latest/getting-started/fetching-data.md
new file mode 100644
index 00000000000..ca5aca2237b
--- /dev/null
+++ b/docs/latest/getting-started/fetching-data.md
@@ -0,0 +1,55 @@
+---
+description: |
+  Fetch data for routes dynamically by creating a custom handler and passing
+  data to the render function.
+---
+
+All of the pages in the demo project so far have not used any dynamic data
+during rendering. In real projects, this is often different. In many cases you
+may need to read a file from disk (e.g. markdown for a blog post), or fetch some
+user data from an API or database.
+
+In order to fetch data, the route component must be asynchronous. The first
+parameter contains the client's
+[`Request`](https://developer.mozilla.org/en-US/docs/Web/API/Request) object.
+The second `ctx` parameter is used to get the route parameters.
+
+Here is an example of a route that fetches user data from the GitHub API and
+renders it in a page component.
+
+```tsx routes/github/[username].tsx
+import { RouteContext } from "$fresh/server.ts";
+
+interface GitHubResponse {
+  login: string;
+  name: string;
+  avatar_url: string;
+}
+
+export default async function Page(_req: Request, ctx: RouteContext) {
+  const resp = await fetch(
+    `https://api.github.com/users/${ctx.params.username}`
+  );
+
+  if (!resp.ok) {
+    return <h1>An Error occurred</h1>;
+  }
+
+  const { login, name, avatar_url } = (await resp.json()) as GitHubResponse;
+
+  return (
+    <div>
+      <img src={avatar_url} width={64} height={64} />
+      <h1>{name}</h1>
+      <p>{login}</p>
+    </div>
+  );
+}
+```
+
+The data is first fetched inside our page component. We check that the response
+is returned successfully, by checking whether the
+[`ok`](https://developer.mozilla.org/en-US/docs/Web/API/Response/ok) property is
+true. If the API call was successful, we will see our div with the user's GitHub
+image, name, and username. Otherwise, we should see a heading saying: "An Error
+occurred."
diff --git a/docs/getting-started/form-submissions.md b/docs/latest/getting-started/form-submissions.md
similarity index 96%
rename from docs/getting-started/form-submissions.md
rename to docs/latest/getting-started/form-submissions.md
index c566ee68e1d..eecd1d8db7b 100644
--- a/docs/getting-started/form-submissions.md
+++ b/docs/latest/getting-started/form-submissions.md
@@ -29,9 +29,7 @@ any necessary processing on the form data, and then pass data to the
 Here is an example implementing a search form that filters an array of names
 server side:
 
-```tsx
-// routes/search.tsx
-
+```tsx routes/search.tsx
 import { Handlers, PageProps } from "$fresh/server.ts";
 
 const NAMES = ["Alice", "Bob", "Charlie", "Dave", "Eve", "Frank"];
@@ -59,7 +57,9 @@ export default function Page({ data }: PageProps<Data>) {
         <button type="submit">Search</button>
       </form>
       <ul>
-        {results.map((name) => <li key={name}>{name}</li>)}
+        {results.map((name) => (
+          <li key={name}>{name}</li>
+        ))}
       </ul>
     </div>
   );
diff --git a/docs/getting-started/index.md b/docs/latest/getting-started/index.md
similarity index 100%
rename from docs/getting-started/index.md
rename to docs/latest/getting-started/index.md
diff --git a/docs/getting-started/running-locally.md b/docs/latest/getting-started/running-locally.md
similarity index 92%
rename from docs/getting-started/running-locally.md
rename to docs/latest/getting-started/running-locally.md
index a8646393dab..ac629e6cbd3 100644
--- a/docs/getting-started/running-locally.md
+++ b/docs/latest/getting-started/running-locally.md
@@ -1,6 +1,6 @@
 ---
 description: |
-  To start a fresh project, just run `deno task start`. This will start the
+  To start a Fresh project, just run `deno task start`. This will start the
   project with default permission flags, in watch mode.
 ---
 
@@ -8,7 +8,7 @@ The next step after scaffolding out a new project, is to actually start it. To
 do this you can just `deno task start`. Environment variables will be
 automatically read from `.env`.
 
-```
+```sh Terminal
 $ deno task start
 Watcher Process started.
  üçã Fresh ready
@@ -27,7 +27,7 @@ the appropriate flags. You will need to provide permission flags for:
   using a WebAssembly binary.
 
 For development, you also want to run with the [`--watch` flag][--watch], so the
-fresh server will automatically reload whenever you make a change to your code.
+Fresh server will automatically reload whenever you make a change to your code.
 By default `--watch` only watches over files in your module graph. Some project
 files like static files are not part of the module graph, but you probably want
 to restart/reload whenever you make a change to them too. This can be done by
@@ -38,19 +38,19 @@ you add a new route.
 If you want to change the port or host, modify the options bag of the `start()`
 call in `main.ts` to include an explicit port number:
 
-```js
+```js main.ts
 await start(manifest, { port: 3000 });
 ```
 
 You can also change the port by setting the `PORT` environment variable:
 
-```
+```sh Terminal
 $ PORT=3000 deno task start
 ```
 
 Combining all of this we get the following `deno run` command:
 
-```
+```sh Terminal
 $ deno run --allow-net --allow-read --allow-env --allow-run --watch=static/,routes/ main.ts
 Watcher Process started.
  üçã Fresh ready
diff --git a/docs/integrations/index.md b/docs/latest/integrations/index.md
similarity index 100%
rename from docs/integrations/index.md
rename to docs/latest/integrations/index.md
diff --git a/docs/introduction/index.md b/docs/latest/introduction/index.md
similarity index 100%
rename from docs/introduction/index.md
rename to docs/latest/introduction/index.md
diff --git a/docs/toc.ts b/docs/toc.ts
index b6b7ce3ad8a..65090aa5055 100644
--- a/docs/toc.ts
+++ b/docs/toc.ts
@@ -46,18 +46,20 @@ const toc: RawTableOfContents = {
         pages: [
           ["architecture", "Architecture", "link:latest"],
           ["server-components", "Server Components", "link:latest"],
+          ["routing", "Routing", "link:latest"],
           ["routes", "Routes", "link:latest"],
+          ["app-wrapper", "App wrapper", "link:latest"],
+          ["layouts", "Layouts", "link:latest"],
           ["forms", "Forms", "link:latest"],
           ["islands", "Interactive islands", "link:latest"],
           ["static-files", "Static files", "link:latest"],
-          ["middleware", "Route middleware", "link:latest"],
+          ["middleware", "Middlewares", "link:latest"],
           ["error-pages", "Error pages", "link:latest"],
-          ["routing", "Routing", "link:latest"],
           ["data-fetching", "Data fetching", "link:latest"],
+          ["ahead-of-time-builds", "Ahead-of-time Builds", "link:latest"],
           ["deployment", "Deployment", "link:latest"],
           ["plugins", "Plugins", "link:latest"],
-          ["updating", "Updating Fresh", "link:canary"],
-          ["app-wrapper", "Application wrapper", "link:latest"],
+          ["updating", "Updating Fresh", "link:latest"],
           ["server-configuration", "Server configuration", "link:latest"],
         ],
       },
@@ -70,7 +72,6 @@ const toc: RawTableOfContents = {
         link: "latest",
         pages: [
           ["modifying-the-head", "Modifying the <head>", "link:latest"],
-          ["setting-the-language", "Setting the language", "link:latest"],
           ["writing-tests", "Writing tests", "link:latest"],
           [
             "changing-the-src-dir",
@@ -124,18 +125,20 @@ const toc: RawTableOfContents = {
         pages: [
           ["architecture", "Architecture"],
           ["server-components", "Server Components"],
+          ["routing", "Routing"],
           ["routes", "Routes"],
+          ["app-wrapper", "App wrapper"],
+          ["layouts", "Layouts"],
           ["forms", "Forms"],
           ["islands", "Interactive islands"],
           ["static-files", "Static files"],
-          ["middleware", "Route middleware"],
+          ["middleware", "Middlewares"],
           ["error-pages", "Error pages"],
-          ["routing", "Routing"],
           ["data-fetching", "Data fetching"],
+          ["ahead-of-time-builds", "Ahead-of-time Builds"],
           ["deployment", "Deployment"],
           ["plugins", "Plugins"],
           ["updating", "Updating Fresh"],
-          ["app-wrapper", "Application wrapper"],
           ["server-configuration", "Server configuration"],
         ],
       },
@@ -146,7 +149,6 @@ const toc: RawTableOfContents = {
         title: "Examples",
         pages: [
           ["modifying-the-head", "Modifying the <head>"],
-          ["setting-the-language", "Setting the language"],
           ["writing-tests", "Writing tests"],
           ["changing-the-src-dir", "Changing the source directory"],
           ["using-twind-v1", "Using Twind v1"],
@@ -157,6 +159,7 @@ const toc: RawTableOfContents = {
           ["handling-complex-routes", "Handling complex routes"],
           ["rendering-markdown", "Rendering markdown"],
           ["sharing-state-between-islands", "Sharing state between islands"],
+          ["using-deno-kv-oauth", "Using Deno KV OAuth"],
           ["using-csp", "Using CSP"],
         ],
       },
diff --git a/init.ts b/init.ts
index 64db1ac553d..1beb228d69a 100644
--- a/init.ts
+++ b/init.ts
@@ -27,6 +27,7 @@ OPTIONS:
     --force   Overwrite existing files
     --twind   Setup project to use 'twind' for styling
     --vscode  Setup project for VSCode
+    --docker  Setup Project to use Docker
 `;
 
 const CONFIRM_EMPTY_MESSAGE =
@@ -38,8 +39,8 @@ const USE_TWIND_MESSAGE =
 const USE_VSCODE_MESSAGE = "Do you use VS Code?";
 
 const flags = parse(Deno.args, {
-  boolean: ["force", "twind", "vscode"],
-  default: { "force": null, "twind": null, "vscode": null },
+  boolean: ["force", "twind", "vscode", "docker"],
+  default: { "force": null, "twind": null, "vscode": null, "docker": null },
 });
 
 console.log();
@@ -88,6 +89,8 @@ const useVSCode = flags.vscode === null
   ? confirm(USE_VSCODE_MESSAGE)
   : flags.vscode;
 
+const useDocker = flags.docker;
+
 await Deno.mkdir(join(resolvedDirectory, "routes", "api"), { recursive: true });
 await Deno.mkdir(join(resolvedDirectory, "islands"), { recursive: true });
 await Deno.mkdir(join(resolvedDirectory, "static"), { recursive: true });
@@ -102,6 +105,9 @@ const GITIGNORE = `# dotenv environment variable files
 .env.test.local
 .env.production.local
 .env.local
+
+# Fresh build directory
+_fresh/
 `;
 
 await Deno.writeTextFile(
@@ -109,35 +115,54 @@ await Deno.writeTextFile(
   GITIGNORE,
 );
 
-const ROUTES_INDEX_TSX = `import { Head } from "$fresh/runtime.ts";
-import { useSignal } from "@preact/signals";
+if (useDocker) {
+  const DENO_VERSION = Deno.version.deno;
+  const DOCKERFILE_TEXT = `
+FROM denoland/deno:${DENO_VERSION}
+
+ARG GIT_REVISION
+ENV DENO_DEPLOYMENT_ID=\${GIT_REVISION}
+
+WORKDIR /app
+
+COPY . .
+RUN deno cache main.ts
+
+EXPOSE 8000
+
+CMD ["run", "-A", "main.ts"]
+
+`;
+
+  await Deno.writeTextFile(
+    join(resolvedDirectory, "Dockerfile"),
+    DOCKERFILE_TEXT,
+  );
+}
+
+const ROUTES_INDEX_TSX = `import { useSignal } from "@preact/signals";
 import Counter from "../islands/Counter.tsx";
 
 export default function Home() {
   const count = useSignal(3);
   return (
-    <>
-      <Head>
-        <title>${basename(resolvedDirectory)}</title>
-      </Head>
-      <div class="px-4 py-8 mx-auto bg-[#86efac]">
-        <div class="max-w-screen-md mx-auto flex flex-col items-center justify-center">
-          <img
-            class="my-6"
-            src="/logo.svg"
-            width="128"
-            height="128"
-            alt="the fresh logo: a sliced lemon dripping with juice"
-          />
-          <h1 class="text-4xl font-bold">Welcome to fresh</h1>
-          <p class="my-4">
-            Try updating this message in the
-            <code class="mx-2">./routes/index.tsx</code> file, and refresh.
-          </p>
-          <Counter count={count} />
-        </div>
+    <div class="px-4 py-8 mx-auto bg-[#86efac]">
+      <div class="max-w-screen-md mx-auto flex flex-col items-center justify-center">
+        <img
+          class="my-6"
+          src="/logo.svg"
+          width="128"
+          height="128"
+          alt="the Fresh logo: a sliced lemon dripping with juice"
+        />
+        <h1 class="text-4xl font-bold">Welcome to Fresh</h1>
+        <p class="my-4">
+          Try updating this message in the
+          <code class="mx-2">./routes/index.tsx</code> file, and refresh.
+        </p>
+        <Counter count={count} />
       </div>
-    </>
+    </div>
   );
 }
 `;
@@ -201,8 +226,7 @@ await Deno.writeTextFile(
 );
 
 // 404 page
-const ROUTES_404_PAGE = `
-import { Head } from "$fresh/runtime.ts";
+const ROUTES_404_PAGE = `import { Head } from "$fresh/runtime.ts";
 
 export default function Error404() {
   return (
@@ -217,7 +241,7 @@ export default function Error404() {
             src="/logo.svg"
             width="128"
             height="128"
-            alt="the fresh logo: a sliced lemon dripping with juice"
+            alt="the Fresh logo: a sliced lemon dripping with juice"
           />
           <h1 class="text-4xl font-bold">404 - Page not found</h1>
           <p class="my-4">
@@ -280,7 +304,7 @@ const NO_TWIND_STYLES = `
 *,
 *::before,
 *::after {
-  box-sizing: boder-box;
+  box-sizing: border-box;
 }
 * {
   margin: 0;
@@ -409,23 +433,34 @@ const APP_WRAPPER = useTwind
 
 export default function App({ Component }: AppProps) {
   return (
-    <>
-      <Component />
-    </>
+    <html>
+      <head>
+        <meta charSet="utf-8" />
+        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
+        <title>${basename(resolvedDirectory)}</title>
+      </head>
+      <body>
+        <Component />
+      </body>
+    </html>
   );
 }
 `
   : `import { AppProps } from "$fresh/server.ts";
-import { Head } from "$fresh/runtime.ts";
 
 export default function App({ Component }: AppProps) {
   return (
-    <>
-      <Head>
+    <html>
+      <head>
+        <meta charSet="utf-8" />
+        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
+        <title>${basename(resolvedDirectory)}</title>
         <link rel="stylesheet" href="/styles.css" />
-      </Head>
-      <Component />
-    </>
+      </head>
+      <body>
+        <Component />
+      </body>
+    </html>
   );
 }
 `;
@@ -463,9 +498,23 @@ try {
     new Uint8Array(faviconArrayBuffer),
   );
 } catch {
-  // Skip this and be silent if there is a nework issue.
+  // Skip this and be silent if there is a network issue.
+}
+
+let FRESH_CONFIG_TS = `import { defineConfig } from "$fresh/server.ts";\n`;
+if (useTwind) {
+  FRESH_CONFIG_TS += `import twindPlugin from "$fresh/plugins/twind.ts"
+import twindConfig from "./twind.config.ts";`;
 }
 
+FRESH_CONFIG_TS += `
+export default defineConfig({${
+  useTwind ? `\n  plugins: [twindPlugin(twindConfig)]\n` : ""
+}});
+`;
+const CONFIG_TS_PATH = join(resolvedDirectory, "fresh.config.ts");
+await Deno.writeTextFile(CONFIG_TS_PATH, FRESH_CONFIG_TS);
+
 let MAIN_TS = `/// <reference no-default-lib="true" />
 /// <reference lib="dom" />
 /// <reference lib="dom.iterable" />
@@ -476,27 +525,20 @@ import "$std/dotenv/load.ts";
 
 import { start } from "$fresh/server.ts";
 import manifest from "./fresh.gen.ts";
+import config from "./fresh.config.ts";
 `;
 
-if (useTwind) {
-  MAIN_TS += `
-import twindPlugin from "$fresh/plugins/twind.ts";
-import twindConfig from "./twind.config.ts";
-`;
-}
-
 MAIN_TS += `
-await start(manifest${
-  useTwind ? ", { plugins: [twindPlugin(twindConfig)] }" : ""
-});\n`;
+await start(manifest, config);\n`;
 const MAIN_TS_PATH = join(resolvedDirectory, "main.ts");
 await Deno.writeTextFile(MAIN_TS_PATH, MAIN_TS);
 
 const DEV_TS = `#!/usr/bin/env -S deno run -A --watch=static/,routes/
 
 import dev from "$fresh/dev.ts";
+import config from "./fresh.config.ts";
 
-await dev(import.meta.url, "./main.ts");
+await dev(import.meta.url, "./main.ts", config);
 `;
 const DEV_TS_PATH = join(resolvedDirectory, "dev.ts");
 await Deno.writeTextFile(DEV_TS_PATH, DEV_TS);
@@ -509,7 +551,11 @@ try {
 const config = {
   lock: false,
   tasks: {
+    check:
+      "deno fmt --check && deno lint && deno check **/*.ts && deno check **/*.tsx",
     start: "deno run -A --watch=static/,routes/ dev.ts",
+    build: "deno run -A dev.ts build",
+    preview: "deno run -A main.ts",
     update: "deno run -A -r https://fresh.deno.dev/update .",
   },
   lint: {
diff --git a/plugins/twindv1.ts b/plugins/twindv1.ts
index 33d89aa84f1..042d92c21e1 100644
--- a/plugins/twindv1.ts
+++ b/plugins/twindv1.ts
@@ -1,4 +1,4 @@
-import { stringify, virtual } from "https://esm.sh/@twind/core@1.1.3";
+import { stringify, virtual } from "./twindv1_deps.ts";
 import { Plugin } from "../server.ts";
 
 import { Options, setup, STYLE_ELEMENT_ID } from "./twindv1/shared.ts";
diff --git a/plugins/twindv1/main.ts b/plugins/twindv1/main.ts
index 1d7f0e990f2..f6f871a6421 100644
--- a/plugins/twindv1/main.ts
+++ b/plugins/twindv1/main.ts
@@ -1,9 +1,4 @@
-import {
-  cssom,
-  getSheet,
-  setup,
-  TwindConfig,
-} from "https://esm.sh/@twind/core@1.1.3";
+import { cssom, getSheet, setup, TwindConfig } from "../twindv1_deps.ts";
 import { STYLE_ELEMENT_ID } from "./shared.ts";
 
 export default function hydrate(options: TwindConfig) {
diff --git a/plugins/twindv1/shared.ts b/plugins/twindv1/shared.ts
index 361b88447b1..39816353794 100644
--- a/plugins/twindv1/shared.ts
+++ b/plugins/twindv1/shared.ts
@@ -1,10 +1,5 @@
 import { JSX, options as preactOptions, VNode } from "preact";
-import {
-  setup as twSetup,
-  Sheet,
-  tw,
-  TwindConfig,
-} from "https://esm.sh/@twind/core@1.1.3";
+import { setup as twSetup, Sheet, tw, TwindConfig } from "../twindv1_deps.ts";
 
 type PreactOptions = typeof preactOptions & { __b?: (vnode: VNode) => void };
 
diff --git a/plugins/twindv1_deps.ts b/plugins/twindv1_deps.ts
new file mode 100644
index 00000000000..163f4d421a3
--- /dev/null
+++ b/plugins/twindv1_deps.ts
@@ -0,0 +1 @@
+export * from "https://esm.sh/@twind/core@1.1.3";
diff --git a/src/build/esbuild.ts b/src/build/esbuild.ts
index fa7b0d659cd..66bbad17475 100644
--- a/src/build/esbuild.ts
+++ b/src/build/esbuild.ts
@@ -163,7 +163,7 @@ export class EsbuildSnapshot implements BuildSnapshot {
   }
 
   get paths(): string[] {
-    return Object.keys(this.#files);
+    return Array.from(this.#files.keys());
   }
 
   read(path: string): Uint8Array | null {
diff --git a/src/dev/build.ts b/src/dev/build.ts
new file mode 100644
index 00000000000..7780ec36d20
--- /dev/null
+++ b/src/dev/build.ts
@@ -0,0 +1,43 @@
+import { ServerContext } from "../server/context.ts";
+import { FreshOptions, Manifest } from "../server/mod.ts";
+import { dirname, fromFileUrl, join, toFileUrl } from "../server/deps.ts";
+import { fs } from "./deps.ts";
+
+export async function build(
+  manifestPath: string,
+  opts: FreshOptions,
+) {
+  const manifest = (await import(toFileUrl(manifestPath).href))
+    .default as Manifest;
+
+  const outDir = join(dirname(fromFileUrl(manifest.baseUrl)), "_fresh");
+
+  // Ensure that build dir is empty
+  await fs.emptyDir(outDir);
+
+  const ctx = await ServerContext.fromManifest(manifest, {
+    ...opts,
+    skipSnapshot: true,
+  });
+
+  // Bundle assets
+  const snapshot = await ctx.buildSnapshot();
+
+  // Write output files to disk
+  await Promise.all(snapshot.paths.map((fileName) => {
+    const data = snapshot.read(fileName);
+    if (data === null) return;
+
+    return Deno.writeFile(join(outDir, fileName), data);
+  }));
+
+  // Write dependency snapshot file to disk
+  const deps: Record<string, string[]> = {};
+  for (const filePath of snapshot.paths) {
+    const dependencies = snapshot.dependencies(filePath);
+    deps[filePath] = dependencies;
+  }
+
+  const snapshotPath = join(outDir, "snapshot.json");
+  await Deno.writeTextFile(snapshotPath, JSON.stringify(deps, null, 2));
+}
diff --git a/src/dev/deps.ts b/src/dev/deps.ts
index bec45345148..6ac6533f16e 100644
--- a/src/dev/deps.ts
+++ b/src/dev/deps.ts
@@ -13,10 +13,17 @@ export {
 } from "https://deno.land/std@0.193.0/path/mod.ts";
 export { DAY, WEEK } from "https://deno.land/std@0.193.0/datetime/constants.ts";
 export * as colors from "https://deno.land/std@0.193.0/fmt/colors.ts";
-export { walk, WalkError } from "https://deno.land/std@0.193.0/fs/walk.ts";
+export {
+  walk,
+  type WalkEntry,
+  WalkError,
+} from "https://deno.land/std@0.193.0/fs/walk.ts";
 export { parse } from "https://deno.land/std@0.193.0/flags/mod.ts";
 export { gte } from "https://deno.land/std@0.193.0/semver/mod.ts";
 export { existsSync } from "https://deno.land/std@0.193.0/fs/mod.ts";
+export * as semver from "https://deno.land/std@0.195.0/semver/mod.ts";
+export * as JSONC from "https://deno.land/std@0.195.0/jsonc/mod.ts";
+export * as fs from "https://deno.land/std@0.195.0/fs/mod.ts";
 
 // ts-morph
 export { Node, Project } from "https://deno.land/x/ts_morph@17.0.1/mod.ts";
diff --git a/src/dev/imports.ts b/src/dev/imports.ts
index 43be1047db3..54e47f8b431 100644
--- a/src/dev/imports.ts
+++ b/src/dev/imports.ts
@@ -1,5 +1,5 @@
 export const RECOMMENDED_PREACT_VERSION = "10.15.1";
-export const RECOMMENDED_PREACT_RTS_VERSION = "6.2.0";
+export const RECOMMENDED_PREACT_RTS_VERSION = "6.2.1";
 export const RECOMMENDED_PREACT_SIGNALS_VERSION = "1.1.3";
 export const RECOMMENDED_PREACT_SIGNALS_CORE_VERSION = "1.2.3";
 export const RECOMMENDED_TWIND_VERSION = "0.16.19";
diff --git a/src/dev/mod.ts b/src/dev/mod.ts
index 162c6d72383..519e803d207 100644
--- a/src/dev/mod.ts
+++ b/src/dev/mod.ts
@@ -8,8 +8,11 @@ import {
   posix,
   relative,
   walk,
+  WalkEntry,
 } from "./deps.ts";
 import { error } from "./error.ts";
+import { FreshOptions } from "../server/mod.ts";
+import { build } from "./build.ts";
 
 const MIN_DENO_VERSION = "1.31.0";
 
@@ -30,18 +33,19 @@ export function ensureMinDenoVersion() {
   }
 }
 
-async function collectDir(dir: string): Promise<string[]> {
+async function collectDir(
+  dir: string,
+  callback: (entry: WalkEntry, dir: string) => void,
+): Promise<void> {
   // Check if provided path is a directory
   try {
     const stat = await Deno.stat(dir);
-    if (!stat.isDirectory) return [];
+    if (!stat.isDirectory) return;
   } catch (err) {
-    if (err instanceof Deno.errors.NotFound) return [];
+    if (err instanceof Deno.errors.NotFound) return;
     throw err;
   }
 
-  const paths = [];
-  const fileNames = new Set<string>();
   const routesFolder = walk(dir, {
     includeDirs: false,
     includeFiles: true,
@@ -49,21 +53,8 @@ async function collectDir(dir: string): Promise<string[]> {
   });
 
   for await (const entry of routesFolder) {
-    const fileNameWithoutExt = relative(dir, entry.path).split(".").slice(0, -1)
-      .join(".");
-
-    if (fileNames.has(fileNameWithoutExt)) {
-      throw new Error(
-        `Route conflict detected. Multiple files have the same name: ${dir}${fileNameWithoutExt}`,
-      );
-    }
-
-    fileNames.add(fileNameWithoutExt);
-    paths.push(relative(dir, entry.path));
+    callback(entry, dir);
   }
-
-  paths.sort();
-  return paths;
 }
 
 interface Manifest {
@@ -71,12 +62,45 @@ interface Manifest {
   islands: string[];
 }
 
+const GROUP_REG = /[/\\\\]\((_[^/\\\\]+)\)[/\\\\]/;
 export async function collect(directory: string): Promise<Manifest> {
-  const [routes, islands] = await Promise.all([
-    collectDir(join(directory, "./routes")),
-    collectDir(join(directory, "./islands")),
+  const filePaths = new Set<string>();
+
+  const routes: string[] = [];
+  const islands: string[] = [];
+  await Promise.all([
+    collectDir(join(directory, "./routes"), (entry, dir) => {
+      const rel = join("routes", relative(dir, entry.path));
+      const normalized = rel.slice(0, rel.lastIndexOf("."));
+
+      // A `(_islands)` path segment is a local island folder.
+      // Any route path segment wrapped in `(_...)` is ignored
+      // during route collection.
+      const match = normalized.match(GROUP_REG);
+      if (match && match[1].startsWith("_")) {
+        if (match[1] === "_islands") {
+          islands.push(rel);
+        }
+        return;
+      }
+
+      if (filePaths.has(normalized)) {
+        throw new Error(
+          `Route conflict detected. Multiple files have the same name: ${dir}${normalized}`,
+        );
+      }
+      filePaths.add(normalized);
+      routes.push(rel);
+    }),
+    collectDir(join(directory, "./islands"), (entry, dir) => {
+      const rel = join("islands", relative(dir, entry.path));
+      islands.push(rel);
+    }),
   ]);
 
+  routes.sort();
+  islands.sort();
+
   return { routes, islands };
 }
 
@@ -94,20 +118,20 @@ function toImportSpecifier(file: string) {
 export async function generate(directory: string, manifest: Manifest) {
   const { routes, islands } = manifest;
 
-  const output = `// DO NOT EDIT. This file is generated by fresh.
+  const output = `// DO NOT EDIT. This file is generated by Fresh.
 // This file SHOULD be checked into source version control.
 // This file is automatically updated during development when running \`dev.ts\`.
 
 ${
     routes.map((file, i) =>
-      `import * as $${i} from "${toImportSpecifier(join("routes", file))}";`
+      `import * as $${i} from "${toImportSpecifier(file)}";`
     ).join(
       "\n",
     )
   }
 ${
     islands.map((file, i) =>
-      `import * as $$${i} from "${toImportSpecifier(join("islands", file))}";`
+      `import * as $$${i} from "${toImportSpecifier(file)}";`
     )
       .join("\n")
   }
@@ -116,7 +140,7 @@ const manifest = {
   routes: {
     ${
     routes.map((file, i) =>
-      `${JSON.stringify(`${toImportSpecifier(join("routes", file))}`)}: $${i},`
+      `${JSON.stringify(`${toImportSpecifier(file)}`)}: $${i},`
     )
       .join("\n    ")
   }
@@ -124,9 +148,7 @@ const manifest = {
   islands: {
     ${
     islands.map((file, i) =>
-      `${
-        JSON.stringify(`${toImportSpecifier(join("islands", file))}`)
-      }: $$${i},`
+      `${JSON.stringify(`${toImportSpecifier(file)}`)}: $$${i},`
     )
       .join("\n    ")
   }
@@ -163,7 +185,11 @@ export default manifest;
   );
 }
 
-export async function dev(base: string, entrypoint: string) {
+export async function dev(
+  base: string,
+  entrypoint: string,
+  options: FreshOptions = {},
+) {
   ensureMinDenoVersion();
 
   // Run update check in background
@@ -189,7 +215,11 @@ export async function dev(base: string, entrypoint: string) {
 
   if (manifestChanged) await generate(dir, newManifest);
 
-  await import(entrypoint);
+  if (Deno.args.includes("build")) {
+    await build(join(dir, "fresh.gen.ts"), options);
+  } else {
+    await import(entrypoint);
+  }
 }
 
 function arraysEqual<T>(a: T[], b: T[]): boolean {
diff --git a/src/dev/update_check.ts b/src/dev/update_check.ts
index 0eabfc0696e..e5642d71088 100644
--- a/src/dev/update_check.ts
+++ b/src/dev/update_check.ts
@@ -1,4 +1,4 @@
-import { colors, join } from "./deps.ts";
+import { colors, join, semver } from "./deps.ts";
 
 export interface CheckFile {
   last_checked: string;
@@ -45,10 +45,18 @@ async function fetchLatestVersion() {
   throw new Error(`Could not fetch latest version.`);
 }
 
+async function readCurrentVersion() {
+  const versions = (await import("../../versions.json", {
+    "assert": { type: "json" },
+  })).default as string[];
+  return versions[0];
+}
+
 export async function updateCheck(
   interval: number,
   getCacheDir = getFreshCacheDir,
   getLatestVersion = fetchLatestVersion,
+  getCurrentVersion = readCurrentVersion,
 ) {
   // Skip update checks on CI or Deno Deploy
   if (
@@ -70,13 +78,11 @@ export async function updateCheck(
     }
   }
 
-  const versions = (await import("../../versions.json", {
-    "assert": { type: "json" },
-  })).default as string[];
+  const version = await getCurrentVersion();
 
   let checkFile: CheckFile = {
-    current_version: versions[0],
-    latest_version: versions[0],
+    current_version: version,
+    latest_version: version,
     last_checked: new Date(0).toISOString(),
   };
   try {
@@ -89,9 +95,9 @@ export async function updateCheck(
   }
 
   // Update current version
-  checkFile.current_version = versions[0];
+  checkFile.current_version = version;
 
-  // Only check in the specificed interval
+  // Only check in the specified interval
   if (Date.now() >= new Date(checkFile.last_checked).getTime() + interval) {
     try {
       checkFile.latest_version = await getLatestVersion();
@@ -105,7 +111,12 @@ export async function updateCheck(
     }
   }
 
-  if (checkFile.current_version !== checkFile.latest_version) {
+  // Only show update message if current version is smaller than latest
+  const currentVersion = semver.parse(checkFile.current_version);
+  const latestVersion = semver.parse(checkFile.latest_version);
+  if (
+    semver.lt(currentVersion, latestVersion)
+  ) {
     const current = colors.bold(colors.rgb8(checkFile.current_version, 208));
     const latest = colors.bold(colors.rgb8(checkFile.latest_version, 121));
     console.log(
diff --git a/src/runtime/entrypoints/main.ts b/src/runtime/entrypoints/main.ts
index c2fe076dea5..75555661999 100644
--- a/src/runtime/entrypoints/main.ts
+++ b/src/runtime/entrypoints/main.ts
@@ -97,7 +97,7 @@ interface Marker {
   // string representing the actual intended comment value which makes
   // a bunch of stuff easier.
   text: string;
-  startNode: Comment;
+  startNode: Comment | null;
   endNode: Comment | null;
 }
 
@@ -143,7 +143,7 @@ function _walkInner(
       ? markerStack[markerStack.length - 1]
       : null;
 
-    // We use comment nodes to mark fresh islands and slots
+    // We use comment nodes to mark Fresh islands and slots
     if (isCommentNode(sib)) {
       let comment = sib.data;
       if (comment.startsWith("!--")) {
@@ -190,7 +190,7 @@ function _walkInner(
           }
 
           // Remove markers
-          marker.startNode.remove();
+          marker.startNode?.remove();
           sib = sib.nextSibling;
           marker.endNode.remove();
           continue;
@@ -203,12 +203,44 @@ function _walkInner(
 
             let child: Node | null = marker.startNode;
             while (
-              (child = child.nextSibling) !== null && child !== marker.endNode
+              (child = child!.nextSibling) !== null && child !== marker.endNode
             ) {
               children.push(child);
             }
 
-            const vnode = vnodeStack.pop();
+            const vnode = vnodeStack[vnodeStack.length - 1];
+
+            if (vnode.props.children == null) {
+              const [id, exportName, n] = comment.slice("/frsh-".length).split(
+                ":",
+              );
+
+              const sel = `#frsh-slot-${id}-${exportName}-${n}-children`;
+              const template = document.querySelector(sel) as
+                | HTMLTemplateElement
+                | null;
+
+              if (template !== null) {
+                markerStack.push({
+                  kind: MarkerKind.Slot,
+                  endNode: null,
+                  startNode: null,
+                  text: "foo",
+                });
+
+                const node = template.content.cloneNode(true);
+                _walkInner(
+                  islands,
+                  props,
+                  markerStack,
+                  vnodeStack,
+                  node,
+                );
+
+                markerStack.pop();
+              }
+            }
+            vnodeStack.pop();
 
             const parentNode = sib.parentNode! as HTMLElement;
 
@@ -242,7 +274,7 @@ function _walkInner(
               : setTimeout(_render, 0);
 
             // Remove markers
-            marker.startNode.remove();
+            marker.startNode?.remove();
             sib = sib.nextSibling;
             marker.endNode.remove();
             continue;
diff --git a/src/server/context.ts b/src/server/context.ts
index d85cabaa78a..9eb5b919c24 100644
--- a/src/server/context.ts
+++ b/src/server/context.ts
@@ -1,4 +1,5 @@
 import {
+  colors,
   dirname,
   extname,
   fromFileUrl,
@@ -9,7 +10,7 @@ import {
   typeByExtension,
   walk,
 } from "./deps.ts";
-import { h } from "preact";
+import { ComponentType, h } from "preact";
 import * as router from "./router.ts";
 import { DenoConfig, Manifest } from "./mod.ts";
 import { ALIVE_URL, JS_PREFIX, REFRESH_JS_URL } from "./constants.ts";
@@ -17,18 +18,19 @@ import { BUILD_ID } from "./build_id.ts";
 import DefaultErrorHandler from "./default_error_page.ts";
 import {
   AppModule,
+  BaseRoute,
   ErrorPage,
   ErrorPageModule,
   FreshOptions,
   Handler,
   Island,
-  Middleware,
+  LayoutModule,
+  LayoutRoute,
+  MiddlewareHandler,
   MiddlewareHandlerContext,
   MiddlewareModule,
   MiddlewareRoute,
   Plugin,
-  PluginMiddleware,
-  PluginRoute,
   RenderFunction,
   RenderOptions,
   Route,
@@ -50,15 +52,19 @@ import {
   Builder,
   BuildSnapshot,
   EsbuildBuilder,
+  EsbuildSnapshot,
   JSXConfig,
 } from "../build/mod.ts";
 import { InternalRoute } from "./router.ts";
+import { setAllIslands } from "./rendering/preact_hooks.ts";
 
 const DEFAULT_CONN_INFO: ServeHandlerInfo = {
   localAddr: { transport: "tcp", hostname: "localhost", port: 8080 },
   remoteAddr: { transport: "tcp", hostname: "localhost", port: 1234 },
 };
 
+const ROOT_BASE_ROUTE = toBaseRoute("/");
+
 function isObject(value: unknown) {
   return typeof value === "object" &&
     !Array.isArray(value) &&
@@ -91,6 +97,7 @@ export class ServerContext {
   #renderFn: RenderFunction;
   #middlewares: MiddlewareRoute[];
   #app: AppModule;
+  #layouts: LayoutRoute[];
   #notFound: UnknownPage;
   #error: ErrorPage;
   #plugins: Plugin[];
@@ -104,6 +111,7 @@ export class ServerContext {
     renderfn: RenderFunction,
     middlewares: MiddlewareRoute[],
     app: AppModule,
+    layouts: LayoutRoute[],
     notFound: UnknownPage,
     error: ErrorPage,
     plugins: Plugin[],
@@ -111,6 +119,7 @@ export class ServerContext {
     jsxConfig: JSXConfig,
     dev: boolean = isDevMode(),
     routerOptions: RouterOptions,
+    snapshot: BuildSnapshot | null = null,
   ) {
     this.#routes = routes;
     this.#islands = islands;
@@ -118,11 +127,12 @@ export class ServerContext {
     this.#renderFn = renderfn;
     this.#middlewares = middlewares;
     this.#app = app;
+    this.#layouts = layouts;
     this.#notFound = notFound;
     this.#error = error;
     this.#plugins = plugins;
     this.#dev = dev;
-    this.#builder = new EsbuildBuilder({
+    this.#builder = snapshot ?? new EsbuildBuilder({
       buildID: BUILD_ID,
       entrypoints: collectEntrypoints(this.#dev, this.#islands, this.#plugins),
       configPath,
@@ -137,7 +147,7 @@ export class ServerContext {
    */
   static async fromManifest(
     manifest: Manifest,
-    opts: FreshOptions,
+    opts: FreshOptions & { skipSnapshot?: boolean },
   ): Promise<ServerContext> {
     // Get the manifest' base URL.
     const baseUrl = new URL("./", manifest.baseUrl).href;
@@ -151,6 +161,40 @@ export class ServerContext {
       );
     }
 
+    // Restore snapshot if available
+    let snapshot: BuildSnapshot | null = null;
+    // Load from snapshot if not explicitly requested not to
+    const loadFromSnapshot = !opts.skipSnapshot;
+    if (loadFromSnapshot) {
+      const snapshotDirPath = join(dirname(configPath), "_fresh");
+      try {
+        if ((await Deno.stat(snapshotDirPath)).isDirectory) {
+          console.log(
+            `Using snapshot found at ${colors.cyan(snapshotDirPath)}`,
+          );
+
+          const snapshotPath = join(snapshotDirPath, "snapshot.json");
+          const json = JSON.parse(await Deno.readTextFile(snapshotPath));
+          const dependencies = new Map<string, string[]>(
+            Object.entries(json),
+          );
+
+          const files = new Map();
+          const names = Object.keys(json);
+          await Promise.all(names.map(async (name) => {
+            const filePath = join(snapshotDirPath, name);
+            files.set(name, await Deno.readFile(filePath));
+          }));
+
+          snapshot = new EsbuildSnapshot(files, dependencies);
+        }
+      } catch (err) {
+        if (!(err instanceof Deno.errors.NotFound)) {
+          throw err;
+        }
+      }
+    }
+
     config.compilerOptions ??= {};
 
     let jsx: "react" | "react-jsx";
@@ -176,13 +220,18 @@ export class ServerContext {
     const islands: Island[] = [];
     const middlewares: MiddlewareRoute[] = [];
     let app: AppModule = DEFAULT_APP;
+    const layouts: LayoutRoute[] = [];
     let notFound: UnknownPage = DEFAULT_NOT_FOUND;
     let error: ErrorPage = DEFAULT_ERROR;
     const allRoutes = [
       ...Object.entries(manifest.routes),
-      ...Object.entries(getMiddlewareRoutesFromPlugins(opts.plugins || [])),
-      ...Object.entries(getRoutesFromPlugins(opts.plugins || [])),
+      ...(opts.plugins ? getMiddlewareRoutesFromPlugins(opts.plugins) : []),
+      ...(opts.plugins ? getRoutesFromPlugins(opts.plugins) : []),
     ];
+
+    // Presort all routes so that we only need to sort once
+    allRoutes.sort((a, b) => sortRoutePaths(a[0], b[0]));
+
     for (
       const [self, module] of allRoutes
     ) {
@@ -193,10 +242,15 @@ export class ServerContext {
       const path = url.substring(baseUrl.length).substring("routes".length);
       const baseRoute = path.substring(1, path.length - extname(path).length);
       const name = baseRoute.replace("/", "-");
+      const isLayout = path.endsWith("/_layout.tsx") ||
+        path.endsWith("/_layout.ts") || path.endsWith("/_layout.jsx") ||
+        path.endsWith("/_layout.js");
       const isMiddleware = path.endsWith("/_middleware.tsx") ||
         path.endsWith("/_middleware.ts") || path.endsWith("/_middleware.jsx") ||
         path.endsWith("/_middleware.js");
-      if (!path.startsWith("/_") && !isMiddleware) {
+      if (
+        !path.startsWith("/_") && !isLayout && !isMiddleware
+      ) {
         const { default: component, config } = module as RouteModule;
         let pattern = pathToPattern(baseRoute);
         if (config?.routeOverride) {
@@ -230,24 +284,37 @@ export class ServerContext {
           };
         }
         const route: Route = {
+          baseRoute: toBaseRoute(baseRoute),
           pattern,
           url,
           name,
           component,
           handler,
           csp: Boolean(config?.csp ?? false),
+          appWrapper: !config?.skipAppWrapper,
+          inheritLayouts: !config?.skipInheritedLayouts,
         };
         routes.push(route);
       } else if (isMiddleware) {
         middlewares.push({
-          ...middlewarePathToPattern(baseRoute),
-          ...module as MiddlewareModule,
+          baseRoute: toBaseRoute(baseRoute),
+          module: module as MiddlewareModule,
         });
       } else if (
         path === "/_app.tsx" || path === "/_app.ts" ||
         path === "/_app.jsx" || path === "/_app.js"
       ) {
         app = module as AppModule;
+      } else if (isLayout) {
+        const mod = module as LayoutModule;
+        const config = mod.config;
+        layouts.push({
+          baseRoute: toBaseRoute(baseRoute),
+          handler: mod.handler,
+          component: mod.default,
+          appWrapper: !config?.skipAppWrapper,
+          inheritLayouts: !config?.skipInheritedLayouts,
+        });
       } else if (
         path === "/_404.tsx" || path === "/_404.ts" ||
         path === "/_404.jsx" || path === "/_404.js"
@@ -259,12 +326,15 @@ export class ServerContext {
         }
 
         notFound = {
+          baseRoute: ROOT_BASE_ROUTE,
           pattern: pathToPattern(baseRoute),
           url,
           name,
           component,
           handler: handler ?? ((req) => router.defaultOtherHandler(req)),
           csp: Boolean(config?.csp ?? false),
+          appWrapper: !config?.skipAppWrapper,
+          inheritLayouts: !config?.skipInheritedLayouts,
         };
       } else if (
         path === "/_500.tsx" || path === "/_500.ts" ||
@@ -277,6 +347,7 @@ export class ServerContext {
         }
 
         error = {
+          baseRoute: toBaseRoute("/"),
           pattern: pathToPattern(baseRoute),
           url,
           name,
@@ -284,19 +355,22 @@ export class ServerContext {
           handler: handler ??
             ((req, ctx) => router.defaultErrorHandler(req, ctx, ctx.error)),
           csp: Boolean(config?.csp ?? false),
+          appWrapper: !config?.skipAppWrapper,
+          inheritLayouts: !config?.skipInheritedLayouts,
         };
       }
     }
-    sortRoutes(routes);
-    sortMiddleware(middlewares);
 
     for (const [self, module] of Object.entries(manifest.islands)) {
       const url = new URL(self, baseUrl).href;
       if (!url.startsWith(baseUrl)) {
         throw new TypeError("Island is not a child of the basepath.");
       }
-      const path = url.substring(baseUrl.length).substring("islands".length);
-      const baseRoute = path.substring(1, path.length - extname(path).length);
+      let path = url.substring(baseUrl.length);
+      if (path.startsWith("islands")) {
+        path = path.slice("islands".length + 1);
+      }
+      const baseRoute = path.substring(0, path.length - extname(path).length);
 
       for (const [exportName, exportedFunction] of Object.entries(module)) {
         if (typeof exportedFunction !== "function") {
@@ -370,6 +444,7 @@ export class ServerContext {
       opts.render ?? DEFAULT_RENDER_FN,
       middlewares,
       app,
+      layouts,
       notFound,
       error,
       opts.plugins ?? [],
@@ -377,12 +452,13 @@ export class ServerContext {
       jsxConfig,
       dev,
       opts.router ?? DEFAULT_ROUTER_OPTIONS,
+      snapshot,
     );
   }
 
   /**
    * This functions returns a request handler that handles all routes required
-   * by fresh, including static files.
+   * by Fresh, including static files.
    */
   handler(): (req: Request, connInfo?: ServeHandlerInfo) => Promise<Response> {
     const handlers = this.#handlers();
@@ -436,7 +512,7 @@ export class ServerContext {
     return this.#builder;
   }
 
-  async #buildSnapshot() {
+  async buildSnapshot() {
     if ("build" in this.#builder) {
       const builder = this.#builder;
       this.#builder = builder.build();
@@ -470,13 +546,17 @@ export class ServerContext {
       connInfo: ServeHandlerInfo,
       inner: router.FinalHandler<RouterState>,
     ) => {
-      // identify middlewares to apply, if any.
-      // middlewares should be already sorted from deepest to shallow layer
-      const mws = selectMiddlewares(req.url, middlewares);
-
       const handlers: (() => Response | Promise<Response>)[] = [];
       const paramsAndRouteResult = paramsAndRoute(req.url);
 
+      // identify middlewares to apply, if any.
+      // middlewares should be already sorted from deepest to shallow layer
+      const mws = selectSharedRoutes(
+        paramsAndRouteResult.route?.baseRoute ?? ROOT_BASE_ROUTE,
+        middlewares,
+      );
+
+      let state: Record<string, unknown> = {};
       const middlewareCtx: MiddlewareHandlerContext = {
         next() {
           const handler = handlers.shift()!;
@@ -496,25 +576,35 @@ export class ServerContext {
           }
         },
         ...connInfo,
-        state: {},
+        get state() {
+          return state;
+        },
+        set state(v) {
+          state = v;
+        },
         destination: "route",
         params: paramsAndRouteResult.params,
       };
 
-      for (const mw of mws) {
-        if (mw.handler instanceof Array) {
-          for (const handler of mw.handler) {
+      for (const { module } of mws) {
+        if (module.handler instanceof Array) {
+          for (const handler of module.handler) {
             handlers.push(() => handler(req, middlewareCtx));
           }
         } else {
-          const handler = mw.handler;
+          const handler = module.handler;
           handlers.push(() => handler(req, middlewareCtx));
         }
       }
 
       const ctx = {
         ...connInfo,
-        state: middlewareCtx.state,
+        get state() {
+          return state;
+        },
+        set state(v) {
+          state = v;
+        },
       };
       const { destination, handler } = inner(
         req,
@@ -529,7 +619,7 @@ export class ServerContext {
   }
 
   /**
-   * This function returns all routes required by fresh as an extended
+   * This function returns all routes required by Fresh as an extended
    * path-to-regex, to handler mapping.
    */
   #handlers(): {
@@ -545,39 +635,50 @@ export class ServerContext {
     const routes: router.Routes<RouterState> = {};
 
     internalRoutes[`${INTERNAL_PREFIX}${JS_PREFIX}/${BUILD_ID}/:path*`] = {
-      default: this.#bundleAssetRoute(),
+      baseRoute: toBaseRoute(
+        `${INTERNAL_PREFIX}${JS_PREFIX}/${BUILD_ID}/:path*`,
+      ),
+      methods: {
+        default: this.#bundleAssetRoute(),
+      },
     };
     if (this.#dev) {
       internalRoutes[REFRESH_JS_URL] = {
-        default: () => {
-          return new Response(refreshJs(ALIVE_URL, BUILD_ID), {
-            headers: {
-              "content-type": "application/javascript; charset=utf-8",
-            },
-          });
+        baseRoute: toBaseRoute(REFRESH_JS_URL),
+        methods: {
+          default: () => {
+            return new Response(refreshJs(ALIVE_URL, BUILD_ID), {
+              headers: {
+                "content-type": "application/javascript; charset=utf-8",
+              },
+            });
+          },
         },
       };
       internalRoutes[ALIVE_URL] = {
-        default: () => {
-          let timerId: number | undefined = undefined;
-          const body = new ReadableStream({
-            start(controller) {
-              controller.enqueue(`data: ${BUILD_ID}\nretry: 100\n\n`);
-              timerId = setInterval(() => {
-                controller.enqueue(`data: ${BUILD_ID}\n\n`);
-              }, 1000);
-            },
-            cancel() {
-              if (timerId !== undefined) {
-                clearInterval(timerId);
-              }
-            },
-          });
-          return new Response(body.pipeThrough(new TextEncoderStream()), {
-            headers: {
-              "content-type": "text/event-stream",
-            },
-          });
+        baseRoute: toBaseRoute(ALIVE_URL),
+        methods: {
+          default: () => {
+            let timerId: number | undefined = undefined;
+            const body = new ReadableStream({
+              start(controller) {
+                controller.enqueue(`data: ${BUILD_ID}\nretry: 100\n\n`);
+                timerId = setInterval(() => {
+                  controller.enqueue(`data: ${BUILD_ID}\n\n`);
+                }, 1000);
+              },
+              cancel() {
+                if (timerId !== undefined) {
+                  clearInterval(timerId);
+                }
+              },
+            });
+            return new Response(body.pipeThrough(new TextEncoderStream()), {
+              headers: {
+                "content-type": "text/event-stream",
+              },
+            });
+          },
         },
       };
     }
@@ -591,20 +692,26 @@ export class ServerContext {
     ) {
       const route = sanitizePathToRegex(path);
       staticRoutes[route] = {
-        "HEAD": this.#staticFileHeadHandler(
-          size,
-          contentType,
-          etag,
-        ),
-        "GET": this.#staticFileGetHandler(
-          localUrl,
-          size,
-          contentType,
-          etag,
-        ),
+        baseRoute: toBaseRoute(route),
+        methods: {
+          "HEAD": this.#staticFileHeadHandler(
+            size,
+            contentType,
+            etag,
+          ),
+          "GET": this.#staticFileGetHandler(
+            localUrl,
+            size,
+            contentType,
+            etag,
+          ),
+        },
       };
     }
 
+    // Tell renderer about all globally available islands
+    setAllIslands(this.#islands);
+
     const dependenciesFn = (path: string) => {
       const snapshot = this.#maybeBuildSnapshot();
       return snapshot?.dependencies(path) ?? [];
@@ -627,14 +734,17 @@ export class ServerContext {
           headers: undefined,
         });
       }
+
+      const layouts = selectSharedRoutes(ROOT_BASE_ROUTE, this.#layouts);
+
       const imports: string[] = [];
       const resp = await internalRender({
         request: req,
         context: ctx,
         route: notFound,
-        islands: this.#islands,
         plugins: this.#plugins,
         app: this.#app,
+        layouts,
         imports,
         dependenciesFn,
         renderFn: this.#renderFn,
@@ -675,6 +785,8 @@ export class ServerContext {
             throw new Error("This page does not have a component to render.");
           }
 
+          const layouts = selectSharedRoutes(route.baseRoute, this.#layouts);
+
           const resp = await internalRender({
             request: req,
             context: {
@@ -684,9 +796,9 @@ export class ServerContext {
               },
             },
             route,
-            islands: this.#islands,
             plugins: this.#plugins,
             app: this.#app,
+            layouts,
             imports,
             dependenciesFn,
             renderFn: this.#renderFn,
@@ -718,20 +830,26 @@ export class ServerContext {
       const createRender = genRender(route, Status.OK);
       if (typeof route.handler === "function") {
         routes[route.pattern] = {
-          default: (req, ctx, params) =>
-            (route.handler as Handler)(req, {
-              ...ctx,
-              params,
-              render: createRender(req, params, ctx),
-              async renderNotFound<Data = undefined>(data: Data) {
-                return await renderNotFound(req, params, ctx, data);
-              },
-            }),
+          baseRoute: route.baseRoute,
+          methods: {
+            default: (req, ctx, params) =>
+              (route.handler as Handler)(req, {
+                ...ctx,
+                params,
+                render: createRender(req, params, ctx),
+                async renderNotFound<Data = undefined>(data: Data) {
+                  return await renderNotFound(req, params, ctx, data);
+                },
+              }),
+          },
         };
       } else {
-        routes[route.pattern] = {};
+        routes[route.pattern] = {
+          baseRoute: route.baseRoute,
+          methods: {},
+        };
         for (const [method, handler] of Object.entries(route.handler)) {
-          routes[route.pattern][method as router.KnownMethod] = (
+          routes[route.pattern].methods[method as router.KnownMethod] = (
             req,
             ctx,
             params,
@@ -865,12 +983,12 @@ export class ServerContext {
   }
 
   /**
-   * Returns a router that contains all fresh routes. Should be mounted at
+   * Returns a router that contains all Fresh routes. Should be mounted at
    * constants.INTERNAL_PREFIX
    */
   #bundleAssetRoute = (): router.MatchHandler => {
     return async (_req, _ctx, params) => {
-      const snapshot = await this.#buildSnapshot();
+      const snapshot = await this.buildSnapshot();
       const contents = snapshot.read(params.path);
       if (!contents) return new Response(null, { status: 404 });
 
@@ -894,118 +1012,173 @@ const DEFAULT_ROUTER_OPTIONS: RouterOptions = {
 };
 
 const DEFAULT_APP: AppModule = {
-  default: ({ Component }) => h(Component, {}),
+  default: ({ Component }: { Component: ComponentType }) => h(Component, {}),
 };
 
 const DEFAULT_NOT_FOUND: UnknownPage = {
+  baseRoute: toBaseRoute("/"),
   pattern: "",
   url: "",
   name: "_404",
   handler: (req) => router.defaultOtherHandler(req),
   csp: false,
+  appWrapper: true,
+  inheritLayouts: true,
 };
 
 const DEFAULT_ERROR: ErrorPage = {
+  baseRoute: toBaseRoute("/"),
   pattern: "",
   url: "",
   name: "_500",
   component: DefaultErrorHandler,
   handler: (_req, ctx) => ctx.render(),
   csp: false,
+  appWrapper: true,
+  inheritLayouts: true,
 };
 
-/**
- * Return a list of middlewares that needs to be applied for request url
- * @param url the request url
- * @param middlewares Array of middlewares handlers and their routes as path-to-regexp style
- */
-export function selectMiddlewares(url: string, middlewares: MiddlewareRoute[]) {
-  const selectedMws: Middleware[] = [];
-  const reqURL = new URL(url);
-
-  for (const { compiledPattern, handler } of middlewares) {
-    const res = compiledPattern.exec(reqURL);
+export function selectSharedRoutes<T extends { baseRoute: BaseRoute }>(
+  curBaseRoute: BaseRoute,
+  items: T[],
+): T[] {
+  const selected: T[] = [];
+
+  for (const item of items) {
+    const { baseRoute } = item;
+    const res = curBaseRoute === baseRoute ||
+      curBaseRoute.startsWith(
+        baseRoute.length > 1 ? baseRoute + "/" : baseRoute,
+      );
     if (res) {
-      selectedMws.push({ handler });
+      selected.push(item);
     }
   }
 
-  return selectedMws;
+  return selected;
 }
 
+const APP_REG = /_app\.[tj]sx?$/;
+
 /**
- * Sort pages by their relative routing priority, based on the parts in the
- * route matcher
+ * Sort route paths where special Fresh files like `_app`,
+ * `_layout` and `_middleware` are sorted in front.
  */
-export function sortRoutes<T extends { pattern: string }>(routes: T[]) {
-  routes.sort((a, b) => {
-    const partsA = a.pattern.split("/");
-    const partsB = b.pattern.split("/");
-    for (let i = 0; i < Math.max(partsA.length, partsB.length); i++) {
-      const partA = partsA[i];
-      const partB = partsB[i];
-      if (partA === undefined) return -1;
-      if (partB === undefined) return 1;
-      if (partA === partB) continue;
-      const priorityA = partA.startsWith(":") ? partA.endsWith("*") ? 0 : 1 : 2;
-      const priorityB = partB.startsWith(":") ? partB.endsWith("*") ? 0 : 1 : 2;
-      return Math.max(Math.min(priorityB - priorityA, 1), -1);
+export function sortRoutePaths(a: string, b: string) {
+  // The `_app` route should always be the first
+  if (APP_REG.test(a)) return -1;
+  else if (APP_REG.test(b)) return 1;
+
+  let segmentIdx = 0;
+  const aLen = a.length;
+  const bLen = b.length;
+  const maxLen = aLen > bLen ? aLen : bLen;
+  for (let i = 0; i < maxLen; i++) {
+    const charA = a.charAt(i);
+    const charB = b.charAt(i);
+    const nextA = i + 1 < aLen ? a.charAt(i + 1) : "";
+    const nextB = i + 1 < bLen ? b.charAt(i + 1) : "";
+
+    if (charA === "/" || charB === "/") {
+      segmentIdx = i;
+      // If the other path doesn't close the segment
+      // then we don't need to continue
+      if (charA !== "/") return -1;
+      if (charB !== "/") return 1;
+      continue;
     }
-    return 0;
-  });
-}
-
-export function sortMiddleware<T extends { pattern: string }>(routes: T[]) {
-  routes.sort((a, b) => {
-    const partsA = a.pattern.split("/");
-    const partsB = b.pattern.split("/");
 
-    for (let i = 0; i < Math.max(partsA.length, partsB.length); i++) {
-      const partA = partsA[i];
-      const partB = partsB[i];
-
-      if (partA === undefined && partB === undefined) return 0;
-      if (partA === undefined) return -1;
-      if (partB === undefined) return 1;
-
-      if (partA === partB) continue;
-
-      const priorityA = getPriority(partA);
-      const priorityB = getPriority(partB);
-
-      if (priorityA !== priorityB) {
-        return priorityA - priorityB; // Sort in ascending order of priority
-      }
+    if (i === segmentIdx + 1) {
+      const scoreA = getRoutePathScore(charA, nextA);
+      const scoreB = getRoutePathScore(charB, nextB);
+      if (scoreA === scoreB) continue;
+      return scoreA > scoreB ? -1 : 1;
     }
+  }
 
-    return 0;
-  });
+  return 0;
 }
 
-function getPriority(part: string) {
-  if (part.startsWith(":")) {
-    return part.endsWith("*") ? 2 : 1;
+/**
+ * Assign a score based on the first two characters of a path segment.
+ * The goal is to sort `_middleware` and `_layout` in front of everything
+ * and `[` or `[...` last respectively.
+ */
+function getRoutePathScore(char: string, nextChar: string): number {
+  if (char === "_") {
+    if (nextChar === "m") return 4;
+    return 3;
+  } else if (char === "[") {
+    if (nextChar === ".") {
+      return 0;
+    }
+    return 1;
   }
-  return 0;
+  return 2;
 }
 
 /** Transform a filesystem URL path to a `path-to-regex` style matcher. */
-function pathToPattern(path: string): string {
+export function pathToPattern(path: string): string {
   const parts = path.split("/");
   if (parts[parts.length - 1] === "index") {
+    if (parts.length === 1) {
+      return "/";
+    }
     parts.pop();
   }
-  const route = "/" + parts
-    .map((part) => {
-      if (part.startsWith("[...") && part.endsWith("]")) {
-        return `:${part.slice(4, part.length - 1)}*`;
-      }
-      if (part.startsWith("[") && part.endsWith("]")) {
-        return `:${part.slice(1, part.length - 1)}`;
+
+  let route = "";
+
+  for (let i = 0; i < parts.length; i++) {
+    const part = parts[i];
+
+    // Case: /[...foo].tsx
+    if (part.startsWith("[...") && part.endsWith("]")) {
+      route += `/:${part.slice(4, part.length - 1)}*`;
+      continue;
+    }
+
+    // Route groups like /foo/(bar) should not be included in URL
+    // matching. They are transparent and need to be removed here.
+    // Case: /foo/(bar) -> /foo
+    // Case: /foo/(bar)/bob -> /foo/bob
+    // Case: /(foo)/bar -> /bar
+    if (part.startsWith("(") && part.endsWith(")")) {
+      continue;
+    }
+
+    // Disallow neighbouring params like `/[id][bar].tsx` because
+    // it's ambiguous where the `id` param ends and `bar` begins.
+    if (part.includes("][")) {
+      throw new SyntaxError(
+        `Invalid route pattern: "${path}". A parameter cannot be followed by another parameter without any characters in between.`,
+      );
+    }
+
+    // Case: /[id].tsx
+    // Case: /[id]@[bar].tsx
+    // Case: /[id]-asdf.tsx
+    // Case: /[id]-asdf[bar].tsx
+    // Case: /asdf[bar].tsx
+    let pattern = "";
+    let groupOpen = 0;
+    for (let j = 0; j < part.length; j++) {
+      const char = part[j];
+      if (char === "[") {
+        pattern += ":";
+        groupOpen++;
+      } else if (char === "]") {
+        if (--groupOpen < 0) {
+          throw new SyntaxError(`Invalid route pattern: "${path}"`);
+        }
+      } else {
+        pattern += char;
       }
-      return part;
-    })
-    .join("/");
+    }
+
+    route += "/" + pattern;
+  }
+
   return route;
 }
 
@@ -1040,7 +1213,7 @@ function toPascalCase(text: string): string {
 }
 
 function sanitizeIslandName(name: string): string {
-  const fileName = name.replaceAll("/", "_");
+  const fileName = name.replaceAll(/[/\\\\\(\)]/g, "_");
   return toPascalCase(fileName);
 }
 
@@ -1056,14 +1229,21 @@ function serializeCSPDirectives(csp: ContentSecurityPolicyDirectives): string {
     .join("; ");
 }
 
-export function middlewarePathToPattern(baseRoute: string) {
-  baseRoute = baseRoute.slice(0, -"_middleware".length);
-  let pattern = pathToPattern(baseRoute);
-  if (pattern.endsWith("/")) {
-    pattern = pattern.slice(0, -1) + "{/*}?";
+export function toBaseRoute(input: string): BaseRoute {
+  if (input.endsWith("_layout")) {
+    input = input.slice(0, -"_layout".length);
+  } else if (input.endsWith("_middleware")) {
+    input = input.slice(0, -"_middleware".length);
+  } else if (input.endsWith("index")) {
+    input = input.slice(0, -"index".length);
+  }
+
+  if (input.endsWith("/")) {
+    input = input.slice(0, -1);
   }
-  const compiledPattern = new URLPattern({ pathname: pattern });
-  return { pattern, compiledPattern };
+
+  const suffix = !input.startsWith("/") ? "/" : "";
+  return (suffix + input) as BaseRoute;
 }
 
 function refreshJs(aliveUrl: string, buildId: string) {
@@ -1142,41 +1322,45 @@ async function readDenoConfig(
   }
 }
 
+function formatMiddlewarePath(path: string): string {
+  const prefix = !path.startsWith("/") ? "/" : "";
+  const suffix = !path.endsWith("/") ? "/" : "";
+  return prefix + path + suffix;
+}
+
 function getMiddlewareRoutesFromPlugins(
   plugins: Plugin[],
-): Record<string, MiddlewareModule> {
-  return (Object.assign(
-    {},
-    ...[
-      ...new Set(
-        ([] as PluginMiddleware[]).concat(
-          ...plugins.map((p) => p.middlewares || []),
-        ),
-      ),
-    ]
-      .map((middleware: PluginMiddleware) => ({
-        [`./routes${middleware.path}_middleware.ts`]: {
-          handler: middleware.middleware.handler,
-        },
-      })) || [],
-  ));
+): [string, MiddlewareModule][] {
+  const middlewares = plugins.flatMap((plugin) => plugin.middlewares ?? []);
+
+  const mws: Record<
+    string,
+    [string, { handler: MiddlewareHandler[] }]
+  > = {};
+  for (let i = 0; i < middlewares.length; i++) {
+    const mw = middlewares[i];
+    const handler = mw.middleware.handler;
+    const key = `./routes${formatMiddlewarePath(mw.path)}_middleware.ts`;
+    if (!mws[key]) mws[key] = [key, { handler: [] }];
+    mws[key][1].handler.push(...Array.isArray(handler) ? handler : [handler]);
+  }
+
+  return Object.values(mws);
 }
 
-function getRoutesFromPlugins(plugins: Plugin[]): Record<string, RouteModule> {
-  return (Object.assign(
-    {},
-    ...[
-      ...new Set(
-        ([] as PluginRoute[]).concat(...plugins.map((p) => p.routes || [])),
-      ),
-    ]
-      .map((route: PluginRoute) => ({
-        [`./routes${route.path}.ts`]: {
-          default: route.component,
-          handler: route.handler,
-        } as RouteModule,
-      })) || [],
-  ));
+function formatRoutePath(path: string) {
+  return path.startsWith("/") ? path : "/" + path;
+}
+
+function getRoutesFromPlugins(plugins: Plugin[]): [string, RouteModule][] {
+  return plugins.flatMap((plugin) => plugin.routes ?? [])
+    .map((route) => {
+      return [`./routes${formatRoutePath(route.path)}.ts`, {
+        // deno-lint-ignore no-explicit-any
+        default: route.component as any,
+        handler: route.handler,
+      }];
+    });
 }
 
 function sendResponse(
diff --git a/src/server/context_test.ts b/src/server/context_test.ts
index 20a64dd68db..959c552d202 100644
--- a/src/server/context_test.ts
+++ b/src/server/context_test.ts
@@ -1,24 +1,34 @@
-import { assert } from "../../tests/deps.ts";
-import { middlewarePathToPattern, selectMiddlewares } from "./context.ts";
-import { MiddlewareRoute } from "./types.ts";
+import { assertEquals, assertThrows } from "$std/testing/asserts.ts";
+import { pathToPattern } from "./context.ts";
 
-Deno.test("selectMiddlewares", () => {
-  const url = "https://fresh.deno.dev/api/abc/def";
-  const middlewaresPath = [
-    // should select
-    "_middleware",
-    "api/_middleware",
-    "api/[id]/_middleware",
-    "api/[id]/[path]/_middleware",
+Deno.test("pathToPattern", async (t) => {
+  await t.step("creates pattern", () => {
+    assertEquals(pathToPattern("foo/bar"), "/foo/bar");
+  });
 
-    // should not select
-    "api/xyz/_middleware",
-    "api/[id]/xyz/_middleware",
-    "api/[id]/[path]/foo/_middleware",
-  ];
-  const mwRoutes = middlewaresPath.map((path) =>
-    middlewarePathToPattern(path)
-  ) as MiddlewareRoute[];
-  const mws = selectMiddlewares(url, mwRoutes);
-  assert(mws.length === 4);
+  await t.step("parses index routes", () => {
+    assertEquals(pathToPattern("foo/index"), "/foo");
+  });
+
+  await t.step("parses parameters", () => {
+    assertEquals(pathToPattern("foo/[name]"), "/foo/:name");
+    assertEquals(pathToPattern("foo/[name]/bar/[bob]"), "/foo/:name/bar/:bob");
+  });
+
+  await t.step("parses catchall", () => {
+    assertEquals(pathToPattern("foo/[...name]"), "/foo/:name*");
+  });
+
+  await t.step("parses multiple params in same part", () => {
+    assertEquals(pathToPattern("foo/[mod]@[version]"), "/foo/:mod@:version");
+
+    assertEquals(pathToPattern("foo/[bar].json"), "/foo/:bar.json");
+    assertEquals(pathToPattern("foo/foo[bar]"), "/foo/foo:bar");
+  });
+
+  await t.step("throws on invalid patterns", () => {
+    assertThrows(() => pathToPattern("foo/[foo][bar]"));
+    assertThrows(() => pathToPattern("foo/foo]"));
+    assertThrows(() => pathToPattern("foo/[foo]]"));
+  });
 });
diff --git a/src/server/defines.ts b/src/server/defines.ts
new file mode 100644
index 00000000000..b396ffd7ef8
--- /dev/null
+++ b/src/server/defines.ts
@@ -0,0 +1,55 @@
+import { ComponentChildren } from "preact";
+import {
+  AsyncLayout,
+  AsyncRoute,
+  LayoutContext,
+  RouteContext,
+  StartOptions,
+} from "./types.ts";
+import { checkAsyncComponent } from "./render.ts";
+import { AppContext } from "$fresh/server.ts";
+
+export function defineConfig(config: StartOptions): StartOptions {
+  return config;
+}
+
+// Route creation helpers
+export function defineRoute<
+  T,
+>(
+  fn: (
+    req: Request,
+    ctx: RouteContext<void, T>,
+  ) => ComponentChildren | Response | Promise<ComponentChildren | Response>,
+): AsyncRoute<void, T> {
+  // deno-lint-ignore no-explicit-any
+  if (checkAsyncComponent(fn)) return fn as any;
+  // deno-lint-ignore require-await
+  return async (req, ctx) => fn(req, ctx);
+}
+
+// Layout creation helper
+export function defineLayout<T>(
+  fn: (
+    req: Request,
+    ctx: LayoutContext<void, T>,
+  ) => ComponentChildren | Response | Promise<ComponentChildren | Response>,
+): AsyncLayout<void, T> {
+  // deno-lint-ignore no-explicit-any
+  if (checkAsyncComponent(fn)) return fn as any;
+  // deno-lint-ignore require-await
+  return async (req, ctx) => fn(req, ctx);
+}
+
+// App creation helper
+export function defineApp<T>(
+  fn: (
+    req: Request,
+    ctx: AppContext<void, T>,
+  ) => ComponentChildren | Response | Promise<ComponentChildren | Response>,
+): AsyncLayout<void, T> {
+  // deno-lint-ignore no-explicit-any
+  if (checkAsyncComponent(fn)) return fn as any;
+  // deno-lint-ignore require-await
+  return async (req, ctx) => fn(req, ctx);
+}
diff --git a/src/server/deps.ts b/src/server/deps.ts
index 94eb5700281..23e66404377 100644
--- a/src/server/deps.ts
+++ b/src/server/deps.ts
@@ -12,7 +12,6 @@ export {
   type Handler as ServeHandler,
   serve,
 } from "https://deno.land/std@0.193.0/http/server.ts";
-export type { ServeInit } from "https://deno.land/std@0.193.0/http/server.ts";
 export { Status } from "https://deno.land/std@0.193.0/http/http_status.ts";
 export {
   typeByExtension,
diff --git a/src/server/mod.ts b/src/server/mod.ts
index 108614c0c51..5f2d69858d9 100644
--- a/src/server/mod.ts
+++ b/src/server/mod.ts
@@ -1,18 +1,28 @@
+import { LayoutConfig } from "$fresh/server.ts";
+import { ComponentChildren } from "preact";
 import { ServerContext } from "./context.ts";
 export { Status } from "./deps.ts";
 import { colors, serve } from "./deps.ts";
 import {
-  AppModule,
-  ErrorPageModule,
+  ErrorHandler,
+  Handler,
+  Handlers,
   IslandModule,
   MiddlewareModule,
-  RouteModule,
+  RouteConfig,
   ServeHandler,
   ServeHandlerInfo,
   StartOptions,
-  UnknownPageModule,
+  UnknownHandler,
 } from "./types.ts";
+export {
+  defineApp,
+  defineConfig,
+  defineLayout,
+  defineRoute,
+} from "./defines.ts";
 export type {
+  AppContext,
   AppProps,
   ErrorHandler,
   ErrorHandlerContext,
@@ -21,6 +31,9 @@ export type {
   Handler,
   HandlerContext,
   Handlers,
+  LayoutConfig,
+  LayoutContext,
+  LayoutProps,
   MiddlewareHandler,
   MiddlewareHandlerContext,
   MultiHandler,
@@ -49,11 +62,19 @@ export type { InnerRenderFunction } from "./render.ts";
 export interface Manifest {
   routes: Record<
     string,
-    | RouteModule
-    | MiddlewareModule
-    | AppModule
-    | ErrorPageModule
-    | UnknownPageModule
+    {
+      // Use a more loose route definition type because
+      // TS has trouble inferring normal vs aync functions. It cannot infer based on function arity
+      default?: (
+        // deno-lint-ignore no-explicit-any
+        propsOrRequest: any,
+        // deno-lint-ignore no-explicit-any
+        ctx: any,
+      ) => Promise<ComponentChildren | Response> | ComponentChildren;
+      // deno-lint-ignore no-explicit-any
+      handler?: Handler<any, any> | Handlers<any, any> | UnknownHandler;
+      config?: RouteConfig | LayoutConfig | ErrorHandler;
+    } | MiddlewareModule
   >;
   islands: Record<string, IslandModule>;
   baseUrl: string;
@@ -62,6 +83,7 @@ export interface Manifest {
 export interface DenoConfig {
   imports?: Record<string, string>;
   importMap?: string;
+  tasks?: Record<string, string>;
   compilerOptions?: {
     jsx?: string;
     jsxImportSource?: string;
diff --git a/src/server/render.ts b/src/server/render.ts
index 7f4b9f47ad6..41765918aa8 100644
--- a/src/server/render.ts
+++ b/src/server/render.ts
@@ -1,61 +1,36 @@
-import { renderToString } from "preact-render-to-string";
-import {
-  Component,
-  ComponentChildren,
-  ComponentType,
-  Fragment,
-  h,
-  Options as PreactOptions,
-  options as preactOptions,
-  VNode,
-} from "preact";
+import { h, VNode } from "preact";
 import {
   AppModule,
+  AsyncLayout,
   AsyncRoute,
   ErrorPage,
-  Island,
+  LayoutRoute,
   Plugin,
   PluginRenderFunctionResult,
   PluginRenderResult,
-  PluginRenderStyleTag,
   RenderFunction,
   Route,
+  RouteContext,
   UnknownPage,
 } from "./types.ts";
-import { HEAD_CONTEXT } from "../runtime/head.ts";
-import { CSP_CONTEXT, nonce, NONE, UNSAFE_INLINE } from "../runtime/csp.ts";
+import { NONE, UNSAFE_INLINE } from "../runtime/csp.ts";
 import { ContentSecurityPolicy } from "../runtime/csp.ts";
-import { bundleAssetUrl } from "./constants.ts";
-import { assetHashingHook } from "../runtime/utils.ts";
-import { htmlEscapeJsonString } from "./htmlescape.ts";
-import { serialize } from "./serializer.ts";
+import { RenderState } from "./rendering/state.ts";
+import { renderHtml, renderOuterDocument } from "./rendering/template.tsx";
+import { renderFreshTags } from "./rendering/fresh_tags.tsx";
 
 export const DEFAULT_RENDER_FN: RenderFunction = (_ctx, render) => {
   render();
 };
 
-// These hooks are long stable, but when we originally added them we
-// weren't sure if they should be public.
-export interface AdvancedPreactOptions extends PreactOptions {
-  /** Attach a hook that is invoked after a tree was mounted or was updated. */
-  __c?(vnode: VNode, commitQueue: Component[]): void;
-  /** Attach a hook that is invoked before a vnode has rendered. */
-  __r?(vnode: VNode): void;
-  errorBoundaries?: boolean;
-}
-const options = preactOptions as AdvancedPreactOptions;
-
-// Enable error boundaries in Preact.
-options.errorBoundaries = true;
-
 export interface RenderOptions<Data> {
   request: Request;
   // deno-lint-ignore no-explicit-any
   context: any;
   route: Route<Data> | UnknownPage | ErrorPage;
-  islands: Island[];
   plugins: Plugin[];
   app: AppModule;
+  layouts: LayoutRoute[];
   imports: string[];
   dependenciesFn: (path: string) => string[];
   url: URL;
@@ -135,6 +110,13 @@ function defaultCsp() {
   };
 }
 
+export function checkAsyncComponent<T>(
+  component: unknown,
+): component is AsyncRoute<T> | AsyncLayout<T> {
+  return typeof component === "function" &&
+    component.constructor.name === "AsyncFunction";
+}
+
 /**
  * This function renders out a page. Rendering is synchronous and non streaming.
  * Suspense boundaries are not supported.
@@ -143,8 +125,23 @@ export async function render<Data>(
   opts: RenderOptions<Data>,
 ): Promise<[string, ContentSecurityPolicy | undefined] | Response> {
   const component = opts.route.component;
-  const isAsyncComponent = typeof component === "function" &&
-    component.constructor.name === "AsyncFunction";
+
+  // Only inherit layouts up to the nearest root layout.
+  // Note that the route itself can act as the root layout.
+  let layouts = opts.layouts;
+  if (opts.route.inheritLayouts) {
+    let rootIdx = 0;
+    let layoutIdx = opts.layouts.length;
+    while (layoutIdx--) {
+      if (!opts.layouts[layoutIdx].inheritLayouts) {
+        rootIdx = layoutIdx;
+        break;
+      }
+    }
+    layouts = opts.layouts.slice(rootIdx);
+  } else {
+    layouts = [];
+  }
 
   const props: Record<string, unknown> = {
     params: opts.params,
@@ -160,24 +157,12 @@ export async function render<Data>(
   const csp: ContentSecurityPolicy | undefined = opts.route.csp
     ? defaultCsp()
     : undefined;
-  const headComponents: ComponentChildren[] = [];
   if (csp) {
     // Clear the csp
     const newCsp = defaultCsp();
     csp.directives = newCsp.directives;
     csp.reportOnly = newCsp.reportOnly;
   }
-  // Clear the head components
-  headComponents.splice(0, headComponents.length);
-
-  // Setup the interesting VNode types
-  ISLANDS.splice(0, ISLANDS.length, ...opts.islands);
-
-  // Clear the encountered vnodes
-  ENCOUNTERED_ISLANDS.clear();
-
-  // Clear the island props
-  ISLAND_PROPS = [];
 
   const ctx = new RenderContext(
     crypto.randomUUID(),
@@ -186,40 +171,88 @@ export async function render<Data>(
     opts.lang ?? "en",
   );
 
-  let bodyHtml: string | null = null;
+  const context: RouteContext = {
+    localAddr: opts.context.localAddr,
+    remoteAddr: opts.context.remoteAddr,
+    renderNotFound: opts.context.renderNotFound,
+    url: opts.url,
+    route: opts.route.pattern,
+    params: opts.params as Record<string, string>,
+    state: opts.state ?? {},
+    data: opts.data,
+  };
 
-  function renderInner(vnode: ComponentChildren): string {
-    const root = h(CSP_CONTEXT.Provider, {
-      value: csp,
-      children: h(HEAD_CONTEXT.Provider, {
-        value: headComponents,
-        children: h(opts.app.default, {
-          params: opts.params as Record<string, string>,
-          url: opts.url,
-          route: opts.route.pattern,
-          data: opts.data,
-          state: opts.state!,
-          Component() {
-            // deno-lint-ignore no-explicit-any
-            return vnode as any;
-          },
-        }),
-      }),
-    });
-    bodyHtml = renderToString(root);
-    return bodyHtml;
+  // Prepare render order
+  // deno-lint-ignore no-explicit-any
+  const renderStack: any[] = [];
+  // Check if appLayout is enabled
+  if (
+    opts.route.appWrapper &&
+    layouts.every((layout) => layout.appWrapper)
+  ) {
+    renderStack.push(opts.app.default);
   }
+  for (let i = 0; i < layouts.length; i++) {
+    renderStack.push(layouts[i].component);
+  }
+  renderStack.push(component);
+
+  // Build the final stack of component functions
+  const componentStack = new Array(renderStack.length).fill(null);
+  for (let i = 0; i < renderStack.length; i++) {
+    const fn = renderStack[i];
+    if (!fn) continue;
+
+    if (checkAsyncComponent(fn)) {
+      // Don't pass <Component /> when it's the route component
+      const isRouteComponent = fn === component;
+      const componentCtx = isRouteComponent ? context : {
+        ...context,
+        Component() {
+          return h(componentStack[i + 1], props);
+        },
+      };
+      // deno-lint-ignore no-explicit-any
+      const res = await fn(opts.request, componentCtx as any);
 
-  const renderResults: [Plugin, PluginRenderResult][] = [];
-  const syncPlugins = opts.plugins.filter((p) => p.render);
-  if (isAsyncComponent && syncPlugins.length > 0) {
-    throw new Error(
-      `Async server components cannot be rendered synchronously. The following plugins use a synchronous render method: "${
-        syncPlugins.map((plugin) => plugin.name).join('", "')
-      }"`,
-    );
+      // Bail out of rendering if we returned a response
+      if (res instanceof Response) {
+        return res;
+      }
+
+      const componentFn = () => res;
+      // Set displayName to make debugging easier
+      // deno-lint-ignore no-explicit-any
+      componentFn.displayName = (fn as any).displayName || fn.name;
+      componentStack[i] = componentFn;
+    } else {
+      componentStack[i] = fn;
+    }
   }
 
+  // CAREFUL: Rendering is synchronous internally and all state
+  // should be managed through the `RenderState` instance. That
+  // ensures that each render request is associated with the same
+  // data.
+  const renderState = new RenderState(
+    {
+      url: opts.url,
+      route: opts.route.pattern,
+      data: opts.data,
+      state: opts.state,
+      params: opts.params,
+    },
+    componentStack,
+    csp,
+    opts.error,
+  );
+
+  let bodyHtml: string | null = null;
+
+  const syncPlugins = opts.plugins.filter((p) => p.render);
+
+  const renderResults: [Plugin, PluginRenderResult][] = [];
+
   function renderSync(): PluginRenderFunctionResult {
     const plugin = syncPlugins.shift();
     if (plugin) {
@@ -231,7 +264,7 @@ export async function render<Data>(
       }
       renderResults.push([plugin, res]);
     } else {
-      renderInner(h(component as ComponentType, props));
+      bodyHtml = renderHtml(renderState);
     }
     if (bodyHtml === null) {
       throw new Error(
@@ -240,7 +273,7 @@ export async function render<Data>(
     }
     return {
       htmlText: bodyHtml,
-      requiresHydration: ENCOUNTERED_ISLANDS.size > 0,
+      requiresHydration: renderState.encounteredIslands.size > 0,
     };
   }
 
@@ -263,32 +296,7 @@ export async function render<Data>(
         );
       }
     } else {
-      if (isAsyncComponent) {
-        if (opts.renderFn !== DEFAULT_RENDER_FN) {
-          throw new Error(
-            `Async server components are not supported with custom render functions.`,
-          );
-        }
-
-        // deno-lint-ignore no-explicit-any
-        const res = await (component as AsyncRoute<any>)(opts.request, {
-          localAddr: opts.context.localAddr,
-          remoteAddr: opts.context.remoteAddr,
-          renderNotFound: opts.context.renderNotFound,
-          url: opts.url,
-          route: opts.route.pattern,
-          params: opts.params as Record<string, string>,
-          state: opts.state ?? {},
-        });
-        if (res instanceof Response) {
-          asyncRenderResponse = res;
-          bodyHtml = "";
-        } else {
-          renderInner(res);
-        }
-      } else {
-        await opts.renderFn(ctx, () => renderSync().htmlText);
-      }
+      await opts.renderFn(ctx, () => renderSync().htmlText);
 
       if (bodyHtml === null) {
         throw new Error(
@@ -298,321 +306,46 @@ export async function render<Data>(
     }
     return {
       htmlText: bodyHtml,
-      requiresHydration: ENCOUNTERED_ISLANDS.size > 0,
+      requiresHydration: renderState.encounteredIslands.size > 0,
     };
   }
 
   await renderAsync();
-  if (asyncRenderResponse !== undefined) {
-    return asyncRenderResponse;
-  }
-
-  bodyHtml = bodyHtml as unknown as string;
-
-  let randomNonce: undefined | string;
-  function getRandomNonce(): string {
-    if (randomNonce === undefined) {
-      randomNonce = crypto.randomUUID().replace(/-/g, "");
-      if (csp) {
-        csp.directives.scriptSrc = [
-          ...csp.directives.scriptSrc ?? [],
-          nonce(randomNonce),
-        ];
-      }
-    }
-    return randomNonce;
-  }
 
-  const moduleScripts: [string, string][] = [];
-  for (const url of opts.imports) {
-    moduleScripts.push([url, getRandomNonce()]);
-  }
-
-  const preloadSet = new Set<string>();
-  function addImport(path: string): string {
-    const url = bundleAssetUrl(`/${path}`);
-    preloadSet.add(url);
-    for (const depPath of opts.dependenciesFn(path)) {
-      const url = bundleAssetUrl(`/${depPath}`);
-      preloadSet.add(url);
-    }
-    return url;
-  }
-
-  const state: [islands: unknown[], plugins: unknown[]] = [ISLAND_PROPS, []];
-  const styleTags: PluginRenderStyleTag[] = [];
-  const pluginScripts: [string, string, number][] = [];
-
-  for (const [plugin, res] of renderResults) {
-    for (const hydrate of res.scripts ?? []) {
-      const i = state[1].push(hydrate.state) - 1;
-      pluginScripts.push([plugin.name, hydrate.entrypoint, i]);
-    }
-    styleTags.splice(styleTags.length, 0, ...res.styles ?? []);
-  }
-
-  // The inline script that will hydrate the page.
-  let script = "";
-
-  // Serialize the state into the <script id=__FRSH_STATE> tag and generate the
-  // inline script to deserialize it. This script starts by deserializing the
-  // state in the tag. This potentially requires importing @preact/signals.
-  if (state[0].length > 0 || state[1].length > 0) {
-    const res = serialize(state);
-    const escapedState = htmlEscapeJsonString(res.serialized);
-    bodyHtml +=
-      `<script id="__FRSH_STATE" type="application/json">${escapedState}</script>`;
-
-    if (res.requiresDeserializer) {
-      const url = addImport("deserializer.js");
-      script += `import { deserialize } from "${url}";`;
-    }
-    if (res.hasSignals) {
-      const url = addImport("signals.js");
-      script += `import { signal } from "${url}";`;
-    }
-    script += `const ST = document.getElementById("__FRSH_STATE").textContent;`;
-    script += `const STATE = `;
-    if (res.requiresDeserializer) {
-      if (res.hasSignals) {
-        script += `deserialize(ST, signal);`;
-      } else {
-        script += `deserialize(ST);`;
-      }
-    } else {
-      script += `JSON.parse(ST).v;`;
-    }
-  }
-
-  // Then it imports all plugin scripts and executes them (with their respective
-  // state).
-  for (const [pluginName, entrypoint, i] of pluginScripts) {
-    const url = addImport(`plugin-${pluginName}-${entrypoint}.js`);
-    script += `import p${i} from "${url}";p${i}(STATE[1][${i}]);`;
-  }
-
-  // Finally, it loads all island scripts and hydrates the islands using the
-  // reviver from the "main" script.
-  if (ENCOUNTERED_ISLANDS.size > 0) {
-    // Load the main.js script
-    const url = addImport("main.js");
-    script += `import { revive } from "${url}";`;
-
-    // Prepare the inline script that loads and revives the islands
-    let islandRegistry = "";
-    for (const island of ENCOUNTERED_ISLANDS) {
-      const url = addImport(`island-${island.id}.js`);
-      script +=
-        `import * as ${island.name}_${island.exportName} from "${url}";`;
-      islandRegistry += `${island.id}:${island.name}_${island.exportName},`;
-    }
-    script += `revive({${islandRegistry}}, STATE[0]);`;
-  }
-
-  // Append the inline script.
-  if (script !== "") {
-    bodyHtml +=
-      `<script type="module" nonce="${getRandomNonce()}">${script}</script>`;
+  const idx = renderState.headVNodes.findIndex((vnode) =>
+    vnode !== null && typeof vnode === "object" && "type" in vnode &&
+    props !== null && vnode.type === "title"
+  );
+  if (idx !== -1) {
+    renderState.docTitle = renderState.headVNodes[idx] as VNode<
+      { children: string }
+    >;
+    renderState.headVNodes.splice(idx, 1);
   }
 
-  if (ctx.styles.length > 0) {
-    const node = h("style", {
-      id: "__FRSH_STYLE",
-      dangerouslySetInnerHTML: { __html: ctx.styles.join("\n") },
-    });
-    headComponents.splice(0, 0, node);
+  if (asyncRenderResponse !== undefined) {
+    return asyncRenderResponse;
   }
 
-  for (const style of styleTags) {
-    const node = h("style", {
-      id: style.id,
-      dangerouslySetInnerHTML: { __html: style.cssText },
-      media: style.media,
-    });
-    headComponents.splice(0, 0, node);
-  }
+  // Includes everything inside `<body>`
+  bodyHtml = bodyHtml as unknown as string;
 
-  const preloads = [...preloadSet];
-  const html = template({
+  // Create Fresh script + style tags
+  const result = renderFreshTags(renderState, {
     bodyHtml,
-    headComponents,
-    moduleScripts,
-    preloads,
-    lang: ctx.lang,
+    imports: opts.imports,
+    csp,
+    dependenciesFn: opts.dependenciesFn,
+    styles: ctx.styles,
+    pluginRenderResults: renderResults,
   });
 
+  // Render outer document up to `<body>`
+  const html = renderOuterDocument(renderState, {
+    bodyHtml: result.bodyHtml,
+    preloads: [...result.preloadSet],
+    moduleScripts: result.moduleScripts,
+    lang: ctx.lang,
+  });
   return [html, csp];
 }
-
-export interface TemplateOptions {
-  bodyHtml: string;
-  headComponents: ComponentChildren[];
-  moduleScripts: (readonly [string, string])[];
-  preloads: string[];
-  lang: string;
-}
-
-export function template(opts: TemplateOptions): string {
-  const page = h(
-    "html",
-    { lang: opts.lang },
-    h(
-      "head",
-      null,
-      h("meta", { charSet: "UTF-8" }),
-      h("meta", {
-        name: "viewport",
-        content: "width=device-width, initial-scale=1.0",
-      }),
-      opts.preloads.map((src) =>
-        h("link", { rel: "modulepreload", href: src })
-      ),
-      opts.moduleScripts.map(([src, nonce]) =>
-        h("script", { src: src, nonce: nonce, type: "module" })
-      ),
-      opts.headComponents,
-    ),
-    h("body", { dangerouslySetInnerHTML: { __html: opts.bodyHtml } }),
-  );
-  return "<!DOCTYPE html>" + renderToString(page);
-}
-
-const supportsUnstableComments = renderToString(h(Fragment, {
-  // @ts-ignore unstable features not supported in types
-  UNSTABLE_comment: "foo",
-})) !== "";
-
-if (!supportsUnstableComments) {
-  console.warn(
-    "‚ö†Ô∏è  Found old version of 'preact-render-to-string'. Please upgrade it to >=6.1.0",
-  );
-}
-
-function wrapWithMarker(vnode: ComponentChildren, markerText: string) {
-  // Newer versions of preact-render-to-string allow you to render comments
-  if (supportsUnstableComments) {
-    return h(
-      Fragment,
-      null,
-      h(Fragment, {
-        // @ts-ignore unstable property is not typed
-        UNSTABLE_comment: markerText,
-      }),
-      vnode,
-      h(Fragment, {
-        // @ts-ignore unstable property is not typed
-        UNSTABLE_comment: "/" + markerText,
-      }),
-    );
-  } else {
-    return h(
-      `!--${markerText}--`,
-      null,
-      vnode,
-    );
-  }
-}
-
-// Set up a preact option hook to track when vnode with custom functions are
-// created.
-const ISLANDS: Island[] = [];
-const ENCOUNTERED_ISLANDS: Set<Island> = new Set([]);
-let ISLAND_PROPS: unknown[] = [];
-
-// Keep track of which component rendered which vnode. This allows us
-// to detect when an island is rendered within another instead of being
-// passed as children.
-let ownerStack: VNode[] = [];
-const islandOwners = new Map<VNode, VNode>();
-
-const originalHook = options.vnode;
-let ignoreNext = false;
-options.vnode = (vnode) => {
-  assetHashingHook(vnode);
-  const originalType = vnode.type as ComponentType<unknown>;
-
-  // Use a labelled statement that allows ous to break out of it
-  // whilst still continuing execution. We still want to call previous
-  // `options.vnode` hooks if there were any, otherwise we'd break
-  // the change for other plugins hooking into Preact.
-  patchIslands:
-  if (typeof vnode.type === "function") {
-    const island = ISLANDS.find((island) => island.component === originalType);
-    if (island) {
-      const hasOwners = ownerStack.length > 0;
-      if (hasOwners) {
-        const prevOwner = ownerStack[ownerStack.length - 1];
-        islandOwners.set(vnode, prevOwner);
-      }
-
-      // Check if we already patched this component
-      if (ignoreNext) {
-        ignoreNext = false;
-        break patchIslands;
-      }
-
-      // Check if an island is rendered inside another island, not just
-      // passed as a child. Example:
-      //   function Island() {}
-      //     return <OtherIsland />
-      //   }
-      if (hasOwners) {
-        const prevOwner = ownerStack[ownerStack.length - 1];
-        if (islandOwners.has(prevOwner)) {
-          break patchIslands;
-        }
-      }
-
-      ENCOUNTERED_ISLANDS.add(island);
-      vnode.type = (props) => {
-        ignoreNext = true;
-
-        // Only passing children JSX to islands is supported for now
-        if ("children" in props) {
-          const children = props.children;
-          // @ts-ignore nonono
-          props.children = wrapWithMarker(
-            children,
-            `frsh-slot-${island.id}:children`,
-          );
-        }
-
-        const child = h(originalType, props);
-        ISLAND_PROPS.push(props);
-
-        return wrapWithMarker(
-          child,
-          `frsh-${island.id}:${island.exportName}:${ISLAND_PROPS.length - 1}`,
-        );
-      };
-    }
-  }
-  if (originalHook) originalHook(vnode);
-};
-
-// Keep track of owners
-const oldDiffed = options.diffed;
-const oldRender = options.__r;
-const oldCommit = options.__c;
-options.__r = (vnode) => {
-  if (
-    typeof vnode.type === "function" &&
-    vnode.type !== Fragment
-  ) {
-    ownerStack.push(vnode);
-  }
-  oldRender?.(vnode);
-};
-options.diffed = (vnode) => {
-  if (typeof vnode.type === "function") {
-    if (vnode.type !== Fragment) {
-      ownerStack.pop();
-    }
-  }
-  oldDiffed?.(vnode);
-};
-options.__c = (vnode, queue) => {
-  oldCommit?.(vnode, queue);
-  ownerStack = [];
-  islandOwners.clear();
-};
diff --git a/src/server/render_test.ts b/src/server/render_test.ts
deleted file mode 100644
index 9e2172f7f5d..00000000000
--- a/src/server/render_test.ts
+++ /dev/null
@@ -1,14 +0,0 @@
-import { template } from "./render.ts";
-import { assertStringIncludes } from "../../tests/deps.ts";
-
-Deno.test("check lang", () => {
-  const lang = "fr";
-  const body = template({
-    bodyHtml: "",
-    headComponents: [],
-    moduleScripts: [],
-    preloads: [],
-    lang,
-  });
-  assertStringIncludes(body, `<html lang="${lang}">`);
-});
diff --git a/src/server/rendering/fresh_tags.tsx b/src/server/rendering/fresh_tags.tsx
new file mode 100644
index 00000000000..56685511623
--- /dev/null
+++ b/src/server/rendering/fresh_tags.tsx
@@ -0,0 +1,151 @@
+import { bundleAssetUrl } from "../constants.ts";
+import { RenderState } from "./state.ts";
+import { htmlEscapeJsonString } from "../htmlescape.ts";
+import { serialize } from "../serializer.ts";
+import { Plugin, PluginRenderResult, PluginRenderStyleTag } from "../types.ts";
+import { ContentSecurityPolicy, nonce } from "../../runtime/csp.ts";
+import { h } from "preact";
+
+function getRandomNonce(
+  opts: { randomNonce?: string; csp?: ContentSecurityPolicy },
+): string {
+  if (opts.randomNonce === undefined) {
+    opts.randomNonce = crypto.randomUUID().replace(/-/g, "");
+    if (opts.csp) {
+      opts.csp.directives.scriptSrc = [
+        ...opts.csp.directives.scriptSrc ?? [],
+        nonce(opts.randomNonce),
+      ];
+    }
+  }
+  return opts.randomNonce;
+}
+
+export function renderFreshTags(
+  renderState: RenderState,
+  opts: {
+    bodyHtml: string;
+    csp?: ContentSecurityPolicy;
+    imports: string[];
+    randomNonce?: string;
+    dependenciesFn: (path: string) => string[];
+    styles: string[];
+    pluginRenderResults: [Plugin, PluginRenderResult][];
+  },
+) {
+  const moduleScripts: [string, string][] = [];
+  for (const url of opts.imports) {
+    moduleScripts.push([url, getRandomNonce(opts)]);
+  }
+
+  const preloadSet = new Set<string>();
+  function addImport(path: string): string {
+    const url = bundleAssetUrl(`/${path}`);
+    preloadSet.add(url);
+    for (const depPath of opts.dependenciesFn(path)) {
+      const url = bundleAssetUrl(`/${depPath}`);
+      preloadSet.add(url);
+    }
+    return url;
+  }
+
+  const state: [islands: unknown[], plugins: unknown[]] = [
+    renderState.islandProps,
+    [],
+  ];
+  const styleTags: PluginRenderStyleTag[] = [];
+  const pluginScripts: [string, string, number][] = [];
+
+  for (const [plugin, res] of opts.pluginRenderResults) {
+    for (const hydrate of res.scripts ?? []) {
+      const i = state[1].push(hydrate.state) - 1;
+      pluginScripts.push([plugin.name, hydrate.entrypoint, i]);
+    }
+    styleTags.splice(styleTags.length, 0, ...res.styles ?? []);
+  }
+
+  // The inline script that will hydrate the page.
+  let script = "";
+
+  // Serialize the state into the <script id=__FRSH_STATE> tag and generate the
+  // inline script to deserialize it. This script starts by deserializing the
+  // state in the tag. This potentially requires importing @preact/signals.
+  if (state[0].length > 0 || state[1].length > 0) {
+    const res = serialize(state);
+    const escapedState = htmlEscapeJsonString(res.serialized);
+    opts.bodyHtml +=
+      `<script id="__FRSH_STATE" type="application/json">${escapedState}</script>`;
+
+    if (res.requiresDeserializer) {
+      const url = addImport("deserializer.js");
+      script += `import { deserialize } from "${url}";`;
+    }
+    if (res.hasSignals) {
+      const url = addImport("signals.js");
+      script += `import { signal } from "${url}";`;
+    }
+    script += `const ST = document.getElementById("__FRSH_STATE").textContent;`;
+    script += `const STATE = `;
+    if (res.requiresDeserializer) {
+      if (res.hasSignals) {
+        script += `deserialize(ST, signal);`;
+      } else {
+        script += `deserialize(ST);`;
+      }
+    } else {
+      script += `JSON.parse(ST).v;`;
+    }
+  }
+
+  // Then it imports all plugin scripts and executes them (with their respective
+  // state).
+  for (const [pluginName, entrypoint, i] of pluginScripts) {
+    const url = addImport(`plugin-${pluginName}-${entrypoint}.js`);
+    script += `import p${i} from "${url}";p${i}(STATE[1][${i}]);`;
+  }
+
+  // Finally, it loads all island scripts and hydrates the islands using the
+  // reviver from the "main" script.
+  if (renderState.encounteredIslands.size > 0) {
+    // Load the main.js script
+    const url = addImport("main.js");
+    script += `import { revive } from "${url}";`;
+
+    // Prepare the inline script that loads and revives the islands
+    let islandRegistry = "";
+    for (const island of renderState.encounteredIslands) {
+      const url = addImport(`island-${island.id}.js`);
+      script +=
+        `import * as ${island.name}_${island.exportName} from "${url}";`;
+      islandRegistry += `${island.id}:${island.name}_${island.exportName},`;
+    }
+    script += `revive({${islandRegistry}}, STATE[0]);`;
+  }
+
+  // Append the inline script.
+  if (script !== "") {
+    opts.bodyHtml += `<script type="module" nonce="${
+      getRandomNonce(opts)
+    }">${script}</script>`;
+  }
+
+  if (opts.styles.length > 0) {
+    const node = h("style", {
+      id: "__FRSH_STYLE",
+      dangerouslySetInnerHTML: { __html: opts.styles.join("\n") },
+    });
+
+    renderState.headVNodes.splice(0, 0, node);
+  }
+
+  for (const style of styleTags) {
+    const node = h("style", {
+      id: style.id,
+      media: style.media,
+      dangerouslySetInnerHTML: { __html: style.cssText },
+    });
+    renderState.headVNodes.splice(0, 0, node);
+  }
+
+  return { bodyHtml: opts.bodyHtml, preloadSet, moduleScripts };
+}
diff --git a/src/server/rendering/preact_hooks.ts b/src/server/rendering/preact_hooks.ts
new file mode 100644
index 00000000000..9b0f6626416
--- /dev/null
+++ b/src/server/rendering/preact_hooks.ts
@@ -0,0 +1,287 @@
+import {
+  Component,
+  type ComponentChildren,
+  Fragment,
+  h,
+  type Options as PreactOptions,
+  options as preactOptions,
+  type VNode,
+} from "preact";
+import { assetHashingHook } from "../../runtime/utils.ts";
+import { renderToString } from "preact-render-to-string";
+import { RenderState } from "./state.ts";
+import { Island } from "../types.ts";
+
+// These hooks are long stable, but when we originally added them we
+// weren't sure if they should be public.
+interface AdvancedPreactOptions extends PreactOptions {
+  /** Attach a hook that is invoked after a tree was mounted or was updated. */
+  __c?(vnode: VNode, commitQueue: Component[]): void;
+  /** Attach a hook that is invoked before a vnode has rendered. */
+  __r?(vnode: VNode): void;
+  errorBoundaries?: boolean;
+  /** before diff hook */
+  __b?(vnode: VNode): void;
+}
+const options = preactOptions as AdvancedPreactOptions;
+
+// Enable error boundaries in Preact.
+options.errorBoundaries = true;
+
+// Set up a preact option hook to track when vnode with custom functions are
+// created.
+let current: RenderState | null = null;
+// Keep track of which component rendered which vnode. This allows us
+// to detect when an island is rendered within another instead of being
+// passed as children.
+let ownerStack: VNode[] = [];
+// Keep track of all available islands
+const islandByComponent = new Map();
+export function setAllIslands(islands: Island[]) {
+  for (let i = 0; i < islands.length; i++) {
+    const island = islands[i];
+    islandByComponent.set(island.component, island);
+  }
+}
+
+export function setRenderState(state: RenderState | null): void {
+  if (current) current.clearTmpState();
+  current = state;
+  ownerStack = state?.ownerStack ?? [];
+}
+
+// Check if an older version of `preact-render-to-string` is used
+const supportsUnstableComments = renderToString(h(Fragment, {
+  // @ts-ignore unstable features not supported in types
+  UNSTABLE_comment: "foo",
+})) !== "";
+
+if (!supportsUnstableComments) {
+  console.warn(
+    "‚ö†Ô∏è  Found old version of 'preact-render-to-string'. Please upgrade it to >=6.1.0",
+  );
+}
+
+/**
+ *  Wrap a node with comment markers in the HTML
+ */
+function wrapWithMarker(vnode: ComponentChildren, markerText: string) {
+  // Newer versions of preact-render-to-string allow you to render comments
+  if (supportsUnstableComments) {
+    return h(
+      Fragment,
+      null,
+      h(Fragment, {
+        // @ts-ignore unstable property is not typed
+        UNSTABLE_comment: markerText,
+      }),
+      vnode,
+      h(Fragment, {
+        // @ts-ignore unstable property is not typed
+        UNSTABLE_comment: "/" + markerText,
+      }),
+    );
+  } else {
+    return h(
+      `!--${markerText}--`,
+      null,
+      vnode,
+    );
+  }
+}
+
+/**
+ * Whenever a slot (=jsx children) is rendered, remove this from the slot
+ * tracking Set. After everything was rendered we'll know which slots
+ * weren't and can send them down to the client
+ */
+function SlotTracker(
+  props: { id: string; children?: ComponentChildren },
+): VNode {
+  current?.slots.delete(props.id);
+  // deno-lint-ignore no-explicit-any
+  return props.children as any;
+}
+
+/**
+ * Copy props but exclude children
+ */
+function excludeChildren(props: Record<string, unknown>) {
+  const out: Record<string, unknown> = {};
+  for (const k in props) {
+    if (k !== "children") out[k] = props[k];
+  }
+  return out;
+}
+
+const patched = new WeakSet<VNode>();
+
+const oldVNodeHook = options.vnode;
+const oldDiff = options.__b;
+const oldDiffed = options.diffed;
+const oldRender = options.__r;
+
+options.vnode = (vnode) => {
+  assetHashingHook(vnode);
+
+  // Work around `preact/debug` string event handler error which
+  // errors when an event handler gets a string. This makes sense
+  // on the client where this is a common vector for XSS. On the
+  // server when the string was not created through concatenation
+  // it is fine. Internally, `preact/debug` only checks for the
+  // lowercase variant.
+  if (typeof vnode.type === "string") {
+    const props = vnode.props as Record<string, unknown>;
+    for (const key in props) {
+      const value = props[key];
+      if (key.startsWith("on") && typeof value === "string") {
+        delete props[key];
+        props["ON" + key.slice(2)] = value;
+      }
+    }
+  } else if (
+    current && typeof vnode.type === "function" && vnode.type !== Fragment &&
+    ownerStack.length > 0
+  ) {
+    current.owners.set(vnode, ownerStack[ownerStack.length - 1]);
+  }
+
+  if (oldVNodeHook) oldVNodeHook(vnode);
+};
+
+options.__b = (vnode: VNode<Record<string, unknown>>) => {
+  if (
+    current && current.renderingUserTemplate
+  ) {
+    // Internally rendering happens in two phases. This is done so
+    // that the `<Head>` component works. When we do the first render
+    // we cache all attributes on `<html>`, `<head>` + its children, and
+    // `<body>`. When doing so, we'll replace the tags with a Fragment node
+    // so that they don't end up in the rendered HTML. Effectively this
+    // means we'll only serialize the contents of `<body>`.
+    //
+    // After that render is finished we know all additional
+    // meta tags that were inserted via `<Head>` and all islands that
+    // we can add as preloads. Then we do a second render of the outer
+    // HTML tags with the updated value and merge in the HTML generate by
+    // the first render into `<body>` directly.
+    if (
+      typeof vnode.type === "string"
+    ) {
+      if (vnode.type === "html") {
+        current.renderedHtmlTag = true;
+        current.docHtml = excludeChildren(vnode.props);
+        vnode.type = Fragment;
+      } else if (vnode.type === "head") {
+        current.docHead = excludeChildren(vnode.props);
+        current.headChildren = true;
+        vnode.type = Fragment;
+        vnode.props = {
+          __freshHead: true,
+          children: vnode.props.children,
+        };
+      } else if (vnode.type === "body") {
+        current.docBody = excludeChildren(vnode.props);
+        vnode.type = Fragment;
+      } else if (current.headChildren) {
+        if (vnode.type === "title") {
+          current.docTitle = h("title", vnode.props);
+          vnode.props = { children: null };
+        } else {
+          current.docHeadNodes.push({
+            type: vnode.type,
+            props: vnode.props,
+          });
+        }
+        vnode.type = Fragment;
+      }
+    } else if (typeof vnode.type === "function" && vnode.type !== Fragment) {
+      // Detect island vnodes and wrap them with a marker
+      const island = islandByComponent.get(vnode.type);
+      patchIsland:
+      if (
+        island &&
+        !patched.has(vnode)
+      ) {
+        // Check if an island is rendered inside another island, not just
+        // passed as a child.In that case we treat it like a normal
+        // Component. Example:
+        //   function Island() {}
+        //     return <OtherIsland />
+        //   }
+        let tmpVNode = vnode;
+        let owner;
+        while ((owner = current.owners.get(tmpVNode)) !== undefined) {
+          if (islandByComponent.has(owner.type)) {
+            break patchIsland;
+          }
+          tmpVNode = owner;
+        }
+
+        // At this point we know that we need to patch the island. Mark the
+        // island in that we have already patched it.
+        const originalType = vnode.type;
+        patched.add(vnode);
+
+        vnode.type = (props) => {
+          if (!current) return null;
+
+          const { encounteredIslands, islandProps, slots } = current;
+          encounteredIslands.add(island);
+
+          // Only passing children JSX to islands is supported for now
+          const id = islandProps.length;
+          if ("children" in props) {
+            let children = props.children;
+            const markerText =
+              `frsh-slot-${island.id}:${island.exportName}:${id}:children`;
+            // @ts-ignore nonono
+            props.children = wrapWithMarker(
+              children,
+              markerText,
+            );
+            slots.set(markerText, children);
+            children = props.children;
+            // deno-lint-ignore no-explicit-any
+            (props as any).children = h(
+              SlotTracker,
+              { id: markerText },
+              children,
+            );
+          }
+
+          const child = h(originalType, props);
+          patched.add(child);
+          islandProps.push(props);
+
+          return wrapWithMarker(
+            child,
+            `frsh-${island.id}:${island.exportName}:${islandProps.length - 1}`,
+          );
+        };
+      }
+    }
+  }
+  oldDiff?.(vnode);
+};
+options.__r = (vnode) => {
+  if (
+    typeof vnode.type === "function" &&
+    vnode.type !== Fragment
+  ) {
+    ownerStack.push(vnode);
+  }
+  oldRender?.(vnode);
+};
+options.diffed = (vnode: VNode<Record<string, unknown>>) => {
+  if (typeof vnode.type === "function") {
+    if (vnode.type !== Fragment) {
+      ownerStack.pop();
+    } else if (vnode.props.__freshHead) {
+      if (current) {
+        current.headChildren = false;
+      }
+    }
+  }
+  oldDiffed?.(vnode);
+};
diff --git a/src/server/rendering/state.ts b/src/server/rendering/state.ts
new file mode 100644
index 00000000000..d865e6b2238
--- /dev/null
+++ b/src/server/rendering/state.ts
@@ -0,0 +1,58 @@
+import { type ComponentChildren, type VNode } from "preact";
+import { Island } from "../types.ts";
+import { ContentSecurityPolicy } from "../../runtime/csp.ts";
+
+export interface RenderStateRouteOptions {
+  url: URL;
+  route: string;
+  // deno-lint-ignore no-explicit-any
+  data?: any;
+  // deno-lint-ignore no-explicit-any
+  state?: any;
+  error?: unknown;
+  params: Record<string, string | string[]>;
+}
+
+export class RenderState {
+  // deno-lint-ignore no-explicit-any
+  componentStack: any[];
+  renderingUserTemplate = false;
+  encounteredIslands = new Set<Island>();
+  islandProps: unknown[] = [];
+  slots = new Map<string, ComponentChildren>();
+  headChildren = false;
+  renderedHtmlTag = false;
+  // deno-lint-ignore no-explicit-any
+  docTitle: VNode<any> | null = null;
+  docHtml: Record<string, unknown> | null = null;
+  docHead: Record<string, unknown> | null = null;
+  docBody: Record<string, unknown> | null = null;
+  docHeadNodes: { type: string; props: Record<string, unknown> }[] = [];
+  headVNodes: ComponentChildren[] = [];
+  // Route options
+  routeOptions: RenderStateRouteOptions;
+  csp: ContentSecurityPolicy | undefined;
+  // Preact state
+  ownerStack: VNode[] = [];
+  owners = new Map<VNode, VNode>();
+
+  constructor(
+    routeOptions: RenderStateRouteOptions,
+    // deno-lint-ignore no-explicit-any
+    componentStack: any[],
+    csp?: ContentSecurityPolicy,
+    error?: unknown,
+  ) {
+    this.routeOptions = routeOptions;
+    this.csp = csp;
+    this.componentStack = componentStack;
+
+    if (error) this.routeOptions.error = error;
+  }
+
+  clearTmpState() {
+    this.renderingUserTemplate = false;
+    this.ownerStack = [];
+    this.owners.clear();
+  }
+}
diff --git a/src/server/rendering/template.tsx b/src/server/rendering/template.tsx
new file mode 100644
index 00000000000..05a8a88ac75
--- /dev/null
+++ b/src/server/rendering/template.tsx
@@ -0,0 +1,103 @@
+import { RenderState } from "./state.ts";
+import { setRenderState } from "./preact_hooks.ts";
+import { renderToString } from "preact-render-to-string";
+import { Fragment, h } from "preact";
+import { HEAD_CONTEXT } from "../../runtime/head.ts";
+import { CSP_CONTEXT } from "../../runtime/csp.ts";
+
+export function renderHtml(state: RenderState) {
+  setRenderState(state);
+  state.renderingUserTemplate = true;
+  state.headChildren = false;
+
+  const componentStack = state.componentStack;
+  try {
+    const routeComponent = componentStack[componentStack.length - 1];
+    let finalComp = h(routeComponent, state.routeOptions);
+
+    // Skip page component
+    let i = componentStack.length - 1;
+    while (i--) {
+      const component = componentStack[i];
+      const curComp = finalComp;
+
+      finalComp = h(component, {
+        ...state.routeOptions,
+        Component() {
+          return curComp;
+        },
+      });
+    }
+
+    const app = h(
+      CSP_CONTEXT.Provider,
+      // deno-lint-ignore no-explicit-any
+      { value: state.csp } as any,
+      h(HEAD_CONTEXT.Provider, {
+        value: state.headVNodes,
+        children: finalComp,
+      }),
+    );
+
+    let html = renderToString(app);
+
+    for (const [id, children] of state.slots.entries()) {
+      const slotHtml = renderToString(h(Fragment, null, children));
+      const templateId = id.replace(/:/g, "-");
+      html += `<template id="${templateId}">${slotHtml}</template>`;
+    }
+
+    return html;
+  } finally {
+    setRenderState(null);
+  }
+}
+
+export function renderOuterDocument(
+  state: RenderState,
+  opts: {
+    bodyHtml: string;
+    lang?: string;
+    preloads: string[];
+    moduleScripts: [src: string, nonce: string][];
+  },
+) {
+  const {
+    docHtml,
+    docHead,
+    renderedHtmlTag,
+    docTitle,
+    docHeadNodes,
+    headVNodes,
+  } = state;
+
+  const page = h(
+    "html",
+    docHtml ?? { lang: opts.lang },
+    h(
+      "head",
+      docHead,
+      !renderedHtmlTag ? h("meta", { charSet: "utf-8" }) : null,
+      !renderedHtmlTag
+        ? (h("meta", {
+          name: "viewport",
+          content: "width=device-width, initial-scale=1.0",
+        }))
+        : null,
+      docTitle,
+      docHeadNodes.map((node) => h(node.type, node.props)),
+      opts.preloads.map((src) =>
+        h("link", { rel: "modulepreload", href: src })
+      ),
+      headVNodes,
+      h("body", { dangerouslySetInnerHTML: { __html: opts.bodyHtml } }),
+    ),
+  );
+
+  try {
+    setRenderState(state);
+    return "<!DOCTYPE html>" + renderToString(page);
+  } finally {
+    setRenderState(null);
+  }
+}
diff --git a/src/server/route_sorting_test.ts b/src/server/route_sorting_test.ts
index b7ce29cd6f9..69a73afa18d 100644
--- a/src/server/route_sorting_test.ts
+++ b/src/server/route_sorting_test.ts
@@ -1,94 +1,33 @@
 import { assertEquals } from "../../tests/deps.ts";
-import { sortMiddleware, sortRoutes } from "./context.ts";
+import { sortRoutePaths } from "./context.ts";
 
-Deno.test("sort middleware", () => {
+Deno.test("sortRoutePaths", () => {
   const routes = [
-    { pattern: "{/*}?" },
-    { pattern: "/layeredMdw{/*}?" },
-    { pattern: "/layeredMdw/layer2{/*}?" },
-    { pattern: "/layeredMdw/layer2/layer3{/*}?" },
-    { pattern: "/layeredMdw/nesting/:tenant/:environment{/*}?" },
-    { pattern: "/layeredMdw/nesting/:tenant{/*}?" },
-    { pattern: "/layeredMdw/nesting{/*}?" },
-    { pattern: "/state-in-props{/*}?" },
+    "/foo/[id]",
+    "/foo/[...slug]",
+    "/foo/bar",
+    "/foo/_layout",
+    "/foo/index",
+    "/foo/_middleware",
+    "/foo/bar/_middleware",
+    "/foo/bar/index",
+    "/foo/bar/[...foo]",
+    "/foo/bar/baz",
+    "/foo/bar/_layout",
   ];
-  const sortedRoutes = [
-    { pattern: "{/*}?" },
-    { pattern: "/layeredMdw{/*}?" },
-    { pattern: "/state-in-props{/*}?" },
-    { pattern: "/layeredMdw/layer2{/*}?" },
-    { pattern: "/layeredMdw/nesting{/*}?" },
-    { pattern: "/layeredMdw/layer2/layer3{/*}?" },
-    { pattern: "/layeredMdw/nesting/:tenant{/*}?" },
-    { pattern: "/layeredMdw/nesting/:tenant/:environment{/*}?" },
+  const sorted = [
+    "/foo/_middleware",
+    "/foo/_layout",
+    "/foo/bar",
+    "/foo/index",
+    "/foo/bar/_middleware",
+    "/foo/bar/_layout",
+    "/foo/bar/index",
+    "/foo/bar/baz",
+    "/foo/bar/[...foo]",
+    "/foo/[id]",
+    "/foo/[...slug]",
   ];
-  sortMiddleware(routes);
-  assertEquals(routes, sortedRoutes);
-});
-
-Deno.test("sort routes", () => {
-  const routes = [
-    { pattern: "/:name" },
-    { pattern: "/api/get_only" },
-    { pattern: "/api/head_override" },
-    { pattern: "/assetsCaching" },
-    { pattern: "/books/:id(\\d+)" },
-    { pattern: "/connInfo" },
-    { pattern: "/evil" },
-    { pattern: "/failure" },
-    { pattern: "/" },
-    { pattern: "/intercept" },
-    { pattern: "/intercept_args" },
-    { pattern: "/islands" },
-    { pattern: "/islands/returning_null" },
-    { pattern: "/islands/root_fragment" },
-    { pattern: "/islands/root_fragment_conditional_first" },
-    { pattern: "/layeredMdw/layer2-no-mw/without_mw" },
-    { pattern: "/layeredMdw/layer2/abc" },
-    { pattern: "/layeredMdw/layer2" },
-    { pattern: "/layeredMdw/layer2/layer3/:id" },
-    { pattern: "/layeredMdw/nesting/:tenant/:environment/:id" },
-    { pattern: "/layeredMdw/nesting/:tenant" },
-    { pattern: "/layeredMdw/nesting" },
-    { pattern: "/middleware_root" },
-    { pattern: "/not_found" },
-    { pattern: "/params/:path*" },
-    { pattern: "/props/:id" },
-    { pattern: "/static" },
-    { pattern: "/status_overwrite" },
-    { pattern: "/foo/:path*" },
-  ];
-  const sortedRoutes = [
-    { pattern: "/api/get_only" },
-    { pattern: "/api/head_override" },
-    { pattern: "/assetsCaching" },
-    { pattern: "/books/:id(\\d+)" },
-    { pattern: "/connInfo" },
-    { pattern: "/evil" },
-    { pattern: "/failure" },
-    { pattern: "/" },
-    { pattern: "/intercept" },
-    { pattern: "/intercept_args" },
-    { pattern: "/islands" },
-    { pattern: "/islands/returning_null" },
-    { pattern: "/islands/root_fragment" },
-    { pattern: "/islands/root_fragment_conditional_first" },
-    { pattern: "/layeredMdw/layer2-no-mw/without_mw" },
-    { pattern: "/layeredMdw/layer2" },
-    { pattern: "/layeredMdw/layer2/abc" },
-    { pattern: "/layeredMdw/layer2/layer3/:id" },
-    { pattern: "/layeredMdw/nesting" },
-    { pattern: "/layeredMdw/nesting/:tenant" },
-    { pattern: "/layeredMdw/nesting/:tenant/:environment/:id" },
-    { pattern: "/middleware_root" },
-    { pattern: "/not_found" },
-    { pattern: "/params/:path*" },
-    { pattern: "/props/:id" },
-    { pattern: "/static" },
-    { pattern: "/status_overwrite" },
-    { pattern: "/foo/:path*" },
-    { pattern: "/:name" },
-  ];
-  sortRoutes(routes);
-  assertEquals(routes, sortedRoutes);
+  routes.sort(sortRoutePaths);
+  assertEquals(routes, sorted);
 });
diff --git a/src/server/router.ts b/src/server/router.ts
index e056e1081af..c9c1ce1e02c 100644
--- a/src/server/router.ts
+++ b/src/server/router.ts
@@ -1,4 +1,4 @@
-import { ServeHandlerInfo } from "./types.ts";
+import { BaseRoute, ErrorHandlerContext, ServeHandlerInfo } from "./types.ts";
 
 type HandlerContext<T = unknown> = T & ServeHandlerInfo;
 
@@ -37,13 +37,19 @@ export type MatchHandler<T = unknown> = (
 
 // deno-lint-ignore ban-types
 export interface Routes<T = {}> {
-  [key: string]: { [K in KnownMethod | "default"]?: MatchHandler<T> };
+  [key: string]: {
+    baseRoute: BaseRoute;
+    methods: {
+      [K in KnownMethod | "default"]?: MatchHandler<T>;
+    };
+  };
 }
 
 export type DestinationKind = "internal" | "static" | "route" | "notFound";
 
 // deno-lint-ignore ban-types
 export type InternalRoute<T = {}> = {
+  baseRoute: BaseRoute;
   pattern: URLPattern;
   methods: { [K in KnownMethod]?: MatchHandler<T> };
   default?: MatchHandler<T>;
@@ -79,7 +85,7 @@ export function defaultOtherHandler(_req: Request): Response {
 
 export function defaultErrorHandler(
   _req: Request,
-  _ctx: HandlerContext,
+  _ctx: ErrorHandlerContext,
   err: unknown,
 ): Response {
   console.error(err);
@@ -107,15 +113,16 @@ function processRoutes<T>(
   routes: Routes<T>,
   destination: DestinationKind,
 ) {
-  for (const [path, methods] of Object.entries(routes)) {
+  for (const [path, def] of Object.entries(routes)) {
     const entry: InternalRoute<T> = {
+      baseRoute: def.baseRoute,
       pattern: new URLPattern({ pathname: path }),
       methods: {},
       default: undefined,
       destination,
     };
 
-    for (const [method, handler] of Object.entries(methods)) {
+    for (const [method, handler] of Object.entries(def.methods)) {
       if (method === "default") {
         entry.default = handler;
       } else if (knownMethods.includes(method as KnownMethod)) {
diff --git a/src/server/serializer.ts b/src/server/serializer.ts
index 2c49201e123..af3cb46e42a 100644
--- a/src/server/serializer.ts
+++ b/src/server/serializer.ts
@@ -88,6 +88,16 @@ export function serialize(data: unknown): SerializeResult {
       return value;
     }
 
+    // Bypass signal's `.toJSON` method because we want to serialize
+    // the signal itself including the signal's value and not just
+    // the value. This is needed because `JSON.stringify` always
+    // calls `.toJSON` automatically if available.
+    // deno-lint-ignore no-explicit-any
+    if (key !== null && isSignal((this as any)[key])) {
+      // deno-lint-ignore no-explicit-any
+      value = (this as any)[key];
+    }
+
     // For some object types, the path in the object graph from root is not the
     // same between the serialized representation, and deserialized objects. For
     // these cases, we have to change the contents of the key stack to match the
@@ -155,22 +165,6 @@ export function serialize(data: unknown): SerializeResult {
       parentStack.push(res);
       return res;
     } else {
-      if (key !== null) {
-        // Bypass signal's `.toJSON` method because we want to serialize
-        // the signal itself including the signal's value and not just
-        // the value. This is needed because `JSON.stringify` always
-        // calls `.toJSON` automatically if available.
-        // deno-lint-ignore no-explicit-any
-        const realValue = (this as any)[key];
-        if (isSignal(realValue)) {
-          requiresDeserializer = true;
-          hasSignals = true;
-          const res = { [KEY]: "s", v: realValue.peek() };
-          parentStack.push(res);
-          return res;
-        }
-      }
-
       parentStack.push(value);
       return value;
     }
diff --git a/src/server/types.ts b/src/server/types.ts
index f7d5ffc3fdb..3051cac5ffe 100644
--- a/src/server/types.ts
+++ b/src/server/types.ts
@@ -1,11 +1,10 @@
 import { ComponentChildren, ComponentType, VNode } from "preact";
-import { ServeInit } from "./deps.ts";
 import * as router from "./router.ts";
 import { InnerRenderFunction, RenderContext } from "./render.ts";
 
 // --- APPLICATION CONFIGURATION ---
 
-export type StartOptions = ServeInit & FreshOptions;
+export type StartOptions = Partial<Deno.ServeTlsOptions> & FreshOptions;
 
 export interface FreshOptions {
   render?: RenderFunction;
@@ -59,12 +58,18 @@ export interface PageProps<T = any, S = Record<string, unknown>> {
 /**
  * Context passed to async route components.
  */
-export type RouteContext<T = unknown, S = Record<string, unknown>> =
-  & Omit<
-    HandlerContext<T, S>,
-    "render"
-  >
-  & Omit<PageProps<unknown, S>, "data">;
+// deno-lint-ignore no-explicit-any
+export type RouteContext<T = any, S = Record<string, unknown>> = {
+  /** @types deprecated */
+  localAddr?: Deno.NetAddr;
+  remoteAddr: Deno.NetAddr;
+  renderNotFound: (data?: T) => Response | Promise<Response>;
+  url: URL;
+  route: string;
+  params: Record<string, string>;
+  state: S;
+  data: T;
+};
 
 export interface RouteConfig {
   /**
@@ -78,10 +83,22 @@ export interface RouteConfig {
   /**
    * If Content-Security-Policy should be enabled for this page. If 'true', a
    * locked down policy will be used that allows only the scripts and styles
-   * that are generated by fresh. Additional scripts and styles can be added
+   * that are generated by Fresh. Additional scripts and styles can be added
    * using the `useCSP` hook.
    */
   csp?: boolean;
+
+  /**
+   * Skip already inherited layouts
+   * Default: `false`
+   */
+  skipInheritedLayouts?: boolean;
+
+  /**
+   * Skip rendering the `routes/_app` template
+   * Default: `false`
+   */
+  skipAppWrapper?: boolean;
 }
 
 // deno-lint-ignore no-empty-interface
@@ -135,24 +152,29 @@ export interface RouteModule {
   config?: RouteConfig;
 }
 
-export type AsyncRoute<T> = (
+// deno-lint-ignore no-explicit-any
+export type AsyncRoute<T = any, S = Record<string, unknown>> = (
   req: Request,
-  ctx: RouteContext<T>,
+  ctx: RouteContext<T, S>,
 ) => Promise<ComponentChildren | Response>;
-export type PageComponent<T> =
-  | ComponentType<PageProps<T>>
-  | AsyncRoute<T>
+// deno-lint-ignore no-explicit-any
+export type PageComponent<T = any, S = Record<string, unknown>> =
+  | ComponentType<PageProps<T, S>>
+  | AsyncRoute<T, S>
   // deno-lint-ignore no-explicit-any
   | ((props: any) => VNode<any> | ComponentChildren);
 
 // deno-lint-ignore no-explicit-any
 export interface Route<Data = any> {
+  baseRoute: BaseRoute;
   pattern: string;
   url: string;
   name: string;
-  component?: PageComponent<Data>;
+  component?: PageComponent<Data> | AsyncLayout<Data> | AsyncRoute<Data>;
   handler: Handler<Data> | Handlers<Data>;
   csp: boolean;
+  appWrapper: boolean;
+  inheritLayouts: boolean;
 }
 
 export interface RouterState {
@@ -161,18 +183,69 @@ export interface RouterState {
 
 // --- APP ---
 
-export interface AppProps extends PageProps {
+// deno-lint-ignore no-explicit-any
+export type AppProps<T = any, S = Record<string, unknown>> = LayoutProps<T, S>;
+
+export interface AppModule {
+  default: ComponentType<AppProps> | AsyncLayout;
+}
+
+// deno-lint-ignore no-explicit-any
+export type AppContext<T = any, S = Record<string, unknown>> =
+  & RouteContext<T, S>
+  & {
+    Component: () => VNode;
+  };
+// deno-lint-ignore no-explicit-any
+export type LayoutContext<T = any, S = Record<string, unknown>> = AppContext<
+  T,
+  S
+>;
+
+// deno-lint-ignore no-explicit-any
+export interface LayoutProps<T = any, S = Record<string, unknown>>
+  extends PageProps<T, S> {
   Component: ComponentType<Record<never, never>>;
 }
+// deno-lint-ignore no-explicit-any
+export type AsyncLayout<T = any, S = Record<string, unknown>> = (
+  req: Request,
+  ctx: LayoutContext<T, S>,
+) => Promise<ComponentChildren | Response>;
 
-export interface AppModule {
-  default: ComponentType<AppProps>;
+export interface LayoutConfig {
+  /**
+   * Skip already inherited layouts
+   * Default: `false`
+   */
+  skipAppWrapper?: boolean;
+  /**
+   * Skip rendering the `routes/_app`.
+   * Default: `false`
+   */
+  skipInheritedLayouts?: boolean;
+}
+
+export interface LayoutModule {
+  // deno-lint-ignore no-explicit-any
+  handler?: Handler<any, any> | Handlers<any, any>;
+  default: ComponentType<LayoutProps> | AsyncLayout;
+  config?: LayoutConfig;
+}
+
+export interface LayoutRoute {
+  baseRoute: BaseRoute;
+  // deno-lint-ignore no-explicit-any
+  handler?: Handler<any, any> | Handlers<any, any>;
+  component: LayoutModule["default"];
+  appWrapper: boolean;
+  inheritLayouts: boolean;
 }
 
 // --- UNKNOWN PAGE ---
 
 // deno-lint-ignore no-explicit-any
-export interface UnknownPageProps<T = any> {
+export interface UnknownPageProps<T = any, S = Record<string, unknown>> {
   /** The URL of the request that resulted in this page being rendered. */
   url: URL;
 
@@ -185,6 +258,7 @@ export interface UnknownPageProps<T = any> {
    * `undefined`.
    */
   data: T;
+  state: S;
 }
 
 export interface UnknownHandlerContext<State = Record<string, unknown>>
@@ -205,12 +279,15 @@ export interface UnknownPageModule {
 }
 
 export interface UnknownPage {
+  baseRoute: BaseRoute;
   pattern: string;
   url: string;
   name: string;
   component?: PageComponent<UnknownPageProps>;
   handler: UnknownHandler;
   csp: boolean;
+  appWrapper: boolean;
+  inheritLayouts: boolean;
 }
 
 // --- ERROR PAGE ---
@@ -234,6 +311,9 @@ export interface ErrorHandlerContext<State = Record<string, unknown>>
   state: State;
 }
 
+// Nominal/Branded type. Ensures that the string has the expected format
+export type BaseRoute = string & { readonly __brand: unique symbol };
+
 export type ErrorHandler = (
   req: Request,
   ctx: ErrorHandlerContext,
@@ -246,12 +326,15 @@ export interface ErrorPageModule {
 }
 
 export interface ErrorPage {
+  baseRoute: BaseRoute;
   pattern: string;
   url: string;
   name: string;
   component?: PageComponent<ErrorPageProps>;
   handler: ErrorHandler;
   csp: boolean;
+  appWrapper: boolean;
+  inheritLayouts: boolean;
 }
 
 // --- MIDDLEWARES ---
@@ -264,15 +347,9 @@ export interface MiddlewareHandlerContext<State = Record<string, unknown>>
   params: Record<string, string>;
 }
 
-export interface MiddlewareRoute extends Middleware {
-  /**
-   * path-to-regexp style url path
-   */
-  pattern: string;
-  /**
-   * URLPattern of the route
-   */
-  compiledPattern: URLPattern;
+export interface MiddlewareRoute {
+  baseRoute: BaseRoute;
+  module: Middleware;
 }
 
 export type MiddlewareHandler<State = Record<string, unknown>> = (
@@ -306,7 +383,7 @@ export interface Island {
 
 // --- PLUGINS ---
 
-export interface Plugin {
+export interface Plugin<State = Record<string, unknown>> {
   /** The name of the plugin. Must be snake-case. */
   name: string;
 
@@ -340,7 +417,7 @@ export interface Plugin {
 
   routes?: PluginRoute[];
 
-  middlewares?: PluginMiddleware[];
+  middlewares?: PluginMiddleware<State>[];
 }
 
 export interface PluginRenderContext {
@@ -392,11 +469,11 @@ export interface PluginRenderFunctionResult {
   requiresHydration: boolean;
 }
 
-export interface PluginMiddleware {
+export interface PluginMiddleware<State = Record<string, unknown>> {
   /** A path in the format of a filename path without filetype */
   path: string;
 
-  middleware: Middleware;
+  middleware: Middleware<State>;
 }
 
 export interface PluginRoute {
diff --git a/tests/build_test.ts b/tests/build_test.ts
new file mode 100644
index 00000000000..7a9de0e30f0
--- /dev/null
+++ b/tests/build_test.ts
@@ -0,0 +1,94 @@
+import * as path from "$std/path/mod.ts";
+import { puppeteer } from "./deps.ts";
+import { assert } from "$std/_util/asserts.ts";
+import { startFreshServer, waitForText } from "$fresh/tests/test_utils.ts";
+
+Deno.test("build snapshot and restore from it", async (t) => {
+  const fixture = path.join(Deno.cwd(), "tests", "fixture_build");
+  const outDir = path.join(fixture, "_fresh");
+
+  try {
+    await t.step("build snapshot", async () => {
+      const res = await new Deno.Command(Deno.execPath(), {
+        args: [
+          "run",
+          "-A",
+          path.join(fixture, "dev.ts"),
+          "build",
+        ],
+        stdin: "null",
+        stdout: "piped",
+        stderr: "inherit",
+      }).output();
+
+      const decoder = new TextDecoder();
+      const stdout = decoder.decode(res.stdout);
+      assert(
+        !/Using snapshot found at/.test(stdout),
+        "Using snapshot message was shown during build",
+      );
+
+      assert((await Deno.stat(outDir)).isDirectory, "Missing output directory");
+    });
+
+    await t.step("check snapshot file", async () => {
+      const snapshot = JSON.parse(
+        await Deno.readTextFile(path.join(outDir, "snapshot.json")),
+      );
+      assert(
+        Array.isArray(snapshot["island-counter_default.js"]),
+        "Island output file not found in snapshot",
+      );
+      assert(
+        Array.isArray(snapshot["main.js"]),
+        "main.js output file not found in snapshot",
+      );
+      assert(
+        Array.isArray(snapshot["signals.js"]),
+        "signals.js output file not found in snapshot",
+      );
+      assert(
+        Array.isArray(snapshot["deserializer.js"]),
+        "deserializer.js output file not found in snapshot",
+      );
+    });
+
+    await t.step("restore from snapshot", async () => {
+      const { lines, serverProcess, address, output } = await startFreshServer({
+        args: [
+          "run",
+          "-A",
+          path.join(fixture, "./main.ts"),
+        ],
+      });
+
+      // Check if restore snapshot message was printed
+      assert(
+        output.find((line) => line.includes("Using snapshot found at")),
+        "Did not print restoring from snapshot line",
+      );
+
+      try {
+        const browser = await puppeteer.launch({ args: ["--no-sandbox"] });
+
+        try {
+          const page = await browser.newPage();
+          await page.goto(address);
+
+          await page.waitForSelector("button:not([disabled])");
+          await page.click("button");
+
+          await waitForText(page, "p", "1");
+        } finally {
+          await browser.close();
+        }
+      } finally {
+        await lines.cancel();
+        serverProcess.kill("SIGTERM");
+        await serverProcess.status;
+      }
+    });
+  } finally {
+    await Deno.remove(path.join(fixture, "_fresh"), { recursive: true });
+  }
+});
diff --git a/tests/cli_test.ts b/tests/cli_test.ts
index 6f177d7714b..a3471dd37c9 100644
--- a/tests/cli_test.ts
+++ b/tests/cli_test.ts
@@ -1,12 +1,11 @@
 import * as path from "$std/path/mod.ts";
-import {
-  assertMatch,
-  assertNotMatch,
-} from "https://deno.land/std@0.193.0/testing/asserts.ts";
-import { Status } from "../src/server/deps.ts";
+import { DenoConfig } from "$fresh/server.ts";
+import { JSONC, Status } from "../src/server/deps.ts";
 import {
   assert,
   assertEquals,
+  assertMatch,
+  assertNotMatch,
   assertStringIncludes,
   delay,
   puppeteer,
@@ -29,7 +28,7 @@ const assertFileExistence = async (files: string[], dirname: string) => {
 };
 
 Deno.test({
-  name: "fresh-init",
+  name: "fresh-init asdf",
   async fn(t) {
     // Preparation
     const tmpDirName = await Deno.makeTempDir();
@@ -51,6 +50,8 @@ Deno.test({
 
     const files = [
       `/README.md`,
+      `/.gitignore`,
+      `/deno.json`,
       `/fresh.gen.ts`,
       `/components/Button.tsx`,
       `/islands/Counter.tsx`,
@@ -66,6 +67,30 @@ Deno.test({
       await assertFileExistence(files, tmpDirName);
     });
 
+    await t.step("check project", async () => {
+      const cliProcess = new Deno.Command(Deno.execPath(), {
+        args: [
+          "task",
+          "check",
+        ],
+        cwd: tmpDirName,
+        stdin: "null",
+        stdout: "piped",
+        stderr: "piped",
+      });
+      const { code } = await cliProcess.output();
+      assertEquals(code, 0);
+    });
+
+    await t.step("check deno.json", async () => {
+      const configPath = path.join(tmpDirName, "deno.json");
+      const json = JSON.parse(await Deno.readTextFile(configPath));
+
+      assert(json.tasks.start, "Missing 'start' task");
+      assert(json.tasks.build, "Missing 'build' task");
+      assert(json.tasks.preview, "Missing 'preview' task");
+    });
+
     await t.step("start up the server and access the root page", async () => {
       const { serverProcess, lines, address } = await startFreshServer({
         args: ["run", "-A", "--check", "main.ts"],
@@ -358,14 +383,34 @@ Deno.test("fresh-update", async function fn(t) {
     );
   });
 
+  await t.step("check deno.json", async () => {
+    const configPath = path.join(tmpDirName, "deno.json");
+    const json = JSONC.parse(await Deno.readTextFile(configPath)) as DenoConfig;
+
+    assert(json.tasks?.start, "Missing 'start' task");
+    assert(json.tasks?.build, "Missing 'build' task");
+    assert(json.tasks?.preview, "Missing 'preview' task");
+  });
+
+  const comment = "// This is a test comment";
+  const regex = /("preact": "https:\/\/esm.sh\/preact@[\d.]+",\n)/;
+  const originalName = `${tmpDirName}/deno.json`;
+  const updatedName = `${originalName}c`;
+
   await t.step("execute update command deno.jsonc support", async () => {
     try {
-      Deno.renameSync(`${tmpDirName}/deno.json`, `${tmpDirName}/deno.jsonc`);
+      Deno.renameSync(originalName, updatedName);
+      let denoJsonText = await Deno.readTextFile(updatedName);
+      denoJsonText = denoJsonText.replace(regex, `$1${comment}\n`);
+      await Deno.writeTextFile(updatedName, denoJsonText);
       await updateAndVerify(
         /The manifest has been generated for \d+ routes and \d+ islands./,
       );
     } finally {
-      Deno.renameSync(`${tmpDirName}/deno.jsonc`, `${tmpDirName}/deno.json`);
+      let denoJsonText = await Deno.readTextFile(updatedName);
+      denoJsonText = denoJsonText.replace(new RegExp(`\n${comment}\n`), "\n");
+      await Deno.writeTextFile(updatedName, denoJsonText);
+      Deno.renameSync(updatedName, originalName);
     }
   });
 
@@ -435,3 +480,59 @@ Deno.test("fresh-update", async function fn(t) {
     assertEquals(code, 0);
   }
 });
+
+Deno.test("fresh-update add _app.tsx if not present", async function fn(t) {
+  // Preparation
+  const tmpDirName = await Deno.makeTempDir();
+
+  const cliProcess = new Deno.Command(Deno.execPath(), {
+    args: [
+      "run",
+      "-A",
+      path.join(Deno.cwd(), "init.ts"),
+      ".",
+    ],
+    cwd: tmpDirName,
+    stdin: "null",
+    stdout: "null",
+  });
+
+  await cliProcess.output();
+
+  const appTsx = path.join(tmpDirName, "routes", "_app.tsx");
+  await Deno.remove(appTsx);
+
+  await t.step("execute update command", async () => {
+    await updateAndVerify(
+      /The manifest has been generated for \d+ routes and \d+ islands./,
+    );
+  });
+
+  await t.step("add _app.tsx", async () => {
+    const raw = await Deno.readTextFile(appTsx);
+    assert(raw.includes("<html>"), `<html>-tag not found in _app.tsx`);
+  });
+
+  async function updateAndVerify(expected: RegExp) {
+    const cliProcess = new Deno.Command(Deno.execPath(), {
+      args: [
+        "run",
+        "-A",
+        path.join(Deno.cwd(), "update.ts"),
+        ".",
+      ],
+      cwd: tmpDirName,
+      stdin: "null",
+      stdout: "piped",
+    });
+
+    const { code, stdout } = await cliProcess.output();
+    const output = new TextDecoder().decode(stdout);
+
+    assertMatch(
+      output,
+      expected,
+    );
+    assertEquals(code, 0);
+  }
+});
diff --git a/tests/cli_update_check_test.ts b/tests/cli_update_check_test.ts
index 9472ab6fb55..4a48ffa5da6 100644
--- a/tests/cli_update_check_test.ts
+++ b/tests/cli_update_check_test.ts
@@ -188,3 +188,36 @@ Deno.test({
     await Deno.remove(tmpDirName, { recursive: true });
   },
 });
+
+Deno.test({
+  name: "only shows update message when current < latest",
+  async fn() {
+    const tmpDirName = await Deno.makeTempDir();
+
+    const checkFile: CheckFile = {
+      current_version: "9999.999.0",
+      latest_version: "1.2.0",
+      last_checked: new Date().toISOString(),
+    };
+
+    await Deno.writeTextFile(
+      join(tmpDirName, "latest.json"),
+      JSON.stringify(checkFile, null, 2),
+    );
+
+    const out = await new Deno.Command(Deno.execPath(), {
+      args: ["run", "-A", "./tests/fixture_update_check/mod.ts"],
+      env: {
+        HOME: tmpDirName,
+        LATEST_VERSION: versions[0],
+        CURRENT_VERSION: "99999.9999.00",
+      },
+    }).output();
+
+    const decoder = new TextDecoder();
+    const stdout = colors.stripColor(decoder.decode(out.stdout));
+    assertNotMatch(stdout, /Fresh .* is available/);
+
+    await Deno.remove(tmpDirName, { recursive: true });
+  },
+});
diff --git a/tests/deps.ts b/tests/deps.ts
index a00ee725b54..acfe0d3b32f 100644
--- a/tests/deps.ts
+++ b/tests/deps.ts
@@ -7,6 +7,8 @@
 export {
   assert,
   assertEquals,
+  assertMatch,
+  assertNotMatch,
   assertStringIncludes,
 } from "https://deno.land/std@0.193.0/testing/asserts.ts";
 export { assertSnapshot } from "https://deno.land/std@0.193.0/testing/snapshot.ts";
@@ -19,3 +21,12 @@ export {
   default as puppeteer,
   Page,
 } from "https://deno.land/x/puppeteer@16.2.0/mod.ts";
+export {
+  Document,
+  DOMParser,
+  HTMLElement,
+  HTMLMetaElement,
+} from "https://esm.sh/linkedom@0.15.1";
+export { defineConfig, type Preset } from "https://esm.sh/@twind/core@1.1.3";
+export { default as presetTailwind } from "https://esm.sh/@twind/preset-tailwind@1.1.4";
+export * as fs from "https://deno.land/std@0.195.0/fs/mod.ts";
diff --git a/tests/explicit_app_template_test.ts b/tests/explicit_app_template_test.ts
new file mode 100644
index 00000000000..0d9463493db
--- /dev/null
+++ b/tests/explicit_app_template_test.ts
@@ -0,0 +1,68 @@
+import {
+  assertNotSelector,
+  assertSelector,
+  assertTextMany,
+  fetchHtml,
+  withFresh,
+} from "$fresh/tests/test_utils.ts";
+
+Deno.test("doesn't apply internal app template", async () => {
+  await withFresh(
+    "./tests/fixture_explicit_app/main.ts",
+    async (address) => {
+      const doc = await fetchHtml(`${address}`);
+
+      // Doesn't render internal app template
+      assertNotSelector(doc, "body body");
+
+      assertSelector(doc, "html > head");
+      assertSelector(doc, "html > body");
+      assertSelector(doc, `meta[charset="utf-8"]`);
+      assertSelector(
+        doc,
+        `meta[name="viewport"][content="width=device-width, initial-scale=1.0"]`,
+      );
+      assertTextMany(doc, "title", ["fresh title"]);
+
+      // Still renders page
+      assertSelector(doc, "body > .inner-body > .page");
+    },
+  );
+});
+
+Deno.test("user _app works with <Head>", async () => {
+  await withFresh(
+    "./tests/fixture_explicit_app/main.ts",
+    async (address) => {
+      const doc = await fetchHtml(`${address}/head`);
+
+      // Doesn't render internal app template
+      assertNotSelector(doc, "body body");
+
+      assertSelector(doc, "html > head");
+      assertSelector(doc, "html > body");
+      assertSelector(doc, `meta[charset="utf-8"]`);
+      assertSelector(
+        doc,
+        `meta[name="viewport"][content="width=device-width, initial-scale=1.0"]`,
+      );
+      assertSelector(
+        doc,
+        `meta[name="fresh"][content="test"]`,
+      );
+
+      // Still renders page
+      assertSelector(doc, "body > .inner-body > .page");
+    },
+  );
+});
+
+Deno.test("don't duplicate <title>", async () => {
+  await withFresh(
+    "./tests/fixture_explicit_app/main.ts",
+    async (address) => {
+      const doc = await fetchHtml(`${address}/title`);
+      assertTextMany(doc, "title", ["foo bar"]);
+    },
+  );
+});
diff --git a/tests/fixture/deno.json b/tests/fixture/deno.json
index 9d782057e20..2b73c6793f3 100644
--- a/tests/fixture/deno.json
+++ b/tests/fixture/deno.json
@@ -4,9 +4,9 @@
     "$fresh/": "../../",
     "preact": "https://esm.sh/preact@10.15.1",
     "preact/": "https://esm.sh/preact@10.15.1/",
-    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.2.0",
-    "@preact/signals": "https://esm.sh/*@preact/signals@1.1.3",
-    "@preact/signals-core": "https://esm.sh/@preact/signals-core@1.2.3"
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.2.1",
+    "@preact/signals": "https://esm.sh/*@preact/signals@1.1.5",
+    "@preact/signals-core": "https://esm.sh/@preact/signals-core@1.3.1"
   },
   "compilerOptions": {
     "jsx": "react-jsx",
diff --git a/tests/fixture/fresh.gen.ts b/tests/fixture/fresh.gen.ts
index 299cb0749a3..310cb341780 100644
--- a/tests/fixture/fresh.gen.ts
+++ b/tests/fixture/fresh.gen.ts
@@ -1,4 +1,4 @@
-// DO NOT EDIT. This file is generated by fresh.
+// DO NOT EDIT. This file is generated by Fresh.
 // This file SHOULD be checked into source version control.
 // This file is automatically updated during development when running `dev.ts`.
 
@@ -7,57 +7,78 @@ import * as $1 from "./routes/_404.tsx";
 import * as $2 from "./routes/_500.tsx";
 import * as $3 from "./routes/_app.tsx";
 import * as $4 from "./routes/_middleware.ts";
-import * as $5 from "./routes/api/get_only.ts";
-import * as $6 from "./routes/api/head_override.ts";
-import * as $7 from "./routes/assetsCaching/index.tsx";
-import * as $8 from "./routes/books/[id].tsx";
-import * as $9 from "./routes/connInfo.ts";
-import * as $10 from "./routes/error_boundary.tsx";
-import * as $11 from "./routes/evil.tsx";
-import * as $12 from "./routes/failure.ts";
-import * as $13 from "./routes/index.tsx";
-import * as $14 from "./routes/intercept.tsx";
-import * as $15 from "./routes/intercept_args.tsx";
-import * as $16 from "./routes/islands/index.tsx";
-import * as $17 from "./routes/islands/multiple_island_exports.tsx";
-import * as $18 from "./routes/islands/returning_null.tsx";
-import * as $19 from "./routes/islands/root_fragment.tsx";
-import * as $20 from "./routes/islands/root_fragment_conditional_first.tsx";
-import * as $21 from "./routes/layeredMdw/_middleware.ts";
-import * as $22 from "./routes/layeredMdw/layer2-no-mw/without_mw.ts";
-import * as $23 from "./routes/layeredMdw/layer2-with-params/[tenantId]/[id].ts";
-import * as $24 from "./routes/layeredMdw/layer2-with-params/[tenantId]/_middleware.ts";
-import * as $25 from "./routes/layeredMdw/layer2-with-params/_middleware.ts";
-import * as $26 from "./routes/layeredMdw/layer2/_middleware.ts";
-import * as $27 from "./routes/layeredMdw/layer2/abc.ts";
-import * as $28 from "./routes/layeredMdw/layer2/index.ts";
-import * as $29 from "./routes/layeredMdw/layer2/layer3/[id].ts";
-import * as $30 from "./routes/layeredMdw/layer2/layer3/_middleware.ts";
-import * as $31 from "./routes/layeredMdw/nesting/[tenant]/[environment]/[id].tsx";
-import * as $32 from "./routes/layeredMdw/nesting/[tenant]/[environment]/_middleware.ts";
-import * as $33 from "./routes/layeredMdw/nesting/[tenant]/_middleware.ts";
-import * as $34 from "./routes/layeredMdw/nesting/_middleware.ts";
-import * as $35 from "./routes/middleware-error-handler/_middleware.ts";
-import * as $36 from "./routes/middleware-error-handler/index.tsx";
-import * as $37 from "./routes/middleware_root.ts";
-import * as $38 from "./routes/not_found.ts";
-import * as $39 from "./routes/params.tsx";
-import * as $40 from "./routes/props/[id].tsx";
-import * as $41 from "./routes/state-in-props/_middleware.ts";
-import * as $42 from "./routes/state-in-props/index.tsx";
-import * as $43 from "./routes/static.tsx";
-import * as $44 from "./routes/status_overwrite.tsx";
-import * as $45 from "./routes/umlaut-√§√∂√º√ü.tsx";
-import * as $46 from "./routes/wildcard.tsx";
+import * as $5 from "./routes/admin/[site].tsx";
+import * as $6 from "./routes/api/get_only.ts";
+import * as $7 from "./routes/api/head_override.ts";
+import * as $8 from "./routes/assetsCaching/index.tsx";
+import * as $9 from "./routes/books/[id].tsx";
+import * as $10 from "./routes/connInfo.ts";
+import * as $11 from "./routes/error_boundary.tsx";
+import * as $12 from "./routes/event_handler_string.tsx";
+import * as $13 from "./routes/event_handler_string_island.tsx";
+import * as $14 from "./routes/evil.tsx";
+import * as $15 from "./routes/failure.ts";
+import * as $16 from "./routes/index.tsx";
+import * as $17 from "./routes/intercept.tsx";
+import * as $18 from "./routes/intercept_args.tsx";
+import * as $19 from "./routes/islands/index.tsx";
+import * as $20 from "./routes/islands/multiple_island_exports.tsx";
+import * as $21 from "./routes/islands/returning_null.tsx";
+import * as $22 from "./routes/islands/root_fragment.tsx";
+import * as $23 from "./routes/islands/root_fragment_conditional_first.tsx";
+import * as $24 from "./routes/layeredMdw/_middleware.ts";
+import * as $25 from "./routes/layeredMdw/layer2-no-mw/without_mw.ts";
+import * as $26 from "./routes/layeredMdw/layer2-with-params/[tenantId]/[id].ts";
+import * as $27 from "./routes/layeredMdw/layer2-with-params/[tenantId]/_middleware.ts";
+import * as $28 from "./routes/layeredMdw/layer2-with-params/_middleware.ts";
+import * as $29 from "./routes/layeredMdw/layer2/_middleware.ts";
+import * as $30 from "./routes/layeredMdw/layer2/abc.ts";
+import * as $31 from "./routes/layeredMdw/layer2/index.ts";
+import * as $32 from "./routes/layeredMdw/layer2/layer3/[id].ts";
+import * as $33 from "./routes/layeredMdw/layer2/layer3/_middleware.ts";
+import * as $34 from "./routes/layeredMdw/nesting/[tenant]/[environment]/[id].tsx";
+import * as $35 from "./routes/layeredMdw/nesting/[tenant]/[environment]/_middleware.ts";
+import * as $36 from "./routes/layeredMdw/nesting/[tenant]/_middleware.ts";
+import * as $37 from "./routes/layeredMdw/nesting/_middleware.ts";
+import * as $38 from "./routes/middleware-error-handler/_middleware.ts";
+import * as $39 from "./routes/middleware-error-handler/index.tsx";
+import * as $40 from "./routes/middleware_root.ts";
+import * as $41 from "./routes/movies/[foo].json.ts";
+import * as $42 from "./routes/movies/[foo]@[bar].ts";
+import * as $43 from "./routes/not_found.ts";
+import * as $44 from "./routes/params.tsx";
+import * as $45 from "./routes/props/[id].tsx";
+import * as $46 from "./routes/route-groups-islands/index.tsx";
+import * as $47 from "./routes/route-groups/(bar)/(baz)/_layout.tsx";
+import * as $48 from "./routes/route-groups/(bar)/(baz)/baz.tsx";
+import * as $49 from "./routes/route-groups/(bar)/_layout.tsx";
+import * as $50 from "./routes/route-groups/(bar)/bar.tsx";
+import * as $51 from "./routes/route-groups/(bar)/boof/index.tsx";
+import * as $52 from "./routes/route-groups/(foo)/_layout.tsx";
+import * as $53 from "./routes/route-groups/(foo)/index.tsx";
+import * as $54 from "./routes/signal_shared.tsx";
+import * as $55 from "./routes/state-in-props/_middleware.ts";
+import * as $56 from "./routes/state-in-props/index.tsx";
+import * as $57 from "./routes/state-middleware/_middleware.ts";
+import * as $58 from "./routes/state-middleware/foo/_middleware.ts";
+import * as $59 from "./routes/state-middleware/foo/index.tsx";
+import * as $60 from "./routes/static.tsx";
+import * as $61 from "./routes/status_overwrite.tsx";
+import * as $62 from "./routes/umlaut-√§√∂√º√ü.tsx";
+import * as $63 from "./routes/wildcard.tsx";
 import * as $$0 from "./islands/Counter.tsx";
-import * as $$1 from "./islands/MultipleCounters.tsx";
-import * as $$2 from "./islands/ReturningNull.tsx";
-import * as $$3 from "./islands/RootFragment.tsx";
-import * as $$4 from "./islands/RootFragmentWithConditionalFirst.tsx";
-import * as $$5 from "./islands/Test.tsx";
-import * as $$6 from "./islands/folder/Counter.tsx";
-import * as $$7 from "./islands/folder/subfolder/Counter.tsx";
-import * as $$8 from "./islands/kebab-case-counter-test.tsx";
+import * as $$1 from "./islands/Greeter.tsx";
+import * as $$2 from "./islands/MultipleCounters.tsx";
+import * as $$3 from "./islands/ReturningNull.tsx";
+import * as $$4 from "./islands/RootFragment.tsx";
+import * as $$5 from "./islands/RootFragmentWithConditionalFirst.tsx";
+import * as $$6 from "./islands/StringEventIsland.tsx";
+import * as $$7 from "./islands/Test.tsx";
+import * as $$8 from "./islands/folder/Counter.tsx";
+import * as $$9 from "./islands/folder/subfolder/Counter.tsx";
+import * as $$10 from "./islands/kebab-case-counter-test.tsx";
+import * as $$11 from "./routes/route-groups-islands/(_islands)/Counter.tsx";
+import * as $$12 from "./routes/route-groups-islands/(_islands)/invalid.tsx";
 
 const manifest = {
   routes: {
@@ -66,59 +87,80 @@ const manifest = {
     "./routes/_500.tsx": $2,
     "./routes/_app.tsx": $3,
     "./routes/_middleware.ts": $4,
-    "./routes/api/get_only.ts": $5,
-    "./routes/api/head_override.ts": $6,
-    "./routes/assetsCaching/index.tsx": $7,
-    "./routes/books/[id].tsx": $8,
-    "./routes/connInfo.ts": $9,
-    "./routes/error_boundary.tsx": $10,
-    "./routes/evil.tsx": $11,
-    "./routes/failure.ts": $12,
-    "./routes/index.tsx": $13,
-    "./routes/intercept.tsx": $14,
-    "./routes/intercept_args.tsx": $15,
-    "./routes/islands/index.tsx": $16,
-    "./routes/islands/multiple_island_exports.tsx": $17,
-    "./routes/islands/returning_null.tsx": $18,
-    "./routes/islands/root_fragment.tsx": $19,
-    "./routes/islands/root_fragment_conditional_first.tsx": $20,
-    "./routes/layeredMdw/_middleware.ts": $21,
-    "./routes/layeredMdw/layer2-no-mw/without_mw.ts": $22,
-    "./routes/layeredMdw/layer2-with-params/[tenantId]/[id].ts": $23,
-    "./routes/layeredMdw/layer2-with-params/[tenantId]/_middleware.ts": $24,
-    "./routes/layeredMdw/layer2-with-params/_middleware.ts": $25,
-    "./routes/layeredMdw/layer2/_middleware.ts": $26,
-    "./routes/layeredMdw/layer2/abc.ts": $27,
-    "./routes/layeredMdw/layer2/index.ts": $28,
-    "./routes/layeredMdw/layer2/layer3/[id].ts": $29,
-    "./routes/layeredMdw/layer2/layer3/_middleware.ts": $30,
-    "./routes/layeredMdw/nesting/[tenant]/[environment]/[id].tsx": $31,
-    "./routes/layeredMdw/nesting/[tenant]/[environment]/_middleware.ts": $32,
-    "./routes/layeredMdw/nesting/[tenant]/_middleware.ts": $33,
-    "./routes/layeredMdw/nesting/_middleware.ts": $34,
-    "./routes/middleware-error-handler/_middleware.ts": $35,
-    "./routes/middleware-error-handler/index.tsx": $36,
-    "./routes/middleware_root.ts": $37,
-    "./routes/not_found.ts": $38,
-    "./routes/params.tsx": $39,
-    "./routes/props/[id].tsx": $40,
-    "./routes/state-in-props/_middleware.ts": $41,
-    "./routes/state-in-props/index.tsx": $42,
-    "./routes/static.tsx": $43,
-    "./routes/status_overwrite.tsx": $44,
-    "./routes/umlaut-√§√∂√º√ü.tsx": $45,
-    "./routes/wildcard.tsx": $46,
+    "./routes/admin/[site].tsx": $5,
+    "./routes/api/get_only.ts": $6,
+    "./routes/api/head_override.ts": $7,
+    "./routes/assetsCaching/index.tsx": $8,
+    "./routes/books/[id].tsx": $9,
+    "./routes/connInfo.ts": $10,
+    "./routes/error_boundary.tsx": $11,
+    "./routes/event_handler_string.tsx": $12,
+    "./routes/event_handler_string_island.tsx": $13,
+    "./routes/evil.tsx": $14,
+    "./routes/failure.ts": $15,
+    "./routes/index.tsx": $16,
+    "./routes/intercept.tsx": $17,
+    "./routes/intercept_args.tsx": $18,
+    "./routes/islands/index.tsx": $19,
+    "./routes/islands/multiple_island_exports.tsx": $20,
+    "./routes/islands/returning_null.tsx": $21,
+    "./routes/islands/root_fragment.tsx": $22,
+    "./routes/islands/root_fragment_conditional_first.tsx": $23,
+    "./routes/layeredMdw/_middleware.ts": $24,
+    "./routes/layeredMdw/layer2-no-mw/without_mw.ts": $25,
+    "./routes/layeredMdw/layer2-with-params/[tenantId]/[id].ts": $26,
+    "./routes/layeredMdw/layer2-with-params/[tenantId]/_middleware.ts": $27,
+    "./routes/layeredMdw/layer2-with-params/_middleware.ts": $28,
+    "./routes/layeredMdw/layer2/_middleware.ts": $29,
+    "./routes/layeredMdw/layer2/abc.ts": $30,
+    "./routes/layeredMdw/layer2/index.ts": $31,
+    "./routes/layeredMdw/layer2/layer3/[id].ts": $32,
+    "./routes/layeredMdw/layer2/layer3/_middleware.ts": $33,
+    "./routes/layeredMdw/nesting/[tenant]/[environment]/[id].tsx": $34,
+    "./routes/layeredMdw/nesting/[tenant]/[environment]/_middleware.ts": $35,
+    "./routes/layeredMdw/nesting/[tenant]/_middleware.ts": $36,
+    "./routes/layeredMdw/nesting/_middleware.ts": $37,
+    "./routes/middleware-error-handler/_middleware.ts": $38,
+    "./routes/middleware-error-handler/index.tsx": $39,
+    "./routes/middleware_root.ts": $40,
+    "./routes/movies/[foo].json.ts": $41,
+    "./routes/movies/[foo]@[bar].ts": $42,
+    "./routes/not_found.ts": $43,
+    "./routes/params.tsx": $44,
+    "./routes/props/[id].tsx": $45,
+    "./routes/route-groups-islands/index.tsx": $46,
+    "./routes/route-groups/(bar)/(baz)/_layout.tsx": $47,
+    "./routes/route-groups/(bar)/(baz)/baz.tsx": $48,
+    "./routes/route-groups/(bar)/_layout.tsx": $49,
+    "./routes/route-groups/(bar)/bar.tsx": $50,
+    "./routes/route-groups/(bar)/boof/index.tsx": $51,
+    "./routes/route-groups/(foo)/_layout.tsx": $52,
+    "./routes/route-groups/(foo)/index.tsx": $53,
+    "./routes/signal_shared.tsx": $54,
+    "./routes/state-in-props/_middleware.ts": $55,
+    "./routes/state-in-props/index.tsx": $56,
+    "./routes/state-middleware/_middleware.ts": $57,
+    "./routes/state-middleware/foo/_middleware.ts": $58,
+    "./routes/state-middleware/foo/index.tsx": $59,
+    "./routes/static.tsx": $60,
+    "./routes/status_overwrite.tsx": $61,
+    "./routes/umlaut-√§√∂√º√ü.tsx": $62,
+    "./routes/wildcard.tsx": $63,
   },
   islands: {
     "./islands/Counter.tsx": $$0,
-    "./islands/MultipleCounters.tsx": $$1,
-    "./islands/ReturningNull.tsx": $$2,
-    "./islands/RootFragment.tsx": $$3,
-    "./islands/RootFragmentWithConditionalFirst.tsx": $$4,
-    "./islands/Test.tsx": $$5,
-    "./islands/folder/Counter.tsx": $$6,
-    "./islands/folder/subfolder/Counter.tsx": $$7,
-    "./islands/kebab-case-counter-test.tsx": $$8,
+    "./islands/Greeter.tsx": $$1,
+    "./islands/MultipleCounters.tsx": $$2,
+    "./islands/ReturningNull.tsx": $$3,
+    "./islands/RootFragment.tsx": $$4,
+    "./islands/RootFragmentWithConditionalFirst.tsx": $$5,
+    "./islands/StringEventIsland.tsx": $$6,
+    "./islands/Test.tsx": $$7,
+    "./islands/folder/Counter.tsx": $$8,
+    "./islands/folder/subfolder/Counter.tsx": $$9,
+    "./islands/kebab-case-counter-test.tsx": $$10,
+    "./routes/route-groups-islands/(_islands)/Counter.tsx": $$11,
+    "./routes/route-groups-islands/(_islands)/invalid.tsx": $$12,
   },
   baseUrl: import.meta.url,
 };
diff --git a/tests/fixture/islands/Greeter.tsx b/tests/fixture/islands/Greeter.tsx
new file mode 100644
index 00000000000..5f679d94615
--- /dev/null
+++ b/tests/fixture/islands/Greeter.tsx
@@ -0,0 +1,3 @@
+export default function Greeter(props: { site: string }) {
+  return <h1>{props.site}</h1>;
+}
diff --git a/tests/fixture/islands/StringEventIsland.tsx b/tests/fixture/islands/StringEventIsland.tsx
new file mode 100644
index 00000000000..7d07d1d1e35
--- /dev/null
+++ b/tests/fixture/islands/StringEventIsland.tsx
@@ -0,0 +1,9 @@
+export default function StringEventIsland() {
+  return (
+    <button // @ts-ignore - we don't officially recommend this, but lots of
+     // apps pre Fresh 1.2 use string based click handlers.
+    onClick="document.querySelector('p').textContent = 'it works'">
+      click me
+    </button>
+  );
+}
diff --git a/tests/fixture/main_tls.ts b/tests/fixture/main_tls.ts
new file mode 100644
index 00000000000..c95b489a643
--- /dev/null
+++ b/tests/fixture/main_tls.ts
@@ -0,0 +1,12 @@
+/// <reference no-default-lib="true" />
+/// <reference lib="dom" />
+/// <reference lib="dom.iterable" />
+/// <reference lib="dom.asynciterable" />
+/// <reference lib="deno.ns" />
+
+import { start } from "$fresh/server.ts";
+import routes from "./fresh.gen.ts";
+import options from "./options.ts";
+
+// this just exists to function as a type check to assert that we can actually pass a key and cert in
+await start(routes, { ...options, key: "test", cert: "test" });
diff --git a/tests/fixture/routes/_404.tsx b/tests/fixture/routes/_404.tsx
index 48279ee2faa..ded1266894c 100644
--- a/tests/fixture/routes/_404.tsx
+++ b/tests/fixture/routes/_404.tsx
@@ -1,10 +1,19 @@
 import { UnknownPageProps } from "$fresh/server.ts";
 
-export default function NotFoundPage({ data, url }: UnknownPageProps) {
+type Data = { hello: string };
+type State = { root: string };
+
+export default function NotFoundPage(
+  { data, state, url }: UnknownPageProps<Data | undefined, State>,
+) {
+  // Checks that we have the correct type for state
+  state.root satisfies string;
+
   return (
     <>
       <p>404 not found: {url.pathname}</p>
       {data?.hello && <p>Hello {data.hello}</p>}
+      <p>State root: {state.root}</p>
     </>
   );
 }
diff --git a/tests/fixture/routes/_app.tsx b/tests/fixture/routes/_app.tsx
index 47de869666d..3ab42b21d0e 100644
--- a/tests/fixture/routes/_app.tsx
+++ b/tests/fixture/routes/_app.tsx
@@ -1,11 +1,16 @@
 import { Head } from "$fresh/runtime.ts";
 import { AppProps } from "$fresh/server.ts";
 
-export default function App(props: AppProps) {
+export type TestState = {
+  root: string;
+  stateInProps: string;
+};
+
+export default function App(props: AppProps<unknown, TestState>) {
   const statefulValue = props.state?.root === "root_mw"
     ? "The freshest framework!"
     : "";
-  const specialCase = props.state?.stateInProps as string;
+  const specialCase = props.state?.stateInProps;
   return (
     <>
       <Head>
diff --git a/tests/fixture/routes/admin/[site].tsx b/tests/fixture/routes/admin/[site].tsx
new file mode 100644
index 00000000000..5faa569e682
--- /dev/null
+++ b/tests/fixture/routes/admin/[site].tsx
@@ -0,0 +1,9 @@
+import { Handler, PageProps } from "$fresh/server.ts";
+import Greeter from "../../islands/Greeter.tsx";
+
+export const handler: Handler = (_req, ctx) =>
+  ctx.render({ site: ctx.params.site });
+
+export default function Component(props: PageProps<{ site: string }>) {
+  return <Greeter site={props.data?.site ?? "not working"} />;
+}
diff --git a/tests/fixture/routes/event_handler_string.tsx b/tests/fixture/routes/event_handler_string.tsx
new file mode 100644
index 00000000000..4adab80b960
--- /dev/null
+++ b/tests/fixture/routes/event_handler_string.tsx
@@ -0,0 +1,12 @@
+export default function Page() {
+  return (
+    <div>
+      <p>it doesn't work</p>
+      <button // @ts-ignore - we don't officially recommend this, but lots of
+       // apps pre Fresh 1.2 use string based click handlers.
+      onClick="document.querySelector('p').textContent = 'it works'">
+        click me
+      </button>
+    </div>
+  );
+}
diff --git a/tests/fixture/routes/event_handler_string_island.tsx b/tests/fixture/routes/event_handler_string_island.tsx
new file mode 100644
index 00000000000..ed73e35670c
--- /dev/null
+++ b/tests/fixture/routes/event_handler_string_island.tsx
@@ -0,0 +1,10 @@
+import StringEventIsland from "$fresh/tests/fixture/islands/StringEventIsland.tsx";
+
+export default function Page() {
+  return (
+    <div>
+      <p>it doesn't work</p>
+      <StringEventIsland />
+    </div>
+  );
+}
diff --git a/tests/fixture/routes/movies/[foo].json.ts b/tests/fixture/routes/movies/[foo].json.ts
new file mode 100644
index 00000000000..42171725027
--- /dev/null
+++ b/tests/fixture/routes/movies/[foo].json.ts
@@ -0,0 +1,3 @@
+import { Handler } from "$fresh/server.ts";
+
+export const handler: Handler = () => new Response("it works");
diff --git a/tests/fixture/routes/movies/[foo]@[bar].ts b/tests/fixture/routes/movies/[foo]@[bar].ts
new file mode 100644
index 00000000000..42171725027
--- /dev/null
+++ b/tests/fixture/routes/movies/[foo]@[bar].ts
@@ -0,0 +1,3 @@
+import { Handler } from "$fresh/server.ts";
+
+export const handler: Handler = () => new Response("it works");
diff --git a/tests/fixture/routes/route-groups-islands/(_islands)/Counter.tsx b/tests/fixture/routes/route-groups-islands/(_islands)/Counter.tsx
new file mode 100644
index 00000000000..714ac587008
--- /dev/null
+++ b/tests/fixture/routes/route-groups-islands/(_islands)/Counter.tsx
@@ -0,0 +1,15 @@
+import { useSignal } from "@preact/signals";
+
+export default function Counter() {
+  const signal = useSignal(0);
+  return (
+    <div>
+      <p>{signal}</p>
+      <button
+        onClick={() => signal.value += 1}
+      >
+        +1
+      </button>
+    </div>
+  );
+}
diff --git a/tests/fixture/routes/route-groups-islands/(_islands)/invalid.tsx b/tests/fixture/routes/route-groups-islands/(_islands)/invalid.tsx
new file mode 100644
index 00000000000..b1d72cce241
--- /dev/null
+++ b/tests/fixture/routes/route-groups-islands/(_islands)/invalid.tsx
@@ -0,0 +1,3 @@
+export default function InvalidPage() {
+  return <p>This should not be visible</p>;
+}
diff --git a/tests/fixture/routes/route-groups-islands/index.tsx b/tests/fixture/routes/route-groups-islands/index.tsx
new file mode 100644
index 00000000000..4e18cc3c48e
--- /dev/null
+++ b/tests/fixture/routes/route-groups-islands/index.tsx
@@ -0,0 +1,10 @@
+import Counter from "./(_islands)/Counter.tsx";
+
+export default function GroupPage() {
+  return (
+    <div>
+      <h1>Group page</h1>
+      <Counter />
+    </div>
+  );
+}
diff --git a/tests/fixture/routes/route-groups-islands/sub/(_other)/index.tsx b/tests/fixture/routes/route-groups-islands/sub/(_other)/index.tsx
new file mode 100644
index 00000000000..b1d72cce241
--- /dev/null
+++ b/tests/fixture/routes/route-groups-islands/sub/(_other)/index.tsx
@@ -0,0 +1,3 @@
+export default function InvalidPage() {
+  return <p>This should not be visible</p>;
+}
diff --git a/tests/fixture/routes/route-groups/(bar)/(baz)/_layout.tsx b/tests/fixture/routes/route-groups/(bar)/(baz)/_layout.tsx
new file mode 100644
index 00000000000..d408c04ae1e
--- /dev/null
+++ b/tests/fixture/routes/route-groups/(bar)/(baz)/_layout.tsx
@@ -0,0 +1,10 @@
+import { LayoutProps } from "$fresh/server.ts";
+
+export default function BarLayout({ Component }: LayoutProps) {
+  return (
+    <div>
+      <p class="baz-layout">Baz layout</p>
+      <Component />
+    </div>
+  );
+}
diff --git a/tests/fixture/routes/route-groups/(bar)/(baz)/baz.tsx b/tests/fixture/routes/route-groups/(bar)/(baz)/baz.tsx
new file mode 100644
index 00000000000..95045329bc4
--- /dev/null
+++ b/tests/fixture/routes/route-groups/(bar)/(baz)/baz.tsx
@@ -0,0 +1,3 @@
+export default function BazPage() {
+  return <p class="baz-page">Baz page</p>;
+}
diff --git a/tests/fixture/routes/route-groups/(bar)/_layout.tsx b/tests/fixture/routes/route-groups/(bar)/_layout.tsx
new file mode 100644
index 00000000000..b5bc0417bb2
--- /dev/null
+++ b/tests/fixture/routes/route-groups/(bar)/_layout.tsx
@@ -0,0 +1,10 @@
+import { LayoutProps } from "$fresh/server.ts";
+
+export default function BarLayout({ Component }: LayoutProps) {
+  return (
+    <div>
+      <p class="bar-layout">Bar layout</p>
+      <Component />
+    </div>
+  );
+}
diff --git a/tests/fixture/routes/route-groups/(bar)/bar.tsx b/tests/fixture/routes/route-groups/(bar)/bar.tsx
new file mode 100644
index 00000000000..b4ce304b5f5
--- /dev/null
+++ b/tests/fixture/routes/route-groups/(bar)/bar.tsx
@@ -0,0 +1,3 @@
+export default function BarPage() {
+  return <p class="bar-page">Bar page</p>;
+}
diff --git a/tests/fixture/routes/route-groups/(bar)/boof/index.tsx b/tests/fixture/routes/route-groups/(bar)/boof/index.tsx
new file mode 100644
index 00000000000..b466aebe587
--- /dev/null
+++ b/tests/fixture/routes/route-groups/(bar)/boof/index.tsx
@@ -0,0 +1,3 @@
+export default function Boof() {
+  return <p class="boof">Boof Page</p>;
+}
diff --git a/tests/fixture/routes/route-groups/(foo)/_layout.tsx b/tests/fixture/routes/route-groups/(foo)/_layout.tsx
new file mode 100644
index 00000000000..13b10bb7aa0
--- /dev/null
+++ b/tests/fixture/routes/route-groups/(foo)/_layout.tsx
@@ -0,0 +1,10 @@
+import { LayoutProps } from "$fresh/server.ts";
+
+export default function FooLayout({ Component }: LayoutProps) {
+  return (
+    <div>
+      <p class="foo-layout">Foo layout</p>
+      <Component />
+    </div>
+  );
+}
diff --git a/tests/fixture/routes/route-groups/(foo)/index.tsx b/tests/fixture/routes/route-groups/(foo)/index.tsx
new file mode 100644
index 00000000000..c575ed9a278
--- /dev/null
+++ b/tests/fixture/routes/route-groups/(foo)/index.tsx
@@ -0,0 +1,3 @@
+export default function FooPage() {
+  return <p class="foo-page">Foo page</p>;
+}
diff --git a/tests/fixture/routes/signal_shared.tsx b/tests/fixture/routes/signal_shared.tsx
new file mode 100644
index 00000000000..a591e28ded2
--- /dev/null
+++ b/tests/fixture/routes/signal_shared.tsx
@@ -0,0 +1,12 @@
+import { useSignal } from "@preact/signals";
+import Counter from "$fresh/tests/fixture/islands/Counter.tsx";
+
+export default function SignalShared() {
+  const sig = useSignal(1);
+  return (
+    <div>
+      <Counter id="counter-1" count={sig} />
+      <Counter id="counter-2" count={sig} />
+    </div>
+  );
+}
diff --git a/tests/fixture/routes/state-in-props/_middleware.ts b/tests/fixture/routes/state-in-props/_middleware.ts
index 66ed5ddf4b8..2fb9b8f5a47 100644
--- a/tests/fixture/routes/state-in-props/_middleware.ts
+++ b/tests/fixture/routes/state-in-props/_middleware.ts
@@ -1,8 +1,9 @@
 import { MiddlewareHandlerContext } from "$fresh/server.ts";
+import { TestState } from "../_app.tsx";
 
 export async function handler(
   _req: Request,
-  ctx: MiddlewareHandlerContext,
+  ctx: MiddlewareHandlerContext<TestState>,
 ) {
   ctx.state.stateInProps = "look, i am set from middleware";
   const resp = await ctx.next();
diff --git a/tests/fixture/routes/state-in-props/index.tsx b/tests/fixture/routes/state-in-props/index.tsx
index 80b6014c71c..75e3e9e27db 100644
--- a/tests/fixture/routes/state-in-props/index.tsx
+++ b/tests/fixture/routes/state-in-props/index.tsx
@@ -1,4 +1,5 @@
 import { Handlers, PageProps } from "$fresh/server.ts";
+import { TestState } from "../_app.tsx";
 
 export const handler: Handlers<boolean> = {
   GET(_, ctx) {
@@ -7,8 +8,8 @@ export const handler: Handlers<boolean> = {
   },
 };
 
-export default function Page(props: PageProps<boolean>) {
-  let valueFromState = props.state.stateInProps as string;
+export default function Page(props: PageProps<boolean, TestState>) {
+  let valueFromState = props.state.stateInProps;
   if (props.data) {
     valueFromState = valueFromState.toUpperCase();
   }
diff --git a/tests/fixture/routes/state-middleware/_middleware.ts b/tests/fixture/routes/state-middleware/_middleware.ts
new file mode 100644
index 00000000000..48fa7ac2530
--- /dev/null
+++ b/tests/fixture/routes/state-middleware/_middleware.ts
@@ -0,0 +1,6 @@
+import { MiddlewareHandlerContext } from "$fresh/server.ts";
+
+export const handler = (_req: Request, ctx: MiddlewareHandlerContext) => {
+  ctx.state = { handler1: "it works" };
+  return ctx.next();
+};
diff --git a/tests/fixture/routes/state-middleware/foo/_middleware.ts b/tests/fixture/routes/state-middleware/foo/_middleware.ts
new file mode 100644
index 00000000000..65475c28cfb
--- /dev/null
+++ b/tests/fixture/routes/state-middleware/foo/_middleware.ts
@@ -0,0 +1,6 @@
+import { MiddlewareHandlerContext } from "$fresh/server.ts";
+
+export const handler = (_req: Request, ctx: MiddlewareHandlerContext) => {
+  ctx.state.handler2 = "it works";
+  return ctx.next();
+};
diff --git a/tests/fixture/routes/state-middleware/foo/index.tsx b/tests/fixture/routes/state-middleware/foo/index.tsx
new file mode 100644
index 00000000000..a88734504f3
--- /dev/null
+++ b/tests/fixture/routes/state-middleware/foo/index.tsx
@@ -0,0 +1,10 @@
+import { HandlerContext, PageProps } from "$fresh/server.ts";
+
+export const handler = (_req: Request, ctx: HandlerContext) => {
+  ctx.state.handler3 = "it works";
+  return ctx.render();
+};
+
+export default function Page(props: PageProps) {
+  return <pre>{JSON.stringify(props.state,null,2)}</pre>;
+}
diff --git a/tests/fixture_async_app/dev.ts b/tests/fixture_async_app/dev.ts
new file mode 100644
index 00000000000..2d85d6c183c
--- /dev/null
+++ b/tests/fixture_async_app/dev.ts
@@ -0,0 +1,5 @@
+#!/usr/bin/env -S deno run -A --watch=static/,routes/
+
+import dev from "$fresh/dev.ts";
+
+await dev(import.meta.url, "./main.ts");
diff --git a/tests/fixture_async_app/fresh.gen.ts b/tests/fixture_async_app/fresh.gen.ts
new file mode 100644
index 00000000000..e956af3ce18
--- /dev/null
+++ b/tests/fixture_async_app/fresh.gen.ts
@@ -0,0 +1,19 @@
+// DO NOT EDIT. This file is generated by Fresh.
+// This file SHOULD be checked into source version control.
+// This file is automatically updated during development when running `dev.ts`.
+
+import * as $0 from "./routes/_app.tsx";
+import * as $1 from "./routes/_layout.tsx";
+import * as $2 from "./routes/index.tsx";
+
+const manifest = {
+  routes: {
+    "./routes/_app.tsx": $0,
+    "./routes/_layout.tsx": $1,
+    "./routes/index.tsx": $2,
+  },
+  islands: {},
+  baseUrl: import.meta.url,
+};
+
+export default manifest;
diff --git a/tests/fixture_async_app/main.ts b/tests/fixture_async_app/main.ts
new file mode 100644
index 00000000000..0f15e8defa4
--- /dev/null
+++ b/tests/fixture_async_app/main.ts
@@ -0,0 +1,10 @@
+/// <reference no-default-lib="true" />
+/// <reference lib="dom" />
+/// <reference lib="dom.asynciterable" />
+/// <reference lib="deno.ns" />
+/// <reference lib="deno.unstable" />
+
+import { start } from "$fresh/server.ts";
+import manifest from "./fresh.gen.ts";
+
+await start(manifest);
diff --git a/tests/fixture_async_app/routes/_app.tsx b/tests/fixture_async_app/routes/_app.tsx
new file mode 100644
index 00000000000..48ad41c4e90
--- /dev/null
+++ b/tests/fixture_async_app/routes/_app.tsx
@@ -0,0 +1,25 @@
+import { delay } from "$std/async/delay.ts";
+import { AppContext } from "$fresh/src/server/types.ts";
+
+export default async function App(req: Request, ctx: AppContext) {
+  await delay(100);
+
+  return (
+    <html lang="fr">
+      <head>
+        <meta charSet="utf-8" />
+        <meta
+          name="viewport"
+          content="width=device-width, initial-scale=1.0"
+        />
+        <title>fresh title</title>
+      </head>
+      <body>
+        <div class="app">
+          App template
+          <ctx.Component />
+        </div>
+      </body>
+    </html>
+  );
+}
diff --git a/tests/fixture_async_app/routes/_layout.tsx b/tests/fixture_async_app/routes/_layout.tsx
new file mode 100644
index 00000000000..54c491e4ac5
--- /dev/null
+++ b/tests/fixture_async_app/routes/_layout.tsx
@@ -0,0 +1,15 @@
+import { LayoutContext } from "$fresh/server.ts";
+import { delay } from "$std/async/delay.ts";
+
+export default async function AsyncLayout(
+  req: Request,
+  ctx: LayoutContext,
+) {
+  await delay(10);
+  return (
+    <div class="layout">
+      <p>Async layout</p>
+      <ctx.Component />
+    </div>
+  );
+}
diff --git a/tests/fixture_async_app/routes/index.tsx b/tests/fixture_async_app/routes/index.tsx
new file mode 100644
index 00000000000..991e1f54cd6
--- /dev/null
+++ b/tests/fixture_async_app/routes/index.tsx
@@ -0,0 +1,8 @@
+// deno-lint-ignore require-await
+export default async function Home() {
+  return (
+    <div class="page">
+      Home
+    </div>
+  );
+}
diff --git a/tests/fixture_build/deno.json b/tests/fixture_build/deno.json
new file mode 100644
index 00000000000..9d782057e20
--- /dev/null
+++ b/tests/fixture_build/deno.json
@@ -0,0 +1,15 @@
+{
+  "lock": false,
+  "imports": {
+    "$fresh/": "../../",
+    "preact": "https://esm.sh/preact@10.15.1",
+    "preact/": "https://esm.sh/preact@10.15.1/",
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.2.0",
+    "@preact/signals": "https://esm.sh/*@preact/signals@1.1.3",
+    "@preact/signals-core": "https://esm.sh/@preact/signals-core@1.2.3"
+  },
+  "compilerOptions": {
+    "jsx": "react-jsx",
+    "jsxImportSource": "preact"
+  }
+}
diff --git a/tests/fixture_build/dev.ts b/tests/fixture_build/dev.ts
new file mode 100755
index 00000000000..2d85d6c183c
--- /dev/null
+++ b/tests/fixture_build/dev.ts
@@ -0,0 +1,5 @@
+#!/usr/bin/env -S deno run -A --watch=static/,routes/
+
+import dev from "$fresh/dev.ts";
+
+await dev(import.meta.url, "./main.ts");
diff --git a/tests/fixture_build/fresh.gen.ts b/tests/fixture_build/fresh.gen.ts
new file mode 100644
index 00000000000..fa16c42d32f
--- /dev/null
+++ b/tests/fixture_build/fresh.gen.ts
@@ -0,0 +1,18 @@
+// DO NOT EDIT. This file is generated by Fresh.
+// This file SHOULD be checked into source version control.
+// This file is automatically updated during development when running `dev.ts`.
+
+import * as $0 from "./routes/index.tsx";
+import * as $$0 from "./islands/Counter.tsx";
+
+const manifest = {
+  routes: {
+    "./routes/index.tsx": $0,
+  },
+  islands: {
+    "./islands/Counter.tsx": $$0,
+  },
+  baseUrl: import.meta.url,
+};
+
+export default manifest;
diff --git a/tests/fixture_build/islands/Counter.tsx b/tests/fixture_build/islands/Counter.tsx
new file mode 100644
index 00000000000..5f015b1ee1f
--- /dev/null
+++ b/tests/fixture_build/islands/Counter.tsx
@@ -0,0 +1,22 @@
+import type { Signal } from "@preact/signals";
+import { IS_BROWSER } from "$fresh/runtime.ts";
+
+interface CounterProps {
+  count: Signal<number>;
+  id: string;
+}
+
+export default function Counter(props: CounterProps) {
+  return (
+    <div id={props.id}>
+      <p>{props.count}</p>
+      <button
+        id={`b-${props.id}`}
+        onClick={() => props.count.value += 1}
+        disabled={!IS_BROWSER}
+      >
+        +1
+      </button>
+    </div>
+  );
+}
diff --git a/tests/fixture_build/main.ts b/tests/fixture_build/main.ts
new file mode 100644
index 00000000000..bb97cc80de2
--- /dev/null
+++ b/tests/fixture_build/main.ts
@@ -0,0 +1,10 @@
+/// <reference no-default-lib="true" />
+/// <reference lib="dom" />
+/// <reference lib="dom.iterable" />
+/// <reference lib="dom.asynciterable" />
+/// <reference lib="deno.ns" />
+
+import { start } from "$fresh/server.ts";
+import routes from "./fresh.gen.ts";
+
+await start(routes);
diff --git a/tests/fixture_build/routes/index.tsx b/tests/fixture_build/routes/index.tsx
new file mode 100644
index 00000000000..36fc6506e87
--- /dev/null
+++ b/tests/fixture_build/routes/index.tsx
@@ -0,0 +1,11 @@
+import { useSignal } from "@preact/signals";
+import Counter from "../islands/Counter.tsx";
+
+export default function Home() {
+  const signal = useSignal(0);
+  return (
+    <div>
+      <Counter id="counter" count={signal} />
+    </div>
+  );
+}
diff --git a/tests/fixture_custom_500/deno.json b/tests/fixture_custom_500/deno.json
index 04ee3099b1b..2b2fa78e147 100644
--- a/tests/fixture_custom_500/deno.json
+++ b/tests/fixture_custom_500/deno.json
@@ -4,7 +4,7 @@
     "$fresh/": "../../",
     "preact": "https://esm.sh/preact@10.15.1",
     "preact/": "https://esm.sh/preact@10.15.1/",
-    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.2.0"
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.2.1"
   },
   "compilerOptions": {
     "jsx": "react-jsx",
diff --git a/tests/fixture_custom_500/fresh.gen.ts b/tests/fixture_custom_500/fresh.gen.ts
index b5f168f3d37..f4af4a31b86 100644
--- a/tests/fixture_custom_500/fresh.gen.ts
+++ b/tests/fixture_custom_500/fresh.gen.ts
@@ -1,4 +1,4 @@
-// DO NOT EDIT. This file is generated by fresh.
+// DO NOT EDIT. This file is generated by Fresh.
 // This file SHOULD be checked into source version control.
 // This file is automatically updated during development when running `dev.ts`.
 
diff --git a/tests/fixture_define_helpers/dev.ts b/tests/fixture_define_helpers/dev.ts
new file mode 100755
index 00000000000..2d85d6c183c
--- /dev/null
+++ b/tests/fixture_define_helpers/dev.ts
@@ -0,0 +1,5 @@
+#!/usr/bin/env -S deno run -A --watch=static/,routes/
+
+import dev from "$fresh/dev.ts";
+
+await dev(import.meta.url, "./main.ts");
diff --git a/tests/fixture_define_helpers/fresh.gen.ts b/tests/fixture_define_helpers/fresh.gen.ts
new file mode 100644
index 00000000000..e956af3ce18
--- /dev/null
+++ b/tests/fixture_define_helpers/fresh.gen.ts
@@ -0,0 +1,19 @@
+// DO NOT EDIT. This file is generated by Fresh.
+// This file SHOULD be checked into source version control.
+// This file is automatically updated during development when running `dev.ts`.
+
+import * as $0 from "./routes/_app.tsx";
+import * as $1 from "./routes/_layout.tsx";
+import * as $2 from "./routes/index.tsx";
+
+const manifest = {
+  routes: {
+    "./routes/_app.tsx": $0,
+    "./routes/_layout.tsx": $1,
+    "./routes/index.tsx": $2,
+  },
+  islands: {},
+  baseUrl: import.meta.url,
+};
+
+export default manifest;
diff --git a/tests/fixture_define_helpers/main.ts b/tests/fixture_define_helpers/main.ts
new file mode 100644
index 00000000000..dedce9cbb04
--- /dev/null
+++ b/tests/fixture_define_helpers/main.ts
@@ -0,0 +1,10 @@
+/// <reference no-default-lib="true" />
+/// <reference lib="dom" />
+/// <reference lib="dom.iterable" />
+/// <reference lib="dom.asynciterable" />
+/// <reference lib="deno.ns" />
+
+import { start } from "$fresh/server.ts";
+import manifest from "./fresh.gen.ts";
+
+await start(manifest);
diff --git a/tests/fixture_define_helpers/other/state.ts b/tests/fixture_define_helpers/other/state.ts
new file mode 100644
index 00000000000..3bd5a0d3a0f
--- /dev/null
+++ b/tests/fixture_define_helpers/other/state.ts
@@ -0,0 +1 @@
+export type State = { something: string };
diff --git a/tests/fixture_define_helpers/routes/_app.tsx b/tests/fixture_define_helpers/routes/_app.tsx
new file mode 100644
index 00000000000..fbf1a219a19
--- /dev/null
+++ b/tests/fixture_define_helpers/routes/_app.tsx
@@ -0,0 +1,11 @@
+import { defineApp } from "$fresh/server.ts";
+import { State } from "../other/state.ts";
+
+export default defineApp<State>((req, ctx) => {
+  ctx.state.something = "foo";
+  return (
+    <div class="app">
+      <ctx.Component />
+    </div>
+  );
+});
diff --git a/tests/fixture_define_helpers/routes/_layout.tsx b/tests/fixture_define_helpers/routes/_layout.tsx
new file mode 100644
index 00000000000..3d4e5a0d41c
--- /dev/null
+++ b/tests/fixture_define_helpers/routes/_layout.tsx
@@ -0,0 +1,13 @@
+import { defineLayout } from "$fresh/server.ts";
+import { State } from "../other/state.ts";
+
+export default defineLayout<State>((req, ctx) => {
+  return (
+    <div class="layout">
+      <p>
+        Layout: {ctx.state.something === "foo" ? "it works" : "it doesn't work"}
+      </p>
+      <ctx.Component />
+    </div>
+  );
+});
diff --git a/tests/fixture_define_helpers/routes/index.tsx b/tests/fixture_define_helpers/routes/index.tsx
new file mode 100644
index 00000000000..bde2b5da4ff
--- /dev/null
+++ b/tests/fixture_define_helpers/routes/index.tsx
@@ -0,0 +1,14 @@
+import { defineRoute } from "$fresh/server.ts";
+import { delay } from "$fresh/tests/deps.ts";
+import { State } from "../other/state.ts";
+
+export default defineRoute<State>(async (req, ctx) => {
+  await delay(10);
+  return (
+    <div class="page">
+      <p>
+        Page: {ctx.state.something === "foo" ? "it works" : "it doesn't work"}
+      </p>
+    </div>
+  );
+});
diff --git a/tests/fixture_error/deno.json b/tests/fixture_error/deno.json
index 04ee3099b1b..2b2fa78e147 100644
--- a/tests/fixture_error/deno.json
+++ b/tests/fixture_error/deno.json
@@ -4,7 +4,7 @@
     "$fresh/": "../../",
     "preact": "https://esm.sh/preact@10.15.1",
     "preact/": "https://esm.sh/preact@10.15.1/",
-    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.2.0"
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.2.1"
   },
   "compilerOptions": {
     "jsx": "react-jsx",
diff --git a/tests/fixture_error/fresh.gen.ts b/tests/fixture_error/fresh.gen.ts
index e24e6727c04..cbf3ced97f8 100644
--- a/tests/fixture_error/fresh.gen.ts
+++ b/tests/fixture_error/fresh.gen.ts
@@ -1,4 +1,4 @@
-// DO NOT EDIT. This file is generated by fresh.
+// DO NOT EDIT. This file is generated by Fresh.
 // This file SHOULD be checked into source version control.
 // This file is automatically updated during development when running `dev.ts`.
 
diff --git a/tests/fixture_explicit_app/dev.ts b/tests/fixture_explicit_app/dev.ts
new file mode 100644
index 00000000000..2d85d6c183c
--- /dev/null
+++ b/tests/fixture_explicit_app/dev.ts
@@ -0,0 +1,5 @@
+#!/usr/bin/env -S deno run -A --watch=static/,routes/
+
+import dev from "$fresh/dev.ts";
+
+await dev(import.meta.url, "./main.ts");
diff --git a/tests/fixture_explicit_app/fresh.gen.ts b/tests/fixture_explicit_app/fresh.gen.ts
new file mode 100644
index 00000000000..3032075c44c
--- /dev/null
+++ b/tests/fixture_explicit_app/fresh.gen.ts
@@ -0,0 +1,21 @@
+// DO NOT EDIT. This file is generated by Fresh.
+// This file SHOULD be checked into source version control.
+// This file is automatically updated during development when running `dev.ts`.
+
+import * as $0 from "./routes/_app.tsx";
+import * as $1 from "./routes/head.tsx";
+import * as $2 from "./routes/index.tsx";
+import * as $3 from "./routes/title.tsx";
+
+const manifest = {
+  routes: {
+    "./routes/_app.tsx": $0,
+    "./routes/head.tsx": $1,
+    "./routes/index.tsx": $2,
+    "./routes/title.tsx": $3,
+  },
+  islands: {},
+  baseUrl: import.meta.url,
+};
+
+export default manifest;
diff --git a/tests/fixture_explicit_app/main.ts b/tests/fixture_explicit_app/main.ts
new file mode 100644
index 00000000000..0f15e8defa4
--- /dev/null
+++ b/tests/fixture_explicit_app/main.ts
@@ -0,0 +1,10 @@
+/// <reference no-default-lib="true" />
+/// <reference lib="dom" />
+/// <reference lib="dom.asynciterable" />
+/// <reference lib="deno.ns" />
+/// <reference lib="deno.unstable" />
+
+import { start } from "$fresh/server.ts";
+import manifest from "./fresh.gen.ts";
+
+await start(manifest);
diff --git a/tests/fixture_explicit_app/routes/_app.tsx b/tests/fixture_explicit_app/routes/_app.tsx
new file mode 100644
index 00000000000..14980273f79
--- /dev/null
+++ b/tests/fixture_explicit_app/routes/_app.tsx
@@ -0,0 +1,25 @@
+import { AppProps, Handler } from "$fresh/server.ts";
+
+export const handler: Handler = (_req, ctx) => {
+  ctx.state.lang = "de";
+  return ctx.render();
+};
+
+export default function App(
+  { Component, state }: AppProps<unknown, { lang: string }>,
+) {
+  return (
+    <html lang={state.lang}>
+      <head>
+        <meta charSet="utf-8" />
+        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
+        <title>fresh title</title>
+      </head>
+      <body>
+        <div class="inner-body">
+          <Component />
+        </div>
+      </body>
+    </html>
+  );
+}
diff --git a/tests/fixture_explicit_app/routes/head.tsx b/tests/fixture_explicit_app/routes/head.tsx
new file mode 100644
index 00000000000..82e2fdd193e
--- /dev/null
+++ b/tests/fixture_explicit_app/routes/head.tsx
@@ -0,0 +1,12 @@
+import { Head } from "$fresh/runtime.ts";
+
+export default function Home() {
+  return (
+    <div class="page">
+      <Head>
+        <meta name="fresh" content="test" />
+      </Head>
+      /head
+    </div>
+  );
+}
diff --git a/tests/fixture_explicit_app/routes/index.tsx b/tests/fixture_explicit_app/routes/index.tsx
new file mode 100644
index 00000000000..7f6cc82f7da
--- /dev/null
+++ b/tests/fixture_explicit_app/routes/index.tsx
@@ -0,0 +1,7 @@
+export default function Home() {
+  return (
+    <div class="page">
+      Home
+    </div>
+  );
+}
diff --git a/tests/fixture_explicit_app/routes/title.tsx b/tests/fixture_explicit_app/routes/title.tsx
new file mode 100644
index 00000000000..cdf4e7767c6
--- /dev/null
+++ b/tests/fixture_explicit_app/routes/title.tsx
@@ -0,0 +1,12 @@
+import { Head } from "$fresh/runtime.ts";
+
+export default function Home() {
+  return (
+    <div class="page">
+      <Head>
+        <title>foo bar</title>
+      </Head>
+      /title
+    </div>
+  );
+}
diff --git a/tests/fixture_invalid_handlers/deno.json b/tests/fixture_invalid_handlers/deno.json
index 04ee3099b1b..2b2fa78e147 100644
--- a/tests/fixture_invalid_handlers/deno.json
+++ b/tests/fixture_invalid_handlers/deno.json
@@ -4,7 +4,7 @@
     "$fresh/": "../../",
     "preact": "https://esm.sh/preact@10.15.1",
     "preact/": "https://esm.sh/preact@10.15.1/",
-    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.2.0"
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.2.1"
   },
   "compilerOptions": {
     "jsx": "react-jsx",
diff --git a/tests/fixture_invalid_handlers/fresh.gen.ts b/tests/fixture_invalid_handlers/fresh.gen.ts
index 799a93fba0a..b321c0e078e 100644
--- a/tests/fixture_invalid_handlers/fresh.gen.ts
+++ b/tests/fixture_invalid_handlers/fresh.gen.ts
@@ -1,4 +1,4 @@
-// DO NOT EDIT. This file is generated by fresh.
+// DO NOT EDIT. This file is generated by Fresh.
 // This file SHOULD be checked into source version control.
 // This file is automatically updated during development when running `dev.ts`.
 
diff --git a/tests/fixture_invalid_handlers/main.ts b/tests/fixture_invalid_handlers/main.ts
index dedce9cbb04..98cd1afab40 100644
--- a/tests/fixture_invalid_handlers/main.ts
+++ b/tests/fixture_invalid_handlers/main.ts
@@ -7,4 +7,5 @@
 import { start } from "$fresh/server.ts";
 import manifest from "./fresh.gen.ts";
 
+// @ts-expect-error: the index.tsx file declares a "handlers" but no "handler", to simulate a typo or confusion on the user's part
 await start(manifest);
diff --git a/tests/fixture_island_nesting/deno.json b/tests/fixture_island_nesting/deno.json
index 30d3b607ded..2ba46538ff1 100644
--- a/tests/fixture_island_nesting/deno.json
+++ b/tests/fixture_island_nesting/deno.json
@@ -7,7 +7,7 @@
     "$fresh/": "../../",
     "preact": "https://esm.sh/preact@10.16.0",
     "preact/": "https://esm.sh/preact@10.16.0/",
-    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.2.0",
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.2.1",
     "@preact/signals": "https://esm.sh/*@preact/signals@1.1.3",
     "@preact/signals-core": "https://esm.sh/@preact/signals-core@1.2.3"
   },
diff --git a/tests/fixture_island_nesting/fresh.gen.ts b/tests/fixture_island_nesting/fresh.gen.ts
index 1a50efab7f0..a614b47dc4b 100644
--- a/tests/fixture_island_nesting/fresh.gen.ts
+++ b/tests/fixture_island_nesting/fresh.gen.ts
@@ -1,52 +1,58 @@
-// DO NOT EDIT. This file is generated by fresh.
+// DO NOT EDIT. This file is generated by Fresh.
 // This file SHOULD be checked into source version control.
 // This file is automatically updated during development when running `dev.ts`.
 
 import * as $0 from "./routes/index.tsx";
 import * as $1 from "./routes/island_conditional.tsx";
-import * as $2 from "./routes/island_fn_child.tsx";
-import * as $3 from "./routes/island_in_island.tsx";
-import * as $4 from "./routes/island_in_island_definition.tsx";
-import * as $5 from "./routes/island_jsx_child.tsx";
-import * as $6 from "./routes/island_jsx_children.tsx";
-import * as $7 from "./routes/island_jsx_island_jsx.tsx";
-import * as $8 from "./routes/island_jsx_text.tsx";
-import * as $9 from "./routes/island_nested_props.tsx";
-import * as $10 from "./routes/island_order.tsx";
-import * as $11 from "./routes/island_siblings.tsx";
+import * as $2 from "./routes/island_conditional_lazy.tsx";
+import * as $3 from "./routes/island_conditional_lazy_island.tsx";
+import * as $4 from "./routes/island_fn_child.tsx";
+import * as $5 from "./routes/island_in_island.tsx";
+import * as $6 from "./routes/island_in_island_definition.tsx";
+import * as $7 from "./routes/island_jsx_child.tsx";
+import * as $8 from "./routes/island_jsx_children.tsx";
+import * as $9 from "./routes/island_jsx_island_jsx.tsx";
+import * as $10 from "./routes/island_jsx_text.tsx";
+import * as $11 from "./routes/island_nested_props.tsx";
+import * as $12 from "./routes/island_order.tsx";
+import * as $13 from "./routes/island_siblings.tsx";
 import * as $$0 from "./islands/BooleanButton.tsx";
-import * as $$1 from "./islands/FragmentIsland.tsx";
-import * as $$2 from "./islands/Island.tsx";
-import * as $$3 from "./islands/IslandCenter.tsx";
-import * as $$4 from "./islands/IslandConditional.tsx";
-import * as $$5 from "./islands/IslandFn.tsx";
-import * as $$6 from "./islands/IslandInsideIsland.tsx";
-import * as $$7 from "./islands/IslandWithProps.tsx";
+import * as $$1 from "./islands/Counter.tsx";
+import * as $$2 from "./islands/FragmentIsland.tsx";
+import * as $$3 from "./islands/Island.tsx";
+import * as $$4 from "./islands/IslandCenter.tsx";
+import * as $$5 from "./islands/IslandConditional.tsx";
+import * as $$6 from "./islands/IslandFn.tsx";
+import * as $$7 from "./islands/IslandInsideIsland.tsx";
+import * as $$8 from "./islands/IslandWithProps.tsx";
 
 const manifest = {
   routes: {
     "./routes/index.tsx": $0,
     "./routes/island_conditional.tsx": $1,
-    "./routes/island_fn_child.tsx": $2,
-    "./routes/island_in_island.tsx": $3,
-    "./routes/island_in_island_definition.tsx": $4,
-    "./routes/island_jsx_child.tsx": $5,
-    "./routes/island_jsx_children.tsx": $6,
-    "./routes/island_jsx_island_jsx.tsx": $7,
-    "./routes/island_jsx_text.tsx": $8,
-    "./routes/island_nested_props.tsx": $9,
-    "./routes/island_order.tsx": $10,
-    "./routes/island_siblings.tsx": $11,
+    "./routes/island_conditional_lazy.tsx": $2,
+    "./routes/island_conditional_lazy_island.tsx": $3,
+    "./routes/island_fn_child.tsx": $4,
+    "./routes/island_in_island.tsx": $5,
+    "./routes/island_in_island_definition.tsx": $6,
+    "./routes/island_jsx_child.tsx": $7,
+    "./routes/island_jsx_children.tsx": $8,
+    "./routes/island_jsx_island_jsx.tsx": $9,
+    "./routes/island_jsx_text.tsx": $10,
+    "./routes/island_nested_props.tsx": $11,
+    "./routes/island_order.tsx": $12,
+    "./routes/island_siblings.tsx": $13,
   },
   islands: {
     "./islands/BooleanButton.tsx": $$0,
-    "./islands/FragmentIsland.tsx": $$1,
-    "./islands/Island.tsx": $$2,
-    "./islands/IslandCenter.tsx": $$3,
-    "./islands/IslandConditional.tsx": $$4,
-    "./islands/IslandFn.tsx": $$5,
-    "./islands/IslandInsideIsland.tsx": $$6,
-    "./islands/IslandWithProps.tsx": $$7,
+    "./islands/Counter.tsx": $$1,
+    "./islands/FragmentIsland.tsx": $$2,
+    "./islands/Island.tsx": $$3,
+    "./islands/IslandCenter.tsx": $$4,
+    "./islands/IslandConditional.tsx": $$5,
+    "./islands/IslandFn.tsx": $$6,
+    "./islands/IslandInsideIsland.tsx": $$7,
+    "./islands/IslandWithProps.tsx": $$8,
   },
   baseUrl: import.meta.url,
 };
diff --git a/tests/fixture_island_nesting/islands/Counter.tsx b/tests/fixture_island_nesting/islands/Counter.tsx
new file mode 100644
index 00000000000..45d262880f6
--- /dev/null
+++ b/tests/fixture_island_nesting/islands/Counter.tsx
@@ -0,0 +1,10 @@
+import { Signal } from "@preact/signals";
+
+export default function Counter({ count }: { count: Signal<number> }) {
+  return (
+    <div>
+      <p class="count">{count}</p>
+      <button class="counter" onClick={() => count.value++}>update</button>
+    </div>
+  );
+}
diff --git a/tests/fixture_island_nesting/islands/IslandConditional.tsx b/tests/fixture_island_nesting/islands/IslandConditional.tsx
index 5f54983bbba..0f35429b39e 100644
--- a/tests/fixture_island_nesting/islands/IslandConditional.tsx
+++ b/tests/fixture_island_nesting/islands/IslandConditional.tsx
@@ -1,9 +1,17 @@
 import { Signal } from "@preact/signals";
+import { ComponentChildren } from "preact";
 
 export interface IslandConditionalProps {
   show: Signal<boolean>;
+  children?: ComponentChildren;
 }
 
-export default function IslandConditional({ show }: IslandConditionalProps) {
-  return show.value ? <>it works</> : null;
+export default function IslandConditional(
+  { show, children }: IslandConditionalProps,
+) {
+  return (
+    <div class="island">
+      {show.value ? <p>island content</p> : <>{children}</>}
+    </div>
+  );
 }
diff --git a/tests/fixture_island_nesting/routes/island_conditional_lazy.tsx b/tests/fixture_island_nesting/routes/island_conditional_lazy.tsx
new file mode 100644
index 00000000000..7d05cdbb704
--- /dev/null
+++ b/tests/fixture_island_nesting/routes/island_conditional_lazy.tsx
@@ -0,0 +1,16 @@
+import IslandConditional from "../islands/IslandConditional.tsx";
+import BooleanButton from "../islands/BooleanButton.tsx";
+import { signal } from "@preact/signals";
+
+const show = signal(true);
+
+export default function Page() {
+  return (
+    <div id="page">
+      <IslandConditional show={show}>
+        <p>server rendered</p>
+      </IslandConditional>
+      <BooleanButton signal={show} />
+    </div>
+  );
+}
diff --git a/tests/fixture_island_nesting/routes/island_conditional_lazy_island.tsx b/tests/fixture_island_nesting/routes/island_conditional_lazy_island.tsx
new file mode 100644
index 00000000000..54ae4bdaebc
--- /dev/null
+++ b/tests/fixture_island_nesting/routes/island_conditional_lazy_island.tsx
@@ -0,0 +1,21 @@
+import IslandConditional from "../islands/IslandConditional.tsx";
+import BooleanButton from "../islands/BooleanButton.tsx";
+import { useSignal } from "@preact/signals";
+import Counter from "../islands/Counter.tsx";
+
+export default function Page() {
+  const show = useSignal(true);
+  const count = useSignal(0);
+
+  return (
+    <div id="page">
+      <IslandConditional show={show}>
+        <div>
+          <p class="server">server rendered</p>
+          <Counter count={count} />
+        </div>
+      </IslandConditional>
+      <BooleanButton signal={show} />
+    </div>
+  );
+}
diff --git a/tests/fixture_jsx_pragma/fresh.gen.ts b/tests/fixture_jsx_pragma/fresh.gen.ts
index 221a8cd3fe2..b3d1d79171c 100644
--- a/tests/fixture_jsx_pragma/fresh.gen.ts
+++ b/tests/fixture_jsx_pragma/fresh.gen.ts
@@ -1,4 +1,4 @@
-// DO NOT EDIT. This file is generated by fresh.
+// DO NOT EDIT. This file is generated by Fresh.
 // This file SHOULD be checked into source version control.
 // This file is automatically updated during development when running `dev.ts`.
 
diff --git a/tests/fixture_layouts/dev.ts b/tests/fixture_layouts/dev.ts
new file mode 100644
index 00000000000..2d85d6c183c
--- /dev/null
+++ b/tests/fixture_layouts/dev.ts
@@ -0,0 +1,5 @@
+#!/usr/bin/env -S deno run -A --watch=static/,routes/
+
+import dev from "$fresh/dev.ts";
+
+await dev(import.meta.url, "./main.ts");
diff --git a/tests/fixture_layouts/fresh.gen.ts b/tests/fixture_layouts/fresh.gen.ts
new file mode 100644
index 00000000000..db6962822aa
--- /dev/null
+++ b/tests/fixture_layouts/fresh.gen.ts
@@ -0,0 +1,75 @@
+// DO NOT EDIT. This file is generated by Fresh.
+// This file SHOULD be checked into source version control.
+// This file is automatically updated during development when running `dev.ts`.
+
+import * as $0 from "./routes/_app.tsx";
+import * as $1 from "./routes/_layout.tsx";
+import * as $2 from "./routes/_middleware.ts";
+import * as $3 from "./routes/async/_layout.tsx";
+import * as $4 from "./routes/async/index.tsx";
+import * as $5 from "./routes/async/redirect/_layout.tsx";
+import * as $6 from "./routes/async/redirect/index.tsx";
+import * as $7 from "./routes/async/sub/_layout.tsx";
+import * as $8 from "./routes/async/sub/index.tsx";
+import * as $9 from "./routes/files/js/_layout.js";
+import * as $10 from "./routes/files/js/index.js";
+import * as $11 from "./routes/files/jsx/_layout.jsx";
+import * as $12 from "./routes/files/jsx/index.jsx";
+import * as $13 from "./routes/files/ts/_layout.ts";
+import * as $14 from "./routes/files/ts/index.ts";
+import * as $15 from "./routes/files/tsx/_layout.tsx";
+import * as $16 from "./routes/files/tsx/index.tsx";
+import * as $17 from "./routes/foo/_layout.tsx";
+import * as $18 from "./routes/foo/bar.tsx";
+import * as $19 from "./routes/foo/index.tsx";
+import * as $20 from "./routes/index.tsx";
+import * as $21 from "./routes/other.tsx";
+import * as $22 from "./routes/override/_layout.tsx";
+import * as $23 from "./routes/override/index.tsx";
+import * as $24 from "./routes/override/layout_no_app/_layout.tsx";
+import * as $25 from "./routes/override/layout_no_app/index.tsx";
+import * as $26 from "./routes/override/no_app.tsx";
+import * as $27 from "./routes/override/no_layout.tsx";
+import * as $28 from "./routes/override/no_layout_no_app.tsx";
+import * as $29 from "./routes/skip/sub/_layout.tsx";
+import * as $30 from "./routes/skip/sub/index.tsx";
+
+const manifest = {
+  routes: {
+    "./routes/_app.tsx": $0,
+    "./routes/_layout.tsx": $1,
+    "./routes/_middleware.ts": $2,
+    "./routes/async/_layout.tsx": $3,
+    "./routes/async/index.tsx": $4,
+    "./routes/async/redirect/_layout.tsx": $5,
+    "./routes/async/redirect/index.tsx": $6,
+    "./routes/async/sub/_layout.tsx": $7,
+    "./routes/async/sub/index.tsx": $8,
+    "./routes/files/js/_layout.js": $9,
+    "./routes/files/js/index.js": $10,
+    "./routes/files/jsx/_layout.jsx": $11,
+    "./routes/files/jsx/index.jsx": $12,
+    "./routes/files/ts/_layout.ts": $13,
+    "./routes/files/ts/index.ts": $14,
+    "./routes/files/tsx/_layout.tsx": $15,
+    "./routes/files/tsx/index.tsx": $16,
+    "./routes/foo/_layout.tsx": $17,
+    "./routes/foo/bar.tsx": $18,
+    "./routes/foo/index.tsx": $19,
+    "./routes/index.tsx": $20,
+    "./routes/other.tsx": $21,
+    "./routes/override/_layout.tsx": $22,
+    "./routes/override/index.tsx": $23,
+    "./routes/override/layout_no_app/_layout.tsx": $24,
+    "./routes/override/layout_no_app/index.tsx": $25,
+    "./routes/override/no_app.tsx": $26,
+    "./routes/override/no_layout.tsx": $27,
+    "./routes/override/no_layout_no_app.tsx": $28,
+    "./routes/skip/sub/_layout.tsx": $29,
+    "./routes/skip/sub/index.tsx": $30,
+  },
+  islands: {},
+  baseUrl: import.meta.url,
+};
+
+export default manifest;
diff --git a/tests/fixture_layouts/main.ts b/tests/fixture_layouts/main.ts
new file mode 100644
index 00000000000..0f15e8defa4
--- /dev/null
+++ b/tests/fixture_layouts/main.ts
@@ -0,0 +1,10 @@
+/// <reference no-default-lib="true" />
+/// <reference lib="dom" />
+/// <reference lib="dom.asynciterable" />
+/// <reference lib="deno.ns" />
+/// <reference lib="deno.unstable" />
+
+import { start } from "$fresh/server.ts";
+import manifest from "./fresh.gen.ts";
+
+await start(manifest);
diff --git a/tests/fixture_layouts/routes/_app.tsx b/tests/fixture_layouts/routes/_app.tsx
new file mode 100644
index 00000000000..ba763d1da82
--- /dev/null
+++ b/tests/fixture_layouts/routes/_app.tsx
@@ -0,0 +1,9 @@
+import { AppProps } from "$fresh/server.ts";
+
+export default function App({ Component, state }: AppProps) {
+  return (
+    <div class="app">
+      <Component />
+    </div>
+  );
+}
diff --git a/tests/fixture_layouts/routes/_layout.tsx b/tests/fixture_layouts/routes/_layout.tsx
new file mode 100644
index 00000000000..62752ab8c83
--- /dev/null
+++ b/tests/fixture_layouts/routes/_layout.tsx
@@ -0,0 +1,13 @@
+import { LayoutProps } from "$fresh/server.ts";
+import { LayoutState } from "./_middleware.ts";
+
+export default function RootLayout(
+  { Component, state }: LayoutProps<unknown, LayoutState>,
+) {
+  return (
+    <div class="root-layout">
+      {state.something === "it works" ? "it works\n" : "it doesn't work\n"}
+      <Component />
+    </div>
+  );
+}
diff --git a/tests/fixture_layouts/routes/_middleware.ts b/tests/fixture_layouts/routes/_middleware.ts
new file mode 100644
index 00000000000..e5cffa070f7
--- /dev/null
+++ b/tests/fixture_layouts/routes/_middleware.ts
@@ -0,0 +1,13 @@
+import { MiddlewareHandlerContext } from "$fresh/server.ts";
+
+export type LayoutState = {
+  something: string;
+};
+
+export const handler = (
+  _req: Request,
+  ctx: MiddlewareHandlerContext<LayoutState>,
+) => {
+  ctx.state.something = "it works";
+  return ctx.next();
+};
diff --git a/tests/fixture_layouts/routes/async/_layout.tsx b/tests/fixture_layouts/routes/async/_layout.tsx
new file mode 100644
index 00000000000..070feb74597
--- /dev/null
+++ b/tests/fixture_layouts/routes/async/_layout.tsx
@@ -0,0 +1,15 @@
+import { LayoutContext } from "$fresh/server.ts";
+import { delay } from "$fresh/tests/deps.ts";
+
+export default async function AsyncLayout(
+  req: Request,
+  ctx: LayoutContext,
+) {
+  await delay(10);
+  return (
+    <div class="async-layout">
+      <p>Async layout</p>
+      <ctx.Component />
+    </div>
+  );
+}
diff --git a/tests/fixture_layouts/routes/async/index.tsx b/tests/fixture_layouts/routes/async/index.tsx
new file mode 100644
index 00000000000..648f622281c
--- /dev/null
+++ b/tests/fixture_layouts/routes/async/index.tsx
@@ -0,0 +1,10 @@
+import { RouteContext } from "$fresh/server.ts";
+
+export default async function AsyncPage(req: Request, ctx: RouteContext) {
+  await new Promise((r) => setTimeout(r, 10));
+  return (
+    <div class="async-page">
+      <p>Async page</p>
+    </div>
+  );
+}
diff --git a/tests/fixture_layouts/routes/async/redirect/_layout.tsx b/tests/fixture_layouts/routes/async/redirect/_layout.tsx
new file mode 100644
index 00000000000..9a8a96e8e1c
--- /dev/null
+++ b/tests/fixture_layouts/routes/async/redirect/_layout.tsx
@@ -0,0 +1,13 @@
+import { LayoutContext } from "$fresh/server.ts";
+import { delay } from "$std/async/mod.ts";
+
+export default async function AsyncSubLayout(
+  req: Request,
+  ctx: LayoutContext,
+) {
+  await delay(10);
+  return new Response(null, {
+    status: 307,
+    headers: { Location: "/async/sub" },
+  });
+}
diff --git a/tests/fixture_layouts/routes/async/redirect/index.tsx b/tests/fixture_layouts/routes/async/redirect/index.tsx
new file mode 100644
index 00000000000..f3380619535
--- /dev/null
+++ b/tests/fixture_layouts/routes/async/redirect/index.tsx
@@ -0,0 +1,13 @@
+import { RouteContext } from "$fresh/server.ts";
+
+export default async function AsyncRedirectPage(
+  req: Request,
+  ctx: RouteContext,
+) {
+  await new Promise((r) => setTimeout(r, 10));
+  return (
+    <div class="async-sub-page">
+      <p>Async Redirect page</p>
+    </div>
+  );
+}
diff --git a/tests/fixture_layouts/routes/async/sub/_layout.tsx b/tests/fixture_layouts/routes/async/sub/_layout.tsx
new file mode 100644
index 00000000000..110daa02677
--- /dev/null
+++ b/tests/fixture_layouts/routes/async/sub/_layout.tsx
@@ -0,0 +1,14 @@
+import { LayoutContext } from "$fresh/server.ts";
+
+export default async function AsyncSubLayout(
+  req: Request,
+  ctx: LayoutContext,
+) {
+  await new Promise((r) => setTimeout(r, 10));
+  return (
+    <div class="async-sub-layout">
+      <p>Async Sub layout</p>
+      <ctx.Component />
+    </div>
+  );
+}
diff --git a/tests/fixture_layouts/routes/async/sub/index.tsx b/tests/fixture_layouts/routes/async/sub/index.tsx
new file mode 100644
index 00000000000..c63bd1845ca
--- /dev/null
+++ b/tests/fixture_layouts/routes/async/sub/index.tsx
@@ -0,0 +1,10 @@
+import { RouteContext } from "$fresh/server.ts";
+
+export default async function AsyncSubPage(req: Request, ctx: RouteContext) {
+  await new Promise((r) => setTimeout(r, 10));
+  return (
+    <div class="async-sub-page">
+      <p>Async Sub page</p>
+    </div>
+  );
+}
diff --git a/tests/fixture_layouts/routes/files/js/_layout.js b/tests/fixture_layouts/routes/files/js/_layout.js
new file mode 100644
index 00000000000..57fb09c0329
--- /dev/null
+++ b/tests/fixture_layouts/routes/files/js/_layout.js
@@ -0,0 +1,5 @@
+import { h } from "preact";
+
+export default function JsLayout({ Component }) {
+  return h("div", { class: "js-layout" }, h(Component, null));
+}
diff --git a/tests/fixture_layouts/routes/files/js/index.js b/tests/fixture_layouts/routes/files/js/index.js
new file mode 100644
index 00000000000..4980f6ed630
--- /dev/null
+++ b/tests/fixture_layouts/routes/files/js/index.js
@@ -0,0 +1,5 @@
+import { h } from "preact";
+
+export default function JsPage() {
+  return h("div", { class: "js-page" }, "/files/js");
+}
diff --git a/tests/fixture_layouts/routes/files/jsx/_layout.jsx b/tests/fixture_layouts/routes/files/jsx/_layout.jsx
new file mode 100644
index 00000000000..a35d3879a8b
--- /dev/null
+++ b/tests/fixture_layouts/routes/files/jsx/_layout.jsx
@@ -0,0 +1,9 @@
+import { h } from "preact";
+
+export default function JsxLayout({ Component }) {
+  return (
+    <div class="jsx-layout">
+      <Component />
+    </div>
+  );
+}
diff --git a/tests/fixture_layouts/routes/files/jsx/index.jsx b/tests/fixture_layouts/routes/files/jsx/index.jsx
new file mode 100644
index 00000000000..e44ea6dff71
--- /dev/null
+++ b/tests/fixture_layouts/routes/files/jsx/index.jsx
@@ -0,0 +1,3 @@
+export default function JsxPage() {
+  return <div class="jsx-page">/files/jsx page</div>;
+}
diff --git a/tests/fixture_layouts/routes/files/ts/_layout.ts b/tests/fixture_layouts/routes/files/ts/_layout.ts
new file mode 100644
index 00000000000..33617a71cfb
--- /dev/null
+++ b/tests/fixture_layouts/routes/files/ts/_layout.ts
@@ -0,0 +1,6 @@
+import { h } from "preact";
+import { LayoutProps } from "$fresh/server.ts";
+
+export default function TsLayout({ Component }: LayoutProps) {
+  return h("div", { class: "ts-layout" }, h(Component, null));
+}
diff --git a/tests/fixture_layouts/routes/files/ts/index.ts b/tests/fixture_layouts/routes/files/ts/index.ts
new file mode 100644
index 00000000000..930cdc4130e
--- /dev/null
+++ b/tests/fixture_layouts/routes/files/ts/index.ts
@@ -0,0 +1,5 @@
+import { h } from "preact";
+
+export default function TsPage() {
+  return h("div", { class: "ts-page" }, "/files/ts");
+}
diff --git a/tests/fixture_layouts/routes/files/tsx/_layout.tsx b/tests/fixture_layouts/routes/files/tsx/_layout.tsx
new file mode 100644
index 00000000000..c8600dbb865
--- /dev/null
+++ b/tests/fixture_layouts/routes/files/tsx/_layout.tsx
@@ -0,0 +1,10 @@
+import { h } from "preact";
+import { LayoutProps } from "$fresh/server.ts";
+
+export default function TsxLayout({ Component }: LayoutProps) {
+  return (
+    <div class="tsx-layout">
+      <Component />
+    </div>
+  );
+}
diff --git a/tests/fixture_layouts/routes/files/tsx/index.tsx b/tests/fixture_layouts/routes/files/tsx/index.tsx
new file mode 100644
index 00000000000..b61a2b6610f
--- /dev/null
+++ b/tests/fixture_layouts/routes/files/tsx/index.tsx
@@ -0,0 +1,3 @@
+export default function TsxPage() {
+  return <div class="tsx-page">/files/tsx page</div>;
+}
diff --git a/tests/fixture_layouts/routes/foo/_layout.tsx b/tests/fixture_layouts/routes/foo/_layout.tsx
new file mode 100644
index 00000000000..da0f7c8fcaa
--- /dev/null
+++ b/tests/fixture_layouts/routes/foo/_layout.tsx
@@ -0,0 +1,9 @@
+import { LayoutProps } from "$fresh/server.ts";
+
+export default function FooLayout({ Component }: LayoutProps) {
+  return (
+    <div class="foo-layout">
+      <Component />
+    </div>
+  );
+}
diff --git a/tests/fixture_layouts/routes/foo/bar.tsx b/tests/fixture_layouts/routes/foo/bar.tsx
new file mode 100644
index 00000000000..c5cc588e24d
--- /dev/null
+++ b/tests/fixture_layouts/routes/foo/bar.tsx
@@ -0,0 +1,7 @@
+export default function BarPage() {
+  return (
+    <div class="bar-page">
+      /foo/bar page
+    </div>
+  );
+}
diff --git a/tests/fixture_layouts/routes/foo/index.tsx b/tests/fixture_layouts/routes/foo/index.tsx
new file mode 100644
index 00000000000..b2db53f77ef
--- /dev/null
+++ b/tests/fixture_layouts/routes/foo/index.tsx
@@ -0,0 +1,7 @@
+export default function FooPage() {
+  return (
+    <div class="foo-page">
+      /foo index page
+    </div>
+  );
+}
diff --git a/tests/fixture_layouts/routes/index.tsx b/tests/fixture_layouts/routes/index.tsx
new file mode 100644
index 00000000000..13e0de19c47
--- /dev/null
+++ b/tests/fixture_layouts/routes/index.tsx
@@ -0,0 +1,7 @@
+export default function Home() {
+  return (
+    <div class="home-page">
+      Home
+    </div>
+  );
+}
diff --git a/tests/fixture_layouts/routes/other.tsx b/tests/fixture_layouts/routes/other.tsx
new file mode 100644
index 00000000000..47d7befe327
--- /dev/null
+++ b/tests/fixture_layouts/routes/other.tsx
@@ -0,0 +1,7 @@
+export default function OtherPage() {
+  return (
+    <div class="other-page">
+      /other
+    </div>
+  );
+}
diff --git a/tests/fixture_layouts/routes/override/_layout.tsx b/tests/fixture_layouts/routes/override/_layout.tsx
new file mode 100644
index 00000000000..9f5cac7bc1c
--- /dev/null
+++ b/tests/fixture_layouts/routes/override/_layout.tsx
@@ -0,0 +1,13 @@
+import { LayoutConfig, LayoutProps } from "$fresh/server.ts";
+
+export const config: LayoutConfig = {
+  skipInheritedLayouts: true,
+};
+
+export default function OverrideLayout({ Component }: LayoutProps) {
+  return (
+    <div class="override-layout">
+      <Component />
+    </div>
+  );
+}
diff --git a/tests/fixture_layouts/routes/override/index.tsx b/tests/fixture_layouts/routes/override/index.tsx
new file mode 100644
index 00000000000..e9514f4890e
--- /dev/null
+++ b/tests/fixture_layouts/routes/override/index.tsx
@@ -0,0 +1,7 @@
+export default function OverridePage() {
+  return (
+    <div class="override-page">
+      /override index page
+    </div>
+  );
+}
diff --git a/tests/fixture_layouts/routes/override/layout_no_app/_layout.tsx b/tests/fixture_layouts/routes/override/layout_no_app/_layout.tsx
new file mode 100644
index 00000000000..c306c255652
--- /dev/null
+++ b/tests/fixture_layouts/routes/override/layout_no_app/_layout.tsx
@@ -0,0 +1,13 @@
+import { LayoutConfig, LayoutProps } from "$fresh/server.ts";
+
+export const config: LayoutConfig = {
+  skipAppWrapper: true,
+};
+
+export default function OverrideLayout({ Component }: LayoutProps) {
+  return (
+    <div class="no-app-layout">
+      <Component />
+    </div>
+  );
+}
diff --git a/tests/fixture_layouts/routes/override/layout_no_app/index.tsx b/tests/fixture_layouts/routes/override/layout_no_app/index.tsx
new file mode 100644
index 00000000000..20e6112bf0c
--- /dev/null
+++ b/tests/fixture_layouts/routes/override/layout_no_app/index.tsx
@@ -0,0 +1,7 @@
+export default function OverridePage() {
+  return (
+    <div class="page">
+      /override/layout_no_app page
+    </div>
+  );
+}
diff --git a/tests/fixture_layouts/routes/override/no_app.tsx b/tests/fixture_layouts/routes/override/no_app.tsx
new file mode 100644
index 00000000000..0cbd5d35f97
--- /dev/null
+++ b/tests/fixture_layouts/routes/override/no_app.tsx
@@ -0,0 +1,13 @@
+import { RouteConfig } from "$fresh/server.ts";
+
+export const config: RouteConfig = {
+  skipAppWrapper: true,
+};
+
+export default function OverridePage() {
+  return (
+    <p class="no-app">
+      no <code>_app.tsx</code> template
+    </p>
+  );
+}
diff --git a/tests/fixture_layouts/routes/override/no_layout.tsx b/tests/fixture_layouts/routes/override/no_layout.tsx
new file mode 100644
index 00000000000..ff6b1dc2399
--- /dev/null
+++ b/tests/fixture_layouts/routes/override/no_layout.tsx
@@ -0,0 +1,13 @@
+import { LayoutConfig } from "$fresh/server.ts";
+
+export const config: LayoutConfig = {
+  skipInheritedLayouts: true,
+};
+
+export default function OverridePage() {
+  return (
+    <p class="no-layouts">
+      no layouts
+    </p>
+  );
+}
diff --git a/tests/fixture_layouts/routes/override/no_layout_no_app.tsx b/tests/fixture_layouts/routes/override/no_layout_no_app.tsx
new file mode 100644
index 00000000000..e48d50fbf5b
--- /dev/null
+++ b/tests/fixture_layouts/routes/override/no_layout_no_app.tsx
@@ -0,0 +1,14 @@
+import { LayoutConfig } from "$fresh/server.ts";
+
+export const config: LayoutConfig = {
+  skipAppWrapper: true,
+  skipInheritedLayouts: true,
+};
+
+export default function OverridePage() {
+  return (
+    <p class="no-app-no-layouts">
+      no <code>_app.tsx</code> template and no layouts
+    </p>
+  );
+}
diff --git a/tests/fixture_layouts/routes/skip/sub/_layout.tsx b/tests/fixture_layouts/routes/skip/sub/_layout.tsx
new file mode 100644
index 00000000000..f237534b816
--- /dev/null
+++ b/tests/fixture_layouts/routes/skip/sub/_layout.tsx
@@ -0,0 +1,9 @@
+import { LayoutProps } from "$fresh/server.ts";
+
+export default function SubLayout({ Component }: LayoutProps) {
+  return (
+    <div class="sub-layout">
+      <Component />
+    </div>
+  );
+}
diff --git a/tests/fixture_layouts/routes/skip/sub/index.tsx b/tests/fixture_layouts/routes/skip/sub/index.tsx
new file mode 100644
index 00000000000..7c22ad9e513
--- /dev/null
+++ b/tests/fixture_layouts/routes/skip/sub/index.tsx
@@ -0,0 +1,7 @@
+export default function SubPage() {
+  return (
+    <div class="sub-page">
+      /skip/sub page
+    </div>
+  );
+}
diff --git a/tests/fixture_npm/deno.json b/tests/fixture_npm/deno.json
index 9d782057e20..85b23d1445b 100644
--- a/tests/fixture_npm/deno.json
+++ b/tests/fixture_npm/deno.json
@@ -4,7 +4,7 @@
     "$fresh/": "../../",
     "preact": "https://esm.sh/preact@10.15.1",
     "preact/": "https://esm.sh/preact@10.15.1/",
-    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.2.0",
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.2.1",
     "@preact/signals": "https://esm.sh/*@preact/signals@1.1.3",
     "@preact/signals-core": "https://esm.sh/@preact/signals-core@1.2.3"
   },
diff --git a/tests/fixture_npm/fresh.gen.ts b/tests/fixture_npm/fresh.gen.ts
index e3235c834c0..4b8b98e7650 100644
--- a/tests/fixture_npm/fresh.gen.ts
+++ b/tests/fixture_npm/fresh.gen.ts
@@ -1,4 +1,4 @@
-// DO NOT EDIT. This file is generated by fresh.
+// DO NOT EDIT. This file is generated by Fresh.
 // This file SHOULD be checked into source version control.
 // This file is automatically updated during development when running `dev.ts`.
 
diff --git a/tests/fixture_plugin/deno.json b/tests/fixture_plugin/deno.json
index 04ee3099b1b..2b2fa78e147 100644
--- a/tests/fixture_plugin/deno.json
+++ b/tests/fixture_plugin/deno.json
@@ -4,7 +4,7 @@
     "$fresh/": "../../",
     "preact": "https://esm.sh/preact@10.15.1",
     "preact/": "https://esm.sh/preact@10.15.1/",
-    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.2.0"
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.2.1"
   },
   "compilerOptions": {
     "jsx": "react-jsx",
diff --git a/tests/fixture_plugin/fresh.gen.ts b/tests/fixture_plugin/fresh.gen.ts
index 8f644c5bf0c..aa6f883318d 100644
--- a/tests/fixture_plugin/fresh.gen.ts
+++ b/tests/fixture_plugin/fresh.gen.ts
@@ -1,17 +1,19 @@
-// DO NOT EDIT. This file is generated by fresh.
+// DO NOT EDIT. This file is generated by Fresh.
 // This file SHOULD be checked into source version control.
 // This file is automatically updated during development when running `dev.ts`.
 
-import * as $0 from "./routes/static.tsx";
-import * as $1 from "./routes/test.tsx";
-import * as $2 from "./routes/with-island.tsx";
+import * as $0 from "./routes/lots-of-middleware/index.tsx";
+import * as $1 from "./routes/static.tsx";
+import * as $2 from "./routes/test.tsx";
+import * as $3 from "./routes/with-island.tsx";
 import * as $$0 from "./islands/Island.tsx";
 
 const manifest = {
   routes: {
-    "./routes/static.tsx": $0,
-    "./routes/test.tsx": $1,
-    "./routes/with-island.tsx": $2,
+    "./routes/lots-of-middleware/index.tsx": $0,
+    "./routes/static.tsx": $1,
+    "./routes/test.tsx": $2,
+    "./routes/with-island.tsx": $3,
   },
   islands: {
     "./islands/Island.tsx": $$0,
diff --git a/tests/fixture_plugin/options.ts b/tests/fixture_plugin/options.ts
index 511d546cea8..2996f04d540 100644
--- a/tests/fixture_plugin/options.ts
+++ b/tests/fixture_plugin/options.ts
@@ -3,6 +3,7 @@ import cssInjectPlugin from "./utils/css-inject-plugin.ts";
 import jsInjectPlugin from "./utils/js-inject-plugin.ts";
 import cssInjectPluginAsync from "./utils/css-inject-plugin-async.ts";
 import routePlugin from "./utils/route-plugin.ts";
+import secondMiddlewarePlugin from "$fresh/tests/fixture_plugin/utils/second-middleware-plugin.ts";
 
 export default {
   plugins: [
@@ -10,5 +11,6 @@ export default {
     jsInjectPlugin,
     cssInjectPluginAsync,
     routePlugin({ title: "Title Set From Plugin Config" }),
+    secondMiddlewarePlugin(),
   ],
 } as FreshOptions;
diff --git a/tests/fixture_plugin/routes/lots-of-middleware/index.tsx b/tests/fixture_plugin/routes/lots-of-middleware/index.tsx
new file mode 100644
index 00000000000..e154e8c15bb
--- /dev/null
+++ b/tests/fixture_plugin/routes/lots-of-middleware/index.tsx
@@ -0,0 +1,18 @@
+import { Handlers, PageProps } from "$fresh/server.ts";
+import { PluginMiddlewareState } from "../../utils/route-plugin.ts";
+
+export const handler: Handlers = {
+  async GET(_req, ctx) {
+    const resp = await ctx.render();
+    return resp;
+  },
+};
+
+export default function Home(props: PageProps<unknown, PluginMiddlewareState>) {
+  const value = props.state.num;
+  return (
+    <div>
+      <h1>{value}</h1>
+    </div>
+  );
+}
diff --git a/tests/fixture_plugin/routes/test.tsx b/tests/fixture_plugin/routes/test.tsx
index ca9d1d4632b..c1c11ef7f85 100644
--- a/tests/fixture_plugin/routes/test.tsx
+++ b/tests/fixture_plugin/routes/test.tsx
@@ -1,14 +1,14 @@
-import { Handlers, PageProps } from "../../../server.ts";
+import { HandlerContext, Handlers, PageProps } from "../../../server.ts";
 
-export const handler: Handlers = {
-  async GET(_req, ctx) {
+export const handler: Handlers<unknown, { test: string }> = {
+  async GET(_req, ctx: HandlerContext<unknown, { test: string }>) {
     const resp = await ctx.render();
     return resp;
   },
 };
 
-export default function Home(props: PageProps) {
-  const value = props.state.test as string;
+export default function Home(props: PageProps<unknown, { test: string }>) {
+  const value = props.state.test;
   return (
     <div>
       <h1>{value}</h1>
diff --git a/tests/fixture_plugin/utils/route-plugin.ts b/tests/fixture_plugin/utils/route-plugin.ts
index a8c4de72048..aacd350ca83 100644
--- a/tests/fixture_plugin/utils/route-plugin.ts
+++ b/tests/fixture_plugin/utils/route-plugin.ts
@@ -1,22 +1,51 @@
-import { Plugin } from "$fresh/server.ts";
+import { MiddlewareHandlerContext, Plugin } from "$fresh/server.ts";
 import { handler as testMiddleware } from "./sample_routes/_middleware.ts";
 import { AppBuilder } from "./sample_routes/AppBuilder.tsx";
+import { SimpleRoute } from "./sample_routes/simple-route.tsx";
 export type { Options };
 
 interface Options {
   title: string;
 }
+export type PluginMiddlewareState = {
+  num: number;
+  test: string;
+};
 
-export default function routePlugin(options: Options): Plugin {
+const twoPointlessMiddlewares = [
+  async (
+    _req: Request,
+    ctx: MiddlewareHandlerContext<PluginMiddlewareState>,
+  ) => {
+    ctx.state.num = ctx.state.num === undefined ? 1 : ctx.state.num + 1;
+    return await ctx.next();
+  },
+  async (
+    _req: Request,
+    ctx: MiddlewareHandlerContext<PluginMiddlewareState>,
+  ) => {
+    ctx.state.num = ctx.state.num === undefined ? 1 : ctx.state.num + 1;
+    return await ctx.next();
+  },
+];
+
+export default function routePlugin(
+  options: Options,
+): Plugin<PluginMiddlewareState> {
   return {
     name: "routePlugin",
     middlewares: [{
       middleware: { handler: testMiddleware },
       path: "/",
+    }, {
+      middleware: {
+        handler: twoPointlessMiddlewares,
+      },
+      path: "lots-of-middleware",
     }],
     routes: [{
       path: "/_app",
       component: AppBuilder(options),
-    }],
+    }, { path: "no-leading-slash-here", component: SimpleRoute }],
   };
 }
diff --git a/tests/fixture_plugin/utils/sample_routes/_middleware.ts b/tests/fixture_plugin/utils/sample_routes/_middleware.ts
index cd7407fc31c..5e946530bad 100644
--- a/tests/fixture_plugin/utils/sample_routes/_middleware.ts
+++ b/tests/fixture_plugin/utils/sample_routes/_middleware.ts
@@ -1,6 +1,10 @@
 import { MiddlewareHandlerContext } from "$fresh/server.ts";
+import { PluginMiddlewareState } from "../../utils/route-plugin.ts";
 
-export async function handler(_req: Request, ctx: MiddlewareHandlerContext) {
+export async function handler(
+  _req: Request,
+  ctx: MiddlewareHandlerContext<PluginMiddlewareState>,
+) {
   ctx.state.test = "look, i'm set from a plugin!";
   const resp = await ctx.next();
   return resp;
diff --git a/tests/fixture_plugin/utils/sample_routes/simple-route.tsx b/tests/fixture_plugin/utils/sample_routes/simple-route.tsx
new file mode 100644
index 00000000000..8c8de652314
--- /dev/null
+++ b/tests/fixture_plugin/utils/sample_routes/simple-route.tsx
@@ -0,0 +1,3 @@
+export function SimpleRoute() {
+  return <div>Hello</div>;
+}
diff --git a/tests/fixture_plugin/utils/second-middleware-plugin.ts b/tests/fixture_plugin/utils/second-middleware-plugin.ts
new file mode 100644
index 00000000000..931f42cdbbf
--- /dev/null
+++ b/tests/fixture_plugin/utils/second-middleware-plugin.ts
@@ -0,0 +1,36 @@
+import { MiddlewareHandlerContext, Plugin } from "$fresh/server.ts";
+import { PluginMiddlewareState } from "./route-plugin.ts";
+
+export default function secondMiddlewarePlugin(): Plugin<
+  PluginMiddlewareState
+> {
+  return {
+    name: "secondMiddlewarePlugin",
+    middlewares: [{
+      middleware: {
+        handler: async (_req: Request, ctx: MiddlewareHandlerContext) => {
+          return await ctx.next();
+        },
+      },
+      path: "/", // this is the root route
+    }, {
+      middleware: {
+        handler: async (
+          _req: Request,
+          ctx: MiddlewareHandlerContext<PluginMiddlewareState>,
+        ) => {
+          ctx.state.num = ctx.state.num === undefined ? 1 : ctx.state.num + 1;
+          return await ctx.next();
+        },
+      },
+      path: "lots-of-middleware/",
+    }, {
+      middleware: {
+        handler: async (_req: Request, ctx: MiddlewareHandlerContext) => {
+          return await ctx.next();
+        },
+      },
+      path: "", // this also goes to the root route, as of 1.4
+    }],
+  };
+}
diff --git a/tests/fixture_preact_rts_v5/fresh.gen.ts b/tests/fixture_preact_rts_v5/fresh.gen.ts
index e3235c834c0..4b8b98e7650 100644
--- a/tests/fixture_preact_rts_v5/fresh.gen.ts
+++ b/tests/fixture_preact_rts_v5/fresh.gen.ts
@@ -1,4 +1,4 @@
-// DO NOT EDIT. This file is generated by fresh.
+// DO NOT EDIT. This file is generated by Fresh.
 // This file SHOULD be checked into source version control.
 // This file is automatically updated during development when running `dev.ts`.
 
diff --git a/tests/fixture_render_error/deno.json b/tests/fixture_render_error/deno.json
index 04ee3099b1b..2b2fa78e147 100644
--- a/tests/fixture_render_error/deno.json
+++ b/tests/fixture_render_error/deno.json
@@ -4,7 +4,7 @@
     "$fresh/": "../../",
     "preact": "https://esm.sh/preact@10.15.1",
     "preact/": "https://esm.sh/preact@10.15.1/",
-    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.2.0"
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.2.1"
   },
   "compilerOptions": {
     "jsx": "react-jsx",
diff --git a/tests/fixture_render_error/fresh.gen.ts b/tests/fixture_render_error/fresh.gen.ts
index 799a93fba0a..b321c0e078e 100644
--- a/tests/fixture_render_error/fresh.gen.ts
+++ b/tests/fixture_render_error/fresh.gen.ts
@@ -1,4 +1,4 @@
-// DO NOT EDIT. This file is generated by fresh.
+// DO NOT EDIT. This file is generated by Fresh.
 // This file SHOULD be checked into source version control.
 // This file is automatically updated during development when running `dev.ts`.
 
diff --git a/tests/fixture_route_analysis/fresh.gen.ts b/tests/fixture_route_analysis/fresh.gen.ts
index 8cc887a4c42..7d1ff0f4098 100644
--- a/tests/fixture_route_analysis/fresh.gen.ts
+++ b/tests/fixture_route_analysis/fresh.gen.ts
@@ -1,4 +1,4 @@
-// DO NOT EDIT. This file is generated by fresh.
+// DO NOT EDIT. This file is generated by Fresh.
 // This file SHOULD be checked into source version control.
 // This file is automatically updated during development when running `dev.ts`.
 
diff --git a/tests/fixture_router/fresh.gen.ts b/tests/fixture_router/fresh.gen.ts
index 0fd4d6748c0..8dcbe75e679 100644
--- a/tests/fixture_router/fresh.gen.ts
+++ b/tests/fixture_router/fresh.gen.ts
@@ -1,4 +1,4 @@
-// DO NOT EDIT. This file is generated by fresh.
+// DO NOT EDIT. This file is generated by Fresh.
 // This file SHOULD be checked into source version control.
 // This file is automatically updated during development when running `dev.ts`.
 
diff --git a/tests/fixture_server_components/fresh.gen.ts b/tests/fixture_server_components/fresh.gen.ts
index 3b6d142eaf3..d1b0f4712d7 100644
--- a/tests/fixture_server_components/fresh.gen.ts
+++ b/tests/fixture_server_components/fresh.gen.ts
@@ -1,4 +1,4 @@
-// DO NOT EDIT. This file is generated by fresh.
+// DO NOT EDIT. This file is generated by Fresh.
 // This file SHOULD be checked into source version control.
 // This file is automatically updated during development when running `dev.ts`.
 
diff --git a/tests/fixture_twind_hydrate/deno.json b/tests/fixture_twind_hydrate/deno.json
index 226bf74767b..f4864075fb9 100644
--- a/tests/fixture_twind_hydrate/deno.json
+++ b/tests/fixture_twind_hydrate/deno.json
@@ -7,7 +7,7 @@
     "$fresh/": "../../",
     "preact": "https://esm.sh/preact@10.11.0",
     "preact/": "https://esm.sh/preact@10.11.0/",
-    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.2.0",
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.2.1",
     "@preact/signals": "https://esm.sh/*@preact/signals@1.0.3",
     "@preact/signals-core": "https://esm.sh/*@preact/signals-core@1.0.1"
   },
diff --git a/tests/fixture_twind_hydrate/fresh.gen.ts b/tests/fixture_twind_hydrate/fresh.gen.ts
index aaffeb2026b..0b15419a4dc 100644
--- a/tests/fixture_twind_hydrate/fresh.gen.ts
+++ b/tests/fixture_twind_hydrate/fresh.gen.ts
@@ -1,4 +1,4 @@
-// DO NOT EDIT. This file is generated by fresh.
+// DO NOT EDIT. This file is generated by Fresh.
 // This file SHOULD be checked into source version control.
 // This file is automatically updated during development when running `dev.ts`.
 
diff --git a/tests/fixture_twind_hydrate/islands/InsertCssrules.tsx b/tests/fixture_twind_hydrate/islands/InsertCssrules.tsx
index 320f8eebda5..beea977b0c5 100644
--- a/tests/fixture_twind_hydrate/islands/InsertCssrules.tsx
+++ b/tests/fixture_twind_hydrate/islands/InsertCssrules.tsx
@@ -50,7 +50,7 @@ export default function InsertCssrules() {
       {/* Status of insert css rules */}
       {(() => {
         if (insertedStyles.value === "") {
-          return <p id="waitClickButton">Plese click button</p>;
+          return <p id="waitClickButton">Please click button</p>;
         } else if (numDefCssRules.value === numCssRules.value) {
           return (
             <p id="errorInsertCssrules">
diff --git a/tests/fixture_twind_hydrate/twind.config.ts b/tests/fixture_twind_hydrate/twind.config.ts
index b218b209548..2dc408ec820 100644
--- a/tests/fixture_twind_hydrate/twind.config.ts
+++ b/tests/fixture_twind_hydrate/twind.config.ts
@@ -1,9 +1,9 @@
-import { defineConfig } from "https://esm.sh/@twind/core@1.1.3";
+import { defineConfig, Preset } from "https://esm.sh/@twind/core@1.1.3";
 import presetTailwind from "https://esm.sh/@twind/preset-tailwind@1.1.4";
 
 export default {
   ...defineConfig({
-    presets: [presetTailwind()],
+    presets: [presetTailwind() as Preset],
   }),
   selfURL: import.meta.url,
 };
diff --git a/tests/fixture_update_check/mod.ts b/tests/fixture_update_check/mod.ts
index 7f98632bb53..d6d7fa57297 100644
--- a/tests/fixture_update_check/mod.ts
+++ b/tests/fixture_update_check/mod.ts
@@ -6,5 +6,15 @@ async function getLatestVersion() {
   return Deno.env.get("LATEST_VERSION") ?? "99.99.999";
 }
 
+// deno-lint-ignore require-await
+async function getCurrentVersion() {
+  return Deno.env.get("CURRENT_VERSION")!;
+}
+
 const interval = +(Deno.env.get("UPDATE_INTERVAL") ?? 1000);
-await updateCheck(interval, () => Deno.env.get("HOME")!, getLatestVersion);
+await updateCheck(
+  interval,
+  () => Deno.env.get("HOME")!,
+  getLatestVersion,
+  Deno.env.has("CURRENT_VERSION") ? getCurrentVersion : undefined,
+);
diff --git a/tests/islands_test.ts b/tests/islands_test.ts
index 8e022f8d348..1f2b0c1de24 100644
--- a/tests/islands_test.ts
+++ b/tests/islands_test.ts
@@ -406,14 +406,10 @@ Deno.test({
         await delay(100);
         await page.click("button");
 
-        const text = await page.$eval(
-          "#page",
-          (el) => el.textContent,
-        );
         // Button text is matched too, but this allows us
-        // to assert correct ordering. The "it works" should
+        // to assert correct ordering. The "island content" should
         // be left of "Toggle"
-        assertEquals(text, "it worksToggle");
+        await waitForText(page, "#page", "island contentToggle");
       },
     );
   },
@@ -478,3 +474,43 @@ Deno.test({
   sanitizeOps: false,
   sanitizeResources: false,
 });
+
+Deno.test({
+  name: "render nested islands with server children conditionally",
+
+  async fn() {
+    await withPageName(
+      "./tests/fixture_island_nesting/main.ts",
+      async (page, address) => {
+        await page.goto(`${address}/island_conditional_lazy`);
+        await waitForText(page, ".island p", "island content");
+
+        await page.click("button");
+        await waitForText(page, ".island p", "server rendered");
+      },
+    );
+  },
+
+  sanitizeOps: false,
+  sanitizeResources: false,
+});
+
+Deno.test({
+  name: "revive island in lazy server rendered children conditionally",
+
+  async fn() {
+    await withPageName(
+      "./tests/fixture_island_nesting/main.ts",
+      async (page, address) => {
+        await page.goto(`${address}/island_conditional_lazy_island`);
+        await waitForText(page, ".island p", "island content");
+
+        await page.click("button");
+        await waitForText(page, ".island .server", "server rendered");
+
+        await page.click("button.counter");
+        await waitForText(page, ".island .count", "1");
+      },
+    );
+  },
+});
diff --git a/tests/layouts_test.ts b/tests/layouts_test.ts
new file mode 100644
index 00000000000..48bcf77cc17
--- /dev/null
+++ b/tests/layouts_test.ts
@@ -0,0 +1,162 @@
+import { assert } from "./deps.ts";
+import {
+  assertNotSelector,
+  assertSelector,
+  fetchHtml,
+  withFresh,
+} from "./test_utils.ts";
+
+Deno.test("apply root _layout and _app", async () => {
+  await withFresh(
+    "./tests/fixture_layouts/main.ts",
+    async (address) => {
+      const doc = await fetchHtml(address);
+      assert(doc.body.textContent?.includes("it works"));
+      assertSelector(doc, ".app .root-layout .home-page");
+
+      const doc2 = await fetchHtml(`${address}/other`);
+      assertSelector(doc2, ".app .root-layout .other-page");
+    },
+  );
+});
+
+Deno.test("apply sub layouts", async () => {
+  await withFresh(
+    "./tests/fixture_layouts/main.ts",
+    async (address) => {
+      const doc = await fetchHtml(`${address}/foo`);
+      assertSelector(doc, ".app .root-layout .foo-layout .foo-page");
+
+      const doc2 = await fetchHtml(`${address}/foo/bar`);
+      assertSelector(doc2, ".app .root-layout .foo-layout .bar-page");
+    },
+  );
+});
+
+Deno.test("skip layouts if not present", async () => {
+  await withFresh(
+    "./tests/fixture_layouts/main.ts",
+    async (address) => {
+      const doc = await fetchHtml(`${address}/skip/sub`);
+      assertSelector(doc, ".app .root-layout .sub-layout .sub-page");
+    },
+  );
+});
+
+Deno.test("check file types", async (t) => {
+  await withFresh(
+    "./tests/fixture_layouts/main.ts",
+    async (address) => {
+      await t.step(".js", async () => {
+        const doc = await fetchHtml(`${address}/files/js`);
+        assertSelector(doc, ".app .root-layout .js-layout .js-page");
+      });
+
+      await t.step(".jsx", async () => {
+        const doc = await fetchHtml(`${address}/files/jsx`);
+        assertSelector(doc, ".app .root-layout .jsx-layout .jsx-page");
+      });
+
+      await t.step(".ts", async () => {
+        const doc = await fetchHtml(`${address}/files/ts`);
+        assertSelector(doc, ".app .root-layout .ts-layout .ts-page");
+      });
+
+      await t.step(".tsx", async () => {
+        const doc = await fetchHtml(`${address}/files/tsx`);
+        assertSelector(doc, ".app .root-layout .tsx-layout .tsx-page");
+      });
+    },
+  );
+});
+
+Deno.test("render async layout", async () => {
+  await withFresh(
+    "./tests/fixture_layouts/main.ts",
+    async (address) => {
+      const doc = await fetchHtml(`${address}/async`);
+      assertSelector(doc, ".app .root-layout .async-layout .async-page");
+    },
+  );
+});
+
+Deno.test("render nested async layout", async () => {
+  await withFresh(
+    "./tests/fixture_layouts/main.ts",
+    async (address) => {
+      const doc = await fetchHtml(`${address}/async/sub`);
+      assertSelector(
+        doc,
+        ".app .root-layout .async-layout .async-sub-layout .async-sub-page",
+      );
+    },
+  );
+});
+
+Deno.test({
+  name: "can return Response from async layout",
+  fn: async () => {
+    await withFresh(
+      "./tests/fixture_layouts/main.ts",
+      async (address) => {
+        const doc = await fetchHtml(`${address}/async/redirect`);
+        assertSelector(
+          doc,
+          ".app .root-layout .async-layout .async-sub-layout .async-sub-page",
+        );
+      },
+    );
+  },
+});
+
+Deno.test("disable _app layout", async () => {
+  await withFresh(
+    "./tests/fixture_layouts/main.ts",
+    async (address) => {
+      const doc = await fetchHtml(`${address}/override/no_app`);
+      assertNotSelector(doc, "body body");
+      assertSelector(doc, "body > .override-layout >.no-app");
+    },
+  );
+});
+
+Deno.test("disable _app in _layout", async () => {
+  await withFresh(
+    "./tests/fixture_layouts/main.ts",
+    async (address) => {
+      const doc = await fetchHtml(`${address}/override/layout_no_app`);
+      assertNotSelector(doc, "body body");
+      assertSelector(doc, "body > .override-layout > .no-app-layout > .page");
+    },
+  );
+});
+
+Deno.test("override layouts", async () => {
+  await withFresh(
+    "./tests/fixture_layouts/main.ts",
+    async (address) => {
+      const doc = await fetchHtml(`${address}/override`);
+      assertSelector(doc, "body > .app > .override-layout > .override-page");
+    },
+  );
+});
+
+Deno.test("route overrides layout", async () => {
+  await withFresh(
+    "./tests/fixture_layouts/main.ts",
+    async (address) => {
+      const doc = await fetchHtml(`${address}/override/no_layout`);
+      assertSelector(doc, "body > .app > .no-layouts");
+    },
+  );
+});
+
+Deno.test("route overrides layout and app", async () => {
+  await withFresh(
+    "./tests/fixture_layouts/main.ts",
+    async (address) => {
+      const doc = await fetchHtml(`${address}/override/no_layout_no_app`);
+      assertSelector(doc, "body > .no-app-no-layouts");
+    },
+  );
+});
diff --git a/tests/main_test.ts b/tests/main_test.ts
index a44c5c648ea..8981d6a3ed3 100644
--- a/tests/main_test.ts
+++ b/tests/main_test.ts
@@ -2,15 +2,25 @@ import { ServerContext, Status } from "../server.ts";
 import {
   assert,
   assertEquals,
+  assertMatch,
   assertStringIncludes,
   delay,
   puppeteer,
+  retry,
 } from "./deps.ts";
 import manifest from "./fixture/fresh.gen.ts";
 import options from "./fixture/options.ts";
 import { BUILD_ID } from "../src/server/build_id.ts";
-import { startFreshServer, withPageName } from "./test_utils.ts";
-import { assertMatch } from "https://deno.land/std@0.193.0/testing/asserts.ts";
+import {
+  assertSelector,
+  assertTextMany,
+  fetchHtml,
+  parseHtml,
+  startFreshServer,
+  waitForText,
+  withFresh,
+  withPageName,
+} from "./test_utils.ts";
 
 const ctx = await ServerContext.fromManifest(manifest, options);
 const handler = ctx.handler();
@@ -48,10 +58,15 @@ Deno.test("/props/123 page prerender", async () => {
   assertEquals(resp.status, Status.OK);
   assertEquals(resp.headers.get("content-type"), "text/html; charset=utf-8");
   const body = await resp.text();
-  assertStringIncludes(
-    body,
-    `{&quot;params&quot;:{&quot;id&quot;:&quot;123&quot;},&quot;url&quot;:&quot;https://fresh.deno.dev/props/123&quot;,&quot;route&quot;:&quot;/props/:id&quot;,&quot;state&quot;:{&quot;root&quot;:&quot;root_mw&quot;}}`,
-  );
+  const doc = parseHtml(body);
+  const data = JSON.parse(doc.querySelector("body > div").textContent);
+
+  assertEquals(data, {
+    "params": { "id": "123" },
+    "url": "https://fresh.deno.dev/props/123",
+    "route": "/props/:id",
+    "state": { "root": "root_mw" },
+  });
 });
 
 Deno.test("/greet/[name] page prerender", async () => {
@@ -353,7 +368,7 @@ Deno.test("static file - by 'hashed' path", async () => {
   assert(imgFilePath);
   assert(imgFilePath.includes(`?__frsh_c=${BUILD_ID}`));
 
-  // check the static file is served corectly under its cacheable route
+  // check the static file is served correctly under its cacheable route
   const resp2 = await handler(
     new Request(`https://fresh.deno.dev${imgFilePath}`),
   );
@@ -558,11 +573,30 @@ Deno.test({
     assertEquals(resp.headers.get("layer3"), "fresh test server layer3");
     // the below ensure that the middlewware are applied in the correct order.
     // i.e response header set from layer3 middleware is overwritten
-    // by the reponse header in layer 0
+    // by the response header in layer 0
     assertEquals(resp.headers.get("server"), "fresh test server");
   },
 });
 
+Deno.test({
+  name: "/middleware - should pass state through all middlewares",
+  fn: async () => {
+    const resp = await handler(
+      new Request("https://fresh.deno.dev/state-middleware/foo"),
+    );
+    assert(resp);
+    assertEquals(resp.status, Status.OK);
+
+    const body = await resp.text();
+    const doc = parseHtml(body);
+    assertEquals(JSON.parse(doc.querySelector("pre").textContent), {
+      handler1: "it works",
+      handler2: "it works",
+      handler3: "it works",
+    });
+  },
+});
+
 Deno.test({
   name: "/middleware - middlewareParams",
   fn: async () => {
@@ -612,6 +646,7 @@ Deno.test({
     const body = await resp.text();
     assertStringIncludes(body, "404 not found: /not_found");
     assertStringIncludes(body, "Hello Dino");
+    assertStringIncludes(body, "State root: root_mw");
   },
 });
 
@@ -824,41 +859,21 @@ Deno.test("throw on route export 'handlers' instead of 'handler'", {
   assertMatch(text, /Did you mean "handler"\?/);
 });
 
-Deno.test("rendering custom _500.tsx page for default handlers", {
-  sanitizeOps: false,
-  sanitizeResources: false,
-}, async (t) => {
-  // Preparation
-  const { serverProcess, lines, address } = await startFreshServer({
-    args: ["run", "-A", "./tests/fixture_custom_500/main.ts"],
-  });
-
-  await delay(100);
-
-  await t.step("SSR error is shown", async () => {
-    const resp = await fetch(address);
-    assertEquals(resp.status, Status.InternalServerError);
-    const text = await resp.text();
-    assertStringIncludes(text, "Custom 500: Pickle Rick!");
-  });
-
-  const browser = await puppeteer.launch({ args: ["--no-sandbox"] });
-  const page = await browser.newPage();
-
-  await page.goto(address, {
-    waitUntil: "networkidle2",
-  });
+Deno.test("rendering custom _500.tsx page for default handlers", async (t) => {
+  await withFresh("./tests/fixture_custom_500/main.ts", async (address) => {
+    await t.step("SSR error is shown", async () => {
+      const resp = await fetch(address);
+      assertEquals(resp.status, Status.InternalServerError);
+      const text = await resp.text();
+      assertStringIncludes(text, "Custom 500: Pickle Rick!");
+    });
 
-  await t.step("error page is shown with error message", async () => {
-    const el = await page.waitForSelector(".custom-500");
-    const text = await page.evaluate((el) => el.textContent, el);
-    assertStringIncludes(text, "Custom 500: Pickle Rick!");
+    await t.step("error page is shown with error message", async () => {
+      const doc = await fetchHtml(address);
+      const text = doc.querySelector(".custom-500")?.textContent!;
+      assertStringIncludes(text, "Custom 500: Pickle Rick!");
+    });
   });
-
-  await browser.close();
-
-  await lines.cancel();
-  serverProcess.kill("SIGTERM");
 });
 
 Deno.test("renders error boundary", {
@@ -872,24 +887,52 @@ Deno.test("renders error boundary", {
   });
 });
 
-Deno.test({
-  name: "Resolves routes with non-latin characters",
+Deno.test("Resolves routes with non-latin characters", async () => {
+  await withFresh("./tests/fixture/main.ts", async (address) => {
+    // Check that we can navigate to the page
+    const doc = await fetchHtml(`${address}/umlaut-√§√∂√º√ü`);
+    assertSelector(doc, "h1");
+    assertTextMany(doc, "h1", ["it works"]);
+
+    // Check the manifest
+    const mod = (await import("./fixture/fresh.gen.ts")).default;
 
+    assert(
+      "./routes/umlaut-√§√∂√º√ü.tsx" in mod.routes,
+      "Umlaut route not found",
+    );
+  });
+});
+
+Deno.test("Generate a single nonce value per page", async () => {
+  await withFresh("./tests/fixture/main.ts", async (address) => {
+    const doc = await fetchHtml(address);
+
+    const nonceValues = Array.from(
+      new Set(
+        Array.from(doc.querySelectorAll("[nonce]")).map((el) =>
+          el.getAttribute("nonce")
+        ),
+      ),
+    );
+
+    assertEquals(
+      nonceValues.length,
+      1,
+      `Found more than 1 nonce value per render`,
+    );
+  });
+});
+
+Deno.test({
+  name: "support string based event handlers during SSR",
   async fn() {
     await withPageName("./tests/fixture/main.ts", async (page, address) => {
-      // Check that we can navigate to the page
-      await page.goto(`${address}/umlaut-√§√∂√º√ü`);
-      await page.waitForSelector("h1");
-      const text = await page.$eval("h1", (el) => el.textContent);
-      assertEquals(text, "it works");
-
-      // Check the manifest
-      const mod = (await import("./fixture/fresh.gen.ts")).default;
-
-      assert(
-        "./routes/umlaut-√§√∂√º√ü.tsx" in mod.routes,
-        "Umlaut route not found",
-      );
+      await page.goto(`${address}/event_handler_string`);
+      await page.waitForSelector("p");
+      await page.click("button");
+
+      await waitForText(page, "p", "it works");
     });
   },
 
@@ -898,28 +941,30 @@ Deno.test({
 });
 
 Deno.test({
-  name: "Generate a single nonce value per page",
-
+  name: "Log error in browser console on string event handlers",
   async fn() {
     await withPageName("./tests/fixture/main.ts", async (page, address) => {
-      await page.goto(address);
-      await page.waitForSelector("p");
+      const logs: { type: string; message: string }[] = [];
+      page.on("console", (ev) => {
+        logs.push({ type: ev.type(), message: ev.text() });
+      });
 
-      const nonceValues = await page.evaluate(() =>
-        Array.from(
-          new Set(
-            Array.from(document.querySelectorAll("[nonce]")).map((el) =>
-              el.getAttribute("nonce")
-            ),
-          ),
-        )
-      );
-
-      assertEquals(
-        nonceValues.length,
-        1,
-        `Found more than 1 nonce value per render`,
-      );
+      page.on("pageerror", (ev) => {
+        logs.push({ type: "error", message: ev.toString() });
+      });
+
+      await page.goto(`${address}/event_handler_string_island`);
+      await page.waitForSelector("p");
+      await page.click("button");
+      await waitForText(page, "p", "it works");
+
+      await retry(() => {
+        for (const item of logs) {
+          if (/property should be a function/.test(item.message)) {
+            return true;
+          }
+        }
+      });
     });
   },
 
diff --git a/tests/plugin_test.ts b/tests/plugin_test.ts
index 8bb225a9680..999215bf7fc 100644
--- a/tests/plugin_test.ts
+++ b/tests/plugin_test.ts
@@ -68,6 +68,32 @@ Deno.test("plugin routes and middleware", async () => {
   );
 });
 
+Deno.test("plugin middleware multiple handlers", async () => {
+  const resp = await router(
+    new Request("https://fresh.deno.dev/lots-of-middleware"),
+  );
+  assert(resp);
+  assertEquals(resp.status, Status.OK);
+  const body = await resp.text();
+  assertStringIncludes(
+    body,
+    `<h1>3</h1>`,
+  );
+});
+
+Deno.test("plugin route no leading slash", async () => {
+  const resp = await router(
+    new Request("https://fresh.deno.dev/no-leading-slash-here"),
+  );
+  assert(resp);
+  assertEquals(resp.status, Status.OK);
+  const body = await resp.text();
+  assertStringIncludes(
+    body,
+    `<div>Hello</div>`,
+  );
+});
+
 Deno.test({
   name: "/with-island hydration",
   async fn(t) {
diff --git a/tests/render_test.ts b/tests/render_test.ts
new file mode 100644
index 00000000000..9b143fd8f6a
--- /dev/null
+++ b/tests/render_test.ts
@@ -0,0 +1,28 @@
+import {
+  assertSelector,
+  fetchHtml,
+  withFresh,
+} from "$fresh/tests/test_utils.ts";
+import { assertEquals } from "$std/testing/asserts.ts";
+
+Deno.test("doesn't leak data across renderers", async () => {
+  // Issue: https://github.com/denoland/fresh/issues/1636
+  await withFresh("./tests/fixture/main.ts", async (address) => {
+    function load(name: string) {
+      return fetchHtml(`${address}/admin/${name}`).then((doc) => {
+        assertSelector(doc, "#__FRSH_STATE");
+        const text = doc.querySelector("#__FRSH_STATE")?.textContent!;
+        const json = JSON.parse(text);
+        assertEquals(json, { "v": [[{ "site": name }], []] });
+      });
+    }
+
+    const promises: Promise<void>[] = [];
+    for (let i = 0; i < 100; i++) {
+      promises.push(load("foo"));
+      promises.push(load("bar"));
+    }
+
+    await Promise.all(promises);
+  });
+});
diff --git a/tests/route_analysis_test.ts b/tests/route_analysis_test.ts
index ec457e0d816..27c0c9f60aa 100644
--- a/tests/route_analysis_test.ts
+++ b/tests/route_analysis_test.ts
@@ -1,6 +1,9 @@
 import { startFreshServerExpectErrors } from "./test_utils.ts";
 import { dirname, join } from "$std/path/mod.ts";
 import { assertStringIncludes } from "./deps.ts";
+import { ServerContext } from "$fresh/server.ts";
+import manifest from "./fixture/fresh.gen.ts";
+import { assertEquals } from "$std/testing/asserts.ts";
 
 const dir = dirname(import.meta.url);
 
@@ -16,3 +19,25 @@ Deno.test({
     );
   },
 });
+
+Deno.test("match route parameter and static", async () => {
+  const handler = (await ServerContext.fromManifest(manifest, {})).handler();
+
+  const res = await handler(
+    new Request("https://fresh.deno.dev/movies/foo.json"),
+  );
+
+  assertEquals(await res.text(), "it works");
+  assertEquals(res.status, 200);
+});
+
+Deno.test("match multiple route parameters", async () => {
+  const handler = (await ServerContext.fromManifest(manifest, {})).handler();
+
+  const res = await handler(
+    new Request("https://fresh.deno.dev/movies/foo@bar"),
+  );
+
+  assertEquals(await res.text(), "it works");
+  assertEquals(res.status, 200);
+});
diff --git a/tests/route_groups_test.ts b/tests/route_groups_test.ts
new file mode 100644
index 00000000000..6a44d31b8e2
--- /dev/null
+++ b/tests/route_groups_test.ts
@@ -0,0 +1,73 @@
+import { assertEquals } from "$std/testing/asserts.ts";
+import {
+  assertTextMany,
+  fetchHtml,
+  waitForText,
+  withFresh,
+  withPageName,
+} from "./test_utils.ts";
+
+Deno.test("applies only _layout file of one group", async () => {
+  await withFresh(
+    "./tests/fixture/main.ts",
+    async (address) => {
+      const doc = await fetchHtml(`${address}/route-groups`);
+
+      assertTextMany(doc, "p", ["Foo layout", "Foo page"]);
+    },
+  );
+});
+
+Deno.test("applies only _layout files in parent groups", async () => {
+  await withFresh(
+    "./tests/fixture/main.ts",
+    async (address) => {
+      const doc = await fetchHtml(`${address}/route-groups/baz`);
+      assertTextMany(doc, "p", ["Bar layout", "Baz layout", "Baz page"]);
+    },
+  );
+});
+
+Deno.test("applies only _layout files in parent groups #2", async () => {
+  await withFresh(
+    "./tests/fixture/main.ts",
+    async (address) => {
+      const doc = await fetchHtml(`${address}/route-groups/boof`);
+      assertTextMany(doc, "p", ["Bar layout", "Boof Page"]);
+    },
+  );
+});
+
+Deno.test("can co-locate islands inside routes folder", async () => {
+  await withPageName(
+    "./tests/fixture/main.ts",
+    async (page, address) => {
+      await page.goto(`${address}/route-groups-islands/`);
+      await page.waitForSelector("button");
+      await page.click("button");
+      await waitForText(page, "p", "1");
+    },
+  );
+});
+
+Deno.test("does not treat files in (_islands) as routes", async () => {
+  await withFresh(
+    "./tests/fixture/main.ts",
+    async (address) => {
+      const res = await fetch(`${address}/route-groups-islands/invalid`);
+      assertEquals(res.status, 404);
+      res.body?.cancel();
+    },
+  );
+});
+
+Deno.test("does not treat files in (_...) as routes", async () => {
+  await withFresh(
+    "./tests/fixture/main.ts",
+    async (address) => {
+      const res = await fetch(`${address}/route-groups-islands/sub`);
+      assertEquals(res.status, 404);
+      res.body?.cancel();
+    },
+  );
+});
diff --git a/tests/server_components_test.ts b/tests/server_components_test.ts
index 860a09101f8..1ee3fc5ac42 100644
--- a/tests/server_components_test.ts
+++ b/tests/server_components_test.ts
@@ -1,19 +1,22 @@
 import { assertEquals } from "./deps.ts";
-import { startFreshServer, withPageName } from "./test_utils.ts";
+import {
+  assertSelector,
+  assertTextMany,
+  fetchHtml,
+  withFresh,
+  withPageName,
+} from "./test_utils.ts";
 import { Status } from "../server.ts";
 
 Deno.test({
   name: "render async server component",
 
   async fn() {
-    await withPageName(
+    await withFresh(
       "./tests/fixture_server_components/main.ts",
-      async (page, address) => {
-        await page.goto(`${address}/basic`);
-
-        await page.waitForSelector("h1");
-        const text = await page.$eval("h1", (el) => el.textContent);
-        assertEquals(text, "it works");
+      async (address) => {
+        const doc = await fetchHtml(`${address}/basic`);
+        assertTextMany(doc, "h1", ["it works"]);
       },
     );
   },
@@ -26,12 +29,11 @@ Deno.test({
   name: "uses returned response",
 
   async fn() {
-    await withPageName(
+    await withFresh(
       "./tests/fixture_server_components/main.ts",
-      async (page, address) => {
-        await page.goto(`${address}/response`);
-
-        const text = await page.$eval("body", (el) => el.textContent);
+      async (address) => {
+        const res = await fetch(`${address}/response`);
+        const text = await res.text();
         assertEquals(text, "it works");
       },
     );
@@ -69,43 +71,41 @@ Deno.test({
   name: "passes context to server component",
 
   async fn() {
-    const { lines, serverProcess, address } = await startFreshServer({
-      args: ["run", "-A", "./tests/fixture_server_components/main.ts"],
-    });
-
-    const res = await fetch(`${address}/context/foo`);
-    const json = await res.json();
-
-    assertEquals(typeof json.localAddr, "object");
-    assertEquals(typeof json.remoteAddr, "object");
-    json.localAddr.port = 8000;
-    json.remoteAddr.port = 8000;
-
-    assertEquals(
-      json,
-      {
-        localAddr: {
-          hostname: "localhost",
-          port: 8000,
-          transport: "tcp",
-        },
-        remoteAddr: {
-          hostname: "localhost",
-          port: 8000,
-          transport: "tcp",
-        },
-        renderNotFound: "AsyncFunction",
-        url: `${address}/context/foo`,
-        route: "/context/:id",
-        params: {
-          id: "foo",
-        },
-        state: {},
+    await withFresh(
+      "./tests/fixture_server_components/main.ts",
+      async (address) => {
+        const res = await fetch(`${address}/context/foo`);
+        const json = await res.json();
+
+        assertEquals(typeof json.localAddr, "object");
+        assertEquals(typeof json.remoteAddr, "object");
+        json.localAddr.port = 8000;
+        json.remoteAddr.port = 8000;
+
+        assertEquals(
+          json,
+          {
+            localAddr: {
+              hostname: "localhost",
+              port: 8000,
+              transport: "tcp",
+            },
+            remoteAddr: {
+              hostname: "localhost",
+              port: 8000,
+              transport: "tcp",
+            },
+            renderNotFound: "AsyncFunction",
+            url: `${address}/context/foo`,
+            route: "/context/:id",
+            params: {
+              id: "foo",
+            },
+            state: {},
+          },
+        );
       },
     );
-    await lines.cancel();
-    serverProcess.kill("SIGTERM");
-    await serverProcess.status;
   },
 
   sanitizeOps: false,
@@ -116,19 +116,16 @@ Deno.test({
   name: "can call context.renderNotFound()",
 
   async fn() {
-    const { lines, serverProcess, address } = await startFreshServer({
-      args: ["run", "-A", "./tests/fixture_server_components/main.ts"],
-    });
-
-    const res = await fetch(`${address}/fail`);
-
-    assertEquals(res.status, Status.NotFound);
-    const html = await res.text();
-    assertEquals(html, "Not found.");
+    await withFresh(
+      "./tests/fixture_server_components/main.ts",
+      async (address) => {
+        const res = await fetch(`${address}/fail`);
 
-    await lines.cancel();
-    serverProcess.kill("SIGTERM");
-    await serverProcess.status;
+        assertEquals(res.status, Status.NotFound);
+        const html = await res.text();
+        assertEquals(html, "Not found.");
+      },
+    );
   },
 
   sanitizeOps: false,
@@ -160,3 +157,28 @@ Deno.test({
   sanitizeOps: false,
   sanitizeResources: false,
 });
+
+Deno.test({
+  name: "renders async app template",
+
+  async fn() {
+    await withFresh(
+      "./tests/fixture_async_app/main.ts",
+      async (address) => {
+        const doc = await fetchHtml(`${address}`);
+        assertSelector(doc, "html > body > .app > .layout > .page");
+      },
+    );
+  },
+});
+
+Deno.test("define helpers", async () => {
+  await withFresh(
+    "./tests/fixture_define_helpers/main.ts",
+    async (address) => {
+      const doc = await fetchHtml(`${address}`);
+      assertSelector(doc, "html > body > .app > .layout > .page");
+      assertTextMany(doc, "p", ["Layout: it works", "Page: it works"]);
+    },
+  );
+});
diff --git a/tests/signal_test.ts b/tests/signal_test.ts
new file mode 100644
index 00000000000..31e7f49aa85
--- /dev/null
+++ b/tests/signal_test.ts
@@ -0,0 +1,22 @@
+import { waitForText, withPageName } from "./test_utils.ts";
+
+Deno.test({
+  name: "serializes shared signal references",
+  async fn() {
+    await withPageName("./tests/fixture/main.ts", async (page, address) => {
+      await page.goto(`${address}/signal_shared`);
+      await page.waitForSelector("#counter-1");
+
+      await page.click("#b-counter-1");
+      await waitForText(page, "#counter-1 p", "2");
+      await waitForText(page, "#counter-2 p", "2");
+
+      await page.click("#b-counter-2");
+      await waitForText(page, "#counter-1 p", "3");
+      await waitForText(page, "#counter-2 p", "3");
+    });
+  },
+
+  sanitizeOps: false,
+  sanitizeResources: false,
+});
diff --git a/tests/test_utils.ts b/tests/test_utils.ts
index 66ef05b5a93..40dd446a765 100644
--- a/tests/test_utils.ts
+++ b/tests/test_utils.ts
@@ -1,13 +1,150 @@
-import { delay, Page, puppeteer, TextLineStream } from "./deps.ts";
+import { colors } from "$fresh/src/server/deps.ts";
+import {
+  assertEquals,
+  delay,
+  DOMParser,
+  HTMLElement,
+  HTMLMetaElement,
+  Page,
+  puppeteer,
+  TextLineStream,
+} from "./deps.ts";
+
+export function parseHtml(input: string) {
+  return new DOMParser().parseFromString(input, "text/html");
+}
 
 export async function startFreshServer(options: Deno.CommandOptions) {
-  const { serverProcess, lines, address } = await spawnServer(options);
+  const { serverProcess, lines, address, output } = await spawnServer(options);
 
   if (!address) {
     throw new Error("Server didn't start up");
   }
 
-  return { serverProcess, lines, address };
+  return { serverProcess, lines, address, output };
+}
+
+export async function fetchHtml(url: string) {
+  const res = await fetch(url);
+  const html = await res.text();
+  // deno-lint-ignore no-explicit-any
+  return new DOMParser().parseFromString(html, "text/html") as any as Document;
+}
+
+export function assertSelector(doc: Document, selector: string) {
+  if (doc.querySelector(selector) === null) {
+    const html = prettyDom(doc);
+    throw new Error(
+      `Selector "${selector}" not found in document.\n\n${html}`,
+    );
+  }
+}
+
+export function assertNotSelector(doc: Document, selector: string) {
+  if (doc.querySelector(selector) !== null) {
+    const html = prettyDom(doc);
+    throw new Error(
+      `Selector "${selector}" found in document.\n\n${html}`,
+    );
+  }
+}
+
+export function assertTextMany(
+  doc: Document,
+  selector: string,
+  expected: string[],
+) {
+  const texts = Array.from(doc.querySelectorAll(selector)).map((el) =>
+    el.textContent
+  );
+
+  try {
+    assertEquals(texts, expected);
+  } catch (err) {
+    const html = "\n\n" + prettyDom(doc);
+    throw new err.constructor(err.message += html, { cause: err });
+  }
+}
+
+export const VOID_ELEMENTS =
+  /^(?:area|base|br|col|embed|hr|img|input|link|meta|param|source|track|wbr)$/;
+function prettyDom(doc: Document) {
+  let out = colors.dim(`<!DOCTYPE ${doc.doctype?.name ?? ""}>\n`);
+  console.log(out);
+
+  const node = doc.documentElement;
+  out += _printDomNode(node, 0);
+
+  return out;
+}
+
+function _printDomNode(
+  node: HTMLElement | Text | Node,
+  indent: number,
+) {
+  const space = "  ".repeat(indent);
+
+  if (node.nodeType === 3) {
+    return space + colors.dim(node.textContent ?? "") + "\n";
+  }
+
+  let out = space;
+  if (node instanceof HTMLElement || node instanceof HTMLMetaElement) {
+    out += colors.dim(colors.cyan("<"));
+    out += colors.cyan(node.localName);
+
+    for (let i = 0; i < node.attributes.length; i++) {
+      const attr = node.attributes.item(i);
+      if (attr === null) continue;
+      out += " " + colors.yellow(attr.name);
+      out += colors.dim("=");
+      out += colors.green(`"${attr.value}"`);
+    }
+
+    if (VOID_ELEMENTS.test(node.localName)) {
+      out += colors.dim(colors.cyan(">")) + "\n";
+      return out;
+    }
+
+    out += colors.dim(colors.cyan(">"));
+    if (node.childNodes.length) {
+      out += "\n";
+
+      for (let i = 0; i < node.childNodes.length; i++) {
+        const child = node.childNodes[i];
+        out += _printDomNode(child, indent + 1);
+      }
+
+      out += space;
+    }
+
+    out += colors.dim(colors.cyan("</"));
+    out += colors.cyan(node.localName);
+    out += colors.dim(colors.cyan(">"));
+    out += "\n";
+  }
+
+  return out;
+}
+
+export async function withFresh(
+  name: string,
+  fn: (address: string) => Promise<void>,
+) {
+  const { lines, serverProcess, address } = await startFreshServer({
+    args: ["run", "-A", name],
+  });
+
+  try {
+    await fn(address);
+  } finally {
+    await lines.cancel();
+
+    serverProcess.kill("SIGTERM");
+
+    // Wait until the process exits
+    await serverProcess.status;
+  }
 }
 
 export async function withPageName(
@@ -122,8 +259,10 @@ async function spawnServer(
       preventCancel: true,
     });
 
+  const output: string[] = [];
   let address = "";
   for await (const line of lines) {
+    output.push(line);
     const match = line.match(/https?:\/\/localhost:\d+/g);
     if (match) {
       address = match[0];
@@ -131,5 +270,5 @@ async function spawnServer(
     }
   }
 
-  return { serverProcess, lines, address };
+  return { serverProcess, lines, address, output };
 }
diff --git a/tests/twind_test.ts b/tests/twind_test.ts
index 37ab178a12e..741ff8c4924 100644
--- a/tests/twind_test.ts
+++ b/tests/twind_test.ts
@@ -1,5 +1,4 @@
-import { assertEquals } from "https://deno.land/std@0.190.0/testing/asserts.ts";
-import { assert, delay, puppeteer } from "./deps.ts";
+import { assert, assertEquals, delay, puppeteer } from "./deps.ts";
 
 import { cmpStringArray } from "./fixture_twind_hydrate/utils/utils.ts";
 import { startFreshServer, withPageName } from "./test_utils.ts";
@@ -58,7 +57,7 @@ Deno.test({
 
     /**
      * Compare the class of element of any id with the selectorText of cssrules in stylesheet.
-     * Ensure that twind compliles the class of element.
+     * Ensure that twind compiles the class of element.
      */
     async function compiledCssRulesTest(id: string, styleId: string) {
       const elemClassList = await page.evaluate((selector) => {
diff --git a/update.ts b/update.ts
index 2830214e547..bd6dc306214 100644
--- a/update.ts
+++ b/update.ts
@@ -1,7 +1,10 @@
 import {
+  basename,
   dirname,
   existsSync,
+  extname,
   join,
+  JSONC,
   Node,
   parse,
   Project,
@@ -49,7 +52,15 @@ if (!DENO_JSON_PATH) {
   );
 }
 let denoJsonText = await Deno.readTextFile(DENO_JSON_PATH);
-let denoJson = JSON.parse(denoJsonText);
+const ext = extname(DENO_JSON_PATH);
+let denoJson;
+if (ext === ".json") {
+  denoJson = JSON.parse(denoJsonText);
+} else if (ext === ".jsonc") {
+  denoJson = JSONC.parse(denoJsonText);
+} else {
+  throw new Error(`Unsupported file extension: ${ext}`);
+}
 if (denoJson.importMap) {
   const IMPORT_MAP_PATH = join(resolvedDirectory, denoJson.importMap);
   const importMapText = await Deno.readTextFile(IMPORT_MAP_PATH);
@@ -60,7 +71,7 @@ if (denoJson.importMap) {
   await Deno.remove(IMPORT_MAP_PATH);
 }
 
-// Add fresh lint preset
+// Add Fresh lint preset
 if (!denoJson.lint) {
   denoJson.lint = {};
 }
@@ -77,6 +88,16 @@ if (!denoJson.lint.rules.tags.includes("recommended")) {
   denoJson.lint.rules.tags.push("recommended");
 }
 
+if (!denoJson.tasks) {
+  denoJson.tasks = {};
+}
+if (!denoJson.tasks.build) {
+  denoJson.tasks.build = "deno run -A dev.ts build";
+}
+if (!denoJson.tasks.preview) {
+  denoJson.tasks.preview = "deno run -A main.ts";
+}
+
 freshImports(denoJson.imports);
 if (denoJson.imports["twind"]) {
   twindImports(denoJson.imports);
@@ -220,6 +241,34 @@ await start(manifest, { plugins: [twindPlugin(twindConfig)] });\n`;
   }
 }
 
+// Add default _app.tsx if not present
+const routes = Array.from(Deno.readDirSync(join(srcDirectory, "routes")));
+if (!routes.find((entry) => entry.isFile && entry.name.startsWith("_app."))) {
+  const APP_TSX = `import { AppProps } from "$fresh/server.ts";
+
+export default function App({ Component }: AppProps) {
+  return (
+    <html>
+      <head>
+        <meta charSet="utf-8" />
+        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
+        <title>${basename(resolvedDirectory)}</title>
+      </head>
+      <body>
+        <Component />
+      </body>
+    </html>
+  );
+}`;
+  await Deno.writeTextFile(
+    join(srcDirectory, "routes", "_app.tsx"),
+    APP_TSX,
+  );
+}
+
+console.log(routes);
+// await Deno.writeTextFile(MAIN_TS_PATH, MAIN_TS);
+
 const manifest = await collect(srcDirectory);
 await generate(srcDirectory, manifest);
 
diff --git a/versions.json b/versions.json
index d8eb84c24d0..2a6082d1454 100644
--- a/versions.json
+++ b/versions.json
@@ -1,4 +1,5 @@
 [
+  "1.4.0",
   "1.3.1",
   "1.3.0",
   "1.2.0",
diff --git a/www/README.md b/www/README.md
index ad2d4320b64..36526ded00c 100644
--- a/www/README.md
+++ b/www/README.md
@@ -1,6 +1,6 @@
-# fresh website
+# Fresh website
 
-This is the fresh website source. The fresh website contains:
+This is the Fresh website source. The Fresh website contains:
 
 - a homepage
 - a documentation page
diff --git a/www/components/DocsSidebar.tsx b/www/components/DocsSidebar.tsx
index 47eb988e457..4583496d17d 100644
--- a/www/components/DocsSidebar.tsx
+++ b/www/components/DocsSidebar.tsx
@@ -52,7 +52,7 @@ export default function DocsSidebar(
             </span>
           </button>
         )
-        : <SearchButton class="lg:hidden" />}
+        : <SearchButton />}
 
       <div class="mb-4">
         <VersionSelect
@@ -61,17 +61,17 @@ export default function DocsSidebar(
         />
       </div>
 
-      <ol class="list-decimal list-inside font-semibold nested ml-2.5">
+      <ul class="list-inside font-semibold nested ml-2.5">
         {CATEGORIES[props.selectedVersion].map((category) => (
           <SidebarCategory path={props.path} category={category} />
         ))}
-      </ol>
+      </ul>
     </>
   );
 }
 
 const link = "text(gray-900 hover:gray-600)";
-const linkActive = "text(green-600 hover:green-500) font-bold";
+const linkActive = "text-green-700 hover:underline font-bold";
 
 export function SidebarCategory(props: {
   path: string;
@@ -87,11 +87,11 @@ export function SidebarCategory(props: {
         {title}
       </a>
       {entries.length > 0 && (
-        <ol class="pb-2 pl-4 list-decimal nested list-outside">
+        <ul class="py-2 pl-4 nested list-outside">
           {entries.map((entry) => (
             <SidebarEntry path={props.path} entry={entry} />
           ))}
-        </ol>
+        </ul>
       )}
     </li>
   );
diff --git a/www/components/DocsTitle.tsx b/www/components/DocsTitle.tsx
index aad07ee36b1..07abce35bc8 100644
--- a/www/components/DocsTitle.tsx
+++ b/www/components/DocsTitle.tsx
@@ -10,9 +10,9 @@ export default function DocsTitle(props: { title: string }) {
           preserveAspectRatio="xMinYMin"
           viewBox="0 0 250 75"
           fill="none"
-          alt="Fresh logo"
           xmlns="http://www.w3.org/2000/svg"
           class="h-5 inline-block"
+          aria-label="Fresh logo"
         >
           <path
             d="M14.0805 0.761269V70.0893H0V0.761269H14.0805ZM35.6322 30.2257V41.7803H10.3448V30.2257H35.6322ZM38.5057 0.761269V12.3159H10.3448V0.761269H38.5057ZM46.5517 0.761269H68.9655C73.5632 0.761269 77.5862 1.62785 80.7471 3.36105C83.908 4.80538 86.4943 7.11632 88.2184 10.2939C90.1641 13.8269 91.1548 17.8107 91.092 21.8485C91.092 25.6038 90.5172 28.7813 89.3678 31.3811C88.5057 34.2698 87.069 36.2919 85.0575 38.0251C83.046 39.7583 81.0345 40.9137 78.4483 42.3581L74.1379 44.669H56.0345V33.1143H68.3908C70.0971 33.2247 71.7975 32.8225 73.2759 31.9589C74.4253 31.0923 75.2874 29.9368 76.1494 28.4925C76.8253 26.6458 77.1186 24.6798 77.0115 22.7151C77.0115 20.6931 76.7241 18.9599 76.1494 17.2267C75.5747 15.7823 74.7126 14.338 73.2759 13.7603C72.4138 12.8937 70.6897 12.3159 68.9655 12.3159H60.3448V70.0893H46.5517V0.761269V0.761269ZM78.1609 70.0893L65.5172 39.1805H79.8851L93.1035 69.5115V70.0893H78.1609ZM140.517 58.5346V70.0893H110.345V58.5346H140.517ZM114.655 0.761269V70.0893H100.575V0.761269H114.943H114.655ZM136.494 29.0702V40.0471H110.345V29.0702H136.207H136.494ZM140.517 0.761269V12.3159H110.345V0.761269H140.517ZM178.161 51.8907C178.161 50.7352 178.161 49.5797 177.586 48.7131C177.586 47.5577 177.012 46.6911 176.149 45.8245L173.276 42.9358L167.816 40.6249L160.345 37.1585L154.023 32.8255C152.021 31.2537 150.359 29.2878 149.138 27.0481C148.066 24.5949 147.574 21.9252 147.701 19.2487C147.701 16.3601 147.989 13.4714 149.138 11.4493C150.166 9.00506 151.739 6.83084 153.736 5.09427C155.747 3.64994 158.046 2.20559 160.632 1.33899C167.362 -0.855543 174.677 -0.337717 181.034 2.78333C184.483 4.51653 186.782 7.11632 188.793 10.2939C190.517 13.1825 191.667 17.2267 191.667 21.2708H177.299C177.424 19.5169 177.229 17.7548 176.724 16.0712C176.149 14.6269 175.287 13.1825 173.851 12.6048C172.701 11.7382 170.977 11.1605 169.253 11.1605C167.529 11.1605 166.092 11.7382 164.943 12.3159C163.793 12.8937 162.931 14.0491 162.069 15.2046L161.494 19.2487C161.494 20.4042 161.782 21.5597 162.356 22.4263L164.655 24.7372C167.235 26.2818 169.924 27.6335 172.701 28.7813L181.034 32.8255C183.199 34.2594 185.136 36.0121 186.782 38.0251C188.793 39.7583 189.655 41.7803 190.805 43.8024C192.605 48.9619 192.503 54.5998 190.517 59.6901C189.368 62.001 187.931 64.0231 186.207 65.7563C184.115 67.5878 181.669 68.9647 179.023 69.8004C173.276 71.2447 176.149 75 170.402 75C164.655 75 166.667 70.667 161.207 69.8004C158.333 68.9338 155.46 67.4895 153.448 65.7563C151.19 63.7856 149.419 61.313 148.276 58.5346C147.126 55.6459 146.552 52.1795 146.552 48.4243H160.632C160.632 50.4463 160.632 52.1795 161.207 53.6239C161.494 55.0682 162.069 56.5125 162.931 57.3791C163.793 57.9569 164.943 58.8235 166.092 59.1123C167.529 59.6901 168.966 59.6901 170.402 59.6901C172.414 59.6901 173.851 59.6901 175 58.8235C176.149 57.9569 176.724 57.0903 177.299 55.9348C177.874 54.7793 178.161 53.335 178.161 51.8907V51.8907ZM239.943 28.7813V40.336H211.207V28.7813H239.943ZM215.23 0.761269V70.0893H201.437V0.761269H215.23ZM250 0.761269V70.0893H236.207V0.761269H250Z"
diff --git a/www/components/FeatureIcons.tsx b/www/components/FeatureIcons.tsx
index 564a4abf23e..ac088f3b321 100644
--- a/www/components/FeatureIcons.tsx
+++ b/www/components/FeatureIcons.tsx
@@ -5,6 +5,7 @@ export function NoBuild() {
       viewBox="0 0 75 75"
       fill="none"
       xmlns="http://www.w3.org/2000/svg"
+      aria-hidden="true"
     >
       <path
         d="M29.6442 31.5258C32.7992 30.1446 35 27.0249 35 23.3976C35 19.5107 31.9774 16.2066 28.4569 15L28.4771 23.0715L26.1651 24.4575L23.6055 23.0715L22.5523 15C19.0318 16.2066 17 19.5107 17 23.3976C17 27.0249 19.2008 30.1446 22.3558 31.5258L20.9876 59.8211C20.8443 62.6385 23.1298 65 26 65C28.8702 65 31.1557 62.6385 31.0124 59.8211L29.6442 31.5258Z"
@@ -34,6 +35,7 @@ export function TypeScript() {
       viewBox="0 0 75 75"
       fill="none"
       xmlns="http://www.w3.org/2000/svg"
+      aria-hidden="true"
     >
       <rect
         x="19.0002"
@@ -103,6 +105,7 @@ export function Island() {
       viewBox="0 0 75 75"
       fill="none"
       xmlns="http://www.w3.org/2000/svg"
+      aria-hidden="true"
     >
       <path
         d="M24.8765 39.3727C16.4753 36.5509 8.60772 50.9392 13.5157 54.999C18.4236 59.0588 27.0005 56.7329 35.569 56.7329C38.2618 56.7329 41.2797 56.7952 44.2466 56.8159C49.2995 57.4544 59.6147 57.6582 60.4526 53.3657C62.4427 47.3005 51.5966 33.7385 47.8048 32.5681C36.246 29.0003 37.3759 43.5709 24.8765 39.3727Z"
@@ -145,6 +148,7 @@ export function Globe() {
       viewBox="0 0 75 75"
       fill="none"
       xmlns="http://www.w3.org/2000/svg"
+      aria-hidden="true"
     >
       <circle cx="37.5" cy="37.5" r="20.5" fill="white" />
       <path
@@ -165,6 +169,7 @@ export function LightWeight() {
       viewBox="0 0 75 75"
       fill="none"
       xmlns="http://www.w3.org/2000/svg"
+      aria-hidden="true"
     >
       <path
         d="M30.323 50.1677C29.8721 49.8671 28.7299 48.6949 27.7681 46.4105C36.7993 41.3595 29.128 29.5594 21.1555 35.8905C15.5533 40.3393 17.6603 50.2484 19.7385 56.4481C17.4611 57.4948 14.4355 63.0071 16.9474 65.5191C19.4594 68.031 23.3436 65.8806 24.9717 64.4913C27.4228 65.3605 30.8953 65.8286 34.3916 66.2169C33.3449 73.1945 43.4625 72.8456 45.207 70.4035C46.9514 67.9613 45.9047 68.3102 45.9047 66.2169C47.5891 65.8119 48.1797 65.4739 49.5 64.4913C52.0585 64.9679 59.5112 67.6124 63 59.5881C57.069 60.9836 53.7647 58.8955 51 57.5C48 44.5 34.3916 44 30.323 50.1677Z"
@@ -201,13 +206,14 @@ export function LightWeight() {
   );
 }
 
-export function Gabage() {
+export function Garbage() {
   return (
     <svg
       class="bg-blue-200 md:bg-green-200 rounded-full w-20 h-20"
       viewBox="0 0 75 75"
       fill="none"
       xmlns="http://www.w3.org/2000/svg"
+      aria-hidden="true"
     >
       <path
         d="M16.005 26.4841C15.4819 23.4303 56.4538 22.9234 57 26.4841L56.0103 35.8989L48.0082 42.1286C48.0082 47.559 26.9502 47.2714 26.9502 41.298L16.8423 35.0682L16.005 26.4841Z"
diff --git a/www/components/Footer.tsx b/www/components/Footer.tsx
index 8c4dcaea569..f0ceed953e1 100644
--- a/www/components/Footer.tsx
+++ b/www/components/Footer.tsx
@@ -20,7 +20,7 @@ export default function Footer() {
     <footer class="border-t-2 border-gray-200 bg-gray-100 md:h-16 flex gap-4 justify-center">
       <div class="flex flex-col sm:flex-row gap-4 justify-between items-center max-w-screen-xl mx-auto w-full px(4 sm:6 md:8) p-4">
         <div class="text(gray-600 center)">
-          <span>¬© {new Date().getFullYear()} the fresh authors</span>
+          <span>¬© {new Date().getFullYear()} the Fresh authors</span>
         </div>
 
         <div class="flex items-center gap-8">
diff --git a/www/components/Header.tsx b/www/components/Header.tsx
index 7c4874cd733..fecd8224349 100644
--- a/www/components/Header.tsx
+++ b/www/components/Header.tsx
@@ -1,10 +1,8 @@
 import DocsTitle from "./DocsTitle.tsx";
 import NavigationBar from "./NavigationBar.tsx";
-import SearchButton from "../islands/SearchButton.tsx";
 
 export default function Header(props: { title: string; active: string }) {
   const isHome = props.active == "/";
-  const isDocs = props.active.startsWith("/docs");
   return (
     <div>
       <header
@@ -17,7 +15,6 @@ export default function Header(props: { title: string; active: string }) {
             <DocsTitle title={props.title} />
           </div>
         )}
-        {isDocs && <SearchButton class="grow mb-0 hidden lg:flex" />}
         <NavigationBar class="hidden md:flex" active={props.active} />
       </header>
       <NavigationBar class="md:hidden pb-3" active={props.active} />
diff --git a/www/components/Icons.tsx b/www/components/Icons.tsx
index 6b612b345a9..cf970e1516f 100644
--- a/www/components/Icons.tsx
+++ b/www/components/Icons.tsx
@@ -62,6 +62,7 @@ export function Copy() {
       viewBox="0 0 15 15"
       fill="none"
       xmlns="http://www.w3.org/2000/svg"
+      aria-hidden="true"
     >
       <path
         d="M1.55566 2.7C1.55566 2.03726 2.09292 1.5 2.75566 1.5H8.75566C9.41841 1.5 9.95566 2.03726 9.95566 2.7V5.1H12.3557C13.0184 5.1 13.5557 5.63726 13.5557 6.3V12.3C13.5557 12.9627 13.0184 13.5 12.3557 13.5H6.35566C5.69292 13.5 5.15566 12.9627 5.15566 12.3V9.9H2.75566C2.09292 9.9 1.55566 9.36274 1.55566 8.7V2.7ZM6.35566 9.9V12.3H12.3557V6.3H9.95566V8.7C9.95566 9.36274 9.41841 9.9 8.75566 9.9H6.35566ZM8.75566 8.7V2.7L2.75566 2.7V8.7H8.75566Z"
@@ -80,6 +81,7 @@ export function Check() {
       fill="none"
       viewBox="0 0 24 24"
       stroke="currentColor"
+      aria-hidden="true"
     >
       <path
         stroke-width={3}
@@ -117,6 +119,7 @@ export function GitHub(props: { class?: string }) {
       class={`h-6 w-6 ${props.class ?? ""}`}
       fill="currentColor"
       viewBox="0 0 24 24"
+      aria-hidden="true"
     >
       <path
         fillRule="evenodd"
@@ -133,6 +136,7 @@ export function Discord(props: { class?: string }) {
       class={`h-6 w-6 ${props.class ?? ""}`}
       fill="currentColor"
       viewBox="0 0 24 24"
+      aria-hidden="true"
     >
       <path
         fill="currentColor"
@@ -152,6 +156,7 @@ export function ArrowRight() {
       viewBox="0 0 20 20"
       fill="none"
       xmlns="http://www.w3.org/2000/svg"
+      aria-hidden="true"
     >
       <path
         d="M13.0833 14.4167L16.9166 10.5834C16.9999 10.5 17.0588 10.4098 17.0933 10.3125C17.1283 10.2153 17.1458 10.1112 17.1458 10C17.1458 9.88893 17.1283 9.78476 17.0933 9.68754C17.0588 9.59032 16.9999 9.50004 16.9166 9.41671L13.0624 5.56254C12.9096 5.40976 12.7221 5.33337 12.4999 5.33337C12.2777 5.33337 12.0833 5.41671 11.9166 5.58337C11.7638 5.73615 11.6874 5.9306 11.6874 6.16671C11.6874 6.40282 11.7638 6.59726 11.9166 6.75004L14.3333 9.16671H3.33325C3.09714 9.16671 2.89936 9.24643 2.73992 9.40587C2.57992 9.56587 2.49992 9.76393 2.49992 10C2.49992 10.2362 2.57992 10.4339 2.73992 10.5934C2.89936 10.7534 3.09714 10.8334 3.33325 10.8334H14.3333L11.8958 13.2709C11.743 13.4237 11.6666 13.6112 11.6666 13.8334C11.6666 14.0556 11.7499 14.25 11.9166 14.4167C12.0694 14.5695 12.2638 14.6459 12.4999 14.6459C12.736 14.6459 12.9305 14.5695 13.0833 14.4167Z"
diff --git a/www/components/gallery/Carousel.tsx b/www/components/gallery/Carousel.tsx
index ac5715a4fd7..9f334147816 100644
--- a/www/components/gallery/Carousel.tsx
+++ b/www/components/gallery/Carousel.tsx
@@ -142,20 +142,21 @@ const Carousel = (props: CarouselProps) => {
   };
 
   const DotsNavigation = () => (
-    <div
-      class={"slide_nav z-30 w-full absolute bottom-0 flex justify-center cursor-pointer"}
-    >
+    <div class={"slide_nav z-30 w-full absolute bottom-0 flex justify-center"}>
       {SLIDE_DATA.map((_item, idx) => {
         return (
-          <div
+          <button
             class={`px-1 ${NAVIGATION_COLOR}`}
             onClick={() => {
               goToSlide(idx);
             }}
             key={idx}
           >
-            {idx === currentSlide.value ? <>‚óè</> : <>‚óã</>}
-          </div>
+            <span class="sr-only">Go to slide {idx}</span>
+            {idx === currentSlide.value
+              ? <span class="not-sr-only">‚óè</span>
+              : <span class="not-sr-only">‚óã</span>}
+          </button>
         );
       })}
     </div>
@@ -169,16 +170,22 @@ const Carousel = (props: CarouselProps) => {
       }`}
       tabIndex={0}
     >
-      <IconCircleChevronsLeft
+      <button
         class={`left-0 ${CHEVRON_STYLE}`}
         style="top: calc(50% - 20px)"
         onClick={() => chevronClick(previousSlide)}
-      />
-      <IconCircleChevronsRight
+      >
+        <IconCircleChevronsLeft class="w-10 h-10" aria-hidden="true" />
+        <span class="sr-only">Previous slide</span>
+      </button>
+      <button
         class={`right-0 ${CHEVRON_STYLE}`}
         style="top: calc(50% - 20px)"
         onClick={() => chevronClick(nextSlide)}
-      />
+      >
+        <IconCircleChevronsRight class="w-10 h-10" aria-hidden="true" />
+        <span class="sr-only">Next slide</span>
+      </button>
       {SLIDE_DATA.map((item, idx) => (
         <Slide
           data={item}
diff --git a/www/components/gallery/Features.tsx b/www/components/gallery/Features.tsx
index 35c341ada8d..969f651279f 100644
--- a/www/components/gallery/Features.tsx
+++ b/www/components/gallery/Features.tsx
@@ -29,7 +29,7 @@ export default function Features() {
         return (
           <div class="flex-1 space-y-2">
             <div class="bg-blue-600 inline-block p-3 rounded-xl text-white">
-              <item.icon class="w-10 h-10" />
+              <item.icon class="w-10 h-10" aria-hidden="true" />
             </div>
             <p class="text-xl">
               {item.description}
@@ -38,9 +38,12 @@ export default function Features() {
             {item.link &&
               (
                 <a class="block" href={item.link}>
-                  <p class="text-blue-500 cursor-pointer hover:underline inline-flex items-center group">
+                  <p class="text-blue-600 cursor-pointer hover:underline inline-flex items-center group">
                     Read More{" "}
-                    <IconChevronRight class="inline-block w-5 h-5 transition group-hover:translate-x-0.5" />
+                    <IconChevronRight
+                      class="inline-block w-5 h-5 transition group-hover:translate-x-0.5"
+                      aria-hidden="true"
+                    />
                   </p>
                 </a>
               )}
diff --git a/www/components/gallery/Footer.tsx b/www/components/gallery/Footer.tsx
index 196bf53645c..6232d589591 100644
--- a/www/components/gallery/Footer.tsx
+++ b/www/components/gallery/Footer.tsx
@@ -30,7 +30,7 @@ export default function Footer({ children }: Props) {
     <div class="bg-white flex flex-col md:flex-row w-full max-w-screen-lg gap-8 md:gap-16 px-8 py-8 text-sm">
       <div class="flex-1">
         <div class="flex items-center gap-1">
-          <LemonIcon class="inline-block" />
+          <LemonIcon class="inline-block" aria-hidden="true" />
           <div class="font-bold text-2xl">
             Fresh
           </div>
@@ -69,7 +69,7 @@ export default function Footer({ children }: Props) {
           class="inline-block hover:text-black"
           aria-label="GitHub"
         >
-          <BrandGithub />
+          <BrandGithub aria-hidden="true" />
         </a>
       </div>
     </div>
diff --git a/www/components/gallery/Header.tsx b/www/components/gallery/Header.tsx
index 6814012e59f..b9927d805bb 100644
--- a/www/components/gallery/Header.tsx
+++ b/www/components/gallery/Header.tsx
@@ -14,7 +14,7 @@ export default function Header({ active }: Props) {
   return (
     <div class="bg-white w-full max-w-screen-lg py-6 px-8 flex flex-col md:flex-row gap-4">
       <div class="flex items-center flex-1">
-        <LemonIcon />
+        <LemonIcon aria-hidden="true" />
         <div class="text-2xl  ml-1 font-bold">
           Fresh
         </div>
diff --git a/www/components/gallery/Hero.tsx b/www/components/gallery/Hero.tsx
index b15d9947571..128b5093455 100644
--- a/www/components/gallery/Hero.tsx
+++ b/www/components/gallery/Hero.tsx
@@ -17,7 +17,7 @@ export default function Hero() {
       <div class="flex flex-col md:flex-row items-center">
         <a
           href="#"
-          class="block mt-4 text-blue-500 cursor-pointer inline-flex items-center group text-blue-800 bg-white px-8 py-2 rounded-md hover:bg-blue-50 font-bold"
+          class="block mt-4 text-blue-600 cursor-pointer inline-flex items-center group text-blue-800 bg-white px-8 py-2 rounded-md hover:bg-blue-50 font-bold"
         >
           Sign Up{" "}
         </a>
@@ -26,7 +26,10 @@ export default function Hero() {
           class="block mt-4 transition-colors text-blue-400 cursor-pointer inline-flex items-center group px-4 py-2 hover:text-blue-100"
         >
           Documentation{" "}
-          <IconChevronRight class="inline-block w-5 h-5 transition group-hover:translate-x-0.5" />
+          <IconChevronRight
+            class="inline-block w-5 h-5 transition group-hover:translate-x-0.5"
+            aria-hidden="true"
+          />
         </a>
       </div>
     </div>
diff --git a/www/data/docs.ts b/www/data/docs.ts
index 3a2a4a96d4c..8317b2d7980 100644
--- a/www/data/docs.ts
+++ b/www/data/docs.ts
@@ -44,7 +44,7 @@ for (const version in toc) {
     // all documentation content and backport changes.
     const fileVersion = rawEntry.link ?? version;
     const versionFilePath = fileVersion === LATEST_VERSION
-      ? ""
+      ? "/latest"
       : `/${fileVersion}`;
 
     const href = `/docs${versionSlug}/${parent}`;
@@ -72,7 +72,7 @@ for (const version in toc) {
           ? linkedVersion.slice("link:".length)
           : version;
         const versionFilePath = !pageVersion || pageVersion === LATEST_VERSION
-          ? ""
+          ? "/latest"
           : `/${pageVersion}`;
 
         const href = `/docs${versionSlug}/${slug}`;
diff --git a/www/data/showcase.json b/www/data/showcase.json
index 10283ec2f0f..382f43dbe8c 100644
--- a/www/data/showcase.json
+++ b/www/data/showcase.json
@@ -31,9 +31,9 @@
   },
   {
     "title": "Paquet",
-    "link": "https://paquet.shop",
-    "github": "fructoland/paquet",
-    "image": "paquet"
+    "link": "https://paquet.app",
+    "github": "notangelmario/paquet",
+    "image": "Paquet"
   },
   {
     "title": "Video Poker Academy",
@@ -183,7 +183,7 @@
     "image": "kadode_portal"
   },
   {
-    "title": "Craig's Deno Diary",
+    "title": "Craig‚Äôs Deno Diary",
     "link": "https://deno-blog.com",
     "github": "https://github.com/cdoremus/deno-blog",
     "image": "deno-diary"
@@ -353,7 +353,17 @@
     "image": "kanji-academy"
   },
   {
-    "title": "Do not remove this, it's for preventing conflicts by trailing comma",
+    "title": "LiberChat",
+    "link": "https://liberchat.deno.dev",
+    "image": "liberchat"
+  },
+  {
+    "title": "over-ip",
+    "link": "https://over-ip.dragon-vi.be",
+    "image": "over-ip"
+  },
+  {
+    "title": "Do not remove this, it‚Äôs for preventing conflicts by trailing comma",
     "link": "",
     "github": "",
     "image": ""
diff --git a/www/deno.json b/www/deno.json
index eec43cc7caf..42dd6070c05 100644
--- a/www/deno.json
+++ b/www/deno.json
@@ -1,7 +1,9 @@
 {
   "lock": false,
   "tasks": {
-    "start": "deno run -A --watch=static/,routes/ dev.ts"
+    "start": "deno run -A --watch=static/,routes/ dev.ts",
+    "build": "deno run -A dev.ts build",
+    "preview": "deno run -A main.ts"
   },
   "imports": {
     "$fresh/": "../",
@@ -9,11 +11,12 @@
     "twind/": "https://esm.sh/twind@0.16.19/",
     "preact": "https://esm.sh/preact@10.15.1",
     "preact/": "https://esm.sh/preact@10.15.1/",
-    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.2.0",
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.2.1",
     "@preact/signals": "https://esm.sh/*@preact/signals@1.1.3",
     "@preact/signals-core": "https://esm.sh/@preact/signals-core@1.2.3",
     "$std/": "https://deno.land/std@0.193.0/",
-    "$ga4": "https://raw.githubusercontent.com/denoland/ga4/main/mod.ts"
+    "$ga4": "https://raw.githubusercontent.com/denoland/ga4/main/mod.ts",
+    "$marked-mangle": "https://esm.sh/marked-mangle@1.0.1"
   },
   "compilerOptions": {
     "jsx": "react-jsx",
diff --git a/www/dev.ts b/www/dev.ts
index 2d85d6c183c..1fe3e340282 100755
--- a/www/dev.ts
+++ b/www/dev.ts
@@ -1,5 +1,6 @@
 #!/usr/bin/env -S deno run -A --watch=static/,routes/
 
 import dev from "$fresh/dev.ts";
+import config from "./fresh.config.ts";
 
-await dev(import.meta.url, "./main.ts");
+await dev(import.meta.url, "./main.ts", config);
diff --git a/www/fresh.config.ts b/www/fresh.config.ts
new file mode 100644
index 00000000000..4b076dd4af3
--- /dev/null
+++ b/www/fresh.config.ts
@@ -0,0 +1,7 @@
+import twindPlugin from "$fresh/plugins/twind.ts";
+import twindConfig from "./twind.config.ts";
+import { defineConfig } from "$fresh/server.ts";
+
+export default defineConfig({
+  plugins: [twindPlugin(twindConfig)],
+});
diff --git a/www/fresh.gen.ts b/www/fresh.gen.ts
index 94d38d9b4f8..55d7ccdaa33 100644
--- a/www/fresh.gen.ts
+++ b/www/fresh.gen.ts
@@ -1,4 +1,4 @@
-// DO NOT EDIT. This file is generated by fresh.
+// DO NOT EDIT. This file is generated by Fresh.
 // This file SHOULD be checked into source version control.
 // This file is automatically updated during development when running `dev.ts`.
 
diff --git a/www/islands/ComponentGallery.tsx b/www/islands/ComponentGallery.tsx
index 78894954d1f..51826024785 100644
--- a/www/islands/ComponentGallery.tsx
+++ b/www/islands/ComponentGallery.tsx
@@ -57,7 +57,10 @@ export default function ComponentGallery(props: ComponentGalleryProps) {
           Click me
         </Button>
         <Button class="flex gap-1">
-          <IconHappy class="w-6 h-6 inline-block text-gray-500" />
+          <IconHappy
+            class="w-6 h-6 inline-block text-gray-500"
+            aria-hidden="true"
+          />
           <div>
             With an Icon
           </div>
@@ -81,7 +84,10 @@ export default function ComponentGallery(props: ComponentGalleryProps) {
         source={props.sources.LinkButton}
       >
         <LinkButton>
-          <IconHeart class="w-5 h-5 mr-1 inline-block text-gray-400" />
+          <IconHeart
+            class="w-5 h-5 mr-1 inline-block text-gray-400"
+            aria-hidden="true"
+          />
           Like me
         </LinkButton>
       </Section>
diff --git a/www/islands/CopyArea.tsx b/www/islands/CopyArea.tsx
index ebdbbb58111..e1cf04f5b7d 100644
--- a/www/islands/CopyArea.tsx
+++ b/www/islands/CopyArea.tsx
@@ -38,8 +38,8 @@ export default function CopyArea(props: { code: string }) {
 
       <div class="relative my-2 mr-4">
         <div
-          class={`transition ease-in-out absolute pointer-events-none bg-gray-900 text-white absolute p-2 -top-1/3 left-1/2 transform -translate-x-1/2 -translate-y-full box-border rounded opacity-0 ${
-            copied.value && "opacity-100"
+          class={`hidden transition ease-in-out absolute pointer-events-none bg-gray-900 text-white absolute p-2 -top-1/3 left-1/2 transform -translate-x-1/2 -translate-y-full box-border rounded opacity-0 ${
+            copied.value && "block opacity-100"
           }`}
         >
           Copied!
diff --git a/www/islands/VersionSelect.tsx b/www/islands/VersionSelect.tsx
index cae991c5ac4..b97d5c11373 100644
--- a/www/islands/VersionSelect.tsx
+++ b/www/islands/VersionSelect.tsx
@@ -20,7 +20,7 @@ export default function VersionSelect(
         </label>
         {selectedIsLatest && (
           <div class="flex absolute pointer-events-none select-none w-full h-full items-center justify-end pr-8">
-            <div class="rounded-full px-2 py-1 text-xs tag-label bg-[#056CF025] text-blue-600">
+            <div class="rounded-full px-2 py-1 text-xs tag-label bg-[#056CF025] text-blue-700">
               Latest
             </div>
           </div>
diff --git a/www/main.ts b/www/main.ts
index 82234c72e38..36b221d6687 100644
--- a/www/main.ts
+++ b/www/main.ts
@@ -5,9 +5,8 @@
 /// <reference lib="deno.ns" />
 
 import { start } from "$fresh/server.ts";
-import twindPlugin from "$fresh/plugins/twind.ts";
 
 import manifest from "./fresh.gen.ts";
-import twindConfig from "./twind.config.ts";
+import config from "./fresh.config.ts";
 
-await start(manifest, { plugins: [twindPlugin(twindConfig)] });
+await start(manifest, config);
diff --git a/www/main_test.ts b/www/main_test.ts
index a0d8952b3f0..c4f87b9c549 100644
--- a/www/main_test.ts
+++ b/www/main_test.ts
@@ -2,6 +2,7 @@ import { assertArrayIncludes, assertEquals } from "$std/testing/asserts.ts";
 import { delay } from "$std/async/delay.ts";
 import { startFreshServer, withPageName } from "../tests/test_utils.ts";
 import { dirname, join } from "$std/path/mod.ts";
+import VERSIONS from "../versions.json" assert { type: "json" };
 
 const dir = dirname(import.meta.url);
 
@@ -50,8 +51,8 @@ Deno.test("shows version selector", {
         label: "canary",
       },
       {
-        value: "1.2",
-        label: "1.2.x",
+        value: "latest",
+        label: VERSIONS[0],
       },
     ]);
 
@@ -59,7 +60,7 @@ Deno.test("shows version selector", {
       "#version",
       (el: HTMLSelectElement) => el.value,
     );
-    assertEquals(selectValue, "1.2");
+    assertEquals(selectValue, "latest");
 
     // Go to canary page
     await Promise.all([
diff --git a/www/routes/_404.tsx b/www/routes/_404.tsx
index 8eb2867c584..addce283989 100644
--- a/www/routes/_404.tsx
+++ b/www/routes/_404.tsx
@@ -30,6 +30,6 @@ export function ServerCodePage(
 export default function PageNotFound() {
   return ServerCodePage({
     serverCode: 404,
-    codeDescription: "Couldn't find what you're looking for.",
+    codeDescription: "Couldn‚Äôt find what you‚Äôre looking for.",
   });
 }
diff --git a/www/routes/components.tsx b/www/routes/components.tsx
index caae4521ef3..4037a995949 100644
--- a/www/routes/components.tsx
+++ b/www/routes/components.tsx
@@ -30,7 +30,7 @@ export const handler: Handlers<HomeProps> = {
   },
 };
 
-const TITLE = "Components | fresh";
+const TITLE = "Components | Fresh";
 const DESCRIPTION = "A collection of components made for Fresh.";
 
 interface HomeProps {
diff --git a/www/routes/docs/[...slug].tsx b/www/routes/docs/[...slug].tsx
index 10ebf029a25..d70ffad9a4f 100644
--- a/www/routes/docs/[...slug].tsx
+++ b/www/routes/docs/[...slug].tsx
@@ -10,7 +10,7 @@ import {
   TABLE_OF_CONTENTS,
   TableOfContentsEntry,
 } from "../../data/docs.ts";
-import { frontMatter, gfm } from "../../utils/markdown.ts";
+import { frontMatter, renderMarkdown } from "../../utils/markdown.ts";
 import toc from "../../../docs/toc.ts";
 
 interface Data {
@@ -135,7 +135,7 @@ export const handler: Handlers<Data> = {
 
 export default function DocsPage(props: PageProps<Data>) {
   const ogImageUrl = new URL(asset("/home-og.png"), props.url).href;
-  const title = `${props.data.page?.title ?? "Not Found"} | fresh docs`;
+  const title = `${props.data.page?.title ?? "Not Found"} | Fresh docs`;
   let description = "Fresh Document";
 
   if (props.data.page.data.description) {
@@ -244,7 +244,7 @@ function DesktopSidebar(props: { path: string; page: Page }) {
 }
 
 function Content(props: { page: Page }) {
-  const html = gfm.render(props.page.markdown);
+  const html = renderMarkdown(props.page.markdown);
   return (
     <main class="py-6 overflow-hidden md:mr-4 lg:mr-32">
       <h1 class="text(4xl gray-900) tracking-tight font-extrabold mt-6 md:mt-0">
diff --git a/www/routes/gfm.css.ts b/www/routes/gfm.css.ts
index e57a8641583..18555fa6c9c 100644
--- a/www/routes/gfm.css.ts
+++ b/www/routes/gfm.css.ts
@@ -3,8 +3,20 @@ import { gfm } from "../utils/markdown.ts";
 
 // TODO(lucacasonato): hash the file and use the hash as the filename, and serve
 // with high-cacheability headers.
+function css(template: TemplateStringsArray, ...params: string[]) {
+  let out = "";
 
-const CSS = `${gfm.CSS}
+  for (let i = 0; i < template.length; i++) {
+    out += template[i];
+    if (i < params.length) {
+      out += String(params[i]);
+    }
+  }
+
+  return out;
+}
+
+const CSS = css`${gfm.CSS}
 
 ol.nested {
 	counter-reset: item;
@@ -39,6 +51,39 @@ ol.nested li:before {
 .toggle:checked + .toggled {
 	display: block;
 }
+
+.fenced-code {
+  margin-bottom: 1rem;
+}
+.fenced-code pre {
+  margin-bottom: 0;
+}
+.fenced-code-header {
+  border-top-left-radius: .5rem;
+  border-top-right-radius: .5rem;
+  padding: 0.5rem;
+  background: #eaeef1;
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+}
+.fenced-code-header + pre {
+  border-top-left-radius: 0 !important;
+  border-top-right-radius: 0 !important;
+}
+.fenced-code-title {
+  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,
+    "Liberation Mono", "Courier New", monospace;
+  font-size: .8125rem;
+  line-height: 1;
+}
+
+.highlight-source-yml .atrule {
+  color: var(--color-prettylights-syntax-entity);
+}
+.highlight-source-yml .string {
+  color: var(--color-prettylights-syntax-string);
+}
 `;
 
 export const handler: Handlers = {
diff --git a/www/routes/index.tsx b/www/routes/index.tsx
index 777f5293cf6..47cc4cc4b5a 100644
--- a/www/routes/index.tsx
+++ b/www/routes/index.tsx
@@ -33,7 +33,7 @@ export const handler: Handlers = {
   },
 };
 
-const TITLE = "fresh - The next-gen web framework.";
+const TITLE = "Fresh - The next-gen web framework.";
 const DESCRIPTION =
   "Just in time edge rendering, island based interactivity, and no configuration TypeScript support using Deno.";
 
@@ -89,11 +89,12 @@ function HelloBar() {
 
 function Hero() {
   return (
-    <>
-      <section class="w-full flex justify-center items-center flex-col bg-green-300">
-        <LemonDrop />
-      </section>
-    </>
+    <div
+      class="w-full flex justify-center items-center flex-col bg-green-300"
+      aria-hidden="true"
+    >
+      <LemonDrop />
+    </div>
   );
 }
 
@@ -133,7 +134,7 @@ function Features() {
       </div>
 
       <div class={item}>
-        <FeatureIcons.Gabage />
+        <FeatureIcons.Garbage />
         <div class={desc}>
           <b>No configuration</b> necessary.
         </div>
@@ -182,7 +183,7 @@ function Intro(props: { origin: string }) {
               src="/illustration/lemon-squash.svg"
               width={800}
               height={678}
-              alt="deno is drinking fresh lemon squash"
+              alt="Deno is drinking Fresh lemon squash"
             />
           </picture>
         </div>
@@ -251,7 +252,7 @@ function StartJourney() {
       </h2>
       <div class="flex flex-col md:flex-row justify-start items-center gap-4">
         <p class="text(xl gray-600)">
-          Jump right in and build your website with fresh. Learn everything you
+          Jump right in and build your website with Fresh. Learn everything you
           need to know in seconds.
         </p>
         <a
diff --git a/www/routes/raw.ts b/www/routes/raw.ts
index 4121c3fa028..39af54557fb 100644
--- a/www/routes/raw.ts
+++ b/www/routes/raw.ts
@@ -38,7 +38,7 @@ export const handler: Handlers = {
 
     if (response.status === 404) {
       return new Response(
-        "404: Not Found. The requested fresh release or file do not exist.",
+        "404: Not Found. The requested Fresh release or file do not exist.",
         { status: 404 },
       );
     }
diff --git a/www/routes/showcase.tsx b/www/routes/showcase.tsx
index ef55d625d76..d6c5bd26b95 100644
--- a/www/routes/showcase.tsx
+++ b/www/routes/showcase.tsx
@@ -5,7 +5,7 @@ import Header from "../components/Header.tsx";
 import Footer from "../components/Footer.tsx";
 import projects from "../data/showcase.json" assert { type: "json" };
 
-const TITLE = "Showcase | fresh";
+const TITLE = "Showcase | Fresh";
 const DESCRIPTION = "Selection of projects that have been built with Fresh.";
 
 export default function ShowcasePage(props: PageProps) {
@@ -34,7 +34,7 @@ export default function ShowcasePage(props: PageProps) {
             </h2>
 
             <p class="text-gray-600">
-              You can add these stylish badges to your project's README to show
+              You can add these stylish badges to your project‚Äôs README to show
               that it was built with Fresh.
             </p>
 
diff --git a/www/static/docs/deno-deploy-gh-action.jpg b/www/static/docs/deno-deploy-gh-action.jpg
new file mode 100644
index 00000000000..48c5fd542e5
Binary files /dev/null and b/www/static/docs/deno-deploy-gh-action.jpg differ
diff --git a/www/static/showcase/Paquet1x.jpg b/www/static/showcase/Paquet1x.jpg
new file mode 100644
index 00000000000..44ec910b1fd
Binary files /dev/null and b/www/static/showcase/Paquet1x.jpg differ
diff --git a/www/static/showcase/Paquet2x.jpg b/www/static/showcase/Paquet2x.jpg
new file mode 100644
index 00000000000..611e6a997fd
Binary files /dev/null and b/www/static/showcase/Paquet2x.jpg differ
diff --git a/www/static/showcase/liberchat1x.jpg b/www/static/showcase/liberchat1x.jpg
new file mode 100644
index 00000000000..1b8db876ce4
Binary files /dev/null and b/www/static/showcase/liberchat1x.jpg differ
diff --git a/www/static/showcase/liberchat2x.jpg b/www/static/showcase/liberchat2x.jpg
new file mode 100644
index 00000000000..1b8db876ce4
Binary files /dev/null and b/www/static/showcase/liberchat2x.jpg differ
diff --git a/www/static/showcase/over-ip1x.jpg b/www/static/showcase/over-ip1x.jpg
new file mode 100644
index 00000000000..62d5a148bbf
Binary files /dev/null and b/www/static/showcase/over-ip1x.jpg differ
diff --git a/www/static/showcase/over-ip2x.jpg b/www/static/showcase/over-ip2x.jpg
new file mode 100644
index 00000000000..b484febbf1d
Binary files /dev/null and b/www/static/showcase/over-ip2x.jpg differ
diff --git a/www/static/showcase/paquet1x.jpg b/www/static/showcase/paquet1x.jpg
deleted file mode 100644
index 28163ba1a5e..00000000000
Binary files a/www/static/showcase/paquet1x.jpg and /dev/null differ
diff --git a/www/static/showcase/paquet2x.jpg b/www/static/showcase/paquet2x.jpg
deleted file mode 100644
index 3aadc3bfc6d..00000000000
Binary files a/www/static/showcase/paquet2x.jpg and /dev/null differ
diff --git a/www/utils/markdown.ts b/www/utils/markdown.ts
index 05b95b2dbdc..215b239f256 100644
--- a/www/utils/markdown.ts
+++ b/www/utils/markdown.ts
@@ -3,5 +3,117 @@ import "https://esm.sh/prismjs@1.29.0/components/prism-jsx.js?no-check";
 import "https://esm.sh/prismjs@1.29.0/components/prism-typescript.js?no-check";
 import "https://esm.sh/prismjs@1.29.0/components/prism-tsx.js?no-check";
 import "https://esm.sh/prismjs@1.29.0/components/prism-diff.js?no-check";
+import "https://esm.sh/prismjs@1.29.0/components/prism-json.js?no-check";
+import "https://esm.sh/prismjs@1.29.0/components/prism-bash.js?no-check";
+import "https://esm.sh/prismjs@1.29.0/components/prism-yaml.js?no-check";
 
 export { extract as frontMatter } from "$std/front_matter/yaml.ts";
+
+import Prism from "https://esm.sh/prismjs@1.29.0";
+import * as Marked from "https://esm.sh/marked@7.0.2";
+import { escape as escapeHtml } from "$std/html/entities.ts";
+import { mangle } from "$marked-mangle";
+
+Marked.marked.use(mangle());
+
+class DefaultRenderer extends Marked.Renderer {
+  text(text: string): string {
+    // Smartypants typography enhancement
+    return text
+      .replaceAll("...", "&#8230;")
+      .replaceAll("--", "&#8212;")
+      .replaceAll("---", "&#8211;")
+      .replaceAll(/(\w)'(\w)/g, "$1&#8217;$2")
+      .replaceAll(/s'/g, "s&#8217;")
+      .replaceAll("&#39;", "&#8217;")
+      .replaceAll(/["](.*?)["]/g, "&#8220;$1&#8221")
+      .replaceAll(/&quot;(.*?)&quot;/g, "&#8220;$1&#8221")
+      .replaceAll(/['](.*?)[']/g, "&#8216;$1&#8217;");
+  }
+
+  heading(
+    text: string,
+    level: 1 | 2 | 3 | 4 | 5 | 6,
+    raw: string,
+    slugger: Marked.Slugger,
+  ): string {
+    const slug = slugger.slug(raw);
+    return `<h${level} id="${slug}"><a class="anchor" aria-hidden="true" tabindex="-1" href="#${slug}">#</a>${text}</h${level}>`;
+  }
+
+  link(href: string, title: string | null, text: string) {
+    const titleAttr = title ? ` title="${title}"` : "";
+    if (href.startsWith("#")) {
+      return `<a href="${href}"${titleAttr}>${text}</a>`;
+    }
+    if (this.options.baseUrl) {
+      try {
+        href = new URL(href, this.options.baseUrl).href;
+      } catch (_) {
+        //
+      }
+    }
+    return `<a href="${href}"${titleAttr} rel="noopener noreferrer">${text}</a>`;
+  }
+
+  image(src: string, title: string | null, alt: string | null) {
+    return `<img src="${src}" alt="${alt ?? ""}" title="${title ?? ""}" />`;
+  }
+
+  code(code: string, info: string | undefined): string {
+    // format: tsx
+    // format: tsx my/file.ts
+    // format: tsx "This is my title"
+    let lang = "";
+    let title = "";
+    const match = info?.match(/^(\w+)\s*(.*)?$/);
+    if (match) {
+      lang = match[1].toLocaleLowerCase();
+      title = match[2] ?? "";
+    }
+
+    let out = `<div class="fenced-code">`;
+
+    if (title) {
+      out += `<div class="fenced-code-header">
+        <span class="fenced-code-title lang-${lang}">
+          ${title ? escapeHtml(String(title)) : "&nbsp;"}
+        </span>
+      </div>`;
+    }
+
+    const grammar = lang && Object.hasOwnProperty.call(Prism.languages, lang)
+      ? Prism.languages[lang]
+      : undefined;
+
+    if (grammar === undefined) {
+      out += `<pre><code class="notranslate">${escapeHtml(code)}</code></pre>`;
+    } else {
+      const html = Prism.highlight(code, grammar, lang);
+      out +=
+        `<pre class="highlight highlight-source-${lang} notranslate lang-${lang}">${html}</pre>`;
+    }
+
+    out += `</div>`;
+    return out;
+  }
+}
+
+export interface MarkdownOptions {
+  inline?: boolean;
+}
+export function renderMarkdown(
+  input: string,
+  opts: MarkdownOptions = {},
+): string {
+  const markedOpts: Marked.MarkedOptions = {
+    gfm: true,
+    renderer: new DefaultRenderer(),
+  };
+
+  const html = opts.inline
+    ? Marked.parseInline(input, markedOpts) as string
+    : Marked.parse(input, markedOpts) as string;
+
+  return html;
+}
