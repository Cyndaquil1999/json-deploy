diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml
index 28a0164f928..ba89c4b26bf 100644
--- a/.github/workflows/ci.yml
+++ b/.github/workflows/ci.yml
@@ -33,6 +33,7 @@ jobs:
         run: deno lint
 
       - name: Cache dependencies
+        if: startsWith(matrix.os, 'ubuntu') && matrix.deno == 'v1.x'
         run: deno cache --no-check --import-map=./www/import_map.json src/dev/deps.ts src/server/deps.ts www/main.ts
 
       - name: Cache Chrome (Linux)
@@ -40,32 +41,32 @@ jobs:
         uses: actions/cache@v2
         with:
           path: ~/.cache/deno/deno_puppeteer
-          key: chrome-991974-${{ runner.os }}-${{ hashFiles('tests/deps.ts') }}
-          restore-keys: chrome-991974-${{ runner.os }}-
+          key: chrome-1022525-${{ runner.os }}-${{ hashFiles('tests/deps.ts') }}
+          restore-keys: chrome-1022525-${{ runner.os }}-
 
       - name: Cache Chrome (macOS)
         if: startsWith(matrix.os, 'mac')
         uses: actions/cache@v2
         with:
           path: ~/Library/Caches/deno/deno_puppeteer
-          key: chrome-991974-${{ runner.os }}-${{ hashFiles('tests/deps.ts') }}
-          restore-keys: chrome-991974-${{ runner.os }}-
+          key: chrome-1022525-${{ runner.os }}-${{ hashFiles('tests/deps.ts') }}
+          restore-keys: chrome-1022525-${{ runner.os }}-
 
       - name: Cache Chrome (Windows)
         if: startsWith(matrix.os, 'win')
         uses: actions/cache@v2
         with:
           path: "C:\\Users\\RUNNER~1\\AppData\\Local\\deno\\deno_puppeteer"
-          key: chrome-991974-${{ runner.os }}-${{ hashFiles('tests/deps.ts') }}
-          restore-keys: chrome-991974-${{ runner.os }}-
+          key: chrome-1022525-${{ runner.os }}-${{ hashFiles('tests/deps.ts') }}
+          restore-keys: chrome-1022525-${{ runner.os }}-
 
       - name: Install Chromium (Unix)
         if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'mac')
-        run: PUPPETEER_PRODUCT=chrome deno run -A --unstable https://deno.land/x/puppeteer@14.1.1/install.ts
+        run: PUPPETEER_PRODUCT=chrome deno run -A --unstable https://deno.land/x/puppeteer@16.2.0/install.ts
 
       - name: Install Chromium (Windows)
         if: startsWith(matrix.os, 'windows')
-        run: set "PUPPETEER_PRODUCT=chrome" && deno run -A --unstable https://deno.land/x/puppeteer@14.1.1/install.ts
+        run: set "PUPPETEER_PRODUCT=chrome" && deno run -A --unstable https://deno.land/x/puppeteer@16.2.0/install.ts
 
       - name: Run tests
         run: deno test -A
diff --git a/.vscode/extensions.json b/.vscode/extensions.json
new file mode 100644
index 00000000000..971c0ed5612
--- /dev/null
+++ b/.vscode/extensions.json
@@ -0,0 +1,6 @@
+{
+  "recommendations": [
+    "denoland.vscode-deno",
+    "sastan.twind-intellisense"
+  ]
+}
diff --git a/.vscode/import_map.json b/.vscode/import_map.json
index 2aed60a33a1..f8749e6e9f5 100644
--- a/.vscode/import_map.json
+++ b/.vscode/import_map.json
@@ -1,15 +1,18 @@
 {
-  ".": "THIS FILE EXISTS ONLY FOR VSCODE! IT IS NOT USED AT RUNTIME.",
+  "scopes": {
+    "THIS FILE EXISTS ONLY FOR VSCODE! IT IS NOT USED AT RUNTIME": {}
+  },
   "imports": {
     "$fresh/": "../",
 
-    "@twind": "../www/utils/twind.ts",
     "twind": "https://esm.sh/twind@0.16.17",
     "twind/": "https://esm.sh/twind@0.16.17/",
 
-    "preact": "https://esm.sh/preact@10.10.0",
-    "preact/": "https://esm.sh/preact@10.10.0/",
-    "preact-render-to-string": "https://esm.sh/preact-render-to-string@5.2.1?external=preact",
+    "preact": "https://esm.sh/preact@10.10.6",
+    "preact/": "https://esm.sh/preact@10.10.6/",
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@5.2.3",
+    "@preact/signals": "https://esm.sh/*@preact/signals@1.0.3",
+    "@preact/signals-core": "https://esm.sh/@preact/signals-core@1.0.1",
 
     "$std/": "https://deno.land/std@0.150.0/"
   }
diff --git a/.vscode/settings.json b/.vscode/settings.json
index 7b0629d6200..74b914b015c 100644
--- a/.vscode/settings.json
+++ b/.vscode/settings.json
@@ -2,5 +2,6 @@
   "deno.enable": true,
   "deno.lint": true,
   "deno.importMap": "./.vscode/import_map.json",
+  "deno.codeLens.test": true,
   "editor.defaultFormatter": "denoland.vscode-deno"
 }
diff --git a/README.md b/README.md
index 8af10a135cf..6a4ad68b679 100644
--- a/README.md
+++ b/README.md
@@ -27,7 +27,7 @@ The [documentation](https://fresh.deno.dev/docs/) is available on
 Install [Deno CLI](https://deno.land/) version 1.23.0 or higher.
 
 You can scaffold a new project by running the Fresh init script. To scaffold a
-project in the `my-project` folder, run the following:
+project in the `deno-fresh-demo` folder, run the following:
 
 ```sh
 deno run -A -r https://fresh.deno.dev deno-fresh-demo
@@ -36,7 +36,7 @@ deno run -A -r https://fresh.deno.dev deno-fresh-demo
 Then navigate to the newly created project folder:
 
 ```
-cd my-project
+cd deno-fresh-demo
 ```
 
 From within your project folder, start the development server using the
@@ -61,3 +61,29 @@ To deploy the project to the live internet, you can use
 For a more in-depth getting started guide, visit the
 [Getting Started](https://fresh.deno.dev/docs/getting-started) page in the Fresh
 docs.
+
+## Badges
+
+![Made with Fresh](./www/static/fresh-badge.svg)
+
+```md
+[![Made with Fresh](https://fresh.deno.dev/fresh-badge.svg)](https://fresh.deno.dev)
+```
+
+```html
+<a href="https://fresh.deno.dev">
+   <img width="197" height="37" src="https://fresh.deno.dev/fresh-badge.svg" alt="Made with Fresh" />
+</a>
+```
+
+![Made with Fresh(dark)](./www/static/fresh-badge-dark.svg)
+
+```md
+[![Made with Fresh](https://fresh.deno.dev/fresh-badge-dark.svg)](https://fresh.deno.dev)
+```
+
+```html
+<a href="https://fresh.deno.dev">
+   <img width="197" height="37" src="https://fresh.deno.dev/fresh-badge-dark.svg" alt="Made with Fresh" />
+</a>
+```
diff --git a/deno.json b/deno.json
new file mode 100644
index 00000000000..f366d5bc486
--- /dev/null
+++ b/deno.json
@@ -0,0 +1,13 @@
+{
+  "tasks": {
+    "test": "deno test -A && deno check --config=www/deno.json www/main.ts www/dev.ts && deno check init.ts",
+    "fixture": "deno run -A --watch=static/,routes/ tests/fixture/dev.ts",
+    "www": "deno run -A --watch=www/static/,www/routes/,docs/ www/dev.ts",
+    "screenshot": "deno run -A www/utils/screenshot.ts"
+  },
+  "importMap": "./.vscode/import_map.json",
+  "compilerOptions": {
+    "jsx": "react-jsx",
+    "jsxImportSource": "preact"
+  }
+}
diff --git a/deno.jsonc b/deno.jsonc
deleted file mode 100644
index 54a8134d655..00000000000
--- a/deno.jsonc
+++ /dev/null
@@ -1,8 +0,0 @@
-{
-  "tasks": {
-    "test": "deno test -A && deno check --config=www/deno.json www/main.ts www/dev.ts && deno check init.ts",
-    "fixture": "deno run -A --watch=static/,routes/ tests/fixture/dev.ts",
-    "www": "deno run -A --watch=static/,routes/ www/dev.ts"
-  },
-  "importMap": "./tests/fixture/import_map.json"
-}
diff --git a/docs/concepts/architechture.md b/docs/concepts/architechture.md
index f8f39034d2e..f9da158566f 100644
--- a/docs/concepts/architechture.md
+++ b/docs/concepts/architechture.md
@@ -14,7 +14,7 @@ gathered from experts in the field. Some examples of these principles are:
 
 The single biggest architecture decision that Fresh makes is its usage of the
 [islands architecture][islands] pattern. This means that Fresh applications ship
-pure HTML to the client by default. Parts of server-rendered page can then be
+pure HTML to the client by default. Parts of a server-rendered page can then be
 independently re-hydrated with interactive widgets (islands). This means that
 the client is only responsible for rendering parts of the page that are
 interactive enough to warrant the extra effort. Any content that is purely
diff --git a/docs/concepts/deployment.md b/docs/concepts/deployment.md
new file mode 100644
index 00000000000..44e39b7be75
--- /dev/null
+++ b/docs/concepts/deployment.md
@@ -0,0 +1,75 @@
+---
+description: |
+  Fresh can be deployed to a variety of platforms easily.
+---
+
+While Fresh is designed to be deployed to [Deno Deploy][deno-deploy], it can can
+be deployed to any system or platform that can run a Deno based web server.
+
+Here are instructions for specific providers / systems:
+
+- [Deno Deploy](#deno-deploy)
+- [Docker](#docker)
+
+## Deno Deploy
+
+The recommended way to deploy Fresh is by using Deno Deploy. Deno Deploy
+provides a GitHub integration that can deploy your Fresh projects to its'
+globally distributed edge network in seconds, automatically.
+
+View [the getting started guide][deploy-to-production] for instructions on how
+to deploy Fresh to Deno Deploy.
+
+## Docker
+
+You can deploy Fresh to any platform that can run Docker containers. Docker is a
+tool to containerize projects and portably run them on any supported platform.
+
+When packaging your Fresh app for Docker, it is important that you set the
+`DENO_DEPLOYMENT_ID` environment variable in your container. This variable needs
+to be set to an opaque string ID that represents the version of your application
+that is currently being run. This could be a Git commit hash, or a hash of all
+files in your project. It is critical for the function of Fresh that this ID
+changes when _any_ file in your project changes - if it doesn't, incorrect
+caching **will** cause your project to not function correctly.
+
+Here is an example `Dockerfile` for a Fresh project:
+
+```dockerfile
+FROM denoland/deno:1.25.0
+
+ARG GIT_REVISION
+ENV DENO_DEPLOYMENT_ID=${GIT_REVISION}
+
+WORKDIR /app
+
+COPY . .
+RUN deno cache main.ts --import-map=import_map.json
+
+EXPOSE 8000
+
+CMD ["run", "-A", "main.ts"]
+```
+
+To build your Docker image inside of a Git repository:
+
+```sh
+$ docker build --build-arg GIT_REVISION=$(git rev-parse HEAD) -t my-fresh-app .
+```
+
+Then run your Docker container:
+
+```sh
+$ docker run -t -i -p 80:8000 fresh-app
+```
+
+To deploy to a cloud provider, push it to a container registry and follow their
+documentation.
+
+- [Amazon Web Services][aws-container-registry]
+- [Google Cloud][gcp-container-registry]
+
+[aws-container-registry]: https://docs.aws.amazon.com/AmazonECS/latest/userguide/create-container-image.html#create-container-image-push-ecr
+[gcp-container-registry]: https://cloud.google.com/container-registry/docs/pushing-and-pulling
+[deno-deploy]: https://deno.com/deploy
+[deploy-to-production]: /docs/getting-started/deploy-to-production
diff --git a/docs/concepts/error-pages.md b/docs/concepts/error-pages.md
index 1719a2ca696..d1a4d0780c1 100644
--- a/docs/concepts/error-pages.md
+++ b/docs/concepts/error-pages.md
@@ -8,13 +8,13 @@ Fresh supports customizing the `404 Not Found`, and the
 matching route exists, and when a middleware, route handler, or page component
 throws an error respectively.
 
+### 404: Not Found
+
 The 404 page can be customized by creating a `_404.tsx` file in the `routes/`
 folder. The file must have a default export that is a regular Preact component.
 A props object of type `UnknownPageProps` is passed in as an argument.
 
 ```tsx
-/** @jsx h */
-import { h } from "preact";
 import { UnknownPageProps } from "$fresh/server.ts";
 
 export default function NotFoundPage({ url }: UnknownPageProps) {
@@ -22,13 +22,43 @@ export default function NotFoundPage({ url }: UnknownPageProps) {
 }
 ```
 
+#### Manually render 404 pages
+
+The `_404.tsx` file will be invoked automatically when no route matches the URL.
+In some cases, one needs to manually trigger the rendering of the 404 page, for
+example when the route did match, but the requested resource does not exist.
+This can be achieved with `ctx.renderNotFound`.
+
+```tsx
+import { Handlers, PageProps } from "$fresh/server.ts";
+
+export const handler: Handlers = {
+  async GET(req, ctx) {
+    const blogpost = await fetchBlogpost(ctx.params.slug);
+    if (!blogpost) {
+      return ctx.renderNotFound();
+    }
+    return ctx.render({ blogpost });
+  },
+};
+
+export default function BlogpostPage({ data }) {
+  return (
+    <article>
+      <h1>{data.blogpost.title}</h1>
+      {/* rest of your page */}
+    </article>
+  );
+}
+```
+
+### 500: Internal Server Error
+
 The 500 page can be customized by creating a `_500.tsx` file in the `routes/`
 folder. The file must have a default export that is a regular Preact component.
 A props object of type `ErrorPageProps` is passed in as an argument.
 
 ```tsx
-/** @jsx h */
-import { h } from "preact";
 import { ErrorPageProps } from "$fresh/server.ts";
 
 export default function Error500Page({ error }: ErrorPageProps) {
diff --git a/docs/concepts/islands.md b/docs/concepts/islands.md
index ba6351c75c9..5e30d135b55 100644
--- a/docs/concepts/islands.md
+++ b/docs/concepts/islands.md
@@ -8,14 +8,12 @@ components that are rendered on the client. This is different from all other
 components in Fresh, as they are usually just rendered on the server.
 
 Islands are defined by creating a file in the `islands/` folder in a Fresh
-project. The name of this file must be a PascalCase name of the island. The file
-must have a default export that is a regular Preact component.
+project. The name of this file must be a PascalCase or kebab-case name of the
+island. The file must have a default export that is a regular Preact component.
 
 ```tsx
 // islands/MyIsland.tsx
 
-/** @jsx h */
-import { h } from "preact";
 import { useState } from "preact/hooks";
 
 export default function MyIsland() {
diff --git a/docs/concepts/middleware.md b/docs/concepts/middleware.md
index ee4ab97ca67..473e70614f5 100644
--- a/docs/concepts/middleware.md
+++ b/docs/concepts/middleware.md
@@ -71,3 +71,22 @@ For a request to `/admin/signin` the request flows like this:
 2. Calling `ctx.next()` will invoke the `routes/admin/_middleware.ts`
    middleware.
 3. Calling `ctx.next()` will invoke the `routes/admin/signin.ts` handler.
+
+A single middleware file can also define multiple middlewares (all for the same
+route) by exporting an array of handlers instead of a single handler. For
+example:
+
+```ts
+// routes/_middleware.ts
+
+export const handler = [
+  async function middleware1(req, ctx) {
+    // do something
+    return ctx.next();
+  },
+  async function middleware2(req, ctx) {
+    // do something
+    return ctx.next();
+  },
+];
+```
diff --git a/docs/concepts/plugins.md b/docs/concepts/plugins.md
new file mode 100644
index 00000000000..d1f31ec3d78
--- /dev/null
+++ b/docs/concepts/plugins.md
@@ -0,0 +1,101 @@
+---
+description: Plugins can add new functionality to Fresh without requiring significant complexity.
+---
+
+> Plugins are only available in Fresh 1.1 and above.
+
+Plugins can dynamically add new functionality to Fresh without exposing
+significant complexity to the user. Users can add plugins by importing and
+initializing them in their `main.ts` file:
+
+```ts
+// main.ts
+
+import { start } from "$fresh/server.ts";
+import manifest from "./fresh.gen.ts";
+
+import twindPlugin from "$fresh/plugins/twind.ts";
+import twindConfig from "./twind.config.js";
+
+await start(manifest, {
+  plugins: [
+    // This line configures Fresh to use the first-party twind plugin.
+    twindPlugin(twindConfig),
+  ],
+});
+```
+
+Currently, the only available first-party plugin is the Twind plugin.
+Third-party plugins are also supported - they can be imported from any HTTP
+server, like any other Deno module.
+
+Plugin hooks are executed in the order that the plugins are defined in the
+`plugins` array. This means that the first plugin in the array will be executed
+first, and the last plugin in the array will be executed last. For many plugins,
+this does not matter, but for some plugins it may.
+
+## Creating a plugin
+
+Fresh plugins are in essence a collection of hooks that allow the plugin to hook
+into various systems inside of Fresh. Currently only a `render` hook is
+available (explained below).
+
+A Fresh plugin is just a JavaScript object that conforms to the
+[Plugin](https://deno.land/x/fresh/server.ts?s=Plugin) interface. The only
+required property of a plugin is it's name. Names must only contain the
+characters `a`-`z`, and `_`.
+
+```ts
+import { Plugin } from "$fresh/server.ts";
+
+const plugin: Plugin = {
+  name: "my_plugin",
+};
+```
+
+A plugin containing only a name is technically valid, but not very useful. To be
+able to do anything with a plugin, it must register some hooks.
+
+### Hook: `render`
+
+The render hook allows plugins to:
+
+- Control timing of the synchronous render of a page.
+- Inject additional CSS and JS into the rendered page.
+
+This is commonly used to set thread local variables for the duration of the
+render (for example preact global context, preact option hooks, or for style
+libraries like Twind). After render is complete, the plugin can inject inline
+CSS and JS modules (with attached state) into the page.
+
+The render hook is called with the
+[`PluginRenderContext`](https://deno.land/x/fresh/server.ts?s=PluginRenderContext)
+object, which contains a `render()` method. This method must be invoked during
+the render hook to actually render the page. It is a terminal error to not call
+the `render()` method during the render hook.
+
+The `render()` method returns a
+[`PluginRenderFunctionResult`](https://deno.land/x/fresh/server.ts?s=PluginRenderFunctionResult)
+object which contains the HTML text of the rendered page, as well as a boolean
+indicating whether the page contains any islands that will be hydrated on the
+client.
+
+The `render` hook needs to synchronously return a
+[`PluginRenderResult`](https://deno.land/x/fresh/server.ts?s=PluginRenderResult)
+object. Additional CSS and JS modules can be added to be injected into the page
+by adding them to `styles` and `scripts` arrays in this object.
+
+`styles` are injected into the `<head>` of the page as inline CSS. Each entry
+can define the CSS text to inject, as well as an optional `id` for the style
+tag, and an optional `media` attribute for the style tag.
+
+`scripts` define JavaScript/TypeScript modules to be injected into the page. The
+possibly loaded modules need to be defined up front in the `Plugin#entrypoints`
+property. Each defined module must be a JavaScript/TypeScript module that has a
+default export of a function that takes one (arbitrary) argument, and returns
+nothing (or a promise resolving to nothing). Fresh will call this function with
+the state defined in the `scripts` entry. The state can be any arbitrary JSON
+serializable JavaScript value.
+
+For an example of a plugin that uses the `render` hook, see the first-party
+[Twind plugin](https://github.com/denoland/fresh/blob/main/plugins/twind.ts).
diff --git a/docs/concepts/routes.md b/docs/concepts/routes.md
index c4c2de7c3ca..08c9a97be76 100644
--- a/docs/concepts/routes.md
+++ b/docs/concepts/routes.md
@@ -50,8 +50,6 @@ Now, let's render some HTML using the route component:
 ```tsx
 // routes/html.tsx
 
-/** @jsx h */
-import { h } from "preact";
 import { PageProps } from "$fresh/server.ts";
 
 export default function Page(props: PageProps) {
@@ -75,8 +73,6 @@ response after rendering the page component.
 ```tsx
 // routes/html.tsx
 
-/** @jsx h */
-import { h } from "preact";
 import { HandlerContext, Handlers, PageProps } from "$fresh/server.ts";
 
 export const handler: Handlers = {
diff --git a/docs/concepts/routing.md b/docs/concepts/routing.md
index 325625bf42e..3d43cdd639b 100644
--- a/docs/concepts/routing.md
+++ b/docs/concepts/routing.md
@@ -46,7 +46,7 @@ This pattern will be used instead of the file path based pattern:
 
 import { RouteConfig } from "$fresh/runtime.ts";
 
-const config: RouteConfig = {
+export const config: RouteConfig = {
   routeOverride: "/x/:module@:version/:path*",
 };
 
diff --git a/docs/concepts/static-files.md b/docs/concepts/static-files.md
index 8c5594ff9b2..8dd0677042a 100644
--- a/docs/concepts/static-files.md
+++ b/docs/concepts/static-files.md
@@ -1,3 +1,8 @@
+---
+description: |
+  Fresh has built-in support for serving static files. This is useful for serving images, CSS, and other static assets.
+---
+
 Fresh automatically serves static assets placed in a `static/` directory in the
 project root. These assets are served at the root of the webserver, with a
 higher priority than routes. This means that if a given request matches a file
@@ -25,8 +30,6 @@ is requested at this "locked" path, it will be served with a cache lifetime of
 one year.
 
 ```jsx
-/** @jsx h */
-import { h } from "preact";
 import { asset } from "$fresh/runtime.ts";
 
 export default function Page() {
diff --git a/docs/concepts/updating.md b/docs/concepts/updating.md
new file mode 100644
index 00000000000..3792a3e7947
--- /dev/null
+++ b/docs/concepts/updating.md
@@ -0,0 +1,122 @@
+---
+description: |
+  Fresh regularly releases new versions of the framework. This page explains how to update your project.
+---
+
+Fresh constists of multiple pieces which are independently versioned and
+released.
+
+- Fresh (https://deno.land/x/fresh)
+- Preact (https://esm.sh/preact)
+- preact-render-to-string (https://esm.sh/preact-render-to-string)
+
+Some plugins also have their own dependencies that can be updated independently.
+
+- Twind (https://esm.sh/twind) (for the twind plugin)
+
+For the most part these pieces can be updated independently. Certain versions of
+Fresh may require a minimum version of a given dependency. This is documented
+below.
+
+| Fresh version | Preact           | preact-render-to-string | Deno      |
+| ------------- | ---------------- | ----------------------- | --------- |
+| 1.0.0-1.0.2   | >=10.8.1 <11.0.0 | >=5.2.0 <6.0.0          | >= 1.23.0 |
+| 1.1.0         | >=10.8.1 <11.0.0 | >=5.2.0 <6.0.0          | >= 1.25.0 |
+
+## Updating dependencies
+
+To update your dependencies, you have two options:
+
+- Run the fresh updater to update your project dependencies.
+- Manually update the dependency versions in your `import_map.json` file.
+
+### Auto updater
+
+The auto updater is a command line tool that will update your project's
+`import_map.json` file to the latest versions of Fresh and its dependencies. It
+may also contain code mods for your project that will update your code to the
+latest recommended patterns for Fresh projects.
+
+To run the auto updater, run the following command from the root of your
+project:
+
+```bash
+$ deno run -A https://fresh.deno.dev/update .
+```
+
+You will be prompted to confirm the changes that will be made to your project.
+
+### Manual update
+
+To manually update your project's dependencies, you can edit the
+`import_map.json` file in the root of your projects directory. Dependency
+versions are encoded into the URLs in this file. For example, here is how to
+update a project from Fresh 1.0.2 to 1.1.0, and update Preact to the latest
+version:
+
+```diff
+  {
+    "imports": {
+-     "$fresh/": "https://deno.land/x/fresh@1.0.2/",
++     "$fresh/": "https://deno.land/x/fresh@1.1.0/",
+
+-     "preact": "https://esm.sh/preact@10.8.1",
+-     "preact/": "https://esm.sh/preact@10.8.1/",
++     "preact": "https://esm.sh/preact@10.10.6",
++     "preact/": "https://esm.sh/preact@10.10.6/",
+
+-     "preact-render-to-string": "https://esm.sh/*preact-render-to-string@5.2.0",
++     "preact-render-to-string": "https://esm.sh/*preact-render-to-string@5.2.2",
+
+      "twind": "https://esm.sh/twind@0.16.17",
+      "twind/": "https://esm.sh/twind@0.16.17/"
+    }
+  }
+```
+
+## Code mods
+
+Code mods are small scripts that can be run to update your project's code to
+match the latest recommended patterns for Fresh projects. Code mods can be run
+through the auto updater. Sometimes the code mod can not cover all cases, so you
+may need to manually update some code. This section explains the code mods
+currently available.
+
+### Classical JSX -> Automatic JSX
+
+> This code mod is only available in Fresh 1.1.0 and above.
+
+The classical JSX transform that relies on a `/** @jsx h */` pragma is no longer
+the recommended way to use JSX in Fresh projects. Instead, starting with version
+1.1.0, Fresh projects should use the automatic JSX transform that requires no
+JSX pragma or preact import.
+
+```diff
+- /** @jsx h */
+- import { h } from "preact";
+
+  export default function Page() {
+    return <div>Hello world!</div>;
+  }
+```
+
+This code mod will update your deno.json file to include the relevant compiler
+options to enable the automatic JSX transform. It will then go through your
+project and remove any `/** @jsx h */` pragmas and `import { h } from "preact"`
+statements.
+
+### Classic twind -> Twind plugin
+
+> This code mod is only available in Fresh 1.1.0 and above.
+
+Fresh version 1.1.0 introduced a new plugin for using twind with Fresh. This
+plugin is much nicer to use than the raw twind integration that was previously
+available.
+
+This code mod will update your project to use the new twind plugin. It will
+update your `main.ts` file to import the twind plugin and add it to the plugins
+array. It will also update your files to remove many unnecessary uses of the
+`tw` function, and remove unnecessary twind imports. While the code mod can
+handle most cases, you may need to manually update some code. Additionally you
+will need to manually update your `twind.config.ts` if you use a custom
+configuration.
diff --git a/docs/getting-started/adding-interactivity.md b/docs/getting-started/adding-interactivity.md
index 3217660797e..981e1c7e635 100644
--- a/docs/getting-started/adding-interactivity.md
+++ b/docs/getting-started/adding-interactivity.md
@@ -21,17 +21,16 @@ Fresh embraces this model. All pages are rendered server side, but you can
 create "island components" that are _also_ rendered client side. To do this,
 Fresh projects have a special `islands/` folder. The modules in this folder each
 encapsulate a single island component. The name of the module should be the
-[pascal case][pascal-case] name of the island component. For example a counter
-component would be defined in the file `islands/Counter.tsx`. A buy now button
-would be defined in the file `islands/BuyNowButton.tsx`.
+[pascal case][pascal-case] or [kebab case][kebab-case] name of the island
+component. For example a counter component would be defined in the file
+`islands/Counter.tsx`. A buy now button could be defined in the file
+`islands/buy-now-button.tsx`.
 
 Here is an example of an island component that counts down to a specific time.
 
 ```tsx
 // islands/Countdown.tsx
 
-/** @jsx h */
-import { h } from "preact";
 import { useEffect, useState } from "preact/hooks";
 
 const timeFmt = new Intl.RelativeTimeFormat("en-US");
@@ -75,8 +74,6 @@ client with the correct props:
 ```tsx
 // routes/countdown.tsx
 
-/** @jsx h */
-import { h } from "preact";
 import Countdown from "../islands/Countdown.tsx";
 
 export default function Page() {
@@ -94,3 +91,4 @@ The page that is rendered on the client now has an interactive countdown.
 
 [islands-architecture]: https://jasonformat.com/islands-architecture
 [pascal-case]: https://en.wiktionary.org/wiki/Pascal_case
+[kebab-case]: https://en.wiktionary.org/wiki/kebab_case
diff --git a/docs/getting-started/create-a-route.md b/docs/getting-started/create-a-route.md
index dd15e07ab02..4518dbe39dd 100644
--- a/docs/getting-started/create-a-route.md
+++ b/docs/getting-started/create-a-route.md
@@ -37,9 +37,6 @@ This is done with JSX.
 ```tsx
 // routes/about.tsx
 
-/** @jsx h */
-import { h } from "preact";
-
 export default function AboutPage() {
   return (
     <main>
@@ -50,10 +47,6 @@ export default function AboutPage() {
 }
 ```
 
-> ℹ️ The first two lines are the JSX pragma, and the import for the JSX create
-> element function. These are just boilerplate. You don't need to know exactly
-> what they do - they just ensure that JSX gets rendered correctly.
-
 The new page will be visible at `http://localhost:8000/about`.
 
 <!-- You can find more in depth information about routes on the
diff --git a/docs/getting-started/custom-handlers.md b/docs/getting-started/custom-handlers.md
index 4dc4b29df8a..766af258355 100644
--- a/docs/getting-started/custom-handlers.md
+++ b/docs/getting-started/custom-handlers.md
@@ -30,8 +30,6 @@ then adds a custom header to the response before returning it:
 ```tsx
 // routes/about.tsx
 
-/** @jsx h */
-import { h } from "preact";
 import { Handlers } from "$fresh/server.ts";
 
 export const handler: Handlers = {
diff --git a/docs/getting-started/dynamic-routes.md b/docs/getting-started/dynamic-routes.md
index e5d6eba69cb..8d1dd457290 100644
--- a/docs/getting-started/dynamic-routes.md
+++ b/docs/getting-started/dynamic-routes.md
@@ -27,8 +27,6 @@ as arguments in its `props` object though.
 ```tsx
 // routes/greet/[name].tsx
 
-/** @jsx h */
-import { h } from "preact";
 import { PageProps } from "$fresh/server.ts";
 
 export default function GreetPage(props: PageProps) {
diff --git a/docs/getting-started/fetching-data.md b/docs/getting-started/fetching-data.md
index 8663225d3d6..69bd437acb5 100644
--- a/docs/getting-started/fetching-data.md
+++ b/docs/getting-started/fetching-data.md
@@ -23,8 +23,6 @@ renders it in a page component.
 ```tsx
 // routes/github/[username].tsx
 
-/** @jsx h */
-import { h } from "preact";
 import { Handlers, PageProps } from "$fresh/server.ts";
 
 interface User {
diff --git a/docs/getting-started/form-submissions.md b/docs/getting-started/form-submissions.md
index caf925d24b7..ac1a3b944a6 100644
--- a/docs/getting-started/form-submissions.md
+++ b/docs/getting-started/form-submissions.md
@@ -32,8 +32,6 @@ server side:
 ```tsx
 // routes/search.tsx
 
-/** @jsx h */
-import { h } from "preact";
 import { Handlers, PageProps } from "$fresh/server.ts";
 
 const NAMES = ["Alice", "Bob", "Charlie", "Dave", "Eve", "Frank"];
diff --git a/docs/getting-started/index.md b/docs/getting-started/index.md
index 4a1f754b636..07f88ec2284 100644
--- a/docs/getting-started/index.md
+++ b/docs/getting-started/index.md
@@ -10,7 +10,7 @@ framework. You'll learn how to create a new project, run it locally, edit and
 create pages, fetch data, handle user interactions, and how to then deploy the
 project to [Deno Deploy][deno-deploy].
 
-The documentation assumes you have Deno 1.22.3 or later installed.
+The documentation assumes you have Deno 1.25.0 or later installed.
 
 To install Deno, follow the
 [installation instructions in the Deno manual][manual-installation].
diff --git a/docs/toc.json b/docs/toc.json
index 4ae6617370e..e916edba46a 100644
--- a/docs/toc.json
+++ b/docs/toc.json
@@ -26,7 +26,9 @@
       ["middleware", "Route middleware"],
       ["error-pages", "Error pages"],
       ["routing", "Routing"],
-      ["data-fetching", "Data fetching"]
+      ["data-fetching", "Data fetching"],
+      ["deployment", "Deployment"],
+      ["updating", "Updating Fresh"]
     ]
   }
 }
diff --git a/examples/counter/deno.json b/examples/counter/deno.json
index 673d9eb5b3c..8d9ac336cfe 100644
--- a/examples/counter/deno.json
+++ b/examples/counter/deno.json
@@ -2,5 +2,9 @@
   "tasks": {
     "start": "deno run -A --watch=static/,routes/ dev.ts"
   },
-  "importMap": "./import_map.json"
+  "importMap": "./import_map.json",
+  "compilerOptions": {
+    "jsx": "react-jsx",
+    "jsxImportSource": "preact"
+  }
 }
diff --git a/examples/counter/fresh.gen.ts b/examples/counter/fresh.gen.ts
index d11e969a51a..8d5fc01d5a2 100644
--- a/examples/counter/fresh.gen.ts
+++ b/examples/counter/fresh.gen.ts
@@ -2,6 +2,7 @@
 // This file SHOULD be checked into source version control.
 // This file is automatically updated during development when running `dev.ts`.
 
+import config from "./deno.json" assert { type: "json" };
 import * as $0 from "./routes/index.tsx";
 import * as $$0 from "./islands/Counter.tsx";
 
@@ -13,6 +14,7 @@ const manifest = {
     "./islands/Counter.tsx": $$0,
   },
   baseUrl: import.meta.url,
+  config,
 };
 
 export default manifest;
diff --git a/examples/counter/import_map.json b/examples/counter/import_map.json
index e59539e4ddd..8bdfff3d5ec 100644
--- a/examples/counter/import_map.json
+++ b/examples/counter/import_map.json
@@ -1,8 +1,8 @@
 {
   "imports": {
     "$fresh/": "../../",
-    "preact": "https://esm.sh/preact@10.10.0",
-    "preact/": "https://esm.sh/preact@10.10.0/",
-    "preact-render-to-string": "https://esm.sh/preact-render-to-string@5.2.1?external=preact"
+    "preact": "https://esm.sh/preact@10.10.6",
+    "preact/": "https://esm.sh/preact@10.10.6/",
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@5.2.3"
   }
 }
diff --git a/examples/counter/islands/Counter.tsx b/examples/counter/islands/Counter.tsx
index d0878396ad4..8f78ff43d29 100644
--- a/examples/counter/islands/Counter.tsx
+++ b/examples/counter/islands/Counter.tsx
@@ -1,5 +1,3 @@
-/** @jsx h */
-import { h } from "preact";
 import { useState } from "preact/hooks";
 import { IS_BROWSER } from "$fresh/runtime.ts";
 
diff --git a/examples/counter/main.ts b/examples/counter/main.ts
index 0f15e8defa4..dedce9cbb04 100644
--- a/examples/counter/main.ts
+++ b/examples/counter/main.ts
@@ -1,8 +1,8 @@
 /// <reference no-default-lib="true" />
 /// <reference lib="dom" />
+/// <reference lib="dom.iterable" />
 /// <reference lib="dom.asynciterable" />
 /// <reference lib="deno.ns" />
-/// <reference lib="deno.unstable" />
 
 import { start } from "$fresh/server.ts";
 import manifest from "./fresh.gen.ts";
diff --git a/examples/counter/routes/index.tsx b/examples/counter/routes/index.tsx
index 2e3b4b28562..46a70ce1f57 100644
--- a/examples/counter/routes/index.tsx
+++ b/examples/counter/routes/index.tsx
@@ -1,5 +1,3 @@
-/** @jsx h */
-import { h } from "preact";
 import Counter from "../islands/Counter.tsx";
 
 export default function Home() {
diff --git a/init.ts b/init.ts
index 7d6c737f28c..9ed5f252b9a 100644
--- a/init.ts
+++ b/init.ts
@@ -1,23 +1,9 @@
-import { gte, join, parse, resolve } from "./src/dev/deps.ts";
+import { join, parse, resolve } from "./src/dev/deps.ts";
 import { error } from "./src/dev/error.ts";
-import { collect, generate } from "./src/dev/mod.ts";
+import { collect, ensureMinDenoVersion, generate } from "./src/dev/mod.ts";
+import { freshImports, twindImports } from "./src/dev/imports.ts";
 
-const MIN_VERSION = "1.23.0";
-
-// Check that the minimum supported Deno version is being used.
-if (!gte(Deno.version.deno, MIN_VERSION)) {
-  let message =
-    `Deno version ${MIN_VERSION} or higher is required. Please update Deno.\n\n`;
-
-  if (Deno.execPath().includes("homebrew")) {
-    message +=
-      "You seem to have installed Deno via homebrew. To update, run: `brew upgrade deno`\n";
-  } else {
-    message += "To update, run: `deno upgrade`\n";
-  }
-
-  error(message);
-}
+ensureMinDenoVersion();
 
 const help = `fresh-init
 
@@ -43,7 +29,7 @@ const CONFIRM_EMPTY_MESSAGE =
   "The target directory is not empty (files could get overwritten). Do you want to continue anyway?";
 
 const USE_TWIND_MESSAGE =
-  "Do you want to use 'twind' (https://twind.dev/) for styling?";
+  "Fresh has built in support for styling using Tailwind CSS. Do you want to use this?";
 
 const USE_VSCODE_MESSAGE = "Do you use VS Code?";
 
@@ -56,6 +42,12 @@ if (flags._.length !== 1) {
   error(help);
 }
 
+console.log(
+  `\n%c  🍋 Fresh: the next-gen web framework.  %c\n`,
+  "background-color: #86efac; color: black; font-weight: bold",
+  "",
+);
+
 const unresolvedDirectory = Deno.args[0];
 const resolvedDirectory = resolve(unresolvedDirectory);
 
@@ -74,6 +66,7 @@ try {
     throw err;
   }
 }
+console.log("%cLet's set up your new Fresh project.\n", "font-weight: bold");
 
 const useTwind = flags.twind === null
   ? confirm(USE_TWIND_MESSAGE)
@@ -90,44 +83,27 @@ await Deno.mkdir(join(resolvedDirectory, "components"), { recursive: true });
 if (useVSCode) {
   await Deno.mkdir(join(resolvedDirectory, ".vscode"), { recursive: true });
 }
-if (useTwind) {
-  await Deno.mkdir(join(resolvedDirectory, "utils"), { recursive: true });
-}
 
-const importMap = {
-  "imports": {
-    "$fresh/": new URL("./", import.meta.url).href,
-    "preact": "https://esm.sh/preact@10.10.0",
-    "preact/": "https://esm.sh/preact@10.10.0/",
-    "preact-render-to-string":
-      "https://esm.sh/preact-render-to-string@5.2.1?external=preact",
-  } as Record<string, string>,
-};
-if (useTwind) {
-  importMap.imports["@twind"] = "./utils/twind.ts";
-  importMap.imports["twind"] = "https://esm.sh/twind@0.16.17";
-  importMap.imports["twind/"] = "https://esm.sh/twind@0.16.17/";
-}
+const importMap = { imports: {} as Record<string, string> };
+freshImports(importMap.imports);
+if (useTwind) twindImports(importMap.imports);
 const IMPORT_MAP_JSON = JSON.stringify(importMap, null, 2) + "\n";
 await Deno.writeTextFile(
   join(resolvedDirectory, "import_map.json"),
   IMPORT_MAP_JSON,
 );
 
-let ROUTES_INDEX_TSX = `/** @jsx h */
-import { h } from "preact";\n`;
-if (useTwind) ROUTES_INDEX_TSX += `import { tw } from "@twind";\n`;
-ROUTES_INDEX_TSX += `import Counter from "../islands/Counter.tsx";
+const ROUTES_INDEX_TSX = `import Counter from "../islands/Counter.tsx";
 
 export default function Home() {
   return (
-    <div${useTwind ? " class={tw\`p-4 mx-auto max-w-screen-md\`}" : ""}>
+    <div${useTwind ? ` class="p-4 mx-auto max-w-screen-md"` : ""}>
       <img
         src="/logo.svg"
-        height="100px"
+        ${useTwind ? `class="w-32 h-32"` : `width="128"\n        height="128"`}
         alt="the fresh logo: a sliced lemon dripping with juice"
       />
-      <p${useTwind ? " class={tw\`my-6\`}" : ""}>
+      <p${useTwind ? ` class="my-6"` : ""}>
         Welcome to \`fresh\`. Try updating this message in the ./routes/index.tsx
         file, and refresh.
       </p>
@@ -141,20 +117,19 @@ await Deno.writeTextFile(
   ROUTES_INDEX_TSX,
 );
 
-const COMPONENTS_BUTTON_TSX = `/** @jsx h */
-import { h } from "preact";
+const COMPONENTS_BUTTON_TSX = `import { JSX } from "preact";
 import { IS_BROWSER } from "$fresh/runtime.ts";
-${useTwind ? 'import { tw } from "@twind";\n' : ""}
-export function Button(props: h.JSX.HTMLAttributes<HTMLButtonElement>) {
+
+export function Button(props: JSX.HTMLAttributes<HTMLButtonElement>) {
   return (
     <button
       {...props}
       disabled={!IS_BROWSER || props.disabled}
-    ${
+${
   useTwind
-    ? "  class={tw\`px-2 py-1 border(gray-100 2) hover:bg-gray-200\`}\n    "
+    ? '      class="px-2 py-1 border(gray-100 2) hover:bg-gray-200"\n'
     : ""
-}/>
+}    />
   );
 }
 `;
@@ -163,10 +138,7 @@ await Deno.writeTextFile(
   COMPONENTS_BUTTON_TSX,
 );
 
-const ISLANDS_COUNTER_TSX = `/** @jsx h */
-import { h } from "preact";
-import { useState } from "preact/hooks";
-${useTwind ? 'import { tw } from "@twind";\n' : ""}
+const ISLANDS_COUNTER_TSX = `import { useState } from "preact/hooks";
 import { Button } from "../components/Button.tsx";
 
 interface CounterProps {
@@ -176,25 +148,20 @@ interface CounterProps {
 export default function Counter(props: CounterProps) {
   const [count, setCount] = useState(props.start);
   return (
-    <div${useTwind ? " class={tw\`flex gap-2 w-full\`}" : ""}>
-      <p${
-  useTwind ? " class={tw\`flex-grow-1 font-bold text-xl\`}" : ""
-}>{count}</p>
+    <div${useTwind ? ' class="flex gap-2 w-full"' : ""}>
+      <p${useTwind ? ' class="flex-grow-1 font-bold text-xl"' : ""}>{count}</p>
       <Button onClick={() => setCount(count - 1)}>-1</Button>
       <Button onClick={() => setCount(count + 1)}>+1</Button>
     </div>
   );
 }
 `;
-
 await Deno.writeTextFile(
   join(resolvedDirectory, "islands", "Counter.tsx"),
   ISLANDS_COUNTER_TSX,
 );
 
-const ROUTES_GREET_TSX = `/** @jsx h */
-import { h } from "preact";
-import { PageProps } from "$fresh/server.ts";
+const ROUTES_GREET_TSX = `import { PageProps } from "$fresh/server.ts";
 
 export default function Greet(props: PageProps) {
   return <div>Hello {props.params.name}</div>;
@@ -232,19 +199,16 @@ await Deno.writeTextFile(
   ROUTES_API_JOKE_TS,
 );
 
-const UTILS_TWIND_TS = `import { IS_BROWSER } from "$fresh/runtime.ts";
-import { Configuration, setup } from "twind";
-export * from "twind";
-export const config: Configuration = {
-  darkMode: "class",
-  mode: "silent",
-};
-if (IS_BROWSER) setup(config);
+const TWIND_CONFIG_TS = `import { Options } from "$fresh/plugins/twind.ts";
+
+export default {
+  selfURL: import.meta.url,
+} as Options;
 `;
 if (useTwind) {
   await Deno.writeTextFile(
-    join(resolvedDirectory, "utils", "twind.ts"),
-    UTILS_TWIND_TS,
+    join(resolvedDirectory, "twind.config.ts"),
+    TWIND_CONFIG_TS,
   );
 }
 
@@ -274,38 +238,25 @@ try {
 
 let MAIN_TS = `/// <reference no-default-lib="true" />
 /// <reference lib="dom" />
+/// <reference lib="dom.iterable" />
 /// <reference lib="dom.asynciterable" />
 /// <reference lib="deno.ns" />
-/// <reference lib="deno.unstable" />
 
-import { ${
-  useTwind ? "InnerRenderFunction, RenderContext, " : ""
-}start } from "$fresh/server.ts";
+import { start } from "$fresh/server.ts";
 import manifest from "./fresh.gen.ts";
 `;
 
 if (useTwind) {
   MAIN_TS += `
-import { config, setup } from "@twind";
-import { virtualSheet } from "twind/sheets";
-
-const sheet = virtualSheet();
-sheet.reset();
-setup({ ...config, sheet });
-
-function render(ctx: RenderContext, render: InnerRenderFunction) {
-  const snapshot = ctx.state.get("twind") as unknown[] | null;
-  sheet.reset(snapshot || undefined);
-  render();
-  ctx.styles.splice(0, ctx.styles.length, ...(sheet).target);
-  const newSnapshot = sheet.reset();
-  ctx.state.set("twind", newSnapshot);
-}
-
+import twindPlugin from "$fresh/plugins/twind.ts";
+import twindConfig from "./twind.config.ts";
 `;
 }
 
-MAIN_TS += `await start(manifest${useTwind ? ", { render }" : ""});\n`;
+MAIN_TS += `
+await start(manifest${
+  useTwind ? ", { plugins: [twindPlugin(twindConfig)] }" : ""
+});\n`;
 const MAIN_TS_PATH = join(resolvedDirectory, "main.ts");
 await Deno.writeTextFile(MAIN_TS_PATH, MAIN_TS);
 
@@ -328,6 +279,10 @@ const config = {
     start: "deno run -A --watch=static/,routes/ dev.ts",
   },
   importMap: "./import_map.json",
+  compilerOptions: {
+    jsx: "react-jsx",
+    jsxImportSource: "preact",
+  },
 };
 const DENO_CONFIG = JSON.stringify(config, null, 2) + "\n";
 
@@ -369,6 +324,10 @@ const vscodeExtensions = {
   recommendations: ["denoland.vscode-deno"],
 };
 
+if (useTwind) {
+  vscodeExtensions.recommendations.push("sastan.twind-intellisense");
+}
+
 const VSCODE_EXTENSIONS = JSON.stringify(vscodeExtensions, null, 2) + "\n";
 
 if (useVSCode) {
@@ -383,7 +342,28 @@ await generate(resolvedDirectory, manifest);
 
 // Specifically print unresolvedDirectory, rather than resolvedDirectory in order to
 // not leak personal info (e.g. `/Users/MyName`)
-console.log("\n%cProject created!", "color: green; font-weight: bold");
-console.log(`\nIn order to start the development server, run:\n`);
-console.log(`$ cd ${unresolvedDirectory}`);
-console.log("$ deno task start");
+console.log("\n%cProject initialized!\n", "color: green; font-weight: bold");
+
+console.log(
+  `Enter your project directory using %ccd ${unresolvedDirectory}%c.`,
+  "color: cyan",
+  "",
+);
+console.log(
+  "Run %cdeno task start%c to start the project. %cCTRL-C%c to stop.",
+  "color: cyan",
+  "",
+  "color: cyan",
+  "",
+);
+console.log();
+console.log(
+  "Stuck? Join our Discord %chttps://discord.gg/deno",
+  "color: cyan",
+  "",
+);
+console.log();
+console.log(
+  "%cHappy hacking! 🦕",
+  "color: gray",
+);
diff --git a/plugins/twind.ts b/plugins/twind.ts
new file mode 100644
index 00000000000..4966213e281
--- /dev/null
+++ b/plugins/twind.ts
@@ -0,0 +1,45 @@
+import { virtualSheet } from "twind/sheets";
+import { Plugin } from "../server.ts";
+
+import { Options, setup, STYLE_ELEMENT_ID } from "./twind/shared.ts";
+export type { Options };
+
+export default function twind(options: Options): Plugin {
+  const sheet = virtualSheet();
+  setup(options, sheet);
+  const main = `data:application/javascript,import hydrate from "${
+    new URL("./twind/main.ts", import.meta.url).href
+  }";
+import options from "${options.selfURL}";
+export default function(state) { hydrate(options, state); }`;
+  return {
+    name: "twind",
+    entrypoints: { "main": main },
+    render(ctx) {
+      sheet.reset(undefined);
+      const res = ctx.render();
+      const cssText = [...sheet.target].join("\n");
+      const snapshot = sheet.reset();
+      const scripts = [];
+      if (res.requiresHydration) {
+        const precedences = snapshot[1];
+        const mappings: (string | [string, string])[] = [];
+        for (
+          const [key, value] of (snapshot[3] as Map<string, string>).entries()
+        ) {
+          if (key === value) {
+            mappings.push(key);
+          } else {
+            mappings.push([key, value]);
+          }
+        }
+        const state = [precedences, mappings];
+        scripts.push({ entrypoint: "main", state });
+      }
+      return {
+        scripts,
+        styles: [{ cssText, id: STYLE_ELEMENT_ID }],
+      };
+    },
+  };
+}
diff --git a/plugins/twind/main.ts b/plugins/twind/main.ts
new file mode 100644
index 00000000000..cc9b5ff1b45
--- /dev/null
+++ b/plugins/twind/main.ts
@@ -0,0 +1,21 @@
+import { Sheet } from "twind";
+import { Options, setup, STYLE_ELEMENT_ID } from "./shared.ts";
+
+type State = [string[], [string, string][]];
+
+export default function hydrate(options: Options, state: State) {
+  const el = document.getElementById(STYLE_ELEMENT_ID) as HTMLStyleElement;
+  const rules = new Set(el.innerText.split("\n"));
+  const precedences = state[0];
+  const mappings = new Map(state[1]
+    .map((v) => typeof v === "string" ? [v, v] : v));
+  // deno-lint-ignore no-explicit-any
+  const sheetState: any[] = [precedences, rules, mappings, true];
+  const target = el.sheet!;
+  const sheet: Sheet = {
+    target,
+    insert: (rule, index) => target.insertRule(rule, index),
+    init: (cb) => cb(sheetState.shift()),
+  };
+  setup(options, sheet);
+}
diff --git a/plugins/twind/shared.ts b/plugins/twind/shared.ts
new file mode 100644
index 00000000000..1285dfdabc0
--- /dev/null
+++ b/plugins/twind/shared.ts
@@ -0,0 +1,48 @@
+import { JSX, options as preactOptions, VNode } from "preact";
+import { Configuration, setup as twSetup, Sheet, tw } from "twind";
+
+export const STYLE_ELEMENT_ID = "__FRSH_TWIND";
+
+export interface Options extends Omit<Configuration, "mode" | "sheet"> {
+  /** The import.meta.url of the module defining these options. */
+  selfURL: string;
+}
+
+declare module "preact" {
+  namespace JSX {
+    interface DOMAttributes<Target extends EventTarget> {
+      class?: string;
+      className?: string;
+    }
+  }
+}
+
+export function setup(options: Options, sheet: Sheet) {
+  const config: Configuration = {
+    ...options,
+    mode: "silent",
+    sheet,
+  };
+  twSetup(config);
+
+  const originalHook = preactOptions.vnode;
+  // deno-lint-ignore no-explicit-any
+  preactOptions.vnode = (vnode: VNode<JSX.DOMAttributes<any>>) => {
+    if (typeof vnode.type === "string" && typeof vnode.props === "object") {
+      const { props } = vnode;
+      const classes: string[] = [];
+      if (props.class) {
+        classes.push(tw(props.class));
+        props.class = undefined;
+      }
+      if (props.className) {
+        classes.push(tw(props.className));
+      }
+      if (classes.length) {
+        props.class = classes.join(" ");
+      }
+    }
+
+    originalHook?.(vnode);
+  };
+}
diff --git a/src/dev/deps.ts b/src/dev/deps.ts
index a22f95eaba0..d3dc884b813 100644
--- a/src/dev/deps.ts
+++ b/src/dev/deps.ts
@@ -10,3 +10,6 @@ export {
 export { walk } from "https://deno.land/std@0.150.0/fs/walk.ts";
 export { parse } from "https://deno.land/std@0.150.0/flags/mod.ts";
 export { gte } from "https://deno.land/std@0.150.0/semver/mod.ts";
+
+// ts-morph
+export { Node, Project } from "https://deno.land/x/ts_morph@16.0.0/mod.ts";
diff --git a/src/dev/imports.ts b/src/dev/imports.ts
new file mode 100644
index 00000000000..5aa40276a0c
--- /dev/null
+++ b/src/dev/imports.ts
@@ -0,0 +1,22 @@
+export const RECOMMENDED_PREACT_VERSION = "10.10.6";
+export const RECOMMENDED_PREACT_RTS_VERSION = "5.2.3";
+export const RECOMMENDED_PREACT_SIGNALS_VERSION = "1.0.3";
+export const RECOMMENDED_PREACT_SIGNALS_CORE_VERSION = "1.0.1";
+export const RECOMMENDED_TWIND_VERSION = "0.16.17";
+
+export function freshImports(imports: Record<string, string>) {
+  imports["$fresh/"] = new URL("../../", import.meta.url).href;
+  imports["preact"] = `https://esm.sh/preact@${RECOMMENDED_PREACT_VERSION}`;
+  imports["preact/"] = `https://esm.sh/preact@${RECOMMENDED_PREACT_VERSION}/`;
+  imports["preact-render-to-string"] =
+    `https://esm.sh/*preact-render-to-string@${RECOMMENDED_PREACT_RTS_VERSION}/`;
+  imports["@preact/signals"] =
+    `https://esm.sh/*@preact/signals@${RECOMMENDED_PREACT_SIGNALS_VERSION}`;
+  imports["@preact/signals-core"] =
+    `https://esm.sh/*@preact/signals-core@${RECOMMENDED_PREACT_SIGNALS_CORE_VERSION}`;
+}
+
+export function twindImports(imports: Record<string, string>) {
+  imports["twind"] = `https://esm.sh/twind@${RECOMMENDED_TWIND_VERSION}`;
+  imports["twind/"] = `https://esm.sh/twind@${RECOMMENDED_TWIND_VERSION}/`;
+}
diff --git a/src/dev/mod.ts b/src/dev/mod.ts
index 81abcf502c9..d874977e964 100644
--- a/src/dev/mod.ts
+++ b/src/dev/mod.ts
@@ -2,12 +2,32 @@ import {
   dirname,
   extname,
   fromFileUrl,
+  gte,
   join,
   toFileUrl,
   walk,
 } from "./deps.ts";
 import { error } from "./error.ts";
 
+const MIN_DENO_VERSION = "1.25.0";
+
+export function ensureMinDenoVersion() {
+  // Check that the minimum supported Deno version is being used.
+  if (!gte(Deno.version.deno, MIN_DENO_VERSION)) {
+    let message =
+      `Deno version ${MIN_DENO_VERSION} or higher is required. Please update Deno.\n\n`;
+
+    if (Deno.execPath().includes("homebrew")) {
+      message +=
+        "You seem to have installed Deno via homebrew. To update, run: `brew upgrade deno`\n";
+    } else {
+      message += "To update, run: `deno upgrade`\n";
+    }
+
+    error(message);
+  }
+}
+
 interface Manifest {
   routes: string[];
   islands: string[];
@@ -83,6 +103,7 @@ export async function generate(directory: string, manifest: Manifest) {
 // This file SHOULD be checked into source version control.
 // This file is automatically updated during development when running \`dev.ts\`.
 
+import config from "./deno.json" assert { type: "json" };
 ${
     routes.map((file, i) => `import * as $${i} from "./routes${file}";`).join(
       "\n",
@@ -107,6 +128,7 @@ const manifest = {
   }
   },
   baseUrl: import.meta.url,
+  config,
 };
 
 export default manifest;
@@ -140,6 +162,8 @@ export default manifest;
 }
 
 export async function dev(base: string, entrypoint: string) {
+  ensureMinDenoVersion();
+
   entrypoint = new URL(entrypoint, base).href;
 
   const dir = dirname(fromFileUrl(base));
diff --git a/src/runtime/main.ts b/src/runtime/main.ts
index 7639e2722d3..6f50338d516 100644
--- a/src/runtime/main.ts
+++ b/src/runtime/main.ts
@@ -24,13 +24,8 @@ function createRootFragment(
   };
 }
 
-const ISLAND_PROPS_COMPONENT = document.getElementById("__FRSH_ISLAND_PROPS");
 // deno-lint-ignore no-explicit-any
-const ISLAND_PROPS: any[] = JSON.parse(
-  ISLAND_PROPS_COMPONENT?.textContent ?? "[]",
-);
-
-export function revive(islands: Record<string, ComponentType>) {
+export function revive(islands: Record<string, ComponentType>, props: any[]) {
   function walk(node: Node | null) {
     const tag = node!.nodeType === 8 &&
       ((node as Comment).data.match(/^\s*frsh-(.*)\s*$/) || [])[1];
@@ -47,7 +42,7 @@ export function revive(islands: Record<string, ComponentType>) {
 
       const [id, n] = tag.split(":");
       render(
-        h(islands[id], ISLAND_PROPS[Number(n)]),
+        h(islands[id], props[Number(n)]),
         createRootFragment(
           parent! as HTMLElement,
           children,
diff --git a/src/runtime/main_dev.ts b/src/runtime/main_dev.ts
new file mode 100644
index 00000000000..2551dd5e099
--- /dev/null
+++ b/src/runtime/main_dev.ts
@@ -0,0 +1,2 @@
+import "preact/debug";
+export { revive } from "./main.ts";
diff --git a/src/server/bundle.ts b/src/server/bundle.ts
index 5356ac74a2c..96e1ec21688 100644
--- a/src/server/bundle.ts
+++ b/src/server/bundle.ts
@@ -1,13 +1,19 @@
+import { BuildOptions } from "https://deno.land/x/esbuild@v0.14.51/mod.js";
 import { BUILD_ID } from "./constants.ts";
 import { denoPlugin, esbuild, toFileUrl } from "./deps.ts";
-import { Island } from "./types.ts";
+import { Island, Plugin } from "./types.ts";
+
+export interface JSXConfig {
+  jsx: "react" | "react-jsx";
+  jsxImportSource?: string;
+}
 
 let esbuildInitialized: boolean | Promise<void> = false;
 async function ensureEsbuildInitialized() {
   if (esbuildInitialized === false) {
     if (Deno.run === undefined) {
       esbuildInitialized = esbuild.initialize({
-        wasmURL: "https://unpkg.com/esbuild-wasm@0.14.51/esbuild.wasm",
+        wasmURL: "https://deno.land/x/esbuild@v0.14.51/esbuild.wasm",
         worker: false,
       });
     } else {
@@ -20,34 +26,64 @@ async function ensureEsbuildInitialized() {
   }
 }
 
+const JSX_RUNTIME_MODE = {
+  "react": "transform",
+  "react-jsx": "automatic",
+} as const;
+
 export class Bundler {
   #importMapURL: URL;
+  #jsxConfig: JSXConfig;
   #islands: Island[];
+  #plugins: Plugin[];
   #cache: Map<string, Uint8Array> | Promise<void> | undefined = undefined;
+  #dev: boolean;
 
-  constructor(islands: Island[], importMapURL: URL) {
+  constructor(
+    islands: Island[],
+    plugins: Plugin[],
+    importMapURL: URL,
+    jsxConfig: JSXConfig,
+    dev: boolean,
+  ) {
     this.#islands = islands;
+    this.#plugins = plugins;
     this.#importMapURL = importMapURL;
+    this.#jsxConfig = jsxConfig;
+    this.#dev = dev;
   }
 
   async bundle() {
     const entryPoints: Record<string, string> = {
-      "main": new URL("../../src/runtime/main.ts", import.meta.url).href,
+      main: this.#dev
+        ? new URL("../../src/runtime/main_dev.ts", import.meta.url).href
+        : new URL("../../src/runtime/main.ts", import.meta.url).href,
     };
 
     for (const island of this.#islands) {
       entryPoints[`island-${island.id}`] = island.url;
     }
 
+    for (const plugin of this.#plugins) {
+      for (const [name, url] of Object.entries(plugin.entrypoints ?? {})) {
+        entryPoints[`plugin-${plugin.name}-${name}`] = url;
+      }
+    }
+
     const absWorkingDir = Deno.cwd();
     await ensureEsbuildInitialized();
+    // In dev-mode we skip identifier minification to be able to show proper
+    // component names in Preact DevTools instead of single characters.
+    const minifyOptions: Partial<BuildOptions> = this.#dev
+      ? { minifyIdentifiers: false, minifySyntax: true, minifyWhitespace: true }
+      : { minify: true };
     const bundle = await esbuild.build({
       bundle: true,
       define: { __FRSH_BUILD_ID: `"${BUILD_ID}"` },
       entryPoints,
       format: "esm",
       metafile: true,
-      minify: true,
+      ...minifyOptions,
       outdir: ".",
       // This is requried to ensure the format of the outputFiles path is the same
       // between windows and linux
@@ -59,6 +95,8 @@ export class Bundler {
       target: ["chrome99", "firefox99", "safari15"],
       treeShaking: true,
       write: false,
+      jsx: JSX_RUNTIME_MODE[this.#jsxConfig.jsx],
+      jsxImportSource: this.#jsxConfig.jsxImportSource,
     });
     // const metafileOutputs = bundle.metafile!.outputs;
 
diff --git a/src/server/context.ts b/src/server/context.ts
index 42731ecd82c..4fe70bdf59e 100644
--- a/src/server/context.ts
+++ b/src/server/context.ts
@@ -3,7 +3,7 @@ import {
   extname,
   fromFileUrl,
   RequestHandler,
-  router,
+  rutt,
   Status,
   toFileUrl,
   typeByExtension,
@@ -11,9 +11,9 @@ import {
 } from "./deps.ts";
 import { h } from "preact";
 import { Manifest } from "./mod.ts";
-import { Bundler } from "./bundle.ts";
+import { Bundler, JSXConfig } from "./bundle.ts";
 import { ALIVE_URL, BUILD_ID, JS_PREFIX, REFRESH_JS_URL } from "./constants.ts";
-import DefaultErrorHandler from "./default_error_page.tsx";
+import DefaultErrorHandler from "./default_error_page.ts";
 import {
   AppModule,
   ErrorPage,
@@ -24,13 +24,14 @@ import {
   Middleware,
   MiddlewareModule,
   MiddlewareRoute,
+  Plugin,
   RenderFunction,
   Route,
   RouteModule,
   UnknownPage,
   UnknownPageModule,
 } from "./types.ts";
-import { render as internalRender } from "./render.tsx";
+import { render as internalRender } from "./render.ts";
 import { ContentSecurityPolicyDirectives, SELF } from "../runtime/csp.ts";
 import { ASSET_CACHE_BUST_KEY, INTERNAL_PREFIX } from "../runtime/utils.ts";
 interface RouterState {
@@ -61,6 +62,7 @@ export class ServerContext {
   #app: AppModule;
   #notFound: UnknownPage;
   #error: ErrorPage;
+  #plugins: Plugin[];
 
   constructor(
     routes: Route[],
@@ -71,7 +73,9 @@ export class ServerContext {
     app: AppModule,
     notFound: UnknownPage,
     error: ErrorPage,
+    plugins: Plugin[],
     importMapURL: URL,
+    jsxConfig: JSXConfig,
   ) {
     this.#routes = routes;
     this.#islands = islands;
@@ -81,8 +85,15 @@ export class ServerContext {
     this.#app = app;
     this.#notFound = notFound;
     this.#error = error;
-    this.#bundler = new Bundler(this.#islands, importMapURL);
+    this.#plugins = plugins;
     this.#dev = typeof Deno.env.get("DENO_DEPLOYMENT_ID") !== "string"; // Env var is only set in prod (on Deploy).
+    this.#bundler = new Bundler(
+      this.#islands,
+      this.#plugins,
+      importMapURL,
+      jsxConfig,
+      this.#dev,
+    );
   }
 
   /**
@@ -94,7 +105,32 @@ export class ServerContext {
   ): Promise<ServerContext> {
     // Get the manifest' base URL.
     const baseUrl = new URL("./", manifest.baseUrl).href;
-    const importMapURL = new URL("./import_map.json", manifest.baseUrl);
+
+    const config = manifest.config || { importMap: "./import_map.json" };
+    if (typeof config.importMap !== "string") {
+      throw new Error("deno.json must contain an 'importMap' property.");
+    }
+    const importMapURL = new URL(config.importMap, manifest.baseUrl);
+
+    config.compilerOptions ??= {};
+
+    let jsx: "react" | "react-jsx";
+    switch (config.compilerOptions.jsx) {
+      case "react":
+      case undefined:
+        jsx = "react";
+        break;
+      case "react-jsx":
+        jsx = "react-jsx";
+        break;
+      default:
+        throw new Error("Unknown jsx option: " + config.compilerOptions.jsx);
+    }
+
+    const jsxConfig: JSXConfig = {
+      jsx,
+      jsxImportSource: config.compilerOptions.jsxImportSource,
+    };
 
     // Extract all routes, and prepare them into the `Page` structure.
     const routes: Route[] = [];
@@ -162,7 +198,7 @@ export class ServerContext {
           url,
           name,
           component,
-          handler: handler ?? ((req) => router.defaultOtherHandler(req)),
+          handler: handler ?? ((req) => rutt.defaultOtherHandler(req)),
           csp: Boolean(config?.csp ?? false),
         };
       } else if (
@@ -181,7 +217,7 @@ export class ServerContext {
           name,
           component,
           handler: handler ??
-            ((req, ctx) => router.defaultErrorHandler(req, ctx, ctx.error)),
+            ((req, ctx) => rutt.defaultErrorHandler(req, ctx, ctx.error)),
           csp: Boolean(config?.csp ?? false),
         };
       }
@@ -208,7 +244,10 @@ export class ServerContext {
 
     const staticFiles: StaticFile[] = [];
     try {
-      const staticFolder = new URL("./static", manifest.baseUrl);
+      const staticFolder = new URL(
+        opts.staticDir ?? "./static",
+        manifest.baseUrl,
+      );
       // TODO(lucacasonato): remove the extranious Deno.readDir when
       // https://github.com/denoland/deno_std/issues/1310 is fixed.
       for await (const _ of Deno.readDir(fromFileUrl(staticFolder))) {
@@ -260,7 +299,9 @@ export class ServerContext {
       app,
       notFound,
       error,
+      opts.plugins ?? [],
       importMapURL,
+      jsxConfig,
     );
   }
 
@@ -269,7 +310,7 @@ export class ServerContext {
    * by fresh, including static files.
    */
   handler(): RequestHandler {
-    const inner = router.router<RouterState>(...this.#handlers());
+    const inner = rutt.router<RouterState>(...this.#handlers());
     const withMiddlewares = this.#composeMiddlewares(this.#middlewares);
     return function handler(req: Request, connInfo: ConnInfo) {
       // Redirect requests that end with a trailing slash
@@ -292,7 +333,7 @@ export class ServerContext {
     return (
       req: Request,
       connInfo: ConnInfo,
-      inner: router.Handler<RouterState>,
+      inner: rutt.Handler<RouterState>,
     ) => {
       // identify middlewares to apply, if any.
       // middlewares should be already sorted from deepest to shallow layer
@@ -310,7 +351,14 @@ export class ServerContext {
       };
 
       for (const mw of mws) {
-        handlers.push(() => mw.handler(req, ctx));
+        if (mw.handler instanceof Array) {
+          for (const handler of mw.handler) {
+            handlers.push(() => handler(req, ctx));
+          }
+        } else {
+          const handler = mw.handler;
+          handlers.push(() => handler(req, ctx));
+        }
       }
 
       handlers.push(() => inner(req, ctx));
@@ -325,11 +373,11 @@ export class ServerContext {
    * path-to-regex, to handler mapping.
    */
   #handlers(): [
-    router.Routes<RouterState>,
-    router.Handler<RouterState>,
-    router.ErrorHandler<RouterState>,
+    rutt.Routes<RouterState>,
+    rutt.Handler<RouterState>,
+    rutt.ErrorHandler<RouterState>,
   ] {
-    const routes: router.Routes<RouterState> = {};
+    const routes: rutt.Routes<RouterState> = {};
 
     routes[`${INTERNAL_PREFIX}${JS_PREFIX}/${BUILD_ID}/:path*`] = this
       .#bundleAssetRoute();
@@ -337,8 +385,8 @@ export class ServerContext {
     if (this.#dev) {
       routes[REFRESH_JS_URL] = () => {
         const js =
-          `let reloading = false; const buildId = "${BUILD_ID}"; new EventSource("${ALIVE_URL}").addEventListener("message", (e) => { if (e.data !== buildId && !reloading) { reloading = true; location.reload(); } });`;
-        return new Response(new TextEncoder().encode(js), {
+          `new EventSource("${ALIVE_URL}").addEventListener("message", function listener(e) { if (e.data !== "${BUILD_ID}") { this.removeEventListener('message', listener); location.reload(); } });`;
+        return new Response(js, {
           headers: {
             "content-type": "application/javascript; charset=utf-8",
           },
@@ -414,6 +462,7 @@ export class ServerContext {
           const resp = await internalRender({
             route,
             islands: this.#islands,
+            plugins: this.#plugins,
             app: this.#app,
             imports,
             preloads,
@@ -448,6 +497,8 @@ export class ServerContext {
       };
     };
 
+    const createUnknownRender = genRender(this.#notFound, Status.NotFound);
+
     for (const route of this.#routes) {
       const createRender = genRender(route, Status.OK);
       if (typeof route.handler === "function") {
@@ -456,6 +507,7 @@ export class ServerContext {
             ...ctx,
             params,
             render: createRender(req, params),
+            renderNotFound: createUnknownRender(req, {}),
           });
       } else {
         for (const [method, handler] of Object.entries(route.handler)) {
@@ -464,13 +516,13 @@ export class ServerContext {
               ...ctx,
               params,
               render: createRender(req, params),
+              renderNotFound: createUnknownRender(req, {}),
             });
         }
       }
     }
 
-    const unknownHandlerRender = genRender(this.#notFound, Status.NotFound);
-    const unknownHandler: router.Handler<RouterState> = (
+    const unknownHandler: rutt.Handler<RouterState> = (
       req,
       ctx,
     ) =>
@@ -478,7 +530,7 @@ export class ServerContext {
         req,
         {
           ...ctx,
-          render: unknownHandlerRender(req, {}),
+          render: createUnknownRender(req, {}),
         },
       );
 
@@ -486,7 +538,7 @@ export class ServerContext {
       this.#error,
       Status.InternalServerError,
     );
-    const errorHandler: router.ErrorHandler<RouterState> = (
+    const errorHandler: rutt.ErrorHandler<RouterState> = (
       req,
       ctx,
       error,
@@ -514,7 +566,7 @@ export class ServerContext {
     size: number,
     contentType: string,
     etag: string,
-  ): router.MatchHandler {
+  ): rutt.MatchHandler {
     return async (req: Request) => {
       const url = new URL(req.url);
       const key = url.searchParams.get(ASSET_CACHE_BUST_KEY);
@@ -552,7 +604,7 @@ export class ServerContext {
    * Returns a router that contains all fresh routes. Should be mounted at
    * constants.INTERNAL_PREFIX
    */
-  #bundleAssetRoute = (): router.MatchHandler => {
+  #bundleAssetRoute = (): rutt.MatchHandler => {
     return async (_req, _ctx, params) => {
       const path = `/${params.path}`;
       const file = await this.#bundler.get(path);
@@ -592,7 +644,7 @@ const DEFAULT_NOT_FOUND: UnknownPage = {
   pattern: "",
   url: "",
   name: "_404",
-  handler: (req) => router.defaultOtherHandler(req),
+  handler: (req) => rutt.defaultOtherHandler(req),
   csp: false,
 };
 
diff --git a/src/server/default_error_page.ts b/src/server/default_error_page.ts
new file mode 100644
index 00000000000..6b6d059e8d4
--- /dev/null
+++ b/src/server/default_error_page.ts
@@ -0,0 +1,58 @@
+import { h } from "preact";
+import { DEBUG } from "./constants.ts";
+import type { ErrorPageProps } from "./types.ts";
+
+export default function DefaultErrorPage(props: ErrorPageProps) {
+  const { error } = props;
+
+  let message = undefined;
+  if (DEBUG) {
+    if (error instanceof Error) {
+      message = error.stack;
+    } else {
+      message = String(error);
+    }
+  }
+
+  return h(
+    "div",
+    {
+      style: {
+        display: "flex",
+        justifyContent: "center",
+        alignItems: "center",
+      },
+    },
+    h(
+      "div",
+      {
+        style: {
+          border: "#f3f4f6 2px solid",
+          borderTop: "red 4px solid",
+          background: "#f9fafb",
+          margin: 16,
+          minWidth: "300px",
+          width: "50%",
+        },
+      },
+      h("p", {
+        style: {
+          margin: 0,
+          fontSize: "12pt",
+          padding: 16,
+          fontFamily: "sans-serif",
+        },
+      }, "An error occured during route handling or page rendering."),
+      message && h("pre", {
+        style: {
+          margin: 0,
+          fontSize: "12pt",
+          overflowY: "auto",
+          padding: 16,
+          paddingTop: 0,
+          fontFamily: "monospace",
+        },
+      }, message),
+    ),
+  );
+}
diff --git a/src/server/default_error_page.tsx b/src/server/default_error_page.tsx
deleted file mode 100644
index 360091bd5df..00000000000
--- a/src/server/default_error_page.tsx
+++ /dev/null
@@ -1,64 +0,0 @@
-/** @jsx h */
-
-import { h } from "preact";
-import { DEBUG } from "./constants.ts";
-import type { ErrorPageProps } from "./types.ts";
-
-export default function DefaultErrorPage(props: ErrorPageProps) {
-  const { error } = props;
-
-  let message = undefined;
-  if (DEBUG) {
-    if (error instanceof Error) {
-      message = error.stack;
-    } else {
-      message = String(error);
-    }
-  }
-
-  return (
-    <div
-      style={{
-        display: "flex",
-        justifyContent: "center",
-        alignItems: "center",
-      }}
-    >
-      <div
-        style={{
-          border: "#f3f4f6 2px solid",
-          borderTop: "red 4px solid",
-          background: "#f9fafb",
-          margin: 16,
-          minWidth: "300px",
-          width: "50%",
-        }}
-      >
-        <p
-          style={{
-            margin: 0,
-            fontSize: "12pt",
-            padding: 16,
-            fontFamily: "sans-serif",
-          }}
-        >
-          An error occured during route handling or page rendering.
-        </p>
-        {message && (
-          <pre
-            style={{
-              margin: 0,
-              fontSize: "12pt",
-              overflowY: "auto",
-              padding: 16,
-              paddingTop: 0,
-              fontFamily: "monospace",
-            }}
-          >
-            {message}
-          </pre>
-        )}
-      </div>
-    </div>
-  );
-}
diff --git a/src/server/deps.ts b/src/server/deps.ts
index 0f96d6b8e21..2fca03b2748 100644
--- a/src/server/deps.ts
+++ b/src/server/deps.ts
@@ -16,8 +16,8 @@ export {
   typeByExtension,
 } from "https://deno.land/std@0.150.0/media_types/mod.ts";
 
-// -- router --
-export * as router from "https://crux.land/router@0.0.11";
+// -- rutt --
+export * as rutt from "https://deno.land/x/rutt@0.0.13/mod.ts";
 
 // -- esbuild --
 // @deno-types="https://deno.land/x/esbuild@v0.14.51/mod.d.ts"
diff --git a/src/server/mod.ts b/src/server/mod.ts
index bd9b24e2601..37cec50ebd7 100644
--- a/src/server/mod.ts
+++ b/src/server/mod.ts
@@ -19,8 +19,13 @@ export type {
   Handler,
   HandlerContext,
   Handlers,
+  MiddlewareHandler,
   MiddlewareHandlerContext,
   PageProps,
+  Plugin,
+  PluginRenderResult,
+  PluginRenderScripts,
+  PluginRenderStyleTag,
   RenderFunction,
   RouteConfig,
   StartOptions,
@@ -28,8 +33,8 @@ export type {
   UnknownHandlerContext,
   UnknownPageProps,
 } from "./types.ts";
-export { RenderContext } from "./render.tsx";
-export type { InnerRenderFunction } from "./render.tsx";
+export { RenderContext } from "./render.ts";
+export type { InnerRenderFunction } from "./render.ts";
 
 export interface Manifest {
   routes: Record<
@@ -42,14 +47,26 @@ export interface Manifest {
   >;
   islands: Record<string, IslandModule>;
   baseUrl: string;
+  config?: DenoConfig;
+}
+
+export interface DenoConfig {
+  importMap: string;
+  compilerOptions?: {
+    jsx?: string;
+    jsxImportSource?: string;
+  };
 }
 
 export { ServerContext };
 
-export async function start(
-  routes: Manifest,
-  opts: StartOptions = {},
-) {
+export async function start(routes: Manifest, opts: StartOptions = {}) {
   const ctx = await ServerContext.fromManifest(routes, opts);
-  await serve(ctx.handler(), opts);
+  opts.port ??= 8000;
+  if (opts.experimentalDenoServe === true) {
+    // @ts-ignore as `Deno.serve` is still unstable.
+    await Deno.serve(ctx.handler() as Deno.ServeHandler, opts);
+  } else {
+    await serve(ctx.handler(), opts);
+  }
 }
diff --git a/src/server/render.tsx b/src/server/render.ts
similarity index 65%
rename from src/server/render.tsx
rename to src/server/render.ts
index de2216684e4..c77313ae9f5 100644
--- a/src/server/render.tsx
+++ b/src/server/render.ts
@@ -1,10 +1,13 @@
-/** @jsx h */
 import { renderToString } from "preact-render-to-string";
 import { ComponentChildren, ComponentType, h, options } from "preact";
 import {
   AppModule,
   ErrorPage,
   Island,
+  Plugin,
+  PluginRenderFunctionResult,
+  PluginRenderResult,
+  PluginRenderStyleTag,
   RenderFunction,
   Route,
   UnknownPage,
@@ -18,6 +21,7 @@ import { assetHashingHook } from "../runtime/utils.ts";
 export interface RenderOptions<Data> {
   route: Route<Data> | UnknownPage | ErrorPage;
   islands: Island[];
+  plugins: Plugin[];
   app: AppModule;
   imports: string[];
   preloads: string[];
@@ -98,26 +102,8 @@ function defaultCsp() {
 }
 
 /**
- * This function renders out a page. Rendering is asynchronous, and streaming.
- * Rendering happens in multiple steps, because of the need to handle suspense.
- *
- * 1. The page's vnode tree is constructed.
- * 2. The page's vnode tree is passed to the renderer.
- *   - If the rendering throws a promise, the promise is awaited before
- *     continuing. This allows the renderer to handle async hooks.
- *   - Once the rendering throws no more promises, the initial render is
- *     complete and a body string is returned.
- *   - During rendering, every time a `<Suspense>` is rendered, it, and it's
- *     attached children are recorded for later rendering.
- * 3. Once the inital render is complete, the body string is fitted into the
- *    HTML wrapper template.
- * 4. The full inital render in the template is yielded to be sent to the
- *    client.
- * 5. Now the suspended vnodes are rendered. These are individually rendered
- *    like described in step 2 above. Once each node is done rendering, it
- *    wrapped in some boilderplate HTML, and suffixed with some JS, and then
- *    sent to the client. On the client the HTML will be slotted into the DOM
- *    at the location of the original `<Suspense>` node.
+ * This function renders out a page. Rendering is synchronous and non streaming.
+ * Suspense boundaries are not supported.
  */
 export async function render<Data>(
   opts: RenderOptions<Data>,
@@ -176,17 +162,46 @@ export async function render<Data>(
 
   let bodyHtml: string | null = null;
 
-  function render() {
+  function realRender(): string {
     bodyHtml = renderToString(vnode);
     return bodyHtml;
   }
 
-  await opts.renderFn(ctx, render as InnerRenderFunction);
+  const plugins = opts.plugins.filter((p) => p.render !== null);
+  const renderResults: [Plugin, PluginRenderResult][] = [];
+
+  function render(): PluginRenderFunctionResult {
+    const plugin = plugins.shift();
+    if (plugin) {
+      const res = plugin.render!({ render });
+      if (res === undefined) {
+        throw new Error(
+          `${plugin?.name}'s render hook did not return a PluginRenderResult object.`,
+        );
+      }
+      renderResults.push([plugin, res]);
+    } else {
+      realRender();
+    }
+    if (bodyHtml === null) {
+      throw new Error(
+        `The 'render' function was not called by ${plugin?.name}'s render hook.`,
+      );
+    }
+    return {
+      htmlText: bodyHtml,
+      requiresHydration: ENCOUNTERED_ISLANDS.size > 0,
+    };
+  }
+
+  await opts.renderFn(ctx, () => render().htmlText);
 
   if (bodyHtml === null) {
     throw new Error("The `render` function was not called by the renderer.");
   }
 
+  bodyHtml = bodyHtml as string;
+
   const imports = opts.imports.map((url) => {
     const randomNonce = crypto.randomUUID().replace(/-/g, "");
     if (csp) {
@@ -198,6 +213,32 @@ export async function render<Data>(
     return [url, randomNonce] as const;
   });
 
+  const state: [islands: unknown[], plugins: unknown[]] = [ISLAND_PROPS, []];
+  const styleTags: PluginRenderStyleTag[] = [];
+
+  let script =
+    `const STATE_COMPONENT = document.getElementById("__FRSH_STATE");const STATE = JSON.parse(STATE_COMPONENT?.textContent ?? "[[],[]]");`;
+
+  for (const [plugin, res] of renderResults) {
+    for (const hydrate of res.scripts ?? []) {
+      const i = state[1].push(hydrate.state) - 1;
+      const randomNonce = crypto.randomUUID().replace(/-/g, "");
+      if (csp) {
+        csp.directives.scriptSrc = [
+          ...csp.directives.scriptSrc ?? [],
+          nonce(randomNonce),
+        ];
+      }
+      const url = bundleAssetUrl(
+        `/plugin-${plugin.name}-${hydrate.entrypoint}.js`,
+      );
+      imports.push([url, randomNonce] as const);
+
+      script += `import p${i} from "${url}";p${i}(STATE[1][${i}]);`;
+    }
+    styleTags.splice(styleTags.length, 0, ...res.styles ?? []);
+  }
+
   if (ENCOUNTERED_ISLANDS.size > 0) {
     // Load the main.js script
     {
@@ -212,8 +253,9 @@ export async function render<Data>(
       imports.push([url, randomNonce] as const);
     }
 
+    script += `import { revive } from "${bundleAssetUrl("/main.js")}";`;
+
     // Prepare the inline script that loads and revives the islands
-    let islandImports = "";
     let islandRegistry = "";
     for (const island of ENCOUNTERED_ISLANDS) {
       const randomNonce = crypto.randomUUID().replace(/-/g, "");
@@ -225,12 +267,17 @@ export async function render<Data>(
       }
       const url = bundleAssetUrl(`/island-${island.id}.js`);
       imports.push([url, randomNonce] as const);
-      islandImports += `\nimport ${island.name} from "${url}";`;
-      islandRegistry += `\n  ${island.id}: ${island.name},`;
+      script += `import ${island.name} from "${url}";`;
+      islandRegistry += `${island.id}:${island.name},`;
     }
-    const initCode = `import { revive } from "${
-      bundleAssetUrl("/main.js")
-    }";${islandImports}\nrevive({${islandRegistry}\n});`;
+    script += `revive({${islandRegistry}}, STATE[0]);`;
+  }
+
+  if (state[0].length > 0 || state[1].length > 0) {
+    // Append state to the body
+    bodyHtml += `<script id="__FRSH_STATE" type="application/json">${
+      JSON.stringify(state)
+    }</script>`;
 
     // Append the inline script to the body
     const randomNonce = crypto.randomUUID().replace(/-/g, "");
@@ -240,10 +287,25 @@ export async function render<Data>(
         nonce(randomNonce),
       ];
     }
-    (bodyHtml as string) +=
-      `<script id="__FRSH_ISLAND_PROPS" type="application/json">${
-        JSON.stringify(ISLAND_PROPS)
-      }</script><script type="module" nonce="${randomNonce}">${initCode}</script>`;
+    bodyHtml +=
+      `<script type="module" nonce="${randomNonce}">${script}</script>`;
+  }
+
+  if (ctx.styles.length > 0) {
+    const node = h("style", {
+      id: "__FRSH_STYLE",
+      dangerouslySetInnerHTML: { __html: ctx.styles.join("\n") },
+    });
+    headComponents.splice(0, 0, node);
+  }
+
+  for (const style of styleTags) {
+    const node = h("style", {
+      id: style.id,
+      dangerouslySetInnerHTML: { __html: style.cssText },
+      media: style.media,
+    });
+    headComponents.splice(0, 0, node);
   }
 
   const html = template({
@@ -251,7 +313,6 @@ export async function render<Data>(
     headComponents,
     imports,
     preloads: opts.preloads,
-    styles: ctx.styles,
     lang: ctx.lang,
   });
 
@@ -262,31 +323,32 @@ export interface TemplateOptions {
   bodyHtml: string;
   headComponents: ComponentChildren[];
   imports: (readonly [string, string])[];
-  styles: string[];
   preloads: string[];
   lang: string;
 }
 
 export function template(opts: TemplateOptions): string {
-  const page = (
-    <html lang={opts.lang}>
-      <head>
-        <meta charSet="UTF-8" />
-        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
-        {opts.preloads.map((src) => <link rel="modulepreload" href={src} />)}
-        {opts.imports.map(([src, nonce]) => (
-          <script src={src} nonce={nonce} type="module"></script>
-        ))}
-        <style
-          id="__FRSH_STYLE"
-          dangerouslySetInnerHTML={{ __html: opts.styles.join("\n") }}
-        />
-        {opts.headComponents}
-      </head>
-      <body dangerouslySetInnerHTML={{ __html: opts.bodyHtml }} />
-    </html>
+  const page = h(
+    "html",
+    { lang: opts.lang },
+    h(
+      "head",
+      null,
+      h("meta", { charset: "UTF-8" }),
+      h("meta", {
+        name: "viewport",
+        content: "width=device-width, initial-scale=1.0",
+      }),
+      opts.preloads.map((src) =>
+        h("link", { rel: "modulepreload", href: src })
+      ),
+      opts.imports.map(([src, nonce]) =>
+        h("script", { src: src, nonce: nonce, type: "module" })
+      ),
+      opts.headComponents,
+    ),
+    h("body", { dangerouslySetInnerHTML: { __html: opts.bodyHtml } }),
   );
-
   return "<!DOCTYPE html>" + renderToString(page);
 }
 
diff --git a/src/server/render_test.ts b/src/server/render_test.ts
index 3e84b821281..40a6d0f9cce 100644
--- a/src/server/render_test.ts
+++ b/src/server/render_test.ts
@@ -1,5 +1,6 @@
-import { template } from "./render.tsx";
+import { template } from "./render.ts";
 import { assertStringIncludes } from "../../tests/deps.ts";
+
 Deno.test("check lang", () => {
   const lang = "fr";
   const body = template({
@@ -7,8 +8,7 @@ Deno.test("check lang", () => {
     headComponents: [],
     imports: [],
     preloads: [],
-    styles: [],
-    lang: lang,
+    lang,
   });
   assertStringIncludes(body, `<html lang="${lang}">`);
 });
diff --git a/src/server/types.ts b/src/server/types.ts
index 6e85858d6d3..68e071ff5e6 100644
--- a/src/server/types.ts
+++ b/src/server/types.ts
@@ -1,13 +1,23 @@
 import { ComponentType } from "preact";
-import { ConnInfo, router, ServeInit } from "./deps.ts";
-import { InnerRenderFunction, RenderContext } from "./render.tsx";
+import { ConnInfo, rutt, ServeInit } from "./deps.ts";
+import { InnerRenderFunction, RenderContext } from "./render.ts";
 
 // --- APPLICATION CONFIGURATION ---
 
-export type StartOptions = ServeInit & FreshOptions;
+export type StartOptions = ServeInit & FreshOptions & {
+  /**
+   * UNSTABLE: use the `Deno.serve` API as the underlying HTTP server instead of
+   * the `std/http` API. Do not use this in production.
+   *
+   * This option is experimental and may be removed in a future Fresh release.
+   */
+  experimentalDenoServe?: boolean;
+};
 
 export interface FreshOptions {
   render?: RenderFunction;
+  plugins?: Plugin[];
+  staticDir?: string;
 }
 
 export type RenderFunction = (
@@ -65,6 +75,7 @@ export interface HandlerContext<Data = unknown, State = Record<string, unknown>>
   extends ConnInfo {
   params: Record<string, string>;
   render: (data?: Data) => Response | Promise<Response>;
+  renderNotFound: () => Response | Promise<Response>;
   state: State;
 }
 
@@ -76,7 +87,7 @@ export type Handler<T = any, State = Record<string, unknown>> = (
 
 // deno-lint-ignore no-explicit-any
 export type Handlers<T = any, State = Record<string, unknown>> = {
-  [K in typeof router.METHODS[number]]?: Handler<T, State>;
+  [K in typeof rutt.METHODS[number]]?: Handler<T, State>;
 };
 
 export interface RouteModule {
@@ -202,19 +213,18 @@ export interface MiddlewareRoute extends Middleware {
   compiledPattern: URLPattern;
 }
 
+export type MiddlewareHandler<State = Record<string, unknown>> = (
+  req: Request,
+  ctx: MiddlewareHandlerContext<State>,
+) => Response | Promise<Response>;
+
 // deno-lint-ignore no-explicit-any
 export interface MiddlewareModule<State = any> {
-  handler(
-    req: Request,
-    ctx: MiddlewareHandlerContext<State>,
-  ): Response | Promise<Response>;
+  handler: MiddlewareHandler<State> | MiddlewareHandler<State>[];
 }
 
 export interface Middleware<State = Record<string, unknown>> {
-  handler(
-    req: Request,
-    ctx: MiddlewareHandlerContext<State>,
-  ): Response | Promise<Response>;
+  handler: MiddlewareHandler<State> | MiddlewareHandler<State>[];
 }
 
 // --- ISLANDS ---
@@ -230,3 +240,67 @@ export interface Island {
   url: string;
   component: ComponentType<unknown>;
 }
+
+// --- PLUGINS ---
+
+export interface Plugin {
+  /** The name of the plugin. Must be snake-case. */
+  name: string;
+
+  /** A map of a snake-case names to a import specifiers. The entrypoints
+   * declared here can later be used in the "scripts" option of
+   * `PluginRenderResult` to load the entrypoint's code on the client.
+   */
+  entrypoints?: Record<string, string>;
+
+  /** The render hook is called on the server every time some JSX needs to
+   * be turned into HTML. The render hook needs to call the `ctx.render`
+   * function exactly once.
+   *
+   * The hook can return a `PluginRenderResult` object that can do things like
+   * inject CSS into the page, or load additional JS files on the client.
+   */
+  render?(ctx: PluginRenderContext): PluginRenderResult;
+}
+
+export interface PluginRenderContext {
+  render: PluginRenderFunction;
+}
+
+export interface PluginRenderResult {
+  /** CSS styles to be injected into the page. */
+  styles?: PluginRenderStyleTag[];
+  /** JS scripts to ship to the client. */
+  scripts?: PluginRenderScripts[];
+}
+
+export interface PluginRenderStyleTag {
+  cssText: string;
+  media?: string;
+  id?: string;
+}
+
+export interface PluginRenderScripts {
+  /** The "key" of the entrypoint (as specified in `Plugin.entrypoints`) for the
+   * script that should be loaded. The script must be an ES module that exports
+   * a default function.
+   *
+   * The default function is invoked with the `state` argument specified below.
+   */
+  entrypoint: string;
+  /** The state argument that is passed to the default export invocation of the
+   * entrypoint's default export. The state must be JSON-serializable.
+   */
+  state: unknown;
+}
+
+export type PluginRenderFunction = () => PluginRenderFunctionResult;
+
+export interface PluginRenderFunctionResult {
+  /** The HTML text that was rendered. */
+  htmlText: string;
+  /** If the renderer encountered any islands that require hydration on the
+   * client.
+   */
+  requiresHydration: boolean;
+}
diff --git a/tests/cli_test.ts b/tests/cli_test.ts
index f021be8e07a..ab1694d44e2 100644
--- a/tests/cli_test.ts
+++ b/tests/cli_test.ts
@@ -206,6 +206,7 @@ Deno.test({
           { "type": "file", "name": "README.md" },
           { "type": "file", "name": "import_map.json" },
           { "type": "file", "name": "fresh.gen.ts" },
+          { "type": "file", "name": "twind.config.ts" },
           {
             "type": "directory",
             "name": "components",
@@ -243,13 +244,6 @@ Deno.test({
               { "type": "file", "name": "logo.svg" },
             ],
           },
-          {
-            "type": "directory",
-            "name": "utils",
-            "contents": [
-              { "type": "file", "name": "twind.ts" },
-            ],
-          },
           {
             "type": "directory",
             "name": ".vscode",
diff --git a/tests/deps.ts b/tests/deps.ts
index 9f5a0a75161..7d98005c1d9 100644
--- a/tests/deps.ts
+++ b/tests/deps.ts
@@ -1,8 +1,8 @@
 /// <reference no-default-lib="true" />
 /// <reference lib="dom" />
+/// <reference lib="dom.iterable" />
 /// <reference lib="dom.asynciterable" />
 /// <reference lib="deno.ns" />
-/// <reference lib="deno.unstable" />
 
 export {
   assert,
@@ -13,4 +13,4 @@ export {
   TextLineStream,
 } from "https://deno.land/std@0.150.0/streams/delimiter.ts";
 export { delay } from "https://deno.land/std@0.150.0/async/delay.ts";
-export { default as puppeteer } from "https://deno.land/x/puppeteer@14.1.1/mod.ts";
+export { default as puppeteer } from "https://deno.land/x/puppeteer@16.2.0/mod.ts";
diff --git a/tests/error_test.ts b/tests/error_test.ts
index f5768e1e885..fe367a9cd30 100644
--- a/tests/error_test.ts
+++ b/tests/error_test.ts
@@ -4,8 +4,9 @@ import { assert, assertEquals, assertStringIncludes } from "./deps.ts";
 import manifest from "./fixture_error/fresh.gen.ts";
 
 const ctx = await ServerContext.fromManifest(manifest, {});
+const handler = ctx.handler();
 const router = (req: Request) => {
-  return ctx.handler()(req, {
+  return handler(req, {
     localAddr: {
       transport: "tcp",
       hostname: "127.0.0.1",
diff --git a/tests/fixture/custom_static/custom.txt b/tests/fixture/custom_static/custom.txt
new file mode 100644
index 00000000000..87245193225
--- /dev/null
+++ b/tests/fixture/custom_static/custom.txt
@@ -0,0 +1 @@
+dir
\ No newline at end of file
diff --git a/tests/fixture/deno.json b/tests/fixture/deno.json
new file mode 100644
index 00000000000..e99326100e2
--- /dev/null
+++ b/tests/fixture/deno.json
@@ -0,0 +1,7 @@
+{
+  "importMap": "./import_map.json",
+  "compilerOptions": {
+    "jsx": "react-jsx",
+    "jsxImportSource": "preact"
+  }
+}
diff --git a/tests/fixture/fresh.gen.ts b/tests/fixture/fresh.gen.ts
index 959c48294b4..16711d7641e 100644
--- a/tests/fixture/fresh.gen.ts
+++ b/tests/fixture/fresh.gen.ts
@@ -2,6 +2,7 @@
 // This file SHOULD be checked into source version control.
 // This file is automatically updated during development when running `dev.ts`.
 
+import config from "./deno.json" assert { type: "json" };
 import * as $0 from "./routes/[name].tsx";
 import * as $1 from "./routes/_404.tsx";
 import * as $2 from "./routes/_500.tsx";
@@ -24,10 +25,11 @@ import * as $18 from "./routes/layeredMdw/layer2/index.ts";
 import * as $19 from "./routes/layeredMdw/layer2/layer3/[id].ts";
 import * as $20 from "./routes/layeredMdw/layer2/layer3/_middleware.ts";
 import * as $21 from "./routes/middleware_root.ts";
-import * as $22 from "./routes/params.tsx";
-import * as $23 from "./routes/props/[id].tsx";
-import * as $24 from "./routes/static.tsx";
-import * as $25 from "./routes/wildcard.tsx";
+import * as $22 from "./routes/not_found.ts";
+import * as $23 from "./routes/params.tsx";
+import * as $24 from "./routes/props/[id].tsx";
+import * as $25 from "./routes/static.tsx";
+import * as $26 from "./routes/wildcard.tsx";
 import * as $$0 from "./islands/Counter.tsx";
 import * as $$1 from "./islands/Test.tsx";
 import * as $$2 from "./islands/kebab-case-counter-test.tsx";
@@ -56,10 +58,11 @@ const manifest = {
     "./routes/layeredMdw/layer2/layer3/[id].ts": $19,
     "./routes/layeredMdw/layer2/layer3/_middleware.ts": $20,
     "./routes/middleware_root.ts": $21,
-    "./routes/params.tsx": $22,
-    "./routes/props/[id].tsx": $23,
-    "./routes/static.tsx": $24,
-    "./routes/wildcard.tsx": $25,
+    "./routes/not_found.ts": $22,
+    "./routes/params.tsx": $23,
+    "./routes/props/[id].tsx": $24,
+    "./routes/static.tsx": $25,
+    "./routes/wildcard.tsx": $26,
   },
   islands: {
     "./islands/Counter.tsx": $$0,
@@ -67,6 +70,7 @@ const manifest = {
     "./islands/kebab-case-counter-test.tsx": $$2,
   },
   baseUrl: import.meta.url,
+  config,
 };
 
 export default manifest;
diff --git a/tests/fixture/import_map.json b/tests/fixture/import_map.json
index e59539e4ddd..8bdfff3d5ec 100644
--- a/tests/fixture/import_map.json
+++ b/tests/fixture/import_map.json
@@ -1,8 +1,8 @@
 {
   "imports": {
     "$fresh/": "../../",
-    "preact": "https://esm.sh/preact@10.10.0",
-    "preact/": "https://esm.sh/preact@10.10.0/",
-    "preact-render-to-string": "https://esm.sh/preact-render-to-string@5.2.1?external=preact"
+    "preact": "https://esm.sh/preact@10.10.6",
+    "preact/": "https://esm.sh/preact@10.10.6/",
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@5.2.3"
   }
 }
diff --git a/tests/fixture/islands/Counter.tsx b/tests/fixture/islands/Counter.tsx
index e877418e998..953a2a60362 100644
--- a/tests/fixture/islands/Counter.tsx
+++ b/tests/fixture/islands/Counter.tsx
@@ -1,5 +1,3 @@
-/** @jsx h */
-import { h } from "preact";
 import { useState } from "preact/hooks";
 import { IS_BROWSER } from "$fresh/runtime.ts";
 
diff --git a/tests/fixture/islands/Test.tsx b/tests/fixture/islands/Test.tsx
index a2c77765f24..131737d8166 100644
--- a/tests/fixture/islands/Test.tsx
+++ b/tests/fixture/islands/Test.tsx
@@ -1,6 +1,3 @@
-/** @jsx h */
-import { h } from "preact";
-
 export default function Test(props: { message: string }) {
   return (
     <div>
diff --git a/tests/fixture/islands/kebab-case-counter-test.tsx b/tests/fixture/islands/kebab-case-counter-test.tsx
index 90f16aa5f3d..88612aaddc7 100644
--- a/tests/fixture/islands/kebab-case-counter-test.tsx
+++ b/tests/fixture/islands/kebab-case-counter-test.tsx
@@ -1,5 +1,3 @@
-/** @jsx h */
-import { h } from "preact";
 import { useState } from "preact/hooks";
 import { IS_BROWSER } from "$fresh/runtime.ts";
 
diff --git a/tests/fixture/main.ts b/tests/fixture/main.ts
index a025f13e684..da8c854a3d1 100644
--- a/tests/fixture/main.ts
+++ b/tests/fixture/main.ts
@@ -1,11 +1,13 @@
 /// <reference no-default-lib="true" />
 /// <reference lib="dom" />
+/// <reference lib="dom.iterable" />
 /// <reference lib="dom.asynciterable" />
 /// <reference lib="deno.ns" />
-/// <reference lib="deno.unstable" />
 
 import { start } from "$fresh/server.ts";
 import routes from "./fresh.gen.ts";
 import options from "./options.ts";
 
-await start(routes, options);
+const experimentalDenoServe = Deno.args.includes("--experimental-deno-serve");
+
+await start(routes, { ...options, experimentalDenoServe });
diff --git a/tests/fixture/routes/[name].tsx b/tests/fixture/routes/[name].tsx
index 782d233a1d6..c510be8d631 100644
--- a/tests/fixture/routes/[name].tsx
+++ b/tests/fixture/routes/[name].tsx
@@ -1,6 +1,3 @@
-/** @jsx h */
-import { h } from "preact";
-
 interface Props {
   params: Record<string, string | string[]>;
 }
diff --git a/tests/fixture/routes/_404.tsx b/tests/fixture/routes/_404.tsx
index b5a57361b27..ca00eb9686b 100644
--- a/tests/fixture/routes/_404.tsx
+++ b/tests/fixture/routes/_404.tsx
@@ -1,5 +1,3 @@
-/** @jsx h */
-import { h } from "preact";
 import { UnknownPageProps } from "$fresh/server.ts";
 
 export default function NotFoundPage({ url }: UnknownPageProps) {
diff --git a/tests/fixture/routes/_500.tsx b/tests/fixture/routes/_500.tsx
index a4fbc35dfc2..0f5e6c37f64 100644
--- a/tests/fixture/routes/_500.tsx
+++ b/tests/fixture/routes/_500.tsx
@@ -1,5 +1,3 @@
-/** @jsx h */
-import { h } from "preact";
 import { ErrorPageProps } from "$fresh/server.ts";
 
 export default function Error500Page({ error }: ErrorPageProps) {
diff --git a/tests/fixture/routes/_app.tsx b/tests/fixture/routes/_app.tsx
index 6216d837ed4..447bae445ae 100644
--- a/tests/fixture/routes/_app.tsx
+++ b/tests/fixture/routes/_app.tsx
@@ -1,6 +1,3 @@
-/** @jsx h */
-/** @jsxFrag Fragment */
-import { Fragment, h } from "preact";
 import { Head } from "$fresh/runtime.ts";
 import { AppProps } from "$fresh/server.ts";
 
diff --git a/tests/fixture/routes/_middleware.ts b/tests/fixture/routes/_middleware.ts
index 2ccb360aff9..526a865c202 100644
--- a/tests/fixture/routes/_middleware.ts
+++ b/tests/fixture/routes/_middleware.ts
@@ -1,8 +1,57 @@
-import { MiddlewareHandlerContext } from "$fresh/server.ts";
+import { MiddlewareHandler, MiddlewareHandlerContext } from "$fresh/server.ts";
 
-export async function handler(_req: Request, ctx: MiddlewareHandlerContext) {
+// cors middleware
+async function corsHandler(
+  _req: Request,
+  ctx: MiddlewareHandlerContext,
+) {
+  if (_req.method == "OPTIONS") {
+    return new Response(null, {
+      status: 204,
+    });
+  }
+  const origin = _req.headers.get("Origin") || "*";
+  const resp = await ctx.next();
+  const headers = resp.headers;
+
+  headers.set("Access-Control-Allow-Origin", origin);
+  headers.set("Access-Control-Allow-Credentials", "true");
+  headers.set(
+    "Access-Control-Allow-Headers",
+    "Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization, accept, origin, Cache-Control, X-Requested-With",
+  );
+  headers.set(
+    "Access-Control-Allow-Methods",
+    "POST, OPTIONS, GET, PUT, DELETE",
+  );
+
+  return resp;
+}
+
+// log middleware
+async function logHandler(
+  _req: Request,
+  ctx: MiddlewareHandlerContext,
+) {
+  const since = new Date();
+  const resp = await ctx.next();
+  const latency = (+new Date()) - (+since);
+  resp.headers.set("latency", `${latency}`);
+  return resp;
+}
+
+async function rootHandler(
+  _req: Request,
+  ctx: MiddlewareHandlerContext,
+) {
   ctx.state.root = "root_mw";
   const resp = await ctx.next();
   resp.headers.set("server", "fresh test server");
   return resp;
 }
+
+export const handler: MiddlewareHandler | MiddlewareHandler[] = [
+  rootHandler,
+  logHandler,
+  corsHandler,
+];
diff --git a/tests/fixture/routes/assetsCaching/index.tsx b/tests/fixture/routes/assetsCaching/index.tsx
index 27c546f1463..a16fdc7bdeb 100644
--- a/tests/fixture/routes/assetsCaching/index.tsx
+++ b/tests/fixture/routes/assetsCaching/index.tsx
@@ -1,5 +1,3 @@
-/** @jsx h */
-import { h } from "preact";
 import Test from "../../islands/Test.tsx";
 
 export default function Home() {
diff --git a/tests/fixture/routes/books/[id].tsx b/tests/fixture/routes/books/[id].tsx
index a3c49abec26..554885569cf 100644
--- a/tests/fixture/routes/books/[id].tsx
+++ b/tests/fixture/routes/books/[id].tsx
@@ -1,5 +1,3 @@
-/** @jsx h */
-import { h } from "preact";
 import { PageProps, RouteConfig } from "$fresh/server.ts";
 
 export default function Page(props: PageProps) {
diff --git a/tests/fixture/routes/index.tsx b/tests/fixture/routes/index.tsx
index 66e76903d93..e182400072f 100644
--- a/tests/fixture/routes/index.tsx
+++ b/tests/fixture/routes/index.tsx
@@ -1,5 +1,3 @@
-/** @jsx h */
-import { h } from "preact";
 import { IS_BROWSER } from "$fresh/runtime.ts";
 import Test from "../islands/Test.tsx";
 
diff --git a/tests/fixture/routes/intercept.tsx b/tests/fixture/routes/intercept.tsx
index 06bcea5c0e9..aa6b2ba8cb3 100644
--- a/tests/fixture/routes/intercept.tsx
+++ b/tests/fixture/routes/intercept.tsx
@@ -1,5 +1,3 @@
-/** @jsx h */
-import { h } from "preact";
 import { HandlerContext } from "$fresh/server.ts";
 
 export default function Page() {
diff --git a/tests/fixture/routes/intercept_args.tsx b/tests/fixture/routes/intercept_args.tsx
index 8dca3b1788d..64c2781f5b1 100644
--- a/tests/fixture/routes/intercept_args.tsx
+++ b/tests/fixture/routes/intercept_args.tsx
@@ -1,5 +1,3 @@
-/** @jsx h */
-import { h } from "preact";
 import { Handlers, PageProps } from "$fresh/server.ts";
 
 interface Data extends Record<string, unknown> {
diff --git a/tests/fixture/routes/islands/index.tsx b/tests/fixture/routes/islands/index.tsx
index 527cb9c987c..55b78293ac7 100644
--- a/tests/fixture/routes/islands/index.tsx
+++ b/tests/fixture/routes/islands/index.tsx
@@ -1,5 +1,3 @@
-/** @jsx h */
-import { h } from "preact";
 import Counter from "../../islands/Counter.tsx";
 import KebabCaseFileNameTest from "../../islands/kebab-case-counter-test.tsx";
 import Test from "../../islands/Test.tsx";
diff --git a/tests/fixture/routes/not_found.ts b/tests/fixture/routes/not_found.ts
new file mode 100644
index 00000000000..1732de1eb57
--- /dev/null
+++ b/tests/fixture/routes/not_found.ts
@@ -0,0 +1,7 @@
+import { Handlers } from "../../../server.ts";
+
+export const handler: Handlers = {
+  GET(_req, ctx) {
+    return ctx.renderNotFound();
+  },
+};
diff --git a/tests/fixture/routes/params.tsx b/tests/fixture/routes/params.tsx
index dd38cf841a6..d86ecac630a 100644
--- a/tests/fixture/routes/params.tsx
+++ b/tests/fixture/routes/params.tsx
@@ -1,4 +1,3 @@
-/** @jsx h */
 import { HandlerContext, RouteConfig } from "$fresh/server.ts";
 
 export const handler = {
diff --git a/tests/fixture/routes/props/[id].tsx b/tests/fixture/routes/props/[id].tsx
index 8a467261804..41786ea251e 100644
--- a/tests/fixture/routes/props/[id].tsx
+++ b/tests/fixture/routes/props/[id].tsx
@@ -1,5 +1,3 @@
-/** @jsx h */
-import { h } from "preact";
 import { PageProps } from "$fresh/server.ts";
 
 export default function Home(props: PageProps) {
diff --git a/tests/fixture/routes/static.tsx b/tests/fixture/routes/static.tsx
index acb3af24b3d..0d5efca5c1a 100644
--- a/tests/fixture/routes/static.tsx
+++ b/tests/fixture/routes/static.tsx
@@ -1,5 +1,3 @@
-/** @jsx h */
-import { h } from "preact";
 import { asset } from "$fresh/runtime.ts";
 
 export default function StaticPage() {
diff --git a/tests/fixture/routes/wildcard.tsx b/tests/fixture/routes/wildcard.tsx
index b0f750c85a5..d2690ae0ff8 100644
--- a/tests/fixture/routes/wildcard.tsx
+++ b/tests/fixture/routes/wildcard.tsx
@@ -1,5 +1,3 @@
-/** @jsx h */
-import { h } from "preact";
 import { PageProps, RouteConfig } from "$fresh/server.ts";
 
 export default function WildcardPage({ params }: PageProps) {
diff --git a/tests/fixture_error/deno.json b/tests/fixture_error/deno.json
new file mode 100644
index 00000000000..e99326100e2
--- /dev/null
+++ b/tests/fixture_error/deno.json
@@ -0,0 +1,7 @@
+{
+  "importMap": "./import_map.json",
+  "compilerOptions": {
+    "jsx": "react-jsx",
+    "jsxImportSource": "preact"
+  }
+}
diff --git a/tests/fixture_error/fresh.gen.ts b/tests/fixture_error/fresh.gen.ts
index aebab04685f..39130ea3df2 100644
--- a/tests/fixture_error/fresh.gen.ts
+++ b/tests/fixture_error/fresh.gen.ts
@@ -2,16 +2,18 @@
 // This file SHOULD be checked into source version control.
 // This file is automatically updated during development when running `dev.ts`.
 
-import * as $0 from "./routes/index.tsx";
-import * as $1 from "./routes/[...all].ts";
+import config from "./deno.json" assert { type: "json" };
+import * as $0 from "./routes/[...all].ts";
+import * as $1 from "./routes/index.tsx";
 
 const manifest = {
   routes: {
-    "./routes/index.tsx": $0,
-    "./routes/[...all].ts": $1,
+    "./routes/[...all].ts": $0,
+    "./routes/index.tsx": $1,
   },
   islands: {},
   baseUrl: import.meta.url,
+  config,
 };
 
 export default manifest;
diff --git a/tests/fixture_error/import_map.json b/tests/fixture_error/import_map.json
index e59539e4ddd..8bdfff3d5ec 100644
--- a/tests/fixture_error/import_map.json
+++ b/tests/fixture_error/import_map.json
@@ -1,8 +1,8 @@
 {
   "imports": {
     "$fresh/": "../../",
-    "preact": "https://esm.sh/preact@10.10.0",
-    "preact/": "https://esm.sh/preact@10.10.0/",
-    "preact-render-to-string": "https://esm.sh/preact-render-to-string@5.2.1?external=preact"
+    "preact": "https://esm.sh/preact@10.10.6",
+    "preact/": "https://esm.sh/preact@10.10.6/",
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@5.2.3"
   }
 }
diff --git a/tests/fixture_error/main.ts b/tests/fixture_error/main.ts
index 0f15e8defa4..dedce9cbb04 100644
--- a/tests/fixture_error/main.ts
+++ b/tests/fixture_error/main.ts
@@ -1,8 +1,8 @@
 /// <reference no-default-lib="true" />
 /// <reference lib="dom" />
+/// <reference lib="dom.iterable" />
 /// <reference lib="dom.asynciterable" />
 /// <reference lib="deno.ns" />
-/// <reference lib="deno.unstable" />
 
 import { start } from "$fresh/server.ts";
 import manifest from "./fresh.gen.ts";
diff --git a/tests/fixture_jsx_pragma/deno.json b/tests/fixture_jsx_pragma/deno.json
new file mode 100644
index 00000000000..2d47694593e
--- /dev/null
+++ b/tests/fixture_jsx_pragma/deno.json
@@ -0,0 +1,3 @@
+{
+  "importMap": "./import-map.json"
+}
diff --git a/tests/fixture_jsx_pragma/dev.ts b/tests/fixture_jsx_pragma/dev.ts
new file mode 100755
index 00000000000..2d85d6c183c
--- /dev/null
+++ b/tests/fixture_jsx_pragma/dev.ts
@@ -0,0 +1,5 @@
+#!/usr/bin/env -S deno run -A --watch=static/,routes/
+
+import dev from "$fresh/dev.ts";
+
+await dev(import.meta.url, "./main.ts");
diff --git a/tests/fixture_jsx_pragma/fresh.gen.ts b/tests/fixture_jsx_pragma/fresh.gen.ts
new file mode 100644
index 00000000000..9ad340821d5
--- /dev/null
+++ b/tests/fixture_jsx_pragma/fresh.gen.ts
@@ -0,0 +1,20 @@
+// DO NOT EDIT. This file is generated by fresh.
+// This file SHOULD be checked into source version control.
+// This file is automatically updated during development when running `dev.ts`.
+
+import config from "./deno.json" assert { type: "json" };
+import * as $0 from "./routes/index.tsx";
+import * as $$0 from "./islands/Island.tsx";
+
+const manifest = {
+  routes: {
+    "./routes/index.tsx": $0,
+  },
+  islands: {
+    "./islands/Island.tsx": $$0,
+  },
+  baseUrl: import.meta.url,
+  config,
+};
+
+export default manifest;
diff --git a/tests/fixture_jsx_pragma/import-map.json b/tests/fixture_jsx_pragma/import-map.json
new file mode 100644
index 00000000000..e59539e4ddd
--- /dev/null
+++ b/tests/fixture_jsx_pragma/import-map.json
@@ -0,0 +1,8 @@
+{
+  "imports": {
+    "$fresh/": "../../",
+    "preact": "https://esm.sh/preact@10.10.0",
+    "preact/": "https://esm.sh/preact@10.10.0/",
+    "preact-render-to-string": "https://esm.sh/preact-render-to-string@5.2.1?external=preact"
+  }
+}
diff --git a/tests/fixture_jsx_pragma/islands/Island.tsx b/tests/fixture_jsx_pragma/islands/Island.tsx
new file mode 100644
index 00000000000..e9efb6da932
--- /dev/null
+++ b/tests/fixture_jsx_pragma/islands/Island.tsx
@@ -0,0 +1,12 @@
+/** @jsx h */
+import { h } from "preact";
+import { IS_BROWSER } from "../../../src/runtime/utils.ts";
+
+export default function Island() {
+  const id = IS_BROWSER ? "csr" : "ssr";
+  return (
+    <div>
+      <p id={id}>{id}</p>
+    </div>
+  );
+}
diff --git a/tests/fixture_jsx_pragma/main.ts b/tests/fixture_jsx_pragma/main.ts
new file mode 100644
index 00000000000..84a9d01dfa2
--- /dev/null
+++ b/tests/fixture_jsx_pragma/main.ts
@@ -0,0 +1,8 @@
+/// <reference no-default-lib="true" />
+/// <reference lib="dom" />
+/// <reference lib="dom.asynciterable" />
+/// <reference lib="deno.ns" />
+
+import { start } from "$fresh/server.ts";
+import manifest from "./fresh.gen.ts";
+await start(manifest);
diff --git a/tests/fixture_jsx_pragma/routes/index.tsx b/tests/fixture_jsx_pragma/routes/index.tsx
new file mode 100644
index 00000000000..6f214c59b6e
--- /dev/null
+++ b/tests/fixture_jsx_pragma/routes/index.tsx
@@ -0,0 +1,12 @@
+/** @jsx h */
+import { h } from "preact";
+import Island from "../islands/Island.tsx";
+
+export default function Home() {
+  return (
+    <div>
+      <h1>Hello World</h1>
+      <Island />
+    </div>
+  );
+}
diff --git a/tests/fixture_plugin/deno.json b/tests/fixture_plugin/deno.json
new file mode 100644
index 00000000000..e99326100e2
--- /dev/null
+++ b/tests/fixture_plugin/deno.json
@@ -0,0 +1,7 @@
+{
+  "importMap": "./import_map.json",
+  "compilerOptions": {
+    "jsx": "react-jsx",
+    "jsxImportSource": "preact"
+  }
+}
diff --git a/tests/fixture_plugin/dev.ts b/tests/fixture_plugin/dev.ts
new file mode 100755
index 00000000000..2d85d6c183c
--- /dev/null
+++ b/tests/fixture_plugin/dev.ts
@@ -0,0 +1,5 @@
+#!/usr/bin/env -S deno run -A --watch=static/,routes/
+
+import dev from "$fresh/dev.ts";
+
+await dev(import.meta.url, "./main.ts");
diff --git a/tests/fixture_plugin/fresh.gen.ts b/tests/fixture_plugin/fresh.gen.ts
new file mode 100644
index 00000000000..464e32d6f88
--- /dev/null
+++ b/tests/fixture_plugin/fresh.gen.ts
@@ -0,0 +1,22 @@
+// DO NOT EDIT. This file is generated by fresh.
+// This file SHOULD be checked into source version control.
+// This file is automatically updated during development when running `dev.ts`.
+
+import config from "./deno.json" assert { type: "json" };
+import * as $0 from "./routes/static.tsx";
+import * as $1 from "./routes/with-island.tsx";
+import * as $$0 from "./islands/Island.tsx";
+
+const manifest = {
+  routes: {
+    "./routes/static.tsx": $0,
+    "./routes/with-island.tsx": $1,
+  },
+  islands: {
+    "./islands/Island.tsx": $$0,
+  },
+  baseUrl: import.meta.url,
+  config,
+};
+
+export default manifest;
diff --git a/tests/fixture_plugin/import_map.json b/tests/fixture_plugin/import_map.json
new file mode 100644
index 00000000000..8bdfff3d5ec
--- /dev/null
+++ b/tests/fixture_plugin/import_map.json
@@ -0,0 +1,8 @@
+{
+  "imports": {
+    "$fresh/": "../../",
+    "preact": "https://esm.sh/preact@10.10.6",
+    "preact/": "https://esm.sh/preact@10.10.6/",
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@5.2.3"
+  }
+}
diff --git a/tests/fixture_plugin/islands/Island.tsx b/tests/fixture_plugin/islands/Island.tsx
new file mode 100644
index 00000000000..73bcdcf3e9d
--- /dev/null
+++ b/tests/fixture_plugin/islands/Island.tsx
@@ -0,0 +1,10 @@
+import { IS_BROWSER } from "../../../src/runtime/utils.ts";
+
+export default function Island() {
+  const id = IS_BROWSER ? "csr" : "ssr";
+  return (
+    <div>
+      <p id={id}>{id}</p>
+    </div>
+  );
+}
diff --git a/tests/fixture_plugin/main.ts b/tests/fixture_plugin/main.ts
new file mode 100644
index 00000000000..1d83e08bff6
--- /dev/null
+++ b/tests/fixture_plugin/main.ts
@@ -0,0 +1,10 @@
+/// <reference no-default-lib="true" />
+/// <reference lib="dom" />
+/// <reference lib="dom.iterable" />
+/// <reference lib="dom.asynciterable" />
+/// <reference lib="deno.ns" />
+
+import { start } from "$fresh/server.ts";
+import manifest from "./fresh.gen.ts";
+import options from "./options.ts";
+await start(manifest, options);
diff --git a/tests/fixture_plugin/options.ts b/tests/fixture_plugin/options.ts
new file mode 100644
index 00000000000..a31c710bc27
--- /dev/null
+++ b/tests/fixture_plugin/options.ts
@@ -0,0 +1,5 @@
+import { FreshOptions } from "$fresh/server.ts";
+import cssInjectPlugin from "./utils/css-inject-plugin.ts";
+import jsInjectPlugin from "./utils/js-inject-plugin.ts";
+
+export default { plugins: [cssInjectPlugin, jsInjectPlugin] } as FreshOptions;
diff --git a/tests/fixture_plugin/routes/static.tsx b/tests/fixture_plugin/routes/static.tsx
new file mode 100644
index 00000000000..1fc383ff7f3
--- /dev/null
+++ b/tests/fixture_plugin/routes/static.tsx
@@ -0,0 +1,10 @@
+import { inject } from "../utils/css-inject-plugin.ts";
+
+export default function Home() {
+  inject("body { color: red; }");
+  return (
+    <div>
+      <h1>Hello World</h1>
+    </div>
+  );
+}
diff --git a/tests/fixture_plugin/routes/with-island.tsx b/tests/fixture_plugin/routes/with-island.tsx
new file mode 100644
index 00000000000..e45ecc10889
--- /dev/null
+++ b/tests/fixture_plugin/routes/with-island.tsx
@@ -0,0 +1,12 @@
+import Island from "../islands/Island.tsx";
+import { inject } from "../utils/css-inject-plugin.ts";
+
+export default function Home() {
+  inject("body { color: red; }");
+  return (
+    <div>
+      <h1>Hello World</h1>
+      <Island />
+    </div>
+  );
+}
diff --git a/tests/fixture_plugin/utils/css-inject-plugin.ts b/tests/fixture_plugin/utils/css-inject-plugin.ts
new file mode 100644
index 00000000000..6899d2b8784
--- /dev/null
+++ b/tests/fixture_plugin/utils/css-inject-plugin.ts
@@ -0,0 +1,18 @@
+import { Plugin } from "$fresh/server.ts";
+
+let CSS_TO_INJECT = "";
+export function inject(cssText: string) {
+  CSS_TO_INJECT = cssText;
+}
+
+export default {
+  name: "css-inject",
+  render(ctx) {
+    CSS_TO_INJECT = "";
+    const res = ctx.render();
+    if (res.requiresHydration) {
+      CSS_TO_INJECT += " h1 { color: blue; }";
+    }
+    return { styles: [{ cssText: CSS_TO_INJECT, id: "abc" }] };
+  },
+} as Plugin;
diff --git a/tests/fixture_plugin/utils/js-inject-main.ts b/tests/fixture_plugin/utils/js-inject-main.ts
new file mode 100644
index 00000000000..81423edee23
--- /dev/null
+++ b/tests/fixture_plugin/utils/js-inject-main.ts
@@ -0,0 +1,3 @@
+export default function (state: string) {
+  document.title = state;
+}
diff --git a/tests/fixture_plugin/utils/js-inject-plugin.ts b/tests/fixture_plugin/utils/js-inject-plugin.ts
new file mode 100644
index 00000000000..9e9265c1fb3
--- /dev/null
+++ b/tests/fixture_plugin/utils/js-inject-plugin.ts
@@ -0,0 +1,15 @@
+import { Plugin } from "$fresh/server.ts";
+
+export default {
+  name: "js-inject",
+  entrypoints: {
+    "main": new URL("./js-inject-main.ts", import.meta.url).href,
+  },
+  render(ctx) {
+    const res = ctx.render();
+    if (res.requiresHydration) {
+      return { scripts: [{ entrypoint: "main", state: "JS injected!" }] };
+    }
+    return {};
+  },
+} as Plugin;
diff --git a/tests/main_test.ts b/tests/main_test.ts
index 3b77146c4ab..4603927e6d6 100644
--- a/tests/main_test.ts
+++ b/tests/main_test.ts
@@ -1,11 +1,19 @@
 import { ServerContext, Status } from "../server.ts";
-import { assert, assertEquals, assertStringIncludes } from "./deps.ts";
+import {
+  assert,
+  assertEquals,
+  assertStringIncludes,
+  delay,
+  puppeteer,
+  TextLineStream,
+} from "./deps.ts";
 import manifest from "./fixture/fresh.gen.ts";
 import options from "./fixture/options.ts";
 
 const ctx = await ServerContext.fromManifest(manifest, options);
+const handler = ctx.handler();
 const router = (req: Request) => {
-  return ctx.handler()(req, {
+  return handler(req, {
     localAddr: {
       transport: "tcp",
       hostname: "127.0.0.1",
@@ -30,7 +38,7 @@ Deno.test("/ page prerender", async () => {
   assertStringIncludes(body, "test.js");
   assertStringIncludes(body, "<p>Hello!</p>");
   assertStringIncludes(body, "<p>Viewing JIT render.</p>");
-  assertStringIncludes(body, `>[{"message":"Hello!"}]</script>`);
+  assertStringIncludes(body, `>[[{"message":"Hello!"}],[]]</script>`);
   assertStringIncludes(
     body,
     `<meta name="description" content="Hello world!" />`,
@@ -183,6 +191,34 @@ Deno.test("/foo/:path*", async () => {
   assert(body.includes("bar/baz"));
 });
 
+Deno.test("static files in custom directory", async () => {
+  const newCtx = await ServerContext.fromManifest(manifest, {
+    ...options,
+    staticDir: "./custom_static",
+  });
+  const newRouter = (req: Request) => {
+    return newCtx.handler()(req, {
+      localAddr: {
+        transport: "tcp",
+        hostname: "127.0.0.1",
+        port: 80,
+      },
+      remoteAddr: {
+        transport: "tcp",
+        hostname: "127.0.0.1",
+        port: 80,
+      },
+    });
+  };
+
+  const resp = await newRouter(
+    new Request("https://fresh.deno.dev/custom.txt"),
+  );
+  assertEquals(resp.status, Status.OK);
+  const body = await resp.text();
+  assert(body.startsWith("dir"));
+});
+
 Deno.test("static file - by file path", async () => {
   const resp = await router(new Request("https://fresh.deno.dev/foo.txt"));
   assertEquals(resp.status, Status.OK);
@@ -312,6 +348,37 @@ Deno.test({
   },
 });
 
+Deno.test({
+  name: "/middleware - mixedHandler(cors)",
+  fn: async () => {
+    const resp = await router(
+      new Request("https://fresh.deno.dev/middleware_root", {
+        method: "OPTIONS",
+      }),
+    );
+    assert(resp);
+
+    // test cors handler
+    assertEquals(resp.status, Status.NoContent);
+  },
+});
+
+Deno.test({
+  name: "/middleware - mixedHandler(log)",
+  fn: async () => {
+    const resp = await router(
+      new Request("https://fresh.deno.dev/middleware_root"),
+    );
+    assert(resp);
+    assertEquals(resp.status, Status.OK);
+
+    // test log handler
+    const latency = resp.headers.get("latency");
+    assert(latency);
+    assert(+latency >= 0, `latency=${latency}ms `);
+  },
+});
+
 Deno.test({
   name: "/middleware - layer 2 middleware",
   fn: async () => {
@@ -392,3 +459,140 @@ Deno.test({
     assertEquals(resp.headers.get("server"), "fresh test server");
   },
 });
+
+Deno.test({
+  name: "/not_found",
+  fn: async () => {
+    const resp = await router(new Request("https://fresh.deno.dev/not_found"));
+    assert(resp);
+    assertEquals(resp.status, 404);
+    const body = await resp.text();
+    assertStringIncludes(body, "404 not found: /not_found");
+  },
+});
+
+Deno.test("experimental Deno.serve", {
+  sanitizeOps: false,
+  sanitizeResources: false,
+  ignore: Deno.build.os === "windows", // TODO: Deno.serve hang on Windows?
+}, async (t) => {
+  // Preparation
+  const serverProcess = Deno.run({
+    cmd: [
+      "deno",
+      "run",
+      "-A",
+      "--unstable",
+      "./tests/fixture/main.ts",
+      "--experimental-deno-serve",
+    ],
+    stdout: "piped",
+    stderr: "inherit",
+  });
+
+  const decoder = new TextDecoderStream();
+  const lines = serverProcess.stdout.readable
+    .pipeThrough(decoder)
+    .pipeThrough(new TextLineStream());
+
+  let started = false;
+  for await (const line of lines) {
+    if (line.includes("Listening on http://")) {
+      started = true;
+      break;
+    }
+  }
+  if (!started) {
+    throw new Error("Server didn't start up");
+  }
+
+  await delay(100);
+
+  await t.step("ssr", async () => {
+    const resp = await fetch("http://localhost:8000");
+    assert(resp);
+    assertEquals(resp.status, Status.OK);
+    assertEquals(resp.headers.get("content-type"), "text/html; charset=utf-8");
+    assertEquals(resp.headers.get("server"), "fresh test server");
+    const body = await resp.text();
+    assertStringIncludes(body, `<html lang="en">`);
+    assertStringIncludes(body, "test.js");
+    assertStringIncludes(body, "<p>Hello!</p>");
+    assertStringIncludes(body, "<p>Viewing JIT render.</p>");
+    assertStringIncludes(body, `>[[{"message":"Hello!"}],[]]</script>`);
+    assertStringIncludes(
+      body,
+      `<meta name="description" content="Hello world!" />`,
+    );
+  });
+
+  await t.step("static file", async () => {
+    const resp = await fetch("http://localhost:8000/foo.txt");
+    assertEquals(resp.status, Status.OK);
+    const body = await resp.text();
+    assert(body.startsWith("bar"));
+    const etag = resp.headers.get("etag");
+    assert(etag);
+    assert(!etag.startsWith("W/"), "etag should be weak");
+    assertEquals(resp.headers.get("content-type"), "text/plain");
+  });
+
+  await lines.cancel();
+  serverProcess.kill("SIGTERM");
+  serverProcess.close();
+});
+
+Deno.test("jsx pragma works", {
+  sanitizeOps: false,
+  sanitizeResources: false,
+}, async (t) => {
+  // Preparation
+  const serverProcess = Deno.run({
+    cmd: ["deno", "run", "-A", "./tests/fixture_jsx_pragma/main.ts"],
+    stdout: "piped",
+    stderr: "inherit",
+  });
+
+  const decoder = new TextDecoderStream();
+  const lines = serverProcess.stdout.readable
+    .pipeThrough(decoder)
+    .pipeThrough(new TextLineStream());
+
+  let started = false;
+  for await (const line of lines) {
+    if (line.includes("Listening on http://")) {
+      started = true;
+      break;
+    }
+  }
+  if (!started) {
+    throw new Error("Server didn't start up");
+  }
+
+  await delay(100);
+
+  await t.step("ssr", async () => {
+    const resp = await fetch("http://localhost:8000");
+    assertEquals(resp.status, Status.OK);
+    const text = await resp.text();
+    assertStringIncludes(text, "Hello World");
+    assertStringIncludes(text, "ssr");
+  });
+
+  const browser = await puppeteer.launch({ args: ["--no-sandbox"] });
+  const page = await browser.newPage();
+
+  await page.goto("http://localhost:8000", {
+    waitUntil: "networkidle2",
+  });
+
+  await t.step("island is revived", async () => {
+    await page.waitForSelector("#csr");
+  });
+
+  await browser.close();
+
+  await lines.cancel();
+  serverProcess.kill("SIGTERM");
+  serverProcess.close();
+});
diff --git a/tests/plugin_test.ts b/tests/plugin_test.ts
new file mode 100644
index 00000000000..e7920e46061
--- /dev/null
+++ b/tests/plugin_test.ts
@@ -0,0 +1,105 @@
+import { ServerContext, Status } from "../server.ts";
+import {
+  assert,
+  assertEquals,
+  assertStringIncludes,
+  delay,
+  puppeteer,
+  TextLineStream,
+} from "./deps.ts";
+import manifest from "./fixture_plugin/fresh.gen.ts";
+import options from "./fixture_plugin/options.ts";
+
+const ctx = await ServerContext.fromManifest(manifest, options);
+const handler = ctx.handler();
+const router = (req: Request) => {
+  return handler(req, {
+    localAddr: {
+      transport: "tcp",
+      hostname: "127.0.0.1",
+      port: 80,
+    },
+    remoteAddr: {
+      transport: "tcp",
+      hostname: "127.0.0.1",
+      port: 80,
+    },
+  });
+};
+
+Deno.test("/static page prerender", async () => {
+  const resp = await router(new Request("https://fresh.deno.dev/static"));
+  assert(resp);
+  assertEquals(resp.status, Status.OK);
+  const body = await resp.text();
+  assertStringIncludes(body, '<style id="abc">body { color: red; }</style>');
+  assert(!body.includes(`>[[],[]]</script>`));
+  assert(!body.includes(`import`));
+});
+
+Deno.test("/with-island prerender", async () => {
+  const resp = await router(new Request("https://fresh.deno.dev/with-island"));
+  assert(resp);
+  assertEquals(resp.status, Status.OK);
+  const body = await resp.text();
+  assertStringIncludes(
+    body,
+    '<style id="abc">body { color: red; } h1 { color: blue; }</style>',
+  );
+  assertStringIncludes(body, `>[[{}],["JS injected!"]]</script>`);
+  assertStringIncludes(body, `/plugin-js-inject-main.js"`);
+});
+
+Deno.test({
+  name: "/with-island hydration",
+  async fn(t) {
+    // Preparation
+    const serverProcess = Deno.run({
+      cmd: ["deno", "run", "-A", "./tests/fixture_plugin/main.ts"],
+      stdout: "piped",
+      stderr: "inherit",
+    });
+
+    const decoder = new TextDecoderStream();
+    const lines = serverProcess.stdout.readable
+      .pipeThrough(decoder)
+      .pipeThrough(new TextLineStream());
+
+    let started = false;
+    for await (const line of lines) {
+      if (line.includes("Listening on http://")) {
+        started = true;
+        break;
+      }
+    }
+    if (!started) {
+      throw new Error("Server didn't start up");
+    }
+
+    await delay(100);
+
+    const browser = await puppeteer.launch({ args: ["--no-sandbox"] });
+    const page = await browser.newPage();
+
+    await page.goto("http://localhost:8000/with-island", {
+      waitUntil: "networkidle2",
+    });
+
+    await t.step("island is revived", async () => {
+      await page.waitForSelector("#csr");
+    });
+
+    await t.step("title was updated", async () => {
+      const title = await page.title();
+      assertEquals(title, "JS injected!");
+    });
+
+    await browser.close();
+
+    await lines.cancel();
+    serverProcess.kill("SIGTERM");
+    serverProcess.close();
+  },
+  sanitizeOps: false,
+  sanitizeResources: false,
+});
diff --git a/update.ts b/update.ts
new file mode 100644
index 00000000000..52df9800f64
--- /dev/null
+++ b/update.ts
@@ -0,0 +1,180 @@
+import { join, Node, parse, Project, resolve } from "./src/dev/deps.ts";
+import { error } from "./src/dev/error.ts";
+import { freshImports, twindImports } from "./src/dev/imports.ts";
+import { collect, ensureMinDenoVersion, generate } from "./src/dev/mod.ts";
+
+ensureMinDenoVersion();
+
+const help = `fresh-update
+
+Update a Fresh project. This updates dependencies and optionally performs code
+mods to update a project's source code to the latest recommended patterns.
+
+To upgrade a projecct in the current directory, run:
+  fresh-update .
+
+USAGE:
+    fresh-update <DIRECTORY>
+`;
+
+const flags = parse(Deno.args, {});
+
+if (flags._.length !== 1) {
+  error(help);
+}
+
+const unresolvedDirectory = Deno.args[0];
+const resolvedDirectory = resolve(unresolvedDirectory);
+
+// Update dependencies in the import map.
+const IMPORT_MAP_PATH = join(resolvedDirectory, "import_map.json");
+let importMapText = await Deno.readTextFile(IMPORT_MAP_PATH);
+const importMap = JSON.parse(importMapText);
+freshImports(importMap.imports);
+if (importMap.imports["twind"]) {
+  twindImports(importMap.imports);
+}
+importMapText = JSON.stringify(importMap, null, 2);
+await Deno.writeTextFile(IMPORT_MAP_PATH, importMapText);
+
+// Code mod for classic JSX -> automatic JSX.
+const JSX_CODEMOD =
+  `This project is using the classic JSX transform. Would you like to update to the
+automatic JSX transform? This will remove the /** @jsx h */ pragma from your
+source code and add the jsx: "react-jsx" compiler option to your deno.json file.`;
+const DENO_JSON_PATH = join(resolvedDirectory, "deno.json");
+let denoJsonText = await Deno.readTextFile(DENO_JSON_PATH);
+const denoJson = JSON.parse(denoJsonText);
+if (denoJson.compilerOptions?.jsx !== "react-jsx" && confirm(JSX_CODEMOD)) {
+  console.log("Updating config file...");
+  denoJson.compilerOptions = denoJson.compilerOptions || {};
+  denoJson.compilerOptions.jsx = "react-jsx";
+  denoJson.compilerOptions.jsxImportSource = "preact";
+  denoJsonText = JSON.stringify(denoJson, null, 2);
+  await Deno.writeTextFile(DENO_JSON_PATH, denoJsonText);
+
+  const project = new Project();
+  const sfs = project.addSourceFilesAtPaths(
+    join(resolvedDirectory, "**", "*.{js,jsx,ts,tsx}"),
+  );
+
+  for (const sf of sfs) {
+    for (const d of sf.getImportDeclarations()) {
+      if (d.getModuleSpecifierValue() !== "preact") continue;
+      for (const n of d.getNamedImports()) {
+        const name = n.getName();
+        if (name === "h" || name === "Fragment") n.remove();
+      }
+      if (
+        d.getNamedImports().length === 0 &&
+        d.getNamespaceImport() === undefined &&
+        d.getDefaultImport() === undefined
+      ) {
+        d.remove();
+      }
+    }
+
+    let text = sf.getFullText();
+    text = text.replaceAll("/** @jsx h */\n", "");
+    text = text.replaceAll("/** @jsxFrag Fragment */\n", "");
+    sf.replaceWithText(text);
+
+    await sf.save();
+  }
+}
+
+// Code mod for class={tw`border`} to class="border".
+const TWIND_CODEMOD =
+  `This project is using an old version of the twind integration. Would you like to
+update to the new twind plugin? This will remove the 'class={tw\`border\`}'
+boilerplate from your source code replace it with the simpler 'class="border"'.`;
+if (importMap.imports["@twind"] && confirm(TWIND_CODEMOD)) {
+  await Deno.remove(join(resolvedDirectory, importMap.imports["@twind"]));
+
+  delete importMap.imports["@twind"];
+  importMapText = JSON.stringify(importMap, null, 2);
+  await Deno.writeTextFile(IMPORT_MAP_PATH, importMapText);
+
+  const MAIN_TS = `/// <reference no-default-lib="true" />
+/// <reference lib="dom" />
+/// <reference lib="dom.iterable" />
+/// <reference lib="dom.asynciterable" />
+/// <reference lib="deno.ns" />
+
+import { start } from "$fresh/server.ts";
+import manifest from "./fresh.gen.ts";
+
+import twindPlugin from "$fresh/plugins/twind.ts";
+import twindConfig from "./twind.config.ts";
+
+await start(manifest, { plugins: [twindPlugin(twindConfig)] });\n`;
+  const MAIN_TS_PATH = join(resolvedDirectory, "main.ts");
+  await Deno.writeTextFile(MAIN_TS_PATH, MAIN_TS);
+
+  const TWIND_CONFIG_TS = `import { Options } from "$fresh/plugins/twind.ts";
+
+  export default {
+    selfURL: import.meta.url,
+  } as Options;
+  `;
+  await Deno.writeTextFile(
+    join(resolvedDirectory, "twind.config.ts"),
+    TWIND_CONFIG_TS,
+  );
+
+  const project = new Project();
+  const sfs = project.addSourceFilesAtPaths(
+    join(resolvedDirectory, "**", "*.{js,jsx,ts,tsx}"),
+  );
+
+  for (const sf of sfs) {
+    const nodes = sf.forEachDescendantAsArray();
+    for (const n of nodes) {
+      if (!n.wasForgotten() && Node.isJsxAttribute(n)) {
+        const init = n.getInitializer();
+        const name = n.getName();
+        if (
+          Node.isJsxExpression(init) &&
+          (name === "class" || name === "className")
+        ) {
+          const expr = init.getExpression();
+          if (Node.isTaggedTemplateExpression(expr)) {
+            const tag = expr.getTag();
+            if (Node.isIdentifier(tag) && tag.getText() === "tw") {
+              const template = expr.getTemplate();
+              if (Node.isNoSubstitutionTemplateLiteral(template)) {
+                n.setInitializer(`"${template.getLiteralValue()}"`);
+              }
+            }
+          } else if (expr?.getFullText() === `tw(props.class ?? "")`) {
+            n.setInitializer(`{props.class}`);
+          }
+        }
+      }
+    }
+
+    const text = sf.getFullText();
+    const removeTw = [...text.matchAll(/tw[,\s`(]/g)].length === 1;
+
+    for (const d of sf.getImportDeclarations()) {
+      if (d.getModuleSpecifierValue() !== "@twind") continue;
+      for (const n of d.getNamedImports()) {
+        const name = n.getName();
+        if (name === "tw" && removeTw) n.remove();
+      }
+      d.setModuleSpecifier("twind");
+      if (
+        d.getNamedImports().length === 0 &&
+        d.getNamespaceImport() === undefined &&
+        d.getDefaultImport() === undefined
+      ) {
+        d.remove();
+      }
+    }
+
+    await sf.save();
+  }
+}
+
+const manifest = await collect(resolvedDirectory);
+await generate(resolvedDirectory, manifest);
diff --git a/versions.json b/versions.json
index b238afaf75e..fe652eb222d 100644
--- a/versions.json
+++ b/versions.json
@@ -1,4 +1,5 @@
 [
+  "1.1.0",
   "1.0.2",
   "1.0.1",
   "1.0.0",
diff --git a/www/components/Button.tsx b/www/components/Button.tsx
index d94503d7dde..32414f5e767 100644
--- a/www/components/Button.tsx
+++ b/www/components/Button.tsx
@@ -1,15 +1,13 @@
-/** @jsx h */
-import { h } from "preact";
-import { tw } from "@twind";
+import { JSX } from "preact";
 
-export function RoundedButton(props: h.JSX.HTMLAttributes<HTMLButtonElement>) {
+export function RoundedButton(props: JSX.HTMLAttributes<HTMLButtonElement>) {
   return (
     <button
       style={{
         touchAction: "manipulation",
       }}
       {...props}
-      class={tw`p-3 border border-transparent rounded-full text-white bg-green(500 hover:600) focus:(outline-none ring(2 offset-2 green-500)) disabled:(bg-green-200 cursor-default)`}
+      class="p-3 border border-transparent rounded-full text-white bg-green(500 hover:600) focus:(outline-none ring(2 offset-2 green-500)) disabled:(bg-green-200 cursor-default)}"
     />
   );
 }
diff --git a/www/components/DocsHeader.tsx b/www/components/DocsHeader.tsx
new file mode 100644
index 00000000000..9e5fd45f454
--- /dev/null
+++ b/www/components/DocsHeader.tsx
@@ -0,0 +1,48 @@
+import DocsTitle from "./DocsTitle.tsx";
+
+export default function DocsHeader() {
+  return (
+    <div class="bg-green-300">
+      <header class="mx-auto max-w-screen-lg flex gap-3 justify-between">
+        <div class="p-4 flex">
+          <Logo />
+          <div>
+            <DocsTitle />
+          </div>
+        </div>
+        <label
+          for="docs_sidebar"
+          class="px-4 py-4 md:hidden border(l-2 green-200) flex items-center hover:bg-green-100"
+        >
+          <svg
+            class="h-6 w-6"
+            stroke="currentColor"
+            fill="none"
+            viewBox="0 0 24 24"
+          >
+            <path
+              strokeLinecap="round"
+              strokeLinejoin="round"
+              strokeWidth="2"
+              d="M4 6h16M4 12h16M4 18h7"
+            >
+            </path>
+          </svg>
+        </label>
+      </header>
+    </div>
+  );
+}
+
+function Logo() {
+  return (
+    <a href="/" class="flex mr-3 items-center">
+      <img
+        src="/logo.svg"
+        alt="Fresh logo"
+        width={40}
+        height={40}
+      />
+    </a>
+  );
+}
diff --git a/www/components/DocsSidebar.tsx b/www/components/DocsSidebar.tsx
index 27e4658a7da..659b5e0d0b1 100644
--- a/www/components/DocsSidebar.tsx
+++ b/www/components/DocsSidebar.tsx
@@ -1,7 +1,3 @@
-/** @jsx h */
-import { h } from "preact";
-import { apply, tw } from "@twind";
-
 import {
   CATEGORIES,
   TableOfContentsCategory,
@@ -10,7 +6,7 @@ import {
 
 export default function DocsSidebar(props: { path: string }) {
   return (
-    <ol class={tw`list-decimal list-inside font-semibold` + " nested"}>
+    <ol class="list-decimal list-inside font-semibold nested">
       {CATEGORIES.map((category) => (
         <SidebarCategory path={props.path} category={category} />
       ))}
@@ -18,24 +14,22 @@ export default function DocsSidebar(props: { path: string }) {
   );
 }
 
-const link = apply`text(gray-900 hover:gray-600)`;
-const linkActive = apply`text(green-600 hover:green-500)`;
+const link = "text(gray-900 hover:gray-600)";
+const linkActive = "text(green-600 hover:green-500)";
 
 export function SidebarCategory(props: {
   path: string;
   category: TableOfContentsCategory;
 }) {
-  const outerItem = tw`my-2 block`;
-  const innerList = tw`pl-4 list-decimal` + " nested";
-
   const { title, href, entries } = props.category;
-  const outerLink = tw`${href == props.path ? linkActive : link} font-bold`;
+
+  const outerLink = `${href == props.path ? linkActive : link} font-bold`;
 
   return (
-    <li class={outerItem}>
+    <li class="my-2 block">
       <a href={href} class={outerLink}>{title}</a>
       {entries.length > 0 && (
-        <ol class={innerList}>
+        <ol class="pl-4 list-decimal nested">
           {entries.map((entry) => (
             <SidebarEntry path={props.path} entry={entry} />
           ))}
@@ -49,12 +43,12 @@ export function SidebarEntry(props: {
   path: string;
   entry: TableOfContentsCategoryEntry;
 }) {
-  const innerItem = tw`my-0.5`;
-
   const { title, href } = props.entry;
-  const innerLink = tw`${href == props.path ? linkActive : link} font-normal`;
+
+  const innerLink = `${href == props.path ? linkActive : link} font-normal`;
+
   return (
-    <li class={innerItem}>
+    <li class="my-0.5">
       <a href={href} class={innerLink}>{title}</a>
     </li>
   );
diff --git a/www/components/DocsTitle.tsx b/www/components/DocsTitle.tsx
new file mode 100644
index 00000000000..cc41967320f
--- /dev/null
+++ b/www/components/DocsTitle.tsx
@@ -0,0 +1,26 @@
+export default function DocsTitle() {
+  return (
+    <>
+      <a
+        href="/"
+        class="text(2xl gray-900) tracking-tight font-extrabold flex items-center gap-1"
+      >
+        <svg
+          preserveAspectRatio="xMinYMin"
+          viewBox="0 0 250 75"
+          fill="none"
+          alt="Fresh logo"
+          xmlns="http://www.w3.org/2000/svg"
+          class="h-5 inline-block py-[1px]"
+        >
+          <path
+            d="M14.0805 0.761269V70.0893H0V0.761269H14.0805ZM35.6322 30.2257V41.7803H10.3448V30.2257H35.6322ZM38.5057 0.761269V12.3159H10.3448V0.761269H38.5057ZM46.5517 0.761269H68.9655C73.5632 0.761269 77.5862 1.62785 80.7471 3.36105C83.908 4.80538 86.4943 7.11632 88.2184 10.2939C90.1641 13.8269 91.1548 17.8107 91.092 21.8485C91.092 25.6038 90.5172 28.7813 89.3678 31.3811C88.5057 34.2698 87.069 36.2919 85.0575 38.0251C83.046 39.7583 81.0345 40.9137 78.4483 42.3581L74.1379 44.669H56.0345V33.1143H68.3908C70.0971 33.2247 71.7975 32.8225 73.2759 31.9589C74.4253 31.0923 75.2874 29.9368 76.1494 28.4925C76.8253 26.6458 77.1186 24.6798 77.0115 22.7151C77.0115 20.6931 76.7241 18.9599 76.1494 17.2267C75.5747 15.7823 74.7126 14.338 73.2759 13.7603C72.4138 12.8937 70.6897 12.3159 68.9655 12.3159H60.3448V70.0893H46.5517V0.761269V0.761269ZM78.1609 70.0893L65.5172 39.1805H79.8851L93.1035 69.5115V70.0893H78.1609ZM140.517 58.5346V70.0893H110.345V58.5346H140.517ZM114.655 0.761269V70.0893H100.575V0.761269H114.943H114.655ZM136.494 29.0702V40.0471H110.345V29.0702H136.207H136.494ZM140.517 0.761269V12.3159H110.345V0.761269H140.517ZM178.161 51.8907C178.161 50.7352 178.161 49.5797 177.586 48.7131C177.586 47.5577 177.012 46.6911 176.149 45.8245L173.276 42.9358L167.816 40.6249L160.345 37.1585L154.023 32.8255C152.021 31.2537 150.359 29.2878 149.138 27.0481C148.066 24.5949 147.574 21.9252 147.701 19.2487C147.701 16.3601 147.989 13.4714 149.138 11.4493C150.166 9.00506 151.739 6.83084 153.736 5.09427C155.747 3.64994 158.046 2.20559 160.632 1.33899C167.362 -0.855543 174.677 -0.337717 181.034 2.78333C184.483 4.51653 186.782 7.11632 188.793 10.2939C190.517 13.1825 191.667 17.2267 191.667 21.2708H177.299C177.424 19.5169 177.229 17.7548 176.724 16.0712C176.149 14.6269 175.287 13.1825 173.851 12.6048C172.701 11.7382 170.977 11.1605 169.253 11.1605C167.529 11.1605 166.092 11.7382 164.943 12.3159C163.793 12.8937 162.931 14.0491 162.069 15.2046L161.494 19.2487C161.494 20.4042 161.782 21.5597 162.356 22.4263L164.655 24.7372C167.235 26.2818 169.924 27.6335 172.701 28.7813L181.034 32.8255C183.199 34.2594 185.136 36.0121 186.782 38.0251C188.793 39.7583 189.655 41.7803 190.805 43.8024C192.605 48.9619 192.503 54.5998 190.517 59.6901C189.368 62.001 187.931 64.0231 186.207 65.7563C184.115 67.5878 181.669 68.9647 179.023 69.8004C173.276 71.2447 176.149 75 170.402 75C164.655 75 166.667 70.667 161.207 69.8004C158.333 68.9338 155.46 67.4895 153.448 65.7563C151.19 63.7856 149.419 61.313 148.276 58.5346C147.126 55.6459 146.552 52.1795 146.552 48.4243H160.632C160.632 50.4463 160.632 52.1795 161.207 53.6239C161.494 55.0682 162.069 56.5125 162.931 57.3791C163.793 57.9569 164.943 58.8235 166.092 59.1123C167.529 59.6901 168.966 59.6901 170.402 59.6901C172.414 59.6901 173.851 59.6901 175 58.8235C176.149 57.9569 176.724 57.0903 177.299 55.9348C177.874 54.7793 178.161 53.335 178.161 51.8907V51.8907ZM239.943 28.7813V40.336H211.207V28.7813H239.943ZM215.23 0.761269V70.0893H201.437V0.761269H215.23ZM250 0.761269V70.0893H236.207V0.761269H250Z"
+            fill="#0A140C"
+          />
+        </svg>
+        <span class="font-light block pb-[1px]">docs</span>
+      </a>
+      <p class="text(sm gray-700)">The next-gen web framework.</p>
+    </>
+  );
+}
diff --git a/www/components/FeatureIcons.tsx b/www/components/FeatureIcons.tsx
new file mode 100644
index 00000000000..564a4abf23e
--- /dev/null
+++ b/www/components/FeatureIcons.tsx
@@ -0,0 +1,250 @@
+export function NoBuild() {
+  return (
+    <svg
+      class="bg-green-200 md:bg-yellow-200 rounded-full w-20 h-20"
+      viewBox="0 0 75 75"
+      fill="none"
+      xmlns="http://www.w3.org/2000/svg"
+    >
+      <path
+        d="M29.6442 31.5258C32.7992 30.1446 35 27.0249 35 23.3976C35 19.5107 31.9774 16.2066 28.4569 15L28.4771 23.0715L26.1651 24.4575L23.6055 23.0715L22.5523 15C19.0318 16.2066 17 19.5107 17 23.3976C17 27.0249 19.2008 30.1446 22.3558 31.5258L20.9876 59.8211C20.8443 62.6385 23.1298 65 26 65C28.8702 65 31.1557 62.6385 31.0124 59.8211L29.6442 31.5258Z"
+        fill="white"
+        stroke="#6C6E78"
+        stroke-width="4"
+        stroke-linejoin="round"
+      />
+      <path
+        d="M47.284 42.6163L47.2873 41L53.9958 41.0114L53.9921 42.795L54.6175 43.4406C55.4816 44.3326 56.0026 45.5025 56 46.789L55.9644 60.98C55.9588 63.7576 53.4998 66.0051 50.472 66C47.4443 65.9948 44.9944 63.7389 45 60.9613L45.0356 46.7703C45.0383 45.4095 45.6267 44.1799 46.5868 43.2741L47.284 42.6163Z"
+        fill="white"
+      />
+      <path
+        fill-rule="evenodd"
+        clip-rule="evenodd"
+        d="M49.8521 12.4306L51.318 12.4333L53.1045 15.1525L52.2037 17.8668L52.1223 17.8666L52.0805 40.4179L56.64 40.4264L56.6332 44.1144C57.5516 45.3706 58.0938 46.9224 58.0907 48.5973L58.0649 59.8452C58.0571 64.0303 54.6581 67.4168 50.473 67.409C46.2878 67.4012 42.9014 64.0022 42.9092 59.8171L42.9351 48.5692C42.9384 46.7973 43.5513 45.1662 44.5726 43.878L44.579 40.404L48.9858 40.4122L49.0276 17.8609L48.0554 15.1432L49.8521 12.4306ZM48.1615 45.2833L48.1639 44.0022L53.0418 44.0113L53.0392 45.425L53.494 45.9367C54.1223 46.6437 54.5011 47.5709 54.4992 48.5907L54.4733 59.8386C54.4692 62.0401 52.6812 63.8215 50.4796 63.8174C48.2781 63.8134 46.4966 62.0253 46.5007 59.8238L46.5266 48.5759C46.5286 47.4973 46.9564 46.5227 47.6545 45.8047L48.1615 45.2833Z"
+        fill="#6C6E78"
+      />
+    </svg>
+  );
+}
+
+export function TypeScript() {
+  return (
+    <svg
+      class="bg-yellow-200 md:bg-blue-200 rounded-full w-20 h-20"
+      viewBox="0 0 75 75"
+      fill="none"
+      xmlns="http://www.w3.org/2000/svg"
+    >
+      <rect
+        x="19.0002"
+        y="39.2439"
+        width="35"
+        height="13"
+        fill="white"
+        stroke="#6C6E78"
+        stroke-width="4"
+        stroke-linejoin="round"
+      />
+      <path
+        d="M24.0538 40.3665C24.4356 39.4174 24.0397 38.3332 23.1361 37.8535L15.509 33.8043C14.5877 33.3152 13.4452 33.6163 12.8846 34.4959L8.31343 41.6682C7.99514 42.1676 7.91454 42.7824 8.09335 43.347C8.27217 43.9115 8.692 44.3678 9.23976 44.593L18.6291 48.4517C19.1221 48.6543 19.6756 48.6518 20.1667 48.4446C20.6578 48.2374 21.0459 47.8428 21.2448 47.3483L24.0538 40.3665Z"
+        fill="white"
+        stroke="#6C6E78"
+        stroke-width="4"
+        stroke-linejoin="round"
+      />
+      <path
+        d="M49.9732 40.9998C49.7598 40.5079 49.7529 39.9509 49.954 39.4539C50.1551 38.9569 50.5473 38.5614 51.0427 38.3562L59.0669 35.0327C59.964 34.6611 60.9984 34.9876 61.5197 35.8069L65.6876 42.3581C66.0054 42.8575 66.0856 43.472 65.9066 44.0363C65.7277 44.6005 65.308 45.0565 64.7605 45.2815L55.6007 49.0459C54.5929 49.4601 53.4391 48.9914 53.0056 47.9918L49.9732 40.9998Z"
+        fill="white"
+        stroke="#6C6E78"
+        stroke-width="4"
+        stroke-linejoin="round"
+      />
+      <mask id="path-4-inside-1_230_106" fill="white">
+        <rect x="22.7859" y="6" width="27.9707" height="26.5363" rx="3.45287" />
+      </mask>
+      <rect
+        x="22.7859"
+        y="6"
+        width="27.9707"
+        height="26.5363"
+        rx="3.45287"
+        fill="white"
+        stroke="#6C6E78"
+        stroke-width="8"
+        stroke-linejoin="round"
+        mask="url(#path-4-inside-1_230_106)"
+      />
+      <path
+        d="M21.0002 48.2439C20.4343 48.2439 19.8949 48.4837 19.5157 48.9037C19.1364 49.3238 18.953 49.8849 19.0107 50.4479L20.8562 68.4479C20.9608 69.4681 21.8202 70.2439 22.8458 70.2439H50.696C51.7445 70.2439 52.615 69.4342 52.6908 68.3884L53.995 50.3884C54.0352 49.8343 53.843 49.2885 53.4647 48.8817C53.0863 48.475 52.5558 48.2439 52.0002 48.2439H21.0002Z"
+        fill="white"
+        stroke="#6C6E78"
+        stroke-width="4"
+        stroke-linejoin="round"
+      />
+      <path
+        d="M20.5889 48.2439C19.6815 48.2439 18.8878 48.8548 18.6555 49.732L17.0669 55.732C16.908 56.332 17.0367 56.9719 17.4153 57.4638C17.794 57.9557 18.3795 58.2439 19.0002 58.2439H53.0002C53.6034 58.2439 54.1744 57.9717 54.5541 57.5031C54.9339 57.0344 55.0818 56.4195 54.9568 55.8294L53.6857 49.8294C53.4899 48.9051 52.6739 48.2439 51.7291 48.2439H20.5889Z"
+        fill="white"
+        stroke="#6C6E78"
+        stroke-width="4"
+        stroke-linejoin="round"
+      />
+      <path
+        d="M29.7296 17.3967V15.6467H36.6827V17.3967H34.2765V23.6467H32.1359V17.3967H29.7296ZM41.8126 18.1467C41.7918 17.8863 41.6941 17.6832 41.5197 17.5374C41.3478 17.3915 41.0861 17.3186 40.7345 17.3186C40.5105 17.3186 40.3269 17.3459 40.1837 17.4006C40.0431 17.4527 39.9389 17.5243 39.8712 17.6155C39.8035 17.7066 39.7684 17.8108 39.7657 17.928C39.7605 18.0243 39.7775 18.1116 39.8165 18.1897C39.8582 18.2652 39.9233 18.3342 40.0118 18.3967C40.1004 18.4566 40.2137 18.5113 40.3517 18.5608C40.4897 18.6103 40.6538 18.6545 40.8439 18.6936L41.5001 18.8342C41.9428 18.928 42.3217 19.0517 42.6368 19.2053C42.9519 19.359 43.2098 19.54 43.4103 19.7483C43.6108 19.954 43.7579 20.1858 43.8517 20.4436C43.948 20.7014 43.9975 20.9827 44.0001 21.2874C43.9975 21.8134 43.866 22.2587 43.6056 22.6233C43.3452 22.9879 42.9728 23.2652 42.4884 23.4553C42.0066 23.6454 41.4272 23.7405 40.7501 23.7405C40.0548 23.7405 39.448 23.6376 38.9298 23.4319C38.4142 23.2262 38.0131 22.9097 37.7267 22.4827C37.4428 22.053 37.2996 21.5035 37.297 20.8342H39.3595C39.3725 21.079 39.4337 21.2847 39.5431 21.4514C39.6525 21.6181 39.8061 21.7444 40.004 21.8303C40.2045 21.9163 40.4428 21.9592 40.7189 21.9592C40.9506 21.9592 41.1447 21.9306 41.3009 21.8733C41.4572 21.816 41.5756 21.7366 41.6564 21.635C41.7371 21.5334 41.7788 21.4176 41.7814 21.2874C41.7788 21.165 41.7384 21.0582 41.6603 20.967C41.5848 20.8733 41.4598 20.79 41.2853 20.717C41.1108 20.6415 40.8751 20.5712 40.5782 20.5061L39.7814 20.3342C39.073 20.1806 38.5144 19.9241 38.1056 19.5647C37.6993 19.2027 37.4975 18.7092 37.5001 18.0842C37.4975 17.5764 37.6329 17.1324 37.9064 16.7522C38.1824 16.3694 38.5639 16.0712 39.0509 15.8577C39.5405 15.6441 40.1017 15.5374 40.7345 15.5374C41.3803 15.5374 41.9389 15.6454 42.4103 15.8616C42.8816 16.0777 43.2449 16.3824 43.5001 16.7756C43.7579 17.1663 43.8881 17.6233 43.8907 18.1467H41.8126Z"
+        fill="#6C6E78"
+      />
+    </svg>
+  );
+}
+
+export function Island() {
+  return (
+    <svg
+      class="bg-blue-200 rounded-full w-20 h-20"
+      viewBox="0 0 75 75"
+      fill="none"
+      xmlns="http://www.w3.org/2000/svg"
+    >
+      <path
+        d="M24.8765 39.3727C16.4753 36.5509 8.60772 50.9392 13.5157 54.999C18.4236 59.0588 27.0005 56.7329 35.569 56.7329C38.2618 56.7329 41.2797 56.7952 44.2466 56.8159C49.2995 57.4544 59.6147 57.6582 60.4526 53.3657C62.4427 47.3005 51.5966 33.7385 47.8048 32.5681C36.246 29.0003 37.3759 43.5709 24.8765 39.3727Z"
+        fill="white"
+      />
+      <path
+        d="M43.8994 56.801C40.9326 56.7803 37.9147 56.718 35.2219 56.718C26.6533 56.718 18.0765 59.0439 13.1685 54.9841C8.26055 50.9243 16.1281 36.536 24.5293 39.3578C37.0288 43.556 35.8989 28.9854 47.4577 32.5532C51.2495 33.7236 62.0956 47.2856 60.1054 53.3508"
+        stroke="#6C6E78"
+        stroke-width="4"
+        stroke-linecap="round"
+      />
+      <path
+        d="M53.4297 52.6355C50.5204 52.2718 45.7928 60.2724 46.5201 62.0907C47.2474 63.9091 48.3384 65 53.4297 65C58.521 65 60.3393 63.5454 59.9756 61.3634C59.6119 59.1814 56.339 52.9991 53.4297 52.6355Z"
+        fill="white"
+        stroke="#6C6E78"
+        stroke-width="4"
+      />
+      <path
+        d="M15.8976 48.26C18.0796 47.169 22.8072 46.0776 26.0801 47.5322C29.3531 48.9869 34.0807 50.8051 40.6266 49.3505C47.1725 47.8959 47.1725 43.1682 55.5368 45.7139"
+        stroke="#6C6E78"
+        stroke-width="4"
+        stroke-linecap="round"
+      />
+      <path
+        d="M41 21.1538C41 23.2294 39.2584 25 37 25C34.7416 25 33 23.2294 33 21.1538C33 20.87 33.163 20.269 33.708 19.2319C34.1695 18.3536 34.7738 17.3956 35.4483 16.3263C35.5287 16.1988 35.6102 16.0697 35.6925 15.9389C36.1237 15.2541 36.5758 14.5288 37 13.7903C37.4242 14.5288 37.8763 15.2541 38.3075 15.9389C38.3898 16.0697 38.4713 16.1988 38.5517 16.3263C39.2262 17.3956 39.8305 18.3536 40.292 19.2319C40.837 20.269 41 20.87 41 21.1538Z"
+        fill="white"
+        stroke="#6C6E78"
+        stroke-width="4"
+        stroke-linejoin="round"
+      />
+    </svg>
+  );
+}
+
+// from https://heroicons.com/
+export function Globe() {
+  return (
+    <svg
+      class="bg-green-200 rounded-full w-20 h-20"
+      viewBox="0 0 75 75"
+      fill="none"
+      xmlns="http://www.w3.org/2000/svg"
+    >
+      <circle cx="37.5" cy="37.5" r="20.5" fill="white" />
+      <path
+        d="M17.1253 35.2222H21.5556C22.7638 35.2222 23.9225 35.7022 24.7768 36.5565C25.6312 37.4108 26.1111 38.5696 26.1111 39.7778V42.0556C26.1111 43.2638 26.5911 44.4225 27.4454 45.2768C28.2997 46.1311 29.4585 46.6111 30.6667 46.6111C31.8749 46.6111 33.0336 47.0911 33.8879 47.9454C34.7423 48.7997 35.2222 49.9585 35.2222 51.1667V57.8747M28.3889 19.1297V22.6944C28.3889 24.2047 28.9888 25.6531 30.0568 26.721C31.1247 27.7889 32.5731 28.3889 34.0833 28.3889H35.2222C36.4304 28.3889 37.5892 28.8688 38.4435 29.7232C39.2978 30.5775 39.7778 31.7362 39.7778 32.9444C39.7778 34.1527 40.2577 35.3114 41.1121 36.1657C41.9664 37.02 43.1251 37.5 44.3333 37.5C45.5415 37.5 46.7003 37.02 47.5546 36.1657C48.4089 35.3114 48.8889 34.1527 48.8889 32.9444C48.8889 31.7362 49.3688 30.5775 50.2232 29.7232C51.0775 28.8688 52.2362 28.3889 53.4444 28.3889H55.868M44.3333 56.8338V51.1667C44.3333 49.9585 44.8133 48.7997 45.6676 47.9454C46.522 47.0911 47.6807 46.6111 48.8889 46.6111H55.868M58 37.5C58 40.1921 57.4698 42.8578 56.4395 45.345C55.4093 47.8322 53.8993 50.0921 51.9957 51.9957C50.0921 53.8993 47.8322 55.4093 45.345 56.4395C42.8578 57.4698 40.1921 58 37.5 58C34.8079 58 32.1422 57.4698 29.655 56.4395C27.1678 55.4093 24.9079 53.8993 23.0043 51.9957C21.1007 50.0921 19.5907 47.8322 18.5605 45.345C17.5302 42.8578 17 40.1921 17 37.5C17 32.0631 19.1598 26.8488 23.0043 23.0043C26.8488 19.1598 32.0631 17 37.5 17C42.9369 17 48.1512 19.1598 51.9957 23.0043C55.8402 26.8488 58 32.0631 58 37.5Z"
+        stroke="#6C6E78"
+        stroke-width="4"
+        stroke-linecap="round"
+        stroke-linejoin="round"
+      />
+    </svg>
+  );
+}
+
+export function LightWeight() {
+  return (
+    <svg
+      class="bg-yellow-200 rounded-full w-20 h-20"
+      viewBox="0 0 75 75"
+      fill="none"
+      xmlns="http://www.w3.org/2000/svg"
+    >
+      <path
+        d="M30.323 50.1677C29.8721 49.8671 28.7299 48.6949 27.7681 46.4105C36.7993 41.3595 29.128 29.5594 21.1555 35.8905C15.5533 40.3393 17.6603 50.2484 19.7385 56.4481C17.4611 57.4948 14.4355 63.0071 16.9474 65.5191C19.4594 68.031 23.3436 65.8806 24.9717 64.4913C27.4228 65.3605 30.8953 65.8286 34.3916 66.2169C33.3449 73.1945 43.4625 72.8456 45.207 70.4035C46.9514 67.9613 45.9047 68.3102 45.9047 66.2169C47.5891 65.8119 48.1797 65.4739 49.5 64.4913C52.0585 64.9679 59.5112 67.6124 63 59.5881C57.069 60.9836 53.7647 58.8955 51 57.5C48 44.5 34.3916 44 30.323 50.1677Z"
+        fill="white"
+        stroke="#6C6E78"
+        stroke-width="4"
+        stroke-linejoin="round"
+      />
+      <path
+        d="M26.7447 65.1702C24.3025 58.1925 29.6623 51.64 33.5 48.5C34.4304 48.5 38.4297 47.6627 41.4999 48.5C35.0804 53.803 31.8617 62.9606 32.3268 65.868C31.7454 65.868 29.8149 65.7284 26.7447 65.1702Z"
+        fill="#6C6E78"
+      />
+      <path d="M36 46L36.4849 29.1428" stroke="#6C6E78" stroke-width="4" />
+      <path
+        d="M36.8337 27.7464C42.2272 27.7464 46.1603 22.8429 46.1603 17.3732C46.1603 11.9035 42.2272 7 36.8337 7C31.4403 7 27.5072 11.9035 27.5072 17.3732C27.5072 22.8429 31.4403 27.7464 36.8337 27.7464Z"
+        fill="white"
+        stroke="#6C6E78"
+        stroke-width="4"
+      />
+      <path
+        d="M34.3916 30.8922L36.4849 28.1011L38.9271 30.8922H34.3916Z"
+        stroke="#6C6E78"
+        stroke-width="4"
+        stroke-linejoin="round"
+      />
+      <path
+        d="M38.2293 59.5881C34.7405 60.9836 34.3916 64.8213 34.3916 65.868"
+        stroke="#6C6E78"
+        stroke-width="4"
+        stroke-linecap="round"
+      />
+      <circle cx="25.5" cy="38.5" r="1.5" fill="#6C6E78" />
+    </svg>
+  );
+}
+
+export function Gabage() {
+  return (
+    <svg
+      class="bg-blue-200 md:bg-green-200 rounded-full w-20 h-20"
+      viewBox="0 0 75 75"
+      fill="none"
+      xmlns="http://www.w3.org/2000/svg"
+    >
+      <path
+        d="M16.005 26.4841C15.4819 23.4303 56.4538 22.9234 57 26.4841L56.0103 35.8989L48.0082 42.1286C48.0082 47.559 26.9502 47.2714 26.9502 41.298L16.8423 35.0682L16.005 26.4841Z"
+        fill="#6C6E78"
+      />
+      <rect
+        x="31.8011"
+        y="11.3972"
+        width="21.6202"
+        height="24.1198"
+        rx="2"
+        transform="rotate(17.4292 31.8011 11.3972)"
+        fill="white"
+        stroke="#6C6E78"
+        stroke-width="4"
+        stroke-linejoin="round"
+      />
+      <path
+        d="M44.4035 36.4333L26.8075 37.3565C25.7044 37.4144 24.7633 36.5671 24.7054 35.4641L23.6512 15.3719C23.5933 14.2689 24.4406 13.3278 25.5436 13.2699L36.0817 12.717C36.629 12.6882 37.1642 12.8854 37.562 13.2624L45.0097 20.3184C45.3819 20.6712 45.6045 21.1534 45.6314 21.6655L46.296 34.3312C46.3538 35.4343 45.5066 36.3754 44.4035 36.4333Z"
+        fill="white"
+        stroke="#6C6E78"
+        stroke-width="4"
+        stroke-linejoin="round"
+      />
+      <path
+        d="M37.0664 12.6393V20.7628H41.1282H45.1899"
+        stroke="#6C6E78"
+        stroke-width="4"
+        stroke-linejoin="round"
+      />
+      <path
+        d="M21.371 59.8173L18.3324 30.1443C19.439 30.3495 20.766 30.5156 22.2219 30.6503C26.1528 31.0142 31.3471 31.1776 36.5067 31.1603C41.6674 31.1431 46.8576 30.9448 50.7825 30.5728C52.264 30.4323 53.6071 30.2634 54.7178 30.0605L52.0492 59.8426C52.0457 59.8822 52.0433 59.922 52.0421 59.9617C52.0222 60.0083 51.9242 60.2102 51.5236 60.5509C50.9569 61.0328 50.0124 61.585 48.6549 62.1081C45.9574 63.1474 41.9747 63.9394 37.1105 63.9965C32.0512 64.0559 27.8606 63.3506 25.0081 62.325C23.5731 61.809 22.5738 61.2466 21.9724 60.7394C21.4388 60.2893 21.3856 60.0355 21.3814 60.0124C21.3811 59.9473 21.3777 59.8822 21.371 59.8173Z"
+        fill="white"
+        stroke="#6C6E78"
+        stroke-width="4"
+        stroke-linejoin="round"
+      />
+    </svg>
+  );
+}
diff --git a/www/components/Footer.tsx b/www/components/Footer.tsx
index 8ba33d50bb2..7a786580f89 100644
--- a/www/components/Footer.tsx
+++ b/www/components/Footer.tsx
@@ -1,7 +1,3 @@
-/** @jsx h */
-import { h } from "preact";
-import { tw } from "@twind";
-
 const LINKS = [
   {
     title: "Source",
@@ -18,23 +14,17 @@ const LINKS = [
 ];
 
 export default function Footer() {
-  const footer =
-    tw`border(t-2 gray-200) bg-gray-100 h-32 flex flex-col gap-4 justify-center`;
-  const inner =
-    tw`mx-auto max-w-screen-lg flex items-center justify-center gap-8`;
-  const linkStyle = tw`text-gray-600 hover:underline`;
-  const copyright = tw`text(gray-600 center)`;
   return (
-    <footer class={footer}>
-      <div class={inner}>
+    <footer class="border(t-2 gray-200) bg-gray-100 h-32 flex flex-col gap-4 justify-center">
+      <div class="mx-auto max-w-screen-lg flex items-center justify-center gap-8">
         {LINKS.map((link) => (
-          <a href={link.href} class={linkStyle}>
+          <a href={link.href} class="text-gray-600 hover:underline">
             {link.title}
           </a>
         ))}
       </div>
-      <div class={copyright}>
-        <span>© {new Date().getFullYear()} the Fresh authors</span>
+      <div class="text(gray-600 center)">
+        <span>© {new Date().getFullYear()} the fresh authors</span>
       </div>
     </footer>
   );
diff --git a/www/components/Icons.tsx b/www/components/Icons.tsx
index 4a94ad8e667..12a555744b0 100644
--- a/www/components/Icons.tsx
+++ b/www/components/Icons.tsx
@@ -1,11 +1,7 @@
-/** @jsx h */
-import { h } from "preact";
-import { tw } from "@twind";
-
 export function IconMinus() {
   return (
     <svg
-      class={tw`h-6 w-6`}
+      class="h-6 w-6"
       xmlns="http://www.w3.org/2000/svg"
       fill="none"
       viewBox="0 0 24 24"
@@ -25,7 +21,7 @@ export function IconMinus() {
 export function IconPlus() {
   return (
     <svg
-      class={tw`h-6 w-6`}
+      class="h-6 w-6"
       xmlns="http://www.w3.org/2000/svg"
       fill="none"
       viewBox="0 0 24 24"
@@ -58,3 +54,92 @@ export function Leaf() {
     </svg>
   );
 }
+
+export function Copy() {
+  return (
+    <svg
+      class="h-4 w-4"
+      viewBox="0 0 15 15"
+      fill="none"
+      xmlns="http://www.w3.org/2000/svg"
+    >
+      <path
+        d="M1.55566 2.7C1.55566 2.03726 2.09292 1.5 2.75566 1.5H8.75566C9.41841 1.5 9.95566 2.03726 9.95566 2.7V5.1H12.3557C13.0184 5.1 13.5557 5.63726 13.5557 6.3V12.3C13.5557 12.9627 13.0184 13.5 12.3557 13.5H6.35566C5.69292 13.5 5.15566 12.9627 5.15566 12.3V9.9H2.75566C2.09292 9.9 1.55566 9.36274 1.55566 8.7V2.7ZM6.35566 9.9V12.3H12.3557V6.3H9.95566V8.7C9.95566 9.36274 9.41841 9.9 8.75566 9.9H6.35566ZM8.75566 8.7V2.7L2.75566 2.7V8.7H8.75566Z"
+        fill="currentColor"
+      />
+    </svg>
+  );
+}
+
+// from https://heroicons.com/
+export function Check() {
+  return (
+    <svg
+      xmlns="http://www.w3.org/2000/svg"
+      class="h-4 w-4"
+      fill="none"
+      viewBox="0 0 24 24"
+      stroke="currentColor"
+    >
+      <path
+        stroke-width={3}
+        strokeLinecap="round"
+        strokeLinejoin="round"
+        d="M5 13l4 4L19 7"
+      />
+    </svg>
+  );
+}
+
+// from https://heroicons.com/
+export function Info() {
+  return (
+    <svg
+      xmlns="http://www.w3.org/2000/svg"
+      class="h-6 w-6"
+      fill="none"
+      viewBox="0 0 24 24"
+      stroke="currentColor"
+      stroke-width="2"
+    >
+      <path
+        stroke-linecap="round"
+        stroke-linejoin="round"
+        d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
+      />
+    </svg>
+  );
+}
+
+export function GitHub(props: { class?: string }) {
+  return (
+    <svg
+      class={`h-6 w-6 ${props.class ?? ""}`}
+      fill="currentColor"
+      viewBox="0 0 24 24"
+    >
+      <path
+        fillRule="evenodd"
+        d="M12 2C6.477 2 2 6.484 2 12.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0112 6.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.202 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.943.359.309.678.92.678 1.855 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0022 12.017C22 6.484 17.522 2 12 2z"
+        clipRule="evenodd"
+      />
+    </svg>
+  );
+}
+
+export function ArrowRight() {
+  return (
+    <svg
+      width="20"
+      height="20"
+      viewBox="0 0 20 20"
+      fill="none"
+      xmlns="http://www.w3.org/2000/svg"
+    >
+      <path
+        d="M13.0833 14.4167L16.9166 10.5834C16.9999 10.5 17.0588 10.4098 17.0933 10.3125C17.1283 10.2153 17.1458 10.1112 17.1458 10C17.1458 9.88893 17.1283 9.78476 17.0933 9.68754C17.0588 9.59032 16.9999 9.50004 16.9166 9.41671L13.0624 5.56254C12.9096 5.40976 12.7221 5.33337 12.4999 5.33337C12.2777 5.33337 12.0833 5.41671 11.9166 5.58337C11.7638 5.73615 11.6874 5.9306 11.6874 6.16671C11.6874 6.40282 11.7638 6.59726 11.9166 6.75004L14.3333 9.16671H3.33325C3.09714 9.16671 2.89936 9.24643 2.73992 9.40587C2.57992 9.56587 2.49992 9.76393 2.49992 10C2.49992 10.2362 2.57992 10.4339 2.73992 10.5934C2.89936 10.7534 3.09714 10.8334 3.33325 10.8334H14.3333L11.8958 13.2709C11.743 13.4237 11.6666 13.6112 11.6666 13.8334C11.6666 14.0556 11.7499 14.25 11.9166 14.4167C12.0694 14.5695 12.2638 14.6459 12.4999 14.6459C12.736 14.6459 12.9305 14.5695 13.0833 14.4167Z"
+        fill="currentColor"
+      />
+    </svg>
+  );
+}
diff --git a/www/components/NavigationBar.tsx b/www/components/NavigationBar.tsx
index 4a06a2bbf8d..685b072c9db 100644
--- a/www/components/NavigationBar.tsx
+++ b/www/components/NavigationBar.tsx
@@ -1,7 +1,3 @@
-/** @jsx h */
-import { h } from "preact";
-import { tw } from "@twind";
-
 export default function NavigationBar(props: { active: string }) {
   const items = [
     {
@@ -12,16 +8,20 @@ export default function NavigationBar(props: { active: string }) {
       name: "Docs",
       href: "/docs",
     },
+    {
+      name: "Showcase",
+      href: "/showcase",
+    },
   ];
 
   return (
-    <nav class={tw`bg-green-200 py-2`}>
-      <ul class={tw`flex justify-center gap-8 mx-4`}>
+    <nav class="bg-green-200 py-2">
+      <ul class="flex justify-center gap-8 mx-4">
         {items.map((item) => (
           <li>
             <a
               href={item.href}
-              class={tw`text-gray-600 hover:underline ${
+              class={`text-gray-600 hover:underline ${
                 props.active == item.href ? "font-bold" : ""
               }`}
             >
diff --git a/www/components/Projects.tsx b/www/components/Projects.tsx
new file mode 100644
index 00000000000..55332f7e7a8
--- /dev/null
+++ b/www/components/Projects.tsx
@@ -0,0 +1,53 @@
+import * as Icons from "../components/Icons.tsx";
+export interface Project {
+  image: string;
+  title: string;
+  link: string;
+  github?: string;
+}
+
+interface ProjectProps {
+  items: Project[];
+  class?: string;
+}
+
+export default function Projects(props: ProjectProps) {
+  return (
+    <div
+      class={`pt-8 grid grid-cols-1 md:grid-cols-3 items-center ${
+        props.class ?? ""
+      }`}
+    >
+      {props.items.map((project) => (
+        <div class="w-full max-w-sm mx-auto group">
+          <a href={project.link} tabIndex={-1}>
+            <img
+              loading="lazy"
+              src={`/showcase/${project.image}1x.jpg`}
+              srcset={`/showcase/${project.image}2x.jpg 2x, /showcase/${project.image}1x.jpg 1x`}
+              alt={project.title}
+              width={600}
+              height={337}
+              style={{ aspectRatio: "16/9" }}
+              class="object-cover shadow-lg group-hover:(shadow-xl opacity-70) rounded-lg"
+            />
+          </a>
+          <div class="mt-4 flex items-center">
+            <div class="text(lg gray-600) flex-1 group-hover:text-underline">
+              <a href={project.link}>{project.title}</a>
+            </div>
+            {project.github && (
+              <a
+                href={`https://github.com/${project.github}`}
+                class="ml-2 text-gray-500 hover:text-gray-700"
+              >
+                <span class="sr-only">GitHub</span>
+                <Icons.GitHub class="inline float-right" />
+              </a>
+            )}
+          </div>
+        </div>
+      ))}
+    </div>
+  );
+}
diff --git a/www/data/showcase.json b/www/data/showcase.json
new file mode 100644
index 00000000000..f671c4e7731
--- /dev/null
+++ b/www/data/showcase.json
@@ -0,0 +1,20 @@
+[
+  {
+    "title": "Deno Merch",
+    "link": "https://merch.deno.com/",
+    "github": "denoland/merch",
+    "image": "merch"
+  },
+  {
+    "title": "Deno Chat",
+    "link": "https://showcase-chat.deno.dev/",
+    "github": "denoland/showcase_chat",
+    "image": "chat"
+  },
+  {
+    "title": "Fresh Website",
+    "link": "https://fresh.deno.dev/",
+    "github": "denoland/fresh/tree/main/www",
+    "image": "fresh"
+  }
+]
diff --git a/www/deno.json b/www/deno.json
index 673d9eb5b3c..8d9ac336cfe 100644
--- a/www/deno.json
+++ b/www/deno.json
@@ -2,5 +2,9 @@
   "tasks": {
     "start": "deno run -A --watch=static/,routes/ dev.ts"
   },
-  "importMap": "./import_map.json"
+  "importMap": "./import_map.json",
+  "compilerOptions": {
+    "jsx": "react-jsx",
+    "jsxImportSource": "preact"
+  }
 }
diff --git a/www/fresh.gen.ts b/www/fresh.gen.ts
index dace9fbbcec..0e2722075eb 100644
--- a/www/fresh.gen.ts
+++ b/www/fresh.gen.ts
@@ -2,25 +2,37 @@
 // This file SHOULD be checked into source version control.
 // This file is automatically updated during development when running `dev.ts`.
 
-import * as $0 from "./routes/docs/[...slug].tsx";
-import * as $1 from "./routes/gfm.css.ts";
-import * as $2 from "./routes/index.tsx";
-import * as $3 from "./routes/raw.ts";
-import * as $$0 from "./islands/Counter.tsx";
-import * as $$1 from "./islands/LemonDrop.tsx";
+import config from "./deno.json" assert { type: "json" };
+import * as $0 from "./routes/_404.tsx";
+import * as $1 from "./routes/_500.tsx";
+import * as $2 from "./routes/docs/[...slug].tsx";
+import * as $3 from "./routes/gfm.css.ts";
+import * as $4 from "./routes/index.tsx";
+import * as $5 from "./routes/raw.ts";
+import * as $6 from "./routes/showcase.tsx";
+import * as $7 from "./routes/update.tsx";
+import * as $$0 from "./islands/CopyArea.tsx";
+import * as $$1 from "./islands/Counter.tsx";
+import * as $$2 from "./islands/LemonDrop.tsx";
 
 const manifest = {
   routes: {
-    "./routes/docs/[...slug].tsx": $0,
-    "./routes/gfm.css.ts": $1,
-    "./routes/index.tsx": $2,
-    "./routes/raw.ts": $3,
+    "./routes/_404.tsx": $0,
+    "./routes/_500.tsx": $1,
+    "./routes/docs/[...slug].tsx": $2,
+    "./routes/gfm.css.ts": $3,
+    "./routes/index.tsx": $4,
+    "./routes/raw.ts": $5,
+    "./routes/showcase.tsx": $6,
+    "./routes/update.tsx": $7,
   },
   islands: {
-    "./islands/Counter.tsx": $$0,
-    "./islands/LemonDrop.tsx": $$1,
+    "./islands/CopyArea.tsx": $$0,
+    "./islands/Counter.tsx": $$1,
+    "./islands/LemonDrop.tsx": $$2,
   },
   baseUrl: import.meta.url,
+  config,
 };
 
 export default manifest;
diff --git a/www/import_map.json b/www/import_map.json
index 7b6980ed9c5..ea44f4e452d 100644
--- a/www/import_map.json
+++ b/www/import_map.json
@@ -2,13 +2,14 @@
   "imports": {
     "$fresh/": "../",
 
-    "@twind": "./utils/twind.ts",
     "twind": "https://esm.sh/twind@0.16.17",
     "twind/": "https://esm.sh/twind@0.16.17/",
 
-    "preact": "https://esm.sh/preact@10.10.0",
-    "preact/": "https://esm.sh/preact@10.10.0/",
-    "preact-render-to-string": "https://esm.sh/preact-render-to-string@5.2.1?external=preact",
+    "preact": "https://esm.sh/preact@10.10.6",
+    "preact/": "https://esm.sh/preact@10.10.6/",
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@5.2.3/",
+    "@preact/signals": "https://esm.sh/*@preact/signals@1.0.3",
+    "@preact/signals-core": "https://esm.sh/@preact/signals-core@1.0.1",
 
     "$std/": "https://deno.land/std@0.150.0/"
   }
diff --git a/www/islands/CopyArea.tsx b/www/islands/CopyArea.tsx
new file mode 100644
index 00000000000..f812d323214
--- /dev/null
+++ b/www/islands/CopyArea.tsx
@@ -0,0 +1,59 @@
+import { ComponentChildren } from "preact";
+import { useEffect, useState } from "preact/hooks";
+import { IS_BROWSER } from "$fresh/runtime.ts";
+import * as Icons from "../components/Icons.tsx";
+
+export default function CopyArea(props: { children: ComponentChildren }) {
+  const [copied, setCopied] = useState(false);
+
+  async function handleClick() {
+    if (props.children === undefined || props.children === null) {
+      return;
+    }
+    try {
+      await navigator.clipboard.writeText(props.children.toString());
+      setCopied(true);
+    } catch (error) {
+      setCopied(false);
+      console.error((error && error.message) || "Copy failed");
+    }
+  }
+
+  useEffect(() => {
+    if (!copied) {
+      return;
+    }
+    const timer = setTimeout(() => {
+      setCopied(false);
+    }, 2000);
+    return () => clearTimeout(timer);
+  }, [copied]);
+
+  return (
+    <div class="bg(gray-800) rounded text-white flex items-center">
+      <pre class="overflow-x-auto flex-1 py-2 px-4">
+        {props.children}
+      </pre>
+
+      <div class="relative my-2 mr-4">
+        <div
+          class={`transition ease-in-out absolute pointer-events-none bg-gray-900 text-white absolute p-2 -top-1/3 left-1/2 transform -translate-x-1/2 -translate-y-full box-border rounded opacity-0 ${
+            copied && "opacity-100"
+          }`}
+        >
+          Copied!
+        </div>
+        <button
+          aria-label="Copy to Clipboard"
+          disabled={!IS_BROWSER}
+          class={`rounded p-1.5 border border-gray-300 hover:bg-gray-700 ${
+            copied ? "text-green-500" : ""
+          } relative`}
+          onClick={handleClick}
+        >
+          {copied ? <Icons.Check /> : <Icons.Copy />}
+        </button>
+      </div>
+    </div>
+  );
+}
diff --git a/www/islands/Counter.tsx b/www/islands/Counter.tsx
index 2b884193ecc..449bb046bc3 100644
--- a/www/islands/Counter.tsx
+++ b/www/islands/Counter.tsx
@@ -1,8 +1,5 @@
-/** @jsx h */
-import { h } from "preact";
 import { useState } from "preact/hooks";
 import { IS_BROWSER } from "$fresh/runtime.ts";
-import { tw } from "@twind";
 import { RoundedButton } from "../components/Button.tsx";
 import { IconMinus, IconPlus } from "../components/Icons.tsx";
 
@@ -13,9 +10,7 @@ interface CounterProps {
 export default function Counter(props: CounterProps) {
   const [count, setCount] = useState(props.start);
   return (
-    <div
-      class={tw`bg-gray-100 p-4 border border-gray-200 flex items-center justify-around`}
-    >
+    <div class="bg-gray-100 p-4 border border-gray-200 flex items-center justify-around">
       <RoundedButton
         title="Subtract 1"
         onClick={() => setCount(count - 1)}
@@ -23,7 +18,7 @@ export default function Counter(props: CounterProps) {
       >
         <IconMinus />
       </RoundedButton>
-      <div class={tw`text-3xl tabular-nums`}>{count}</div>
+      <div class="text-3xl tabular-nums">{count}</div>
       <RoundedButton
         title="Add 1"
         onClick={() => setCount(count + 1)}
diff --git a/www/islands/LemonDrop.tsx b/www/islands/LemonDrop.tsx
index 1e9b93bc70b..331612834af 100644
--- a/www/islands/LemonDrop.tsx
+++ b/www/islands/LemonDrop.tsx
@@ -1,8 +1,4 @@
-/** @jsx h */
-/** @jsxFrag Fragment */
-import { Fragment, h } from "preact";
 import { useEffect, useRef, useState } from "preact/hooks";
-import { tw } from "@twind";
 import { Spring, WaveTank } from "../components/WaveTank.ts";
 
 function easeInCirc(x: number) {
@@ -102,7 +98,7 @@ function LemonDrop() {
         viewBox="0 0 100 300"
         fill="none"
         xmlns="http://www.w3.org/2000/svg"
-        class={tw`mt-36`}
+        class="mt-36"
         role="img"
         aria-label="Fresh logo"
       >
@@ -130,7 +126,7 @@ function LemonDrop() {
         height="100px"
         viewBox="0 0 100 100"
         preserveAspectRatio="none"
-        class={tw`-mt-5`}
+        class="-mt-5"
       >
         <polygon
           points={springsPath}
diff --git a/www/main.ts b/www/main.ts
index f7715e1689f..82234c72e38 100644
--- a/www/main.ts
+++ b/www/main.ts
@@ -1,26 +1,13 @@
 /// <reference no-default-lib="true" />
 /// <reference lib="dom" />
+/// <reference lib="dom.iterable" />
 /// <reference lib="dom.asynciterable" />
 /// <reference lib="deno.ns" />
-/// <reference lib="deno.unstable" />
 
 import { start } from "$fresh/server.ts";
-import { virtualSheet } from "twind/sheets";
-import { setup, theme } from "@twind";
+import twindPlugin from "$fresh/plugins/twind.ts";
 
-import routes from "./fresh.gen.ts";
+import manifest from "./fresh.gen.ts";
+import twindConfig from "./twind.config.ts";
 
-const sheet = virtualSheet();
-sheet.reset();
-setup({ sheet, theme });
-
-await start(routes, {
-  render(ctx, render) {
-    const snapshot = ctx.state.get("twindSnapshot") as unknown[] | null;
-    sheet.reset(snapshot || undefined);
-    render();
-    ctx.styles.splice(0, ctx.styles.length, ...(sheet).target);
-    const newSnapshot = sheet.reset();
-    ctx.state.set("twindSnapshot", newSnapshot);
-  },
-});
+await start(manifest, { plugins: [twindPlugin(twindConfig)] });
diff --git a/www/routes/_404.tsx b/www/routes/_404.tsx
new file mode 100644
index 00000000000..8eb2867c584
--- /dev/null
+++ b/www/routes/_404.tsx
@@ -0,0 +1,35 @@
+import LemonDrop from "../islands/LemonDrop.tsx";
+
+export function ServerCodePage(
+  props: { serverCode: number; codeDescription: string },
+) {
+  return (
+    <>
+      <section>
+        <div class="w-full flex justify-center items-center flex-col bg-green-300">
+          <LemonDrop />
+        </div>
+        <div class="text-center">
+          <h1 class="text(6xl) md:text(9xl) font-extrabold">
+            {props.serverCode}
+          </h1>
+
+          <p class="p-4 text(2xl) md:text(3xl)">
+            {props.codeDescription}
+          </p>
+
+          <p class="p-4">
+            <a href="/" class="hover:underline">Back to the Homepage</a>
+          </p>
+        </div>
+      </section>
+    </>
+  );
+}
+
+export default function PageNotFound() {
+  return ServerCodePage({
+    serverCode: 404,
+    codeDescription: "Couldn't find what you're looking for.",
+  });
+}
diff --git a/www/routes/_500.tsx b/www/routes/_500.tsx
new file mode 100644
index 00000000000..8bd82eb001b
--- /dev/null
+++ b/www/routes/_500.tsx
@@ -0,0 +1,8 @@
+import { ServerCodePage } from "./_404.tsx";
+
+export default function InternalServerError() {
+  return ServerCodePage({
+    serverCode: 500,
+    codeDescription: "Oops! Something went wrong.",
+  });
+}
diff --git a/www/routes/docs/[...slug].tsx b/www/routes/docs/[...slug].tsx
index 6b1856cd0b8..bb5cdd6fa55 100644
--- a/www/routes/docs/[...slug].tsx
+++ b/www/routes/docs/[...slug].tsx
@@ -1,11 +1,9 @@
-/** @jsx h */
-/** @jsxFrag Fragment */
-import { Fragment, h } from "preact";
 import { Head } from "$fresh/runtime.ts";
 import { Handlers, PageProps } from "$fresh/server.ts";
-import { apply, tw } from "@twind";
 import { frontMatter, gfm } from "../../utils/markdown.ts";
 
+import DocsTitle from "../../components/DocsTitle.tsx";
+import DocsHeader from "../../components/DocsHeader.tsx";
 import DocsSidebar from "../../components/DocsSidebar.tsx";
 import Footer from "../../components/Footer.tsx";
 import NavigationBar from "../../components/NavigationBar.tsx";
@@ -35,17 +33,12 @@ export const handler: Handlers<Data> = {
     }
     const entry = TABLE_OF_CONTENTS[slug];
     if (!entry) {
-      return new Response("404 Page not found", {
-        status: 404,
-      });
+      return ctx.renderNotFound();
     }
     const url = new URL(`../../../${entry.file}`, import.meta.url);
     const fileContent = await Deno.readTextFile(url);
-    const { content, data } = frontMatter(fileContent) as {
-      data: Record<string, string>;
-      content: string;
-    };
-    const page = { ...entry, markdown: content, data: data ?? {} };
+    const { body, attrs } = frontMatter<Record<string, unknown>>(fileContent);
+    const page = { ...entry, markdown: body, data: attrs ?? {} };
     const resp = ctx.render({ page });
     return resp;
   },
@@ -65,8 +58,8 @@ export default function DocsPage(props: PageProps<Data>) {
         <link rel="stylesheet" href={`/gfm.css?build=${__FRSH_BUILD_ID}`} />
         {description && <meta name="description" content={description} />}
       </Head>
-      <div class={tw`flex flex-col min-h-screen`}>
-        <Header />
+      <div class="flex flex-col min-h-screen">
+        <DocsHeader />
         <NavigationBar active="/docs" />
         <Main path={props.url.pathname} page={props.data.page} />
         <Footer />
@@ -75,87 +68,11 @@ export default function DocsPage(props: PageProps<Data>) {
   );
 }
 
-function Logo() {
-  return (
-    <a href="/" class={tw`flex mr-3 items-center`}>
-      <img
-        src="/logo.svg"
-        alt="Fresh logo"
-        width={40}
-        height={40}
-      />
-    </a>
-  );
-}
-
-function Header() {
-  const header = tw`mx-auto max-w-screen-lg flex gap-3 justify-between`;
-  const sidebarButton =
-    tw`px-4 py-4 md:hidden border(l-2 green-200) flex items-center hover:bg-green-100`;
-  return (
-    <div class={tw`bg-green-300`}>
-      <header class={header}>
-        <div class={tw`p-4 flex`}>
-          <Logo />
-          <div>
-            <Title />
-          </div>
-        </div>
-        <label for="docs_sidebar" class={sidebarButton}>
-          <svg
-            class={tw`h-6 w-6`}
-            stroke="currentColor"
-            fill="none"
-            viewBox="0 0 24 24"
-          >
-            <path
-              strokeLinecap="round"
-              strokeLinejoin="round"
-              strokeWidth="2"
-              d="M4 6h16M4 12h16M4 18h7"
-            >
-            </path>
-          </svg>
-        </label>
-      </header>
-    </div>
-  );
-}
-
-function Title() {
-  const title =
-    tw`text(2xl gray-900) tracking-tight font-extrabold flex items-center gap-1`;
-  const pageName = tw`font-light block pb-[1px]`;
-  const subtitle = tw`text(sm gray-700)`;
-  return (
-    <>
-      <a href="/" class={title}>
-        <svg
-          preserveAspectRatio="xMinYMin"
-          viewBox="0 0 250 75"
-          fill="none"
-          alt="Fresh logo"
-          xmlns="http://www.w3.org/2000/svg"
-          class={tw`h-5 inline-block py-[1px]`}
-        >
-          <path
-            d="M14.0805 0.761269V70.0893H0V0.761269H14.0805ZM35.6322 30.2257V41.7803H10.3448V30.2257H35.6322ZM38.5057 0.761269V12.3159H10.3448V0.761269H38.5057ZM46.5517 0.761269H68.9655C73.5632 0.761269 77.5862 1.62785 80.7471 3.36105C83.908 4.80538 86.4943 7.11632 88.2184 10.2939C90.1641 13.8269 91.1548 17.8107 91.092 21.8485C91.092 25.6038 90.5172 28.7813 89.3678 31.3811C88.5057 34.2698 87.069 36.2919 85.0575 38.0251C83.046 39.7583 81.0345 40.9137 78.4483 42.3581L74.1379 44.669H56.0345V33.1143H68.3908C70.0971 33.2247 71.7975 32.8225 73.2759 31.9589C74.4253 31.0923 75.2874 29.9368 76.1494 28.4925C76.8253 26.6458 77.1186 24.6798 77.0115 22.7151C77.0115 20.6931 76.7241 18.9599 76.1494 17.2267C75.5747 15.7823 74.7126 14.338 73.2759 13.7603C72.4138 12.8937 70.6897 12.3159 68.9655 12.3159H60.3448V70.0893H46.5517V0.761269V0.761269ZM78.1609 70.0893L65.5172 39.1805H79.8851L93.1035 69.5115V70.0893H78.1609ZM140.517 58.5346V70.0893H110.345V58.5346H140.517ZM114.655 0.761269V70.0893H100.575V0.761269H114.943H114.655ZM136.494 29.0702V40.0471H110.345V29.0702H136.207H136.494ZM140.517 0.761269V12.3159H110.345V0.761269H140.517ZM178.161 51.8907C178.161 50.7352 178.161 49.5797 177.586 48.7131C177.586 47.5577 177.012 46.6911 176.149 45.8245L173.276 42.9358L167.816 40.6249L160.345 37.1585L154.023 32.8255C152.021 31.2537 150.359 29.2878 149.138 27.0481C148.066 24.5949 147.574 21.9252 147.701 19.2487C147.701 16.3601 147.989 13.4714 149.138 11.4493C150.166 9.00506 151.739 6.83084 153.736 5.09427C155.747 3.64994 158.046 2.20559 160.632 1.33899C167.362 -0.855543 174.677 -0.337717 181.034 2.78333C184.483 4.51653 186.782 7.11632 188.793 10.2939C190.517 13.1825 191.667 17.2267 191.667 21.2708H177.299C177.424 19.5169 177.229 17.7548 176.724 16.0712C176.149 14.6269 175.287 13.1825 173.851 12.6048C172.701 11.7382 170.977 11.1605 169.253 11.1605C167.529 11.1605 166.092 11.7382 164.943 12.3159C163.793 12.8937 162.931 14.0491 162.069 15.2046L161.494 19.2487C161.494 20.4042 161.782 21.5597 162.356 22.4263L164.655 24.7372C167.235 26.2818 169.924 27.6335 172.701 28.7813L181.034 32.8255C183.199 34.2594 185.136 36.0121 186.782 38.0251C188.793 39.7583 189.655 41.7803 190.805 43.8024C192.605 48.9619 192.503 54.5998 190.517 59.6901C189.368 62.001 187.931 64.0231 186.207 65.7563C184.115 67.5878 181.669 68.9647 179.023 69.8004C173.276 71.2447 176.149 75 170.402 75C164.655 75 166.667 70.667 161.207 69.8004C158.333 68.9338 155.46 67.4895 153.448 65.7563C151.19 63.7856 149.419 61.313 148.276 58.5346C147.126 55.6459 146.552 52.1795 146.552 48.4243H160.632C160.632 50.4463 160.632 52.1795 161.207 53.6239C161.494 55.0682 162.069 56.5125 162.931 57.3791C163.793 57.9569 164.943 58.8235 166.092 59.1123C167.529 59.6901 168.966 59.6901 170.402 59.6901C172.414 59.6901 173.851 59.6901 175 58.8235C176.149 57.9569 176.724 57.0903 177.299 55.9348C177.874 54.7793 178.161 53.335 178.161 51.8907V51.8907ZM239.943 28.7813V40.336H211.207V28.7813H239.943ZM215.23 0.761269V70.0893H201.437V0.761269H215.23ZM250 0.761269V70.0893H236.207V0.761269H250Z"
-            fill="#0A140C"
-          />
-        </svg>
-        <span class={pageName}>docs</span>
-      </a>
-      <p class={subtitle}>The next-gen web framework.</p>
-    </>
-  );
-}
-
 function Main(props: { path: string; page: Page }) {
-  const main = tw`mx-auto max-w-screen-lg px-4 flex gap-6`;
   return (
-    <div class={tw`flex-1`}>
+    <div class="flex-1">
       <MobileSidebar path={props.path} />
-      <div class={main}>
+      <div class="mx-auto max-w-screen-lg px-4 flex gap-6">
         <DesktopSidebar path={props.path} />
         <Content page={props.page} />
       </div>
@@ -164,28 +81,25 @@ function Main(props: { path: string; page: Page }) {
 }
 
 function MobileSidebar(props: { path: string }) {
-  const container = tw`fixed inset-0 flex z-40 hidden` + " toggled";
-  const backdrop = tw`absolute inset-0 bg-gray-600 opacity-75`;
-  const sidebar =
-    tw`relative flex-1 flex flex-col w-[16rem] h-full bg-white border(r-2 gray-100)`;
-  const heading = tw`p-4 border(b-2 gray-100) bg-green-300`;
-  const items = tw`pt-2 pb-16 px-4 overflow-x-auto`;
   return (
     <>
       <input
         type="checkbox"
-        class={tw`hidden` + " toggle"}
+        class="hidden toggle"
         id="docs_sidebar"
         autocomplete="off"
       >
       </input>
-      <div class={container}>
-        <label class={backdrop} for="docs_sidebar" />
-        <div class={sidebar}>
-          <div class={heading}>
-            <Title />
+      <div class="fixed inset-0 flex z-40 hidden toggled">
+        <label
+          class="absolute inset-0 bg-gray-600 opacity-75"
+          for="docs_sidebar"
+        />
+        <div class="relative flex-1 flex flex-col w-[16rem] h-full bg-white border(r-2 gray-100)">
+          <div class="p-4 border(b-2 gray-100) bg-green-300">
+            <DocsTitle />
           </div>
-          <nav class={items}>
+          <nav class="pt-2 pb-16 px-4 overflow-x-auto">
             <DocsSidebar path={props.path} />
           </nav>
         </div>
@@ -196,24 +110,21 @@ function MobileSidebar(props: { path: string }) {
 
 function DesktopSidebar(props: { path: string }) {
   return (
-    <nav
-      class={tw`w-[16rem] flex-shrink-0 hidden md:block py-8 pr-4 border(r-2 gray-100)`}
-    >
+    <nav class="w-[16rem] flex-shrink-0 hidden md:block py-8 pr-4 border(r-2 gray-100)">
       <DocsSidebar path={props.path} />
     </nav>
   );
 }
 
 function Content(props: { page: Page }) {
-  const main = tw`py-8 overflow-hidden`;
-  const title = tw`text(4xl gray-900) tracking-tight font-extrabold mt-6`;
-  const body = tw`mt-6`;
   const html = gfm.render(props.page.markdown);
   return (
-    <main class={main}>
-      <h1 class={title}>{props.page.title}</h1>
+    <main class="py-8 overflow-hidden">
+      <h1 class="text(4xl gray-900) tracking-tight font-extrabold mt-6">
+        {props.page.title}
+      </h1>
       <div
-        class={`${body} markdown-body`}
+        class="mt-6 markdown-body"
         dangerouslySetInnerHTML={{ __html: html }}
       />
       <ForwardBackButtons slug={props.page.slug} />
@@ -221,7 +132,7 @@ function Content(props: { page: Page }) {
   );
 }
 
-const button = apply`p-2 bg-gray-100 w-full border(1 gray-200) grid`;
+const button = "p-2 bg-gray-100 w-full border(1 gray-200) grid";
 
 function ForwardBackButtons(props: { slug: string }) {
   const currentIndex = SLUGS.findIndex((slug) => slug === props.slug);
@@ -230,14 +141,14 @@ function ForwardBackButtons(props: { slug: string }) {
   const previous = TABLE_OF_CONTENTS[previousSlug];
   const next = TABLE_OF_CONTENTS[nextSlug];
 
-  const upper = tw`text(sm gray-600)`;
-  const category = tw`font-normal`;
-  const lower = tw`text-gray-900 font-medium`;
+  const upper = "text(sm gray-600)";
+  const category = "font-normal";
+  const lower = "text-gray-900 font-medium";
 
   return (
-    <div class={tw`mt-8 flex flex(col md:row) gap-4`}>
+    <div class="mt-8 flex flex(col md:row) gap-4">
       {previous && (
-        <a href={previous.href} class={tw`${button} text-left`}>
+        <a href={previous.href} class={`${button} text-left`}>
           <span class={upper}>{"←"} Previous</span>
           <span class={lower}>
             <span class={category}>
@@ -250,7 +161,7 @@ function ForwardBackButtons(props: { slug: string }) {
         </a>
       )}
       {next && (
-        <a href={next.href} class={tw`${button} text-right`}>
+        <a href={next.href} class={`${button} text-right`}>
           <span class={upper}>Next {"→"}</span>
           <span class={lower}>
             <span class={category}>
diff --git a/www/routes/index.tsx b/www/routes/index.tsx
index 5ad82e36666..558023e4255 100644
--- a/www/routes/index.tsx
+++ b/www/routes/index.tsx
@@ -1,14 +1,14 @@
-/** @jsx h */
-/** @jsxFrag Fragment */
-import { ComponentChildren, Fragment, h } from "preact";
 import { asset, Head } from "$fresh/runtime.ts";
 import { Handlers, PageProps } from "$fresh/server.ts";
-import { tw } from "@twind";
 import Counter from "../islands/Counter.tsx";
 import LemonDrop from "../islands/LemonDrop.tsx";
 import Footer from "../components/Footer.tsx";
-import { Leaf } from "../components/Icons.tsx";
 import VERSIONS from "../../versions.json" assert { type: "json" };
+import * as FeatureIcons from "../components/FeatureIcons.tsx";
+import CopyArea from "../islands/CopyArea.tsx";
+import * as Icons from "../components/Icons.tsx";
+import Projects from "../components/Projects.tsx";
+import projects from "../data/showcase.json" assert { type: "json" };
 
 export const handler: Handlers = {
   GET(req, ctx) {
@@ -43,12 +43,13 @@ export default function MainPage(props: PageProps) {
         <meta property="og:url" content={props.url.href} />
         <meta property="og:image" content={ogImageUrl} />
       </Head>
-      <div class={tw`flex flex-col min-h-screen`}>
+      <div class="flex flex-col min-h-screen">
         <Hero />
-        <div class={tw`flex-1`}>
+        <div class="flex-1">
           <Intro />
           <GettingStarted origin={origin} />
           <Example />
+          <Showcase />
         </div>
         <Footer />
       </div>
@@ -57,90 +58,103 @@ export default function MainPage(props: PageProps) {
 }
 
 function Hero() {
-  const container =
-    tw`w-full flex justify-center items-center flex-col bg-green-300`;
-  const nav = tw`flex justify-end items-center bg-green-300`;
-  const a =
-    tw`border(1 black) inline-flex items-center h-10 px-4 m-4 text-black bg-transparent rounded hover:bg-white`;
-
   return (
-    <Fragment>
-      <div class={nav}>
-        <a href="/docs" class={a}>
+    <>
+      <div class="flex justify-end items-center bg-green-300">
+        <a
+          href="/docs"
+          class="border(1 black) inline-flex items-center h-10 px-4 m-4 text-black bg-transparent rounded hover:bg-white"
+        >
           Documentation
         </a>
       </div>
-      <section class={container}>
+      <section class="w-full flex justify-center items-center flex-col bg-green-300">
         <LemonDrop />
       </section>
-    </Fragment>
+    </>
   );
 }
-export interface ListItemProps {
-  children: ComponentChildren;
-}
 
-function ListItem(props: ListItemProps) {
+function Features() {
+  const item = "flex md:flex-col items-center gap-5";
+  const desc = "flex-1 md:text-center";
+
   return (
-    <div class={tw`flex mt-3`}>
-      <Leaf />
-      <div class={tw`pl-4 flex-1`}>
-        {props.children}
+    <div class="grid md:grid-cols-3 gap-6 md:gap-14">
+      <div class={item}>
+        <FeatureIcons.Globe />
+        <div class={desc}>
+          <b>Just-in-time rendering</b> on the edge.
+        </div>
+      </div>
+
+      <div class={item}>
+        <FeatureIcons.Island />
+        <div class={desc}>
+          <b>Island based client hydration</b> for maximum interactivity.
+        </div>
+      </div>
+
+      <div class={item}>
+        <FeatureIcons.LightWeight />
+        <div class={desc}>
+          <b>Zero runtime overhead</b>: no JS is shipped to the client by
+          default.
+        </div>
+      </div>
+
+      <div class={item}>
+        <FeatureIcons.NoBuild />
+        <div class={desc}>
+          <b>No build step</b>.
+        </div>
+      </div>
+
+      <div class={item}>
+        <FeatureIcons.Gabage />
+        <div class={desc}>
+          <b>No configuration</b> necessary.
+        </div>
+      </div>
+
+      <div class={item}>
+        <FeatureIcons.TypeScript />
+        <div class={desc}>
+          <b>TypeScript support</b> out of the box.
+        </div>
       </div>
     </div>
   );
 }
 
 function Intro() {
-  const title =
-    tw`py-4 text(4xl sm:4xl lg:4xl gray-900 center) sm:tracking-tight font-extrabold`;
-
   return (
-    <section
-      class={tw`max-w-screen-sm mx-auto my-16 px(4 sm:6 md:8) space-y-4`}
-    >
-      <picture>
-        <img
-          src="/illustration/lemon-squash.svg"
-          class={tw`w-64 mx-auto`}
-          width={800}
-          height={678}
-          alt="deno is drinking fresh lemon squash"
-        />
-      </picture>
-
-      <h2 class={title}>
-        The next-gen web framework.
-      </h2>
+    <section class="max-w-screen-md mx-auto my-16 px(4 sm:6 md:8) space-y-12">
+      <div class="md:flex items-center">
+        <div class="flex-1 text-center md:text-left">
+          <h2 class="py-2 text(5xl sm:5xl lg:5xl gray-900) sm:tracking-tight sm:leading-[1.1]! font-extrabold">
+            The <span class="text-green-500">next-gen</span> web framework.
+          </h2>
 
-      <p class={tw`text-gray-600`}>
-        Fresh is a next generation web framework, built for speed, reliability,
-        and simplicity. Some stand out features:
-      </p>
+          <p class="mt-4 text-gray-600">
+            Built for speed, reliability, and simplicity.
+          </p>
+        </div>
 
-      <div>
-        <ListItem>
-          <b>Just-in-time rendering</b> on the edge.
-        </ListItem>
-        <ListItem>
-          <b>Island based client hydration</b> for maximum interactivity.
-        </ListItem>
-        <ListItem>
-          <b>Zero runtime overhead</b>: no JS is shipped to the client by
-          default.
-        </ListItem>
-        <ListItem>
-          <b>No build step</b>.
-        </ListItem>
-        <ListItem>
-          <b>No configuration</b> necessary.
-        </ListItem>
-        <ListItem>
-          <b>TypeScript support</b> out of the box.
-        </ListItem>
+        <picture class="block mt-4 md:mt-0">
+          <img
+            src="/illustration/lemon-squash.svg"
+            class="w-80 mx-auto"
+            width={800}
+            height={678}
+            alt="deno is drinking fresh lemon squash"
+          />
+        </picture>
       </div>
 
-      <p class={tw`text-gray-600`}>
+      <Features />
+
+      <p class="text-gray-600">
         Fresh embraces the tried and true design of server side rendering and
         progressive enhancement on the client side.
       </p>
@@ -150,47 +164,71 @@ function Intro() {
 
 function GettingStarted(props: { origin: string }) {
   return (
-    <section
-      class={tw`max-w-screen-sm mx-auto my-16 px(4 sm:6 md:8) space-y-4`}
-    >
-      <h2 id="getting-started" class={tw`text(xl gray-600) font-bold`}>
-        <a href="#getting-started" class={tw`hover:underline`}>
-          Getting started
+    <section class="max-w-screen-md mx-auto my-16 px(4 sm:6 md:8) space-y-4">
+      <h2 id="getting-started" class="text(3xl gray-600) font-bold">
+        <a href="#getting-started" class="hover:underline">
+          Getting Started
         </a>
       </h2>
-      <p class={tw`text-gray-600`}>
-        To get started, make sure you have the{" "}
-        <a href="https://deno.land" class={tw`text-blue-600 hover:underline`}>
-          Deno CLI
-        </a>{" "}
-        version 1.23.0 or higher installed.
-      </p>
-      <p class={tw`text-gray-600`}>
-        Then you can use the Fresh init script to bootstrap a new project:
+      <div class="text-gray-600 flex gap-1 mb-4 bg-gray-100 p-2 rounded">
+        <div class="text-gray-400">
+          <Icons.Info />
+        </div>
+        <p>
+          <a href="https://deno.land" class="text-blue-600 hover:underline">
+            Deno CLI
+          </a>{" "}
+          version 1.23.0 or higher is required.{" "}
+          <a
+            href="https://deno.land/manual/getting_started/installation"
+            class="text-blue-600 hover:underline"
+          >
+            Install
+          </a>{" "}
+          or{" "}
+          <a
+            href="https://deno.land/manual/getting_started/installation#updating"
+            class="text-blue-600 hover:underline"
+          >
+            update
+          </a>.
+        </p>
+      </div>
+      <p class="text-gray-600">
+        To bootstrap a new project:
       </p>
-      <pre class={tw`overflow-x-auto py-2 px-4 bg(gray-100)`}>
+
+      <CopyArea>
         {`deno run -A -r ${props.origin} my-project`}
-      </pre>
-      <p class={tw`text-gray-600`}>
+      </CopyArea>
+
+      <p class="text-gray-600">
         Enter the newly created project directory and run the following command
         to start the development server:
       </p>
-      <pre class={tw`overflow-x-auto py-2 px-4 bg(gray-100)`}>
-        deno task start
-      </pre>
-      <p class={tw`text-gray-600`}>
+
+      <CopyArea>{`deno task start`}</CopyArea>
+
+      <p class="text-gray-600">
         You can now open{" "}
         <a
           href="http://localhost:8000"
-          class={tw`text-blue-600 hover:underline`}
+          class="text-blue-600 hover:underline"
         >
           http://localhost:8000
         </a>{" "}
         in your browser to view the page.
       </p>
-      <p class={tw`text-gray-600`}>
-        A more in-depth getting started guide is available in{" "}
-        <a href="/docs" class={tw`text-blue-600 hover:underline`}>the docs</a>.
+      <p class="text-gray-600">
+        A more in-depth{" "}
+        <a
+          href="/docs/getting-started"
+          class="text-blue-600 hover:underline"
+        >
+          <i>Getting Started</i>
+        </a>{" "}
+        guide is available in{" "}
+        <a href="/docs" class="text-blue-600 hover:underline">the docs</a>.
       </p>
     </section>
   );
@@ -203,28 +241,48 @@ const timeFmt = new Intl.DateTimeFormat("en-US", {
 
 function Example() {
   return (
-    <section
-      class={tw`max-w-screen-sm mx-auto my-16 px(4 sm:6 md:8) space-y-4`}
-    >
-      <h2 id="example" class={tw`text(xl gray-600) font-bold`}>
-        <a href="#example" class={tw`hover:underline`}>
+    <section class="max-w-screen-md mx-auto my-16 px(4 sm:6 md:8) space-y-4">
+      <h2 id="example" class="text(3xl gray-600) font-bold">
+        <a href="#example" class="hover:underline">
           Example
         </a>
       </h2>
-      <p class={tw`text-gray-600`}>
+      <p class="text-gray-600">
         This text is being server side rendered on the fly. It was rendered at
         {" "}
         {timeFmt.format(new Date())}.
       </p>
-      <p class={tw`text-gray-600`}>
+      <p class="text-gray-600">
         The counter below was rendered on the server with a starting value of 3,
         and was then hydrated on the client to provide interactivity. Try out
         the buttons!
       </p>
       <Counter start={3} />
-      <p class={tw`text-gray-600`}>
+      <p class="text-gray-600">
         Only the JS required to render that counter is sent to the client.
       </p>
     </section>
   );
 }
+
+function Showcase() {
+  return (
+    <section class="max-w-screen-md mx-auto my-16 px(4 sm:6 md:8) space-y-4">
+      <h2 id="showcase" class="text(3xl gray-600) font-bold">
+        <a href="#showcase" class="hover:underline">
+          Showcase
+        </a>
+      </h2>
+      <p class="text-gray-600">
+        Below is a selection of projects that have been built with Fresh.
+      </p>
+      <Projects items={projects.slice(0, 3)} class="gap-8" />
+      <div class="flex gap-2 items-center justify-end text-blue-600">
+        <Icons.ArrowRight />
+        <a href="./showcase" class="hover:underline focus:underline">
+          View more
+        </a>
+      </div>
+    </section>
+  );
+}
diff --git a/www/routes/showcase.tsx b/www/routes/showcase.tsx
new file mode 100644
index 00000000000..778b3e255f9
--- /dev/null
+++ b/www/routes/showcase.tsx
@@ -0,0 +1,86 @@
+import { Head } from "$fresh/runtime.ts";
+import Projects, { Project } from "../components/Projects.tsx";
+import DocsHeader from "../components/DocsHeader.tsx";
+import Footer from "../components/Footer.tsx";
+import NavigationBar from "../components/NavigationBar.tsx";
+import projects from "../data/showcase.json" assert { type: "json" };
+
+export default function ShowcasePage() {
+  return (
+    <>
+      <Head>
+        <title>Showcase | fresh</title>
+      </Head>
+      <DocsHeader />
+      <NavigationBar active="/showcase" />
+
+      <div class="flex flex-col min-h-screen">
+        <div class="flex-1">
+          <Showcase items={projects} />
+
+          <section class="max-w-screen-lg mx-auto my-16 px(4 sm:6 md:8) space-y-4">
+            <h2 class="text(3xl gray-600) font-bold">
+              Badge
+            </h2>
+
+            <p class="text-gray-600">
+              You can add these stylish badges to your project's README to show
+              that it was built with Fresh.
+            </p>
+
+            <img
+              width="197"
+              height="37"
+              src="https://fresh.deno.dev/fresh-badge.svg"
+              alt="Made with Fresh"
+            />
+
+            <img
+              width="197"
+              height="37"
+              src="https://fresh.deno.dev/fresh-badge-dark.svg"
+              alt="Made with Fresh"
+            />
+
+            <p>
+              <a
+                href="https://github.com/denoland/fresh#badges"
+                class="text-blue-600 hover:underline focus:underline"
+              >
+                Usage instructions
+              </a>
+            </p>
+          </section>
+
+          <img
+            src="/illustration/deno-plush.svg"
+            alt="a deno plush is holding a lemon"
+            class="mx-auto w-48 mt-16"
+          />
+        </div>
+
+        <Footer />
+      </div>
+    </>
+  );
+}
+
+function Showcase({ items }: { items: Project[] }) {
+  return (
+    <section class="max-w-screen-lg mx-auto my-16 px(4 sm:6 md:8) space-y-4">
+      <h2 class="text(3xl gray-600) font-bold">
+        Showcase
+      </h2>
+      <p class="text-gray-600">
+        Below is a selection of projects that have been built with Fresh.{" "}
+        <a
+          href="https://github.com/denoland/fresh/blob/main/www/data/showcase.json"
+          class="text-blue-600 hover:underline"
+        >
+          Add yours!
+        </a>
+      </p>
+      <Projects items={items} class="gap-16" />
+    </section>
+  );
+}
diff --git a/www/routes/update.tsx b/www/routes/update.tsx
new file mode 100644
index 00000000000..c138083fcf1
--- /dev/null
+++ b/www/routes/update.tsx
@@ -0,0 +1,288 @@
+import { asset, Head } from "$fresh/runtime.ts";
+import { Handlers, PageProps } from "$fresh/server.ts";
+import Counter from "../islands/Counter.tsx";
+import LemonDrop from "../islands/LemonDrop.tsx";
+import Footer from "../components/Footer.tsx";
+import VERSIONS from "../../versions.json" assert { type: "json" };
+import * as FeatureIcons from "../components/FeatureIcons.tsx";
+import CopyArea from "../islands/CopyArea.tsx";
+import * as Icons from "../components/Icons.tsx";
+import Projects from "../components/Projects.tsx";
+import projects from "../data/showcase.json" assert { type: "json" };
+
+export const handler: Handlers = {
+  GET(req) {
+    const accept = req.headers.get("accept");
+    let path = "/docs/concepts/updating";
+    if (accept && !accept.includes("text/html")) {
+      path = `https://deno.land/x/fresh@${VERSIONS[0]}/update.ts`;
+    }
+    return new Response(`Redirecting to ${path}`, {
+      headers: { "Location": path },
+      status: 307,
+    });
+  },
+};
+
+const TITLE = "fresh - The next-gen web framework.";
+const DESCRIPTION =
+  "Just in time edge rendering, island based interactivity, and no configuration TypeScript support using Deno.";
+
+export default function MainPage(props: PageProps) {
+  const ogImageUrl = new URL(asset("/home-og.png"), props.url).href;
+  const origin = `${props.url.protocol}//${props.url.host}`;
+
+  return (
+    <>
+      <Head>
+        <title>{TITLE}</title>
+        <meta name="description" content={DESCRIPTION} />
+        <meta property="og:title" content={TITLE} />
+        <meta property="og:description" content={DESCRIPTION} />
+        <meta property="og:type" content="website" />
+        <meta property="og:url" content={props.url.href} />
+        <meta property="og:image" content={ogImageUrl} />
+      </Head>
+      <div class="flex flex-col min-h-screen">
+        <Hero />
+        <div class="flex-1">
+          <Intro />
+          <GettingStarted origin={origin} />
+          <Example />
+          <Showcase />
+        </div>
+        <Footer />
+      </div>
+    </>
+  );
+}
+
+function Hero() {
+  return (
+    <>
+      <div class="flex justify-end items-center bg-green-300">
+        <a
+          href="/docs"
+          class="border(1 black) inline-flex items-center h-10 px-4 m-4 text-black bg-transparent rounded hover:bg-white"
+        >
+          Documentation
+        </a>
+      </div>
+      <section class="w-full flex justify-center items-center flex-col bg-green-300">
+        <LemonDrop />
+      </section>
+    </>
+  );
+}
+
+function Features() {
+  const item = "flex md:flex-col items-center gap-5";
+  const desc = "flex-1 md:text-center";
+
+  return (
+    <div class="grid md:grid-cols-3 gap-6 md:gap-14">
+      <div class={item}>
+        <FeatureIcons.Globe />
+        <div class={desc}>
+          <b>Just-in-time rendering</b> on the edge.
+        </div>
+      </div>
+
+      <div class={item}>
+        <FeatureIcons.Island />
+        <div class={desc}>
+          <b>Island based client hydration</b> for maximum interactivity.
+        </div>
+      </div>
+
+      <div class={item}>
+        <FeatureIcons.LightWeight />
+        <div class={desc}>
+          <b>Zero runtime overhead</b>: no JS is shipped to the client by
+          default.
+        </div>
+      </div>
+
+      <div class={item}>
+        <FeatureIcons.NoBuild />
+        <div class={desc}>
+          <b>No build step</b>.
+        </div>
+      </div>
+
+      <div class={item}>
+        <FeatureIcons.Gabage />
+        <div class={desc}>
+          <b>No configuration</b> necessary.
+        </div>
+      </div>
+
+      <div class={item}>
+        <FeatureIcons.TypeScript />
+        <div class={desc}>
+          <b>TypeScript support</b> out of the box.
+        </div>
+      </div>
+    </div>
+  );
+}
+
+function Intro() {
+  return (
+    <section class="max-w-screen-md mx-auto my-16 px(4 sm:6 md:8) space-y-12">
+      <div class="md:flex items-center">
+        <div class="flex-1 text-center md:text-left">
+          <h2 class="py-2 text(5xl sm:5xl lg:5xl gray-900) sm:tracking-tight sm:leading-[1.1]! font-extrabold">
+            The <span class="text-green-500">next-gen</span> web framework.
+          </h2>
+
+          <p class="mt-4 text-gray-600">
+            Built for speed, reliability, and simplicity.
+          </p>
+        </div>
+
+        <picture class="block mt-4 md:mt-0">
+          <img
+            src="/illustration/lemon-squash.svg"
+            class="w-80 mx-auto"
+            width={800}
+            height={678}
+            alt="deno is drinking fresh lemon squash"
+          />
+        </picture>
+      </div>
+
+      <Features />
+
+      <p class="text-gray-600">
+        Fresh embraces the tried and true design of server side rendering and
+        progressive enhancement on the client side.
+      </p>
+    </section>
+  );
+}
+
+function GettingStarted(props: { origin: string }) {
+  return (
+    <section class="max-w-screen-md mx-auto my-16 px(4 sm:6 md:8) space-y-4">
+      <h2 id="getting-started" class="text(3xl gray-600) font-bold">
+        <a href="#getting-started" class="hover:underline">
+          Getting Started
+        </a>
+      </h2>
+      <div class="text-gray-600 flex gap-1 mb-4 bg-gray-100 p-2 rounded">
+        <div class="text-gray-400">
+          <Icons.Info />
+        </div>
+        <p>
+          <a href="https://deno.land" class="text-blue-600 hover:underline">
+            Deno CLI
+          </a>{" "}
+          version 1.23.0 or higher is required.{" "}
+          <a
+            href="https://deno.land/manual/getting_started/installation"
+            class="text-blue-600 hover:underline"
+          >
+            Install
+          </a>{" "}
+          or{" "}
+          <a
+            href="https://deno.land/manual/getting_started/installation#updating"
+            class="text-blue-600 hover:underline"
+          >
+            update
+          </a>.
+        </p>
+      </div>
+      <p class="text-gray-600">
+        To bootstrap a new project:
+      </p>
+
+      <CopyArea>
+        {`deno run -A -r ${props.origin} my-project`}
+      </CopyArea>
+
+      <p class="text-gray-600">
+        Enter the newly created project directory and run the following command
+        to start the development server:
+      </p>
+
+      <CopyArea>{`deno task start`}</CopyArea>
+
+      <p class="text-gray-600">
+        You can now open{" "}
+        <a
+          href="http://localhost:8000"
+          class="text-blue-600 hover:underline"
+        >
+          http://localhost:8000
+        </a>{" "}
+        in your browser to view the page.
+      </p>
+      <p class="text-gray-600">
+        A more in-depth{" "}
+        <a
+          href="/docs/getting-started"
+          class="text-blue-600 hover:underline"
+        >
+          <i>Getting Started</i>
+        </a>{" "}
+        guide is available in{" "}
+        <a href="/docs" class="text-blue-600 hover:underline">the docs</a>.
+      </p>
+    </section>
+  );
+}
+
+const timeFmt = new Intl.DateTimeFormat("en-US", {
+  timeStyle: "long",
+  hour12: false,
+});
+
+function Example() {
+  return (
+    <section class="max-w-screen-md mx-auto my-16 px(4 sm:6 md:8) space-y-4">
+      <h2 id="example" class="text(3xl gray-600) font-bold">
+        <a href="#example" class="hover:underline">
+          Example
+        </a>
+      </h2>
+      <p class="text-gray-600">
+        This text is being server side rendered on the fly. It was rendered at
+        {" "}
+        {timeFmt.format(new Date())}.
+      </p>
+      <p class="text-gray-600">
+        The counter below was rendered on the server with a starting value of 3,
+        and was then hydrated on the client to provide interactivity. Try out
+        the buttons!
+      </p>
+      <Counter start={3} />
+      <p class="text-gray-600">
+        Only the JS required to render that counter is sent to the client.
+      </p>
+    </section>
+  );
+}
+
+function Showcase() {
+  return (
+    <section class="max-w-screen-md mx-auto my-16 px(4 sm:6 md:8) space-y-4">
+      <h2 id="showcase" class="text(3xl gray-600) font-bold">
+        <a href="#showcase" class="hover:underline">
+          Showcase
+        </a>
+      </h2>
+      <p class="text-gray-600">
+        Below is a selection of projects that have been built with Fresh.
+      </p>
+      <Projects items={projects.slice(0, 3)} class="gap-8" />
+      <div class="flex gap-2 items-center justify-end text-blue-600">
+        <Icons.ArrowRight />
+        <a href="./showcase" class="hover:underline focus:underline">
+          View more
+        </a>
+      </div>
+    </section>
+  );
+}
diff --git a/www/static/fresh-badge-dark.svg b/www/static/fresh-badge-dark.svg
new file mode 100644
index 00000000000..ed96ac14172
--- /dev/null
+++ b/www/static/fresh-badge-dark.svg
@@ -0,0 +1 @@
+<svg width="197" height="37" fill="none" xmlns="http://www.w3.org/2000/svg"><rect width="197" height="37" rx="6" fill="#1C1C1C"/><path d="M40.16 10.75c3.144 7.674 0 11.8-2.66 14.075.65 2.275-1.94 2.744-2.925 1.625-2.897.999-8.783.967-13-3.25-2.275-2.275-.5-7.336 5.525-10.725 5.2-2.925 10.4-4.55 13.06-1.726z" fill="#FDCF2B"/><path d="M27.1 12.475c4.45-2.923 9.766-4.147 11.94-2.255 3.335 2.905-7.065 9.478-10.965 11.03-4.225 1.682-1.95 5.525-4.225 5.525-1.95 0-1.625-2.6-3.369-5.037-1.03-1.44 1.523-5.916 6.619-9.263z" fill="#fff" stroke="#FDCF2B" stroke-width=".65"/><path d="M36.547 10.702c3.02.813-.236 3.701-2.796 5.548-2.426 1.75-4.294 2.737-5.15 3.14-.238.112-1.051-1.464-1.051-.65 0 .27-.455 1.455-.608 1.512-.887.332-2.744.838-3.792.838-2.27 0-1.25-3.09 1.96-5.93.579-.512.96-.418 1.483-.418-.349-.503-.347-.597.262-1.006 2.708-1.819 6.095-3.034 7.533-3.262.238.009.533.228.533.408.266-.09 1.362-.252 1.627-.18z" fill="#FDCF2B"/><path d="M27.293 15.719c.64-.486 1.069-.657 1.364-1.642.368.078.547-.052.84-.456.21.303 1.076.395 1.594.456-.466.293-.688.553-.945 1.368-.951-.397-2.058-.196-2.853.274zM51.278 12.364h2.131l3.705 9.045h.136l3.705-9.045h2.13V24h-1.67v-8.42h-.108l-3.432 8.403h-1.386l-3.432-8.41h-.108V24h-1.67V12.364zm16.763 11.83a3.564 3.564 0 01-1.5-.308 2.528 2.528 0 01-1.062-.903c-.258-.394-.387-.877-.387-1.449 0-.492.095-.898.284-1.216.19-.318.445-.57.767-.756a4.006 4.006 0 011.08-.42c.398-.095.803-.167 1.216-.216l1.273-.148c.325-.041.562-.107.71-.198.148-.091.222-.24.222-.444v-.04c0-.496-.14-.88-.421-1.153-.276-.273-.69-.409-1.239-.409-.572 0-1.022.127-1.352.38-.326.25-.551.53-.676.836l-1.597-.364c.19-.53.466-.958.83-1.284.367-.33.79-.568 1.267-.716.477-.151.98-.227 1.506-.227.348 0 .718.042 1.108.125.394.08.761.227 1.102.443.345.216.627.525.847.926.22.398.329.915.329 1.552V24h-1.66v-1.193h-.067c-.11.22-.275.435-.495.648-.22.212-.502.388-.846.528-.345.14-.758.21-1.239.21zm.37-1.364c.47 0 .87-.093 1.204-.279a1.95 1.95 0 00.767-.727c.178-.303.267-.627.267-.972v-1.125c-.06.06-.178.118-.352.17-.17.05-.366.094-.585.131-.22.035-.434.067-.642.097-.209.026-.383.05-.523.068-.33.042-.63.112-.903.21-.27.099-.485.24-.648.427-.16.181-.239.424-.239.727 0 .42.155.739.466.954.31.213.707.319 1.188.319zm9.467 1.34c-.705 0-1.334-.18-1.886-.54-.55-.363-.982-.88-1.296-1.55-.31-.675-.466-1.483-.466-2.427 0-.943.157-1.75.472-2.42.318-.67.754-1.184 1.306-1.54a3.398 3.398 0 011.881-.534c.542 0 .978.091 1.307.273.333.178.59.386.773.625.185.239.33.449.432.63h.102v-4.323h1.699V24h-1.66v-1.358h-.141a4.49 4.49 0 01-.444.636c-.189.239-.45.447-.784.625-.333.178-.765.268-1.295.268zm.375-1.448c.489 0 .901-.13 1.239-.387.34-.261.598-.623.772-1.085.178-.462.267-1 .267-1.614 0-.606-.087-1.136-.261-1.59-.174-.455-.43-.81-.767-1.063-.337-.254-.754-.38-1.25-.38-.511 0-.938.132-1.279.397-.34.265-.598.627-.772 1.085-.17.459-.256.976-.256 1.551 0 .584.087 1.108.261 1.574.175.466.432.835.773 1.108.345.27.77.404 1.273.404zm10.135 1.454c-.86 0-1.6-.184-2.222-.551a3.738 3.738 0 01-1.432-1.563c-.333-.674-.5-1.463-.5-2.369 0-.894.167-1.682.5-2.364a3.882 3.882 0 011.41-1.596c.605-.383 1.314-.574 2.124-.574.493 0 .97.082 1.432.244.462.163.877.419 1.245.768.367.348.657.8.869 1.357.212.553.318 1.226.318 2.018v.602h-6.937v-1.273h5.272c0-.447-.09-.843-.272-1.188a2.062 2.062 0 00-.767-.823c-.326-.201-.709-.302-1.148-.302-.477 0-.894.118-1.25.353a2.365 2.365 0 00-.818.909c-.19.371-.284.774-.284 1.21v.994c0 .584.102 1.08.306 1.489.209.41.499.722.87.938.37.212.805.318 1.3.318.323 0 .616-.046.882-.137.265-.094.494-.235.687-.42.193-.186.34-.415.443-.688l1.608.29c-.129.474-.36.888-.693 1.244a3.36 3.36 0 01-1.244.824c-.497.194-1.063.29-1.7.29zM100.143 24l-2.568-8.727h1.756l1.71 6.409h.085l1.716-6.41h1.756l1.705 6.381h.085l1.699-6.38h1.755L107.28 24h-1.733l-1.773-6.301h-.131L101.871 24h-1.728zm11.312 0v-8.727h1.698V24h-1.698zm.857-10.074a1.08 1.08 0 01-.761-.295.961.961 0 01-.312-.716.95.95 0 01.312-.716c.212-.2.466-.301.761-.301.296 0 .548.1.756.3a.941.941 0 01.318.717.953.953 0 01-.318.716 1.06 1.06 0 01-.756.295zm7.201 1.347v1.363h-4.767v-1.363h4.767zm-3.489-2.091h1.699v8.255c0 .33.049.578.148.745a.768.768 0 00.38.335c.16.057.332.085.517.085.137 0 .256-.01.358-.028.103-.02.182-.034.239-.046l.307 1.404a2.878 2.878 0 01-.421.114 3.324 3.324 0 01-.681.068 2.989 2.989 0 01-1.25-.239 2.144 2.144 0 01-.938-.773c-.239-.348-.358-.786-.358-1.312v-8.608zm7.254 5.636V24h-1.698V12.364h1.676v4.33h.108c.204-.47.517-.844.937-1.12.421-.277.97-.415 1.648-.415.598 0 1.121.123 1.568.37.451.246.799.613 1.045 1.102.25.485.376 1.09.376 1.818V24h-1.699v-5.347c0-.64-.165-1.136-.495-1.488-.329-.356-.788-.534-1.375-.534-.401 0-.761.085-1.079.255-.315.17-.563.42-.745.75-.178.326-.267.72-.267 1.182zM135.308 24V12.364h7.705v2.028h-5.245v2.773h4.733v2.028h-4.733V24h-2.46zm9.174 0v-8.727h2.346v1.523h.091c.159-.542.426-.951.801-1.228.375-.28.807-.42 1.296-.42a3.65 3.65 0 01.761.085v2.148a3.17 3.17 0 00-.472-.091c-.2-.027-.384-.04-.551-.04-.356 0-.674.078-.954.233a1.712 1.712 0 00-.659.636 1.838 1.838 0 00-.239.944V24h-2.42zm10.117.17c-.897 0-1.67-.181-2.318-.545a3.731 3.731 0 01-1.488-1.557c-.349-.674-.523-1.471-.523-2.392 0-.898.174-1.685.523-2.363a3.863 3.863 0 011.471-1.586c.637-.379 1.383-.568 2.239-.568.576 0 1.112.093 1.608.278.5.182.935.457 1.307.824.375.368.666.83.875 1.387.208.553.312 1.2.312 1.943v.665h-7.369v-1.5h5.091a1.85 1.85 0 00-.228-.927 1.622 1.622 0 00-.63-.63 1.799 1.799 0 00-.926-.233c-.368 0-.694.085-.978.256-.28.166-.5.392-.659.676-.159.28-.24.593-.244.937v1.426c0 .432.079.805.239 1.12.162.314.392.556.687.727.296.17.646.256 1.051.256.269 0 .515-.038.739-.114.223-.076.415-.19.574-.34.159-.152.28-.338.363-.558l2.239.148a3.063 3.063 0 01-.699 1.41c-.348.397-.799.707-1.352.93-.549.22-1.184.33-1.904.33zm12.847-6.409l-2.216.137a1.146 1.146 0 00-.244-.512 1.297 1.297 0 00-.495-.369 1.675 1.675 0 00-.721-.142c-.375 0-.691.08-.949.239-.258.155-.386.363-.386.625 0 .208.083.384.25.528.166.144.452.26.858.347l1.579.318c.849.174 1.481.454 1.898.84.417.387.625.895.625 1.524 0 .571-.169 1.073-.506 1.505-.333.432-.791.77-1.375 1.012-.579.238-1.248.358-2.005.358-1.156 0-2.076-.241-2.762-.722a2.813 2.813 0 01-1.199-1.977l2.381-.125c.072.352.246.62.523.806.276.182.63.273 1.062.273.424 0 .765-.081 1.023-.244.261-.167.394-.38.398-.642a.669.669 0 00-.279-.54c-.182-.144-.462-.254-.841-.33l-1.511-.3c-.852-.171-1.487-.467-1.903-.887-.413-.42-.62-.957-.62-1.608 0-.56.152-1.044.455-1.449.307-.405.737-.718 1.29-.937.556-.22 1.208-.33 1.954-.33 1.102 0 1.97.233 2.602.699.637.466 1.008 1.1 1.114 1.903zm4.143 1.194V24h-2.42V12.364h2.352v4.448h.103c.197-.515.515-.918.954-1.21.44-.295.991-.443 1.654-.443.606 0 1.134.133 1.585.398a2.66 2.66 0 011.057 1.13c.253.49.378 1.074.375 1.756V24h-2.421v-5.125c.004-.538-.132-.956-.409-1.256-.273-.299-.655-.448-1.148-.448-.329 0-.621.07-.875.21a1.49 1.49 0 00-.591.613c-.14.265-.212.585-.216.96z" fill="#fff"/></svg>
\ No newline at end of file
diff --git a/www/static/fresh-badge.svg b/www/static/fresh-badge.svg
new file mode 100644
index 00000000000..564a38999ee
--- /dev/null
+++ b/www/static/fresh-badge.svg
@@ -0,0 +1 @@
+<svg width="197" height="37" fill="none" xmlns="http://www.w3.org/2000/svg"><rect x=".5" y=".5" width="196" height="36" rx="5.5" fill="#fff"/><path d="M40.16 10.75c3.144 7.674 0 11.8-2.66 14.075.65 2.275-1.94 2.744-2.925 1.625-2.897.999-8.783.967-13-3.25-2.275-2.275-.5-7.336 5.525-10.725 5.2-2.925 10.4-4.55 13.06-1.726z" fill="#FDCF2B"/><path d="M27.1 12.475c4.45-2.923 9.766-4.147 11.939-2.255 3.336 2.905-7.064 9.478-10.964 11.03-4.225 1.682-1.95 5.525-4.225 5.525-1.95 0-1.625-2.6-3.369-5.037-1.03-1.44 1.523-5.916 6.619-9.263z" fill="#fff" stroke="#FDCF2B" stroke-width=".65"/><path d="M36.547 10.702c3.02.813-.236 3.701-2.796 5.548-2.426 1.75-4.294 2.737-5.15 3.14-.238.112-1.051-1.464-1.051-.65 0 .27-.455 1.455-.608 1.512-.887.332-2.744.838-3.792.838-2.27 0-1.25-3.09 1.96-5.93.579-.512.96-.418 1.483-.418-.349-.503-.347-.597.262-1.006 2.708-1.819 6.095-3.034 7.533-3.262.238.009.532.228.532.408.267-.09 1.363-.252 1.627-.18z" fill="#FDCF2B"/><path d="M27.293 15.719c.64-.486 1.069-.657 1.364-1.642.368.078.547-.052.84-.456.21.303 1.076.395 1.594.456-.466.293-.688.553-.945 1.368-.951-.397-2.058-.196-2.853.274z" fill="#fff"/><path d="M51.278 12.364h2.131l3.705 9.045h.136l3.705-9.045h2.13V24h-1.67v-8.42h-.108l-3.432 8.403h-1.386l-3.432-8.41h-.108V24h-1.67V12.364zm16.763 11.83a3.564 3.564 0 01-1.5-.308 2.528 2.528 0 01-1.062-.903c-.258-.394-.387-.877-.387-1.449 0-.492.095-.898.284-1.216.19-.318.445-.57.767-.756a4.006 4.006 0 011.08-.42c.398-.095.803-.167 1.216-.216l1.273-.148c.325-.041.562-.107.71-.198.148-.091.222-.24.222-.444v-.04c0-.496-.14-.88-.421-1.153-.276-.273-.69-.409-1.239-.409-.572 0-1.022.127-1.352.38-.326.25-.551.53-.676.836l-1.597-.364c.19-.53.466-.958.83-1.284.367-.33.79-.568 1.267-.716.477-.151.98-.227 1.506-.227.348 0 .718.042 1.108.125.394.08.761.227 1.102.443.345.216.627.525.847.926.22.398.329.915.329 1.552V24h-1.66v-1.193h-.067c-.11.22-.275.435-.495.648-.22.212-.502.388-.846.528-.345.14-.758.21-1.239.21zm.37-1.364c.47 0 .87-.093 1.204-.279a1.95 1.95 0 00.767-.727c.178-.303.267-.627.267-.972v-1.125c-.06.06-.178.118-.352.17-.17.05-.366.094-.585.131-.22.035-.434.067-.642.097-.209.026-.383.05-.523.068-.33.042-.63.112-.903.21-.27.099-.485.24-.648.427-.16.181-.239.424-.239.727 0 .42.155.739.466.954.31.213.707.319 1.188.319zm9.467 1.34c-.705 0-1.334-.18-1.886-.54-.55-.363-.982-.88-1.296-1.55-.31-.675-.466-1.483-.466-2.427 0-.943.157-1.75.472-2.42.318-.67.754-1.184 1.306-1.54a3.398 3.398 0 011.881-.534c.542 0 .978.091 1.307.273.333.178.59.386.773.625.185.239.33.449.432.63h.102v-4.323h1.699V24h-1.66v-1.358h-.141a4.49 4.49 0 01-.444.636c-.189.239-.45.447-.784.625-.333.178-.765.268-1.295.268zm.375-1.448c.489 0 .901-.13 1.239-.387.34-.261.598-.623.772-1.085.178-.462.267-1 .267-1.614 0-.606-.087-1.136-.261-1.59-.174-.455-.43-.81-.767-1.063-.337-.254-.754-.38-1.25-.38-.511 0-.938.132-1.279.397-.34.265-.598.627-.772 1.085-.17.459-.256.976-.256 1.551 0 .584.087 1.108.261 1.574.175.466.432.835.773 1.108.345.27.77.404 1.273.404zm10.135 1.454c-.86 0-1.6-.184-2.222-.551a3.738 3.738 0 01-1.432-1.563c-.333-.674-.5-1.463-.5-2.369 0-.894.167-1.682.5-2.364a3.882 3.882 0 011.41-1.596c.605-.383 1.314-.574 2.124-.574.493 0 .97.082 1.432.244.462.163.877.419 1.245.768.367.348.657.8.869 1.357.212.553.318 1.226.318 2.018v.602h-6.937v-1.273h5.272c0-.447-.09-.843-.272-1.188a2.062 2.062 0 00-.767-.823c-.326-.201-.709-.302-1.148-.302-.477 0-.894.118-1.25.353a2.365 2.365 0 00-.818.909c-.19.371-.284.774-.284 1.21v.994c0 .584.102 1.08.306 1.489.209.41.499.722.87.938.37.212.805.318 1.3.318.323 0 .616-.046.882-.137.265-.094.494-.235.687-.42.193-.186.34-.415.443-.688l1.608.29c-.129.474-.36.888-.693 1.244a3.36 3.36 0 01-1.244.824c-.497.194-1.063.29-1.7.29zM100.143 24l-2.568-8.727h1.756l1.71 6.409h.085l1.716-6.41h1.756l1.705 6.381h.085l1.699-6.38h1.755L107.28 24h-1.733l-1.773-6.301h-.131L101.871 24h-1.728zm11.312 0v-8.727h1.698V24h-1.698zm.857-10.074a1.08 1.08 0 01-.761-.295.961.961 0 01-.312-.716.95.95 0 01.312-.716c.212-.2.466-.301.761-.301.296 0 .548.1.756.3a.941.941 0 01.318.717.953.953 0 01-.318.716 1.06 1.06 0 01-.756.295zm7.201 1.347v1.363h-4.767v-1.363h4.767zm-3.489-2.091h1.699v8.255c0 .33.049.578.148.745a.768.768 0 00.38.335c.16.057.332.085.517.085.137 0 .256-.01.358-.028.103-.02.182-.034.239-.046l.307 1.404a2.878 2.878 0 01-.421.114 3.324 3.324 0 01-.681.068 2.989 2.989 0 01-1.25-.239 2.144 2.144 0 01-.938-.773c-.239-.348-.358-.786-.358-1.312v-8.608zm7.254 5.636V24h-1.698V12.364h1.676v4.33h.108c.204-.47.517-.844.937-1.12.421-.277.97-.415 1.648-.415.598 0 1.121.123 1.568.37.451.246.799.613 1.045 1.102.25.485.376 1.09.376 1.818V24h-1.699v-5.347c0-.64-.165-1.136-.495-1.488-.329-.356-.788-.534-1.375-.534-.401 0-.761.085-1.079.255-.315.17-.563.42-.745.75-.178.326-.267.72-.267 1.182zM135.308 24V12.364h7.705v2.028h-5.245v2.773h4.733v2.028h-4.733V24h-2.46zm9.174 0v-8.727h2.346v1.523h.091c.159-.542.426-.951.801-1.228.375-.28.807-.42 1.296-.42a3.65 3.65 0 01.761.085v2.148a3.17 3.17 0 00-.472-.091c-.2-.027-.384-.04-.551-.04-.356 0-.674.078-.954.233a1.712 1.712 0 00-.659.636 1.838 1.838 0 00-.239.944V24h-2.42zm10.117.17c-.897 0-1.67-.181-2.318-.545a3.731 3.731 0 01-1.488-1.557c-.349-.674-.523-1.471-.523-2.392 0-.898.174-1.685.523-2.363a3.863 3.863 0 011.471-1.586c.637-.379 1.383-.568 2.239-.568.576 0 1.112.093 1.608.278.5.182.935.457 1.307.824.375.368.666.83.875 1.387.208.553.312 1.2.312 1.943v.665h-7.369v-1.5h5.091a1.85 1.85 0 00-.228-.927 1.622 1.622 0 00-.63-.63 1.799 1.799 0 00-.926-.233c-.368 0-.694.085-.978.256-.28.166-.5.392-.659.676-.159.28-.24.593-.244.937v1.426c0 .432.079.805.239 1.12.162.314.392.556.687.727.296.17.646.256 1.051.256.269 0 .515-.038.739-.114.223-.076.415-.19.574-.34.159-.152.28-.338.363-.558l2.239.148a3.063 3.063 0 01-.699 1.41c-.348.397-.799.707-1.352.93-.549.22-1.184.33-1.904.33zm12.847-6.409l-2.216.137a1.146 1.146 0 00-.244-.512 1.297 1.297 0 00-.495-.369 1.675 1.675 0 00-.721-.142c-.375 0-.691.08-.949.239-.258.155-.386.363-.386.625 0 .208.083.384.25.528.166.144.452.26.858.347l1.579.318c.849.174 1.481.454 1.898.84.417.387.625.895.625 1.524 0 .571-.169 1.073-.506 1.505-.333.432-.791.77-1.375 1.012-.579.238-1.248.358-2.005.358-1.156 0-2.076-.241-2.762-.722a2.813 2.813 0 01-1.199-1.977l2.381-.125c.072.352.246.62.523.806.276.182.63.273 1.062.273.424 0 .765-.081 1.023-.244.261-.167.394-.38.398-.642a.669.669 0 00-.279-.54c-.182-.144-.462-.254-.841-.33l-1.511-.3c-.852-.171-1.487-.467-1.903-.887-.413-.42-.62-.957-.62-1.608 0-.56.152-1.044.455-1.449.307-.405.737-.718 1.29-.937.556-.22 1.208-.33 1.954-.33 1.102 0 1.97.233 2.602.699.637.466 1.008 1.1 1.114 1.903zm4.143 1.194V24h-2.42V12.364h2.352v4.448h.103c.197-.515.515-.918.954-1.21.44-.295.991-.443 1.654-.443.606 0 1.134.133 1.585.398a2.66 2.66 0 011.057 1.13c.253.49.378 1.074.375 1.756V24h-2.421v-5.125c.004-.538-.132-.956-.409-1.256-.273-.299-.655-.448-1.148-.448-.329 0-.621.07-.875.21a1.49 1.49 0 00-.591.613c-.14.265-.212.585-.216.96z" fill="#232323"/><rect x=".5" y=".5" width="196" height="36" rx="5.5" stroke="#D2D2D2"/></svg>
\ No newline at end of file
diff --git a/www/static/illustration/deno-plush.svg b/www/static/illustration/deno-plush.svg
new file mode 100644
index 00000000000..9039f863b8a
--- /dev/null
+++ b/www/static/illustration/deno-plush.svg
@@ -0,0 +1,42 @@
+<svg width="248" height="275" viewBox="0 0 248 275" fill="none" xmlns="http://www.w3.org/2000/svg">
+<ellipse cx="117.507" cy="201.768" rx="73.9807" ry="14.6763" fill="#C2D2A7" fill-opacity="0.51"/>
+<path d="M150.936 231.884L153.445 216.599C153.862 214.058 155.564 211.913 157.943 210.928L173.02 204.69C174.742 203.977 176.669 203.936 178.42 204.576L220.544 219.974C225.139 221.653 226.891 227.234 224.08 231.239L206.077 256.887C204.002 259.844 200.103 260.883 196.831 259.352L155.124 239.83C152.107 238.417 150.396 235.172 150.936 231.884Z" fill="#D9B68E" stroke="#A25700" stroke-width="4.46512" stroke-linecap="round"/>
+<circle cx="164.163" cy="218.837" r="2.60465" fill="white" stroke="black" stroke-width="2.23256" stroke-linecap="round"/>
+<path d="M137 198C141.81 208.023 149.296 213.211 162.302 218.465" stroke="#A73F28" stroke-width="4.46512" stroke-linecap="round"/>
+<path d="M180.943 215.648C181.058 215.697 181.161 215.827 181.252 216.039C181.354 216.247 181.381 216.4 181.33 216.497C181.095 216.952 180.757 217.568 180.315 218.345C180.207 218.535 180.077 218.767 179.926 219.039C179.779 219.305 179.613 219.616 179.428 219.974C178.842 221.109 178.484 221.976 178.354 222.576C178.253 222.752 178.108 222.849 177.918 222.868C177.732 222.879 177.565 222.854 177.418 222.79C177.09 222.65 176.927 222.452 176.928 222.198C176.938 221.947 177.043 221.627 177.243 221.239C177.987 219.799 178.688 218.482 179.346 217.287C177.91 217.839 176.761 218.326 175.902 218.751C175.902 218.751 175.805 218.764 175.611 218.791C175.414 218.843 175.27 218.85 175.18 218.811C174.967 218.72 174.816 218.596 174.726 218.439C174.637 218.282 174.575 218.083 174.54 217.84L174.344 216.826C174.204 216.128 174.109 215.605 174.059 215.255C173.704 215.942 173.259 216.89 172.724 218.101C172.431 218.805 172.195 219.328 172.018 219.671C171.925 219.85 171.797 219.982 171.633 220.067C171.473 220.144 171.287 220.137 171.073 220.046C170.86 219.955 170.703 219.842 170.603 219.708C170.51 219.577 170.498 219.435 170.567 219.282C170.641 219.159 170.753 218.952 170.903 218.661C171.204 218.079 171.55 217.361 171.941 216.508L172.228 215.893L172.609 215.099C172.72 214.864 172.851 214.592 173 214.283C173.154 213.966 173.325 213.624 173.514 213.259C173.746 212.811 174.128 212.701 174.66 212.929C174.824 213 174.969 213.107 175.094 213.252C175.228 213.4 175.299 213.563 175.308 213.74C175.238 214.029 175.257 214.565 175.362 215.349C175.468 216.132 175.585 216.875 175.713 217.577C176.289 217.313 176.746 217.126 177.084 217.015C177.666 216.818 178.165 216.617 178.581 216.413C179.005 216.212 179.483 215.956 180.013 215.646C180.133 215.588 180.279 215.559 180.449 215.559C180.623 215.551 180.788 215.581 180.943 215.648Z" fill="#5A3911"/>
+<path d="M185.497 225.581C185.412 225.745 185.243 225.841 184.988 225.868C184.742 225.9 184.537 225.88 184.373 225.81C184.061 225.677 183.829 225.536 183.675 225.388C183.533 225.236 183.434 225.03 183.379 224.769C183.077 224.85 182.719 224.856 182.304 224.787C181.892 224.711 181.531 224.607 181.22 224.473C180.712 224.256 180.357 223.954 180.157 223.567C179.96 223.173 179.987 222.733 180.237 222.248C180.345 222.039 180.505 221.875 180.717 221.756C180.932 221.63 181.181 221.545 181.464 221.502C181.775 221.462 182.101 221.47 182.443 221.525C182.788 221.573 183.125 221.667 183.453 221.807C183.625 221.881 183.815 221.999 184.021 222.16C184.228 222.322 184.38 222.464 184.476 222.587L184.569 222.408C184.777 222.005 184.813 221.684 184.677 221.443C184.545 221.195 184.241 220.969 183.766 220.766C183.627 220.706 183.474 220.673 183.308 220.665C183.149 220.661 182.961 220.667 182.743 220.683C182.455 220.697 182.209 220.66 182.004 220.572C181.931 220.54 181.884 220.466 181.865 220.348C181.849 220.223 181.861 220.123 181.9 220.049C182.011 219.832 182.218 219.693 182.521 219.631C182.831 219.573 183.161 219.573 183.511 219.632C183.865 219.683 184.165 219.761 184.411 219.867C184.657 219.972 184.916 220.138 185.19 220.364C185.467 220.583 185.67 220.811 185.797 221.048C185.943 221.347 186.014 221.656 186.01 221.973C186.018 222.286 185.943 222.596 185.785 222.902C185.735 222.999 185.652 223.141 185.535 223.328C185.411 223.53 185.31 223.705 185.233 223.855C185.198 223.922 185.138 224.019 185.052 224.146C184.951 224.303 184.875 224.43 184.825 224.527C184.779 224.617 184.775 224.711 184.814 224.81C184.857 224.901 184.928 224.968 185.026 225.01L185.376 225.146C185.466 225.185 185.521 225.245 185.539 225.325C185.557 225.406 185.543 225.491 185.497 225.581ZM181.689 223.594C182.041 223.745 182.354 223.838 182.626 223.873C182.898 223.907 183.249 223.907 183.678 223.872C183.776 223.759 183.883 223.6 183.999 223.395C183.649 223.008 183.326 222.751 183.031 222.624C182.695 222.481 182.367 222.408 182.047 222.408C181.727 222.408 181.493 222.549 181.347 222.833C181.273 222.974 181.277 223.122 181.358 223.275C181.439 223.428 181.55 223.535 181.689 223.594Z" fill="#5A3911"/>
+<path d="M194.563 221.562C194.524 221.637 194.397 221.833 194.183 222.152C193.669 222.934 193.194 223.746 192.758 224.59C192.376 225.328 192.098 225.897 191.922 226.295C191.746 226.694 191.653 227.019 191.643 227.27C191.638 227.513 191.737 227.679 191.942 227.767C192.336 227.935 192.471 228.139 192.347 228.378C192.266 228.534 192.111 228.632 191.881 228.67C191.655 228.701 191.439 228.672 191.234 228.585C190.988 228.479 190.786 228.329 190.627 228.133C190.468 227.937 190.383 227.705 190.371 227.436C190.08 227.593 189.733 227.673 189.332 227.674C188.943 227.672 188.597 227.606 188.294 227.476C187.827 227.276 187.459 227.009 187.191 226.675C186.923 226.342 186.77 225.98 186.731 225.59C186.696 225.192 186.775 224.807 186.968 224.434C187.153 224.075 187.375 223.752 187.635 223.462C187.907 223.168 188.181 222.948 188.457 222.802C188.824 222.613 189.235 222.516 189.689 222.51C190.155 222.499 190.568 222.572 190.928 222.726C191.15 222.821 191.337 222.951 191.492 223.118C191.65 223.277 191.774 223.444 191.863 223.619C192.122 223.119 192.28 222.804 192.337 222.673L192.458 222.438C192.817 221.744 193.128 221.258 193.392 220.979C193.645 220.704 193.943 220.641 194.287 220.788C194.475 220.869 194.595 220.966 194.647 221.079C194.699 221.192 194.671 221.353 194.563 221.562ZM188.197 224.933C188.019 225.276 187.983 225.597 188.088 225.898C188.202 226.201 188.41 226.418 188.713 226.548C189.148 226.734 189.531 226.748 189.863 226.589C190.203 226.434 190.474 226.163 190.674 225.775L191.234 224.662C191.081 224.204 190.832 223.901 190.487 223.754C190.25 223.652 189.995 223.611 189.724 223.632C189.466 223.649 189.219 223.739 188.984 223.903C188.717 224.089 188.455 224.433 188.197 224.933Z" fill="#5A3911"/>
+<path d="M194.022 226.757C194.257 226.302 194.562 225.973 194.938 225.769C195.317 225.558 195.773 225.402 196.305 225.302C196.458 225.277 196.684 225.296 196.981 225.359C197.282 225.416 197.536 225.487 197.74 225.575C197.986 225.681 198.219 225.84 198.44 226.052C198.672 226.261 198.844 226.462 198.954 226.655C199.153 226.987 199.241 227.311 199.217 227.629C199.196 227.939 199.092 228.277 198.903 228.643C198.822 228.8 198.645 228.91 198.371 228.975C198.109 229.036 197.868 229.02 197.646 228.925L197.185 228.714C196.947 228.612 196.603 228.474 196.153 228.299L195.889 228.2C195.701 228.137 195.562 228.087 195.472 228.048C195.341 227.992 195.168 227.9 194.954 227.772C194.805 228.137 194.806 228.474 194.956 228.784C195.11 229.087 195.334 229.302 195.63 229.428C196.146 229.649 196.555 229.71 196.856 229.612C197.086 229.573 197.237 229.552 197.31 229.546C197.383 229.541 197.481 229.565 197.604 229.617C197.735 229.674 197.821 229.779 197.861 229.933C197.902 230.087 197.893 230.22 197.835 230.332C197.77 230.459 197.616 230.552 197.375 230.613C197.145 230.669 196.85 230.707 196.49 230.726C196.304 230.719 196.064 230.68 195.77 230.609C195.476 230.538 195.239 230.464 195.059 230.387C194.772 230.264 194.491 230.052 194.216 229.752C193.944 229.445 193.771 229.161 193.695 228.9C193.619 228.64 193.605 228.31 193.651 227.911C193.705 227.515 193.829 227.13 194.022 226.757ZM196.624 227.503C197.206 227.752 197.642 227.916 197.932 227.995C198.027 227.771 198.044 227.564 197.982 227.374C197.924 227.176 197.806 226.979 197.626 226.784C197.568 226.722 197.514 226.672 197.464 226.633C197.415 226.593 197.353 226.557 197.279 226.526C196.902 226.364 196.534 226.321 196.176 226.395C195.825 226.473 195.55 226.647 195.351 226.917C195.749 227.114 196.173 227.31 196.624 227.503Z" fill="#5A3911"/>
+<path d="M205.732 226.127C206.007 226.272 206.216 226.448 206.359 226.656C206.515 226.859 206.533 227.076 206.413 227.307C206.324 227.479 206.167 227.58 205.941 227.611C205.719 227.634 205.48 227.591 205.226 227.483C204.989 227.381 204.854 227.255 204.821 227.104C204.789 226.954 204.804 226.819 204.865 226.699C204.977 226.483 205.1 226.312 205.235 226.188C205.373 226.056 205.539 226.035 205.732 226.127ZM203.097 230.644L203.265 230.32C203.458 229.947 203.613 229.598 203.73 229.275C203.859 228.947 203.939 228.745 203.969 228.666C204.02 228.588 204.122 228.536 204.275 228.51C204.428 228.485 204.55 228.492 204.64 228.53C204.796 228.597 204.936 228.693 205.061 228.82C205.198 228.942 205.266 229.053 205.264 229.153C205.163 229.446 205.073 229.668 204.996 229.817C204.826 230.145 204.565 230.69 204.212 231.45L203.999 231.892L203.804 232.328C203.75 232.45 203.685 232.596 203.609 232.763C203.532 232.931 203.44 233.119 203.332 233.328C203.259 233.47 203.119 233.556 202.913 233.586C202.716 233.62 202.535 233.602 202.371 233.532C202.133 233.43 201.99 233.31 201.942 233.17C201.902 233.035 201.936 232.863 202.044 232.654L203.097 230.644Z" fill="#5A3911"/>
+<path d="M206.475 230.41C206.433 230.337 206.403 230.269 206.385 230.207C206.371 230.137 206.397 230.039 206.462 229.912C206.535 229.77 206.645 229.685 206.79 229.656C206.947 229.623 207.099 229.638 207.247 229.701C207.534 229.824 207.745 229.996 207.88 230.219C208.024 230.444 208.083 230.697 208.058 230.978C208.397 230.75 208.734 230.639 209.071 230.646C209.411 230.646 209.827 230.752 210.319 230.962C210.515 231.046 210.687 231.188 210.834 231.388C210.993 231.584 211.119 231.797 211.21 232.027C211.264 232.251 211.277 232.507 211.248 232.795C211.223 233.076 211.161 233.314 211.06 233.508C211.002 233.62 210.9 233.799 210.752 234.046C210.597 234.307 210.479 234.516 210.398 234.673C210.128 235.195 210.073 235.564 210.233 235.778C210.258 235.807 210.31 235.852 210.388 235.913C210.467 235.974 210.521 236.024 210.55 236.064C210.588 236.108 210.595 236.152 210.572 236.197C210.488 236.379 210.337 236.497 210.119 236.549C209.914 236.598 209.705 236.577 209.492 236.486C209.172 236.349 208.962 236.163 208.863 235.929C208.764 235.696 208.76 235.402 208.852 235.05C208.873 234.913 208.943 234.729 209.062 234.498C209.128 234.371 209.242 234.169 209.405 233.892C209.545 233.679 209.681 233.446 209.812 233.192C209.947 232.931 209.983 232.668 209.919 232.404C209.859 232.132 209.686 231.935 209.399 231.812C209.227 231.738 209.022 231.71 208.783 231.726C208.548 231.735 208.359 231.791 208.216 231.893C207.974 232.072 207.77 232.272 207.606 232.493C207.268 232.914 206.99 233.336 206.77 233.762C206.716 233.866 206.62 234.071 206.482 234.377C206.471 234.399 206.442 234.455 206.396 234.545C206.353 234.627 206.3 234.7 206.237 234.764C206.182 234.831 206.115 234.885 206.035 234.923C205.987 234.939 205.91 234.943 205.804 234.934C205.699 234.925 205.613 234.907 205.547 234.879C205.433 234.829 205.312 234.723 205.186 234.56C205.061 234.397 205.01 234.252 205.035 234.126L205.104 233.964C205.135 233.904 205.189 233.818 205.267 233.706C205.636 233.226 205.92 232.792 206.12 232.404C206.209 232.232 206.273 232.1 206.311 232.007L206.564 231.487C206.645 231.33 206.673 231.16 206.648 230.976C206.627 230.784 206.569 230.596 206.475 230.41Z" fill="#5A3911"/>
+<path d="M171.132 235.54C171.049 235.641 170.926 235.707 170.76 235.736C170.607 235.762 170.424 235.729 170.211 235.638C170.03 235.56 169.91 235.454 169.85 235.319C169.798 235.187 169.793 235.071 169.835 234.971C170.046 234.678 170.313 234.219 170.637 233.592C170.83 233.219 171.102 232.634 171.454 231.837C171.774 231.081 172.081 230.42 172.374 229.852C172.532 229.547 172.71 229.24 172.909 228.933C172.963 228.829 173.086 228.745 173.279 228.682C173.48 228.622 173.707 228.628 173.96 228.7C174.778 228.959 175.752 229.331 176.883 229.815L177.276 229.984C177.571 230.11 177.833 230.281 178.062 230.498C178.298 230.717 178.355 230.947 178.232 231.186C178.151 231.342 178.046 231.448 177.918 231.502C177.79 231.557 177.615 231.536 177.394 231.442C177.287 231.396 177.168 231.336 177.036 231.261C176.905 231.187 176.812 231.133 176.759 231.101C176.47 230.923 176.24 230.797 176.068 230.724C175.117 230.316 174.369 230.069 173.824 229.981C173.697 230.228 173.499 230.63 173.23 231.189L172.872 231.911C173.298 232.094 173.687 232.242 174.038 232.356C174.394 232.463 174.598 232.523 174.651 232.536C175.1 232.674 175.395 232.773 175.534 232.832C175.731 232.917 175.873 233.028 175.962 233.166C176.063 233.3 176.071 233.45 175.986 233.614C175.793 233.987 175.41 234.051 174.836 233.805C174.697 233.745 174.572 233.696 174.462 233.658C174.351 233.62 174.257 233.589 174.18 233.565C173.869 233.468 173.628 233.383 173.456 233.309C173.079 233.148 172.753 233.022 172.479 232.932C172.337 233.208 172.199 233.504 172.065 233.821C172.015 233.918 171.942 234.069 171.846 234.274C171.758 234.482 171.672 234.669 171.587 234.833C171.514 234.975 171.443 235.103 171.373 235.219C171.303 235.335 171.223 235.442 171.132 235.54Z" fill="#5A3911"/>
+<path d="M177.547 238.233C177.481 238.359 177.37 238.449 177.213 238.5C177.057 238.551 176.901 238.544 176.745 238.477C176.499 238.372 176.34 238.253 176.267 238.122C176.199 237.983 176.225 237.798 176.344 237.567C176.487 237.291 176.666 236.926 176.88 236.471C177.057 236.091 177.211 235.774 177.342 235.52C177.403 235.401 177.493 235.248 177.609 235.061C177.718 234.889 177.796 234.758 177.842 234.668C177.891 234.516 177.889 234.374 177.837 234.242C177.789 234.103 177.687 234 177.531 233.934C177.457 233.902 177.411 233.846 177.393 233.765C177.378 233.677 177.388 233.599 177.423 233.532C177.512 233.36 177.653 233.261 177.847 233.235C178.049 233.212 178.256 233.246 178.469 233.338C178.912 233.527 179.096 233.898 179.021 234.449C179.35 234.316 179.684 234.241 180.024 234.222C180.376 234.2 180.679 234.243 180.933 234.352C181.236 234.482 181.473 234.674 181.641 234.929C181.818 235.187 181.841 235.442 181.71 235.696C181.637 235.838 181.492 235.954 181.276 236.043C181.067 236.136 180.894 236.153 180.754 236.093C180.68 236.062 180.623 236.019 180.581 235.964C180.551 235.906 180.516 235.827 180.477 235.729C180.434 235.619 180.391 235.537 180.349 235.482C180.311 235.421 180.255 235.374 180.181 235.342C180.05 235.286 179.918 235.252 179.784 235.24C179.65 235.228 179.549 235.24 179.481 235.274C179.253 235.405 179.068 235.531 178.925 235.652C178.791 235.776 178.679 235.925 178.591 236.096C178.525 236.223 178.469 236.322 178.422 236.393L178.08 237.026C178.03 237.123 177.978 237.233 177.925 237.356C177.871 237.479 177.833 237.572 177.811 237.635C177.731 237.847 177.643 238.046 177.547 238.233Z" fill="#5A3911"/>
+<path d="M181.51 237.579C181.656 237.295 181.86 237.036 182.122 236.802C182.387 236.56 182.675 236.36 182.987 236.202C183.299 236.044 183.698 235.978 184.185 236.004C184.676 236.023 185.081 236.101 185.401 236.238C185.729 236.378 186.039 236.562 186.333 236.788C186.635 237.017 186.807 237.246 186.849 237.473C186.952 237.991 186.907 238.437 186.714 238.81C186.61 239.011 186.473 239.162 186.301 239.262C186.137 239.365 185.927 239.462 185.67 239.552C185.462 239.627 185.194 239.621 184.868 239.536C184.55 239.455 184.243 239.351 183.948 239.224C183.759 239.144 183.538 239.03 183.283 238.885C183.031 238.732 182.792 238.575 182.565 238.413C182.504 238.57 182.47 238.733 182.463 238.903C182.455 239.072 182.477 239.214 182.528 239.327C182.619 239.539 182.741 239.701 182.894 239.812C183.055 239.926 183.275 240.043 183.553 240.163C183.848 240.289 184.146 240.362 184.446 240.381C184.686 240.402 184.871 240.44 185.002 240.496C185.158 240.563 185.254 240.659 185.289 240.783C185.329 240.9 185.314 241.026 185.245 241.16C185.148 241.347 184.95 241.449 184.651 241.467C184.352 241.484 184.031 241.456 183.689 241.382C183.358 241.305 183.099 241.226 182.91 241.145C182.525 240.98 182.185 240.757 181.89 240.475C181.595 240.194 181.388 239.887 181.27 239.554C181.181 239.261 181.155 238.944 181.19 238.604C181.23 238.256 181.336 237.915 181.51 237.579ZM184.971 237.216C184.79 237.138 184.593 237.095 184.378 237.085C184.167 237.067 183.975 237.09 183.802 237.153C183.581 237.231 183.419 237.303 183.316 237.368C183.224 237.429 183.131 237.531 183.038 237.673C183.212 237.82 183.623 238.033 184.27 238.31C184.623 238.461 184.918 238.528 185.157 238.512C185.404 238.499 185.568 238.414 185.648 238.258C185.729 238.101 185.696 237.914 185.549 237.696C185.401 237.477 185.208 237.317 184.971 237.216Z" fill="#5A3911"/>
+<path d="M190.933 241.56C190.979 241.625 191.069 241.75 191.204 241.935C191.35 242.117 191.422 242.289 191.418 242.451C191.414 242.613 191.35 242.814 191.227 243.053C191.088 243.321 190.879 243.523 190.599 243.658C190.323 243.786 190.02 243.848 189.692 243.844C189.465 243.838 189.237 243.795 189.008 243.715C188.787 243.639 188.525 243.536 188.222 243.406C188.058 243.336 187.856 243.222 187.617 243.065C187.386 242.911 187.231 242.795 187.152 242.715C186.959 242.469 186.819 242.217 186.731 241.961C186.643 241.705 186.648 241.483 186.744 241.297C186.821 241.148 186.936 241.051 187.089 241.007C187.242 240.963 187.404 240.978 187.576 241.052C187.667 241.09 187.741 241.15 187.8 241.23C187.871 241.305 187.909 241.377 187.915 241.443C187.905 241.675 187.981 241.886 188.144 242.074C188.307 242.262 188.499 242.404 188.721 242.499C189.499 242.832 189.954 242.872 190.085 242.618C190.12 242.551 190.126 242.49 190.105 242.435C190.095 242.376 190.069 242.311 190.027 242.238C189.955 242.125 189.84 241.989 189.682 241.83C189.532 241.675 189.393 241.547 189.264 241.447C188.963 241.236 188.687 240.994 188.437 240.723C188.211 240.463 188.06 240.184 187.983 239.886C187.911 239.582 187.957 239.269 188.123 238.948C188.223 238.754 188.399 238.597 188.651 238.478C188.916 238.354 189.179 238.289 189.442 238.283C189.617 238.294 189.888 238.342 190.255 238.426C190.621 238.51 190.866 238.579 190.989 238.631C191.178 238.712 191.373 238.818 191.575 238.951C191.781 239.075 191.922 239.199 191.998 239.323C192.158 239.537 192.272 239.741 192.342 239.935C192.416 240.122 192.411 240.297 192.326 240.461C192.283 240.543 192.217 240.624 192.126 240.704C192.038 240.776 191.96 240.811 191.891 240.808C191.741 240.808 191.584 240.773 191.421 240.702C191.347 240.671 191.295 240.626 191.265 240.567C191.243 240.513 191.217 240.428 191.185 240.315C191.161 240.149 191.113 240.038 191.043 239.98C190.956 239.916 190.826 239.828 190.653 239.718C190.484 239.6 190.367 239.527 190.301 239.498C190.096 239.411 189.88 239.364 189.653 239.358C189.434 239.355 189.292 239.417 189.226 239.544C189.149 239.693 189.219 239.878 189.435 240.098C189.569 240.247 189.725 240.391 189.903 240.531C190.089 240.674 190.203 240.764 190.244 240.8C190.347 240.872 190.468 240.987 190.606 241.146C190.752 241.309 190.861 241.447 190.933 241.56Z" fill="#5A3911"/>
+<path d="M196.87 238.389C196.77 238.583 196.648 238.808 196.505 239.066C196.366 239.316 196.257 239.507 196.179 239.638C195.958 240.008 195.749 240.383 195.553 240.763C195.294 241.263 195.098 241.672 194.965 241.988C195.373 241.643 195.805 241.437 196.261 241.368C196.721 241.291 197.173 241.348 197.615 241.537C197.918 241.667 198.138 241.911 198.273 242.27C198.408 242.629 198.427 242.988 198.331 243.348C198.32 243.389 198.295 243.446 198.257 243.521C198.211 243.61 198.129 243.749 198.013 243.936C197.907 244.082 197.814 244.233 197.733 244.39C197.525 244.793 197.379 245.113 197.296 245.351C197.217 245.582 197.194 245.791 197.228 245.978C197.265 246.158 197.377 246.338 197.564 246.518C197.639 246.587 197.679 246.654 197.685 246.72C197.703 246.783 197.686 246.862 197.636 246.959C197.567 247.094 197.437 247.161 197.247 247.162C197.064 247.166 196.903 247.138 196.764 247.078C196.477 246.955 196.256 246.774 196.1 246.534C195.943 246.294 195.868 246.033 195.872 245.753C195.871 245.561 195.914 245.352 196.002 245.125C196.089 244.898 196.208 244.639 196.358 244.348L196.874 243.379C197.147 242.85 197.096 242.504 196.719 242.343C196.448 242.227 196.082 242.316 195.62 242.61C195.157 242.904 194.708 243.29 194.27 243.768C193.833 244.246 193.524 244.661 193.343 245.011C193.258 245.175 193.137 245.274 192.98 245.307C192.835 245.336 192.705 245.326 192.59 245.277C192.41 245.199 192.271 245.081 192.173 244.921C192.08 244.753 192.066 244.606 192.131 244.479C192.478 243.944 192.991 243.02 193.669 241.706C193.792 241.468 194.229 240.575 194.978 239.027L195.473 237.982C195.558 237.818 195.714 237.711 195.939 237.662C196.169 237.605 196.386 237.621 196.591 237.709C196.771 237.786 196.883 237.879 196.926 237.989C196.97 238.099 196.951 238.232 196.87 238.389Z" fill="#5A3911"/>
+<path d="M114.851 38.3068C132.223 52.8617 144.803 114.684 151.392 158.413C166.668 179.08 196.619 170.693 197.817 169.795C199.015 168.896 211.895 158.413 208.3 177.283C204.706 196.152 175.653 201.843 151.392 197.051C151.392 201.244 137.015 219.814 118.146 221.911C103.05 223.588 92.2875 213.424 88.7931 208.133L77.711 202.742C75.1152 204.139 60.0395 208.372 43.2666 208.133C22.3004 207.833 23.1989 184.471 29.4888 173.389C34.5207 164.523 49.7561 163.505 56.7448 164.104L62.7352 150.027C60.7384 150.226 48.2984 149.008 45.6627 148.529C42.368 147.93 33.9768 136.454 37.5757 120.674C41.4695 103.601 74.1168 100.307 77.711 98.8092C81.3052 97.3116 82.8028 83.2343 82.5033 70.0556C66.9284 68.2585 50.9042 60.471 54.9477 41.6014C60.339 16.442 92.6868 19.7368 114.851 38.3068Z" fill="#B1F491" stroke="black" stroke-width="3.5942" stroke-linecap="round"/>
+<path d="M81.0057 70.0556C84.5999 70.4549 92.3874 70.7145 94.7835 68.558" stroke="#3E7B28" stroke-opacity="0.55" stroke-width="3.5942" stroke-linecap="round"/>
+<path d="M68.7255 193.157C71.1217 199.746 79.2086 203.341 79.2086 203.341" stroke="#3E7B28" stroke-opacity="0.55" stroke-width="3.5942" stroke-linecap="round"/>
+<path d="M149.595 182.973C150.494 185.669 151.692 197.051 149.595 200.944" stroke="#3E7B28" stroke-opacity="0.55" stroke-width="3.5942" stroke-linecap="round"/>
+<circle cx="90.8898" cy="40.8044" r="2.99517" fill="black"/>
+<circle cx="71.1216" cy="34.814" r="2.99517" fill="black"/>
+<path d="M41.4695 114.684C46.2618 117.479 55.9661 124.867 56.4453 132.056C57.0444 141.041 51.6531 147.031 47.4598 148.529" stroke="#3E7B28" stroke-opacity="0.55" stroke-width="3.5942" stroke-linecap="round"/>
+<path d="M32.4839 169.196C37.0765 170.394 44.7641 175.785 46.2617 184.172C47.7593 192.558 49.8559 204.239 41.1699 208.133" stroke="#3E7B28" stroke-opacity="0.55" stroke-width="3.5942" stroke-linecap="round"/>
+<path d="M46.8608 123.669L52.8511 118.278" stroke="#3E7B28" stroke-opacity="0.55" stroke-width="3.5942" stroke-linecap="round"/>
+<path d="M51.3535 136.249L60.0395 138.345" stroke="#3E7B28" stroke-opacity="0.55" stroke-width="3.5942" stroke-linecap="round"/>
+<path d="M39.3729 178.181L45.9622 174.587" stroke="#3E7B28" stroke-opacity="0.55" stroke-width="3.5942" stroke-linecap="round"/>
+<path d="M44.1651 194.655L51.9525 196.751" stroke="#3E7B28" stroke-opacity="0.55" stroke-width="3.5942" stroke-linecap="round"/>
+<path d="M81.5103 135.92C76.6824 134.134 74.2685 139.848 70.1303 140.205C37.567 138.885 20.0417 183.377 43.5766 209.135C45.4278 211.161 45.9906 220.207 50.8185 221.635C55.6464 223.064 60.1775 216.369 63.9229 216.992C95.3045 222.211 115.651 166.634 85.9934 146.277C82.8975 144.152 86.3383 137.705 81.5103 135.92Z" fill="#FDE82B" stroke="black" stroke-width="3.5942"/>
+<path d="M83.2261 147.63C78.4338 138.525 87.8186 129.06 93.1101 125.466L130.25 138.046C130.35 143.138 128.393 154.699 119.767 160.21C108.985 167.099 89.2164 159.012 83.2261 147.63Z" fill="#B1F491"/>
+<path d="M89.6917 209.331C79.8676 195.433 93.7851 183.572 101.972 179.379C108.049 178.655 120.862 180.023 123.498 191.285C126.792 205.362 108.9 223.783 89.6917 209.331Z" fill="#B1F491"/>
+<path d="M101.972 179.379C90.6307 182.148 79.5246 197.984 94.145 214.048" stroke="black" stroke-width="3.5942" stroke-linecap="round"/>
+<path d="M93.1101 125.466C87.8186 129.06 78.4338 138.525 83.2261 147.63C89.2164 159.012 108.985 167.099 119.767 160.21C128.393 154.699 130.35 143.138 130.25 138.046" stroke="black" stroke-width="3.5942" stroke-linecap="round"/>
+<path d="M82.8028 140.442C86.6965 138.545 96.7004 135.889 105.566 140.442C116.648 146.133 122.339 154.519 122.938 157.215" stroke="#3E7B28" stroke-opacity="0.55" stroke-width="3.5942" stroke-linecap="round"/>
+<path d="M93.8849 142.239L96.5806 133.853" stroke="#3E7B28" stroke-opacity="0.55" stroke-width="3.5942" stroke-linecap="round"/>
+<path d="M114.851 151.824L120.242 145.833" stroke="#3E7B28" stroke-opacity="0.55" stroke-width="3.5942" stroke-linecap="round"/>
+<path d="M93.8849 185.669C109.16 183.872 116.349 191.659 117.846 200.645C119.344 209.63 116.948 221.611 110.658 222.21" stroke="#3E7B28" stroke-opacity="0.55" stroke-width="3.5942" stroke-linecap="round"/>
+<path d="M107.663 191.959L112.455 185.37" stroke="#3E7B28" stroke-opacity="0.55" stroke-width="3.5942" stroke-linecap="round"/>
+<path d="M114.252 203.94L122.938 200.345" stroke="#3E7B28" stroke-opacity="0.55" stroke-width="3.5942" stroke-linecap="round"/>
+<ellipse cx="69.5845" cy="202.667" rx="3.29469" ry="2.99517" fill="#ED9C24"/>
+<ellipse cx="78.5701" cy="193.082" rx="3.29469" ry="2.99517" fill="#ED9C24"/>
+</svg>
diff --git a/www/static/showcase/chat1x.jpg b/www/static/showcase/chat1x.jpg
new file mode 100644
index 00000000000..13e9d07b974
Binary files /dev/null and b/www/static/showcase/chat1x.jpg differ
diff --git a/www/static/showcase/chat2x.jpg b/www/static/showcase/chat2x.jpg
new file mode 100644
index 00000000000..e06bb4da0bb
Binary files /dev/null and b/www/static/showcase/chat2x.jpg differ
diff --git a/www/static/showcase/fresh1x.jpg b/www/static/showcase/fresh1x.jpg
new file mode 100644
index 00000000000..5db3fcacb63
Binary files /dev/null and b/www/static/showcase/fresh1x.jpg differ
diff --git a/www/static/showcase/fresh2x.jpg b/www/static/showcase/fresh2x.jpg
new file mode 100644
index 00000000000..a9155357c10
Binary files /dev/null and b/www/static/showcase/fresh2x.jpg differ
diff --git a/www/static/showcase/merch1x.jpg b/www/static/showcase/merch1x.jpg
new file mode 100644
index 00000000000..fc539bf50d2
Binary files /dev/null and b/www/static/showcase/merch1x.jpg differ
diff --git a/www/static/showcase/merch2x.jpg b/www/static/showcase/merch2x.jpg
new file mode 100644
index 00000000000..0b76813b024
Binary files /dev/null and b/www/static/showcase/merch2x.jpg differ
diff --git a/www/twind.config.ts b/www/twind.config.ts
new file mode 100644
index 00000000000..1cb89063e82
--- /dev/null
+++ b/www/twind.config.ts
@@ -0,0 +1,17 @@
+import { Options } from "$fresh/plugins/twind.ts";
+import * as colors from "twind/colors";
+
+export default {
+  selfURL: import.meta.url,
+  theme: {
+    colors: {
+      blue: colors.blue,
+      black: colors.black,
+      gray: colors.gray,
+      green: colors.green,
+      white: colors.white,
+      yellow: colors.yellow,
+      transparent: "transparent",
+    },
+  },
+} as Options;
diff --git a/www/utils/markdown.ts b/www/utils/markdown.ts
index 769d9e435d4..b880e64b112 100644
--- a/www/utils/markdown.ts
+++ b/www/utils/markdown.ts
@@ -1,6 +1,7 @@
-export * as gfm from "https://deno.land/x/gfm@0.1.19/mod.ts";
+export * as gfm from "https://deno.land/x/gfm@0.1.23/mod.ts";
 import "https://esm.sh/prismjs@1.27.0/components/prism-jsx.js?no-check";
 import "https://esm.sh/prismjs@1.27.0/components/prism-typescript.js?no-check";
 import "https://esm.sh/prismjs@1.27.0/components/prism-tsx.js?no-check";
+import "https://esm.sh/prismjs@1.27.0/components/prism-diff.js?no-check";
 
-export { parse as frontMatter } from "https://deno.land/x/frontmatter@v0.1.4/mod.ts";
+export { extract as frontMatter } from "$std/encoding/front_matter.ts";
diff --git a/www/utils/screenshot.ts b/www/utils/screenshot.ts
new file mode 100644
index 00000000000..d6147977023
--- /dev/null
+++ b/www/utils/screenshot.ts
@@ -0,0 +1,18 @@
+import puppeteer from "https://deno.land/x/puppeteer@16.2.0/mod.ts";
+
+const url = Deno.args[0];
+const id = Deno.args[1];
+
+if (!url || !id) {
+  console.log("Usage: screenshot <url> <id>");
+  Deno.exit(1);
+}
+
+const browser = await puppeteer.launch({
+  defaultViewport: { width: 1200, height: 675 },
+});
+const page = await browser.newPage();
+await page.goto(url, { waitUntil: "networkidle2" });
+await page.screenshot({ path: `./www/static/showcase/${id}.png` });
+
+await browser.close();
diff --git a/www/utils/twind.ts b/www/utils/twind.ts
deleted file mode 100644
index 73652504e98..00000000000
--- a/www/utils/twind.ts
+++ /dev/null
@@ -1,21 +0,0 @@
-export * from "twind";
-
-import { IS_BROWSER } from "$fresh/runtime.ts";
-import * as colors from "twind/colors";
-import { setup } from "twind";
-
-export const theme = {
-  colors: {
-    blue: colors.blue,
-    black: colors.black,
-    gray: colors.gray,
-    green: colors.green,
-    white: colors.white,
-    yellow: colors.yellow,
-    transparent: "transparent",
-  },
-};
-
-if (IS_BROWSER) {
-  setup({ theme: { colors } });
-}
