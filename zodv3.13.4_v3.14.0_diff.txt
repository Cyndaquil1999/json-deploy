diff --git a/ERROR_HANDLING.md b/ERROR_HANDLING.md
index 7d817bf45..20a717058 100644
--- a/ERROR_HANDLING.md
+++ b/ERROR_HANDLING.md
@@ -51,7 +51,7 @@ _Every_ ZodIssue has these fields:
 | ZodIssueCode.invalid_date        | _no additional properties_                                                                                                                                                                                                                                                                                                                                           |
 | ZodIssueCode.invalid_string      | `validation: "url" \| "email" \| "uuid"`<br> Which built-in string validator failed                                                                                                                                                                                                                                                                                  |
 | ZodIssueCode.too_small           | `type: "string" \| "number" \| "array"` <br>The type of the data failing validation<br><br> `minimum: number` <br>The expected length/value.<br><br>`inclusive: boolean`<br>Whether the minimum is included in the range of acceptable values.<br>                                                                                                                   |
-| ZodIssueCode.too_big             | `type: "string" \| "number" \| "array"` <br>The type of the data failing validation<br><br> `maximum: number` <br>The expected length/value.<br><br>`inclusive: boolean`<br>Whether the minimum is included in the range of acceptable values.<br>                                                                                                                   |
+| ZodIssueCode.too_big             | `type: "string" \| "number" \| "array"` <br>The type of the data failing validation<br><br> `maximum: number` <br>The expected length/value.<br><br>`inclusive: boolean`<br>Whether the maximum is included in the range of acceptable values.<br>                                                                                                                          |
 | ZodIssueCode.not_multiple_of     | `multipleOf: number` <br>The value the number should be a multiple of.<br>                                                                                                                                                                                                                                                                                           |
 | ZodIssueCode.custom              | `params: { [k: string]: any }` <br> This is the error code throw by refinements (unless you are using `superRefine` in which case it's possible to throw issues of any `code`). You are able to pass in a `params` object here that is available in your custom error maps (see [ZodErrorMap](#Customizing-errors-with-ZodErrorMap) below for details on error maps) |
 
diff --git a/README.md b/README.md
index a92ca0c54..9b8d99596 100644
--- a/README.md
+++ b/README.md
@@ -30,9 +30,9 @@ These docs have been translated into [Chinese](./README_ZH.md).
 
 # Table of contents
 
-The full documentation is available both on the [official documentation site](https://zod.js.org/) (recommended) and in `README.md`.
+<!-- The full documentation is available both on the [official documentation site](https://zod.js.org/) (recommended) and in `README.md`.
 
-### Go to [zod.js.org](https://zod.js.org) >>
+### Go to [zod.js.org](https://zod.js.org) >> -->
 
 - [What is Zod](#what-is-zod)
 - [Installation](#installation)
@@ -114,7 +114,7 @@ Zod is designed to be as developer-friendly as possible. The goal is to eliminat
 Some other great aspects:
 
 - Zero dependencies
-- Works in Node.js and browsers (including IE 11)
+- Works in Node.js and all modern browsers
 - Tiny: 8kb minified + zipped
 - Immutable: methods (i.e. `.optional()`) return a new instance
 - Concise, chainable interface
@@ -246,6 +246,7 @@ There are a growing number of tools that are built atop or support Zod natively!
 
 - [`react-hook-form`](https://github.com/react-hook-form/resolvers#zod): A first-party Zod resolver for React Hook Form
 - [`zod-formik-adapter`](https://github.com/robertLichtnow/zod-formik-adapter): A community-maintained Formik adapter for Zod
+- [`react-zorm`](https://github.com/esamattis/react-zorm): Standalone `<form>` generation and validation for React using Zod
 
 # Basic usage
 
diff --git a/coverage.svg b/coverage.svg
index 62a1c3a91..66a0c9f15 100644
--- a/coverage.svg
+++ b/coverage.svg
@@ -1 +1,5 @@
-<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="116" height="20" role="img" aria-label="Coverage: 96.17%"><title>Coverage: 96.17%</title><linearGradient id="s" x2="0" y2="100%"><stop offset="0" stop-color="#bbb" stop-opacity=".1"/><stop offset="1" stop-opacity=".1"/></linearGradient><clipPath id="r"><rect width="116" height="20" rx="3" fill="#fff"/></clipPath><g clip-path="url(#r)"><rect width="63" height="20" fill="#555"/><rect x="63" width="53" height="20" fill="#4c1"/><rect width="116" height="20" fill="url(#s)"/></g><g fill="#fff" text-anchor="middle" font-family="Verdana,Geneva,DejaVu Sans,sans-serif" text-rendering="geometricPrecision" font-size="110"><text aria-hidden="true" x="325" y="150" fill="#010101" fill-opacity=".3" transform="scale(.1)" textLength="530">Coverage</text><text x="325" y="140" transform="scale(.1)" fill="#fff" textLength="530">Coverage</text><text aria-hidden="true" x="885" y="150" fill="#010101" fill-opacity=".3" transform="scale(.1)" textLength="430">96.17%</text><text x="885" y="140" transform="scale(.1)" fill="#fff" textLength="430">96.17%</text></g></svg>
\ No newline at end of file
+<<<<<<< HEAD
+<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="116" height="20" role="img" aria-label="Coverage: 96.16%"><title>Coverage: 96.16%</title><linearGradient id="s" x2="0" y2="100%"><stop offset="0" stop-color="#bbb" stop-opacity=".1"/><stop offset="1" stop-opacity=".1"/></linearGradient><clipPath id="r"><rect width="116" height="20" rx="3" fill="#fff"/></clipPath><g clip-path="url(#r)"><rect width="63" height="20" fill="#555"/><rect x="63" width="53" height="20" fill="#4c1"/><rect width="116" height="20" fill="url(#s)"/></g><g fill="#fff" text-anchor="middle" font-family="Verdana,Geneva,DejaVu Sans,sans-serif" text-rendering="geometricPrecision" font-size="110"><text aria-hidden="true" x="325" y="150" fill="#010101" fill-opacity=".3" transform="scale(.1)" textLength="530">Coverage</text><text x="325" y="140" transform="scale(.1)" fill="#fff" textLength="530">Coverage</text><text aria-hidden="true" x="885" y="150" fill="#010101" fill-opacity=".3" transform="scale(.1)" textLength="430">96.16%</text><text x="885" y="140" transform="scale(.1)" fill="#fff" textLength="430">96.16%</text></g></svg>
+=======
+<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="110" height="20" role="img" aria-label="Coverage: 96.1%"><title>Coverage: 96.1%</title><linearGradient id="s" x2="0" y2="100%"><stop offset="0" stop-color="#bbb" stop-opacity=".1"/><stop offset="1" stop-opacity=".1"/></linearGradient><clipPath id="r"><rect width="110" height="20" rx="3" fill="#fff"/></clipPath><g clip-path="url(#r)"><rect width="63" height="20" fill="#555"/><rect x="63" width="47" height="20" fill="#4c1"/><rect width="110" height="20" fill="url(#s)"/></g><g fill="#fff" text-anchor="middle" font-family="Verdana,Geneva,DejaVu Sans,sans-serif" text-rendering="geometricPrecision" font-size="110"><text aria-hidden="true" x="325" y="150" fill="#010101" fill-opacity=".3" transform="scale(.1)" textLength="530">Coverage</text><text x="325" y="140" transform="scale(.1)" fill="#fff" textLength="530">Coverage</text><text aria-hidden="true" x="855" y="150" fill="#010101" fill-opacity=".3" transform="scale(.1)" textLength="370">96.1%</text><text x="855" y="140" transform="scale(.1)" fill="#fff" textLength="370">96.1%</text></g></svg>
+>>>>>>> 3b6802c (Fast unions)
diff --git a/deno/lib/__tests__/firstparty.test.ts b/deno/lib/__tests__/firstparty.test.ts
index 20302bb20..085f4962c 100644
--- a/deno/lib/__tests__/firstparty.test.ts
+++ b/deno/lib/__tests__/firstparty.test.ts
@@ -39,6 +39,8 @@ test("first party switch", () => {
       break;
     case z.ZodFirstPartyTypeKind.ZodUnion:
       break;
+    case z.ZodFirstPartyTypeKind.ZodDiscriminatedUnion:
+      break;
     case z.ZodFirstPartyTypeKind.ZodIntersection:
       break;
     case z.ZodFirstPartyTypeKind.ZodTuple:
diff --git a/deno/lib/benchmarks/index.ts b/deno/lib/benchmarks/index.ts
index 9f67e0cac..b700b023c 100644
--- a/deno/lib/benchmarks/index.ts
+++ b/deno/lib/benchmarks/index.ts
@@ -1,9 +1,11 @@
 import discriminatedUnionBenchmarks from "./discriminatedUnion.ts";
 import objectBenchmarks from "./object.ts";
+import realworld from "./realworld.ts";
 import stringBenchmarks from "./string.ts";
 import unionBenchmarks from "./union.ts";
 
 for (const suite of [
+  ...realworld.suites,
   ...stringBenchmarks.suites,
   ...objectBenchmarks.suites,
   ...unionBenchmarks.suites,
diff --git a/deno/lib/benchmarks/realworld.ts b/deno/lib/benchmarks/realworld.ts
new file mode 100644
index 000000000..fa0a51586
--- /dev/null
+++ b/deno/lib/benchmarks/realworld.ts
@@ -0,0 +1,63 @@
+import Benchmark from "benchmark";
+
+import { z } from "../index.ts";
+
+const shortSuite = new Benchmark.Suite("realworld");
+
+const People = z.array(
+  z.object({
+    type: z.literal("person"),
+    hair: z.enum(["blue", "brown"]),
+    active: z.boolean(),
+    name: z.string(),
+    age: z.number().int(),
+    hobbies: z.array(z.string()),
+    address: z.object({
+      street: z.string(),
+      zip: z.string(),
+      country: z.string(),
+    }),
+  })
+);
+
+let i = 0;
+
+function num() {
+  return ++i;
+}
+
+function str() {
+  return (++i % 100).toString(16);
+}
+
+function array<T>(fn: () => T): T[] {
+  return Array.from({ length: ++i % 10 }, () => fn());
+}
+
+const people = Array.from({ length: 100 }, () => {
+  return {
+    type: "person",
+    hair: i % 2 ? "blue" : "brown",
+    active: !!(i % 2),
+    name: str(),
+    age: num(),
+    hobbies: array(str),
+    address: {
+      street: str(),
+      zip: str(),
+      country: str(),
+    },
+  };
+});
+
+shortSuite
+  .add("valid", () => {
+    People.parse(people);
+  })
+  .on("cycle", (e: Benchmark.Event) => {
+    console.log(`${(shortSuite as any).name}: ${e.target}`);
+  });
+
+export default {
+  suites: [shortSuite],
+};
diff --git a/deno/lib/helpers/parseUtil.ts b/deno/lib/helpers/parseUtil.ts
index f4d2d02e5..577ab6c21 100644
--- a/deno/lib/helpers/parseUtil.ts
+++ b/deno/lib/helpers/parseUtil.ts
@@ -32,51 +32,34 @@ export const ZodParsedType = util.arrayToEnum([
 
 export type ZodParsedType = keyof typeof ZodParsedType;
 
-function cacheAndReturn(
-  data: any,
-  parsedType: ZodParsedType,
-  cache?: Map<any, ZodParsedType>
-) {
-  if (cache) cache.set(data, parsedType);
-  return parsedType;
-}
-
-export const getParsedType = (
-  data: any,
-  cache?: Map<any, ZodParsedType>
-): ZodParsedType => {
-  if (cache && cache.has(data)) return cache.get(data)!;
+export const getParsedType = (data: any): ZodParsedType => {
   const t = typeof data;
 
   switch (t) {
     case "undefined":
-      return cacheAndReturn(data, ZodParsedType.undefined, cache);
+      return ZodParsedType.undefined;
 
     case "string":
-      return cacheAndReturn(data, ZodParsedType.string, cache);
+      return ZodParsedType.string;
 
     case "number":
-      return cacheAndReturn(
-        data,
-        isNaN(data) ? ZodParsedType.nan : ZodParsedType.number,
-        cache
-      );
+      return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
 
     case "boolean":
-      return cacheAndReturn(data, ZodParsedType.boolean, cache);
+      return ZodParsedType.boolean;
 
     case "function":
-      return cacheAndReturn(data, ZodParsedType.function, cache);
+      return ZodParsedType.function;
 
     case "bigint":
-      return cacheAndReturn(data, ZodParsedType.bigint, cache);
+      return ZodParsedType.bigint;
 
     case "object":
       if (Array.isArray(data)) {
-        return cacheAndReturn(data, ZodParsedType.array, cache);
+        return ZodParsedType.array;
       }
       if (data === null) {
-        return cacheAndReturn(data, ZodParsedType.null, cache);
+        return ZodParsedType.null;
       }
       if (
         data.then &&
@@ -84,21 +67,21 @@ export const getParsedType = (
         data.catch &&
         typeof data.catch === "function"
       ) {
-        return cacheAndReturn(data, ZodParsedType.promise, cache);
+        return ZodParsedType.promise;
       }
       if (typeof Map !== "undefined" && data instanceof Map) {
-        return cacheAndReturn(data, ZodParsedType.map, cache);
+        return ZodParsedType.map;
       }
       if (typeof Set !== "undefined" && data instanceof Set) {
-        return cacheAndReturn(data, ZodParsedType.set, cache);
+        return ZodParsedType.set;
       }
       if (typeof Date !== "undefined" && data instanceof Date) {
-        return cacheAndReturn(data, ZodParsedType.date, cache);
+        return ZodParsedType.date;
       }
-      return cacheAndReturn(data, ZodParsedType.object, cache);
+      return ZodParsedType.object;
 
     default:
-      return cacheAndReturn(data, ZodParsedType.unknown, cache);
+      return ZodParsedType.unknown;
   }
 };
 
@@ -148,7 +131,6 @@ export interface ParseContext {
   readonly contextualErrorMap?: ZodErrorMap;
   readonly async: boolean;
   readonly parent: ParseContext | null;
-  readonly typeCache: Map<any, ZodParsedType> | undefined;
   readonly data: any;
   readonly parsedType: ZodParsedType;
 }
diff --git a/deno/lib/types.ts b/deno/lib/types.ts
index 39759a8dd..bec55020f 100644
--- a/deno/lib/types.ts
+++ b/deno/lib/types.ts
@@ -2,6 +2,7 @@ import { errorUtil } from "./helpers/errorUtil.ts";
 import {
   addIssueToContext,
   AsyncParseReturnType,
+  DIRTY,
   getParsedType,
   INVALID,
   isAborted,
@@ -153,7 +154,7 @@ export abstract class ZodType<
       ctx: {
         ...input.parent,
         data: input.data,
-        parsedType: getParsedType(input.data, input.parent.typeCache),
+        parsedType: getParsedType(input.data),
         schemaErrorMap: this._def.errorMap,
         path: input.path,
         parent: input.parent,
@@ -191,7 +192,6 @@ export abstract class ZodType<
       contextualErrorMap: params?.errorMap,
       schemaErrorMap: this._def.errorMap,
       async: params?.async ?? false,
-      typeCache: typeof Map !== "undefined" ? new Map() : undefined,
       parent: null,
       data,
       parsedType: getParsedType(data),
@@ -220,7 +220,6 @@ export abstract class ZodType<
       contextualErrorMap: params?.errorMap,
       schemaErrorMap: this._def.errorMap,
       async: true,
-      typeCache: typeof Map !== "undefined" ? new Map() : undefined,
       parent: null,
       data,
       parsedType: getParsedType(data),
@@ -1851,6 +1850,7 @@ export class ZodUnion<T extends ZodUnionOptions> extends ZodType<
       const unionErrors = results.map(
         (result) => new ZodError(result.ctx.issues)
       );
+
       addIssueToContext(ctx, {
         code: ZodIssueCode.invalid_union,
         unionErrors,
@@ -1877,23 +1877,44 @@ export class ZodUnion<T extends ZodUnionOptions> extends ZodType<
         })
       ).then(handleResults);
     } else {
-      const optionResults = options.map((option) => {
+      let dirty: undefined | { result: DIRTY<any>; ctx: ParseContext } =
+        undefined;
+      const issues: ZodIssue[][] = [];
+      for (const option of options) {
         const childCtx: ParseContext = {
           ...ctx,
           issues: [],
           parent: null,
         };
-        return {
-          result: option._parseSync({
-            data: ctx.data,
-            path: ctx.path,
-            parent: childCtx,
-          }),
-          ctx: childCtx,
-        };
+        const result = option._parseSync({
+          data: ctx.data,
+          path: ctx.path,
+          parent: childCtx,
+        });
+
+        if (result.status === "valid") {
+          return result;
+        } else if (result.status === "dirty" && !dirty) {
+          dirty = { result, ctx: childCtx };
+        }
+
+        if (childCtx.issues.length) {
+          issues.push(childCtx.issues);
+        }
+      }
+
+      if (dirty) {
+        ctx.issues.push(...dirty.ctx.issues);
+        return dirty.result;
+      }
+
+      const unionErrors = issues.map((issues) => new ZodError(issues));
+      addIssueToContext(ctx, {
+        code: ZodIssueCode.invalid_union,
+        unionErrors,
       });
 
-      return handleResults(optionResults);
+      return INVALID;
     }
   }
 
@@ -3551,6 +3572,7 @@ export type ZodFirstPartySchemaTypes =
   | ZodArray<any, any>
   | ZodObject<any, any, any, any, any>
   | ZodUnion<any>
+  | ZodDiscriminatedUnion<any, any, any>
   | ZodIntersection<any, any>
   | ZodTuple<any, any>
   | ZodRecord<any, any>
diff --git a/docs/_coverpage.md b/docs/_coverpage.md
deleted file mode 100644
index 0ba668a01..000000000
--- a/docs/_coverpage.md
+++ /dev/null
@@ -1,5 +0,0 @@
-# Welcome to Zod
-
-this is a coverpage
-
-<a href="/#/README">Go to docs</a><a href="/#/README">Screencasts</a><a href="/#/README">Screencasts</a><a href="/#/screencasts">Screencasts</a><a href="/#/README">Screencasts</a>
\ No newline at end of file
diff --git a/docs/_navbar.md b/docs/_navbar.md
deleted file mode 100644
index 911f791b6..000000000
--- a/docs/_navbar.md
+++ /dev/null
@@ -1,2 +0,0 @@
-* [Docs]("#/README")
-* [Screencasts]("#/screencasts")
\ No newline at end of file
diff --git a/docs/screencasts.md b/docs/screencasts.md
deleted file mode 100644
index eba3e5476..000000000
--- a/docs/screencasts.md
+++ /dev/null
@@ -1,7 +0,0 @@
-# Screencasts!
-
-asdlfijasdf
-asdf
-asdfadfas
-
-asdfasdf
\ No newline at end of file
diff --git a/src/__tests__/firstparty.test.ts b/src/__tests__/firstparty.test.ts
index 40984f876..6ae872ed1 100644
--- a/src/__tests__/firstparty.test.ts
+++ b/src/__tests__/firstparty.test.ts
@@ -38,6 +38,8 @@ test("first party switch", () => {
       break;
     case z.ZodFirstPartyTypeKind.ZodUnion:
       break;
+    case z.ZodFirstPartyTypeKind.ZodDiscriminatedUnion:
+      break;
     case z.ZodFirstPartyTypeKind.ZodIntersection:
       break;
     case z.ZodFirstPartyTypeKind.ZodTuple:
diff --git a/src/benchmarks/index.ts b/src/benchmarks/index.ts
index 62b1b6877..e94003cee 100644
--- a/src/benchmarks/index.ts
+++ b/src/benchmarks/index.ts
@@ -1,9 +1,11 @@
 import discriminatedUnionBenchmarks from "./discriminatedUnion";
 import objectBenchmarks from "./object";
+import realworld from "./realworld";
 import stringBenchmarks from "./string";
 import unionBenchmarks from "./union";
 
 for (const suite of [
+  ...realworld.suites,
   ...stringBenchmarks.suites,
   ...objectBenchmarks.suites,
   ...unionBenchmarks.suites,
diff --git a/src/benchmarks/realworld.ts b/src/benchmarks/realworld.ts
new file mode 100644
index 000000000..29eee471d
--- /dev/null
+++ b/src/benchmarks/realworld.ts
@@ -0,0 +1,63 @@
+import Benchmark from "benchmark";
+
+import { z } from "../index";
+
+const shortSuite = new Benchmark.Suite("realworld");
+
+const People = z.array(
+  z.object({
+    type: z.literal("person"),
+    hair: z.enum(["blue", "brown"]),
+    active: z.boolean(),
+    name: z.string(),
+    age: z.number().int(),
+    hobbies: z.array(z.string()),
+    address: z.object({
+      street: z.string(),
+      zip: z.string(),
+      country: z.string(),
+    }),
+  })
+);
+
+let i = 0;
+
+function num() {
+  return ++i;
+}
+
+function str() {
+  return (++i % 100).toString(16);
+}
+
+function array<T>(fn: () => T): T[] {
+  return Array.from({ length: ++i % 10 }, () => fn());
+}
+
+const people = Array.from({ length: 100 }, () => {
+  return {
+    type: "person",
+    hair: i % 2 ? "blue" : "brown",
+    active: !!(i % 2),
+    name: str(),
+    age: num(),
+    hobbies: array(str),
+    address: {
+      street: str(),
+      zip: str(),
+      country: str(),
+    },
+  };
+});
+
+shortSuite
+  .add("valid", () => {
+    People.parse(people);
+  })
+  .on("cycle", (e: Benchmark.Event) => {
+    console.log(`${(shortSuite as any).name}: ${e.target}`);
+  });
+
+export default {
+  suites: [shortSuite],
+};
diff --git a/src/helpers/parseUtil.ts b/src/helpers/parseUtil.ts
index c8bc7428a..4cd7f03c5 100644
--- a/src/helpers/parseUtil.ts
+++ b/src/helpers/parseUtil.ts
@@ -32,51 +32,34 @@ export const ZodParsedType = util.arrayToEnum([
 
 export type ZodParsedType = keyof typeof ZodParsedType;
 
-function cacheAndReturn(
-  data: any,
-  parsedType: ZodParsedType,
-  cache?: Map<any, ZodParsedType>
-) {
-  if (cache) cache.set(data, parsedType);
-  return parsedType;
-}
-
-export const getParsedType = (
-  data: any,
-  cache?: Map<any, ZodParsedType>
-): ZodParsedType => {
-  if (cache && cache.has(data)) return cache.get(data)!;
+export const getParsedType = (data: any): ZodParsedType => {
   const t = typeof data;
 
   switch (t) {
     case "undefined":
-      return cacheAndReturn(data, ZodParsedType.undefined, cache);
+      return ZodParsedType.undefined;
 
     case "string":
-      return cacheAndReturn(data, ZodParsedType.string, cache);
+      return ZodParsedType.string;
 
     case "number":
-      return cacheAndReturn(
-        data,
-        isNaN(data) ? ZodParsedType.nan : ZodParsedType.number,
-        cache
-      );
+      return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
 
     case "boolean":
-      return cacheAndReturn(data, ZodParsedType.boolean, cache);
+      return ZodParsedType.boolean;
 
     case "function":
-      return cacheAndReturn(data, ZodParsedType.function, cache);
+      return ZodParsedType.function;
 
     case "bigint":
-      return cacheAndReturn(data, ZodParsedType.bigint, cache);
+      return ZodParsedType.bigint;
 
     case "object":
       if (Array.isArray(data)) {
-        return cacheAndReturn(data, ZodParsedType.array, cache);
+        return ZodParsedType.array;
       }
       if (data === null) {
-        return cacheAndReturn(data, ZodParsedType.null, cache);
+        return ZodParsedType.null;
       }
       if (
         data.then &&
@@ -84,21 +67,21 @@ export const getParsedType = (
         data.catch &&
         typeof data.catch === "function"
       ) {
-        return cacheAndReturn(data, ZodParsedType.promise, cache);
+        return ZodParsedType.promise;
       }
       if (typeof Map !== "undefined" && data instanceof Map) {
-        return cacheAndReturn(data, ZodParsedType.map, cache);
+        return ZodParsedType.map;
       }
       if (typeof Set !== "undefined" && data instanceof Set) {
-        return cacheAndReturn(data, ZodParsedType.set, cache);
+        return ZodParsedType.set;
       }
       if (typeof Date !== "undefined" && data instanceof Date) {
-        return cacheAndReturn(data, ZodParsedType.date, cache);
+        return ZodParsedType.date;
       }
-      return cacheAndReturn(data, ZodParsedType.object, cache);
+      return ZodParsedType.object;
 
     default:
-      return cacheAndReturn(data, ZodParsedType.unknown, cache);
+      return ZodParsedType.unknown;
   }
 };
 
@@ -148,7 +131,6 @@ export interface ParseContext {
   readonly contextualErrorMap?: ZodErrorMap;
   readonly async: boolean;
   readonly parent: ParseContext | null;
-  readonly typeCache: Map<any, ZodParsedType> | undefined;
   readonly data: any;
   readonly parsedType: ZodParsedType;
 }
diff --git a/src/types.ts b/src/types.ts
index 4f3e21165..29db38b2a 100644
--- a/src/types.ts
+++ b/src/types.ts
@@ -2,6 +2,7 @@ import { errorUtil } from "./helpers/errorUtil";
 import {
   addIssueToContext,
   AsyncParseReturnType,
+  DIRTY,
   getParsedType,
   INVALID,
   isAborted,
@@ -153,7 +154,7 @@ export abstract class ZodType<
       ctx: {
         ...input.parent,
         data: input.data,
-        parsedType: getParsedType(input.data, input.parent.typeCache),
+        parsedType: getParsedType(input.data),
         schemaErrorMap: this._def.errorMap,
         path: input.path,
         parent: input.parent,
@@ -191,7 +192,6 @@ export abstract class ZodType<
       contextualErrorMap: params?.errorMap,
       schemaErrorMap: this._def.errorMap,
       async: params?.async ?? false,
-      typeCache: typeof Map !== "undefined" ? new Map() : undefined,
       parent: null,
       data,
       parsedType: getParsedType(data),
@@ -220,7 +220,6 @@ export abstract class ZodType<
       contextualErrorMap: params?.errorMap,
       schemaErrorMap: this._def.errorMap,
       async: true,
-      typeCache: typeof Map !== "undefined" ? new Map() : undefined,
       parent: null,
       data,
       parsedType: getParsedType(data),
@@ -1851,6 +1850,7 @@ export class ZodUnion<T extends ZodUnionOptions> extends ZodType<
       const unionErrors = results.map(
         (result) => new ZodError(result.ctx.issues)
       );
+
       addIssueToContext(ctx, {
         code: ZodIssueCode.invalid_union,
         unionErrors,
@@ -1877,23 +1877,44 @@ export class ZodUnion<T extends ZodUnionOptions> extends ZodType<
         })
       ).then(handleResults);
     } else {
-      const optionResults = options.map((option) => {
+      let dirty: undefined | { result: DIRTY<any>; ctx: ParseContext } =
+        undefined;
+      const issues: ZodIssue[][] = [];
+      for (const option of options) {
         const childCtx: ParseContext = {
           ...ctx,
           issues: [],
           parent: null,
         };
-        return {
-          result: option._parseSync({
-            data: ctx.data,
-            path: ctx.path,
-            parent: childCtx,
-          }),
-          ctx: childCtx,
-        };
+        const result = option._parseSync({
+          data: ctx.data,
+          path: ctx.path,
+          parent: childCtx,
+        });
+
+        if (result.status === "valid") {
+          return result;
+        } else if (result.status === "dirty" && !dirty) {
+          dirty = { result, ctx: childCtx };
+        }
+
+        if (childCtx.issues.length) {
+          issues.push(childCtx.issues);
+        }
+      }
+
+      if (dirty) {
+        ctx.issues.push(...dirty.ctx.issues);
+        return dirty.result;
+      }
+
+      const unionErrors = issues.map((issues) => new ZodError(issues));
+      addIssueToContext(ctx, {
+        code: ZodIssueCode.invalid_union,
+        unionErrors,
       });
 
-      return handleResults(optionResults);
+      return INVALID;
     }
   }
 
@@ -3551,6 +3572,7 @@ export type ZodFirstPartySchemaTypes =
   | ZodArray<any, any>
   | ZodObject<any, any, any, any, any>
   | ZodUnion<any>
+  | ZodDiscriminatedUnion<any, any, any>
   | ZodIntersection<any, any>
   | ZodTuple<any, any>
   | ZodRecord<any, any>
diff --git a/tsconfig.base.json b/tsconfig.base.json
index 33fbd208c..f730718e6 100644
--- a/tsconfig.base.json
+++ b/tsconfig.base.json
@@ -7,7 +7,7 @@
       "esnext",
       "dom"
     ],
-    "target": "es5",
+    "target": "es2018",
     "removeComments": false,
     "esModuleInterop": true,
     "moduleResolution": "node",
