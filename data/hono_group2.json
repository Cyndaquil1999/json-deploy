{
  "repo_name": "hono",
  "release_pr_map": {
    "v4.3.11": [
      {
        "pr_number": 2775,
        "title": "fix(middleware/jwt): fix incorrect assumption in jwt impl",
        "body": "### The author should do the following, if applicable\r\n\r\nPlease see https://discord.com/channels/595317990191398933/1243024990652207115/1243024990652207115 (in the cloudflare discord)\r\n\r\n**THIS WILL BREAK PRODUCTION**\r\n\r\nIn the docs it says\r\n\r\n```ts\r\napp.use(\r\n  '/auth/*',\r\n  jwt({\r\n    secret: 'it-is-very-secret',\r\n  })\r\n)\r\napp.get('/auth/page', (c) => {\r\n  return c.text('You are authorized')\r\n})\r\n```\r\n\r\nrealalitically code in production will look more like\r\n\r\n```ts\r\napp.use(\r\n  '/auth/*',\r\n  jwt({\r\n    secret: process.env.SECRET,\r\n  })\r\n)\r\napp.get('/auth/page', (c) => {\r\n  return c.text('You are authorized')\r\n})\r\n```\r\n\r\nhowever, if this app.use is at the top level, in some instances in cloudflare process.env can be undefined. Nobody noticed this, because the code failed to check if it was actually defined.\r\n\r\nedit: another solution would be to move this check inside the return callback, but this means that every API call it would run the getter on `process.env` which would make it susceptible to runtime manipulation. \r\n\r\nThough actually if my theory that this is an issue is correct, in its current impl where the check is running before the callback is constructed, it is still vulnerable to runtime manipulation without reruning the check because it never does `let secret = options.secret` so if you could modify the value of secret (eg if it is a reference to process.env.secret and you modify it elsewhere) but actually, I think I'm wrong because when you construct an object like `let obj = { secret: process.env.SECRET }`, changing process.env wouldn't have an impact because when SECRET is accessed thats no longer a reference type, thats a copy. \r\n\r\nHOWEVER if you access `process.env.SECRET` every single request, like when I proposed\r\n\r\n> edit: another solution would be to move this\r\n\r\nit would hit the ref type every single request, so that would make it a vuln\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `bun denoify` to generate files for Deno\r\n- [ ] `bun run format:fix && bun run lint:fix` to format the code\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2775",
        "comments": [
          "Hi @boehs \r\n\r\nThanks for the PR. You are right. `options.secret` should be checked first.\r\n\r\nI think this will not be a \"breaking change.\" It just changes the internal behavior in the JWT middleware, so we can ship it as a patch or minor release.\r\n\r\nOne thing. Could you run the `bun run denoify` to generate files for Deno and push it?",
          "> Hi @boehs\r\n> \r\n> Thanks for the PR. You are right. `options.secret` should be checked first.\r\n> \r\n> I think this will not be a \"breaking change.\" It just changes the internal behavior in the JWT middleware, so we can ship it as a patch or minor release.\r\n\r\nyeah the breaking assumption was before I tried to pentest it and found it wasn't working with undefined and discovered that by luck there was an exception. I'll denoify it now",
          "done",
          "@boehs \r\n\r\nThank you! I'll merge this now and will ship it."
        ]
      }
    ],
    "v4.3.10": [
      {
        "pr_number": 2761,
        "title": "fix(secure-header): Replace NodeJS Buffer API",
        "body": "close: https://github.com/honojs/hono/issues/2725\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2761",
        "comments": [
          "Thank you so much!",
          "Hi @watany-dev !\r\n\r\nSorry! I intended to fix it, but thanks for your help. I've left a comment.",
          "Sorry for fixing it on my own, I chose the right API.",
          "Thanks! Merging now."
        ]
      },
      {
        "pr_number": 2767,
        "title": "fix(http-exception): prioritize the status code",
        "body": "Fixes #2707\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2767",
        "comments": [
          "@usualoma \r\n\r\nCould you review this too?",
          "@yusukebe Thank you. LGTM \ud83d\udc4d ",
          "@usualoma Thanks! Merging."
        ]
      },
      {
        "pr_number": 2763,
        "title": "feat(etag): export `RETAINED_304_HEADERS`",
        "body": "In this PR, I've done:\r\n\r\n* Export `RETAINED_304_HEADERS` to make **adding** the retained header value easy.\r\n* Add the test for retained headers.\r\n* Refactor the tests. Removed `beforeEach` since the scope is not clear.\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2763",
        "comments": [
          "Hey @usualoma !\r\n\r\nCan you review this one?",
          "@usualoma Sorry for pinging again. Could you review this?",
          "@yusukebe Sorry I'm late, I think it's good!",
          "@usualoma Thanks! Shipping this."
        ]
      }
    ],
    "v4.3.9": [
      {
        "pr_number": 2682,
        "title": "test(validator): compatibility with Node.js `v20.13.1`",
        "body": "### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `bun denoify` to generate files for Deno\r\n- [ ] `bun run format:fix && bun run lint:fix` to format the code\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2682",
        "comments": []
      },
      {
        "pr_number": 2684,
        "title": "refactor(utils/jwt): remove some `any`",
        "body": "### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2684",
        "comments": ["@fzn0x \r\n\r\nThanks! Merging now."]
      },
      {
        "pr_number": 2712,
        "title": "refactor(timing): don't use `Partial` for the options",
        "body": "`Partial` is convinient. However, it is easy for users to understand that it does not use `Partial`.\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `bun denoify` to generate files for Deno\r\n- [ ] `bun run format:fix && bun run lint:fix` to format the code\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2712",
        "comments": []
      },
      {
        "pr_number": 2713,
        "title": "refactor(secure-headers): don't use `Partial` for the options",
        "body": "It is the same reason as #2712 .\r\n\r\nSometimes `Partial` is used instead of making all option values optional, but this is not necessary in this case.\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `bun denoify` to generate files for Deno\r\n- [ ] `bun run format:fix && bun run lint:fix` to format the code\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2713",
        "comments": []
      },
      {
        "pr_number": 2690,
        "title": "fix(context): Retain all cookies when passing `ResponseInit` to `c.body`",
        "body": "It seems cookie headers are not correctly appended when passing `ResponseInit` as a second parameter to `c.body(..., res)`.\r\n\r\nSupport for setting cookies was recently added to `@hono/trpc-server` in\r\nhttps://github.com/honojs/middleware/pull/517, but this bug prevents multiple cookies from being set.\r\n\r\n[Here's a reproduction](https://github.com/codeflows/hono-cookie-test/tree/main)\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2690",
        "comments": [
          "@codeflows \r\n\r\nThanks! Looks good to me. Merging now."
        ]
      },
      {
        "pr_number": 2715,
        "title": "fix(hono-jsx): make ref unrequried for forward ref",
        "body": "My problem -  hono forward ref always need me to put ref. It's not true. It should be like \"if i need to forward ref (maybe by thirdparty library like mantine, they love to put ref to your custom components)\r\n\r\nDoes hono works correct? Yes no error runtime throws, code works fine. \r\nWhat my code fixes? \r\nTHIS:\r\n <img width=\"478\" alt=\"Screenshot 2024-05-18 at 16 41 02\" src=\"https://github.com/honojs/hono/assets/23248488/77fccfad-ee2e-4e97-84e0-43213434b6c7\">\r\n<img width=\"548\" alt=\"Screenshot 2024-05-18 at 16 41 07\" src=\"https://github.com/honojs/hono/assets/23248488/32725d9e-3219-4d19-9e7f-a3b2e2968e3c\">\r\n\r\ni have to always cover with ts expect error every time i use component that i need to forward ref.\r\n\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2715",
        "comments": [
          "Hi @dygy ! Thanks for the PR.\r\n\r\nSeems good to me.\r\n\r\n@usualoma Can you review it too?",
          "Hi @dygy! Oh, thanks. LGTM! ",
          "Thanks! Merging.",
          "Thank you guys a lot. Good framework, nice discord server, fast code review!"
        ]
      },
      {
        "pr_number": 2752,
        "title": "fix(factory): export `CreateHandlersInterface`",
        "body": "### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2752",
        "comments": []
      },
      {
        "pr_number": 2751,
        "title": "feat(aws-lambda): add support for alb multiValueQueryStringParameters",
        "body": "When working on #2626, I realized that when `multiValueHeaders` is enabled, the query string parameters are passed as an array as well. More info : https://docs.aws.amazon.com/elasticloadbalancing/latest/application/lambda-functions.html#multi-value-headers\r\n\r\n> If you enable multi-value headers, the load balancer uses both key values sent by the client and sends you an event that includes query string parameters using multiValueQueryStringParameters. For example:\r\n`\"multiValueQueryStringParameters\": { \"myKey\": [\"val1\", \"val2\"] },`\r\n\r\nThis PR adds support for `multiValueQueryStringParameters` when it's available on the event\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2751",
        "comments": [
          "Hi! @yiss \r\n\r\nThanks for the PR. I'll merge it now and soon release a patch version that includes this change.",
          "@yusukebe great thank you"
        ]
      }
    ],
    "v4.3.7": [
      {
        "pr_number": 2666,
        "title": "doc(ssg): Define the default value for Content-Type",
        "body": "close: https://github.com/honojs/hono/issues/2284 https://github.com/honojs/hono/issues/2244\r\n\r\nIt summarizes the history of the discussion and prescribes default values.\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2666",
        "comments": [
          "Hi @watany-dev \r\n\r\nGreat! Good summarization. I'll merge right now."
        ]
      },
      {
        "pr_number": 2657,
        "title": "feat(aws-lambda): add alb event processor",
        "body": "### The author should do the following, if applicable\r\nThis change is made to address the issue raised in #2626. The change adds the following :\r\n- Create a custom `albProcessor` for `ALBProxyEvent`\r\n- Refactor code and introduced new `getHeaders` method\r\n- Added test for certain cases of the ALB event when `multiValueHeaders` is present\r\n\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [ ] `bun denoify` to generate files for Deno\r\n- [ ] `bun run format:fix && bun run lint:fix` to format the code\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2657",
        "comments": [
          "Hi @yiss \r\n\r\nCan you run `bun run format:fix && bun run lint:fix` to format the code?\r\n\r\n@watany-dev I'll be glad if you review it!",
          "@yusukebe done. @watany-dev please feel free to let me know if you have any suggestion/improvements",
          "@yusukebe @yiss \r\nThank you for submitting this patch. I think this is fine.",
          "@yiss @watany-dev Thank you both!\r\n\r\nI'll merge this now and will release it as a **patch** release later!\r\n\r\n",
          "Thank you guys"
        ]
      },
      {
        "pr_number": 2668,
        "title": "feat(utils/cookie): allow setting cookie SameSite attribute in lowercase too",
        "body": "Added support for allowing `lax`, `strict`, and `none` values for the `SameSite` attribute in the `setCookie` function.\r\n\r\nWhile the [RFC](https://datatracker.ietf.org/doc/html/draft-west-first-party-cookies-07#section-4.1) suggests that the `SameSite` attribute should `Strict`, `Lax`, `None` as values, there is no indication that the `SameSite` attribute should be case-sensitive.\r\n\r\nLibraries like lucia (Undelying [`olso`](https://github.com/pilcrowOnPaper/oslo/blob/26f8c9dabc2dac6212c855602614d91991e87889/src/cookie/index.ts#L7)) returns cookie objects with lowercase `SameSite` attribute values, which conficts with the `SameSite` attribute values in the `setCookie` function. This needs us to convert the `SameSite` attribute values from lucia to the correct case-sensitive values which is a huge pain.\r\n\r\nLibraires like Next.js (underlying [`@edge-runtime/cookie`](https://github.com/vercel/edge-runtime/blob/529e4d5d4df3050eb634cd59d17a0e1801789226/packages/cookies/src/serialize.ts#L102)) allow both cases and uses the lowercase value.\r\n\r\nWhile I could have asked lucia to change the case of the `SameSite` attribute values, Its less likely to happen as changing the case of the `SameSite` attribute values would break existing codebases. So its better to allow both cases for the `SameSite` attribute values.\r\n\r\nI have updated the `setCookie` function to allow `lax`, `strict`, and `none` values for the `SameSite` attribute. While keeping the return value in the original case-sensitive form to stay true to the RFC.\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2668",
        "comments": [
          "Hi @BlankParticle, Thanks for the PR!\r\n\r\nI could see that it was inconvenient for you.\r\n\r\n@Jxck What do you think of this PR? Should we allow the lower cases?",
          "I'm agree with @BlankParticle \r\nWhat we should refer to is [RFC6265](https://www.rfc-editor.org/rfc/rfc6265) or [RFC6265bis](https://httpwg.org/http-extensions/draft-ietf-httpbis-rfc6265bis.html#name-the-samesite-attribute-2) and both mentions sending Upper camel case and receiving case-insensitive manner.\r\n\r\nLGTM +1",
          "@Jxck Thanks!\r\n\r\n@BlankParticle, I think we don't have to add a test for this case. Since it's a petty feature, I'll merge it into the `main` and release it as a patch. Thanks!"
        ]
      },
      {
        "pr_number": 2679,
        "title": "fix(method-override): remove un-needed import of URLSearchParams in method override middleware",
        "body": "this PR simply removes the `URLSearchParams` import from the node-specific package `url`.\r\n\r\nwhen running hono and using the method override middleware in cloudflare workers, wrangler complains about the use of the `url` package. it prompts you to add the `node_compat` flag.\r\n\r\nthis seems a bit erroneous to me, since node has had `URLSearchParams` as a global since version 10. maybe i'm missing something specific about other runtimes, but all tests pass.\r\n\r\nplease nuke this PR if i'm flat-out wrong ;)\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n- [ ] `bun run format:fix && bun run lint:fix` to format the code\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2679",
        "comments": [
          "Hi @f5io \r\n\r\nYou are right! This is our mistake. Thank you for the fix. Marging right now."
        ]
      }
    ],
    "v4.3.6": [
      {
        "pr_number": 2652,
        "title": "feat(cache): improved customizability",
        "body": "Closes #2650 \r\n\r\n- [x] `cacheName` can accept a function, which returns a string\r\n- [x] Added `keyGenerator` function, to define custom cache keys",
        "html_url": "https://github.com/honojs/hono/pull/2652",
        "comments": [
          "Hey @MathurAditya724 \r\n\r\nGood! I like using `((c: Context) => Promise<string> | string)`. There are some things that you want to do:\r\n\r\n* Writing proper tests.\r\n* `bun run denoify` to generate files for Deno and push them.\r\n* `bun run format:fix && bun run lint:fix` to format the code.\r\n\r\nThanks!",
          "Hey @yusukebe, I have completed all the requested changes kindly have a look. Regarding the test, I have added tests that seem reasonable to me but do let me know if you have any queries",
          "I have added this [PR](https://github.com/honojs/website/pull/350) for the website, reflecting the behavior of the new API",
          "Hi @MathurAditya724 \r\n\r\nGreat! I'm glad you also created the PR for the website. I'll merge this to the `main` now and ship it with the next **patch** release since it's not such a big feature. Thank you for your contribution!",
          "thank you @MathurAditya724 . I have a use case for this and this has come in handy!"
        ]
      },
      {
        "pr_number": 2665,
        "title": "fix(utils/body): support multiple `File`s",
        "body": "Fixes #2664 and updates the Node.js version for the `Main` CI to `v20.x`.\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2665",
        "comments": []
      }
    ],
    "v4.3.5": [
      {
        "pr_number": 2658,
        "title": "refactor(context): remove some `any`",
        "body": "### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2658",
        "comments": []
      },
      {
        "pr_number": 2661,
        "title": "feat(hono-base): tweaks `fetch` signature for better compatibility with `deno serve`",
        "body": "fixes #2653\r\n\r\nSince deno checks `.length` as follows, this PR adjust `app.fetch.length` to be 1.\r\nhttps://github.com/denoland/deno/blob/dac49a116e094be1a3048305dfb6b10bbddcc030/ext/http/00_serve.ts#L796-L800\r\n\r\nWe will be able to use `export default app` for `deno serve` with this PR.\r\n\r\nThis definition may seem a bit odd, but it is not overly complicated; I think the advantage of \"you can write `dexport defult app` in deno just as well as in bun\" is more significant.\r\n\r\n### The author should do the following, if applicable\r\n\r\n- <del>[ ] Add tests</del>\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2661",
        "comments": [
          "@yusukebe What do you think about this?",
          "Thanks @usualoma !\r\n\r\nThis is good! I also wanted this feature. I'll merge this into the `main` right now and release it as a patch release later."
        ]
      },
      {
        "pr_number": 2663,
        "title": "perf(types): add type annotations",
        "body": "This PR added type annotations to reduce \"[Slow Types](https://jsr.io/docs/about-slow-types)\".\r\n\r\nWe are planning to support the [JSR](https://jsr.io/). For this, it's better to remove [Slow Types](https://jsr.io/docs/about-slow-types). Adding type annotations is one big issue in reducing Slow Types. In addition, it will improve TypeScript inferring performance.\r\n\r\nIt could be included in PRs to support the JSR, but not only that, so make it a separate PR and merge it into the `main` now.",
        "html_url": "https://github.com/honojs/hono/pull/2663",
        "comments": [
          "Hey @nakasyou !\r\n\r\nWhat do you think of this PR? I think it would be good to merge it before creating a PR to support JSR.",
          "Hi @yusukebe \r\n> What do you think of this PR? I think it would be good to merge it before creating a PR to support JSR.\r\n\r\nYes! I think so.\r\nIt's good to reduce Slow Types, even if it's not related to JSR",
          "@nakasyou \r\n\r\nThanks. This PR does not have a problem. I'll merge this now."
        ]
      }
    ],
    "v4.3.4": [
      {
        "pr_number": 2647,
        "title": "chore: update the pull request template",
        "body": "* Fixed the grammar.\r\n* Added `bun run format:fix && bun run lint:fix`.",
        "html_url": "https://github.com/honojs/hono/pull/2647",
        "comments": []
      },
      {
        "pr_number": 2634,
        "title": "feat(validator): check for json subtypes in validator",
        "body": "A minimal fix for #2633 using a regex. \r\nI liked the simplicity of the current `startsWith`-approach but it excluded subtypes.\r\n\r\nI did:\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2634",
        "comments": [
          "Thanks!\r\n * I use `test` now\r\n * Landed on this regexp: `/^application\\/([a-z-]+\\+)?json/`\r\n   - the `^` in front is needed to not fail the `Xapplication/json` test\r\n   - I added `?` to the `([a-z-]+\\+)` group instead of `*`, because there can only be one subtype\r\n * Yes, `(\\s*;.*)?` is not needed.",
          "Hi @ztiromoritz \r\n\r\nThanks! Looks good. To avoid the CI error, could you run `bun run format:fix && bun run lint:fix` to format the code?",
          "Hi @ztiromoritz \r\n\r\nThank you for your contribution. I'll merge this into the main now and will release it in a `patch` release since this is a minor `feat`.",
          "Fine. My pleasure.\r\nI close #2633 then. There where minor additional ideas, but overall I see no problem now.",
          "(Hope this is according to the projects workflow. :grin:  )"
        ]
      },
      {
        "pr_number": 2646,
        "title": "feat(jsx/dom): support getServerSnapshot in useSyncExternalStore",
        "body": "Fixes #2640\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2646",
        "comments": [
          "@yusukebe \r\nI haven't tried it with `swr`, but I think this implementation satisfies the external specification of `getServerSnapshot`. May I try it in your environment? If it works well, you can have it merged with the current contents.",
          "@usualoma \r\n\r\n> I haven't tried it with `swr`, but I think this implementation satisfies the external specification of `getServerSnapshot`. May I try it in your environment? If it works well, you can have it merged with the current contents.\r\n\r\nI've tried it with `swr` but it did not work. You can see and try the code:\r\n\r\nhttps://github.com/yusukebe/hono-jsx-spa/tree/swr\r\n\r\nThe screen cast - showing only `loading...`: \r\n\r\nhttps://github.com/honojs/hono/assets/10682/30dd76a6-6cad-4eea-aba3-d3b07a77222a\r\n\r\n\r\n",
          "@yusukebe \r\n\r\nAh ok, it looks like swr is loading useSyncExternalStore from a separate package. I added the following configuration to your app and now I get \"Hello Hono!\"\r\n\r\n```diff\r\ndiff --git a/vite.config.ts b/vite.config.ts\r\nindex 993a823..67c6421 100644\r\n--- a/vite.config.ts\r\n+++ b/vite.config.ts\r\n@@ -8,7 +8,8 @@ export default defineConfig(({ mode }) => {\r\n     resolve: {\r\n       alias: {\r\n         react: 'hono/jsx/dom',\r\n-        'react-dom': 'hono/jsx/dom'\r\n+        'react-dom': 'hono/jsx/dom',\r\n+        'use-sync-external-store/shim/index.js': 'hono/jsx/dom',\r\n       }\r\n     }\r\n   }\r\n```",
          "@usualoma Ooooooh great!!",
          "@usualoma \r\n\r\nThank you! I'll merge this right now and ship a **patch** release that includes this change because it's a small `feat` (it may be a huge thing for us!)."
        ]
      }
    ],
    "v4.3.3": [
      {
        "pr_number": 2613,
        "title": "fix(types): relax the type of `c.req.param()`",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `bun denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2613",
        "comments": []
      },
      {
        "pr_number": 2622,
        "title": "chore(eslint): enable `@typescript-eslint/unbound-method`",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `bun denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2622",
        "comments": []
      },
      {
        "pr_number": 2623,
        "title": "fix(factory): support `createFactory()` destruction",
        "body": "Fixes #2621\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2623",
        "comments": [
          "Hi @sushi-chaaaan!\r\n\r\nThank you for raising the issue. I've fixed it in this PR. Could you review this?",
          "Thanks very much @yusukebe ! Looks good to me.\r\nI was trying to fix the problem at hand, and it was almost the same implementation.\r\nI learned that it is optimal to specify \u201cany\u201d for argument in this case.",
          "> I learned that it is optimal to specify \u201cany\u201d for argument in this case.\r\n\r\nIf I understand correctly, if we define the proper types like `CreateHandlersInterface`, we can use `any` in the actual implementation like `createHandlers()`.\r\n\r\nAnyway, thank you!"
        ]
      },
      {
        "pr_number": 2585,
        "title": "fix(aws-lambda): avoid duplicating already set headers",
        "body": "fix #2550\r\n\r\n### Description\r\n\r\nThis pull request avoids duplicating already set headers; this was happening because API Gateway V1 event has \"multiValueHeaders\" for headers with multiple values.\r\n\r\nCurrently, Hono AWS Lambda adapter appends any value from these \"multiValueHeaders\" in the current Header instance. `This leads to duplicated values when a key is already defined`.\r\n\r\n### How\r\n- Added a condition to only append a value from \"multiValueHeaders\" when the current key is not already defined or the current value is not already included;\r\n- added unit tests for the createRequest method from EventProcessor to make sure that the Request is adapted correctly, headers are not duplicated and to avoid future regressions;\r\n> Tests are following the arrange / act / assert pattern.\r\n- `getProcessor` function was exported for unit testing purposes;\r\n- Added a comment because the conditions became a little complex.\r\n\r\n### References\r\nhttps://docs.aws.amazon.com/lambda/latest/dg/services-apigateway.html\r\nhttps://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-lambda.html\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n\r\n### Extra\r\nThanks to @jean-leonco that found the bug in @BemteviSeguros API, @kbrandwijk that opened the issue and @ShaneYu that suggested the idea of the fix.\r\n\r\nPlease let me know if this aligns with the library goals and if the code follows the repository recommendations.\r\n\r\nThanks in advance.",
        "html_url": "https://github.com/honojs/hono/pull/2585",
        "comments": [
          "Thanks @Amorim33 !\r\n\r\n@watany-dev Could you review this?",
          "I have tried to fix the problem at hand for a short time, but it appears that the header rewrite does not work if I just change the createRequest. In fact, I can see that the test is still failing with this fix.",
          "Hello @watany-dev!\r\n\r\nSorry for this, I didn't realize that tests were not passing when running `test:all`.\r\n\r\nThis was happening because of other LambdaEvent related global definitions, the \"content-type\" header was missing in my test. Just fixed it!\r\n\r\nNow, I believe that the tests are running properly and headers are not getting duplicated anymore.\r\n\r\nMay you please, run the workflow one more time?",
          "Hi @Amorim33 \r\n\r\nThanks! Can you run `bun run format:fix && bun run lint:fix` to format the code?",
          "Sure, thank you @yusukebe !",
          "@Amorim33 \r\n\r\nThanks! I'll merge this now."
        ]
      },
      {
        "pr_number": 2628,
        "title": "refactor: improve parseBody function and docs",
        "body": "- [x] Refactored `parseBody` and function to improve readability and maintainability.\r\n- [x] Simplified and clarified examples in JSDoc comments\r\n- [X] Improving `performance` from tests ",
        "html_url": "https://github.com/honojs/hono/pull/2628",
        "comments": [
          "I had some problems with Deno's `process.env`, but I fixed them",
          "Ready @yusukebe ",
          "@mgrithm \r\n\r\nThanks. Merging now."
        ]
      },
      {
        "pr_number": 2639,
        "title": "fix(validator): `form` supports multiple values with `foo[]`",
        "body": "Fixes #2625\r\n\r\nThis PR enables the validator to parse an array form value, such as the key is a `foo[]`. You should specify a key with the `[]` suffix for an array content.\r\n\r\nUsage:\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { z } from 'zod'\r\nimport { zValidator } from '@hono/zod-validator'\r\n\r\nconst app = new Hono()\r\n\r\nconst schema = z.object({\r\n  'foo[]': z.array(z.string())\r\n})\r\n\r\napp.post('/', zValidator('form', schema), (c) => {\r\n  const data = c.req.valid('form')\r\n  const fooArray = data['foo[]']\r\n  return c.json({\r\n    fooArray\r\n  })\r\n})\r\n\r\nexport default app\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2639",
        "comments": []
      }
    ],
    "v4.3.2": [
      {
        "pr_number": 2610,
        "title": "fix(types): correct inferring when Method has Endponts as Union",
        "body": "Fixes #2607\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2610",
        "comments": [
          "Hi @NamesMT \r\n\r\nCould you review this?",
          "Oh you are too fast, [I made a PR](https://github.com/honojs/hono/pull/2611) to close [my issue ](https://github.com/honojs/hono/issues/2607) \ud83d\ude4f\r\n\r\nDo you have time to explain what your approach does compared to mine? I've i struggled a lot but find a way to fix it!\r\n\r\nThank for your time and your effort \u2764\ufe0f",
          "> Do you have time to explain what your approach does compared to mine? I've i struggled a lot but find a way to fix it!\r\n\r\nThere was nothing wrong with the old code, it's just TypeScript trying to be smart and merge the types for us, by simply copying the whole block to a new type, we force TS to make it union at that level.\r\n\r\n![image](https://github.com/honojs/hono/assets/23612546/6fc610b3-a229-420d-ae87-0cbf030bb658)\r\n=>\r\n![image](https://github.com/honojs/hono/assets/23612546/a4fd51eb-6930-482e-a14c-0d5c33c2fea2)\r\n",
          "> > Do you have time to explain what your approach does compared to mine? I've i struggled a lot but find a way to fix it!\r\n> \r\n> There was nothing wrong with the old code, it's just TypeScript trying to be smart and merge the types for us, by simply copying the whole block to a new type, we force TS to make it union at that level.\r\n> \r\n> ![image](https://private-user-images.githubusercontent.com/23612546/327967750-6fc610b3-a229-420d-ae87-0cbf030bb658.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTQ4NTcxODksIm5iZiI6MTcxNDg1Njg4OSwicGF0aCI6Ii8yMzYxMjU0Ni8zMjc5Njc3NTAtNmZjNjEwYjMtYTIyOS00MjBkLWFlODctMGNiZjAzMGJiNjU4LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA1MDQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNTA0VDIxMDgwOVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTFhZjhkYjYxYzIyNDAxYWY2Mjg5ZWFjYTM0MjUxMTNiNDVkZDRjYzhlNzkyZjY1MWJiYTQ2ZmNmMjI1NWQ5NjYmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0._VVEYXB-ZAQKJl87nnmrOEYk5urgci51jh5NzlFGXOs) => ![image](https://private-user-images.githubusercontent.com/23612546/327967777-a4fd51eb-6930-482e-a14c-0d5c33c2fea2.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTQ4NTcxODksIm5iZiI6MTcxNDg1Njg4OSwicGF0aCI6Ii8yMzYxMjU0Ni8zMjc5Njc3NzctYTRmZDUxZWItNjkzMC00ODJlLWExNGMtMGQ1YzMzYzJmZWEyLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA1MDQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNTA0VDIxMDgwOVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTkwODhkZThjYzEzYTYwMjVhYjYwZDE4ZDY1ZmJiNTAzMjhlNjRhMzg4Mzg5NGEyYzVkZWM3NDliMDI0M2Q2NzEmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.UOK84U3RFNgC92wvikVaPI7zvvIraxlRRvOalf97AdQ)\r\n\r\nTS for libraries is pretty hard \ud83e\udd72 thank's for the explanations ",
          "@NamesMT Thanks!\r\n\r\n@armandsalle Yes. TypeScript is hard!\r\n\r\nI'll merge this now."
        ]
      }
    ],
    "v4.3.1": [
      {
        "pr_number": 2605,
        "title": "fix(types): `ToSchema` compatibility",
        "body": "Resolves honojs/middleware#496\r\n\r\nThis PR make `ToSchema` compatible with older versions.\r\n\r\nSome informations about the issue:\r\n> Okay, so on `4.3.0` we have two types breaking on `ToSchema`:\r\n> \r\n> * Update from `O` is output to `extends TypedResponse` - 8129a3a\r\n> * Update from `I` accepting `Input['in']` to `Input` - ea4e998\r\n> \r\n> Previously I thought `ToSchema` is only for internal use so I didn't think much about it, but if it is exposed for other libraries I think we should revert `ToSchema` and creates a new `ToSchemaV2` for future uses to revert the breaking changes?\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests - Need help adding tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2605",
        "comments": [
          "Hi @NamesMT \r\n\r\nThanks! I, too, have confirmed it works well with Zod OpenAPI. I'll merge it now."
        ]
      }
    ],
    "v4.3.0": [
      {
        "pr_number": 2576,
        "title": "fix(request): infer params in a path includes one or more optional parameter",
        "body": "Fixes #2574 #2575\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2576",
        "comments": []
      },
      {
        "pr_number": 2499,
        "title": "feat(rpc): Add status code to response type",
        "body": "This PR adds a status code to the response type and allows type filtering in RPC as below.\r\n\r\nserver.ts\r\n```ts\r\nconst app = new Hono().get(\r\n  \"/posts/:id\",\r\n  zValidator(\r\n    \"param\",\r\n    z.object({\r\n      id: z.string(),\r\n    })\r\n  ),\r\n  async (c) => {\r\n    const { id } = c.req.valid(\"param\");\r\n\r\n    try {\r\n      const post: Post | undefined = await getPost(id);\r\n\r\n      if (post !== undefined) {\r\n        return c.json({ post }, 200);\r\n      }\r\n\r\n      return c.json({ error: \"not found\" }, 404);\r\n    } catch (e) {\r\n      return c.json({ error: \"internal server error\" }, 500);\r\n    }\r\n  }\r\n);\r\n\r\nexport type AppType = typeof app;\r\n```\r\n\r\nclient.ts\r\n```ts\r\nconst client = hc<AppType>(\"/api\");\r\n\r\nconst res = await client.posts[\":id\"].$get({\r\n  param: { id: \"1\" },\r\n});\r\n\r\nif (res.status === 404) {\r\n  const data: { error: string } = await res.json();\r\n  console.log(data.error);\r\n}\r\n\r\nif (res.ok) {\r\n  const data: { post: Post } = await res.json();\r\n  console.log(data.post);\r\n}\r\n\r\n// { post: Post } | { error: string }\r\ntype ResponseType = InferResponseType<(typeof client.posts)[\":id\"][\"$get\"]>;\r\n\r\n// { post: Post }\r\ntype ResponseType200 = InferResponseType<(typeof client.posts)[\":id\"][\"$get\"], 200>;\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2499",
        "comments": [
          "@kosei28 Awesome! This will be a great improvement. I'll see the details later.",
          "I thought so at first, but `c.status()` may have set a different status code than the default, and the type and value may not match. It would be nice if the context had a type for the status code and could override that type with `c.status()`, but this is not possible in TypeScript.",
          "@kosei28 \r\n\r\n> I thought so at first, but `c.status()` may have set a different status code than the default, and the type and value may not match. It would be nice if the context had a type for the status code and could override that type with `c.status()`, but this is not possible in TypeScript.\r\n\r\nUnderstood well! Indeed, it is not possible. \r\n\r\nI'd like to merge this into the branch for the next minor release later. Can you fix the errors that happen on CI? It seems to be typescript errors.",
          "I fixed the CI error.\r\n\r\nI'm looking forward to its release!",
          "Hi @kosei28 \r\n\r\nNow I've fixed the conflict again to the main. I'll merge this into the \"next\" branch for the next minor release, 4.3.0. Thanks!"
        ]
      },
      {
        "pr_number": 2512,
        "title": "feat(helper/cookie): delete cookie returns the deleted value",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\nresolve #2321 ",
        "html_url": "https://github.com/honojs/hono/pull/2512",
        "comments": [
          "Hi @sor4chi \r\n\r\nLooks good to me! We can merge this right now, but I'm wondering if it should be included in a patch release or a minor release. Please wait a bit.",
          "Hi @sor4chi !\r\n\r\nNow, I'll merge this into the \"next\" branch. Thanks!"
        ]
      },
      {
        "pr_number": 2514,
        "title": "feat(bearer-auth): add `headerName` option",
        "body": "Adds the possibility to use custom headers, such as `X-Auth` or `X-Access-Token` instead of `Authorization` with the `bearer-auth` middleware.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2514",
        "comments": [
          "Hi @eliasbrange \r\n\r\nThanks for the PR. But I think we should consider whether we make it possible to change the header name.\r\n\r\n@callumthomson What do you think about this matter? ",
          "This could be useful when deploying Hono in a Lambda and exposing it through CloudFront + Lambda Function URL.\r\n\r\nWith the [newly released OAC ](https://aws.amazon.com/about-aws/whats-new/2024/04/amazon-cloudfront-oac-lambda-function-url-origins/), you can simplify deploying a Lambdalith API running Hono without an API Gateway.\r\n\r\nHowever, when using OAC, CloudFront takes over the Authorization header. So, you must use another header to use both OAC and custom auth using JWTs.\r\n\r\nWriting custom middleware is possible. However, it would be easier if the header could be customized through the existing middleware. ",
          "@eliasbrange \r\n\r\nThank you for the explanation. I can understand your context now. I'll make sure to comment again later.",
          "@yusukebe I suppose it is somewhat reasonably common to want to use a different header name for providing a bearer token for authentication. I guess it depends on where you draw the line between 'batteries included' and 'extend it yourself'.\r\n\r\nFrom a web standards perspective, according to [RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750#section-2.1), the header name _can_ be changed, but it is clear which one is considered standard.\r\n> Clients SHOULD make authenticated requests with a bearer token using the \"Authorization\" request header field with the \"Bearer\" HTTP authorization scheme.  Resource servers MUST support this method.",
          "I might agree on pulling back this one. For my use case, I would most likely write my own middleware anyway to get more control over caching JWKS and such. :)",
          "@callumthomson Thank you for the comment!\r\n\r\n>  I guess it depends on where you draw the line between 'batteries included' and 'extend it yourself'.\r\n\r\nIndeed, you are right. For this case, I prefer \"batteries included.\" This means we can accept this feature to enable the change of the header name.\r\n\r\n@eliasbrange So, shall we go with it? I think there are some points to be reviewed, I'll comment.",
          "Hi @eliasbrange \r\n\r\nNow, I'll merge this into the \"next\" branch for the next minor release `v4.3.0` which will be shipped soon. Thanks for your contribution."
        ]
      },
      {
        "pr_number": 2553,
        "title": "feat(jsx/dom): improve compatibility with React",
        "body": "#2508\r\n\r\n### What is this?\r\n\r\nImprove compatibility with React and make the Getting started level code work for the following UI components\r\n\r\n* [react-toastify](https://github.com/fkhadra/react-toastify)\r\n* [spinners-react](https://github.com/adexin/spinners-react)\r\n* [Radix UI Primitives](https://www.radix-ui.com/primitives)\r\n\r\nhttps://github.com/honojs/hono/assets/30598/c86423d3-90d0-4296-8ae4-ff90a5432188\r\n\r\nby https://github.com/usualoma/hono-react-compat-demo\r\n\r\n### Simple usage \r\n\r\ntsconfig.json\r\nhttps://github.com/usualoma/hono-react-compat-demo/blob/main/tsconfig.json#L22-L28\r\n\r\nvite.config.ts\r\nhttps://github.com/usualoma/hono-react-compat-demo/blob/main/vite.config.ts#L5-L8\r\n\r\n#### You can use `/hono/jsx`\r\n\r\nIt is better to use `hono/jsx/dom` in terms of performance, but simply specifying `hono/jsx` works just as well.\r\n\r\ntsconfig.json\r\n```json\r\n   \"paths\": {\r\n      \"react\": [\"./node_modules/hono/dist/jsx\"],\r\n      \"react-dom\": [\"./node_modules/hono/dist/jsx/dom\"],\r\n    },\r\n```\r\n\r\nvite.config.ts\r\n```ts\r\n    alias: {\r\n      'react': 'hono/jsx',\r\n      'react-dom': 'hono/jsx/dom',\r\n    },\r\n```\r\n\r\n### New staffs\r\n\r\nThe following React compatible staffs are now exported from `hono/jsx` and `hono/jsx/dom`\r\n\r\n* `createRef`\r\n* `forwardRef`\r\n* `useImperativeHandle`\r\n* `useSyncExternalStore`\r\n\r\nThese staff are also exported from `hono/jsx/dom`.\r\n\r\n* `flushSync`\r\n* `createPortal`\r\n\r\n### Children\r\n\r\nImplement `Children` API\r\n\r\nhttps://react.dev/reference/react/Children#alternatives\r\n\r\n### CSS custom properties in style attribute\r\n\r\nCSS custom properties can now be exported.\r\n\r\n```tsx\r\n<div style={{\"--my-custom-property\": \"10px\"}}>{children}</div>\r\n```\r\n\r\n### defaultProps\r\n\r\n`defaultProps` is an old API, but there seems to be a library that uses it, so it is supported\r\n\r\nhttps://legacy.reactjs.org/docs/react-component.html#defaultprops\r\n\r\n### Bug fixes\r\n\r\nVarious bugs have been fixed, such as the behaviour when deleting Elements.\r\n\r\n### Compatibility with hono@v4.2.7\r\n\r\nThere are no breaking changes from v4.2.7. However, the internal structure has been significantly refactored and there is a possibility of unintended incompatible behaviour, so please check the behaviour of your application when updating.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2553",
        "comments": [
          "@usualoma \r\n\r\nCoooool! I've tried your repo, it works great!",
          "@yusukebe \r\nThanks for confirming.\r\nTests have been added and are ready for merging!",
          "Hi @usualoma !\r\n\r\nI'll merge this into the \"next\" branch! The next minor version will be released soon.",
          "Was able to integrate \r\nhttps://ui.shadcn.com/docs/components/calendar#form\r\nas an island with the above setup and 4.3.6. Picking works. The toast part doesn't yet.",
          "I might horribly be disoriented if the below is a missing piece, but let me share my poc:\r\n\r\nattachReactJsxNode.tsx:\r\n```javascript\r\nimport { useEffect } from 'hono/jsx'\r\nimport { render } from 'hono/jsx/dom'\r\n// import { v4 as uuidv4 } from 'uuid'\r\n// import { nanoid } from 'nanoid/non-secure';\r\n\r\nexport function attachReactJsxNode (\r\n  jsxNode: JSX.Element  // shall come from island or an other \"browser-time\" component\r\n) {\r\n  const mountPointId = _randomId()   // uuidv4() / nanoid()\r\n\r\n  useEffect(() => {\r\n    console.log('mounting a react-like component')\r\n    render(jsxNode, document.getElementById(mountPointId)!)\r\n  }, [])\r\n\r\n  return <span id={mountPointId} style={{display:'content'}} />\r\n}\r\n\r\n// if no random id lib used, then:\r\nfunction _randomId () { return Math.random().toString(36).replace(/^0\\./, '_') }\r\n\r\n```\r\n> UPD: renamed from mount... to attach... which is more browser-like, plus mount is already used by hono in a different context\r\n\r\n### Demo\r\nFrom: https://ui.shadcn.com/docs/components/tooltip\r\nIn islands:\r\n```javascript\r\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger,} \r\nfrom '@/components/ui/tooltip'\r\nimport { attachReactJsxNode } from '@/browser/attachReactJsxNode'\r\n\r\nexport default function TtDemo () {\r\n\r\n  const tt = \r\n    <TooltipProvider>\r\n      <Tooltip>\r\n        <TooltipTrigger>Hover</TooltipTrigger>\r\n        <TooltipContent>\r\n          <p>Add to library</p>\r\n        </TooltipContent>\r\n      </Tooltip>\r\n    </TooltipProvider>\r\n\r\n  return attachReactJsxNode(tt)\r\n}\r\n```\r\n(I still struggle with styles, but that must be my parallel tailwindcss v4-alpha experiments.)\r\n\r\n\r\n\r\n",
          "Hi @timurxyz \r\n\r\nIf you still think you want the feature/fix, can you create another issue?\r\n",
          "My experiment with getting _tamagui_ to show at least a button in the faked react was blocked by the currently missing useInsertionEffect.",
          "OK, I'll take a look.\r\n\r\n> tooltip, useInsertionEffect",
          "> Hi @timurxyz\r\n> \r\n> If you still think you want the feature/fix, can you create another issue?\r\n\r\n[2757](https://github.com/honojs/hono/issues/2757)"
        ]
      },
      {
        "pr_number": 2563,
        "title": "fix(jsx): preserve the state of element even if it is repeatedly evaluated by children",
        "body": "There was a bug where the hook state was not maintained when passed as `children`.\r\nThis is not a specification change, but a fix to the original expected behaviour, so a patch version release would be acceptable, but it might cause changes in the results in existing applications, so it is better to include it in a minor version update with #2553.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2563",
        "comments": [
          "Thank you @usualoma !\r\n\r\nI'll merge this into the \"next\" branch, which I will create later. The next minor version will be shipped soon!",
          "Merging now!"
        ]
      },
      {
        "pr_number": 2516,
        "title": "feat: expose built-in MIME types",
        "body": "This allows users reuse builtin MIME types while adding some custom.\r\n\r\n```js\r\nimport { baseMimes, getMimeType } from 'hono/utils/mime';\r\n\r\nconst mimes = {\r\n  ...baseMimes,\r\n  'my-own-ext': 'text/plain',\r\n};\r\n\r\ngetMimeType('base.my-own-ext', mimes)\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2516",
        "comments": [
          "I recognize that it can be accessed indirectly by calling `getMimeType` twice, and it's way more performant than copying all values per each request.\r\n\r\nHowever, copying once in advance is obviously 2x better than calling twice.",
          "Hi @cometkim !\r\n\r\nSorry to be late.\r\n\r\nThis sounds good. I've left a comment. Check it!\r\n\r\nIf this PR is OK, I'll merge this into the \"next\" branch for the next minor release.",
          "@cometkim \r\n\r\nThanks! Merging now."
        ]
      },
      {
        "pr_number": 2515,
        "title": "feat: expose serve-static builder",
        "body": "This allows accessing `middleware/serve-static` from third-party\r\n\r\n### Use case\r\n\r\nI run my own handler based on Cloudflare R2 to avoid the limitations of Cloudflare KV / Pages. And I found that most of the code I needed there was already built into hono.\r\n\r\nSo what I expect is like:\r\n\r\n```ts\r\nimport { Hono } from 'hono';\r\nimport { serveStatic as makeServe } from 'hono/base-serve-static';\r\n\r\nconst app = new Hono<Env>();\r\n\r\nconst serveContent = makeServe<Env>({\r\n  getContent: async (path, c) => {\r\n    // retrieve\r\n    let response = await cache.match(c.req.raw);\r\n\r\n    // ...get R2 object\r\n    if (!response) {\r\n      let obj = await c.env.CONTENT.get(path);\r\n      if (obj) {\r\n        response = obj.body;\r\n        c.executionCtx.waitUntil(cache.put(c.req.raw, obj.body));\r\n      }\r\n    }\r\n\r\n    c.body(response);\r\n  },\r\n});\r\n\r\napp.use(serveContent);\r\n\r\nexport default app;\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2515",
        "comments": [
          "Hi @cometkim \r\n\r\nThis is good! But please wait until I look over the details!",
          "@yusukebe added a type definition rather than `any` as it would be a public interface.\r\n\r\nAnd made some changes to allow a situation where users needed to create the Response object themselves. (e.g. using with Browser/Cloudflare's Cache API)",
          "@cometkim Thanks!"
        ]
      },
      {
        "pr_number": 2577,
        "title": "feat(secure-headers): enable to set nonce in CSP",
        "body": "https://github.com/honojs/honox/issues/157\r\n\r\n### Usage\r\n\r\n_middleware.ts\r\n```ts\r\nimport { createRoute } from \"honox/factory\";\r\nimport { secureHeaders, NONCE } from \"hono/secure-headers\";\r\n\r\nexport default createRoute(\r\n  secureHeaders({\r\n    contentSecurityPolicy: {\r\n      scriptSrc: [NONCE, 'https://allowed1.example.com', 'https://allowed2.example.com'],\r\n    },\r\n  })\r\n);\r\n```\r\n\r\n_renderer\r\n```ts\r\nimport { Style } from \"hono/css\";\r\nimport { jsxRenderer } from \"hono/jsx-renderer\";\r\nimport { Script } from \"honox/server\";\r\n\r\nexport default jsxRenderer(\r\n  ({ children, title }, c) => {\r\n    return (\r\n      <html lang=\"en\">\r\n        <head>\r\n          <meta charset=\"utf-8\" />\r\n          <meta\r\n            name=\"viewport\"\r\n            content=\"width=device-width, initial-scale=1.0\"\r\n          />\r\n          <title>{title}</title>\r\n          <Style />\r\n        </head>\r\n        <body>\r\n          {children}\r\n          <Script src=\"/app/client.ts\" async nonce={c.get('secureHeadersNonce')} />\r\n        </body>\r\n      </html>\r\n    );\r\n  },\r\n  { stream: true }\r\n);\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2577",
        "comments": [
          "### Customisation of nonce values.\r\n\r\nThe pre-defined `NONCE` is convenient, but if you want to generate the nonce value yourself, you can also specify a function as follows.\r\n\r\n```ts\r\nimport { createRoute } from \"honox/factory\";\r\nimport { secureHeaders, NONCE } from \"hono/secure-headers\";\r\n\r\nfunction myNonceGenerator(ctx) {\r\n  // This function is called on every request.\r\n  const nonce = Math.random().toString(36).slice(2)\r\n  ctx.set('myNonce', nonce)\r\n  return `'nonce-${nonce}'`\r\n}\r\n\r\nexport default createRoute(\r\n  secureHeaders({\r\n    contentSecurityPolicy: {\r\n      scriptSrc: [myNonceGenerator, 'https://allowed1.example.com', 'https://allowed2.example.com'],\r\n    },\r\n  })\r\n);\r\n```",
          "@yusukebe Would you please review?",
          "Hi @usualoma \r\n\r\nAlmost all is good! I've left some comments.",
          "All fixed!",
          "@usualoma \r\n\r\nThanks! Let's go with this."
        ]
      },
      {
        "pr_number": 2582,
        "title": "chore(pr_template): Use Bun instead of yarn",
        "body": "I feel strange when I create PR.\r\n\r\nThis project recommends Bun by default, so I think PR Template should use `bun denoify` instead of `yarn denoify`.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2582",
        "comments": ["@nakasyou \r\n\r\nExactly. It should be `bun`!"]
      },
      {
        "pr_number": 2583,
        "title": "feat(cloudflare-workers): deprecate `serveStatic`",
        "body": "### Author should do the followings, if applicable\r\n\r\nCloses #2580\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `bun denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2583",
        "comments": []
      },
      {
        "pr_number": 2581,
        "title": "feat(types): improve response types flow",
        "body": "Continuing from #2579\r\n\r\n**UPDATE:** All commits follows conventional syntax, recommended to merge without squashing.\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2581",
        "comments": [
          "Result image: support all JSONPrimitives types infer\r\n![image](https://github.com/honojs/hono/assets/23612546/ba4e469d-449d-4f3c-9a01-9a4848fa7c91)\r\n",
          "@NamesMT @nakasyou \r\n\r\n#2562 is good for handling WebSocket and other responses. But I think we can make it work with this PR when add `ws` as `ResponseFormat`:\r\n\r\nhttps://github.com/honojs/hono/blob/a1c42453d4bf14ca41d1aef9d29252fc7222d838/deno_dist/types.ts#L1722\r\n\r\nTo:\r\n\r\n```ts\r\nexport type ResponseFormat = 'json' | 'text' | 'ws'\r\n```\r\n\r\nWhat do you think of this? Adding this WebSocket matter in this PR is unnecessary since we can create another one after merging. Then we don't have to merge #2562. I think this is a good suggestion.",
          "Maybe we could do `ResponseFormat = KnownResponesFormats | string`\r\nThis is similar to #2562's idea, so that helpers / middlewares could type and parse their own ResponseFormat.\r\n\r\nI actually just made a re-implement of #2562 using this approach, will create a PR soon.",
          "@yusukebe \r\n\r\n>To:\r\n>\r\n> export type ResponseFormat = 'json' | 'text' | 'ws'\r\n>\r\n> What do you think of this? Adding this WebSocket matter in this PR is unnecessary since we can create another one after merging.\r\n\r\nYes, it's cool. I agree.\r\n\r\n> Then we don't have to merge https://github.com/honojs/hono/pull/2562. I think this is a good suggestion.\r\n\r\nBut, I can't agree for this now. Because this PR is not for only WebSockets. I'm assumed for creating 3rd-party protocols such as SSE, long-polling, typed WebSockets and others. I'm sorry if this is a misunderstanding.",
          "@NamesMT Goood! 6121f67ab0405ee410b126d3b9e8761453e43ef0 is what I want!\r\n\r\n@nakasyou \r\n\r\n> But, I can't agree for this now. Because this PR is not for only WebSockets. I'm assumed for creating 3rd-party protocols such as SSE, long-polling, typed WebSockets and others. I'm sorry if this is a misunderstanding.\r\n\r\nYes. As you said, it should support other protocols. I think the 6121f67ab0405ee410b126d3b9e8761453e43ef0 and #2588 by @NamesMT will resolve this matter, `ResponseFormat = KnownResponesFormats | string` can support SSE, Long-Poll, or others. What do you think about it?",
          "@yusukebe \r\n> Yes. As you said, it should support other protocols. I think the https://github.com/honojs/hono/commit/6121f67ab0405ee410b126d3b9e8761453e43ef0 and https://github.com/honojs/hono/pull/2588 by @NamesMT will resolve this matter, ResponseFormat = KnownResponesFormats | string can support SSE, Long-Poll, or others. What do you think about it?\r\n\r\nOh, I didn't know about that. https://github.com/honojs/hono/pull/2562 is not needed if this PR merged!\r\n",
          "That's great to hear.\r\n@yusukebe I think I will do a force-push to this PR and PR #2588 to re-write the commit history so we can merge without squash to get a more readable & meaningful commit history and with proper co-authoring notes for @nakasyou, is this ok?\r\n\r\nBTW, should I use `types:` or `feat/fix` for the commits history rewrite?\r\n\r\nEdit: Done, in the process I have also re-improve a few minor related bits that I found.",
          "@NamesMT\r\n> @nakasyou, is this ok?\r\n\r\nSure!",
          "Hi @NamesMT \r\n\r\nThank you for your care! But we ordinarily squash comments into one per PR when merging \"main\" or \"next\" which is for a next minor release, although a PR is big e.g. https://github.com/honojs/hono/pull/2553\r\n\r\nSo, I want you to rename #2579 and #2588 to their proper names, and I will merge them into the \"next.\" Also, I didn't review the details of each PR, I'll do that!",
          "Hi, I have closed #2579 in favor of this PR.\r\nI have also updated the PR names.",
          "@NamesMT \r\n\r\nThank you! Looks good. I'll merge this into the next first.\r\n"
        ]
      },
      {
        "pr_number": 2591,
        "title": "docs(readme): remove Benchmarks section",
        "body": "There is no need to write the benchmarks on README now.\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2591",
        "comments": []
      },
      {
        "pr_number": 2588,
        "title": "feat: improve `ToSchema` & `WebSocket Helper` types",
        "body": "A reimplement of #2562, using refactored types flow of #2581\r\n\r\n**UPDATE:** All commits follows conventional syntax, recommended to merge without squashing.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] ~~Add tests~~ Adjusted tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2588",
        "comments": [
          "@nakasyou @yusukebe FYI",
          "@NamesMT \r\n\r\nCan you rebase this PR on the latest \"next\"?",
          "Hi @yusukebe, it's done.",
          "@NamesMT @nakasyou \r\n\r\nThanks! Merging now."
        ]
      },
      {
        "pr_number": 2573,
        "title": "feat(factory): add `createApp()`",
        "body": "This PR introduces `createApp()` in `hono/factory` as an experimental feature. If you use this method with `createFactory()`, you can avoid redundancy in the definition of `Env` types.\r\n\r\nBefore:\r\n\r\n```ts\r\nconst app = new Hono<Env>()\r\n\r\nconst mw = createMiddleware<Env>(async(c, next) => {\r\n  await next()\r\n})\r\n```\r\n\r\nWith this PR:\r\n\r\n```ts\r\nconst factory = createFactory<Env>()\r\n\r\nconst app = factory.createApp()\r\n\r\nconst mw = factory.createMiddleware(async (c, next) => {\r\n  await next()\r\n})\r\n```\r\n\r\nUsing the \"Simple Factory\" pattern with the Factory helper, there is no need to write type definitions in `global.d.ts` with possible type conflicts. Also, you don't have to have `Env` definitions in multiple places.\r\n\r\n```ts\r\n// factory-with-db.ts\r\ntype Env = {\r\n  Bindings: {\r\n    MY_DB: D1Database\r\n  }\r\n  Variables: {\r\n    db: DrizzleD1Database\r\n  }\r\n}\r\n\r\nexport default createFactory<Env>({\r\n  initApp: (app) => {\r\n    app.use(async (c, next) => {\r\n      const db = drizzle(c.env.MY_DB)\r\n      c.set('db', db)\r\n      await next()\r\n    })\r\n  },\r\n})\r\n```\r\n\r\n```ts\r\n// crud.ts\r\nimport factoryWithDB from './factory-with-db'\r\n\r\nconst app = factoryWithDB.createApp()\r\n\r\napp.post('/posts', (c) => {\r\n  c.var.db.insert\r\n})\r\n```\r\n\r\nIn the future, I recommend the use of this \"Simple Factory\" pattern for larger applications, such as those using HonoX.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2573",
        "comments": [
          "Hi, @usualoma What do you think of this? I'd like to recommend the Factory pattern.",
          "@yusukebe \ud83d\udc4d We will be able to define an app concisely!",
          "@usualoma \r\n\r\nThanks!"
        ]
      },
      {
        "pr_number": 2592,
        "title": "feat(hc): add `init` option",
        "body": "Initally I used a function to merge the headers, but then realized it could be great if it could be used as highest priority control, added comment to tell user to be careful instead.\r\n\r\nResolves #2485\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2592",
        "comments": ["@NamesMT \r\n\r\nThis is a good feature! Let's ship it."]
      },
      {
        "pr_number": 2600,
        "title": "Next",
        "body": "v4.3",
        "html_url": "https://github.com/honojs/hono/pull/2600",
        "comments": []
      },
      {
        "pr_number": 2359,
        "title": "feat(timing): allow crossOrigin in TimingOptions to be a function",
        "body": "Currently, `hono/timing` allows you to specify a value for `crossOrigin` in `TimingOptions` which is used to define the `Timing-Allow-Origin` header. In one of my apps, I wanted to change what origins are allowed programmatically (similar to how you might want to set different CORS headers depending on what route is triggered). This PR support for that.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2359",
        "comments": [
          "Hi @jonahsnider !\r\n\r\nThis is a good feature! However, we must add a test. Can you add it?",
          "Yes, I'll try and add a test some time this weekend",
          "@yusukebe apologies for the big delay! I just added a test for the previously existing `crossOrigin` functionality, as well as the new behavior this PR adds. Please let me know if I should structure the test differently or make any other modifications.",
          "Hi @jonahsnider\r\n\r\n> @yusukebe apologies for the big delay!\r\n\r\nNo worry! I've rebased this into the next branch for the next minor release, v4.3.0. I'll merge now. Thanks!\r\n",
          "Sounds good, thanks!"
        ]
      },
      {
        "pr_number": 2600,
        "title": "Next",
        "body": "v4.3",
        "html_url": "https://github.com/honojs/hono/pull/2600",
        "comments": []
      }
    ],
    "v4.2.9": [
      {
        "pr_number": 2570,
        "title": "fix(context): correct set-cookie header values if c.res is set",
        "body": "Fixes #2566\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2570",
        "comments": []
      }
    ],
    "v4.2.8": [
      {
        "pr_number": 2548,
        "title": "fix(types): useState() has no type errors without arguments",
        "body": "fix #2547\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2548",
        "comments": [
          "@ryuapp Thank you.\r\nLGTM!",
          "@ryuapp \r\n\r\nThanks. Merging right now."
        ]
      },
      {
        "pr_number": 2549,
        "title": "chore(package.json): prettier use cache",
        "body": "It takes more than 5s to format codes with Prettier.\r\nUsing the cache, it will be less than 1s from the second time onwards.\r\n\r\nhttps://prettier.io/docs/en/cli.html#--cache\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2549",
        "comments": ["Wow cooool! This is awesome! Thanks."]
      },
      {
        "pr_number": 2545,
        "title": "fix(cloudflare-workers): do not buffer content",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2545",
        "comments": [
          "@cometkim \r\n\r\nThanks. Indeed, it should be a stream. Thanks."
        ]
      },
      {
        "pr_number": 2555,
        "title": "fix(context): keep response cookies in newResponse instead of overwriting",
        "body": "Potential fix for https://github.com/honojs/hono/issues/2554\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2555",
        "comments": [
          "Hi @ItsWendell !\r\n\r\nThe issue should be fixed and this PR is good! I've left some comments.",
          "@yusukebe appreciate it, I've cleaned up the tests and resolved your comments!",
          "@ItsWendell \r\n\r\nThanks! I'll merge it and release a new patch version!"
        ]
      }
    ],
    "v4.2.7": [],
    "v4.2.6": [
      {
        "pr_number": 2521,
        "title": "refactor(adapter/aws): Optimize multiple call of same conditions with polymorphism ",
        "body": "### Summary\r\n\r\n- Conditional logics are capsulated in the subclasses of `EventProcessor<E extends LambdaEvent>`.\r\n- Those classes are stateless, so singleton is used to avoid allocation.\r\n- Redundant calling `isProxyEventV2` is optimized, now only one time per event.\r\n- Not in this PR, but this refactoring may also allow some room for optimization for particular Lambda events.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2521",
        "comments": ["@exoego \r\n\r\nMerging now. Thanks!"]
      },
      {
        "pr_number": 2529,
        "title": "fix(sse): close sse stream on end",
        "body": "Adds a finally block to the SSEStream class. Otherwise streamSSE will error whenever used in Cloudflare Workers.\r\n\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2529",
        "comments": [
          "Closes #1918",
          "Hi @domeccleston \r\n\r\nLooks good! One thing, can you run `bun run denoify` or `yarn denoify` to generate file for Deno and git add&commit&push?",
          "@yusukebe Done \ud83e\udee1",
          "HI @domeccleston \r\n\r\nI've added a test by myself. It's ready to merge! Thanks!",
          "Thanks for quickly merging it @yusukebe ! I will add a test next time."
        ]
      },
      {
        "pr_number": 2532,
        "title": "fix(client): Don't show `$ws` when not used WebSockets",
        "body": "In client, IntelliSense always shows `(route).$ws` property.\r\nI think client doesn't have to show `(route).$ws` property when route doesn't use WebSocket helper.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2532",
        "comments": [
          "Hi @nakasyou !\r\n\r\nSuper cool! I love it.\r\n\r\nI want to merge this, but do you have any idea how to write tests? It's better to write a test, though it seems a little bit difficult because it is Types of matter.",
          "@yusukebe\r\n> I want to merge this, but do you have any idea how to write tests? It's better to write a test, though it seems a little bit difficult because it is Types of matter.\r\n\r\nI searched about it, then I found that Vitest has a way of testing types. So I made test using this.\r\n\r\nReference:\r\n- https://www.totaltypescript.com/how-to-test-your-types\r\n- https://vitest.dev/guide/testing-types.html\r\n",
          "@nakasyou \r\n\r\nAwesome! That's best.\r\n\r\nLet's ship it. Thanks!"
        ]
      },
      {
        "pr_number": 2519,
        "title": "refactor(ssg): update utils.ts",
        "body": "splitedPath -> splittedPath\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2519",
        "comments": [
          "Hi @eltociear !\r\n\r\nThanks! Looks good. One thing: could you run `bun run denoify` or `yarn denoify` to generate a file for Deno and git add&commit&push it.",
          "Hi @eltociear \r\n\r\nI've denoified by myself. Now, we can merge it. Thanks!"
        ]
      }
    ],
    "v4.2.5": [
      {
        "pr_number": 2510,
        "title": "fix(client): Allow calling toString and valueOf on the proxy object",
        "body": "Fixes #2509\r\n\r\nWhen a hono client is instantiated in expo and then console.log(client) is called, an error is thrown:\r\n\r\n`TypeError: Cannot determine default value of object`\r\n\r\nThis is because the hermes javascript engine expects `new String(val)` to always return a string. But the proxy object would return a ClientRequestImpl object instead.\r\n\r\nThis commit makes a string / function returned in the cases where .toString() and .valueOf() is called on the function.name or function respectively.\r\n\r\nAlso see https://github.com/facebook/hermes/issues/205\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [X] Add tests\r\n- [X] Run tests (vitest seems to mess up the bun test runner, so comment out that import)\r\n- [X] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2510",
        "comments": [
          "Hi @ibash \r\n\r\nThank you for the PR. Almost everything is okay. But can you fix the TypeScript errors? I think it's not a problem to use `// @ts-ignore`.",
          "@yusukebe woops, sorry about that, fixed!",
          "@ibash \r\n\r\nThanks! I'll merge this now."
        ]
      },
      {
        "pr_number": 2494,
        "title": "fix(adapter): handle multi value headers in AWS Lambda",
        "body": "Fixes https://github.com/honojs/hono/issues/2493\r\nFixes https://github.com/honojs/hono/issues/2495\r\n\r\n## Fixes for #2493\r\nThe current implementation assumes `headers` are always defined, which is incorrect \r\n`headers` can be `undefined` if `multiValueHeaders` exists,, and vice-versa, since`headers` and `multiValueHeaders` are mutually exclusive.\r\n\r\n[`aws-lambda` type definition](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/46eab7d3077fa7939a1b11efc24358c06838df71/types/aws-lambda/trigger/alb.d.ts#L29-L39) in DefinitelyTyped also does so:\r\n ```typescript\r\nexport interface ALBEvent {\r\n    requestContext: ALBEventRequestContext;\r\n    httpMethod: string;\r\n    path: string;\r\n    queryStringParameters?: ALBEventQueryStringParameters | undefined; // URL encoded\r\n    headers?: ALBEventHeaders | undefined;\r\n    multiValueQueryStringParameters?: ALBEventMultiValueQueryStringParameters | undefined; // URL encoded\r\n    multiValueHeaders?: ALBEventMultiValueHeaders | undefined;\r\n    body: string | null;\r\n    isBase64Encoded: boolean;\r\n}\r\n```\r\n\r\n## Fixes for #2495\r\n\r\nThis PR also fixes a conversion from Lambda Event to Request for all event types (ALB, API GW V1/V2).\r\nThe current implementation does not extract values from multi-value headers.  \r\nThe new impl. extract values and delegates those to Request objects, using [Header#append](https://developer.mozilla.org/en-US/docs/Web/API/Headers/append).\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2494",
        "comments": [
          "Hi @exoego \r\n\r\nThank you for the PR. Looks good to me. But I'd like @watany-dev to review it. @watany-dev Can you do it?",
          "@exoego \r\nThanks for fixing it. I made a couple of comments, can I ask you to check them out?",
          "@watany-dev Please take a look \ud83d\ude47",
          "Hey @watany-dev, Can you see this?",
          "@exoego @yusukebe \r\nSorry to keep you waiting. I think it's good.",
          "@watany-dev Thanks!\r\n\r\nI also think it looks good. @exoego Can I merge this now?",
          "@yusukebe Yessss, it's ready to be merged ",
          "@exoego \r\n\r\nOkay! Let's go!"
        ]
      },
      {
        "pr_number": 2523,
        "title": "fix(client): shuold not remove tailing slash from top-level URL",
        "body": "`removeIndexString` should not remove a trailing slash from a top-level URL.\r\n\r\nFixes #2522\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2523",
        "comments": []
      },
      {
        "pr_number": 2524,
        "title": "fix(jsx/dom): remove lookbehind assertion in event regexp",
        "body": "fixes #2517\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2524",
        "comments": ["@usualoma \r\n\r\nThanks! Merging now."]
      }
    ],
    "v4.2.4": [
      {
        "pr_number": 2488,
        "title": "fix(jwt): Make JWT Header `typ` Field Optional to Enhance Compatibility",
        "body": "This PR modifies the JWT header verification to make the `typ` field optional. This change is aligned with the JWT specifications as outlined in RFC 7519 Section 5.1, where the `typ` header parameter is optional. This adjustment was necessary to accommodate tokens, such as those decoded from Cloudflare Access's `CF_Authorization`, which do not include the `typ` field, thus previously preventing successful verification.\r\n\r\n### Changes Made\r\n- Made the `typ` field in the `TokenHeader` interface optional.\r\n- Updated the `isTokenHeader` function to validate headers with or without the `typ` field.\r\n\r\nReference to the RFC: [JWT RFC 7519 Section 5.1](https://datatracker.ietf.org/doc/html/rfc7519#section-5.1)\r\n\r\nThe necessity for this change arose during the verification of JWT tokens from Cloudflare Access, where the absence of the `typ` field led to verification issues. By accommodating tokens without the `typ` field, this PR ensures broader compatibility and adherence to the JWT standard.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [X] Add tests\r\n- [X] Run tests\r\n- [X] `yarn denoify` to generate files for Deno",
        "html_url": "https://github.com/honojs/hono/pull/2488",
        "comments": [
          "Hi @naporin0624 !\r\n\r\nThanks for the PR. Seems to be good for me.\r\n\r\n@Code-Hex Could you review this one?",
          "Thanks! I'll merge this now.",
          "thanks!"
        ]
      },
      {
        "pr_number": 2496,
        "title": "fix(testing): set `baseUrl` for `testClient`",
        "body": "Fixes #2490\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2496",
        "comments": []
      },
      {
        "pr_number": 2500,
        "title": "fix(validator): Default use to `OutputTypeExcludeResponseType` when `InputType` is unknown",
        "body": "This PR fixed an issue where the type was not shared properly on the Hono Client side when `json` was specified for the `validator` function.\r\n\r\n### Changes\r\n\r\n- Default use to `OutputTypeExcludeResponseType` when `InputType` is unknown\r\n\r\n### Example Scenario and Code Snippet\r\n\r\n```ts\r\nconst app = new Hono()\r\n\r\nconst route = app.post(\r\n  '/foo',\r\n  validator('json', () => {\r\n    return {} as {\r\n      id: number\r\n      title: string\r\n    }\r\n  }),\r\n  (c) => {\r\n    return c.json({})\r\n  }\r\n)\r\n\r\ntype AppType = typeof route\r\nconst client = hc<AppType>('http://localhost')\r\n\r\nclient.foo.$post({\r\n  // Previously, this would result in `unknown` instead of `{ id: number; title: string; }`\r\n  json: {\r\n    id: 1,\r\n    title: 'title'\r\n  }\r\n})\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2500",
        "comments": [
          "Hi @nagasawaryoya !\r\n\r\nLooks good. I'll merge this into the main now. Thanks for your contribution.",
          "thanks!"
        ]
      },
      {
        "pr_number": 2503,
        "title": "refactor(trie-router): parentPatterns is updated but never queried",
        "body": "It appears that `parentPatterns` is updated but its content is never referenced.\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2503",
        "comments": ["@exoego Thanks!"]
      },
      {
        "pr_number": 2502,
        "title": "refactor: Remove redundant initializer",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2502",
        "comments": ["@exoego \r\n\r\nGood! I'll merge this now. Thanks!"]
      },
      {
        "pr_number": 2504,
        "title": "refactor(cloudflare-workers): Suppress eslint noise",
        "body": "As a contributor, it is annoying to see unaddressed warnings on `pnpm lint`.\r\n\r\n\r\n```\r\n/Users/exoego/IdeaProjects/hono/src/adapter/cloudflare-workers/websocket.test.ts\r\n  23:24  warning  'ws' is defined but never used  @typescript-eslint/no-unused-vars\r\n\r\n\u2716 1 problem (0 errors, 1 warning)\r\n```\r\n\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2504",
        "comments": [
          "Hi @exoego \r\n\r\nYou are right. We can remove the warning. Thanks!"
        ]
      },
      {
        "pr_number": 2471,
        "title": "fix(jsx): Add catch to async function's promise",
        "body": "The `.then(async function())` returns a new promise, that the above .catch() does not catch, resulting in rapid refreshing of the page to cause a fatal uncatchable error. Adding this second .catch fixes that.\r\n\r\n\r\n## The problem: \r\n\r\nIf you're streaming a response, via renderToReadableStream from hono/jsx/streaming, and you rapidly refresh your page, you can trigger an error:\r\n\r\n```sh\r\nTypeError: Invalid state: Controller is already closed\r\n    at new NodeError (node:internal/errors:405:5)\r\n    at ReadableStreamDefaultController.enqueue (node:internal/webstreams/readablestream:1038:13)\r\n    at /Users/markwilkins/projects/wilkins-software-nx-v2/node_modules/hono/dist/cjs/jsx/streaming.js:137:24\r\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\r\n```\r\n\r\nwhich is uncatchable as far as I can tell. \r\n\r\n![Apr-05-2024 21-53-51](https://github.com/honojs/hono/assets/21322162/3c21e83b-0771-47ce-9278-388300916bd2)\r\n\r\n## The fix:\r\n\r\nSince the [catch block](https://github.com/honojs/hono/blob/e428a053161e6c7f29d7e9776675fa1f7e7cceec/src/jsx/streaming.ts#L138) above is applied to the `promise` variable, but not to the promise returned by [the async function in the .then()](https://github.com/honojs/hono/blob/e428a053161e6c7f29d7e9776675fa1f7e7cceec/src/jsx/streaming.ts#L142), the call to enqueue on [line 150](https://github.com/honojs/hono/blob/e428a053161e6c7f29d7e9776675fa1f7e7cceec/src/jsx/streaming.ts#L150) can fail due to a closed connection. \r\n\r\n\r\nFixing it is as simple as adding another .catch, as funny as it looks at first glance. \r\n\r\n![Apr-05-2024 21-56-58](https://github.com/honojs/hono/assets/21322162/de63af22-09e8-45c0-b97a-e72373e2fc6e)\r\n\r\n\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2471",
        "comments": [
          "Hi @mwilkins91 \r\n\r\nThanks for making the pull request. There are indeed some issues you point out, which I think will be fixed in this PR. Please wait a bit so I can look at the whole thing and comment.",
          "@usualoma Thanks! Let me know if I can help. ",
          "Hi @mwilkins91 !\r\n\r\nI consider the following\r\n\r\n* Errors in `controller.enqueue()` are no longer expected to be recovered, so I think we should handle them with an outer `try` clause.\r\n* If the client disconnects first, it is generally not a fatal error on the server side, so it would be nice to be able to ignore the log.\r\n    * On node-server, this is output in info : https://github.com/honojs/node-server/blob/e76c687178f403c524b13651c16580f66b7edeb4/src/listener.ts#L26\r\n    * Elsewhere in the project, it can be controlled by onError. https://github.com/honojs/hono/blob/e428a053161e6c7f29d7e9776675fa1f7e7cceec/deno_dist/helper/streaming/sse.ts#L41\r\n\r\nGiven these assumptions, I would suggest the following patches to this matter. If you have no objection, I would be happy to have this change incorporated into the PR.\r\n\r\n```diff\r\ndiff --git a/src/jsx/streaming.test.tsx b/src/jsx/streaming.test.tsx\r\nindex 0c9ba6e1..c5cd5579 100644\r\n--- a/src/jsx/streaming.test.tsx\r\n+++ b/src/jsx/streaming.test.tsx\r\n@@ -390,10 +390,12 @@ d.replaceWith(c.content)\r\n       return <p>{content}</p>\r\n     }\r\n \r\n+    const onError = vi.fn()\r\n     const stream = renderToReadableStream(\r\n       <Suspense fallback={<p>Loading...</p>}>\r\n         <Content />\r\n-      </Suspense>\r\n+      </Suspense>,\r\n+      onError\r\n     )\r\n \r\n     const chunks = []\r\n@@ -402,6 +404,8 @@ d.replaceWith(c.content)\r\n       chunks.push(textDecoder.decode(chunk))\r\n     }\r\n \r\n+    expect(onError).toBeCalledTimes(1)\r\n+\r\n     expect(chunks).toEqual([\r\n       `<template id=\"H:${suspenseCounter}\"></template><p>Loading...</p><!--/$-->`,\r\n       '',\r\n@@ -412,6 +416,55 @@ d.replaceWith(c.content)\r\n     )\r\n   })\r\n \r\n+  it('closed()', async () => {\r\n+    const Content = async () => {\r\n+      await new Promise<void>((resolve) =>\r\n+        setTimeout(() => {\r\n+          vi.spyOn(ReadableStreamDefaultController.prototype, 'enqueue').mockImplementation(() => {\r\n+            throw new Error('closed')\r\n+          })\r\n+          resolve()\r\n+        }, 10)\r\n+      )\r\n+      return <p>content</p>\r\n+    }\r\n+\r\n+    const onError = vi.fn()\r\n+    const stream = renderToReadableStream(\r\n+      <>\r\n+        <Suspense fallback={<p>Loading...</p>}>\r\n+          <Content />\r\n+        </Suspense>\r\n+        <Suspense fallback={<p>Loading...</p>}>\r\n+          <Content />\r\n+        </Suspense>\r\n+      </>,\r\n+      onError\r\n+    )\r\n+\r\n+    const chunks = []\r\n+    const textDecoder = new TextDecoder()\r\n+    for await (const chunk of stream as any) {\r\n+      chunks.push(textDecoder.decode(chunk))\r\n+    }\r\n+\r\n+    expect(onError).toBeCalledTimes(1)\r\n+\r\n+    expect(chunks).toEqual([\r\n+      `<template id=\"H:${suspenseCounter}\"></template><p>Loading...</p><!--/$--><template id=\"H:${\r\n+        suspenseCounter + 1\r\n+      }\"></template><p>Loading...</p><!--/$-->`,\r\n+    ])\r\n+\r\n+    expect(replacementResult(`<html><body>${chunks.join('')}</body></html>`)).toEqual(\r\n+      '<p>Loading...</p><!--/$--><p>Loading...</p><!--/$-->'\r\n+    )\r\n+\r\n+    suspenseCounter++\r\n+    await new Promise((resolve) => setTimeout(resolve, 10))\r\n+    vi.restoreAllMocks()\r\n+  })\r\n+\r\n   it('Multiple \"await\" call', async () => {\r\n     const delayedContent = new Promise<HtmlEscapedString>((resolve) =>\r\n       setTimeout(() => resolve(<h1>Hello</h1>), 10)\r\ndiff --git a/src/jsx/streaming.ts b/src/jsx/streaming.ts\r\nindex fac77193..5df7a3e4 100644\r\n--- a/src/jsx/streaming.ts\r\n+++ b/src/jsx/streaming.ts\r\n@@ -116,48 +116,60 @@ const textEncoder = new TextEncoder()\r\n  * The API might be changed.\r\n  */\r\n export const renderToReadableStream = (\r\n-  str: HtmlEscapedString | Promise<HtmlEscapedString>\r\n+  str: HtmlEscapedString | Promise<HtmlEscapedString>,\r\n+  onError: (e: unknown) => void = console.trace\r\n ): ReadableStream<Uint8Array> => {\r\n   const reader = new ReadableStream<Uint8Array>({\r\n     async start(controller) {\r\n-      const tmp = str instanceof Promise ? await str : await str.toString()\r\n-      const context = typeof tmp === 'object' ? tmp : {}\r\n-      const resolved = await resolveCallback(\r\n-        tmp,\r\n-        HtmlEscapedCallbackPhase.BeforeStream,\r\n-        true,\r\n-        context\r\n-      )\r\n-      controller.enqueue(textEncoder.encode(resolved))\r\n-\r\n-      let resolvedCount = 0\r\n-      const callbacks: Promise<void>[] = []\r\n-      const then = (promise: Promise<string>) => {\r\n-        callbacks.push(\r\n-          promise\r\n-            .catch((err) => {\r\n-              console.trace(err)\r\n-              return ''\r\n-            })\r\n-            .then(async (res) => {\r\n-              res = await resolveCallback(res, HtmlEscapedCallbackPhase.BeforeStream, true, context)\r\n-              ;(res as HtmlEscapedString).callbacks\r\n-                ?.map((c) => c({ phase: HtmlEscapedCallbackPhase.Stream, context }))\r\n-                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n-                .filter<Promise<string>>(Boolean as any)\r\n-                .forEach(then)\r\n-              resolvedCount++\r\n-              controller.enqueue(textEncoder.encode(res))\r\n-            })\r\n+      try {\r\n+        const tmp = str instanceof Promise ? await str : await str.toString()\r\n+        const context = typeof tmp === 'object' ? tmp : {}\r\n+        const resolved = await resolveCallback(\r\n+          tmp,\r\n+          HtmlEscapedCallbackPhase.BeforeStream,\r\n+          true,\r\n+          context\r\n         )\r\n-      }\r\n-      ;(resolved as HtmlEscapedString).callbacks\r\n-        ?.map((c) => c({ phase: HtmlEscapedCallbackPhase.Stream, context }))\r\n-        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n-        .filter<Promise<string>>(Boolean as any)\r\n-        .forEach(then)\r\n-      while (resolvedCount !== callbacks.length) {\r\n-        await Promise.all(callbacks)\r\n+        controller.enqueue(textEncoder.encode(resolved))\r\n+\r\n+        let resolvedCount = 0\r\n+        const callbacks: Promise<void>[] = []\r\n+        const then = (promise: Promise<string>) => {\r\n+          callbacks.push(\r\n+            promise\r\n+              .catch((err) => {\r\n+                console.log(err)\r\n+                onError(err)\r\n+                return ''\r\n+              })\r\n+              .then(async (res) => {\r\n+                res = await resolveCallback(\r\n+                  res,\r\n+                  HtmlEscapedCallbackPhase.BeforeStream,\r\n+                  true,\r\n+                  context\r\n+                )\r\n+                ;(res as HtmlEscapedString).callbacks\r\n+                  ?.map((c) => c({ phase: HtmlEscapedCallbackPhase.Stream, context }))\r\n+                  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n+                  .filter<Promise<string>>(Boolean as any)\r\n+                  .forEach(then)\r\n+                resolvedCount++\r\n+                controller.enqueue(textEncoder.encode(res))\r\n+              })\r\n+          )\r\n+        }\r\n+        ;(resolved as HtmlEscapedString).callbacks\r\n+          ?.map((c) => c({ phase: HtmlEscapedCallbackPhase.Stream, context }))\r\n+          // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n+          .filter<Promise<string>>(Boolean as any)\r\n+          .forEach(then)\r\n+        while (resolvedCount !== callbacks.length) {\r\n+          await Promise.all(callbacks)\r\n+        }\r\n+      } catch (e) {\r\n+        // maybe the connection was closed\r\n+        onError(e)\r\n       }\r\n \r\n       controller.close()\r\n```",
          "That seems to make sense to me @usualoma! When you say `If you have no objection, I would be happy to have this change incorporated into the PR.` do you mean that you'll make that change? or would you like me to make it?",
          "Hi @mwilkins91!\r\n\r\nThanks for the confirmation.\r\nI am thinking that you can have the content of this PR changed to the diff I made above and add it as your commits.\r\nWe can have @yusukebe review it and merge it into the main branch.",
          "Yes. \r\n\r\n@mwilkins91, can you apply the diff to this PR? If it's done, I'll merge it into main with @usualoma as a co-author.",
          "Sounds perfect, I'll do that tonight!",
          "@yusukebe done!",
          "@mwilkins91 Thanks!\r\n\r\nOne thing. Can you run `bun run denoify` or `yarn denoify` and git add&commit&push the generated file.",
          "@yusukebe like so? https://github.com/honojs/hono/pull/2471/commits/3ec79b3163dd34ed0b3036351eec1e802e8eaca4",
          "@mwilkins91 Yup. That's right!\r\n\r\nI'll merge this now. Thanks!"
        ]
      }
    ],
    "v4.2.3": [
      {
        "pr_number": 2477,
        "title": "fix(ssg): use response header to mark as disabled routes for SSG",
        "body": "Fixes #2476, https://github.com/honojs/honox/issues/58\r\n\r\nAs for #2179, using `c.env` to make the decision was a good change, but the decision in the response header should have been left as is. The response header is used again in this PR.\r\n\r\nSince we use response headers in this PR, we can also remove the `new Response` before the request that causes an error in Cloudflare worker, but since it should not be changed in the patch version, we leave it marked as deprecated.\r\n\r\nAlso, if we can make it so that the response headers are used, the following issue will be fixed.\r\nhttps://github.com/honojs/honox/issues/58\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2477",
        "comments": [
          "@yusukebe \r\nWould you please review?",
          "Hi @usualoma \r\n\r\nThanks. I'll merge this now."
        ]
      },
      {
        "pr_number": 2483,
        "title": "fix(trailing-slash): export types in `package.json` correctly",
        "body": "Fixes #2482\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2483",
        "comments": []
      },
      {
        "pr_number": 2479,
        "title": "fix(client): fix websocket client protocol",
        "body": "This PR fixes an issue in the Hono client where WebSocket connections could not be established due to the `hc` function's `baseUrl` containing `http` or `https` schemes. Given that the WebSocket API requires URLs to use the `ws` or `wss` schemes, our existing implementation led to errors when attempting WebSocket connections with `http` or `https` URLs.\r\n\r\nTo address this, we've introduced a utility function, `replaceUrlProtocol`, which converts `http` URLs to `ws` and `https` URLs to `wss` for WebSocket connections. This ensures compatibility with the WebSocket API and resolves the protocol mismatch issue.\r\n\r\nThis change allows for seamless WebSocket communication within Hono applications by correctly handling the URL schemes required for WebSocket connections.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [X] Add tests\r\n- [X] Run tests\r\n- [X] `yarn denoify` to generate files for Deno",
        "html_url": "https://github.com/honojs/hono/pull/2479",
        "comments": [
          "@naporin0624 \r\n\r\nThanks! This will be a good fix. I've left one comment. Check it.",
          "@naporin0624 Merging now. Thanks for your contribution."
        ]
      }
    ],
    "v4.2.2": [
      {
        "pr_number": 2459,
        "title": "feat(jsx-renderer): pass the context as 2nd arg",
        "body": "Fixes https://github.com/honojs/honox/issues/132\r\n\r\nWith this PR, you can get the context object in the component:\r\n\r\n```ts\r\napp.use(\r\n  jsxRenderer(\r\n    ({ children }, c) => {\r\n      return (\r\n        <div>\r\n          {children} at {c.req.path}\r\n        </div>\r\n      )\r\n    },\r\n    { docType: false }\r\n  )\r\n)\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2459",
        "comments": [
          "Hi @usualoma !\r\n\r\nCould you review this one?",
          "LGTM \ud83d\udc4d ",
          "@usualoma Thanks!\r\n\r\nI'll release this feature as a patch release since this is a minor `feat.`"
        ]
      },
      {
        "pr_number": 2461,
        "title": "feat(client): accept a function that provides dynamic headers to hc",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\nFixes #2460\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2461",
        "comments": [
          "Hi @niko-gardenanet \r\n\r\nThanks for the PR. Looks good. Let's go with it.\r\n\r\nI'll merge this into the main right now and release a patch that includes this change."
        ]
      },
      {
        "pr_number": 2469,
        "title": "fix(client): infer `null` correctly",
        "body": "Fixes #2465\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2469",
        "comments": []
      }
    ],
    "v4.2.1": [
      {
        "pr_number": 2458,
        "title": "fix(jws): Only import necessary helper (not all helpers)",
        "body": "This change prevents bundlers from pulling in all helpers, including the \"ssg\" helper which is not compatible with Cloudflare workers as it creates a \"Request\" in the global scope, and only imports the required (adapter) helper.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2458",
        "comments": [
          "An easy way to see this happening is by looking at the output of `esm.sh`. If you navigate to `https://esm.sh/hono@4.2.0/utils/jwt/jws.js`, you'll see the following output:\r\n\r\n```js\r\n/* esm.sh - hono@4.2.0/utils/jwt/jws */\r\nimport \"/v135/hono@4.2.0/es2022/utils/encode.js\";\r\nimport \"/v135/hono@4.2.0/es2022/utils/jwt/types.js\";\r\nimport \"/v135/hono@4.2.0/es2022/utils/jwt/utf8.js\";\r\nimport \"/v135/hono@4.2.0/es2022/accepts.js\";\r\nimport \"/v135/hono@4.2.0/es2022/adapter.js\";\r\nimport \"/v135/hono@4.2.0/es2022/cookie.js\";\r\nimport \"/v135/hono@4.2.0/es2022/css.js\";\r\nimport \"/v135/hono@4.2.0/es2022/factory.js\";\r\nimport \"/v135/hono@4.2.0/es2022/html.js\";\r\nimport \"/v135/hono@4.2.0/es2022/streaming.js\";\r\nimport \"/v135/hono@4.2.0/es2022/testing.js\";\r\nimport \"/v135/hono@4.2.0/es2022/dev.js\";\r\nimport \"/v135/hono@4.2.0/es2022/jwt.js\";\r\nimport \"/v135/hono@4.2.0/es2022/ssg.js\";\r\nexport * from \"/v135/hono@4.2.0/es2022/utils/jwt/jws.js\";\r\n```\r\n\r\nHere you'll notice that we're pulling in all helpers even thought the \"jws\" utility only needs the \"adapter\" helper. \r\n\r\n",
          "Hi @nicksrandall !\r\n\r\nThanks for the PR. This should be fixed and looks good. One thing. Could you run `bun run denoify` or `yarn denoify` to generate a file for Deno?",
          "@nicksrandall \r\n\r\nI've done it by myself. Merging now. Thanks!"
        ]
      }
    ],
    "v4.2.0": [
      {
        "pr_number": 2446,
        "title": "feat(jwt): literal typed `alg` option value",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2446",
        "comments": []
      },
      {
        "pr_number": 2447,
        "title": "test(ssg): add test for content-type includes `;`",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2447",
        "comments": []
      },
      {
        "pr_number": 2448,
        "title": "feat(jwt): add `JwtTokenInvalid` object as `cause` when JWT is invalid",
        "body": "Fixes #2415\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2448",
        "comments": []
      },
      {
        "pr_number": 2449,
        "title": "feat(bearer-auth): add `verifyToken` option",
        "body": "This PR will fix #2316 and #2410.\r\n\r\nWith this PR, it enables passing the function to verify the token in Bearer Middleware.\r\n\r\n```ts\r\napp.use(\r\n  '/auth-verify-token/*',\r\n  bearerAuth({\r\n    verifyToken: async (token) => {\r\n      return token === 'dynamic-token'\r\n    },\r\n  })\r\n)\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2449",
        "comments": [
          "LGTM thanks for the work @yusukebe! \ud83d\udc4d \r\n\r\nIf I had to nitpick I'd say `c` should be the first argument passed to `verifyToken` instead of `token` but it's great as it is!"
        ]
      },
      {
        "pr_number": 2450,
        "title": "feat(basic-auth): add `verifyUser` option",
        "body": "This PR will fix #2316 and #2410.\r\n\r\nWith this PR, it enables passing the function to verify the username and password in Basic Auth Middleware.\r\n\r\n```ts\r\napp.use(\r\n  basicAuth({\r\n    verifyUser: (username, password, c) => {\r\n        return (\r\n          username === 'dynamic-user' &&\r\n          password === 'hono-password'\r\n        )\r\n    },\r\n  })\r\n)\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2450",
        "comments": []
      },
      {
        "pr_number": 2454,
        "title": "Next",
        "body": "Ready for **v4.2**.\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2454",
        "comments": []
      }
    ],
    "v4.2.0-rc.1": [
      {
        "pr_number": 2339,
        "title": "feat(jwt): supported RS256, RS384, RS512 algorithm for JWT",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2339",
        "comments": [
          "Hi @Code-Hex thanks!\r\n\r\nFor me, it looks good.\r\n\r\n@metrue If you have time, could you review this?",
          "Sure, I will finish the review by end of today.",
          "@metrue Thanks!",
          "It's great to have this, LGTM, thanks @Code-Hex ",
          "@metrue Thanks for your review!",
          "Great job @Code-Hex !\r\n\r\nWe can ship this change now, but since this is a new feature, I wonder if we should release it as a patch or a minor release.\r\n\r\nMy current conclusion is that this is an important feature for JWT users, so I would prefer to ship it in a minor release after all or some of the remaining algorithms are implemented.\r\n\r\nFor that reason, I will not merge this right now but later if good timing has come.",
          "@yusukebe It was completely unexpected.\n\nWouldn't it be better to provide the parts of the system in the order in which they are available to us as users? This is my opinion, but I thought it would be better if we could release them in smaller units.\n\nAnyway, There are several points to consider when releasing a batch.\n\n1. the goal is to implement and release all algorithms only\n2. only validate the various critical parameters (headers and payloads) that remain vulnerable\n3. implement all of 1 and 2\n\nEach of these is what we are considering.\n\n1. this does not require any destructive changes and can be released on a fine-grained, algorithm-by-algorithm basis, regardless of my schedule.\n2. it will almost certainly involve disruptive changes. I don't know what kind of change it will be, and I honestly don't know if it will be a big change or just a small one.\n3. disruptive changes can happen because of 2.\n\nThe one thing they all have in common is that I won't know what the changes will be until I actually write the code. That and I need the code base for this PR.\n\n@yusukebe How far do you consider working with 1, 2, or 3?\n\n---\n\nI am not a repository manager, so it is difficult to develop on a per-feature basis.\n\nCan you provide a base branch for JWT on honojs/hono?\n\nIf you can do that, I can merge into it and then send a PR to merge that branch into the main branch before release.",
          "Hi @Code-Hex .\r\n\r\nSorry for deciding without your opinion!\r\n\r\n> 1. the goal is to implement and release all algorithms only\r\n\r\nI was thinking of **1**. This means \"just the algorithms\".\r\n\r\nSince \"header and payload validation\" would result in a breaking change, I think it would be better to make that change at the time of the major releasing `v5`.\r\n\r\n> Wouldn't it be better to provide the parts of the system in the order in which they are available to us as users? \r\n\r\nYes. I agree. You do not have to rush to implement them! \r\n\r\nThere is no definite release plan, but minor releases have been made at least once a month. I think the next one will be in mid-April and it's better to ship **only** those algorithms that are complete at that time.\r\n\r\nOr do you want to release it as a patch-release (We must not necessarily follow semver unless breacking changes!)? This is a PR you created, and we would like to honor it.\r\n ",
          "Again, I do not force or rush contributors into anything! If I am missing that consideration, I am sorry!",
          "@yusukebe Thanks! No problem at all, let's go with plan 1.\r\n\r\n> 1. the goal is to implement and release all algorithms only\r\n\r\nI would like to use the code in this PR as a base, so I would like to either have you _create a new branch_ or _make this PR branch the base branch_.\r\n\r\n> Can you provide a base branch for JWT on honojs/hono?\r\n\r\nWhich would you prefer?\r\n\r\nIf the latter, I thought it would be better to change the title of this PR to look like an algorithm implementation \ud83d\ude4f \r\n",
          "@Code-Hex \r\n\r\nHow about creating a `jwt-algorithms` branch and merging this PR into it? We'll also merge other PRs which implement other algorithms into it.",
          "@yusukebe Sounds great!",
          "Thanks! Created it. Merging now."
        ]
      },
      {
        "pr_number": 2352,
        "title": "added remain algorithm for JWT",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2352",
        "comments": [
          "I will send one more PR after this PR has been merged!",
          "@Code-Hex Thanks for the PR!\r\n\r\n@metrue Could you review this one too?",
          "LGTM",
          "Thanks! Merge now."
        ]
      },
      {
        "pr_number": 2373,
        "title": "acceptable CryptoKey in JWT sign and verify",
        "body": "This is the last PR for https://github.com/honojs/hono/pull/2368\r\n\r\n### What I did\r\n\r\n- acceptable private key to verify jwt\r\n- fixed code to accept CryptoKey object\r\n- To clarify the responsibilities of jwa and jws, we have added files that refer to each and moved the logic to them.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2373",
        "comments": [
          "Good job @Code-Hex !\r\n\r\n@metrue Can you review this too?",
          "Thanks @Code-Hex @metrue \r\n\r\nI'll merge this into the `jwt-algorithms` branch and ship it in the next minor release \"v4.2\". May be it will not so far!"
        ]
      },
      {
        "pr_number": 2382,
        "title": "feat(ssg): Support `extentionMap`",
        "body": "ref: https://github.com/honojs/middleware/pull/412\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2382",
        "comments": [
          "Hi @watany-dev \r\n\r\nIs it not enough to add YAML mime types to `src/utils/mime.ts` instead of this PR?",
          "@yusukebe \n\nThat is simpler and better! Fixed.",
          "@watany-dev \r\n\r\nHow about adding an `extensionMap` option like the following? It exports `defaultExtensionMap` so the user can easily add additional values to the default values.\r\n\r\n```diff\r\ndiff --git a/src/helper/ssg/ssg.ts b/src/helper/ssg/ssg.ts\r\nindex 17040e5..b1c3608 100644\r\n--- a/src/helper/ssg/ssg.ts\r\n+++ b/src/helper/ssg/ssg.ts\r\n@@ -30,8 +30,13 @@ export interface ToSSGResult {\r\n   error?: Error\r\n }\r\n \r\n-const generateFilePath = (routePath: string, outDir: string, mimeType: string) => {\r\n-  const extension = determineExtension(mimeType)\r\n+const generateFilePath = (\r\n+  routePath: string,\r\n+  outDir: string,\r\n+  mimeType: string,\r\n+  extensionMap?: Record<string, string>\r\n+) => {\r\n+  const extension = determineExtension(mimeType, extensionMap)\r\n \r\n   if (routePath.endsWith(`.${extension}`)) {\r\n     return joinPaths(outDir, routePath)\r\n@@ -62,17 +67,19 @@ const parseResponseContent = async (response: Response): Promise<string | ArrayB\r\n   }\r\n }\r\n \r\n-const determineExtension = (mimeType: string): string => {\r\n-  switch (mimeType) {\r\n-    case 'text/html':\r\n-      return 'html'\r\n-    case 'text/xml':\r\n-    case 'application/xml':\r\n-      return 'xml'\r\n-    default: {\r\n-      return getExtension(mimeType) || 'html'\r\n-    }\r\n+export const defaultExtensionMap: Record<string, string> = {\r\n+  'text/html': 'html',\r\n+  'text/xml': 'xml',\r\n+  'application/xml': 'xml',\r\n+  'application/yaml': 'yaml',\r\n+}\r\n+\r\n+const determineExtension = (mimeType: string, extensionMap?: Record<string, string>): string => {\r\n+  extensionMap ??= defaultExtensionMap\r\n+  if (mimeType in defaultExtensionMap) {\r\n+    return defaultExtensionMap[mimeType]\r\n   }\r\n+  return getExtension(mimeType) || 'html'\r\n }\r\n \r\n export type BeforeRequestHook = (req: Request) => Request | false | Promise<Request | false>\r\n@@ -85,6 +92,7 @@ export interface ToSSGOptions {\r\n   afterResponseHook?: AfterResponseHook\r\n   afterGenerateHook?: AfterGenerateHook\r\n   concurrency?: number\r\n+  extensionMap?: Record<string, string>\r\n }\r\n \r\n /**\r\n@@ -204,14 +212,15 @@ const createdDirs: Set<string> = new Set()\r\n export const saveContentToFile = async (\r\n   data: Promise<{ routePath: string; content: string | ArrayBuffer; mimeType: string } | undefined>,\r\n   fsModule: FileSystemModule,\r\n-  outDir: string\r\n+  outDir: string,\r\n+  extensionMap?: Record<string, string>\r\n ): Promise<string | undefined> => {\r\n   const awaitedData = await data\r\n   if (!awaitedData) {\r\n     return\r\n   }\r\n   const { routePath, content, mimeType } = awaitedData\r\n-  const filePath = generateFilePath(routePath, outDir, mimeType)\r\n+  const filePath = generateFilePath(routePath, outDir, mimeType, extensionMap)\r\n   const dirPath = dirname(filePath)\r\n \r\n   if (!createdDirs.has(dirPath)) {\r\n```",
          "I've made modifications to allow specifying an extensionMap. Differing from the original idea, it seemed more straightforward for users to specify only the differences they want. Therefore, the system now adds to or overrides the defaultExtensionMap with the user-provided map. This way, users can customize only the necessary parts without having to be aware of the default values.",
          "Hi @watany-dev !\r\n\r\nThanks! I've left the comments. Check them!",
          "Hi @watany-dev \r\n\r\nI'll merge this into the \"next\" branch now."
        ]
      },
      {
        "pr_number": 2368,
        "title": "feat(jwt): support remaining algorithms",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2368",
        "comments": []
      },
      {
        "pr_number": 2389,
        "title": "feat(jsx): add useId hook",
        "body": "### Why is it so simple in \"hono/jsx\"?\r\n\r\nhttps://github.com/honojs/hono/issues/2387#issuecomment-2009251402\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2389",
        "comments": [
          "Hi @yusukebe \r\nWould you please review?\r\n\r\nIt is not fully compatible with React's `useId()`, but I think it is compatible enough for use within hono/jsx. I would like to add this to help users migrating from React to hono/jsx.\r\n\r\nIt would be appropriate for them to be merged in a minor version.",
          "Hey @usualoma !\r\n\r\nThanks for the PR. I've approved it, but I'll merge it later. As you mentioned, it's better to ship this feature in a minor release ( I think it will not be so far )."
        ]
      },
      {
        "pr_number": 2406,
        "title": "feat(middleware/jwt): improve error handling",
        "body": "Improves error handling in the JWT middleware by passing error descriptions to `message` prop in `HTTPExceptionOptions`.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2406",
        "comments": [
          "Hi @tfkhdyt \r\n\r\nLooks good! This is minor but a new feature. So, we'll ship it as a \"minor-release\". I'll create a \"next\" branch for it and merge this later! Thanks."
        ]
      },
      {
        "pr_number": 2416,
        "title": "feat(request): cache body for reusing",
        "body": "Closes #1499 \r\n\r\nAs mentioned in #1499,`c.req.json()` throws an error if `c.req.text()` is called before it. With this PR, the body content created by `c.req.text()`, `c.req.arrayBuffer()`, and others will be cached correctly and reused so the error will not be thrown.\r\n\r\nA concern is that there will be more code in `request.ts`, but this change is important for DX, so we will introduce it\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2416",
        "comments": []
      },
      {
        "pr_number": 2424,
        "title": "feat(jwt): Add type helper to `payload`",
        "body": "I added type hints to jwt sign function's `payload`.\r\nIf we merged this PR, we can write payload easier.\r\nJose also is doing like it.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2424",
        "comments": [
          "@nakasyou \r\n\r\nThanks! I want to merge this into the \"next\" branch for the next minor release v4.2. So it got the conflict and can you resolve it?",
          "@yusukebe, I resolved conflicts so we can merge now.",
          "@nakasyou \r\n\r\nYes. Merge now!"
        ]
      },
      {
        "pr_number": 2420,
        "title": "feat: introduce Method Override Middleware",
        "body": "This PR introduces new middleware, \"Method Override Middleware.\"\r\n\r\nThis middleware executes the handler of the specified method, which is different from the actual method of the request, depending on the value of the form, header, or query, and returns its response.\r\n\r\nFor example, since HTML forms cannot send a DELETE method, you can put the value `DELETE` in the property named `_method` and send it. And the handler for `app.delete()` will be executed.\r\n\r\nThe HTML form:\r\n\r\n```html\r\n<form action='/posts' method='POST'>\r\n  <input type='hidden' name='_method' value='DELETE' />\r\n  <input type='text' name='id' />\r\n</form>\r\n```\r\n\r\nThe application:\r\n\r\n```ts\r\nimport { methodOverride } from 'hono/method-override'\r\n\r\nconst app = new Hono()\r\napp.use('/posts', methodOverride({ app }))\r\n\r\napp.delete('/posts', () => {\r\n  // ...\r\n})\r\n```\r\n\r\nYou can change the default values or use the header value and query value:\r\n\r\n```ts\r\napp.use('/posts', methodOverride({ app, form: '_custom_name' }))\r\napp.use('/posts', methodOverride({ app, header: 'X-METHOD-OVERRIDE' }))\r\napp.use('/posts', methodOverride({ app, query: '_method' }))\r\n```\r\n\r\n### TODO\r\n\r\n- [x] Ignore a GET request\r\n- [x] Write tests for Header\r\n- [x] Write tests for Query\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2420",
        "comments": [
          "Hi @usualoma !\r\n\r\nI think this is good. But what do you think? Maybe there's a point I'm missing.",
          "Wow, I think it is great!\r\nI think it is working fine.\r\n\r\nI thought there was room for refactoring with type definitions and minor conditional branching, so I made the following PR.\r\n#2429",
          "Let's go!"
        ]
      },
      {
        "pr_number": 2454,
        "title": "Next",
        "body": "Ready for **v4.2**.\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2454",
        "comments": []
      },
      {
        "pr_number": 2436,
        "title": "feat(middleware/cors): pass context to options.origin function",
        "body": "Hello!\r\nI opened this PR because I wanted to use a context in the options.origin function as follows:\r\n```\r\napp.use(\r\n  '/api/*',\r\n  cors({\r\n    origin: (origin, c) => {\r\n      return c.env.MY_ALLOW_ORIGIN\r\n    },\r\n  })\r\n)\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2436",
        "comments": [
          "Hi @okmr-d !\r\n\r\nThank you for creating the PR.\r\n\r\nIn this case, we recommend wrapping the `cors()` with another middleware:\r\n\r\n```ts\r\nconst app = new Hono<{\r\n  Bindings: {\r\n    MY_ALLOW_ORIGIN: string\r\n  }\r\n}>()\r\n\r\napp.use('/api/*', async (c, next) => {\r\n  const middleware = cors({\r\n    origin: () => {\r\n      return c.env.MY_ALLOW_ORIGIN\r\n    },\r\n  })\r\n  return middleware(c, next)\r\n})\r\n```\r\n\r\nThis way is often [used in Basic Auth Middleware](https://hono.dev/getting-started/cloudflare-workers#using-variables-in-middleware).",
          "Hi @yusukebe !\r\nThank you for check the PR. My problem is solved.\r\n\r\nIn the case of the `csrf` middleware, I could use the context. \r\nhttps://github.com/honojs/hono/blob/13039a9526d032f854901888473567a4bd8a6c08/src/middleware/csrf/index.ts#L5-L7\r\n\r\nIt is easier to understand if the arguments of the two functions are the same. How's that?\r\n- `csrf` middleware origin option\r\n- `cors` middleware origin option",
          "> It is easier to understand if the arguments of the two functions are the same. How's that?\r\n\r\nYou are right! Making the two functions the same is good. Let's go with it.",
          "@okmr-d \r\n\r\nI'll merge this into the \"next\" branch for releasing the next minor version `4.2.0`. It will be released later. Thanks!"
        ]
      },
      {
        "pr_number": 2426,
        "title": "feat: support for `vary` header in cache middleware",
        "body": "This PR adds support for the `Vary` header in cache middleware, allowing developers to specify headers that should trigger separate cache entries. This feature is essential for applications serving content that varies based on client headers, such as Accept or Accept-Language, enhancing content negotiation and caching efficiency.\r\n\r\nclosed: https://github.com/honojs/hono/issues/2395\r\n\r\n### Example Usage\r\n\r\n```ts\r\napp.use('/example/*', cache({ cacheName: 'my-app-cache', vary: 'Accept, Accept-Encoding' }));\r\napp.get('/example/', (c) => {\r\n  return c.text('This content is cached with Vary header.');\r\n});\r\n```\r\n\r\nThis simple addition enables the server to cache different versions of a resource based on the specified header(s), ensuring that clients receive content that's tailored to their needs, such as different image formats or languages.\r\n\r\n\r\n**Author should do the following, if applicable:**\r\n- [X] Add tests.\r\n- [X] Run tests.\r\n- [X] `yarn denoify` to generate files for Deno.",
        "html_url": "https://github.com/honojs/hono/pull/2426",
        "comments": [
          "Hi @naporin0624 !\r\n\r\nThanks! I've left some comments. Please check them.\r\n\r\n@usualoma If you have time, please review this; you too? I think this feature is good!",
          "> Hi @naporin0624 !\n> \n> Thanks! I've left some comments. Please check them.\n> \n> @usualoma If you have time, please review this; you too? I think this feature is good!\n\r\n@yusukebe The changes have been made. Please review them! Thank you.",
          "@naporin0624 \r\n\r\nThere is one thing we have to consider: https://github.com/honojs/hono/pull/2426#discussion_r1544892480",
          "> @naporin0624\r\n> \r\n> There is one thing we have to consider: [#2426 (comment)](https://github.com/honojs/hono/pull/2426#discussion_r1544892480)\r\n\r\n@yusukebe \r\n\r\nstring is now also accepted.\r\nI think this is better for DX.\r\n",
          "@naporin0624 Thanks! Let's land it.",
          "Thanks for the PR review and looking forward to 4.2 :)"
        ]
      },
      {
        "pr_number": 2408,
        "title": "feat: add middlewares resolve trailing slashes on GET request",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\nAs titled. Tests provided and denoified.",
        "html_url": "https://github.com/honojs/hono/pull/2408",
        "comments": [
          "Hi @rnmeow \r\n\r\nThanks for the PR. This is nice! But I'm now considering whether to merge this into the core. This is so simple that users may define it themselves. And we could put how to make it in the document.\r\n\r\nBut we may accept this later.",
          "RE: @yusukebe\r\n\r\nUnderstand. Dealing with trailing slashes, in my point of view, is perhaps an essential need for people building web applications, especially the larger ones.\r\n\r\nAs a framework (and also plays an important role of router), it would be convenient if Hono offers the solution out-of-the-box.  \r\nUsing middlewares might not be the best way to achieve that. Instead, for a better architecture, I may suggest to implement that in:\r\n\r\na) the `Hono` interface\r\n\r\n```js\r\nconst app = new Hono({ trailingSlash: 'append' }) // 'append' | 'trim' | 'as-is'\r\n```\r\n\r\nb) the routing path, for example\r\n\r\n```js\r\n// reqs without slash will be redirected\r\napp.get('/path/to/route/^', (c) => {\r\n  // ...\r\n})\r\n// reqs with slash will be redirected\r\napp.get('/path/to/route^', (c) => {\r\n  // ...\r\n})\r\n```\r\n\r\nThough that is able to be a breaking, I believe that it must be an exciting change made.\r\n\r\nPS. a new commit is awaiting approval for tests.",
          "@rnmeow \r\n\r\n>: Understand. Dealing with trailing slashes, in my point of view, is perhaps an essential need for people building web applications, especially the larger ones.\r\n> As a framework (and also plays an important role of router), it would be convenient if Hono offers the solution out-of-the-box.\r\n\r\nThanks for sharing your thoughts. I understand well the purpose of this middleware.\r\n\r\n> Using middlewares might not be the best way to achieve that. Instead, for a better architecture, I may suggest to implement that in:\r\n\r\nI think using middleware is **best**. It's a really Hono-like way. We don't want to modify or add code for the core of Hono. So, using middleware is the best solution.\r\n\r\nThen, let's make this Trailing Slash Middlere as built-in middleware!",
          "@rnmeow I've left some comments. Check them!",
          "RE: @yusukebe \n\n> I think using middleware is **best**. It's a really Hono-like way. We don't want to modify or add code for the core of Hono. So, using middleware is the best solution.\n\nYup. I didn't notice that modifying the core code would add complexity and weaken the simplicity then.  \nIt's better to reduce the base features; currently, there are only middlewares available.\n\n> `yarn.lock` should not be changed. Can you remove the change for it?\n\nThat may be a mistake. Let me check.",
          "Hi @rnmeow \r\n\r\nThanks! I've left some comments.\r\n\r\nAnd could you add the export settings to `package.json`? You can add them like other middleware under these lines:\r\n\r\nhttps://github.com/honojs/hono/blob/d3403942c12c16847b0808cee1dcb0a2d6c81d1b/package.json#L201\r\nhttps://github.com/honojs/hono/blob/d3403942c12c16847b0808cee1dcb0a2d6c81d1b/package.json#L425",
          "Hi @rnmeow \r\nThanks for the middleware suggestion!\r\n\r\nI have the following idea.\r\n\r\n* I think it would be better to apply this only to GET requests, and simply return a 404 for POST and other requests. (although in some cases it could be redirected in HEAD as well)\r\n* I suspect that the current PR does not work correctly when a query string is given.\r\n* I think it would be better to decide whether or not to redirect based on whether or not the request was a 404, rather than whether or not `.` is present.\r\n\r\nFor example, the following would be a good example\r\n\r\n```ts\r\nexport const appendTrailingSlash = (): MiddlewareHandler => {\r\n  return async function appendTrailingSlash(c, next) {\r\n    await next()\r\n\r\n    if (c.res.status === 404 && c.req.method === 'GET' && c.req.path.at(-1) !== '/') {\r\n      const url = new URL(c.req.url)\r\n      url.pathname += '/'\r\n      c.res = new Response(null, {\r\n        status: 301,\r\n        headers: { Location: url.toString() },\r\n      })\r\n    }\r\n  }\r\n}\r\n```",
          "RE: @usualoma \r\n\r\n> I think it would be better to apply this only to GET requests, and simply return a 404 for POST and other requests. (although in some cases it could be redirected in HEAD as well)\r\n> ...\r\n> I suspect that the current PR does not work correctly when a query string is given.\r\n> ...\r\n> I think it would be better to decide whether or not to redirect based on whether or not the request was a 404, rather than whether or not `.` is present.\r\n\r\nThank you for your feedback.\r\n\r\nBy the way, if a nonexistent file is requested, the above code will likely return status 301, and not 404.\r\n\r\n(Edit: This is an acceptable misleading. Compared to the performance lose of incorporating RegEx.)\r\n\r\nI'm trying to make the codes consider more.\r\n",
          "> By the way, if a nonexistent file is requested, the above code will likely return status 301, and not 404.\r\n\r\nThat's certainly true. We might want to think a little more carefully about this. I guess it depends on the use case, but in some cases it might be better to judge by the `.` in some cases.\r\n\r\nIf you are routing to a static file, it is possible that an image.jpg that did not exist an hour ago may exist now. Therefore, returning a 301 for a 404 is undesirable.\r\n\r\nBut, well, it is normal for `.` in URLs is normal, so for core middleware, it is not a good idea to consider it as a \"URL that includes the extension if there is `.` \" Therefore, I still think 404 is more appropriate.\r\n\r\nOr we could simplify it to the extreme and make the behavior \"slash on all unslashed URLs\". (`. ` or status code, neither of which is referenced).",
          "> 5bfac38\r\n\r\nIf you are judging by `c.res.status === 404`, you must execute `await next()` first. Before executing `await next()`, `c.res.status === 404` will always be true.\r\n\r\nhttps://github.com/honojs/hono/blob/5bfac38d61238ca4d9d2e7ca0fffff3295988584/src/context.ts#L183",
          "> But, well, it is normal for `.` in URLs is normal, so for core middleware, it is not a good idea to consider it as a \"URL that includes the extension if there is `.` \" Therefore, I still think 404 is more appropriate.\r\n>\r\n> Or we could simplify it to the extreme and make the behavior \"slash on all unslashed URLs\". (`. ` or status code, neither of which is referenced).\r\n\r\nDetecting status 404 might be the most acceptable solution for now.\r\n\r\nAccording to the [performance test](https://perf.link/#eyJpZCI6IjBtcHBubXhreHAyIiwidGl0bGUiOiJGaW5kaW5nIG51bWJlcnMgaW4gYW4gYXJyYXkgb2YgMTAwMCIsImJlZm9yZSI6ImNvbnN0IHN0YXR1cyA9IDQwNCwgbWV0aG9kID0gJ0dFVCcsIHBhdGggPSAnL3Rlc3QvYV9maWxlLmV4dCdcblxuIiwidGVzdHMiOlt7Im5hbWUiOiJGaW5kIGl0ZW0gMTAwIiwiY29kZSI6InN0YXR1cyA9PT0gNDA0ICYmIG1ldGhvZCA9PT0gJ0dFVCcgJiYgcGF0aFtwYXRoLmxlbmd0aCAtIDFdICE9PSAnLyciLCJydW5zIjpbNTAzNDAwMCwyNjU1MDAwLDE2NDYwMDAsMTQxODYwMDAsNjY2MzAwMCw4MDQzMDAwLDE0MDUwMDAsMTI4ODAwMCwyNTQ2MDAwLDEwNDY0MDAwLDYzMzYwMDAsMTU3NjAwMCwxMDAwMCw0NDg3MDAwLDEyOTQwMDAsNDA5MDAwLDI3NjEwMDAsMjM2ODAwMCwxNDA4MjAwMCw2MTkwMDAwLDcwODcwMDAsMjU0NTAwMCwxMzk5MzAwMCw3MjAwMCw2OTI0MDAwLDE1MDUwMDAsMTE3ODUwMDAsMTU3OTAwMCw0Mzk4MDAwLDEwNTU5MDAwLDE3NDIwMDAsNTE3ODAwMCwyNDAwMDAwLDEyMDAwLDI2MzEwMDAsMjYwNjAwMCwxNTI2MDAwLDYwOTEwMDAsMzkyMDAwLDMxNjUwMDAsMzE2NjAwMCw4MDA2MDAwLDIxMjUxMDAwLDUxOTAwMDAsNjM1OTAwMCwxMTE4ODAwMCwzNjYyMDAwLDUzMTMwMDAsNDgxODAwMCw5MDAwLDcxNDAwMDAsMjU4MDAwLDk1NjMwMDAsNjIyNzAwMCwyMDcyMDAwLDM1MDkwMDAsMTY0NjAwMCw1MzM3MDAwLDIyMTkwMDAsOTUwMDAwLDQ4NzAwMCwzMTAwMCwzNzQxMDAwLDc5MTYwMDAsMTkwMDAwMCw2MDcwMDAwLDU5ODQwMDAsOTAwMCwzNzMyMDAwLDE1MjgwMDAsODQzOTAwMCwyODcxMDAwLDg5NzkwMDAsMTY1NTAwMCwxNjQ2MDAwLDYxOTMwMDAsMTIwNDkwMDAsMzUyMDAwLDYyMjIwMDAsMzI1NTAwMCwyNTU3MDAwLDMyOTgwMDAsMTAzODcwMDAsMTM4MjAwMCw0OTcwMDAsNjA2MDAwLDQ5NTMwMDAsNDk3NDAwMCw0OTg5MDAwLDgwNDgwMDAsNTY2NTAwMCw1NDY5MDAwLDMwOTgwMDAsMjQ1NzAwMCw5MDAwLDM0ODkwMDAsNDkyODAwMCw4MjY0MDAwLDEwMTk4MDAwLDgzOTAwMF0sIm9wcyI6NDU2NjgyMH0seyJuYW1lIjoiRmluZCBpdGVtIDgwMCIsImNvZGUiOiJwYXRoLm1hdGNoKC9eKFxcLy4qKStcXC4uKiQvKSAmJiBtZXRob2QgPT09ICdHRVQnICYmIHBhdGhbcGF0aC5sZW5ndGggLSAxXSAhPT0gJy8nIiwicnVucyI6WzkyNzAwMCwxMTAwMCw0NTUwMDAsMjg2NTAwMCw3NjcwMDAsMTI4OTAwMCwyODUwMDAsMTAwMCw5MTUwMDAsMTQzNzAwMCw1NDIwMDAsOTAwMCwxMTAwMCw3OTgwMDAsMTAwMCw5MDAwLDcxNTAwMCwyMDcwMDAwLDI4NDAwMDAsMTQ3OTAwMCwxNTMwMDAwLDM4OTAwMCw0ODI3MDAwLDc4MTAwMCw5MjcwMDAsMTQ1NjAwMCwyMjg1MDAwLDExMDAwLDQzMDAwMCwxNDgyMDAwLDEwMDAsMTgwMDAsMTEwMDAsMTAwMCwxMTAwMCw0NjkwMDAsMTAwMDAwLDkyNzAwMCw1NjQwMDAwLDU5ODAwMCw5ODAwMCw3ODEwMDAsNDY4MjAwMCwxMTQzMDAwLDgzNjAwMCwxNTg0MDAwLDEwMTAwMCw4NDcwMDAsNTgyMDAwLDEwMDAsOTI3MDAwLDEwMDAsMTM4MzAwMCw5MjcwMDAsMTAwMDAwLDMxMzAwMCw1OTgwMDAsNDMzMDAwLDE0MTcwMDAsNDMwMDAsMTAwMCw4MzQwMDAsMzk4MDAwLDkwOTAwMCwxMTAwMCw4NDUwMDAsOTI3MDAwLDgzNjAwMCwzNzQwMDAsMTAwMCw4OTAwMDAsMTMwMDAsNjk5MDAwLDEyMzAwMCwxMTAwMCw5MjcwMDAsMTU3NTAwMCwxMDAwLDk5MDAwMCwxMTAwMCw5MDAwLDExMDAwLDE2MzEwMDAsMTAwMCw4NzAwMCw0MzgwMDAsMTI0MTAwMCw0OTAwMDAsNzkzMDAwLDE1MTQwMDAsODk2MDAwLDE2OTAwMCwyNDYwMDAsMzQwMDAsNzk5MDAwLDM0MDAwMCw1NTIwMDAsMTY5NzAwMCwxNDczMDAwLDEyNDAwMDBdLCJvcHMiOjgwMTU0MH1dLCJ1cGRhdGVkIjoiMjAyNC0wMy0yOVQxMjozNToyMS41NzdaIn0%3D), just a simple RegEx pattern will cause a significantly reduction of the speed and simplicity.",
          "@rnmeow Thank you!\r\n\r\nIn hono, if you want to change the response with middleware, you need to assign it to c.res. If you have the middleware added in the test code, you will see that in some cases the expected result will not be achieved without the assignment.\r\n\r\n```diff\r\ndiff --git a/src/middleware/trailing-slash/index.test.ts b/src/middleware/trailing-slash/index.test.ts\r\nindex 7530ef59..5db7b65d 100644\r\n--- a/src/middleware/trailing-slash/index.test.ts\r\n+++ b/src/middleware/trailing-slash/index.test.ts\r\n@@ -7,6 +7,7 @@ describe('Resolve trailing slash', () => {\r\n   it('Trim', async () => {\r\n     app = new Hono({ strict: true })\r\n \r\n+    app.use('*', async (c, next) => await next())\r\n     app.use('*', trimTrailingSlash())\r\n \r\n     app.get('/', async (c) => {\r\n@@ -38,6 +39,7 @@ describe('Resolve trailing slash', () => {\r\n   it('Append', async () => {\r\n     app = new Hono({ strict: true })\r\n \r\n+    app.use('*', async (c, next) => await next())\r\n     app.use('*', appendTrailingSlash())\r\n \r\n     app.get('/', async (c) => {\r\ndiff --git a/src/middleware/trailing-slash/index.ts b/src/middleware/trailing-slash/index.ts\r\nindex 667f4bba..ead3975b 100644\r\n--- a/src/middleware/trailing-slash/index.ts\r\n+++ b/src/middleware/trailing-slash/index.ts\r\n@@ -18,7 +18,7 @@ export const trimTrailingSlash = (): MiddlewareHandler => {\r\n       const url = new URL(c.req.url)\r\n       url.pathname = url.pathname.substring(0, url.pathname.length - 1)\r\n \r\n-      return c.redirect(url.toString(), 301)\r\n+      c.res = c.redirect(url.toString(), 301)\r\n     }\r\n   }\r\n }\r\n@@ -40,7 +40,7 @@ export const appendTrailingSlash = (): MiddlewareHandler => {\r\n       const url = new URL(c.req.url)\r\n       url.pathname += '/'\r\n \r\n-      return c.redirect(url.toString(), 301)\r\n+      c.res = c.redirect(url.toString(), 301)\r\n     }\r\n   }\r\n }\r\n```",
          "Ready for review and awaiting for tests! @yusukebe @usualoma ",
          "@rnmeow Thank you. LGTM!",
          "@rnmeow \r\n\r\nI'll merge this into [the next branch](https://github.com/honojs/hono/tree/next) for the next minor version \"v4.2\". We can release it later. Thank you for your contribution!",
          "RE: @yusukebe \n\nGot it. Thanks for your work!"
        ]
      },
      {
        "pr_number": 2454,
        "title": "Next",
        "body": "Ready for **v4.2**.\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2454",
        "comments": []
      },
      {
        "pr_number": 2445,
        "title": "test: stub `crypto` if not exist",
        "body": "Stub only when there is no `crypto` in global.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2445",
        "comments": []
      },
      {
        "pr_number": 2454,
        "title": "Next",
        "body": "Ready for **v4.2**.\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2454",
        "comments": []
      }
    ],
    "v4.1.7": [
      {
        "pr_number": 2444,
        "title": "fix(cache): check `globalThis.caches`",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2444",
        "comments": []
      }
    ],
    "v4.1.6": [
      {
        "pr_number": 2431,
        "title": "chore(benchmark): add \"loop\" script",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2431",
        "comments": []
      },
      {
        "pr_number": 2443,
        "title": "fix(cache): not enabled if `caches` is not defined",
        "body": "Fixes #1756\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2443",
        "comments": []
      }
    ],
    "v4.1.5": [
      {
        "pr_number": 2419,
        "title": "perf: Don't use `Arrap.prototype.map` if it is not needed return value",
        "body": "I replaced some `Arrap.prototype.map` to `Arrap.prototype.forEach` to up performance a little.\r\n`forEach` doesn't make result value, so It's faster than `map` a little.\r\n\r\n[perf.link](https://perf.link/#eyJpZCI6InM1MHQwMWhhODZmIiwidGl0bGUiOiJGaW5kaW5nIG51bWJlcnMgaW4gYW4gYXJyYXkgb2YgMTAwMCIsImJlZm9yZSI6ImNvbnN0IGFyciA9IG5ldyBBcnJheSgxMDAwKS5maWxsKE1hdGgucmFuZG9tKCkpIiwidGVzdHMiOlt7Im5hbWUiOiJVc2luZyBgbWFwYCIsImNvZGUiOiJjb25zdCBuZXdBcnIgPSBbXVxuYXJyLm1hcCgoZSkgPT4ge1xuXHRuZXdBcnIucHVzaChlKVxufSkiLCJydW5zIjpbODMzMywzMzMzLDIwMDAwLDEwNjY2LDEwNjY2LDEwNjY2LDIzMzMzLDExNjY2LDc2NjYsMTA2NjYsMzMzMywyMzMzMywxMDY2NiwxMDY2NiwxMDY2NiwxMDY2NiwxMDMzMywxMDY2NiwxMDY2NiwxMTAwMCw5MzMzLDI2NjYsMjMzMzMsOTY2NiwxNDAwMCw2MDAwLDI0NjY2LDIwMzMzLDE1MzMzLDEwNjY2LDIzMzMzLDEwNjY2LDI5MDAwLDEzMDAwLDkzMzMsMTA2NjYsNzMzMywxMDY2NiwxMDY2NiwxMDY2NiwzMzMzLDk2NjYsMjY2NiwyNDMzMywxMDY2Niw3MzMzLDk2NjYsMzMzMzMsMTA2NjYsMTg2NjYsNDAwMCwyNjMzMywxMDY2NiwxMDY2Niw0MzMzLDE2MzMzLDEwNjY2LDEyMzMzLDYzMzMsMjM2NjYsMTA2NjYsMTA2NjYsMTAzMzMsMTA2NjYsNzMzMywxMDY2NiwxMDY2NiwxNzMzMywxMDY2NiwxMTAwMCwxMjY2NiwxNTMzMywxMTY2NiwyMzMzMywyMTMzMywyNTAwMCwxMjMzMywxMDY2NiwxOTMzMywxMDY2NiwxMDY2NiwyNTAwMCwxNjAwMCwxMDY2NiwyMjMzMyw3MzMzLDIyMzMzLDEwNjY2LDEwNjY2LDMzMzMsNDMzMywyMzMzMyw1NjY2LDEwNjY2LDI2MzMzLDEyMzMzLDE5NjY2LDEwNjY2LDEwMzMzLDUzMzNdLCJvcHMiOjEyOTU5fSx7Im5hbWUiOiJVc2luZyBgZm9yRWFjaGAiLCJjb2RlIjoiY29uc3QgbmV3QXJyID0gW11cbmFyci5mb3JFYWNoKChlKSA9PiB7XG5cdG5ld0Fyci5wdXNoKGUpXG59KSIsInJ1bnMiOlsxNDAwMCwxNjY2LDE0MzMzLDEwMDAwLDIyNjY2LDI0NjY2LDE1MDAwLDE1MDAwLDE1MDAwLDE2NjY2LDE1MDAwLDE1MDAwLDE1MDAwLDE1MDAwLDEzMDAwLDE1MDAwLDE1MDAwLDMyNjY2LDE5MDAwLDE1MDAwLDMwMDAwLDMyNjY2LDE1MDAwLDE1MDAwLDMwNjY2LDE1MDAwLDE1MDAwLDMyNjY2LDE1MDAwLDE1MDAwLDEzNjY2LDMyNjY2LDE1MDAwLDE1MDAwLDE1MDAwLDMxMDAwLDE1MDAwLDk2NjYsMTUwMDAsMzI2NjYsMTUwMDAsMzEzMzMsMTI2NjYsMTUwMDAsMzY2Niw0MTAwMCwxNTAwMCwxNTAwMCw5MzMzLDM2NjY2LDE1MDAwLDE1MDAwLDE1MDAwLDE1MDAwLDE5MDAwLDMyNjY2LDE1MDAwLDMyNjY2LDE1MDAwLDE1MDAwLDE1MDAwLDMyNjY2LDE0NjY2LDQ3NjY2LDEyNjY2LDMyNjY2LDExNjY2LDExMzMzLDkzMzMsMzI2NjYsMTI2NjYsMTUwMDAsNjY2NiwxOTAwMCwxNTAwMCwxNTAwMCwxNTAwMCwxNTAwMCwxMTMzMywzMjY2Niw5NjY2LDE1MDAwLDE1MDAwLDQwMDAsMTEwMDAsMTUwMDAsMTUwMDAsMTUwMDAsMzI2NjYsMTUwMDAsNzY2Niw5NjY2LDE1MDAwLDE1MDAwLDE1MDAwLDI2NjY2LDEzMzMzLDE1MDAwLDE1MDAwLDMyNjY2XSwib3BzIjoxODAzM31dLCJ1cGRhdGVkIjoiMjAyNC0wMy0yNlQwMDozOTozNS42MTlaIn0%3D)\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2419",
        "comments": [
          "Hi @nakasyou \r\n\r\nYes. `forEach` is faster also on Bun and Node.js.\r\n\r\n<img width=\"864\" alt=\"Screenshot 2024-03-26 at 9 50 14\" src=\"https://github.com/honojs/hono/assets/10682/37936898-0128-460a-9712-3d7fc921d052\">\r\n\r\nMerge this now. Thanks!",
          "what about just using for?\r\n\r\n[perf.link](https://perf.link/#eyJpZCI6InM1MHQwMWhhODZmIiwidGl0bGUiOiJGaW5kaW5nIG51bWJlcnMgaW4gYW4gYXJyYXkgb2YgMTAwMCIsImJlZm9yZSI6ImNvbnN0IGFyciA9IG5ldyBBcnJheSgxMDAwKS5maWxsKE1hdGgucmFuZG9tKCkpIiwidGVzdHMiOlt7Im5hbWUiOiJUZXN0IENhc2UiLCJjb2RlIjoiY29uc3QgbmV3QXJyID0gW11cbmZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gIG5ld0Fyci5wdXNoKGFycltpXSlcbn0iLCJydW5zIjpbMzMwMDAsMjAwMCw0NTAwMCwxNTAwMCw0NTAwMCw3MDAwLDUwMDAsMTAwMCwxMjAwMCw2MDAwLDQ1MDAwLDIxMDAwLDExMDAwLDQ1MDAwLDQ1MDAwLDUwMDAsNDUwMDAsNDUwMDAsMjYwMDAsOTAwMCw0NTAwMCwxNzAwMCw0NTAwMCw0NTAwMCw2MDAwLDE4MDAwLDQ1MDAwLDIyMDAwLDQ1MDAwLDQ1MDAwLDEwMDAsNDMwMDAsNDUwMDAsNzAwMCwxMDAwMCwxNDAwMCwxMDAwLDQ1MDAwLDQ1MDAwLDgwMDAsNDUwMDAsNTAwMCwyNTAwMCw0NTAwMCwzNTAwMCw0NTAwMCwxMDAwLDQ1MDAwLDEyMDAwLDQ1MDAwLDQ1MDAwLDI1MDAwLDEwMDAwLDQ1MDAwLDkwMDAsNDUwMDAsNDAwMCw1MDAwLDIxMDAwLDQ1MDAwLDIwMDAwLDQ1MDAwLDQ1MDAwLDQ1MDAwLDE2MDAwLDYzMDAwLDQ1MDAwLDQ1MDAwLDQ1MDAwLDQ1MDAwLDQ1MDAwLDMwMDAwLDM5MDAwLDIzMDAwLDQ1MDAwLDQ1MDAwLDQ1MDAwLDQ1MDAwLDEwMDAsMzkwMDAsNDUwMDAsMTAwMDAsNDUwMDAsMjAwMCwxMDAwLDU1MDAwLDIxMDAwLDI1MDAwLDUwMDAsNTAwMCw0NTAwMCwyMzAwMCw0NTAwMCw0NTAwMCw0MDAwLDQ1MDAwLDUwMDAsNTEwMDAsNDUwMDAsMTUwMDBdLCJvcHMiOjI4ODUwfSx7Im5hbWUiOiJVc2luZyBgbWFwYCIsImNvZGUiOiJjb25zdCBuZXdBcnIgPSBbXVxuYXJyLm1hcCgoZSkgPT4ge1xuXHRuZXdBcnIucHVzaChlKVxufSkiLCJydW5zIjpbMTUwMDAsNTAwMCwxMjAwMCwzMDAwLDEwMDAsMzAwMCwxMDAwLDEwMDAsNDAwMCwxMDAwLDMyMDAwLDkwMDAsNDAwMCw5MDAwLDE4MDAwLDIwMDAsMTYwMDAsMjQwMDAsMjAwMDAsMjAwMCwyNTAwMCw2MDAwLDIyMDAwLDE1MDAwLDMwMDAsMTAwMCwxNjAwMCwxNzAwMCwxNzAwMCwyMDAwMCwyMDAwLDcwMDAsMTcwMDAsMzAwMCwxNTAwMCwxNzAwMCwxMDAwLDIzMDAwLDE3MDAwLDE2MDAwLDE4MDAwLDkwMDAsMTgwMDAsMjcwMDAsNjAwMCwyMjAwMCwxMDAwLDIxMDAwLDMwMDAsMjYwMDAsMTEwMDAsNjAwMCwyMDAwLDIwMDAwLDQwMDAsMzIwMDAsMzAwMCwzMjAwMCwyMDAwMCwyNDAwMCw1MDAwLDMyMDAwLDE1MDAwLDEyMDAwLDIwMDAsMTYwMDAsMjYwMDAsMTEwMDAsMjUwMDAsMTQwMDAsMjgwMDAsMzIwMDAsMTcwMDAsOTAwMCwyMTAwMCwxNzAwMCw5MDAwLDYwMDAsMjAwMCwyNzAwMCwxODAwMCwxMjAwMCwzMjAwMCwxMDAwLDEwMDAsMjkwMDAsNzAwMCw5MDAwLDgwMDAsMjAwMCwxMTAwMCw4MDAwLDIzMDAwLDIzMDAwLDE0MDAwLDMyMDAwLDIwMDAsMzIwMDAsODAwMCwxMTAwMF0sIm9wcyI6MTM1NjB9LHsibmFtZSI6IlVzaW5nIGBmb3JFYWNoYCIsImNvZGUiOiJjb25zdCBuZXdBcnIgPSBbXVxuYXJyLmZvckVhY2goKGUpID0%2BIHtcblx0bmV3QXJyLnB1c2goZSlcbn0pIiwicnVucyI6WzExMDAwLDExMDAwLDMyMDAwLDYwMDAsNDUwMDAsNTAwMCwxMDAwLDEwMDAsMzAwMCwxMDAwLDQ1MDAwLDE0MDAwLDE0MDAwLDExMDAwLDE2MDAwLDIwMDAsMTQwMDAsMTQwMDAsNDUwMDAsMzAwMCw0ODAwMCwxMTAwMCwyNDAwMCw0NTAwMCwyMDAwLDE0MDAwLDE0MDAwLDEzMDAwLDIzMDAwLDIzMDAwLDUwMDAsMzcwMDAsNDAwMCwyMDAwLDE4MDAwLDkwMDAsMTAwMCwxMDAwLDIwMDAwLDcwMDAsMjYwMDAsMzAwMCwxNzAwMCw0NTAwMCw1MDAwLDQ1MDAwLDIwMDAsNDUwMDAsNDAwMCwxMzAwMCwyMjAwMCwzMDAwLDUwMDAwLDQ1MDAwLDExMDAwLDE0MDAwLDIwMDAsMzAwMCw5MDAwLDQ1MDAwLDE5MDAwLDE3MDAwLDI0MDAwLDQ1MDAwLDYwMDAsMjkwMDAsMjEwMDAsMjUwMDAsMjgwMDAsMzIwMDAsMjcwMDAsMzgwMDAsNzAwMCwxNDAwMCwyNzAwMCw0NDAwMCwyMTAwMCwzNTAwMCwxMDAwLDQ1MDAwLDQ1MDAwLDMwMDAsMTYwMDAsMjAwMCwxMDAwLDI3MDAwLDEzMDAwLDIzMDAwLDEyMDAwLDEwMDAsMTUwMDAsMTMwMDAsMjMwMDAsMjYwMDAsMjAwMDAsNDUwMDAsMTAwMCwxOTAwMCwyODAwMCwyMDAwXSwib3BzIjoxODY0MH1dLCJ1cGRhdGVkIjoiMjAyNC0wMy0yN1QyMjo1Nzo0MC44MzlaIn0%3D)",
          "@marcosrjjunior Agreed, `forof` is better than `.map` or `.forEach`, but a regular for loop is by far the most performant.\r\n\r\n[perf.link](https://perf.link/#eyJpZCI6InB6dGd5eXlyYm1wIiwidGl0bGUiOiJGaW5kaW5nIG51bWJlcnMgaW4gYW4gYXJyYXkgb2YgMTAwMCIsImJlZm9yZSI6ImNvbnN0IGFyciA9IG5ldyBBcnJheSgxMDAwMCkuZmlsbChNYXRoLnJhbmRvbSgpKSIsInRlc3RzIjpbeyJuYW1lIjoiVGVzdCBDYXNlIiwiY29kZSI6ImNvbnN0IG5ld0FyciA9IFtdXG5mb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICBuZXdBcnIucHVzaChhcnJbaV0pXG59IiwicnVucyI6WzQwMDAsMTAwMDAsMTc3NTAsMTkyNTAsMTQ3NTAsMTI3NTAsMTcwMDAsMTQwMDAsMTg1MDAsMTc1MDAsMTMwMDAsMTIwMDAsMTMyNTAsMTQwMDAsMTI3NTAsMTM1MDAsMTQyNTAsMTkwMDAsMTYwMDAsMTU3NTAsMTAyNTAsOTUwMCwxNDUwMCwyMDUwMCwxNjI1MCwxODI1MCwxNzI1MCwxOTI1MCwxNTAwMCwxNDUwMCwxODI1MCwxMzAwMCwyMDAwMCwxMzc1MCwxNzUwMCwxODI1MCwxOTc1MCwxNDI1MCwxMjI1MCw4NTAwLDE1MDAwLDEzNTAwLDEyNTAwLDE3NTAwLDE4MDAwLDE1MDAwLDEyNzUwLDE2NTAwLDE5NzUwLDE5MjUwLDEyNTAwLDExNzUwLDE2NTAwLDE4MjUwLDE1MDAwLDEyNzUwLDE1MjUwLDE2NzUwLDE3MDAwLDE3NzUwLDE3MDAwLDE5NTAwLDIwMDAwLDE3NTAwLDE4MDAwLDE3MjUwLDE5NzUwLDE4NzUwLDE4NTAwLDE1MjUwLDEzNTAwLDEwNTAwLDE3MjUwLDE3NzUwLDE3MjUwLDE4MDAwLDE4NzUwLDE0MjUwLDE5NzUwLDE3NzUwLDE1MDAwLDEzMDAwLDE1MjUwLDE2NzUwLDIwNzUwLDE1MjUwLDE1MDAwLDE4MjUwLDEwMDAwLDE4NzUwLDE4MDAwLDEzNTAwLDE3MjUwLDIxMDAwLDE0MjUwLDIwNTAwLDE1NzUwLDE5MDAwLDE3NTAwLDcyNTBdLCJvcHMiOjE1ODEyfSx7Im5hbWUiOiJUZXN0IENhc2UiLCJjb2RlIjoiY29uc3QgbmV3QXJyID0gW11cbmZvciAoY29uc3QgZSBvZiBhcnIpIHtcbiAgbmV3QXJyLnB1c2goZSk7XG59IiwicnVucyI6WzE3NTAsNDc1MCw3MDAwLDgwMDAsODI1MCwzNzUwLDUwMDAsNTUwMCw1MjUwLDc1MDAsNDAwMCwzNTAwLDMyNTAsNDAwMCw0MjUwLDQ3NTAsNDAwMCw3MDAwLDcyNTAsNjAwMCw2MDAwLDM1MDAsOTI1MCw5MDAwLDQwMDAsNDAwMCw0NzUwLDU1MDAsNTUwMCwzNzUwLDcyNTAsOTUwMCw3MDAwLDU3NTAsODc1MCw4NTAwLDUwMDAsMzc1MCw5MDAwLDI1MDAsNDUwMCwzNzUwLDgyNTAsNTAwMCw0NTAwLDM3NTAsODc1MCw0MDAwLDgwMDAsNzAwMCw3MDAwLDQ1MDAsNjI1MCw2NzUwLDQ1MDAsMzUwMCw0NzUwLDg1MDAsNTc1MCw1MDAwLDQ3NTAsNTAwMCw4MjUwLDUwMDAsNTc1MCwzNTAwLDg3NTAsOTUwMCw4MjUwLDcwMDAsNDc1MCw1NzUwLDYwMDAsNzUwMCw3NTAwLDc3NTAsNDUwMCwzNTAwLDU1MDAsNzUwMCw3MDAwLDM3NTAsNDI1MCw3MjUwLDg1MDAsNDI1MCw0NTAwLDM3NTAsNzAwMCw0NzUwLDc1MDAsOTUwMCw1NzUwLDEwMjUwLDgwMDAsODc1MCwzNTAwLDY3NTAsODAwMCwzNTAwXSwib3BzIjo1OTM1fSx7Im5hbWUiOiJVc2luZyBgbWFwYCIsImNvZGUiOiJjb25zdCBuZXdBcnIgPSBbXVxuYXJyLm1hcCgoZSkgPT4ge1xuXHRuZXdBcnIucHVzaChlKVxufSkiLCJydW5zIjpbMjUwMCwzNTAwLDM3NTAsNDAwMCw0NTAwLDQ1MDAsNDAwMCw0MDAwLDQ1MDAsNDAwMCwzNzUwLDQyNTAsNDc1MCw0NzUwLDQ1MDAsNDUwMCwzNzUwLDQwMDAsNDI1MCw0MDAwLDQwMDAsNDUwMCw0NzUwLDQyNTAsNDI1MCw0NzUwLDQ1MDAsNDUwMCw0NTAwLDMyNTAsNTAwMCw0NzUwLDQyNTAsNDUwMCw0NzUwLDQyNTAsNDAwMCwzNTAwLDM1MDAsMzI1MCw1MDAwLDUwMDAsNDAwMCw1MDAwLDM1MDAsNTAwMCw0NTAwLDQyNTAsNDUwMCw0MjUwLDQyNTAsNDAwMCw0MDAwLDQ3NTAsMzc1MCw0NzUwLDM3NTAsNDAwMCw0MDAwLDQ1MDAsMzc1MCw0MjUwLDQ1MDAsMzc1MCw0NTAwLDQyNTAsNTAwMCw0NzUwLDQwMDAsNDUwMCw0MDAwLDMyNTAsNDUwMCw0NTAwLDQyNTAsNDUwMCwzMjUwLDQ1MDAsNDUwMCwzNTAwLDQ1MDAsNDUwMCw1MDAwLDQ1MDAsNDUwMCw0NzUwLDQwMDAsMzUwMCw0MjUwLDQwMDAsNDI1MCw0NzUwLDM3NTAsNDc1MCw0MjUwLDQ1MDAsNDc1MCw0MjUwLDQ1MDAsNDI1MF0sIm9wcyI6NDI1MH0seyJuYW1lIjoiVXNpbmcgYGZvckVhY2hgIiwiY29kZSI6ImNvbnN0IG5ld0FyciA9IFtdXG5hcnIuZm9yRWFjaCgoZSkgPT4ge1xuXHRuZXdBcnIucHVzaChlKVxufSkiLCJydW5zIjpbMjUwMCwzNzUwLDUwMDAsNDI1MCw1MDAwLDUyNTAsNDI1MCw1MjUwLDQ1MDAsNDI1MCw0MjUwLDUwMDAsNTAwMCw0NzUwLDQyNTAsNDc1MCw1MDAwLDQ1MDAsNDUwMCw0NTAwLDQwMDAsNDc1MCw1MDAwLDQyNTAsNDI1MCw1MjUwLDQ3NTAsNDc1MCw1MDAwLDM1MDAsMzc1MCw1MjUwLDQ1MDAsNDc1MCw0NTAwLDQ3NTAsNDUwMCw1MjUwLDQwMDAsNTI1MCw0NzUwLDUwMDAsNDUwMCw1MjUwLDUwMDAsNTI1MCw0NzUwLDQ3NTAsNDc1MCw0NzUwLDQ3NTAsNDUwMCw0MDAwLDUyNTAsNTUwMCw1MDAwLDQwMDAsNDUwMCw0NTAwLDQyNTAsMzc1MCw0NTAwLDQwMDAsNDI1MCw0MjUwLDQ1MDAsNTAwMCw0NzUwLDQyNTAsNDc1MCw0MjUwLDQwMDAsNDc1MCw0MjUwLDQ1MDAsNDc1MCw0NzUwLDUwMDAsNTAwMCwzNzUwLDQ1MDAsNDc1MCw1MjUwLDQ3NTAsNDUwMCw1MjUwLDQyNTAsNDc1MCw0NTAwLDQyNTAsNDUwMCw0NTAwLDU3NTAsNTUwMCw0NTAwLDUwMDAsNDI1MCw0NTAwLDUwMDAsNDAwMF0sIm9wcyI6NDYwN31dLCJ1cGRhdGVkIjoiMjAyNC0wMy0yN1QyMzowNzowMC42NTFaIn0%3D)\r\n\r\n<img width=\"325\" alt=\"image\" src=\"https://github.com/honojs/hono/assets/3399497/33b15ee6-cd31-4949-8c91-7dd63c4c7e4c\">\r\n",
          "Hi @marcosrjjunior @hanneswidrig \r\n\r\nThanks!\r\n\r\nI've tried taking benchmarks with [the script](https://github.com/honojs/hono/pull/2431) on Node.js and Bun. The results are interesting.\r\n\r\nNode.js:\r\n\r\n<img width=\"840\" alt=\"Screenshot 2024-03-28 at 11 04 16\" src=\"https://github.com/honojs/hono/assets/10682/6f13aa55-7190-4099-a9f3-263fa47a682f\">\r\n\r\nBun:\r\n<img width=\"887\" alt=\"Screenshot 2024-03-28 at 11 04 34\" src=\"https://github.com/honojs/hono/assets/10682/7fcb7f72-b7fd-4245-8daa-eab081638825\">\r\n\r\nAs you mentioned, the regular loop with `for` is the fastest on Node.js. But on Bun, `forEach` and `for of` and a regular loop are almost the same.\r\n\r\nIn this case, the difference between a regular loop and others on Node.js is big, so we have to use a regular loop with `for`! ",
          "is probably not as significant based on the size of `allMethods` but it is something : )",
          "@marcosrjjunior \r\n\r\nAh, yeah. And to be honest, this is only done when the application is initialized, so it's not incredibly important."
        ]
      },
      {
        "pr_number": 2413,
        "title": "fix(aws-lambda): handle response without body (#2401)",
        "body": "In case of a streaming lambda, the response should still contain metadata\r\nlike status and content type, even if no body is given.\r\nThis could be for example a redirect response.\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2413",
        "comments": [
          "@yusukebe @watany-dev I've fixed the aws-lambda issue I've reported. Please have a look and let me know if there is anything required on this PR.",
          "Thanks @KnisterPeter !\r\n\r\n@watany-dev Could you please review this?",
          "@yusukebe @watany-dev Any update on this?",
          "@KnisterPeter Sorry!\r\n\r\nLet's go with it! Thank you for contributing!"
        ]
      },
      {
        "pr_number": 2430,
        "title": "fix(validator): `await` cached contents",
        "body": "Fixes #2163\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2430",
        "comments": []
      }
    ],
    "v4.1.4": [
      {
        "pr_number": 2394,
        "title": "fix(jsx): allow null, undefined, and boolean as children",
        "body": "fixes #2391\r\n\r\n### Insufficient type definitions\r\n\r\n`null` and `undefined` should also be allowed for JSX child elements, and even hono was implemented with this assumption in the following places, but it was omitted from the type definition. This will be fixed in c16c6c0e839188742f24eec6f86266ead02ec707\r\n\r\nhttps://github.com/usualoma/hono/blob/b5ad5f4418a6ed50ac61bdb07b8f016693bfd533/src/jsx/base.ts#L76-L77\r\n\r\n### Insufficient null/undefined/boolean handling\r\n\r\nThere were some child elements of `Suspense` and `ErrorBoundary` that had insufficient handling of `null` and `undefined`, which were fixed with e151c792cf40751cacd988fc2745ef5e08ae56e9.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2394",
        "comments": ["@usualoma \r\n\r\nThanks. Merge it into main now."]
      },
      {
        "pr_number": 2411,
        "title": "fix(reg-exp-router): escape meta characters for find middleware",
        "body": "fixes #2345\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2411",
        "comments": ["@usualoma Thanks!"]
      },
      {
        "pr_number": 2412,
        "title": "refactor(types): optimize inferring handler types",
        "body": "I've refactored the code for some matters about types.\r\n\r\n* Fixed the handlers' overload order. This improves performance when inferring handler return types.\r\n* Fixed some bugs for types.\r\n* Apply `Prettify`.\r\n* Fixed `tsc` errors.\r\n\r\nRelated to #2399\r\n\r\n### Performance improvement\r\n\r\nGetting faster inferring handler return types. Below are the results if it's a simple case that it has one handler.\r\n\r\nBefore:\r\n\r\n<img width=\"1066\" alt=\"Screenshot 2024-03-25 at 16 16 31\" src=\"https://github.com/honojs/hono/assets/10682/fb00d72d-9b9e-4de7-9e4d-563026fad45b\">\r\n\r\nThis PR:\r\n\r\n<img width=\"564\" alt=\"Screenshot 2024-03-25 at 16 15 59\" src=\"https://github.com/honojs/hono/assets/10682/bfda368e-ee7c-42df-8b8a-de4cee04e9cd\">\r\n\r\nThis improves RPC-mode performance but does not change much because the implementation of the `hc` function is not so good.\r\n\r\n#### The scripts for measuring \r\n\r\n```ts\r\n// create.ts\r\nimport { writeFileSync } from 'fs'\r\n\r\nlet code = `\r\nimport { Hono } from 'hono'\r\n\r\nconst app = new Hono()\r\n\r\nconst routes = app\r\n`\r\nfor (let i = 1; i < 300; i++) {\r\n  code += `.get('/route${i}', (c) => {\r\n    return c.json({\r\n      ok: true\r\n    })\r\n  })`\r\n}\r\n\r\ncode += `\r\n\r\nexport type AppType = typeof routes\r\nexport default routes\r\n`\r\n\r\nwriteFileSync(import.meta.dir + '/index.ts', code)\r\n```\r\n\r\n```ts\r\n// client.ts\r\nimport { hc } from 'hono/client'\r\nimport { AppType } from '.'\r\n\r\nconst client = hc<AppType>('/')\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2412",
        "comments": [
          "@yusukebe this breaks #2019 again",
          "@KaelWD \r\n\r\nOops. Fixed with #3051. Thank you!"
        ]
      }
    ],
    "v4.1.3": [
      {
        "pr_number": 2385,
        "title": "fix(deno): export jwt helpers for Deno in `src/helper.ts`",
        "body": "Fixes #2379\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2385",
        "comments": []
      },
      {
        "pr_number": 2384,
        "title": "fix(jsx): use self closing tag only if element has no children",
        "body": "Fixes https://github.com/honojs/hono/issues/2383\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2384",
        "comments": []
      },
      {
        "pr_number": 2381,
        "title": "feat(ssg): Support asynchronous hooks ",
        "body": "ref:  https://github.com/honojs/middleware/pull/412\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2381",
        "comments": [
          "Hi @watany-dev \r\n\r\nThis is a `feat`, but this is a minor matter. So, I'll merge this to the main immediately and release it as a patch-release.\r\n\r\nThanks!"
        ]
      },
      {
        "pr_number": 2392,
        "title": "fix(validator): use cached body for `json` and `form` validation",
        "body": "Fixes #2163\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2392",
        "comments": []
      },
      {
        "pr_number": 2390,
        "title": "fix(jsx): escape attribute value for \"style\"",
        "body": "fixes #2388\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2390",
        "comments": ["@usualoma Thanks for the quick fix."]
      }
    ],
    "v4.1.2": [
      {
        "pr_number": 2350,
        "title": "feat(utils/cookie): Typesafe cookie options",
        "body": "add Types for settings cookie options and make below operations typesafe\r\n\r\n- `--Secure_` prefix\r\n- `--Host_` prefix\r\n- `Partitoned` option\r\n\r\nas discussed in https://github.com/honojs/hono/pull/2314#issuecomment-1980809011\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [N/A] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2350",
        "comments": [
          "Note:\r\n\r\nin #2314, I added some tests for make sure invalid operation throws error.\r\nBut adding type guard makes them compile error, so I removed them in this PR. https://github.com/honojs/hono/pull/2350/commits/6a05c93a376af52ef2bfbbeaab1ac536ea98e63e\r\n\r\nIt works fine on TypeScript but if hono used on node.js with vanilla js, it should covered by runtime error handling.\r\nfor example, running error handling test only on .js or so could cover here.",
          "Hi @Jxck !\r\n\r\nAwesome idea to validate them with Type-safe. I think removing the tests is good because of what you mentioned.\r\n\r\nThis is a new feature, but it's a minor change, and changing behavior only util functions. So, let's merge this into \"main\" and release it as a patch release later.\r\n\r\nThanks!"
        ]
      },
      {
        "pr_number": 2375,
        "title": "fix(router): accept reg exp meta characters in path",
        "body": "Fixes #2345\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2375",
        "comments": ["@usualoma Thanks!\r\n\r\nI'll merge this now.\r\n"]
      },
      {
        "pr_number": 2376,
        "title": "perf(utils/url): use `slice` + `indexOf` for `getPath()`",
        "body": "For `getPath()`, the `slice` + `indexOf` is faster than RegExp.\r\n\r\nNode.js:\r\n\r\n```txt\r\ncpu: Apple M1 Pro\r\nruntime: node v20.10.0 (arm64-darwin)\r\n\r\nbenchmark            time (avg)             (min \u2026 max)       p75       p99      p999\r\n------------------------------------------------------- -----------------------------\r\nnoop                 61 ps/iter        (20 ps \u2026 257 ns)     61 ps     81 ps    143 ps !\r\n\r\n\u2022 getPath\r\n------------------------------------------------------- -----------------------------\r\nslice + indexOf   35.85 ns/iter     (21.28 ns \u2026 162 ns)  36.11 ns  38.84 ns  47.32 ns\r\nregexp            57.76 ns/iter     (45.29 ns \u2026 215 ns)  55.81 ns    134 ns    185 ns\r\n\r\nsummary for getPath\r\n  slice + indexOf\r\n   1.61x faster than regexp\r\n```\r\n\r\nBun:\r\n\r\n```\r\ncpu: Apple M1 Pro\r\nruntime: bun 1.0.31 (arm64-darwin)\r\n\r\nbenchmark            time (avg)             (min \u2026 max)       p75       p99      p999\r\n------------------------------------------------------- -----------------------------\r\nnoop                 50 ps/iter       (0 ps \u2026 66.08 ns)     61 ps     81 ps    264 ps !\r\n\r\n\u2022 getPath\r\n------------------------------------------------------- -----------------------------\r\nslice + indexOf   31.45 ns/iter     (29.62 ns \u2026 319 ns)   31.8 ns  38.78 ns    184 ns\r\nregexp            40.87 ns/iter     (36.68 ns \u2026 324 ns)  41.22 ns  59.59 ns    237 ns\r\n\r\nsummary for getPath\r\n  slice + indexOf\r\n   1.3x faster than regexp\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2376",
        "comments": []
      },
      {
        "pr_number": 2357,
        "title": "fix(router): wildcard paths when using js reserved words (like constructor and __proto__)",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2357",
        "comments": [
          "I have a bug on production with an user that used the \"constructor\" word on their data:\r\n\r\n![image](https://github.com/honojs/hono/assets/13019179/26fa42fc-7cb1-44f8-8557-af4862352a04)\r\n",
          "Hi @lmcarreiro !\r\n\r\nThank you for the PR. You are right, this should be fixed and your implementation good! Two things I want you to do.\r\n\r\n1. Add a test to check it works correctly with preserved words to `src/router/common.case.test.ts.`\r\n2. Run `bun run lint:fix && bun run format:fix` to fix a lint error.\r\n\r\n\r\n",
          "Thanks @yusukebe. I added the tests there, it was broken a the other routers too, I applied the same fix on them and it looks fine now. I also ran the lint+format fixes.",
          "@lmcarreiro \r\n\r\nThanks! Sorry to bother you again. Could you run `bun run denoify` or `yarn denoify` again?",
          "> Thanks! Sorry to bother you again. Could you run `bun run denoify` or `yarn denoify` again?\r\n\r\nSure. It's done, sorry I forgot about that after pushing the new changes.",
          "@lmcarreiro \r\n\r\nThank you very much! I'll merge it now!"
        ]
      },
      {
        "pr_number": 2365,
        "title": "fix(types): `MergePath` merge blank paths correctly",
        "body": "This PR may fix the issue that PR #2347 tries to fix.\r\n\r\nEven though the app includes `app.route()` with blank path `''`, it should infer the path in the client correctly:\r\n\r\n```ts\r\n// Server\r\nconst app = new Hono().basePath('/api/v1')\r\nconst routes = app.route(\r\n  '/me',\r\n  new Hono().route(\r\n    '',\r\n    new Hono().get('', async (c) => {\r\n      return c.json({ name: 'hono' })\r\n    })\r\n  )\r\n)const app = new Hono().basePath('/api/v1')\r\nconst routes = app.route(\r\n  '/me',\r\n  new Hono().route(\r\n    '',\r\n    new Hono().get('', async (c) => {\r\n      return c.json({ name: 'hono' })\r\n    })\r\n  )\r\n)\r\n\r\n// Client\r\n\r\nconst client = hc<typeof routes>('http://localhost')\r\nclient.api.v1.me // <=== correct\r\n```\r\n\r\nBut, in the current implementation, it can't infer correctly:\r\n\r\n<img width=\"588\" alt=\"Screenshot 2024-03-16 at 23 00 04\" src=\"https://github.com/honojs/hono/assets/10682/d28e2643-d9c0-40d8-ab85-d96936c0c0b2\">\r\n\r\nThis PR will fix the issue by fixing the `MergePath` behavior.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2365",
        "comments": [
          "Thanks @poteboy !\r\n\r\nThe current behavior will be changed, but since it was not behaving correctly, we can release it as a patch release.\r\n\r\nAnd if we merge this, the #2347 is not needed?",
          "Merging now!"
        ]
      }
    ],
    "v4.1.1": [
      {
        "pr_number": 2346,
        "title": "fix(context): export `ExecutionContext` from `hono`",
        "body": "With this change, you can re-define `ExecutionContext` types in your app:\r\n\r\n```ts\r\ndeclare module 'hono' {\r\n  interface ExecutionContext {\r\n    waitUntil(promise: Promise<any>): void\r\n    passThroughOnException(): void\r\n    abort(reason?: any): void\r\n  }\r\n}\r\n```\r\n\r\nFixes #2341\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2346",
        "comments": []
      },
      {
        "pr_number": 2344,
        "title": "fix(client): Remove trailing slash from /index for precise path matching",
        "body": "This PR addresses an issue where the `removeIndexString` function was leaving a trailing slash when removing `/index` from URLs, which conflicted with Hono's exact matching behavior for route definitions. This behavior was observed in Hono v4.1.0 running on Cloudflare Workers, where the presence of a trailing slash would cause an otherwise valid endpoint to return a 404 error.\r\n\r\n### Changes\r\n- Updated `removeIndexString` function within the Hono Client to ensure the trailing slash is removed along with `/index`, aligning URL formats with the expected endpoint paths for exact matching.\r\n\r\n### Example Scenario and Code Snippet:\r\nBelow is an example highlighting the issue and demonstrating how the current implementation may lead to unexpected behavior:\r\n\r\n```ts\r\nconst app = new Hono().basePath(\"/api/v1\");\r\nexport const getMe = new Hono().get(\"\", async (c) => {\r\n  return c.json({ name: \"hono\" });\r\n});\r\n\r\nexport const meRoute = new Hono().route(\"\", getMe);\r\n\r\nconst route = app.route(\"/me\", meRoute);\r\ntype AppType = typeof route;\r\n\r\n// Previously, this would result in a request to http://localhost:8787/api/v1/me/ instead of http://localhost:8787/api/v1/me\r\nhc<AppType>(\"http://localhost:8787\").api.v1.me.index.$get();\r\n```\r\n\r\n### Additional Consideration\r\n\r\nAdditionally, when using the Hono Client's `$url` method, the `/index` segment is not removed as expected, resulting in URLs that could potentially cause fetch errors. For example, `hc<AppType>(\"http://localhost:8787\").api.v1.me.index.$url().href` returns `http://localhost:8787/api/v1/me/index`, which is not ideal. I'm considering submitting a separate PR to address this issue by enhancing the $url method to remove the /index segment when generating URLs. Feedback on this proposal would be greatly appreciated.\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2344",
        "comments": [
          "Hi @poteboy \r\n\r\nThanks for the PR! Looks good.\r\n\r\n> I'm considering submitting a separate PR to address this issue by enhancing the $url method to remove the /index segment when generating URLs. Feedback on this proposal would be greatly appreciated.\r\n\r\nYou are right. `index` should be removed. Please create a PR!\r\n\r\nFor this PR, now merging."
        ]
      },
      {
        "pr_number": 2362,
        "title": "ci: fix bun version for `denoify`",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2362",
        "comments": []
      },
      {
        "pr_number": 2361,
        "title": "refactor(jsx-renderer): remove unnecessary comments for eslint",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2361",
        "comments": []
      },
      {
        "pr_number": 2351,
        "title": "fix(lambda-edge): Lambda@Edge GET/HEAD body error.",
        "body": "This PR addresses the issue where the exception Request with GET/HEAD method cannot have body. is raised when using the GET or HEAD method with Lambda@Edge.\r\n\r\n```typescript\r\nimport { Hono } from \"hono\";\r\nimport { handle } from \"hono/lambda-edge\";\r\napp.get(\"/\", (c, next) => {\r\n    return c.json({}, 200);\r\n});\r\napp.post(\"/\", (c, next) => {\r\n    return c.json({}, 200);\r\n});\r\n\r\nexport const handler = handle(app);\r\n```\r\n\r\nWhile POST requests work without any issues, sending a GET request results in an error.\r\n\r\n\r\n### Changes\r\nMade sure that the request does not include a body when the method is GET or HEAD.\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2351",
        "comments": [
          "@trkbt10 \r\nThanks for the correction. A `bun run denoify` after review will also resolve the CI",
          "Hi @trkbt10 \r\n\r\nThank you for the PR. The code is good! But, CI fails with a \"denoify\" matter.\r\n\r\nThe weird thing is that we wrote `// @denoify-ignore` in `src/adapter/lambda-edge/handler.ts`, so the code is not generated by the `denoify` command, so this CI should go through, but it fails.\r\n\r\n@trkbt10 Could you run `bun run denoify` or `yarn denoify` on your side?",
          "I ran `bun run denoify` in my local environment, but no errors occurred.\r\n\r\nHere is the result:\r\n\r\n```bash\r\n> bun run denoify\r\n$ rimraf deno_dist && denoify && rimraf \"deno_dist/**/*.test.{ts,tsx}\"\r\nDenoify is reading sources files from src\r\nDeno distribution will be generated at deno_dist\r\n\r\n```\r\nAdditionally, This did not generate any new files or change any files.\r\n\r\nIf there is anything else I can do, I would be grateful if you could let me know.\r\n",
          "@trkbt10 \r\n\r\nI found that the CI was caused by another issue, fixed it,  and the CI on main is passed.\r\n\r\nSo, everything is good. I'll merge now. Thanks!"
        ]
      },
      {
        "pr_number": 2363,
        "title": "fix(jsx-renderer): don't overwrite headers if stream is `true`",
        "body": "Fixes the issue as same as https://github.com/honojs/middleware/issues/418\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2363",
        "comments": []
      },
      {
        "pr_number": 2364,
        "title": "fix(context): set headers correctly if it has `this.#headers`",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2364",
        "comments": []
      },
      {
        "pr_number": 2320,
        "title": "fix(streaming): Fix stream SSE, not necessary close stream.",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [X] Add tests\r\n- [X] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\nRelated to this issue: https://github.com/honojs/hono/issues/2319",
        "html_url": "https://github.com/honojs/hono/pull/2320",
        "comments": [
          "Hi @damianpumar, Thanks!\r\n\r\n@watany-dev Could you review this?\r\n",
          "@damianpumar \r\nThanks, I understand the intent of the fix, including the issue. I made a small comment, please take a look. Also, when it's all done, a `bun run denoify` would eliminate the CI error.",
          "@damianpumar Thanks!\r\n\r\n@watany-dev Can you review this again? It looks good to me.",
          "@damianpumar @yusukebe \n\nThanks! I think that should do it.",
          "Thanks! Merge now.",
          "@yusukebe thanks for the flame ,@damianpumar thanks for the fix, I see it's merged into main. \r\nOn Chrome (MacOS) its working, but on Safari 17.6 (MacOS 12.7.6) I am getting browser a hangs. \r\n\r\nUsing the same basic code block id counter as per docs, is\r\n\r\n```\r\nlet id = 0\r\napp.get('/sse', async (c) => {\r\n  return streamSSE(c, async (stream) => {\r\n    while (true) {\r\n      const message = `It is ${new Date().toISOString()}`\r\n      await stream.writeSSE({\r\n        data: message,\r\n        event: 'time-update',\r\n        id: String(id++),\r\n      })\r\n      await stream.sleep(1000)\r\n    }\r\n  })\r\n})\r\n```\r\n\r\nThis seems to be tied to Safari, it's the same with Chrome and Safari on iOS, still worth looking into.\r\n"
        ]
      }
    ],
    "v4.1.0": [
      {
        "pr_number": 2224,
        "title": "feat: Add a \"cause\" option to HTTPException",
        "body": "Add a \"cause\" option to HTTPException for easier debugging.\r\nclose #2170 \r\n\r\n### How to use\r\n\r\n```ts\r\napp.get('/users', (c) => {\r\n  try {\r\n    const result = await db.select().from(users);\r\n    return c.json(result);\r\n  } catch (error) {\r\n    throw new HTTPException(500, {\r\n      message: 'Internal Server Error',\r\n      cause: error,\r\n    })\r\n  }\r\n})\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2224",
        "comments": [
          "Hi @Karibash \r\n\r\nThanks for the PR. This is a new feature. So, it will be introduced in the next \"minor\" version. It can't be merged to \"main\" immediately. I'll prepare \"next\" branch later. Then, I'll review the details and after that, merge it later. Please wait a little.",
          "Hey @Karibash !\r\n\r\nI'll merge this into the \"next\" branch for `v4.1.0`. Thanks! It will be released maybe soon."
        ]
      },
      {
        "pr_number": 2228,
        "title": "feat(logger): support `NO_COLOR`",
        "body": "Related: https://github.com/honojs/hono/pull/2007\r\nThis PR adds `utils/colors.ts`.\r\n\r\nWe have to support `NO_COLOR`.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2228",
        "comments": [
          "@ryuapp \r\n\r\nThis is great. I'll review the details later. This will be introduced in the next \"minor\"  version.",
          "Hi @ryuapp !\r\n\r\nThanks. I'll merge this into the \"next\" branch for the `v4.1.0`. It will be released maybe soon!"
        ]
      },
      {
        "pr_number": 2269,
        "title": "feat(cookie): add secure and host prefix support",
        "body": "Hello @yusukebe!\r\n\r\nI have added support for secure and host prefixes. This PR resolves https://github.com/honojs/hono/issues/1203\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\ncc: @Code-Hex ",
        "html_url": "https://github.com/honojs/hono/pull/2269",
        "comments": [
          "Hey @Code-Hex !\r\n\r\nCould you also review this one?",
          "@Datron I added a few comments but almost looks great to me!",
          "@Code-Hex I've resolved your comments. ",
          "@yusukebe Could you check one more time?",
          "Looks good again!\r\n\r\nThanks @Datron and @Code-Hex !\r\n\r\nI'll merge this into the \"next\" branch for `v4.1.0`. I'll release it maybe soon (when the WebSocket feature is merged!)."
        ]
      },
      {
        "pr_number": 2187,
        "title": "feat(ssg): generate files concurrently",
        "body": "Continued from #2169.\r\n\r\n### Deletion of Commit\r\n\r\nI've divided detailed topics into separate PRs and issues.\r\n\r\n* #2186\r\n* https://github.com/honojs/hono/issues/2175\r\n    * https://github.com/honojs/hono/pull/2174\r\n    * https://github.com/honojs/hono/pull/2178\r\n\r\n### The default number of concurrency in SSG is 2.\r\n\r\nThe default value is debatable, but for this PR it was set to 2. The reasons are as follows.\r\n* Even at 2 (or 1), this PR will parallelize writes to the file system, which is expected to be a sufficient speed improvement over the current main\r\n* When calling external APIs, it is not good if the default is too large\r\n\r\nUsers can easily specify their own values with `concurrency`, so a small default is fine.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2187",
        "comments": [
          "My work is done.\r\n\r\nIf there is enough discussion in #2169 to form a consensus on the implementation policy, I think we can merge in this PR content.",
          "It seems to have been CLOSED by some accident.",
          "@watany-dev \r\n\r\nThanks for the notice.\r\n\r\n@usualoma \r\n\r\nI've checked this again and run this real situation; it works well. I'd like to merge this, so please merge the \"next\".",
          "@yusukebe merged!",
          "@usualoma \r\n\r\nThanks! Merging now."
        ]
      },
      {
        "pr_number": 2197,
        "title": "feat(jsx): more react staff",
        "body": "Once #2196  and this PR are merged, I believe the following example will work with 'hono/jsx/dom' (without react).\r\n\r\nhttps://tutorial.jotai.org/examples/textLenght\r\n\r\n### New staff members\r\n\r\n`useReducer`, `useDebugValue`, `createElement`\r\n\r\n`useDebugValue` is just a dummy and useless, but it was added to avoid import errors.\r\n\r\n### export default\r\n\r\nAlthough rarely used in this way today, the following library for React, which is written as follows, can be used as is without modification.\r\n\r\n```ts\r\nimport React from 'react' // reaplced with 'hono/jsx/dom'\r\n\r\nconst App = () => {\r\n  const [value, updateValue] = React.useState(0)\r\n  // ...\r\n}\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2197",
        "comments": [
          "It seems to have been CLOSED by some accident.",
          "Merging!"
        ]
      },
      {
        "pr_number": 2309,
        "title": "feat: introduce Body Limit Middleware using stream ",
        "body": "I was supposed to merge #2103 into next, but I mistakenly merged it into main, so I will create a new PR.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2309",
        "comments": []
      },
      {
        "pr_number": 2327,
        "title": "Next",
        "body": "For v4.1.",
        "html_url": "https://github.com/honojs/hono/pull/2327",
        "comments": []
      },
      {
        "pr_number": 2327,
        "title": "Next",
        "body": "For v4.1.",
        "html_url": "https://github.com/honojs/hono/pull/2327",
        "comments": []
      },
      {
        "pr_number": 2265,
        "title": "feat: Introduce WebSocket Helper / Adapter",
        "body": "Reference: https://github.com/honojs/hono/issues/1153\r\n\r\nIf we marge this PR, we can use WebSocket API through Hono easier.\r\n\r\nExample (Bun):\r\n```tsx\r\n// app.tsx\r\n\r\n/** @jsx jsx */\r\n/** @jsxImportSource ./hono/src/jsx */\r\nimport { Hono } from 'hono'\r\nimport { createBunWebSocket } from 'hono/ws/bun'\r\n\r\nconst { upgradeWebSocket, websocket } = createBunWebSocket()\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/', c => {\r\n  return c.html(\r\n  <html>\r\n    <head>\r\n      <meta charset=\"UTF-8\" />\r\n    </head>\r\n    <body>\r\n      <h1>Hono WebSocket Example</h1>\r\n      <div id=\"now-time\"></div>\r\n      <script dangerouslySetInnerHTML={{\r\n        __html: `\r\n        const ws = new WebSocket('/ws')\r\n        const $nowTime = document.getElementById('now-time')\r\n        ws.onmessage = evt => {\r\n          $nowTime.textContent = evt.data\r\n        }\r\n        `\r\n      }}></script>\r\n    </body>\r\n  </html>)\r\n})\r\n\r\nconst ws = app.get('/ws', upgradeWebSocket(c => {\r\n  let intervalId: number\r\n  return {\r\n    onOpen(evt, ws) {\r\n      intervalId = setInterval(() => {\r\n        ws.send(new Date().toString())\r\n      }, 200) as unknown as number\r\n    },\r\n    onClose () {\r\n      clearInterval(intervalId)\r\n    }\r\n  }\r\n}))\r\n\r\nexport type AppType = typeof ws\r\n\r\nBun.serve({\r\n  fetch: app.fetch,\r\n  port: 3030,\r\n  websocket\r\n})\r\n```\r\nThen, it is working!\r\n\r\nhttps://github.com/honojs/hono/assets/79000684/100d4bba-36fd-4c56-a74a-f779d5cb55c9\r\n\r\nIn Cloudflare workers, it probably work (I didn't test it):\r\n```ts\r\n// Replace\r\nimport { createBunWebSocket } from 'hono/ws/bun'\r\nconst { upgradeWebSocket, websocket } = createBunWebSocket()\r\n// To\r\nimport { upgradeWebSocket } from 'hono/ws/cloudflare-workers'\r\n```\r\n\r\nAnd, Hono client can work on it!\r\n```ts\r\nimport type { AppType } from './app'\r\nimport { hc } from 'hono/client'\r\n\r\nconst client = hc<AppType>('/')\r\nconst socket = client.ws.$ws() // socket is just `WebSocket` instance\r\n\r\nsocket.onmessage = ...\r\n```\r\nCons for client:\r\n - This implementing code is not smart, I think good solution it is exists.\r\n - Not type safe\r\n\r\n### Implemented adapters:\r\n- [x] Bun\r\n- [x] Cloudflare Workers\r\n- [ ] Node.js\r\n- [ ] AWS lambda\r\n- [x] Cloudflare Pages\r\n- [x] Deno\r\n- [ ] lambda-edge\r\n- [ ] netlify\r\n- [ ] ~~Vercel~~ (Vercel doesn't support WebSockets)\r\n\r\n\r\n### ~~New `devDependencies`~~\r\n- ~~[`bun-types`](https://www.npmjs.com/package/bun-types)~~\r\n  - ~~The reason is to make Bun Adapter~~\r\n  - ~~It is only included Types.~~\r\n### Author should do the followings, if applicable\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2265",
        "comments": [
          "@yusukebe How do you think this idea?",
          "In Cloudflare Workers (Server side), the `open` event is not handled.\r\nWhen I didn't use Hono, the same problem occurred.\r\nI don't know how to resolve it. I took a wrangler and did a test, so It may work in the production environment.\r\n\r\nAnd, I discovered that Workers Adapter is working in Pages, so we don't need Pages adapter for WebSocket.",
          "If we need, we can marge now!",
          "Hi @nakasyou !\r\n\r\nThis is a super cool feature. I would like to take a moment to review it, so please give me a few minutes!\r\n",
          "Now I'm trying to use it. But we have to hear the opinion from @Kyiro ! What do you think?",
          "I'm playing it now. Wow, awesome.\r\n\r\nhttps://github.com/honojs/hono/assets/10682/e801ead4-1a4c-452d-997e-d4e95f2de966\r\n\r\n",
          "> In Cloudflare Workers (Server side), the `open` event is not handled.\r\n\r\nThat's right, `open` doesn't work on Cloudflare. It didn't work in the production environment either.\r\n\r\n> Not type safe\r\n\r\nI don't think it is \"not type safe\" because the `client` will suggest the paths and `$ws`.\r\n",
          "Hi @yusukebe, thank you for reviewing!\r\n\r\n> I'm playing it now. Wow, awesome.\r\n\r\nThank you!\r\n\r\n> That's right, open doesn't work on Cloudflare. It didn't work in the production environment either.\r\n\r\nI see. I was relieved.\r\n\r\n> I don't think it is \"not type safe\" because the client will suggest the paths and $ws.\r\n\r\nYes, I can also think so. My words were not enough.\r\nI think the message data is not type safe.\r\n\r\nIf we can make it, I want message validator and sending type.\r\nI've tried to make them for few times, but they didn't go well.\r\n\r\n",
          "It seems good change almost at the same time we are developing [CrossWS](https://crossws.unjs.io/) for being used across ecosystem. I think it would be a really good opportunity to collaborate and not reinvent same adapters but increase coverage from one place.\r\n\r\nCrossWS can be embedded into hono so you can build any API/Client on top. And I am more than open to discuss how we can make it flexbible enough for Hono to be using it. \u2764\ufe0f ",
          "> Now I'm trying to use it. But we have to hear the opinion from @Kyiro ! What do you think?\r\n\r\nLooks awesome to me \ud83d\udc4d",
          "Hi @nakasyou \r\n\r\n> If we can make it, I want message validator and sending type.\r\n> I've tried to make them for few times, but they didn't go well.\r\n\r\nI don't think there is any need to Type because the data can be sent by WebSocket since it is not structured data; what do you think?\r\n\r\n<img width=\"624\" alt=\"Screenshot 2024-02-28 at 2 50 33\" src=\"https://github.com/honojs/hono/assets/10682/0b57f7ec-a835-469f-a052-a002e1dd81ff\">\r\n\r\n",
          "Hi @pi0 \r\n\r\nThank you for the comment.\r\n\r\n> CrossWS can be embedded into hono so you can build any API/Client on top. And I am more than open to discuss how we can make it flexbible enough for Hono to be using it. \u2764\ufe0f \r\n\r\nThat is certainly true. But the feature is already in place and ready to ship as soon as this PR review is done. For us, it is important to \"release quickly. Instead, a long discussion is needed on the use of CrossWS. Because our policy is \"not to depend on external libraries\".\r\n\r\nWe cannot collaborate immediately, but we may be able to change the logic of WebSocket to CrossWS in the future. Thanks.",
          "I am mainly caring because if the user hooks API is is consistent (not impl but even interface) we can have much better Hono support within UnJS ecosystem in the future and also possibly for Nuxt integration. If we diverge yet another layer (WS), it would be trickier.\r\n\r\nMind you, also the current API design in this PR that makes new callbacks inside `upgradeWebSocket` is not most performant choice. Bun docs for reference: \r\n\r\n<img width=\"766\" alt=\"image\" src=\"https://github.com/honojs/hono/assets/5158436/d9630b81-ff64-48a0-9160-a576476644dc\">\r\n\r\n---\r\n\r\nI am not how much you are in hurry to ship this. I think this PR was exactly made the day I publicly announced CrossWS so not sure why is the rush and CrossWS API was hammer and thought for a while. \r\n\r\nDefenitly we can also think of another adapter between Hono<>CrossWS but it would make things one more level slower.\r\n\r\nRegardless I trust your final choice and always happy to help building better JS ecosystem together.",
          "@pi0 \r\n\r\nThanks for your comment.\r\n\r\n> we can have much better Hono support within UnJS ecosystem in the future and also possibly for Nuxt integration\r\n\r\nOne thing I did not write about before is this. This is very interesting, and one of the most important things for Hono is to be able to integrate with other layers of the framework.\r\n\r\n>  I think this PR was exactly made the day I publicly announced CrossWS so not sure why is the rush and CrossWS API was hammer and thought for a while.\r\n\r\nIt is true that this PR was created recently, but the idea of WebSocket support and its implementation has been around for a long time.\r\n\r\n> Regardless I trust your final choice and always happy to help building better JS ecosystem together.\r\n\r\nThanks!\r\n",
          "Hi @yusukebe, thank you for your opinion!\r\n> I don't think there is any need to Type because the data can be sent by WebSocket since it is not structured data; what do you think?\r\n\r\nWhen we use JSON. I feel sending JSON through WebSocket is popular.\r\nIf we implement it, I think will be a breakthrough.\r\nBut, we can implement it in future, not in this PR.\r\nWhat do you think?\r\n\r\nHi @pi0, thank you for comment!\r\n> I publicly announced CrossWS so not sure why is the rush and CrossWS API was hammer and thought for a while.\r\n\r\nI'll make a supplement about it.\r\n\r\nI didn't think about CrossWS for sending this PR, and I created this PR because I want it.\r\nSo it's a coincidence, I'm very surprised.\r\n",
          "@nakasyou \r\n\r\n> When we use JSON. I feel sending JSON through WebSocket is popular.\r\n> If we implement it, I think will be a breakthrough.\r\n> But, we can implement it in future, not in this PR.\r\n> What do you think?\r\n\r\nAh, I see. But maybe it's super difficult! Both server and client `send` and `onmessage` must be supported. I don't want to make the type definitions too complicated, so I think it is unnecessary to implement this in this PR.",
          "Hi @yusukebe \r\n\r\n> Have you thought about exporting functions from `hono/cloudflare-workers` instead of `hono/ws/cloudflare-workers`? This is the same as the `toSSG` approach.\r\n> \r\n> ```ts\r\n> import { upgradeWebSocket } from 'hono/cloudflare-workers'\r\n> ```\r\n> \r\n> And can you write a runtime test for Cloudflare and Deno?\r\n\r\nI think that this is good idea, so I changed it.",
          "@nakasyou \r\n\r\n> I think that this is good idea, so I changed it.\r\n\r\nOkay! When you finish your work, please ping me.",
          "Hi @yusukebe, finished my work.\r\n\r\nAnd, I want to discuss, I think it may be good API:\r\n```ts\r\nimport { upgradeWebSocket } from 'hono/ws'\r\nimport { cfWebSocketContext } from 'hono/cloudflare-workers'\r\n\r\napp.get('/ws', upgradeWebSocket(cfWebSocketContext, () => ({...}))\r\n```\r\nIt is similar to the toSSG adapter.\r\nIt maybe more extensible than now API. \r\nWhat do you think about this API?",
          "Thanks @nakasyou !\r\n\r\n> And, I want to discuss, I think it may be good API...\r\n\r\nI think your API is good. But, I want the user to import just one line:\r\n\r\n```ts\r\nimport { upgradeWebSocket } from 'hono/cloudflare-workers'\r\n```\r\n\r\nIn the case of your proposed API, it makes sense if the `upgradeWebSocket` exported from `'hono/ws'` has a lot of common processes. However, its implementation varies widely from runtime to runtime, so I think the current implementation where `hono/ws` exports only type `UpgradeWebSocket` is fine.\r\n\r\nOf course, you can make that adapter like this:\r\n\r\n```ts\r\n// src/adapter/cloudflare-workers/websocket.ts\r\nimport { upgradeWebSocket as commonUpgradeWebSocket } from 'hono/ws'\r\n// ...\r\nexport const upgradeWebSocket = (arg) => commonUpgradeWebSocket(cfWebSocketContext, arg)\r\n```\r\n\r\nThat way is not a bad idea.\r\n\r\nEather way, what defines a good API is open to debate, but in the case of an adapter, I think a good API is one that allows you to simply change the import source when the runtime is changed.\r\n\r\n```ts\r\n// Cloudflare\r\nimport { upgradeWebSocket } from 'hono/cloudflare-workers'\r\n// Another runtime\r\nimport { upgradeWebSocket } from 'hono/another'\r\n```",
          "Hi @yusukebe, thank you for your comment! \r\nI was able to rethink my thoughts.\r\n> In the case of your proposed API, it makes sense if the upgradeWebSocket exported from 'hono/ws' has a lot of common processes. However, its implementation varies widely from runtime to runtime, so I think the current implementation where hono/ws exports only type UpgradeWebSocket is fine.\r\n\r\nI see. I read it, and I thought so too. As you said, them implementation is different for each runtime. Also we can easily switch the runtime by switching import.\r\n\r\nSo I think that the current API is better.",
          "Hi @nakasyou \r\n\r\nThanks for understanding.\r\n\r\nThe remaining thing. What do you think about this? https://github.com/honojs/hono/pull/2265#pullrequestreview-1904981060",
          "Hi @yusukebe \r\n> The remaining thing. What do you think about this?\r\n> https://github.com/honojs/hono/pull/2265#pullrequestreview-1904981060\r\n\r\nWhen we use `toSSG` on adapter, the adapter is for only accessing file system.\r\nOne side, the WebSocket adapter is exported `upgradeWebSocket` function. It's all about the function.\r\n\r\nIf we implement like https://github.com/honojs/hono/pull/2265#issuecomment-1974190405, `import { upgradeWebSocket } from 'hono/cloudflare-workers` is good because adapter exports only core features.\r\n\r\nBut we will not implement like this.\r\nAs mentioned above, the WebSocket adapter is exported `upgradeWebSocket` function. It's all about the function. So `hono/cloudflare-workers/ws` or `hono/ws/cloudflare-workers` is good.\r\n\r\nThis approach is similar of `serveStatic` adapter.\r\n",
          "Thanks for the explanation, @nakasyou !\r\n\r\nI might have some misunderstanding. Currently, the `src/adapter/cloudflare-workers/index.ts` is exporting `upgradeWebSocket`:\r\n\r\n```ts\r\n// src/adapter/cloudflare-workers/index.ts\r\nexport { serveStatic } from './serve-static-module'\r\nexport { upgradeWebSocket } from './websocket'\r\n```\r\n\r\nThis means we can import it from `hono/cloudflare-workers`:\r\n\r\n```ts\r\nimport { upgradeWebSocket } from 'hono/cloudflare-workers'\r\n```\r\n\r\nThis approach is the same as `serveStatic`, as you say. \r\n\r\nSo, I think the following `. /ws/cloudflare-workers` etc. are not necessary?\r\n\r\nhttps://github.com/honojs/hono/blob/5396bd8fa343f11f16a06ca9fbeaf3f3eaad0699/package.json#L322-L335",
          "Hi @yusukebe \r\nAs I pointed out, I had various misunderstandings.\r\nSo I think `import { upgradeWebSocket } from 'hono/cloudflare-workers'` is good.\r\n\r\n> So, I think the following . /ws/cloudflare-workers etc. are not necessary?\r\n\r\nYes, I'll remove it.\r\n",
          "Hi @yusukebe, I removed how you can import from ws adapter such as `hono/ws/cloudflare-workers`.",
          "Hi @nakasyou !\r\n\r\nThanks! Finished! Let's land it.",
          "IMO the shipped API is way nicer than what crossws offers!\r\n\r\nIt is trivial to implement multiple websocket endpoints that behave differently, whereas crossws (and bun for that matter) would have you doing workarounds or require another library to multiplex it.\r\n\r\nI love it, thanks for implementing this! @nakasyou :yellow_heart:"
        ]
      },
      {
        "pr_number": 2315,
        "title": "refactor(SSG): separate middleware logic",
        "body": "We will organize the file structure of the ssg helper. Specifically, we will separate the middleware-related processes from the core logic and place them in a file named `middleware.ts`.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2315",
        "comments": ["Hi @watany-dev \r\n\r\nThanks! Merging now."]
      },
      {
        "pr_number": 2327,
        "title": "Next",
        "body": "For v4.1.",
        "html_url": "https://github.com/honojs/hono/pull/2327",
        "comments": []
      },
      {
        "pr_number": 2323,
        "title": "chore: bump up `@hono/node-server`",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2323",
        "comments": []
      },
      {
        "pr_number": 2324,
        "title": "fix(body-limit): export `bodyLimit` for Deno",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2324",
        "comments": []
      },
      {
        "pr_number": 2325,
        "title": "fix(websocket): export WebSocket helper for Deno",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2325",
        "comments": []
      },
      {
        "pr_number": 2314,
        "title": "feat(cookie): Add Cookie bis condition check",
        "body": "New Cookie RFC (a.k.a cookie-bis) and CHIPS includes some best practices for Cookie settings which developers should follow.\r\n\r\nThis PR adding some condition check for Cookie handling especially.\r\n\r\n- [RFC6265bis-13](https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis-13)\r\n  - `Max-Age`/`Expires` limitation\r\n  - `--Host-`/`--Secure_` prefix limitation \r\n- [CHIPS-01](https://www.ietf.org/archive/id/draft-cutler-httpbis-partitioned-cookies-01.html)\r\n  - `Partitioned` limitation\r\n\r\nNote: I'm adding link to latest draft in each comment, but should be updated to RFC link.\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno",
        "html_url": "https://github.com/honojs/hono/pull/2314",
        "comments": [
          "Hi @Jxck !\r\n\r\nLooks good to me!\r\n\r\nFor an application that does not follow that best practice, this change would be a breaking change. However, since it is a bad behavior that should be fixed, I think this change can be accepted as a minor release. If so, this PR will be merged to \"next\" for the next minor release \"v4.1\".\r\n\r\nHi @usualoma !\r\n\r\nOne point, it throws errors with `new Error()`, is that the best? I think this is the way to go, what do you think?",
          "Hono is a new framework, so it's a good chance to guide developers to best practice, and also be secure by default. So I'm happy to help here.\r\n\r\nSome note for this PR\r\n\r\n# Max-Age & Expires\r\n\r\nif both Max-Age and Expires exist, Max-Age will be respected.\r\nAnd Max-Age is recommended since DateTime parsing causes interoperable issues all the time.\r\nSo adding a warning (console.warn) to the Expires usage can be considered.\r\nBut I didn't do it here since CookieBis doesn't clearly mention it in the draft now.\r\n\r\n# Secure for SameSite=None\r\n\r\nChrome now requires Secure for SameSite=None cookies. But it's not based on a spec (IIUC), and other browsers don't require it.\r\nChrome is the browser with the largest market share so it's reasonable to add a warning (console.warn) to set SameSite=None without Secure.\r\nBut I didn't do it here since it's not spec related.\r\n\r\n# Secure by default\r\n\r\nHTTPSEveryWhere is default for the web today.\r\nSo it's better to guide users by adding Secure to every cookie.\r\nI think there is an option to provide a default setting for every cookie setting. But I didn't do it here. It requires other agreement for design by team.\r\n\r\n# Type Safe guard\r\n\r\nThis PR force best practice by throw Error. but if it enabled by Type Safe manner, developer could find it before running.\r\nI didn't do it here, because it require some complex type programming which require other agreement for design by team.\r\nBut I'm happy to help it in other PR once it approved.",
          "Thanks @Jxck ! Great clear explanation, makes a lot of sense.\r\n\r\nFor the three above, we would like to deal with cases where they are defined as general specifications or best practices, such as with cookie-bis.\r\n\r\nI think \"Type Safe guard\" is a very interesting approach. I have no idea how to implement it right now, but it would be very Hono-like.",
          "TypeSafe Cookie options is on my branch https://github.com/Jxck/hono/commit/d6e3c0c2756057e16e417917a77d1c7dc2163a86\r\n\r\nI'll send other PR later.",
          "@Jxck \r\n\r\n> I'll send other PR later.\r\n\r\nPlease!",
          "Now, I'll merge this PR into the \"next\" branch. Later, merge it into \"main\" and release v4.1.0.\r\n\r\nThanks!"
        ]
      },
      {
        "pr_number": 2327,
        "title": "Next",
        "body": "For v4.1.",
        "html_url": "https://github.com/honojs/hono/pull/2327",
        "comments": []
      }
    ],
    "v4.0.10": [],
    "v4.1.0-rc.1": [
      {
        "pr_number": 2307,
        "title": "fix (jsx/dom): keep ref.current value during lifecycle.",
        "body": "fixes #2303\r\n\r\nWe have had simple examples that worked, but the actual implementation was almost what we would call a mock\ud83d\ude22  This PR will make sure that the values are properly stored within the lifecycle.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2307",
        "comments": []
      },
      {
        "pr_number": 2103,
        "title": "feat: introduce Body Limit Middleware using stream",
        "body": "This is an implementation of the feature proposed in #2077 using stream.\r\n\r\n### How to use\r\n\r\nSimply specify the maximum size.\r\n\r\n```ts\r\napp.post(\r\n  '/hello',\r\n  bodyLimit({\r\n    maxSize: 15 * Unit.b, // byte,\r\n    onError: (c) => {\r\n      return c.text('oveflow :(', 413)\r\n    },\r\n  }),\r\n  (c) => {\r\n    return c.text('pass :)')\r\n  }\r\n)\r\n```\r\n\r\n### Using stream\r\n\r\nThe problem discussed in #2077 that a body must be read at a time is solved by using stream.\r\n\r\n### `c.req.bodyCache`\r\n\r\nIt uses `c.req.bodyCache` used by the Validator implementation. By setting the loaded ArrayBuffer to `c.req.bodyCache.arrayBuffer`, such as `c.req.json()` will use that cached body from then on.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2103",
        "comments": [
          "Express has [an effortless way to customize](https://expressjs.com/en/resources/middleware/body-parser.html#limit) its body limit, defaulting to 100kb max.",
          "Hey @usualoma \r\n\r\nCould you review this merged code again?",
          "### Do we need data called `Unit`?\r\n\r\nAs a matter of fact, to me, the following statement seems cognitively loaded. Of course it is not incomprehensible, and I think it is wonderful that it comes with a type. But later, when you take a quick look at the code, what is `Unit`?\" is not so obvious and requires knowledge of body-limit.\r\n\r\n```ts\r\nimpot { bodyLimit, Unit } from \"hono/middleware/body-limit\"\r\nbodyLimit({\r\n  maxSize: 15 * Unit.mb,\r\n})\r\n```\r\n\r\nI find it less cognitively demanding to write the following rather than using utility type.\r\n\r\n```ts\r\nimpot { bodyLimit } from \"hono/middleware/body-limit\"\r\nbodyLimit({\r\n  maxSize: 15 * 1024 * 1024, // 15mb\r\n})\r\n```\r\n\r\nAlternatively, if we need to provide a way to specify using units, I feel the following would be better\r\n\r\n```ts\r\nimpot { bodyLimit } from \"hono/middleware/body-limit\"\r\nbodyLimit({\r\n  maxSize: '15mb',\r\n})\r\n```\r\n\r\n```diff\r\ndiff --git a/src/middleware/body-limit/index.test.ts b/src/middleware/body-limit/index.test.ts\r\nindex 058ffc77..7be5c41b 100644\r\n--- a/src/middleware/body-limit/index.test.ts\r\n+++ b/src/middleware/body-limit/index.test.ts\r\n@@ -1,5 +1,6 @@\r\n import { Hono } from '../../hono'\r\n-import { Unit, bodyLimit } from '.'\r\n+import { bodyLimit } from '.'\r\n+import type { Size } from './index'\r\n \r\n const GlobalRequest = globalThis.Request\r\n globalThis.Request = class Request extends GlobalRequest {\r\n@@ -35,7 +36,7 @@ describe('Body Limit Middleware', () => {\r\n \r\n   beforeEach(() => {\r\n     app = new Hono()\r\n-    app.use('*', bodyLimit({ maxSize: 15 * Unit.b }))\r\n+    app.use('*', bodyLimit({ maxSize: '15b' }))\r\n     app.get('/', (c) => c.text('index'))\r\n     app.post('/body-limit-15byte', async (c) => {\r\n       return c.text(await c.req.raw.text())\r\n@@ -112,45 +113,49 @@ describe('Body Limit Middleware', () => {\r\n     })\r\n   })\r\n \r\n-  describe('custom error handler', () => {\r\n+  describe('Size', () => {\r\n+    it('should accept string with unit', () => {\r\n+      expectTypeOf<Size>('1b').toEqualTypeOf<Size>('1b')\r\n+      expectTypeOf<Size>('1kb').toEqualTypeOf<Size>('1b')\r\n+      expectTypeOf<Size>('1mb').toEqualTypeOf<Size>('1b')\r\n+      expectTypeOf<Size>('1gb').toEqualTypeOf<Size>('1b')\r\n+      expectTypeOf<Size>('1tb').toEqualTypeOf<Size>('1b')\r\n+      expectTypeOf<Size>('1pb').toEqualTypeOf<Size>('1b')\r\n+\r\n+      expectTypeOf<Size>('1.5gb').toEqualTypeOf<Size>('1b')\r\n+    })\r\n+    it('should accept number', () => {\r\n+      expectTypeOf<Size>(1).toEqualTypeOf<Size>('1b')\r\n+      expectTypeOf<Size>(1.1).toEqualTypeOf<Size>('1b')\r\n+    })\r\n+  })\r\n+\r\n+  describe('maxSize with string', () => {\r\n     beforeEach(() => {\r\n       app = new Hono()\r\n-      app.post(\r\n-        '/text-limit-15byte-custom',\r\n-        bodyLimit({\r\n-          maxSize: 15 * Unit.b,\r\n-          onError: (c) => {\r\n-            return c.text('no', 413)\r\n-          },\r\n-        }),\r\n-        (c) => {\r\n-          return c.text('yes')\r\n-        }\r\n-      )\r\n     })\r\n \r\n-    it('should return the custom error handler', async () => {\r\n-      const res = await app.request(\r\n-        '/text-limit-15byte-custom',\r\n-        buildRequestInit({ body: exampleText2 })\r\n+    test.each`\r\n+      maxSize  | size\r\n+      ${'15b'} | ${15}\r\n+      ${'1kb'} | ${1 * 1024}\r\n+      ${'1mb'} | ${1 * 1024 ** 2}\r\n+    `('should accept $maxSize as byte unit', async ({ maxSize, size }) => {\r\n+      app.post(\r\n+        '/hello',\r\n+        bodyLimit({\r\n+          maxSize,\r\n+        }),\r\n+        (c) => c.text('pass :)')\r\n       )\r\n \r\n+      let res = await app.request('/hello', buildRequestInit({ body: 'a'.repeat(size) }))\r\n+      expect(res).not.toBeNull()\r\n+      expect(res.status).toBe(200)\r\n+\r\n+      res = await app.request('/hello', buildRequestInit({ body: 'a'.repeat(size + 1) }))\r\n       expect(res).not.toBeNull()\r\n       expect(res.status).toBe(413)\r\n-      expect(await res.text()).toBe('no')\r\n     })\r\n   })\r\n })\r\n-\r\n-describe('Unit', () => {\r\n-  it('should return the correct size', () => {\r\n-    let beforeSize = 1 / 1024\r\n-\r\n-    for (let i = 0, keys = Object.keys(Unit), len = keys.length; i < len; i++) {\r\n-      // @ts-expect-error: <safe access>\r\n-      const size = Unit[keys[i]]\r\n-      expect(size === beforeSize * 1024).toBeTruthy()\r\n-      beforeSize = size\r\n-    }\r\n-  })\r\n-})\r\ndiff --git a/src/middleware/body-limit/index.ts b/src/middleware/body-limit/index.ts\r\nindex 929de058..77610ca5 100644\r\n--- a/src/middleware/body-limit/index.ts\r\n+++ b/src/middleware/body-limit/index.ts\r\n@@ -4,9 +4,15 @@ import type { MiddlewareHandler } from '../../types'\r\n \r\n const ERROR_MESSAGE = 'Payload Too Large'\r\n \r\n+const metricPrefixes = ['', 'k', 'm', 'g', 't', 'p'] as const\r\n+type Unit = `${typeof metricPrefixes[number]}b`\r\n+\r\n+export type Size = number | `${number}${Unit}`\r\n+const sizeRe = new RegExp(`(.*?)(${metricPrefixes.join('|')})b$`)\r\n+\r\n type OnError = (c: Context) => Response | Promise<Response>\r\n type BodyLimitOptions = {\r\n-  maxSize: number\r\n+  maxSize: Size\r\n   onError?: OnError\r\n }\r\n \r\n@@ -17,6 +23,15 @@ class BodyLimitError extends Error {\r\n   }\r\n }\r\n \r\n+const calculateSize = (maxSize: Size): number => {\r\n+  if (typeof maxSize === 'number') {\r\n+    return maxSize\r\n+  }\r\n+\r\n+  const [, size, prefix] = maxSize.match(sizeRe) as [unknown, string, typeof metricPrefixes[number]]\r\n+  return parseFloat(size) * 1024 ** metricPrefixes.indexOf(prefix)\r\n+}\r\n+\r\n /**\r\n  * Body Limit Middleware\r\n  *\r\n@@ -25,7 +40,7 @@ class BodyLimitError extends Error {\r\n  * app.post(\r\n  *  '/hello',\r\n  *  bodyLimit({\r\n- *    maxSize: 15 * Unit.b,\r\n+ *    maxSize: \"15mb\",\r\n  *    onError: (c) => {\r\n  *      return c.text('overflow :(', 413)\r\n  *    }\r\n@@ -45,7 +60,7 @@ export const bodyLimit = (options: BodyLimitOptions): MiddlewareHandler => {\r\n       })\r\n       throw new HTTPException(413, { res })\r\n     })\r\n-  const maxSize = options.maxSize\r\n+  const maxSize = calculateSize(options.maxSize)\r\n \r\n   return async function bodyLimit(c, next) {\r\n     if (!c.req.raw.body) {\r\n@@ -94,13 +109,3 @@ export const bodyLimit = (options: BodyLimitOptions): MiddlewareHandler => {\r\n     }\r\n   }\r\n }\r\n-\r\n-/**\r\n- * Unit any\r\n- * @example\r\n- * ```ts\r\n- * const limit = 100 * Unit.kb // 100kb\r\n- * const limit2 = 1 * Unit.gb // 1gb\r\n- * ```\r\n- */\r\n-export const Unit = { b: 1, kb: 1024, mb: 1024 ** 2, gb: 1024 ** 3, tb: 1024 ** 4, pb: 1024 ** 5 }\r\n```",
          "Personally, I have the above opinion about the current specifications of `Unit`.\r\nBut, well, it doesn't mean that it is no good. If the current specifications of `Unit` are good as they are, then I think it is good regarding other points.",
          "(A few updated implementation examples)",
          "Thanks, @usualoma !\r\n\r\nAs for ***Unit***, I think removing it might be a good idea. I agree with the following opinion.\r\n\r\n> I find it less cognitively demanding to write the following rather than using utility type.\r\n\r\n```\r\nimpot { bodyLimit } from \"hono/middleware/body-limit\"\r\nbodyLimit({\r\n  maxSize: 15 * 1024 * 1024, // 15mb\r\n})\r\n```",
          "All works are finished!\r\n\r\n@EdamAme-x If you are okay, I'll merge this PR to the \"next\" with you as a co-author!",
          "@yusukebe Thank you!\r\nI think we need to update the example as well.\r\nhttps://github.com/honojs/hono/pull/2103/files#diff-89ad83d98e090b039aeff149d642b8497313bf717293de6d33c0606b25baccd7R28",
          "@usualoma \r\n\r\nYou are right. Updated!",
          "Hi @EdamAme-x! Now, I'll merge this into the \"next\". Thanks a lot!",
          "Oops. Mistook. Merged into the main. Reverting."
        ]
      }
    ],
    "v4.0.9": [
      {
        "pr_number": 2293,
        "title": "fix(stream): remove async from onabort",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\nresolve #2289",
        "html_url": "https://github.com/honojs/hono/pull/2293",
        "comments": []
      },
      {
        "pr_number": 2305,
        "title": "fix(types): use `{}` instead of Partial",
        "body": "If it uses `Partial`, the type will include `undefined`. It causes unexpected behavior in validators like Zod Validator.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2305",
        "comments": []
      }
    ],
    "v4.0.8": [
      {
        "pr_number": 2272,
        "title": "fix(ssg): allow `app: Hono<any, any, any>` for `toSSG`",
        "body": "Fixing the type error. The type here is never used, so it can be loose.\r\n\r\n<img width=\"376\" alt=\"Screenshot 2024-02-26 at 0 39 40\" src=\"https://github.com/honojs/hono/assets/10682/3da9ef09-1b2e-4095-83be-49ee5fdb4589\">\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2272",
        "comments": []
      },
      {
        "pr_number": 2275,
        "title": "fix(ssg): preserve binary files as-is",
        "body": "resolve #2274\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2275",
        "comments": [
          "Hi @berlysia !\r\n\r\nNice fix! I've commented. Check it and run `bun run lint:fix` to fix the lint error.",
          "I've made the updates and re-ran the three checks + lint. I think it's become simpler."
        ]
      },
      {
        "pr_number": 2278,
        "title": "fix: fix comment",
        "body": "`c.jsonT` is removed now, but there is a reference to it in the comment.\r\nI found it when I was reading the code, it may cause confusion for contributors, so I fixed it.\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2278",
        "comments": ["You are right! Thanks @nakasyou !"]
      },
      {
        "pr_number": 2283,
        "title": "fix(deno/jsx-precompile): use html() tag function if value is a promise",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2283",
        "comments": []
      },
      {
        "pr_number": 2277,
        "title": "fix(devDependencies): Fix the problem of missing glob package",
        "body": "Resolved the issue of the glob package being unlocated due to its phantom dependency status during dependency installation via pnpm.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2277",
        "comments": [
          "Hi @xx1124961758 \r\n\r\nSorry, I don't understand what exactly is the problem. We recommend using bun or yarn instead of pnpm for the development. So, the pnpm issue is out of scope.",
          "> Hi @xx1124961758\r\n> \r\n> Sorry, I don't understand what exactly is the problem. We recommend using bun or yarn instead of pnpm for the development. So, the pnpm issue is out of scope.\r\n\r\nIn the project, the glob package was used but was not explicitly declared in the package.json file.",
          "@xx1124961758 \r\n\r\nThanks, I see. Could you run `bun install`?",
          "> @xx1124961758\r\n> \r\n> Thanks, I see. Could you run `bun install`?\r\n\r\nyes, it's ok with 'bun install'",
          "Hi @xx1124961758 \r\n\r\nIt wasn't working, so I fixed it myself. Thanks!"
        ]
      }
    ],
    "v4.0.7": [
      {
        "pr_number": 2268,
        "title": "fix(jsx/dom): import from correct file for avoiding circular dependency",
        "body": "Fixes https://github.com/honojs/honox/issues/92\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2268",
        "comments": []
      },
      {
        "pr_number": 2271,
        "title": "fix(types): `MergeSchemaPath` supports regexp path params",
        "body": "Fixes #2253\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2271",
        "comments": []
      }
    ],
    "v4.0.6": [
      {
        "pr_number": 2250,
        "title": "chore: use official deno installer",
        "body": "Deno installer support ARM64 builds from [v1.40.4](https://github.com/denoland/deno/releases/tag/v1.40.4).\r\nThe third party installer we are currently using has officially come to an end.\r\nhttps://github.com/LukeChannings/deno-arm64\r\n\r\nWe can use the official installer.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno",
        "html_url": "https://github.com/honojs/hono/pull/2250",
        "comments": [
          "Hi @ryuapp \r\n\r\nGreat! I did not notice that. I'll merge this now. Thanks!"
        ]
      },
      {
        "pr_number": 2255,
        "title": "fix(reg-exp-router): use matchers[METHOD_NAME_ALL] as fallback for unknown method",
        "body": "fixes #2254\r\n\r\nFixed an error when accessed by an unknown method. I don't think there is a compatibility issue.\r\n\r\nI will think about #1953 later.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2255",
        "comments": [
          "@usualoma \r\n\r\nThanks! I've let one comment.",
          "@yusukebe Thanks! I have added 802d176, how about this?",
          "\\+ b9eb1cc",
          "@usualoma \r\n\r\nThanks. Merge now!"
        ]
      },
      {
        "pr_number": 2258,
        "title": "test: add router/common.case.test.ts",
        "body": "fixes #1953\r\n\r\n### Tidy up\r\n\r\nSuppress errors from `yarn lint:fix`\r\n\r\n* 2c521b2b771bacbba6b90072b52c7cc0849714fe\r\n* 57cef10b0dee45a40b75e7fde8a0bd097bd23976\r\n\r\n### Tweaks vitest.config.ts\r\n\r\nExclude \"\\*.case.test.ts\" from vitest\r\n\r\nThese special files are used to share test cases between different modules or runtime environments.\r\n* shared among multiple routers\r\n* shared by renderToString and renderToDom\r\n\r\nSince these files are test files, they should be excluded from the build, in which case it is convenient to name them \"\\*.test.ts\". However, the file itself does not contain the test execution, so it should be excluded from `vitest watch`. With that motivation, we added \"\\*.case.test.ts\" to the exclude of vitest.\r\n\r\n### src/router/common.case.test.ts\r\n\r\nAll routers run tests using `runTest` exported from this file. For routers other than \"TireRouter\", there are a few test cases that do not pass (this was intended at the time of implementation), so we need to explicitly specify to skip them and instead add router-specific tests.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2258",
        "comments": [
          "Hi @usualoma !\r\n\r\nAwesome work! You did what I have wanted to do for a long time.\r\n\r\nI checked and it is probably correct. Merging. I really appreciate you!"
        ]
      },
      {
        "pr_number": 2261,
        "title": "fix: assign value to element's property for input, textarea, select",
        "body": "fixes https://github.com/honojs/hono/issues/2259\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2261",
        "comments": [
          "@yusukebe Would you please review?",
          "@usualoma \r\n\r\nWorks well! Thanks!"
        ]
      },
      {
        "pr_number": 2264,
        "title": "perf(jsx/dom): update textContent only when content changes",
        "body": "When there is no update, assing to textContent is not performed to improve performance.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2264",
        "comments": [
          "I added a little refactoring in f625648, but it is done.",
          "Indeed, we can improve it with your implementation.\r\n\r\nThanks!"
        ]
      },
      {
        "pr_number": 2262,
        "title": "fix(stream): avoid hang up when stream helper's callback throw error",
        "body": "resolve: #2164\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2262",
        "comments": [
          "Hi @sor4chi \r\n\r\nThanks. I've commented. Please check them.",
          "@yusukebe Thanks, I fixed.",
          "@sor4chi \r\n\r\nThanks! Merge now."
        ]
      },
      {
        "pr_number": 2260,
        "title": "fix(serve-static): support extensionless files and refactor",
        "body": "Fixes #2251 and refactored.\r\n\r\nRefactoring methods:\r\n\r\n* Created `middleware/serve-static`, which is not used by users directly.\r\n* Wrap the middleware by the environment, such as Deno, Bun, and Cloudflare Workers.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2260",
        "comments": [
          "@watany-dev @sor4chi \r\n\r\nCould you review this one?",
          "Nice refactoring. LGTM\r\nAre you planning to make the same changes to `@hono/node-server` after this?",
          "@yusukebe \n\nThis standardization is wonderful. Rather than a feature, I'm curious about its positioning as middleware. Unlike the current example of 'powered-by', this middleware seems like something users might mistakenly try to configure in the application. Therefore, placing it under 'helper/dev' or a similar naming convention to prevent direct configuration mistakes might be necessary.",
          "Thanks both!\r\n\r\n@sor4chi \r\n> Are you planning to make the same changes to `@hono/node-server` after this?\r\n\r\n`@hono/node-server` uses Stream, no need to use this middleware. But, if it is not handling extensionless files, we will need to fix it.\r\n\r\n@watany-dev \r\n> Rather than a feature, I'm curious about its positioning as middleware.\r\n\r\nI think the current implementation, i.e. putting it in `src/middleware/serve-static`, is fine.\r\n\r\nFor example, [`powered-by` middleware is exported in `package.json`](https://github.com/honojs/hono/blob/e6913190b745f673b7d7fba37bdc1ccbeaf1ef87/package.json#L182-L186), but `serve-staic` is not. So users cannot use `hono/server-static`.\r\n",
          "Okay, thank you!\r\nI too was curious about the positioning of middleware. \r\nHow about making it explicit that it is internal by adding a prefix such as `_`, `internal` or `base`?",
          "> How about making it explicit that it is internal by adding a prefix such as `_`, `internal` or `base`?\r\n\r\nHmm. I don't think we have to do it.\r\n\r\nThis middleware is basically for wrappers, but if a user wants to use it, the user can specify `getContent`. So it does not have to be *perfectly* internal. So, now, we just need to deal with it by not exporting it and not writing it in the document.",
          "One way is to create `utils/serve-static`, but I don't want to put anything that handles Context in `utils/*`. Besides, the `server-static` implementation is really middleware. So, if we don't want users to use it, the solution is not to export it, as mentioned above. In the future, it may be possible to export and have users specify `getContent()`. Like `toSSG()`.",
          "I see. Thank you for answering!",
          "Hey everyone.\r\n\r\nI'd like to merge this as soon as possible. So, merge now. If you have ideas to refactor or do something, please create the issue later. Thanks!"
        ]
      }
    ],
    "v4.0.5": [
      {
        "pr_number": 2243,
        "title": "fix: Dot-containing paths do not correctly receive extension completion.",
        "body": "fixes: https://github.com/honojs/hono/pull/2236\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2243",
        "comments": [
          "This partially resolves the issue and improves the accuracy of completion for dots not related to file extensions.\r\nhttps://github.com/honojs/hono/issues/2239",
          "@usualoma \r\nCan I have it reviewed?\r\n",
          "@watany-dev Thank you!\r\n\r\nFirst, in response to your comment in #2239, I think your point below is spot on.\r\n\r\n> For those who want to use extensions like .html.html, they can simply specify it explicitly in the Route :)\r\n\r\nWe can write as follows\r\n\r\n```ts\r\napp.get(\r\n  '/shops/:id.html',.\r\n  async (c) => { ... }\r\n)\r\n```\r\n\r\nThus, I think the question I raised in #2239 will be answered by this PR.\r\n\r\nI have no objection to this PR test case, but I think `.endsWith()` would be sufficient for `getPathWithExpectedExtension()`. No?\r\n\r\n```ts\r\nconst generateFilePath = (routePath: string, outDir: string, mimeType: string) => {\r\n  const extension = determineExtension(mimeType)\r\n\r\n  if (routePath.endsWith(`.${extension}`)) {\r\n    return joinPaths(outDir, routePath)\r\n  }\r\n\r\n  if (routePath === '/') {\r\n    return joinPaths(outDir, `index.${extension}`)\r\n  }\r\n  if (routePath.endsWith('/')) {\r\n    return joinPaths(outDir, routePath, `index.${extension}`)\r\n  }\r\n  return joinPaths(outDir, `${routePath}.${extension}`)\r\n}\r\n```",
          "Thanks for reviewing this!\r\nI didn't know there was an endWith in the standard API. This one is great.\r\nhttps://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith",
          "Oh, sorry, not quite right, the following doesn't work good. It would be a variable `id.html`\r\n\r\n```ts\r\napp.get(\r\n  '/shops/:id.html',.\r\n  async (c) => { ... }\r\n)\r\n```\r\n\r\nWell, okay, that's a separate issue, so let's consider it in other issue \ud83d\ude47 ",
          "> I have no objection to this PR test case, but I think .endsWith() would be sufficient for getPathWithExpectedExtension(). No?\r\n\r\nThis has been fixed!",
          "@watany-dev Thank you \ud83d\udc4d "
        ]
      },
      {
        "pr_number": 2248,
        "title": "refactor(context): skip jsx type import",
        "body": "Maybe fixes #2190\r\n\r\n### #2190 What is at stake here?\r\n\r\nImporting \"hono/client\" is causing problems because hono's JSX types are being read.\r\n\r\n```ts\r\nimport { hc } from \"hono/client\";\r\n```\r\n\r\nThis is because \"context.ts\" imports \"hono/jsx\" and \"hono/middleware/jsx-renderer\". This PR eliminates this.\r\n\r\n\r\n### Where are the conflicts?\r\n\r\nHowever, even after resolving this, if I try to use `React.ElementType` and \"hono/jsx\" at the same time (I am not aware if there is such a case or not), we still have problems. \r\n\r\nThe following part cannot avoid conflict with the `React.ElementType` definition in any way.\r\nhttps://github.com/usualoma/hono/blob/33f2d484f651ea55913ebe7022ed028e8ac7743f/src/jsx/base.ts#L20-L22\r\n\r\nIf a workaround is needed, I think the only way is to remove `[tagName: string]: Props`.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2248",
        "comments": [
          "Thanks @usualoma !\r\n\r\nAs you mentioned, this PR can fix the issue.\r\n\r\n> If a workaround is needed, I think the only way is to remove `[tagName: string]: Props`.\r\n\r\nWhy do we need `[tagName: string]: Props`? To allow types other than the elements listed the followng, right?\r\n\r\nhttps://github.com/usualoma/hono/blob/33f2d484f651ea55913ebe7022ed028e8ac7743f/src/jsx/intrinsic-elements.ts#L609\r\n\r\n",
          "@yusukebe \r\nYes, I didn't actually add the commits involved in that, but it was added here first,\r\n\r\nhttps://github.com/honojs/hono/pull/306\r\n\r\nAnd I am aware that each HTML element was defined here, so it is no longer needed, but it is left in place, probably for compatibility. If the app is using custom elements, it would be useful to not have to set anything to avoid errors.\r\n\r\nhttps://github.com/honojs/hono/pull/1614\r\n\r\nAlthough, well, I think there is an option to remove `[tagName: string]: Props` to be the same as React.",
          "@usualoma \r\n\r\nYeah, I wrote that :)\r\n\r\n> If the app is using custom elements, it would be useful to not have to set anything to avoid errors.\r\n\r\nI know people use custom elements, so I am in favor of keeping the type loose.\r\n\r\nOkay. Currently, I'll merge this PR without removing `[tagName: string]: Props`. Thanks!"
        ]
      },
      {
        "pr_number": 2241,
        "title": "feat(jsx/dom): support namespace for svg and mathml elements",
        "body": "fixes https://github.com/honojs/honox/issues/71\r\n\r\nIn the case of SVG and MathML elements, it is necessary to use createElementNS instead of createElement to support them.\r\n\r\n### Differences from React\r\n\r\nIn React, it is necessary to specify in lower camel case, and I think the output will be converted to kebab case. This PR does not do that conversion, but I think it is OK to have hono specify kebab case from the beginning. If there are many requests, we will consider adding a conversion process.\r\n\r\n```tsx\r\n   // in React \r\n   <circle\r\n     cx=\"40\"\r\n     cy=\"40\"\r\n     r=\"35\"\r\n     stroke=\"black\"\r\n     strokeWidth=\"4\"\r\n     fill=\"lightgrey\"\r\n   /> // => <circle cx=\"40\" cy=\"40\" r=\"35\" stroke=\"black\" stroke-width=\"4\" fill=\"lightgrey\" />\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2241",
        "comments": [
          "@usualoma \r\n\r\nThanks!\r\n\r\n> but I think it is OK to have hono specify kebab case from the beginning. If there are many requests, we will consider adding a conversion process.\r\n\r\nI think that's fine with me, too.\r\n\r\nI would like to merge this PR, but I am considering whether to include it in a patch release or a minor release, so please wait a bit.",
          "> @usualoma\r\n> \r\n> Thanks!\r\n> \r\n> > but I think it is OK to have hono specify kebab case from the beginning. If there are many requests, we will consider adding a conversion process.\r\n> \r\n> I think that's fine with me, too.\r\n> \r\n> I would like to merge this PR, but I am considering whether to include it in a patch release or a minor release, so please wait a bit.\r\n\r\n@yusukebe \r\nSounds good! I'm excited about the release.",
          "Hi @usualoma @zxpzdtom !\r\n\r\nThis is `feat`, but it means \"what we expected to work\", so I will merge it into `main` now and ship it in a patch release."
        ]
      }
    ],
    "v4.0.4": [
      {
        "pr_number": 2229,
        "title": "docs(contribution): add install flag `--frozen-lockfile`",
        "body": "Match the install command with Installing dependencies.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2229",
        "comments": ["Hi @ryuapp \r\n\r\nGood! Merging now. Thanks!"]
      },
      {
        "pr_number": 2231,
        "title": "refactor(jsx): shorten use hook a bit",
        "body": "This is a very small refactoring and changes nothing in the specifications.\r\n\r\nWhen processing the result of an \"if/else\" type of promise, it is shorter and clearer to pass two functions to `.then()` than to use `.catch()`.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2231",
        "comments": []
      },
      {
        "pr_number": 2230,
        "title": "fix(jsx/dom): fix finding element to insert before",
        "body": "fixes https://github.com/honojs/honox/issues/68\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2230",
        "comments": []
      },
      {
        "pr_number": 2233,
        "title": "feat(jsx): support HtmlEscapedString in html tag function",
        "body": "fixes #2208\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2233",
        "comments": []
      },
      {
        "pr_number": 2235,
        "title": "chore(package.json): remove `@edge` for `compute`",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2235",
        "comments": []
      },
      {
        "pr_number": 2238,
        "title": "fix(jwt): import cookie helper correctly",
        "body": "Fixes #2227\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2238",
        "comments": []
      },
      {
        "pr_number": 2236,
        "title": "fix(ssg): path of already extention",
        "body": "\r\n- before\r\n    - /index.html -> static/index.html.html \r\n- after\r\n    - /index.html -> static/index.html\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2236",
        "comments": [
          "Hi @watany-dev \r\n\r\nThis is a nice improvement! Merge now. Thanks!"
        ]
      },
      {
        "pr_number": 2234,
        "title": "fix(validator): use the cached content",
        "body": "Fixes #2163\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2234",
        "comments": [
          "Hey @usualoma !\r\n\r\nCould you review this one?",
          "Thanks!"
        ]
      }
    ],
    "v4.0.3": [
      {
        "pr_number": 2211,
        "title": "fix(jsx-renderer): support async component",
        "body": "Fixes #2207\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2211",
        "comments": [
          "Hey @usualoma !\r\n\r\nCould you review this one?",
          "@yusukebe Thank you!\r\n\r\nI would suggest the following modifications, which are different from this PR, would be a good idea. Instead of the current code that calls `component` directly, it should be `jsx(component,...)` I think it would make more sense to generate the `JSXNode` from the `component`, as in `component`.\r\n\r\n```diff\r\ndiff --git a/src/middleware/jsx-renderer/index.ts b/src/middleware/jsx-renderer/index.ts\r\nindex b396af18..a6562b50 100644\r\n--- a/src/middleware/jsx-renderer/index.ts\r\n+++ b/src/middleware/jsx-renderer/index.ts\r\n@@ -24,7 +24,7 @@ const createRenderer =\r\n     component?: FC<PropsForRenderer & { Layout: FC }>,\r\n     options?: RendererOptions\r\n   ) =>\r\n-  async (children: JSXNode, props: PropsForRenderer) => {\r\n+  (children: JSXNode, props: PropsForRenderer) => {\r\n     const docType =\r\n       typeof options?.docType === 'string'\r\n         ? options.docType\r\n@@ -32,24 +32,23 @@ const createRenderer =\r\n         ? ''\r\n         : '<!DOCTYPE html>'\r\n \r\n-    let currentLayout = component\r\n-      ? component({\r\n-          children,\r\n-          // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n-          ...{ Layout, ...(props as any) },\r\n-        })\r\n+    /* eslint-disable @typescript-eslint/no-explicit-any */\r\n+    const currentLayout = component\r\n+      ? jsx(\r\n+          component,\r\n+          {\r\n+            ...{ Layout, ...(props as any) },\r\n+          },\r\n+          children as any\r\n+        )\r\n       : children\r\n \r\n-    if (currentLayout instanceof Promise) {\r\n-      currentLayout = await currentLayout\r\n-    }\r\n-\r\n     const body = html`${raw(docType)}${jsx(\r\n       RequestContext.Provider,\r\n       { value: c },\r\n-      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n       currentLayout as any\r\n     )}`\r\n+    /* eslint-enable @typescript-eslint/no-explicit-any */\r\n \r\n     if (options?.stream) {\r\n       return c.body(renderToReadableStream(body), {\r\n\r\n```",
          "@usualoma\r\n\r\nThanks! That's an elegant way. I've applied your patch. Can you review this again?"
        ]
      },
      {
        "pr_number": 2218,
        "title": "fix(context): Inherit current status if not specified",
        "body": "There is a problem that the status code is not inherited when using `jsxRenderer` with `stream:true`.\r\n\r\n```ts\r\n      app.use(\r\n        '*',\r\n        jsxRenderer(\r\n          ({ children }) => {\r\n            return (\r\n              <html>\r\n                <body>{children}</body>\r\n              </html>\r\n            )\r\n          },\r\n          { stream: true }\r\n        )\r\n      )\r\n```\r\n\r\nHere we call `c.body()` with two arguments, but since status is not inherited in this call, it is always 200.\r\n\r\nhttps://github.com/honojs/hono/blob/48c6ce9b6f630e215bd1142af2b52307c3f1ac52/src/middleware/jsx-renderer/index.ts#L54-L62\r\n\r\nThis issue has caused problems with 404s turning into 200s in uses such as honox.\r\n\r\nhttps://github.com/honojs/honox/blob/main/src/server/server.ts#L179-L182\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2218",
        "comments": ["@usualoma \r\n\r\nThanks!"]
      },
      {
        "pr_number": 2220,
        "title": "fix(hono-base): custom not found with middleware like compress",
        "body": "Fixed Custom NotFound not working with middleware that creates a new Response object after `next()` such as Compress Middleware. And added proper tests.\r\n\r\nThis was fixed by #2080, but it may not be merged to the main branch well. And there is no test to handle it, so we can't notice it has the bug.\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2220",
        "comments": [
          "Hey @usualoma !\r\n\r\nCould you see this?",
          "@yusukebe LGTM!"
        ]
      },
      {
        "pr_number": 2216,
        "title": "refactor: jsx streaming",
        "body": "There is no change in behavior, but it is not a useful refactoring for existing applications, so it is a question of whether to include it in a patch version. A minor version might be fine.\r\n\r\n* 867f85722b33038606a8f3d7b826742d490a0134 : Depending on the content, it may look like the following, and in this case a JS error occurs.\r\n    * `<template id=\"E:0\"></template><! -E:0->`\r\n* 71c8ec52bbcedf1149420a81bb9fd0b53ce791ec : When handling https://github.com/honojs/honox/issues/47, it is useful to be able to retrieve the resolved value later, so the data attribute was added. The data will be slightly larger, but I don't think it will be a problem.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2216",
        "comments": [
          "Hi @usualoma \r\n\r\nLooks great! I think there is no problem with this code.\r\n\r\nI'm trying to decide whether to put this in the patch release or the minor version. So, I'll merge this later.\r\n\r\nMaybe 4.1 will be released earlier without many features.",
          "@usualoma \r\n\r\nI'm merging and releasing this in a patch version, as there are no clear feature additions in this PR and I don't want this to become a blocker.\r\n\r\nThanks!"
        ]
      }
    ],
    "v4.0.2": [
      {
        "pr_number": 2192,
        "title": "fix: `createHandler` Response Types (handler x1)",
        "body": "I tried to resolve https://github.com/honojs/honox/issues/24.\r\nBut I can't resolve it because HonoX's `createRoute` is missing response type.\r\n`createRoute` is using Hono's`createFactory`\r\nSo I search it, I found cause.\r\n\r\n`createHandler` is missing response type when there is **one** handler.\r\nWe can solve this bug if this PR merged.\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2192",
        "comments": [
          "@yusukebe Could you review it?",
          "@nakasyou \r\n\r\nThanks. That was a bug!",
          "Thank you!"
        ]
      },
      {
        "pr_number": 2196,
        "title": "fix(jsx/dom): Do not call insertBefore if the element position does not change",
        "body": "Fixed the same problem as #2016 when one child is updated in an element having multiple children.\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2196",
        "comments": ["@usualoma \r\n\r\nThanks! I'll merge it now."]
      },
      {
        "pr_number": 2181,
        "title": "refactor(ssg): filter SSG Route",
        "body": "Note: This overlaps with some aspects of the issue discussed here: https://github.com/honojs/hono/pull/2179.\r\n\r\nWe have ceased relying on inspectRoute and instead are filtering using a custom method for the following reasons.\r\n\r\n1. Unnecessary information: Information such as Middleware and HandlerName is not needed. \r\n2. Avoiding bloat in fetchContentRoutes: If we are to apply filters for isMiddleware as well as for GET and ALL methods, it is more efficient to filter right from the start.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2181",
        "comments": [
          "@watany-dev  Very nice PR!\r\nMay I make one request? If you use `isMiddleware` internally, it would be great if you could move it to a different location, because we want to export \"useful tools that users use when developing applications\" from \"helper/dev\".\r\nFor example\r\n\r\n```diff\r\ndiff --git a/src/helper/dev/index.ts b/src/helper/dev/index.ts\r\nindex 0dc2d706..9ba1c551 100644\r\n--- a/src/helper/dev/index.ts\r\n+++ b/src/helper/dev/index.ts\r\n@@ -1,6 +1,6 @@\r\n import type { Hono } from '../../hono'\r\n-import { COMPOSED_HANDLER } from '../../hono-base'\r\n import type { Env, RouterRoute } from '../../types'\r\n+import { isMiddleware, findTargetHandler } from '../../utils/handler'\r\n \r\n interface ShowRoutesOptions {\r\n   verbose?: boolean\r\n@@ -14,17 +14,9 @@ interface RouteData {\r\n   isMiddleware: boolean\r\n }\r\n \r\n-export const isMiddleware = (handler: Function) => handler.length > 1\r\n const handlerName = (handler: Function) => {\r\n   return handler.name || (isMiddleware(handler) ? '[middleware]' : '[handler]')\r\n }\r\n-export const findTargetHandler = (handler: Function): Function => {\r\n-  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n-  return (handler as any)[COMPOSED_HANDLER]\r\n-    ? // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n-      findTargetHandler((handler as any)[COMPOSED_HANDLER])\r\n-    : handler\r\n-}\r\n \r\n export const inspectRoutes = <E extends Env>(hono: Hono<E>): RouteData[] => {\r\n   return hono.routes.map(({ path, method, handler }: RouterRoute) => {\r\ndiff --git a/src/helper/ssg/utils.ts b/src/helper/ssg/utils.ts\r\nindex eca240de..2fef2df7 100644\r\n--- a/src/helper/ssg/utils.ts\r\n+++ b/src/helper/ssg/utils.ts\r\n@@ -1,7 +1,7 @@\r\n-import { findTargetHandler, isMiddleware } from '../../helper/dev'\r\n import type { Hono } from '../../hono'\r\n import { METHOD_NAME_ALL } from '../../router'\r\n import type { Env, RouterRoute } from '../../types'\r\n+import { findTargetHandler, isMiddleware } from '../../utils/handler'\r\n \r\n /**\r\n  * Get dirname\r\ndiff --git a/src/utils/handler.ts b/src/utils/handler.ts\r\nnew file mode 100644\r\nindex 00000000..a112d200\r\n--- /dev/null\r\n+++ b/src/utils/handler.ts\r\n@@ -0,0 +1,10 @@\r\n+import { COMPOSED_HANDLER } from '../hono-base'\r\n+\r\n+export const isMiddleware = (handler: Function) => handler.length > 1\r\n+export const findTargetHandler = (handler: Function): Function => {\r\n+  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n+  return (handler as any)[COMPOSED_HANDLER]\r\n+    ? // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n+      findTargetHandler((handler as any)[COMPOSED_HANDLER])\r\n+    : handler\r\n+}\r\n```",
          "@usualoma \r\nYes, I have evacuated the common processing of hono/dev as you advised.",
          "@watany-dev Thank you \ud83d\udc4d ",
          "Hi @watany-dev and @usualoma \r\n\r\nLooks good! There are several PRs regarding SSG that have not been merged, but since this PR has no conflicts and is a `refactor`, I will merge it into `main` first.",
          "@yusukebe \n\nThank you! I have to apologize for one thing, it says refactoring, but it actually includes a function to make it GET and ALL only. If you are struggling with the method filtering spec and plan to do a minor release, you can add a commit to temporarily strike this method filtering."
        ]
      },
      {
        "pr_number": 2179,
        "title": "refactor(ssg): check `c.env` variables to disable/enable SSG",
        "body": "Fixes #2176\r\n\r\n### refactor(ssg): generate static files only for GET or ALL routes\r\n\r\nOnly GET and METHOD_NAME_ALL will be output. I don't think this will be disputed.\r\n\r\n### Introduce `isSSGContext()`\r\n\r\nAdded a utility function to check that the context is an SSG context.\r\n\r\n```\r\napp.get('/', (c) => c.html(<h1>{isSSGContext(c) ? 'SSG' : 'noSSG'}</h1>))\r\n```\r\n\r\n### use environment variable and special response object to disable/enable SSG\r\n\r\nThe header-based approach is not a bad one, but should not be used because visitors may insert headers, or the headers may reveal more information than necessary. Instead, environment variables and objects can be used to determine whether they are enabled or disabled.\r\n\r\nThe following is excluded from this PR, as they appear to be issues currently handled by `afterResponseHook`.\r\n\r\n<del>\r\n### throw error when fetch failed\r\n\r\nIf the status code is not 200, it should be an error. There may be cases where it is better to continue without exiting, but I think it would be better to add that function in another PR.\r\n\r\n</del>\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2179",
        "comments": [
          "Added fa89206 and the work is complete.",
          "Hey @usualoma \r\n\r\nSorry for being late. I've commented on one. Please check it and resolve the conflict.",
          "@usualoma \r\n\r\nThanks! I was wondering whether to release this as a minor release or a patch release. A new function, `isSSGContext()`, has been added, but since the purpose of this PR is refactoring. So I will release it as a patch release."
        ]
      },
      {
        "pr_number": 2193,
        "title": "Fix regex pattern with length limit at replaceUrlParam",
        "body": "\r\n### Summary\r\n\r\nThere seems to be an issue with the function `replaceUrlParam` that replaces regular expressions in the path within the Client. Specifically, the problem arises when there's a length specification (`{}`) within the regular expression, and it appears at the end of the regex section.\r\n\r\n```\r\n/year/:year{[0-9]{4}}/month/:month{[0-9]{1,2}}\r\n```\r\n\r\nIn this case, when the Client is given the params:\r\n\r\n```\r\n param: {\r\n   year: \"2024\",\r\n   month: \"2\",\r\n }\r\n```\r\n\r\nit parses them as:\r\n\r\n```\r\n/year/2024}/month/2}\r\n```\r\n\r\n### Proposed Changes\r\n\r\nThe regular expression that \"detects the regex section\" within the path was only matching a single `}`. I propose to modify this to match one or more times (`+`), ensuring correct detection even when the length specification (`{}`) is at the end of the section.\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2193",
        "comments": [
          "I've realized that additional modifications are necessary. We will also address cases where multiple length specifications ({}) are used within the regular expression.\r\n\r\n```\r\n(\\{([^{}]*?(\\{[^{}]*?\\})?)+?\\})?\r\n```\r\n\r\nNote: Escaping is omitted here.\r\nBy matching \"anything but {}\", \"{ (anything but {}) }\" as the shortest match, and then grouping these to match one or more times, I solved a case of multiple length restrictions.",
          "Hi @the-fukui !\r\n\r\nThanks. Indeed, it's a bug. I've commented on one. Please check it.",
          "@the-fukui \r\n\r\nLooks good! Mergin now. Thanks for your contribution!"
        ]
      },
      {
        "pr_number": 2204,
        "title": "docs(readme): tweak",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2204",
        "comments": []
      },
      {
        "pr_number": 2209,
        "title": "fix(router): LinearRouter and PatternRouter support regexp quantifiers",
        "body": "Fixes #2203\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2209",
        "comments": [
          "Hi @usualoma !\r\n\r\nCould you review this?\r\n\r\n`(?:{[^/]+})?` that I mentioned can't support the `GET /js/main.js` pattern. So, I've used the regexp that you suggested.",
          "@yusukebe LGTM!"
        ]
      }
    ],
    "v4.0.1": [
      {
        "pr_number": 2191,
        "title": "fix(context): remove duplicate definition of render method",
        "body": "The `render` method was defined twice in the `Context` class. This duplicate definition was causing a TypeScript error below if `tsc` is used to compile the project:\r\n\r\n```\r\nnode_modules/hono/dist/types/context.d.ts(134,5): error TS2300: Duplicate identifier 'render'.\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2191",
        "comments": [
          "@usualoma \r\n\r\nAh! I don't know why the code was like that, but it should be fixed. Thanks!"
        ]
      },
      {
        "pr_number": 2186,
        "title": "refactor(ssg): create request from saved requestInit in order to avoid memory leak warnings",
        "body": "Continued from #2177\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2186",
        "comments": []
      },
      {
        "pr_number": 2188,
        "title": "feat(sse): Allow sending retry for SSE connection",
        "body": "fixes: https://github.com/honojs/hono/issues/2172\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2188",
        "comments": [
          "Hi @watany-dev \r\n\r\nLooks good. This is a `feat`, but it's a minor update. So I'll release it as a `patch` release. Thanks!",
          "@watany-dev \r\n\r\nCould you update the document?"
        ]
      }
    ],
    "v4.0.0": [
      {
        "pr_number": 1753,
        "title": "feat(base): Set Default Path to '*' for app.use()",
        "body": "fixed: #1754 \r\n\r\nIn the previous implementation, if a path was not specified in the app.use method, the route would default to the current path. This was inconvenient when wanting to apply middleware to all requests without specifying a specific path.\r\n\r\nThe main change is as follows:\r\nWe modified the use method in the Hono class so that if the first argument is a middleware function, the default path is set to '*'. This could be a breaking change when the first argument is not specified, and therefore, it might be appropriate to manage this under the v4 branch\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1753",
        "comments": [
          "Hi @watany-dev,\r\n\r\nTotally agree. And as you've pointed out, since this will be a breaking change, let's plan to introduce it in `v4`. Thanks!",
          "I like this! This was the behavior I expected when calling .use() without a path, and every time I get confused when it doesn't work",
          "Hi @watany-dev !\r\n\r\nI made the `v4` branch. I'll merge this into `v4` now!"
        ]
      },
      {
        "pr_number": 1917,
        "title": "feat: Introduce jsx/dom",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1917",
        "comments": [
          "There are probably still a lot of bugs, but since we have implemented a minimal number of hooks and added a minimal number of tests, I would like to end this PR work here.\r\nI think we are at a level where we can consider merging.",
          "Hi @usualoma !\r\n\r\nAwesome work! I have made a minimal example and used it, but the feel is good.\r\n\r\nI've made the `v4` branch for the X day. I'll merge this into `v4` and release the RC version. Then shall we can improve it!\r\n\r\nThanks."
        ]
      },
      {
        "pr_number": 1933,
        "title": "ci: enables CI in the v4 branch",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1933",
        "comments": []
      },
      {
        "pr_number": 1923,
        "title": "feat(hono-base): `app.on` supports multiple paths",
        "body": "Fixes #1901\r\n\r\nThis PR enables `app.on` to handle multiple paths.\r\n\r\nUsage:\r\n\r\n```ts\r\napp.on('GET', ['/hello', '/ja/hello', '/en/hello'], (c) => {\r\n  return c.text('Hello!')\r\n})\r\n```\r\n\r\nIt does not support multiple paths with `app.get()`, etc.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1923",
        "comments": [
          "Hi @usualoma \r\n\r\nCould you review this?",
          "@yusukebe LGTM!",
          "@usualoma \r\n\r\nThanks!"
        ]
      },
      {
        "pr_number": 1934,
        "title": "feat!: remove deprecated features",
        "body": "In this PR, I've removed the deprecated features for releasing v4.0.0.\r\n\r\nOne of the benefits of removing those features is a reduction in size: the bundle size of Hello World has gone from 12.33 KiB to 10.72 KiB!\r\n\r\n<img width=\"666\" alt=\"Screenshot 2024-01-10 at 9 20 47\" src=\"https://github.com/honojs/hono/assets/10682/7e829e90-5e42-4633-8b01-08c20f3bbef2\">\r\n\r\n### TODO\r\n\r\nWhen we release v4.0.0, we need to write a migration guide based on this PR.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1934",
        "comments": []
      },
      {
        "pr_number": 2167,
        "title": "v4",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/2167",
        "comments": ["The time has come. Let's go!"]
      },
      {
        "pr_number": 1936,
        "title": "fix(jsx/dom): fix cleanup for deps",
        "body": "There was a problem that cleanup was not called when changing \"deps\", so this has been fixed.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1936",
        "comments": [
          "@yusukebe, Would you please review?\r\nLooking at the unit tests, you will understand what has been fixed."
        ]
      },
      {
        "pr_number": 1938,
        "title": "refactor(jsx/dom): replace existing content by render()",
        "body": "Fixes #1937\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1938",
        "comments": [
          "@usualoma \r\n\r\nI've tried running it, and it worked well. Thanks!"
        ]
      },
      {
        "pr_number": 1928,
        "title": "feat(css): Introduce pseudo global selector and class name based extend syntax",
        "body": "### Global selector\r\n\r\nIf you wrap the whole thing (not just part of it) in a pseudo-selector called `:-hono-global`. The output of the  `css` is not wrapped in the generated class name, but is interpreted as a top-level specification.\r\n\r\n```ts\r\ncss`\r\n:-hono-global {\r\n  body {\r\n    font-size: 10px;\r\n  }\r\n}\r\n`\r\n```\r\n\r\n### Class name based extend syntax\r\n\r\nYou can extend it by embedding the class name by writing it in the following syntax `${baseClass} {`\r\n\r\n```ts\r\nconst baseClass = css`display: flex`\r\nconst extendedByContent = css`\r\n  ${baseClass}\r\n  flex-direction: column;\r\n` // This is already possible\r\nconst extendedByClassName = css`\r\n  ${baseClass} {\r\n    flex-direction: column;\r\n    p {\r\n      color: red;\r\n    }\r\n  }\r\n` // This is made possible by this PR\r\n```\r\n\r\n\r\n### Use both \"Global selector\" and \"Class name based extend syntax\"\r\n\r\nThe following can be written to place the media query at the top level so that it can be interpreted by older browsers that do not support nesting.\r\n\r\n```ts\r\nconst baseClass = css`display: flex`\r\nconst globalClass = css`\r\n:-hono-global {\r\n  @media (min-width: 768px) {\r\n    ${baseClass} {\r\n      flex-direction: column;\r\n    }\r\n  }\r\n}\r\n`\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1928",
        "comments": [
          "### Generated deferent class name for deferent first line comment even if the content is the same\r\n\r\n\"Class name based extend syntax\" can be used to generate unique class names, since there may be times when you want to have the same content but different base classes. If a comment with unique content is added to the first line, its content is included in the calculation of the hash value.\r\n\r\n```ts\r\nconst headerClassA = css`\r\n  /* class A */\r\n  display: flex;\r\n`\r\nconst headerClassB = css`\r\n  /* class B */\r\n  display: flex;\r\n`\r\n\r\nconst extendedClassA = css`\r\n  ${headerClassA} {\r\n    p { font-size: 10px }\r\n  }\r\n`\r\n\r\nconst extendedClassB = css`\r\n  ${headerClassB} {\r\n    p { font-size: 11px }\r\n  }\r\n`\r\n\r\n// If headerClassA and headerClassB do not have different class names, problems will occur.\r\n```",
          "@usualoma \r\n\r\nIs this the correct way to use the Global selector?\r\n\r\n```tsx\r\napp.get('/', (c) => {\r\n  const globalClass = css`\r\n    :-hono-global {\r\n      body {\r\n        color: red;\r\n      }\r\n    }\r\n  `\r\n  return c.html(\r\n    <html>\r\n      <head>\r\n        <Style />\r\n      </head>\r\n      <body class={globalClass}>\r\n        <h1>Hello!</h1>\r\n      </body>\r\n    </html>\r\n  )\r\n})\r\n```",
          "Hi, @yusukebe \r\n\r\nPlease do it that way. css`` does not trigger side-effects, so even if you define global CSS, you need to explicitly embed it somewhere in the template.\r\n\r\nOr you can specify it in the child component.\r\n\r\n```ts\r\nconst baseClass = css`display: flex`\r\nconst baseClassWithGlobalClass = css`\r\n:-hono-global {\r\n  @media (min-width: 768px) {\r\n    ${baseClass} {\r\n      flex-direction: column;\r\n    }\r\n  }\r\n}\r\n`\r\napp.get('/', (c) => {\r\n  c.render(<div class={baseClassWithGlobalClass}>Content</div>);\r\n})\r\n\r\n// => <style id=\"hono-css\">@media (min-width:768px){.css-3980466870{flex-direction:column}}.css-3980466870{display:flex}</style> ... <div class=\"css-3980466870\">Content</div>\r\n```\r\n\r\n### If you want to use straightforward global CSS\r\n\r\nBy e6cf20f, when \"css\" is passed to the children of a Style component, it is now interpreted as global CSS. This is a seemingly crazy obvious behavior, but it is useful if you want to define global CSS by embedding variables. \" -hono-global\" is useful, but if we could define global css without it that would be more beautiful.\r\n\r\n<img width=\"874\" alt=\"image\" src=\"https://github.com/honojs/hono/assets/30598/e478184a-e807-4f7a-bb68-dd00e11ce7ff\">\r\n",
          "I've added all the changes I want to make, so you can have it merged into main or v4 whichever is better.",
          "@usualoma Thanks! makes sense.\r\n\r\n> when \"css\" is passed to the children of a Style component, it is now interpreted as global CSS\r\n\r\nThis is so cool and super easy to understand.\r\n\r\nI'll merge this into `v4` now."
        ]
      },
      {
        "pr_number": 2167,
        "title": "v4",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/2167",
        "comments": ["The time has come. Let's go!"]
      },
      {
        "pr_number": 1904,
        "title": "feat: Introducing a New SSG Adaptor/Helper ",
        "body": "To celebrate the release of Hono v4, I propose a new feature. This is somewhat niche, but it's a Helper (or Adaptor) designed to convert Hono code into static HTML. Utilizing this, users can easily host SSG on platforms like S3 or R2. Currently, I'm grappling with three main concerns.\r\n\r\n1. is this within the scope of responsibilities for the Hono framework? If it's deemed unnecessary, I might consider moving it to hono/middleware.\r\n2. I'm wondering if it's more fitting to provide this as an Adaptor rather than a Helper, given its nature.\r\n3. is the functionality interface appropriate? I've found myself pondering over this and have started studying SSG in other frameworks as well :)\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1904",
        "comments": [
          "Hi @watany, excuse me from outside.\r\n\r\nThanks for the great suggestions! I like the concept.\r\nIn terms of Hono's built-in middleware approach, I think we have to avoid dependence on runtime as much as possible.\r\n\r\nFor example, I thought it would be cleaner to export only the function to generate `Map<path, renderedHtml>` from `hono/ssg` (maybe `hono/renderer` would be a better name) and provide the function to save the output to disk from the adaptor of each runtime. I thought it would be cleaner to provide a function from the runtime adaptor to save the output to the disk.\r\nThis would allow for a more scalable approach, such as caching rendered string output in an environment without fs.",
          "I wrote PR: https://github.com/watany-dev/hono/pull/4 for this.\r\n\r\nYou can use API like `generateStaticPaths`  if you merge it PR.",
          "@sor4chi \r\nThank you. I hope the fix is not misrecognized by this kind of fix.\r\nhttps://github.com/watany-dev/hono/pull/5",
          "@nakasyou \r\nIt's a cool feature, but it's middleware that is not in the plan I was trying to do, so please give me a little time to think about it.",
          "Thanks, @watany-dev.\r\nI mostly agree with the policy, but I personally would like to kick `path` and `Buffer` out of `hono/ssg`.\r\nThese are supposed to be nodejs modules...(This can be seen by doing denoify)",
          "Hi @watany-dev !\r\n\r\nThanks for the greeeeat PR. I like this!\r\n\r\nI wondered whether or not to include this feature in the Hono core, but the current implementation is so tiny that it would be best to include it in the Hono core with an adapter.\r\n\r\nI left some comments.\r\n\r\nAnd I made a Vite plugin with this SSG Adapter.\r\n\r\nhttps://github.com/yusukebe/hono-ssg-example\r\nhttps://github.com/yusukebe/hono-ssg-example/blob/main/src/vite-plugin.ts\r\n\r\nThis is simple but very powerful. When used with `@hono/vite-dev-server`, we can do everything from development to page generation to deployment non-stop.\r\n\r\nhttps://github.com/honojs/hono/assets/10682/12ff03ce-d392-42ef-8135-6494ce952f36\r\n\r\nI will create this Vite plugin as `@hono/vite-ssg-build` once this PR is merged and the next update is released.",
          "Hey @watany-dev !\r\n\r\nCan you check my comments?",
          "@yusukebe \nYes, I am fixing it now. I followed @sor4chi advice and am taking the time to port the toSSG to Bun and Deno!",
          "@watany-dev \r\n\r\nOkay! Implementing each `toSSG()` in the adapter is very good!",
          "@yusukebe \r\nI believe I've now addressed all the comments that have come in.\r\n\r\n Notes:\r\n- I've partially added deno.d.ts to the Adaptor to use Deno's file module.\r\n- Bun now supports Vitest, so I'm taking this opportunity to unify the test cases under Vitest. \r\n- The existing tsconfig.json stopped working, so I've added some settings to it.\r\n\r\nTo Do:\r\n- Add toSSG to the Node.js Adaptor. I will issue a Pull Request for this after the interfaces for Deno and Bun have been accepted.\r\n- Removal of the fs module from the bun module. However, this might be sufficient for now.\r\n- Documentation needs to be created.\r\n- Deno's c.render doesn't work with the same code as Bun for some reason. I have simplified it for now.",
          "Hi @watany-dev !\r\n\r\nIt does not seem to be the end yet. Check my comments!",
          "@yusukebe \r\nThanks for the great review. I am sure we could have handled it. I also set a Default value for path since option was a required argument. Hope you like it.",
          "By the way, do you have any idea how to deal with dynamic param regarding SSG?",
          "@watany-dev \r\n\r\nThanks! You did it! I'll merge this into the \"v4\" branch.\r\n\r\n@sor4chi \r\n\r\n> By the way, do you have any idea how to deal with dynamic param regarding SSG?\r\n\r\nI prefer the approach suggested in @nakasyou's PR. For example:\r\n\r\n```ts\r\napp.get(\r\n  '/posts/:id',\r\n  ssgParams(() => {\r\n    return Array.from({ length: 10 }, (_, i) => ({ id: i.toString() }))\r\n  }),\r\n  (c) => {\r\n    return c.html(`<h1>${c.req.param('id')}</h1>`)\r\n  }\r\n)\r\n```\r\n\r\n@nakasyou Please create your own PR based on \"v4\", not necessarily the same API as above.",
          "@nakasyou @watany-dev @sor4chi \r\n\r\nOr, instead of specifying it in the handler, you can create hooks in the `toSSG()` options. This way, you don't have to modify the application.\r\n\r\n```ts\r\ntoSSG(app, fs, {\r\n  beforeRequest: (route, app) => {\r\n    if (route.path === '/posts/:id') {\r\n      Array.from({ length: 10 }, (_, i) => {\r\n        app.request(`/posts/${i}`)\r\n      })\r\n    }\r\n  },\r\n  afterResponse: (res) => {\r\n    if (!res.headers.get('content-type').match(/^text\\/html/)) {\r\n      return null // or false\r\n    }\r\n    return res\r\n  }\r\n})\r\n```"
        ]
      },
      {
        "pr_number": 1967,
        "title": "chore(helper): Add experimental flag the SSG features",
        "body": "fixes: https://github.com/honojs/hono/issues/1961\r\n\r\nAll exported APIs have been described. Please let me know if this standard is excessive.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1967",
        "comments": ["@watany-dev \r\n\r\nThanks! Looks good. Merge now."]
      },
      {
        "pr_number": 1969,
        "title": "refactor: remove unnecessary `import`",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1969",
        "comments": []
      },
      {
        "pr_number": 1970,
        "title": "refactor: remove and fix comments",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1970",
        "comments": []
      },
      {
        "pr_number": 2167,
        "title": "v4",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/2167",
        "comments": ["The time has come. Let's go!"]
      },
      {
        "pr_number": 1971,
        "title": "ci: remove lagon runtime tests and other lagon things",
        "body": "Fixes #1888\r\n\r\nSince Lagon will be offline, removed the runtime tests for and other Lagon things.\r\n\r\nIn the `getRuntimeKey()` of the Adapter Helper, I'll leave the Lagon detection.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1971",
        "comments": []
      },
      {
        "pr_number": 1965,
        "title": "refactor(ssg): SSG works without `node:path`",
        "body": "You can close #1964 If you merge this PR.\n\n### Author should do the followings, if applicable\n\n- [x] Add tests\n- [x] Run tests\n- [x] `yarn denoify` to generate files for Deno\n",
        "html_url": "https://github.com/honojs/hono/pull/1965",
        "comments": [
          "It appears that the spec does not allow me to do what I have in mind, so here is my suggestion.\r\n\r\nThis code could be made as concise as the following\r\nhttps://github.com/EdamAme-x/hono/blob/refactor/ssg-without-node-path/src/helper/ssg/utils.ts",
          "Of course, all test cases are passed.",
          "@nakasyou \r\n\r\nThanks! I'll merge this now.\r\n\r\n@EdamAme-x \r\n\r\nThank you for the suggestion. I like your code, it's very clear to understand. In this case, I will accept this PR code since we only need to be able to keep the specs by testing. Please contribute again!",
          "thanks.\ni do it after this"
        ]
      },
      {
        "pr_number": 1979,
        "title": "feat(factory): remove `deprecated` from `Factory` and `createHandlers`",
        "body": "Fixes #1948\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1979",
        "comments": []
      },
      {
        "pr_number": 1976,
        "title": "fix(ssg): fix path parser bug & refactor code",
        "body": "### Author should do the followings, if applicable\n\n- [x] Add tests\n- [x] Run tests\n- [x] `yarn denoify` to generate files for Deno\n",
        "html_url": "https://github.com/honojs/hono/pull/1976",
        "comments": [
          "I have improved the code to make it easier to understand and faster.\r\nand i noticed before code (https://github.com/honojs/hono/pull/1965) has bug :(\r\n\r\nSpecifically, the triple dots should have been valid but were poorly parsed with the following use.\r\n```ts\r\npath = path.replace(/^\\./g, '')\r\n```\r\n\r\n`.`, `..` and string without dot are operates normally.\r\n\r\nbut, `...`, `....`, (dotLength >= 3) or ex. `.hello`\r\nthese strings out to be \"..\", \"...\", and \"hello\", respectively.\r\nIt is a normal directory name to start with dot or to have multiple dots.\r\n\r\nAnd i fixed this problem by improving the regular expression.\r\n```ts\r\npath = path.replace(/^\\.(?!\\.)/g, '')\r\n```",
          "sry\nI found a few problems.\nI will fix it later.",
          "I checked and it was fine.\r\nTest case is passed by this pr",
          "@EdamAme-x Thanks! Merge now."
        ]
      },
      {
        "pr_number": 2167,
        "title": "v4",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/2167",
        "comments": ["The time has come. Let's go!"]
      },
      {
        "pr_number": 1968,
        "title": "feat(ssg): Implement Dynamic File Extension on MIME Type and Enhanced Response Handling",
        "body": "fixes: https://github.com/honojs/hono/issues/1962 https://github.com/honojs/hono/issues/1963\r\n\r\nI have addressed these two issues together as they are interconnected\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1968",
        "comments": [
          "If it's necessary to implement all corresponding MIME types, the determineExtension function might become too large, so I'm considering moving it to utils.ts.",
          "Hi @watany-dev \r\n\r\nAlmost seems to be good, but I've left the comments. Check them.",
          "@yusukebe \r\nThank you for the review. I forgot about `util/mime`.",
          "@watany-dev \r\n\r\nThanks very much. Merging now."
        ]
      },
      {
        "pr_number": 1981,
        "title": "feat(jsx/dom): rewrite renderer to use virtual tree",
        "body": "By #1917 and #1955 we found that we could achieve \"render to dom\" with our own implementation and it made sense, but it was, to put it mildly, a rather dirty implementation and an impossible one to maintain.\r\n\r\nAs mentioned on https://github.com/honojs/hono/pull/1909#issuecomment-1880043938, I think the cost of implementation is high, but still, without a virtual tree approach, the code for this feature is I don't think it would be maintainable.\r\n\r\nSo, I would like to replace it with this implementation that creates a virtual tree.\r\n\r\n### Differences from #1917, #1955\r\n\r\n#### Async component is not supported\r\n\r\nUnfortunately, as with the original React, it is not possible to use async components when rendering to dom. I was very worried about this, but I still think it would be better not to support this because it would not be possible to match the policy for rendering JSX to DOM.\r\n\r\n```ts\r\nconst Component = async () => {\r\n  const num = await promise\r\n  return <div>{num}</div>;\r\n};\r\n```\r\n\r\n`use` hook is available and should be used when rendering to dom.\r\n\r\n```ts\r\nconst Component = () => {\r\n  const num = use(promise)\r\n  return <div>{num}</div>;\r\n};\r\n```\r\n\r\n### Small\r\n\r\n\"src/jsx/dom/render.ts\"  is very small, about 3 Kb.\r\n\r\n```\r\n$ npx esbuild --minify src/jsx/dom/render.ts | wc\r\n       1      66    3132\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1981",
        "comments": [
          "This PR also fixes these issues.\r\n\r\nFixes https://github.com/honojs/hono/issues/1944\r\nFixes https://github.com/honojs/hono/issues/1941\r\nFixes https://github.com/honojs/hono/issues/1942\r\nFixes https://github.com/honojs/hono/issues/1943",
          "@usualoma \r\n\r\nIt's amazingly small! It is good that the implementation is small and easy to maintain. It's good if working AsyncComponent with `use`.\r\n\r\nWhat I am concerned about is the case where the server and the client see the same component. This is an important issue for Islands Architecture, which will be introduced in v4.\r\n\r\nI tried this PR code, but, of course, the `use` did not work on the server. The code is below.\r\n\r\n```tsx\r\nimport { useState, use } from 'hono/jsx/hooks'\r\n\r\nexport default function Counter() {\r\n  const promise = new Promise((resolve) => setTimeout(resolve, 2000))\r\n  use(promise)\r\n  const [count, setCount] = useState(0)\r\n  return (\r\n    <div>\r\n      <p>Count: {count}</p>\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\nRepo: https://github.com/yusukebe/hono-jsx-front-poc/tree/dom\r\n\r\nWhat we need to consider is the `use` specification. If we use `use` on the server side as well, should it wait until Promise resolves it or not? If we follow the client's spec, it should wait. But, for example, it might be a good UI if the server does **not** wait for `use` to resolve, but returns HTML and waits at the client.\r\n\r\nWhat do you think about the server and client referring to the same component regardless of `use`?",
          "### Behavior of `use()` in React\r\n\r\n#### render() to DOM\r\n\r\nThis code does not work\r\n\r\n```ts\r\nexport default function Counter() {\r\n  const promise = new Promise((resolve) => setTimeout(resolve, 2000))\r\n  use(promise)\r\n  const [count, setCount] = useState(0)\r\n  return (\r\n    <div>\r\n      <p>Count: {count}</p>\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\nWe need to pass the same object to `use()`.\r\n\r\n```ts\r\nconst promise = new Promise((resolve) => setTimeout(resolve, 2000)) // Define outside the component or cache it somewhere\r\n\r\nexport default function Counter() {\r\n  use(promise)\r\n  const [count, setCount] = useState(0)\r\n  return (\r\n    <div>\r\n      <p>Count: {count}</p>\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\n#### renderToString()\r\n\r\n`renderToString()` does not support `Suspense`\r\n\r\n#### renderToReadableStream()\r\n\r\nThis code works.\r\n\r\n```ts\r\nexport default function Counter() {\r\n  const promise = new Promise((resolve) => setTimeout(resolve, 2000))\r\n  use(promise)\r\n  const [count, setCount] = useState(0)\r\n  return (\r\n    <div>\r\n      <p>Count: {count}</p>\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\n### Behavior of `use()` in hono/jsx\r\n\r\n#### render() to DOM\r\n\r\nAs with React, the former code will not work. The latter code works.\r\n\r\n#### toString()\r\n\r\nat caba00e, the former code will not work. The latter code works. I believe you saw this and commented.\r\n\r\nat f7070ae, also the former code works like React's `renderToReadableStream()`\r\n\r\n\r\n### Conclusion\r\n\r\nIf the result should be the same whether rendering to DOM or toString(), then the code in caba00e is sufficient and f7070ae is unnecessary.\r\nHowever, I think that f7070ae is also useful, so I think it is OK to include it.",
          "@yusukebe \r\nIf you do not see a problem, you may have this PR merged.\r\nThis PR is still not that small because bundling always introduces unnecessary code for `toString()`, but #1986 will allow bundling of only the dom render, which is expected to make it very small.",
          "@usualoma \r\n\r\nThanks! \r\n\r\nI am wondering if the counter sample in the following repository will work or not. From what I have tried, it does not work with the latest code from this PR. I think this should work, am I wrong? I would be glad if you could check.\r\n\r\nhttps://github.com/yusukebe/hono-jsx-front-poc/tree/dom",
          "@yusukebe \r\nOK, `use()` should be used in `Suspense`.\r\n\r\n```tsx\r\nimport { Suspense } from 'hono/jsx'\r\nimport { useState, use } from 'hono/jsx/hooks'\r\n\r\nconst promise = new Promise((resolve) => setTimeout(resolve, 2000))\r\n\r\nfunction Counter() {\r\n  use(promise)\r\n  const [count, setCount] = useState(0)\r\n  return (\r\n    <div>\r\n      <p>Count: {count}</p>\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default function App() {\r\n  return (\r\n    <Suspense fallback={<div>Loading...</div>}>\r\n      <Counter />\r\n    </Suspense>\r\n  )\r\n}\r\n```",
          "@usualoma \r\n\r\nThanks! I would like to do the following.\r\n\r\n* Server and client use the same AsyncComponent.\r\n* The server returns AsyncComopent without waiting. In this case, it returns the contents of the `Suspense` fallback.\r\n* Client displays the contents of the fallback until the Promise is resolved, then displays it resolved.\r\n\r\nIn the following code, the application waits 2 seconds on the server side for the first access and then waits 2 seconds on the client. On the second and after, the app waits 2 seconds on the client only.\r\n\r\nWhat I'm expecting is this \"behavior after the second time\". This means that the client only waits 2 seconds, and the server does not wait  - In actuality, my ideal is - the server returns the contents of the fallback, and the client also initially renders the fallback (as *hydration*) and then shows the contents from the client after 2 seconds.\r\n\r\n```tsx\r\n// component.tsx\r\nimport { use } from 'hono/jsx/hooks'\r\n\r\nconst promise = new Promise((resolve) => setTimeout(resolve, 2000))\r\n\r\nexport default function Component() {\r\n  use(promise)\r\n  return <p>Done!</p>\r\n}\r\n```\r\n\r\n```tsx\r\n// server.tsx\r\napp.get('/', (c) => {\r\n  return c.render(\r\n    <div id=\"target\">\r\n      <Suspense fallback={'on server...'}>\r\n        <Component />\r\n      </Suspense>\r\n    </div>\r\n  )\r\n})\r\n```\r\n\r\n```tsx\r\n// client.tsx\r\ndocument.addEventListener('DOMContentLoaded', function () {\r\n  const target = document.getElementById('target')\r\n  render(\r\n    <Suspense fallback={'on client...'}>\r\n      <Component />\r\n    </Suspense>,\r\n    target\r\n  )\r\n})\r\n```\r\n\r\nhttps://github.com/honojs/hono/assets/10682/d26f4327-de32-4d07-b94a-eec005c11d06\r\n\r\nThis behavior is expected according to the specification. Therefore, it may not be necessary to change it. However, I cannot realize what I want to do. What do you think about this matter? Or do I expect the wrong things? I'm sorry to bother you.\r\n",
          "Or it may be better to separate the roles of the server and client components as follows:\r\n\r\n* Handling AsyncComponent with Suspense - e.g. fetch external resources => Server Components\r\n* Build a UI with interactions => Client Components\r\n\r\nA quick search shows that Next.js has a similar approach.",
          "@usualoma \r\n\r\nI'm sorry. Please ignore what I have written above!\r\n\r\nIt is a very rare case that this server and client reference the same AsynComponent and SSR that hydrates it. I think it is not used very often (especially in the file-based routing framework we are trying to create) and should not be recommended.\r\n\r\nI will merge if you are OK!",
          "@yusukebe \r\nThanks for checking!\r\nLet's follow up on any improvements that need to be made. As for this PR, I am fine to have this merged.",
          "Yeah! I'll merge this now."
        ]
      },
      {
        "pr_number": 1989,
        "title": "refactor: faster for loop",
        "body": "For loop use the length of the array cached first.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1989",
        "comments": [
          "@EdamAme-x \r\n\r\nThanks! I think this is a good improvement. Merge now."
        ]
      },
      {
        "pr_number": 1984,
        "title": "feat!(cloudflare-workers): make `manifest` required",
        "body": "Fixes #1127 #1093\r\n\r\nThis is the same as #1804 by @Code-Hex .\r\n\r\nWith this PR, if you use the Cloudflare Workers adapter's `serve-static`, you should specify the `manifest` option.\r\n\r\n```ts\r\nimport manifest from '__STATIC_CONTENT_MANIFEST'\r\n\r\n// ...\r\n\r\napp.use('/static/*', serveStatic({ root: './assets', manifest }))\r\n```\r\n\r\nThis avoids a compile error if there is an import of \"`__STATIC_CONTENT_MANIFEST`\" in Hono core's code.\r\n\r\nThis is a BREAKING CHANGE, so we need to write the migration instructions in the migration guide.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1984",
        "comments": [
          "Hi @Code-Hex !\r\n\r\nTo resolve conflicts and follow the latest branch, I have created another PR. I am making you a co-author. Please review this!",
          "Okay! Let's goooo!"
        ]
      },
      {
        "pr_number": 1994,
        "title": "chore: enables lint and format for `.tsx`",
        "body": "### Author should do the followings, if applicable\r\n\r\nEnabled prettier and eslint for `.tsx` as they were not enabled before.\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1994",
        "comments": []
      },
      {
        "pr_number": 1986,
        "title": "feat(jsx/dom): provide jsx-runtime and jsx-dev-runtime via jsx/dom",
        "body": "This PR is a continuation of #1981. The following two commits have been added so far.\r\n* 3a91643a231d6f8e9f898b1ef71373eeac7ebfa4\r\n* d1c9b1bdcfae637c00ab4528aa88d5b461038868\r\n\r\nIf `\"jsxImportSource\": \"hono/jsx\"` is specified, all the stringify code will be included and it will become large, so this can be excluded.\r\n\r\nEven if you bundle code that includes Suspense and ErrorBoundary, it will still be able to fit in about 4Kb.\r\n\r\n```\r\n$ npx esbuild --minify --minify-syntax --tree-shaking=true --bundle dom2.tsx | wc\r\n       1      98    4256\r\n```\r\n\r\n```ts\r\n/** @jsxRuntime automatic @jsxImportSource ./src/jsx/dom */\r\nimport { Suspense, ErrorBoundary } from './src/jsx/dom'\r\nimport { render } from './src/jsx/dom'\r\nimport { use } from './src/jsx/hooks'\r\n\r\nconst promise = new Promise<number>((resolve) => setTimeout(() => resolve(1), 1000))\r\nconst UseComponent = () => {\r\n  const num = use(promise)\r\n  return <div>{num}</div>\r\n}\r\n\r\nconst rejectedPromise = new Promise<number>((_, reject) => setTimeout(() => reject(1), 1000))\r\nconst ErrorComponent = () => {\r\n  const num = use(rejectedPromise)\r\n  return <div>{num}</div>\r\n}\r\n\r\nexport const App = () => {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <div>\r\n          <Suspense fallback={<div>Loading...</div>}>\r\n            <div>\r\n              <h3>UseComponent</h3>\r\n              <UseComponent />\r\n            </div>\r\n          </Suspense>\r\n\r\n          <ErrorBoundary fallback={<div>error</div>}>\r\n            <Suspense fallback={<div>Loading...</div>}>\r\n              <div>\r\n                <h3>ErrorComponent</h3>\r\n                <ErrorComponent />\r\n              </div>\r\n            </Suspense>\r\n          </ErrorBoundary>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nrender(<App />, document.getElementById('root'))\r\n```\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1986",
        "comments": [
          "Hi @usualoma \r\n\r\nThis is super cooool!\r\n\r\nIf we are using Vite, we can specify the JSX runtime for the build  in the config file:\r\n\r\n```ts\r\nimport { defineConfig } from 'vite'\r\nimport devServer from '@hono/vite-dev-server'\r\n\r\nexport default defineConfig(({ mode }) => {\r\n  if (mode === 'client') {\r\n    return {\r\n      build: {\r\n        minify: true,\r\n        rollupOptions: {\r\n          input: ['./app/client.tsx'],\r\n          output: {\r\n            entryFileNames: 'static/client.js'\r\n          }\r\n        }\r\n      },\r\n      esbuild: {\r\n        jsxImportSource: 'hono/jsx/dom' // <=== specify `hono/jsx/dom` for the client\r\n      }\r\n    }\r\n  } else {\r\n    return {\r\n      ssr: {\r\n        noExternal: true\r\n      },\r\n      build: {\r\n        minify: true,\r\n        ssr: './_worker.ts'\r\n      },\r\n      plugins: [\r\n        devServer({\r\n          entry: './app/server.tsx'\r\n        })\r\n      ]\r\n    }\r\n  }\r\n})\r\n```\r\n\r\nThen, it will be ultra small:\r\n\r\n<img width=\"1070\" alt=\"Screenshot 2024-01-15 at 23 54 55\" src=\"https://github.com/honojs/hono/assets/10682/6f35af27-2916-41c2-a50b-f4118ea55045\">\r\n\r\nThe counter sample is now 2.3KB from 3.6KB with Brotli compression!\r\n\r\nDemo: https://9fe4615e.hono-jsx-front-poc.pages.dev/\r\n\r\nIf we merge #1981, add this PR to v4!",
          "Btw, a Preact app is 5.7KB.\r\n\r\n<img width=\"1113\" alt=\"Screenshot 2024-01-16 at 0 18 47\" src=\"https://github.com/honojs/hono/assets/10682/335429f3-dd3d-4058-bdea-2889cfe36a3a\">\r\n\r\n\r\nhttps://5436b56a.hono-jsx-front-poc.pages.dev/",
          "Hi, @yusukebe \r\n\r\nAdditional testing has been completed.\r\nI am also making changes to the `npm test` and would appreciate a review.",
          "Hi @usualoma \r\n\r\nThanks. First, please merge the upstream to resolve the conflict. I'll check it later.",
          "@yusukebe resolved!",
          "@usualoma \r\n\r\nThanks! I've left one comment. Check it.",
          "@yusukebe \r\nOops, fix typo in [5ac6b00](https://github.com/honojs/hono/pull/1986/commits/5ac6b00f6e8fadaeaf493087a43d662c708d28eb)",
          "@usualoma \r\n\r\nThanks. Merge now!"
        ]
      },
      {
        "pr_number": 1995,
        "title": "fix(types): correct `c.get()` inference",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1995",
        "comments": ["We can go with this."]
      },
      {
        "pr_number": 1996,
        "title": "feat(jsx/dom): startTransition() and useTransition()",
        "body": "#1986 + [abb62fa](https://github.com/honojs/hono/pull/1996/commits/abb62fa15b9a7414d27a0ab82f303c6ab041c60a)\r\n\r\nThis PR provides `startTransition()` and `useTransition()` hook\r\n\r\nI wrote the following example app based on the following site.\r\n\r\n* https://react.dev/reference/react/useTransition\r\n* https://zenn.dev/uhyo/books/react-concurrent-handson-2/viewer/use-starttransition\r\n\r\n```ts\r\nimport { Suspense } from './src/jsx/dom'\r\nimport { render } from './src/jsx/dom'\r\nimport { useState, startTransition, useTransition } from './src/jsx/hooks'\r\n\r\nlet sleeping: boolean = true\r\nconst Sleep1s = () => {\r\n  if (sleeping) {\r\n    throw new Promise<void>((resolve) =>\r\n      setTimeout(() => {\r\n        sleeping = false\r\n        resolve()\r\n      }, 1000)\r\n    )\r\n  }\r\n  return <p>Hello!</p>\r\n}\r\n\r\nfunction SleepApp() {\r\n  const [sleepIsShown, setSleepIsShown] = useState(false)\r\n  return (\r\n    <div>\r\n      <Suspense fallback={<p>Loading...</p>}>{sleepIsShown ? <Sleep1s /> : null}</Suspense>\r\n      <p>\r\n        <button\r\n          className='border p-1'\r\n          onClick={() => {\r\n            startTransition(() => {\r\n              setSleepIsShown(true)\r\n            })\r\n          }}\r\n        >\r\n          Show Sleep1s\r\n        </button>\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst HeavyContent = ({ count }) => {\r\n  const startTime = performance.now()\r\n  while (performance.now() - startTime < 1000) {}\r\n  return <div>HeavyContent!!! {count}</div>\r\n}\r\n\r\nconst Transition = () => {\r\n  const [isPending, startTransition] = useTransition()\r\n  const [count, setCount] = useState(0)\r\n  const [showHeavy, setShowHeavy] = useState(false)\r\n  return (\r\n    <div>\r\n      <button\r\n        onClick={() => {\r\n          startTransition(() => {\r\n            setShowHeavy(true)\r\n            setCount((c) => c + 1)\r\n          })\r\n        }}\r\n      >\r\n        {isPending ? 'Pending...' : 'Click me'}\r\n      </button>\r\n      {showHeavy && (\r\n        <button\r\n          onClick={() => {\r\n            setShowHeavy(false)\r\n          }}\r\n          style=\"margin-left: 10px;\"\r\n        >\r\n          Hide HeavyContent\r\n        </button>\r\n      )}\r\n      <div>{showHeavy ? isPending ? '...' : <HeavyContent count={count} /> : count}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const App = () => {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <div>\r\n          <h3>startTransition with Suspense</h3>\r\n          <SleepApp />\r\n\r\n          <h3>useTransition</h3>\r\n          <Transition />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\nhttps://github.com/honojs/hono/assets/30598/aa611eec-a321-4c9e-880b-553b96be4979\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1996",
        "comments": [
          "@yusukebe rebased and add `useDeferredValue()` at 8d3ddb1\r\nMy work on this PR is complete.",
          "@usualoma \r\n\r\nCool! I've tried and confirmed that these work fine. I'll merge this now."
        ]
      },
      {
        "pr_number": 1997,
        "title": "refactor(jsx): export components and hook function from top level 'hono/jsx'",
        "body": "+ 15204380da15ef4ffea341475da3f22d7a7c56e1\r\n\r\nUp to this point, hook functions have been exported from \"hono/jsx/hooks\", but today, when tree shaking is commonplace, there is little motivation to separate export source modules.\r\nIt would be better if all JSX-related components and hook functions could be imported from \"hono/jsx\".\r\n\r\n```ts\r\nimport {\r\n  Suspense,\r\n  ErrorBoundary,\r\n  useState,\r\n  useEffect,\r\n  useRef,\r\n  useCallback,\r\n  use,\r\n  startTransition,\r\n  useTransition,\r\n} from 'hono/jsx'\r\nimport type { RefObject } from 'hono/jsx'\r\n```\r\n\r\nAs for dom-related or dom-specific items, they can continue to be imported as follows.\r\n\r\n```ts\r\nexport { render, Suspense, ErrorBoundary } from 'hono/jsx/dom'\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1997",
        "comments": [
          "Hi @usualoma \r\n\r\nI think this is a good improvement. With our Hono, it's important to make it \"easy\".\r\n\r\nWhen ready, I'll merge!",
          "Reapply \"refactor(jsx): export components and hook function from top level 'hono/jsx'\" at 0fb71c6\r\nAnd adds some minor refactoring.\r\n\r\nThis completes the work on this PR.",
          "@usualoma \r\n\r\nThanks! Merging now."
        ]
      },
      {
        "pr_number": 1990,
        "title": "feat(ssg): Ignore Dynamic Route",
        "body": "Resolves https://github.com/honojs/hono/issues/1966\r\n\r\nWe have added an implementation that excludes certain types of routes - specifically, wildcard, path parameters, and regex-based routing - from the SSG (Static Site Generation) process.\r\n\r\nIt's important to note that this does not take into account the ssgParams middleware. Depending on the timing of the merge, we can include support for this middleware in this PR if necessary.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1990",
        "comments": [
          "Let's complete this PR first, and merge it into v4. I left a comment; please take a look.",
          "Hi @watany-dev \r\n\r\nI've merged #1960 into v4 now, but the CI fails:\r\n\r\nhttps://github.com/honojs/hono/actions/runs/7553089110/job/20563202188\r\n\r\nI think `isDynamicRoute` causes the mismatch. Could you see it?\r\n",
          "@yusukebe \n\nIn the short term, revert my commits and it will be cured.\nIf I fix this, I will need to maintain hono/dev and identify the route where ssgparam is set and do some additional processing. This will take a bit of time."
        ]
      },
      {
        "pr_number": 1960,
        "title": "feat: Added `ssgParams` middleware",
        "body": "I added `ssgParams` middleware.\r\nThis is implemented https://github.com/honojs/hono/pull/1904#issuecomment-188809839.\r\n\r\nThere is 2 changes.\r\n\r\n#### 1. API like `generateStaticPaths`.\r\nYou can use API like `generateStaticPaths`.\r\nExample:\r\n```tsx\r\nimport { Hono } from 'hono'\r\nimport { toSSG, ssgParams } from 'hono/ssg'\r\nimport * as fs from 'fs/promises'\r\n\r\napp.get('/', c => c.html(<h1>Top page</h1>))\r\napp.get('/post/:id', ssgParams([{ id: '1' }]), c => c.html(<h1>{c.req.params('id')}</h1>)\r\n\r\nawait toSSG(app, fs)\r\n```\r\n#### 2. Switching SSR/SSG\r\nYou can add No-SSG routes such as:\r\n```tsx\r\nimport { Hono } from 'hono'\r\nimport { toSSG, ssgParams } from 'hono/ssg'\r\nimport * as fs from 'fs/promises'\r\n\r\napp.get('/', c => c.html(<h1>Top page</h1>)) // SSG\r\napp.get(\r\n  '/api',\r\n  ssgParams(false), // Don't SSG\r\n  c => c.json({ status: 'ok' })\r\n) \r\n\r\nawait toSSG(app, fs)\r\n```\r\nThis code is SSG-based mode like [Astro hybrid mode](https://docs.astro.build/en/guides/server-side-rendering/#enable-on-demand-server-rendering).\r\n\r\nNot only this code, you can use SSR-Based mode.\r\n```tsx\r\nimport { Hono } from 'hono'\r\nimport { toSSG, ssgParams } from 'hono/ssg'\r\nimport * as fs from 'fs/promises'\r\n\r\napp.get('/',\r\n  ssgParams(true), // SSG\r\n  c => c.html(<h1>Top page</h1>)\r\n) // SSG\r\n// Or, this code also works.\r\napp.get('/post/:id', ssgParams([{ id: '1' }]), c => c.html(<h1>{c.req.params('id')}</h1>))\r\n\r\napp.get(\r\n  '/api',\r\n  c => c.json({ status: 'ok' })\r\n) // This route will not generate SSG files. `toSSG` don't generate route if not explicitly specified.\r\n\r\nawait toSSG(app, fs, { default: 'ssr' })\r\n```\r\n\r\nHereby, you can write code to combine both SSG and SSR such as:\r\n```tsx\r\n// dev.tsx\r\nimport { Hono } from 'hono'\r\nimport { ssgParams } from 'hono/ssg'\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/', ssgParams(true), c => c.html(<h1>Hello world!</h1>)) // Top page is static.\r\napp.get('/api/random', c => c.json({ result: Math.random() })) // API is dynamic.\r\n\r\nexport default app\r\n```\r\n```tsx\r\n// prediction.ts\r\nimport { Hono } from 'hono'\r\nimport app from './dev'\r\n\r\nconst mainApp = new Hono()\r\nmainApp.use('*', serveStatic({ root: 'static' }))\r\nmainApp.route('/', app)\r\n\r\nexport default app\r\n```\r\n```tsx\r\n// build.ts\r\nimport { Hono } from 'hono'\r\nimport app from './dev'\r\nimport { toSSG, ssgParams } from 'hono/ssg'\r\nimport * as fs from 'fs/promises'\r\n\r\ntoSSG(app, fs, { default: 'ssr' })\r\n```\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1960",
        "comments": [
          "@nakasyou \r\n\r\nSeems to be good. If it's ready for reviewing, please let me know!",
          "@yusukebe Thanks!\r\nYou can review now, so please review this code. ",
          "I think it would be better to separate the generateStaticPaths and the hybrid SSR/SSG middleware. At least to me, the interface seems too complex.\n\nFor the latter middleware, it might be good to simplify by just using a flag like isSSG() or isSSG/isSSR. However, I haven't read the underlying implementation of Astro, so these opinions might not be correct:)",
          "Hi @nakasyou \r\n\r\nFor this PR, I created a simple application and used this feature before reviewing the code.\r\n\r\nRepo: https://github.com/yusukebe/hono-ssg-example/tree/ramen\r\nDemo: https://3282047d.hono-ssg.pages.dev/\r\n\r\nFeeling of using `ssgParams` was great! For example, here is the code:\r\n\r\n```tsx\r\napp.get(\r\n  '/shops/:id',\r\n  ssgParams(async () => {\r\n    const shops = await getShops()\r\n    return shops.map((shop) => ({ id: shop.id }))\r\n  }),\r\n  async (c) => {\r\n    const shop = await getShop(c.req.param('id'))\r\n    if (!shop) {\r\n      return c.notFound()\r\n    }\r\n    return c.render(\r\n      <div>\r\n        <h1>{shop.name}</h1>\r\n      </div>\r\n    )\r\n  }\r\n)\r\n```\r\n\r\nHowever, as @watany-dev says, it seems complicated to include \"hybrid SSR/SSG middleware\" things in this feature. It seems unnatural to accept a boolean as an argument to `ssgParams()`.\r\n\r\nI think it would be good to implement only the \"generateStaticPaths function\" in this PR, and propose SSG/SSR switching in another PR.\r\n",
          "@watany-dev @yusukebe \r\n> I think it would be better to separate the generateStaticPaths and the hybrid SSR/SSG middleware. At least to me, the interface seems too complex.\r\n\r\n> However, as @watany-dev says, it seems complicated to include \"hybrid SSR/SSG middleware\" things in this feature. It seems unnatural to accept a boolean as an argument to ssgParams().\r\n\r\nI think so after I thought again.\r\nCertainly, to separate staticPaths API and hybrid API is quite understandable.\r\nSo I'll make other PR.",
          "@watany-dev @yusukebe\r\nI removed feature for switching SSR/SSG.\r\nI'll make other PR to add API like `isSSG`.",
          "Speaking of which, have you decided on ssgParams as the name of the middleware? I feel like there is a name that is more in line with the actual situation than the original multiple function params, and it may be okay to keep it as it is.",
          "ssgPrams is middleware, but it is exported from `hono/ssg`, so I think \"**SSG Helper**\" should be the \"common name\".",
          "Hi @nakasyou \r\n\r\nI've left the comment about testing. Please check it and resolve the conflicts.",
          "@yusukebe\r\nThank you for review.\r\nI added that test code, and resolve conflicts.\r\n",
          "@nakasyou \r\n\r\nThanks! Let's land it."
        ]
      },
      {
        "pr_number": 2006,
        "title": "fix(ssg): fixed `isDynamicRoute` and `ssgParams` matter",
        "body": "When introducing `ssgParams()`, tests fail. I've fixed the matter.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2006",
        "comments": [
          "Hi @watany-dev @nakasyou \r\n\r\nI think we can fix the issue with this PR. Could you review?",
          "@nakasyou has not yet reviewed, but I will merge. Thanks!"
        ]
      },
      {
        "pr_number": 1999,
        "title": "feat(jsx/dom): support createContext and useContext in jsx/dom",
        "body": "```ts\r\nimport { createContext, useContext } from 'hono/jsx'\r\n// or dom specific version\r\n// import { createContext, useContext } from 'hono/jsx/dom'\r\n\r\nconst Context = createContext(0)\r\nconst Content = () => {\r\n  const num = useContext(Context)\r\n  return <p>{num}</p>\r\n}\r\nconst Component = () => {\r\n  return (\r\n    <>\r\n      <Context.Provider value={1}>\r\n        <Content />\r\n        <Context.Provider value={3}>\r\n          <Content />\r\n        </Context.Provider>\r\n        <Content />\r\n      </Context.Provider>\r\n    </>\r\n  )\r\n}\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1999",
        "comments": [
          "Hi @usualoma !\r\n\r\nDoes this mean that this `useContext` can be used from both the server and DOM? It works fine, but I am a little reluctant to use `jsx/dom/context.ts` for DOM in the `jsx/index.ts`.  Or do I understand this wrong?",
          "@yusukebe Thanks for pointing that out. I think that is indeed true.\r\n\r\n> Does this mean that this useContext can be used from both the server and DOM?\r\n\r\nYes, it is.\r\n\r\nIn 05e0b5a, I have re-organized the placement of components in files.\r\nHow about this?",
          "@usualoma \r\n\r\n> In 05e0b5a, I have re-organized the placement of components in files.\r\n> How about this?\r\n\r\nThanks! I like this! Let's go with it.",
          "@yusukebe \r\nThanks for confirming.\r\nThe test failing is a HEAD issue on the v4 branch, so I think it is safe to have this PR merged."
        ]
      },
      {
        "pr_number": 2003,
        "title": "refactor(jsx/dom): make `useTransition()` handling more simple",
        "body": "After relearning about TaskQueue and Microtask in JavaScript, I understood that execution by `setTimeout()` does not overtake the first `update()`. There is no need to use `promise` here.\r\nAlso, I don't think a 10ms wait is necessary.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2003",
        "comments": []
      },
      {
        "pr_number": 2167,
        "title": "v4",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/2167",
        "comments": ["The time has come. Let's go!"]
      },
      {
        "pr_number": 2014,
        "title": "chore(package.json): specify the config in `test:deno`",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2014",
        "comments": []
      },
      {
        "pr_number": 2015,
        "title": "chore(runtime-test): add `deno.lock`",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2015",
        "comments": []
      },
      {
        "pr_number": 2167,
        "title": "v4",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/2167",
        "comments": ["The time has come. Let's go!"]
      },
      {
        "pr_number": 2017,
        "title": "fix(jsx/dom): find \"insertBefore\" node from next node list if not found",
        "body": "Fixes #2016\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2017",
        "comments": ["@yusukebe Would you please review?"]
      },
      {
        "pr_number": 2021,
        "title": "feat!: validator throws error rathar than `return c.json()`",
        "body": "Fixes #1441\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2021",
        "comments": []
      },
      {
        "pr_number": 2012,
        "title": "refactor(ssg): Removal of Libraries Dependent on Node.js",
        "body": "These modifications were made to eliminate the dependency on Node.js. \r\n\r\n- Changes in the fs for the Bun Adaptor.\r\n- Revision of the Buffer type.\r\n- Changed to 'toDenoSSG', 'toBunSSG' for each adapter to address duplicate naming of toSSG for deno.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2012",
        "comments": [
          "Hi @watany-dev !\r\n\r\nThanks for the PR.\r\n\r\nI think you can use `@types/bun` instead of `bun.d.ts` for only types matter. In the core of Hono, you are not allowed to use specific platform types. However, in this case, it is an adapter for Bun, so you may use it.\r\n\r\nActually, I think you can install `@types/bun` as `devDependencies` and write triple slash directives in `ssg.ts`.\r\n\r\n```ts\r\n/// <reference types=\"bun\" />\r\n```",
          "@yusukebe \r\nI am having trouble writing RuntimeTest because I am not familiar with Deno. Is there any chance you could confirm how to write it for me since I am not in a hurry?",
          "Hi @watany-dev !\r\n\r\nI made CI pass!",
          "Thanks for the great job!!! We will deal with the rest!",
          "@yusukebe \r\nSorry for being so careless. I have reverted the name of the comment.",
          "Thanks. Merge now!"
        ]
      },
      {
        "pr_number": 2027,
        "title": "feat!(deno): move middleware to helper",
        "body": "This may also need to be noted in the Migration Guide.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2027",
        "comments": [
          "@watany-dev \r\n\r\nThanks! I've renamed the title. I'll merge it now."
        ]
      },
      {
        "pr_number": 2029,
        "title": "fix(SSG): Correct extension of the file output",
        "body": "fixed https://github.com/honojs/hono/issues/2028\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2029",
        "comments": ["@watany-dev \r\n\r\nGreat! Merge now."]
      },
      {
        "pr_number": 2020,
        "title": "feat(jsx/dom): Introduce startViewTransition()",
        "body": "### Included in this PR\r\n\r\n* Introduce `startViewTransition()`\r\n* Partial support for `<Style />`\r\n\r\n### `startViewTransition()`\r\n\r\nThis is an API not found in the original React.\r\nThe usage of this API is the same as the existing `startTransition()`, with state updates wrapped and passed as callback\r\n\r\n#### Is this API something that is needed?\r\n\r\nIf you simply want to use `document.startViewTransition()`, you can do so by writing the following, although it is a bit long.\r\n\r\n```ts\r\n<button onClick={() => {\r\n  if (!document.startViewTransition) {\r\n    setCount((c) => c + 1)\r\n  }\r\n  else {\r\n    document.startViewTransition(() => {\r\n      setCount((c) => c + 1)\r\n    });\r\n  }\r\n}}>\r\n  {count}\r\n</button>\r\n```\r\n\r\nReplacing this with the `startViewTransition()` provided by hono here has the following two advantages.\r\n\r\n* Can be written in short\r\n* Transition can be applied to fallback by `Suspense` and subsequent delayed rendering.\r\n\r\n```ts\r\n<button onClick={() => {\r\n  startViewTransition(() => {\r\n    setCount((c) => c + 1)\r\n  });\r\n}}>\r\n  {count}\r\n</button>\r\n```\r\n\r\n#### Restrictions\r\n\r\nCurrently, it cannot be used with `useTransition()` at the same time. However, I am considering making it possible to use it at the same time in subsequent PRs.\r\n\r\n### Partial support for `<Style />`\r\n\r\n`<Style />` is not likely to be rendered dom in a production environment, but it is useful in a demo environment, so I partially supported it. API for passing global CSS to children is not yet supported.\r\n\r\n### Demo\r\n\r\nhttps://github.com/honojs/hono/assets/30598/7ffecf98-3c5b-4433-9655-00b27538fc8d\r\n\r\n```ts\r\nimport { Style, css } from './src/helper/css'\r\nimport { render, Suspense } from './src/jsx/dom'\r\nimport { useState, startViewTransition, use } from './src/jsx/hooks'\r\n\r\nconst imagePromise = new Map<string, Promise<string>>()\r\nconst loadImage = (src: string) => {\r\n  if (!imagePromise.has(src)) {\r\n    imagePromise.set(\r\n      src,\r\n      new Promise((resolve) => {\r\n        ;(async () => {\r\n          await new Promise((resolve) => setTimeout(resolve, 1000))\r\n          const image = new window.Image()\r\n          image.onload = () => resolve(src)\r\n          image.src = src\r\n        })()\r\n      })\r\n    )\r\n  }\r\n  return imagePromise.get(src) as Promise<string>\r\n}\r\n\r\nconst ThumbnailImage = () => <img src='https://avatars.githubusercontent.com/u/98495527' />\r\nconst OriginalImage = () => {\r\n  const image = use(\r\n    loadImage('https://github.com/honojs/hono/blob/main/docs/images/hono-logo.png?raw=true')\r\n  )\r\n  return (\r\n    <div\r\n      class={css`\r\n        background: url('${image}');\r\n        background-size: contain;\r\n        background-repeat: no-repeat;\r\n        background-position: center;\r\n        width: 600px;\r\n        height: 600px;\r\n      `}\r\n    />\r\n  )\r\n}\r\n\r\nconst Image = () => {\r\n  const [showOriginalImage, setShowOriginalImage] = useState(false)\r\n  return (\r\n    <div\r\n      onClick={() => startViewTransition(() => setShowOriginalImage(!showOriginalImage))}\r\n      class={css`\r\n        img,\r\n        div {\r\n          view-transition-name: image;\r\n        }\r\n      `}\r\n    >\r\n      {showOriginalImage ? (\r\n        <Suspense\r\n          fallback={\r\n            <div\r\n              class={css`\r\n                width: 600px;\r\n                height: 600px;\r\n                display: flex;\r\n                justify-content: center;\r\n                align-items: center;\r\n                background-image: url('https://avatars.githubusercontent.com/u/98495527');\r\n                background-size: contain;\r\n                background-repeat: no-repeat;\r\n                background-position: center;\r\n                background-color: rgba(255, 255, 255, 0.5);\r\n                background-blend-mode: lighten;\r\n              `}\r\n            >\r\n              Loading...\r\n            </div>\r\n          }\r\n        >\r\n          <OriginalImage />\r\n        </Suspense>\r\n      ) : (\r\n        <ThumbnailImage />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const App = () => {\r\n  return (\r\n    <>\r\n      <Style />\r\n      <div>\r\n        <div>\r\n          <div>\r\n            <Image />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nrender(<App />, document.getElementById('root'))\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2020",
        "comments": [
          "Hi @usualoma !\r\n\r\nThis is a super cool feature!\r\n\r\nThis is not directly related to this, but I was playing with this feature and noticed that `keyframes` works on the DOM?\r\n\r\n",
          "Anyway. This PR is great and completed. I will merge this now."
        ]
      },
      {
        "pr_number": 2167,
        "title": "v4",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/2167",
        "comments": ["The time has come. Let's go!"]
      },
      {
        "pr_number": 2032,
        "title": "fix(ssg): Remove ArrayBuffer from FileSystemModule's writeFile",
        "body": "fixes: https://github.com/honojs/hono/issues/2031\r\n \r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2032",
        "comments": ["Thanks!"]
      },
      {
        "pr_number": 2036,
        "title": "refactor(jsx/dom): invoke update() in microtask",
        "body": "This PR contains two refactorings, and fixes. This is the last PR regarding \"jsx/dom\" for v4 and is intended to be a feature freeze. (Continue to fix bugs and support CSS helpers.)\r\n\r\n### refactor(jsx/dom): invoke update() in microtask\r\n\r\nThis improves the following two issues\r\n\r\n* Multiple updates of stete in a single callback will now invoke `update()` only once.\r\n    * https://github.com/honojs/hono/compare/v4...usualoma:hono:feat/jsx-dom-render-in-microtask?expand=1#diff-8f050239e20450fd8425feb7efbda60df851ebbc32bec8139d6d9ad1b53a7bc0R189-R217\r\n* `useTransition` and `startViewTransition` can be used at the same time.\r\n\r\n```ts\r\n/** @jsxRuntime automatic @jsxImportSource ./src/jsx/dom */\r\nimport { render } from './src/jsx/dom'\r\nimport { useState, useTransition, startViewTransition } from './src/jsx/hooks'\r\n\r\nconst HeavyContent = ({ count }) => {\r\n  const startTime = performance.now()\r\n  while (performance.now() - startTime < 1000) {}\r\n  return <div>HeavyContent!!! {count}</div>\r\n}\r\n\r\nconst Transition = () => {\r\n  const [isPending, startTransition] = useTransition()\r\n  const [count, setCount] = useState(0)\r\n  const [showHeavy, setShowHeavy] = useState(false)\r\n  return (\r\n    <div>\r\n      <button\r\n        onClick={() => {\r\n          startViewTransition(() => {\r\n            startTransition(() => {\r\n              setShowHeavy(true)\r\n              setCount((c) => c + 1)\r\n            })\r\n          })\r\n        }}\r\n      >\r\n        {'Click me'}\r\n      </button>\r\n      {showHeavy && (\r\n        <button\r\n          onClick={() => {\r\n            startViewTransition(() => {\r\n              setShowHeavy(false)\r\n            })\r\n          }}\r\n          style='margin-left: 10px;'\r\n        >\r\n          Hide HeavyContent\r\n        </button>\r\n      )}\r\n      <div>{showHeavy ? isPending ? '...' : <HeavyContent count={count} /> : count}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const App = () => {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <div>\r\n          <h3>useTransition</h3>\r\n          <Transition />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nrender(<App />, document.getElementById('root'))\r\n```\r\n\r\nhttps://github.com/honojs/hono/assets/30598/c92a6f61-2246-44c8-ad36-df81680e8eee\r\n\r\n#### fix(jsx/dom): should not render removed node\r\n\r\nStable behavior when Suspense is shown and hidden repeatedly in a short period of time.\r\n\r\nhttps://github.com/honojs/hono/compare/v4...usualoma:hono:feat/jsx-dom-render-in-microtask?expand=1#diff-00be452f071d90d2904b8acdd0b15dc607fee092c4545b38387e2f52a6eba35fR95-R131\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2036",
        "comments": [
          "Hi @usualoma !\r\n\r\nLooks good! I'll merge this.\r\n\r\n> This is the last PR regarding \"jsx/dom\" for v4 and is intended to be a feature freeze. (Continue to fix bugs and support CSS helpers.)\r\n\r\nYeah. Let's go with the features for v4."
        ]
      },
      {
        "pr_number": 2001,
        "title": "feat: introduce Accepts Helper",
        "body": "### Author should do the followings, if applicable\r\n\r\nResolve #1792 \r\nResolve #1897 \r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2001",
        "comments": [
          "Hi, @yusukebe. I tried to implement the accept helper!",
          "Hi @sor4chi \r\n\r\nAlmost looks good. But, I want you to write some code using real apps like this:\r\n\r\n```ts\r\nconst app = new Hono()\r\n\r\napp.get('/', (c) => {\r\n  const result = matchAccept(c, {})\r\n  return c.json({\r\n    result,\r\n  })\r\n})\r\n\r\nconst res = await app.request('/', {\r\n  headers: {\r\n    //...\r\n  },\r\n})\r\n\r\nexpect(res.json()).toEqual({})\r\n```",
          "These are proxy usecases\r\n\r\n```ts\r\napp.get(\"*\", async (c) => {\r\n  const encoding = matchAccept(c, {\r\n    header: \"Accept-Encoding\",\r\n    supports: [\"gzip\", \"deflate\"],\r\n    default: \"identity\",\r\n  });\r\n  const res = await fetch(`${ORIGIN_URL}/${c.req.path}`, c.req.raw);\r\n\r\n  if (encoding === \"gzip\") {\r\n    return res.body?.pipeThrough(new CompressionStream(\"gzip\"));\r\n  }\r\n\r\n  if (encoding === \"deflate\") {\r\n    return res.body?.pipeThrough(new CompressionStream(\"deflate\"));\r\n  }\r\n\r\n  return res;\r\n});\r\n\r\napp.get(\"*\", (c) => {\r\n  const supportedLangs = [\"en\", \"ja\", \"zh\"];\r\n  const lang = matchAccept(c, {\r\n    header: \"Accept-Language\",\r\n    supports: supportedLangs,\r\n    default: \"en\",\r\n  });\r\n\r\n  const isLangedPath = supportedLangs.some((l) => c.req.path.startsWith(`/${l}`));\r\n  if (isLangedPath) {\r\n    return fetch(c.req.raw);\r\n  }\r\n\r\n  return c.redirect(`${ORIGIN_URL}/${lang}${c.req.path}`)\r\n})\r\n```",
          "@sor4chi \r\n\r\nThanks. Could you add tests that are using `app` like the code?",
          "@yusukebe Alright, added!",
          "@sor4chi \r\n\r\nGreat work! Last thing. Please remove the warnings by linter.",
          "@sor4chi \r\n\r\nIs this ready?",
          "@yusukebe yes, please.",
          "@sor4chi \r\n\r\nI've commented about naming. Check it!",
          "@yusukebe Thank you for reviewing, fixed it!",
          "Okay! Let's land it. Thanks for contributing.",
          "Hi @sor4chi !\r\n\r\nCould you write the website document for this Accepts Helper?"
        ]
      },
      {
        "pr_number": 2024,
        "title": "feat: improve `ssgParams` flexibility",
        "body": "### Author should do the followings, if applicable\r\n\r\nContext Env generics support for `ssgParams` middleware.\r\nuse a simple array for `ssgParams` middleware's argument.\r\n\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2024",
        "comments": [
          "There may be another way to do the `ssgParams` types, so please wait.",
          "I see.",
          "@yusukebe Thanks, I fixed!",
          "@sor4chi \r\n\r\nI've commented. If you want to pass an array to `ssgParams`, can you write tests for it?",
          "@yusukebe \r\nSorry, I forgot about that.\r\nI just added it!",
          "Thanks. Merge now."
        ]
      },
      {
        "pr_number": 2040,
        "title": "refactor(types): name them `BlankSchema` or `BlankInput`",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2040",
        "comments": []
      },
      {
        "pr_number": 2041,
        "title": "feat(deno): export accpet helper for deno",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2041",
        "comments": []
      },
      {
        "pr_number": 1916,
        "title": "docs: Add JSDoc",
        "body": "close #1338\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1916",
        "comments": [
          "good\r\nI want to help with this PR",
          "Thanks @EdamAme-x, but this work is almost done and I need your help to make the API docs better!",
          "I've added a few things i think need",
          "@EdamAme-x please make PR  (to nabeken5/hono).\r\n\r\nIt looks fine to me, so I'll open it.\r\n@yusukebe  Please check.",
          "hi @nabeken5 \r\nI'm usually using codespaces to do the work because I'm using **Windows** and **storage issues**.\r\nI'll try to add  new PullRequest next (next month) time since codespace's no longer available this month.",
          "hi @EdamAme-x \r\nI want to move this PR as fast as we can.\r\nI don't know much about it, but maybe using other 3rd-party apps like [Gitpod](https://www.gitpod.io/) or [CodeSandbox](https://codesandbox.io/) would help?\r\n(I've used CodeSandbox and recommend it because you can SSH from a local VSCode)",
          "thanks.\nideally, it would be preferable for u to finish the task without worrying about me. It will likely take some time to complete, as there are other tasks to be done as well.",
          "hi @nabeken5 \r\ni created PullRequest to your branch.\r\nhttps://github.com/nabeken5/hono/pull/1",
          "ready to go\ud83e\udd73",
          "@nabeken5 \r\n\r\nSuper thanks! I'll check this later.",
          "@nabeken5 @EdamAme-x Thanks both! I'd like to merge this PR.\r\n\r\n@nabeken5 \r\n\r\nCould you do the three things for merging?\r\n\r\n1. Resolve the conflicts.\r\n2. `yarn format:fix` to format the code.\r\n3. `yarn denoify` to generate the code for Deno.",
          "We are ready!",
          "@nabeken5 @EdamAme-x Thanks both!\r\n\r\nLet's land it. Merging now!"
        ]
      },
      {
        "pr_number": 2167,
        "title": "v4",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/2167",
        "comments": ["The time has come. Let's go!"]
      },
      {
        "pr_number": 2046,
        "title": "fix!(types): Fix context type when chaining routes with middlewares",
        "body": "Fix https://github.com/honojs/hono/issues/2019.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2046",
        "comments": [
          "Sorry, I forgot to run `yarn format:fix`.",
          "@agatan \r\n\r\nAwesome! Thanks for the hard work!"
        ]
      },
      {
        "pr_number": 2063,
        "title": "refactor: rename accept to accepts",
        "body": "### Author should do the followings, if applicable\r\nhttps://github.com/honojs/hono/issues/2042\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2063",
        "comments": [
          "@EdamAme-x \r\n\r\nGreat! Thanks for handling it. I'll merge this now."
        ]
      },
      {
        "pr_number": 2064,
        "title": "fix: use DOCTYPE by default ",
        "body": "Fixes #2052\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2064",
        "comments": [
          "https://github.com/honojs/hono/issues/2052",
          "@EdamAme-x \r\n\r\nAwesome! Thank you for your contribution."
        ]
      },
      {
        "pr_number": 2056,
        "title": "fix(ssg): Uniformly Convert Paths Ending with Slash to 'index.ext' Format",
        "body": "- before:  `/api/` -> `./static/api/.html`\r\n- after:  `/api/` -> `./static/api/index.html`\r\n\r\n@yusukebe \r\nCurrently, the implementation uniformly converts paths like `/css/` to `/css/index.css`. Considering this, there are two possible approaches to the implementation, and I have chosen the first one:\r\n\r\n1. Treat all paths ending with a slash uniformly as `index.ext`, even for non-HTML files. Those who dislike this approach can use paths like `/css` without the trailing slash.\r\n2. For non-HTML files ending with a slash, complete them as `/css.css`. I did not adopt this approach as it seems counterintuitive\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2056",
        "comments": [
          "@watany-dev \r\n\r\nThanks! It is good. We may have a problem with these path issues, but let's handle it then."
        ]
      },
      {
        "pr_number": 2053,
        "title": "feat: Introduce `useViewTransition()` hook and `viewTransition()` helper",
        "body": "Fixes #2034, #2035\r\n\r\n### Update `startViewTransition()` family\r\n\r\nForgot to mention in the previous PR that `document.startViewTransition()` is currently only available in Google Chrome and Edge.\r\nhttps://caniuse.com/mdn-api_document_startviewtransition\r\n\r\nThis PR adds the following new items\r\n```ts\r\nimport { useViewTransition } from 'hono/jsx'\r\nimport { viewTransition } from 'hono/css'\r\n// or dom-specific version import { viewTransition } from 'hono/jsx/dom/css'\r\n```\r\n\r\nIn the following, we will look at the usage of the `startViewTransition()` family along with these usages.\r\n\r\n#### Easiest example\r\n\r\nSimply call `startViewTransition()` function (not a hook).\r\n\r\n```tsx\r\nimport { startViewTransition } from 'hono/jsx'\r\n\r\nconst Content = () => {\r\n  const [showLargeImage, setShowLargeImage] = useState(false)\r\n  return (\r\n    <>\r\n      <button onClick={() => startViewTransition(() => setShowLargeImage((state) => !state))}>\r\n        Click!\r\n      </button>\r\n      <div>\r\n        {!showLargeImage ? (\r\n          <img src='https://avatars.githubusercontent.com/u/98495527' />\r\n        ) : (\r\n          <div\r\n            class={css`\r\n              background: url('https://github.com/honojs/hono/blob/main/docs/images/hono-logo.png?raw=true');\r\n              background-size: contain;\r\n              background-repeat: no-repeat;\r\n              background-position: center;\r\n              width: 600px;\r\n              height: 600px;\r\n            `}\r\n          ></div>\r\n        )}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n```\r\n\r\n#### Next Step\r\n\r\nYou can use `viewTransition()` helper for getting unique `view-transition-name`.\r\n\r\n```tsx\r\nimport { startViewTransition } from 'hono/jsx'\r\n\r\nconst Content = () => {\r\n  const [showLargeImage, setShowLargeImage] = useState(false)\r\n  const [transitionNameClass] = useState(() => viewTransition())\r\n  return (\r\n    <>\r\n      <button onClick={() => startViewTransition(() => setShowLargeImage((state) => !state))}>\r\n        Click!\r\n      </button>\r\n      <div>\r\n        {!showLargeImage ? (\r\n          <img src='https://avatars.githubusercontent.com/u/98495527' class={transitionNameClass} />\r\n        ) : (\r\n          <div\r\n            class={css`\r\n              ${transitionNameClass}\r\n              background: url('https://github.com/honojs/hono/blob/main/docs/images/hono-logo.png?raw=true');\r\n              background-size: contain;\r\n              background-repeat: no-repeat;\r\n              background-position: center;\r\n              width: 600px;\r\n              height: 600px;\r\n            `}\r\n          ></div>\r\n        )}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n```\r\n\r\n#### Use with `keyframes`\r\n\r\n`::view-transition-old()` is converted to `::view-transition-old(${uniqueName)`\r\n\r\n```tsx\r\nimport { startViewTransition } from 'hono/jsx'\r\n\r\nconst rotate = keyframes`\r\n  from {\r\n    rotate: 0deg;\r\n  }\r\n  to {\r\n    rotate: 360deg;\r\n  }\r\n`\r\n\r\nconst Content = () => {\r\n  const [showLargeImage, setShowLargeImage] = useState(false)\r\n  const [transitionNameClass] = useState(() =>\r\n    viewTransition(css`\r\n      ::view-transition-old() {\r\n        animation-name: ${rotate};\r\n      }\r\n      ::view-transition-new() {\r\n        animation-name: ${rotate};\r\n      }\r\n    `)\r\n  )\r\n  return (\r\n    <>\r\n      <button onClick={() => startViewTransition(() => setShowLargeImage((state) => !state))}>\r\n        Click!\r\n      </button>\r\n      <div>\r\n        {!showLargeImage ? (\r\n          <img src='https://avatars.githubusercontent.com/u/98495527' class={transitionNameClass} />\r\n        ) : (\r\n          <div\r\n            class={css`\r\n              ${transitionNameClass}\r\n              background: url('https://github.com/honojs/hono/blob/main/docs/images/hono-logo.png?raw=true');\r\n              background-size: contain;\r\n              background-repeat: no-repeat;\r\n              background-position: center;\r\n              width: 600px;\r\n              height: 600px;\r\n            `}\r\n          ></div>\r\n        )}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n```\r\n\r\n#### If you want to change the style only during the animation\r\n\r\nYou can use `useViewTransition()`.  This hook returns `[boolean, (callback: () => void) => void]` and they are `isUpdating` flag and `startViewTransition()` function.\r\nIf you want to change the style only during the animation, you can specify the style if `isUpdating` is `true`.\r\n\r\nWhen this hook is used, Component is evaluated at the following two times.\r\n* Inside the callback of a call to `startViewTransition()`.\r\n* When the `finish` promise becomes fulfilled\r\n    * https://developer.mozilla.org/en-US/docs/Web/API/ViewTransition/finished\r\n\r\n\r\n```tsx\r\nimport { useViewTransition } from 'hono/jsx'\r\n\r\nconst rotate = keyframes`\r\n  from {\r\n    rotate: 0deg;\r\n  }\r\n  to {\r\n    rotate: 360deg;\r\n  }\r\n`\r\n\r\nconst Content = () => {\r\n  const [isUpdating, startViewTransition] = useViewTransition()\r\n  const [showLargeImage, setShowLargeImage] = useState(false)\r\n  const [transitionNameClass] = useState(() =>\r\n    viewTransition(css`\r\n      ::view-transition-old() {\r\n        animation: ${rotate} 2s ease-in-out;\r\n      }\r\n      ::view-transition-new() {\r\n        animation: ${rotate} 2s ease-in-out;\r\n      }\r\n    `)\r\n  )\r\n  return (\r\n    <>\r\n      <button onClick={() => startViewTransition(() => setShowLargeImage((state) => !state))}>\r\n        Click!\r\n      </button>\r\n      <div>\r\n        {!showLargeImage ? (\r\n          <img src='https://avatars.githubusercontent.com/u/98495527' class={transitionNameClass} />\r\n        ) : (\r\n          <div\r\n            class={css`\r\n              ${transitionNameClass}\r\n              background: url('https://github.com/honojs/hono/blob/main/docs/images/hono-logo.png?raw=true');\r\n              background-size: contain;\r\n              background-repeat: no-repeat;\r\n              background-position: center;\r\n              width: 600px;\r\n              height: 600px;\r\n              position: relative;\r\n              ${isUpdating &&\r\n              css`\r\n                &:before {\r\n                  content: 'Loading...';\r\n                  position: absolute;\r\n                  top: 50%;\r\n                  left: 50%;\r\n                }\r\n              `}\r\n            `}\r\n          ></div>\r\n        )}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n```\r\n\r\n\r\n#### Example of overall use\r\n\r\nhttps://github.com/honojs/hono/assets/30598/f9514a08-d666-42c6-8109-1fd028af65d1\r\n\r\n```ts\r\n/** @jsxRuntime automatic @jsxImportSource ./src/jsx/dom */\r\nimport { render, Suspense } from './src/jsx/dom'\r\nimport { Style, css, keyframes, viewTransition } from './src/jsx/dom/css'\r\nimport { useState, useViewTransition, use } from './src/jsx/hooks'\r\n\r\nconst imagePromise = new Map<string, Promise<string>>()\r\nconst loadImage = (src: string) => {\r\n  if (!imagePromise.has(src)) {\r\n    imagePromise.set(\r\n      src,\r\n      new Promise((resolve) => {\r\n        ;(async () => {\r\n          await new Promise((resolve) => setTimeout(resolve, 700))\r\n          const image = new window.Image()\r\n          image.onload = () => resolve(src)\r\n          image.src = src\r\n        })()\r\n      })\r\n    )\r\n  }\r\n  return imagePromise.get(src) as Promise<string>\r\n}\r\n\r\nconst ThumbnailImage = ({ transition }: { transition: string }) => (\r\n  <img src='https://avatars.githubusercontent.com/u/98495527' class={transition} />\r\n)\r\nconst OriginalImage = ({\r\n  transition,\r\n  setIsImageShown,\r\n}: {\r\n  transition: string\r\n  setIsImageShown: (boolean) => void\r\n}) => {\r\n  const [isUpdating] = useViewTransition()\r\n  const image = use(\r\n    loadImage('https://github.com/honojs/hono/blob/main/docs/images/hono-logo.png?raw=true')\r\n  )\r\n  if (!isUpdating) {\r\n    setIsImageShown(true)\r\n  }\r\n  return (\r\n    <div\r\n      class={css`\r\n        ${transition}\r\n        background: url('${image}');\r\n        background-size: contain;\r\n        background-repeat: no-repeat;\r\n        background-position: center;\r\n        width: 600px;\r\n        height: 600px;\r\n      `}\r\n    />\r\n  )\r\n}\r\n\r\nconst Image = () => {\r\n  const [showOriginalImage, setShowOriginalImage] = useState(false)\r\n  const [isShown, setIsShown] = useState(false)\r\n  const [isImageShown, setIsImageShown] = useState(false)\r\n  const [isUpdating, startViewTransition] = useViewTransition()\r\n\r\n\r\n  const rotate360 = keyframes`\r\n0% {\r\n  transform: rotate(0deg);\r\n}\r\n100% {\r\n  transform: rotate(360deg);\r\n}\r\n`\r\n  const rotate20 = keyframes`\r\n0% {\r\n  transform: rotate(0deg);\r\n}\r\n50% {\r\n  transform: rotate(20deg);\r\n}\r\n100% {\r\n  transform: rotate(0deg);\r\n}\r\n`\r\n  const fadeIn = keyframes`\r\n0% {\r\n  opacity: 0;\r\n}\r\n100% {\r\n  opacity: 1;\r\n}\r\n`\r\n  const fadeOut = keyframes`\r\n0% {\r\n  opacity: 1;\r\n}\r\n100% {\r\n  opacity: 0;\r\n}\r\n`\r\n  const loadingTransition = viewTransition(css`\r\n    ::view-transition-old() {\r\n      animation: ${rotate360} 0.5s ease-in-out;\r\n    }\r\n\r\n    ::view-transition-new() {\r\n      animation: ${rotate360} 0.5s ease-in-out;\r\n    }\r\n  `)\r\n  const loadedTransition = viewTransition(css`\r\n    ::view-transition-old() {\r\n      animation: ${fadeOut} 0.5s linear;\r\n    }\r\n\r\n    ::view-transition-new() {\r\n      animation: ${fadeIn} 0.5s linear;\r\n    }\r\n  `)\r\n  const switchTransition = viewTransition(css`\r\n    ::view-transition-old() {\r\n      animation: ${rotate20} 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275);\r\n    }\r\n\r\n    ::view-transition-new() {\r\n      animation: ${rotate20} 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275);\r\n    }\r\n  `)\r\n\r\n  return (\r\n    <div\r\n      onClick={() =>\r\n        startViewTransition(() => {\r\n          setShowOriginalImage(!showOriginalImage)\r\n          setIsShown(true)\r\n        })\r\n      }\r\n    >\r\n      {showOriginalImage ? (\r\n        <Suspense\r\n          fallback={\r\n            <div\r\n              class={css`\r\n                ${isUpdating ? loadingTransition : loadedTransition}\r\n                width: 600px;\r\n                height: 600px;\r\n                display: flex;\r\n                justify-content: center;\r\n                align-items: center;\r\n                background-image: url('https://avatars.githubusercontent.com/u/98495527');\r\n                background-size: contain;\r\n                background-repeat: no-repeat;\r\n                background-position: center;\r\n                background-color: rgba(255, 255, 255, 0.5);\r\n                background-blend-mode: lighten;\r\n              `}\r\n            >\r\n              Loading...\r\n            </div>\r\n          }\r\n        >\r\n          <OriginalImage\r\n            transition={\r\n              isImageShown ? switchTransition : isUpdating ? loadingTransition : loadedTransition\r\n            }\r\n            setIsImageShown={setIsImageShown}\r\n          />\r\n        </Suspense>\r\n      ) : (\r\n        <ThumbnailImage transition={isShown ? switchTransition : loadingTransition} />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const App = () => {\r\n  return (\r\n    <>\r\n      <Style />\r\n      <div>\r\n        <div>\r\n          <div>\r\n            <Image />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nrender(<App />, document.getElementById('root'))\r\n```\r\n\r\n### Other changes\r\n\r\n#### Support `CSSProperties`\r\n\r\nMerging this PR would allow the following to be written.\r\n\r\n```tsx\r\n<h1 style={{fontSize: '20px'}}>Header</h1>\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2053",
        "comments": [
          "@yusukebe Would you please review?",
          "Hi @usualoma\r\n\r\nAwesome! I have been playing with these features for a while, and they are a lot of fun. Merging. Thanks!\r\n"
        ]
      },
      {
        "pr_number": 2054,
        "title": "feat(ssg): support Improve Hook Handling",
        "body": "Following @yusukebe  advice, I have created the beforeRequestHook and AfterRequestHook. Users can now prevent unexpected outputs with these hooks.\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2054",
        "comments": [
          "Hi @watany-dev ! Thanks for the PR.\r\n\r\nI would like to use it like the following:\r\n\r\n```tsx\r\nimport fs from 'node:fs/promises'\r\nimport { Hono } from 'hono'\r\nimport { toSSG } from 'hono/ssg'\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/foo', (c) => {\r\n  const message = c.req.header('x-message') ?? 'no message'\r\n  return c.html(<h1>Hello Foo, {message}</h1>)\r\n})\r\n\r\napp.get('/bar', (c) => {\r\n  return c.html(<h1>This is Bar</h1>, {\r\n    headers: {\r\n      'x-ssg-as-text': '1',\r\n    },\r\n  })\r\n})\r\n\r\ntoSSG(app, fs, {\r\n  beforeRequestHook: (req) => {\r\n    req.headers.append('x-message', 'SSG is great!')\r\n    return req\r\n  },\r\n  afterResponseHook: (res) => {\r\n    if (res.headers.get('x-ssg-as-text')) {\r\n      res.headers.set('Content-Type', 'text/plain')\r\n    }\r\n    return res\r\n  },\r\n  // Added `afterGenerateHook`. I think this is useful.  \r\n  afterGenerateHook: (result) => {\r\n    result.files?.map((file) => {\r\n      console.log(`Generated! ${file}`)\r\n    })\r\n  },\r\n})\r\n```\r\n\r\nIf you agree with this approach, you will have to change your code as follows:\r\n\r\n```diff\r\ndiff --git a/src/helper/ssg/index.ts b/src/helper/ssg/index.ts\r\nindex e0e0e0d..5297881 100644\r\n--- a/src/helper/ssg/index.ts\r\n+++ b/src/helper/ssg/index.ts\r\n@@ -88,11 +88,13 @@ export const ssgParams: SSGParamsMiddleware = (params) => async (c, next) => {\r\n \r\n export type BeforeRequestHook = (req: Request) => Request | false\r\n export type AfterResponseHook = (res: Response) => Response | false\r\n+export type AfterGenerateHook = (result: ToSSGResult) => void | Promise<void>\r\n \r\n export interface ToSSGOptions {\r\n   dir?: string\r\n   beforeRequestHook?: BeforeRequestHook\r\n   afterResponseHook?: AfterResponseHook\r\n+  afterGenerateHook?: AfterGenerateHook\r\n }\r\n \r\n /**\r\n@@ -117,8 +119,14 @@ export const fetchRoutesContent = async <\r\n \r\n     // GET Route Info\r\n     const thisRouteBaseURL = new URL(route.path, baseURL).toString()\r\n-    const forGetInfoURLRequest = new Request(thisRouteBaseURL) as AddedSSGDataRequest\r\n-    if (beforeRequestHook && !beforeRequestHook(forGetInfoURLRequest)) continue\r\n+\r\n+    let forGetInfoURLRequest = new Request(thisRouteBaseURL) as AddedSSGDataRequest\r\n+    if (beforeRequestHook) {\r\n+      const maybeRequest = beforeRequestHook(forGetInfoURLRequest)\r\n+      if (!maybeRequest) continue\r\n+      forGetInfoURLRequest = maybeRequest as unknown as AddedSSGDataRequest\r\n+    }\r\n+\r\n     await app.fetch(forGetInfoURLRequest)\r\n \r\n     if (!forGetInfoURLRequest.ssgParams) {\r\n@@ -128,8 +136,12 @@ export const fetchRoutesContent = async <\r\n \r\n     for (const param of forGetInfoURLRequest.ssgParams) {\r\n       const replacedUrlParam = replaceUrlParam(route.path, param)\r\n-      const response = await app.request(replacedUrlParam)\r\n-      if (afterResponseHook && !afterResponseHook(response)) continue\r\n+      let response = await app.request(replacedUrlParam, forGetInfoURLRequest)\r\n+      if (afterResponseHook) {\r\n+        const maybeResponse = afterResponseHook(response)\r\n+        if (!maybeResponse) continue\r\n+        response = maybeResponse\r\n+      }\r\n       const mimeType = response.headers.get('Content-Type')?.split(';')[0] || 'text/plain'\r\n       const content = await parseResponseContent(response)\r\n       htmlMap.set(replacedUrlParam, {\r\n@@ -210,13 +222,25 @@ export interface ToSSGAdaptorInterface<\r\n  * The API might be changed.\r\n  */\r\n export const toSSG: ToSSGInterface = async (app, fs, options) => {\r\n+  let result: ToSSGResult | undefined = undefined\r\n   try {\r\n     const outputDir = options?.dir ?? './static'\r\n-    const maps = await fetchRoutesContent(app)\r\n+    const maps = await fetchRoutesContent(\r\n+      app,\r\n+      options?.beforeRequestHook,\r\n+      options?.afterResponseHook\r\n+    )\r\n+\r\n     const files = await saveContentToFiles(maps, fs, outputDir)\r\n-    return { success: true, files }\r\n+    result = { success: true, files }\r\n   } catch (error) {\r\n     const errorObj = error instanceof Error ? error : new Error(String(error))\r\n-    return { success: false, error: errorObj }\r\n+    result = { success: false, error: errorObj }\r\n+  }\r\n+\r\n+  if (options?.afterGenerateHook) {\r\n+    await options.afterGenerateHook(result)\r\n   }\r\n+\r\n+  return result\r\n }\r\n```\r\n\r\nThis code is rough and may need to be improved.\r\n\r\nWhat do you think?",
          "@yusukebe \r\nI see! I'm interested and will think about it. This would be useful for listing file output destinations and SSG target path listings.",
          "@yusukebe \r\nThank you. I also made a new hook.",
          "@watany-dev \r\n\r\nGreat! I'll merge this now. Thanks."
        ]
      },
      {
        "pr_number": 2074,
        "title": "fix: await generate hook",
        "body": "ref https://github.com/honojs/hono/pull/2054\r\n\r\nThe test appears to be failing accidentally. This is probably due to something not awaiting generatehook\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2074",
        "comments": ["@watany-dev \r\n\r\nThanks. Merging."]
      },
      {
        "pr_number": 2071,
        "title": "fix:(ssg): make 'files' mandatory in ToSSGResult",
        "body": "fixes https://github.com/honojs/hono/issues/2070\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2071",
        "comments": ["Thanks @watany-dev !"]
      },
      {
        "pr_number": 2073,
        "title": "feat(types): explicitly specify statusCode",
        "body": "### Author should do the followings, if applicable\r\nexplicitly specify statusCode\r\nI explicitly specified all status codes defined in the specification.\r\n\r\n```ts\r\napp.get(\"/\", (c) => {\r\n   // redirect status code \r\n    return c.redirect(\"https://hono.dev\", 301);\r\n}).get(\"/2\", (c) => {\r\n    // general\r\n    // ...\r\n    return c.text(\"success!\", 201);\r\n})\r\n```\r\n\r\n```ts\r\napp.post(\"/3\", (c) => {\r\n    // type error\r\n    return c.text(\"bad status code\", 666)\r\n})\r\n```\r\n\r\nbut, if statusCode is unoffical statusCode\r\n```ts\r\nimport type { UnOfficalStatusCode } from \"hono/utils/http-status\";\r\n\r\napp.post(\"/4\", (c) => {\r\n    return c.text'(\"unoffical status code\", 666 as UnOfficalStatusCode)\r\n})\r\n```\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2073",
        "comments": [
          "@yusukebe  \nWhat do you think?\r\nI believe the UX will go up",
          "Hi @EdamAme-x \r\n\r\nSeems to be good!\r\n\r\nAs for the Unofficial status code, passing `ResponseInit` as the second argument will not cause a type error.\r\n\r\n```ts\r\napp.post('/666', (c) => {\r\n  return c.text('unofficial status code', {\r\n    status: 666,\r\n  })\r\n})\r\n```\r\n\r\nEither way, I would like to merge. Is that okay?",
          "Of course. Thanks!",
          "Let's go."
        ]
      },
      {
        "pr_number": 2098,
        "title": "chore: vitest test.pool to 'forks'",
        "body": "fixes https://github.com/honojs/hono/issues/2090\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2098",
        "comments": ["@watany-dev \r\n\r\nThanks. Merging now."]
      },
      {
        "pr_number": 2087,
        "title": "goodbye: lagon",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2087",
        "comments": [
          "https://github.com/honojs/hono/issues/2082",
          "The test itself is successful, although it fails with a mysterious timeout.",
          "Hi @EdamAme-x !\r\n\r\nThe test problem was fixed. So, this can be merged. Thanks!"
        ]
      },
      {
        "pr_number": 2092,
        "title": "refactor: faster for loop in jsx/dom",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2092",
        "comments": [
          "Hi @EdamAme-x \r\nThank you. I think it's good!",
          "Thanks! Merging."
        ]
      },
      {
        "pr_number": 2093,
        "title": "refactor: \"if\" on one line and deletion of unneeded variables",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2093",
        "comments": []
      },
      {
        "pr_number": 2096,
        "title": "fix: add typesVersions of accepts helper",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\nSorry, I forgot this!",
        "html_url": "https://github.com/honojs/hono/pull/2096",
        "comments": []
      },
      {
        "pr_number": 2167,
        "title": "v4",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/2167",
        "comments": ["The time has come. Let's go!"]
      },
      {
        "pr_number": 2167,
        "title": "v4",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/2167",
        "comments": ["The time has come. Let's go!"]
      },
      {
        "pr_number": 2105,
        "title": "chore: use Bun as a package manager",
        "body": "This PR proposes to use Bun as a package manager instead of Yarn.\r\n\r\n## Motivation\r\n\r\nWe have been using Yarn v1. However, we are having problems with the slow installation of dependencies. Also, the development of Yarn v1 has stopped.\r\n\r\nI am not that much of a package manager, but I have an admiration for other modern tools such as Yarn v4 (Berry) and pnpm.\r\n\r\nHowever, we cannot use [np](https://github.com/sindresorhus/np) in yarn v4 or pnpm. We are currently using np for this honojs/hono release, which must be able to use it.\r\n\r\n## Bun\r\n\r\nHono supports Bun and loves Bun. Bun is also an excellent package manager. So this time we will use Bun as a package manager instead of Yarn v4 or pnpm.\r\n\r\nNote: Bun can be a bundler and a test environment, but in this case, we will use it as a package manager and task runner.\r\n\r\n## Bun vs Yarn v4/pnpm\r\n\r\nCompare Bun with package managers such as Yarn v4 and pnpm.\r\n\r\nBun:\r\n\r\n* Pros - Ultra-fast.\r\n* Pros - Bun can emit `yarn.lock` compatible with Yarn v1. - So, this project will include `bun.lockb` and `yarn.lock`.\r\n* Pros - We may use np.\r\n* Pros - Does not need `yarn`.\r\n* Cons - Need to install Bun.\r\n* Cons - Does not support Windows. - but will support it soon.\r\n\r\nYarn v4/pnpm:\r\n\r\n* Pros - Does not need to install Bun.\r\n* Pros - Many projects use it.\r\n* Cons - np does not support it.  Though supporting yarn v4, it can not upload to `registry.npmjs.org`.\r\n* Cons - Fast, but slower than Bun.\r\n\r\n## How fast?\r\n\r\nhttps://github.com/honojs/hono/assets/10682/0a53a4a7-455c-440d-a6a4-ff375e85f884\r\n\r\n## On which runtime will the tests be run?\r\n\r\nNode.js.\r\n\r\nWe're using Vitest, which means that tests run on Node.js. The result of `getRuntimeKey()` is `node`.\r\n\r\n## Changes\r\n\r\nThere are no major changes, but contributors will type the following commands.\r\n\r\n* `yarn test` => `bun run test`\r\n* `yarn denoify` => `bun run denoify` or `bun denoify`\r\n* `yarn build` => `bun run build`\r\n\r\nHowever, there is not only `bun.lockb` but also `yarn.lock`, so you can use the yarn commands.\r\n\r\n## Are you sure about this?\r\n\r\nYes. If there is a major problem, we can go back to yarn. Plus, Hono likes Bun.\r\n\r\n---\r\n\r\nRelated #2051 #1405\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2105",
        "comments": [
          "Hi @ThatOneBro !\r\n\r\nFirst, I want you to see this PR. I think this is a great challenge. What do you think?",
          "Hey @yusukebe !\r\n\r\nI think Bun at this point is a good choice for the Hono project in terms of package manager and task runner since these both have stabilized a lot over the last half of a year. \r\n\r\nI would probably choose Bun over pnpm at this point, especially since Hono is currently using Yarn lockfile which is supported by Bun but not pnpm (aside from one-way import).\r\n\r\nLGTM!",
          "I'd say that `pnpm` over `yarn` is already a good enhancement (which my company did last year). @yusukebe have you considered dead simple `npm` instead?\r\n\r\nI have nothing against Bun, and I even considered using it as runtime at work over Node, but only when it gets more mature/stable. Hopefully, I'll switch by Summer \ud83d\ude0e",
          "@rafaell-lycan \r\n\r\n> @yusukebe have you considered dead simple `npm` instead?\r\n\r\nYeah. But `npm` has no special advantages, and in that case, I'd rather keep using yarn v1. And, Bun is more exciting.\r\n\r\n> I have nothing against Bun, and I even considered using it as runtime at work over Node, but only when it gets more mature/stable. Hopefully, I'll switch by Summer \ud83d\ude0e\r\n\r\nNice! I bet it will be even better by then!",
          "Merge time! Let's go."
        ]
      },
      {
        "pr_number": 2113,
        "title": "docs(contributing): add `Installing dependencies`",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2113",
        "comments": []
      },
      {
        "pr_number": 2167,
        "title": "v4",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/2167",
        "comments": ["The time has come. Let's go!"]
      },
      {
        "pr_number": 2094,
        "title": "feat(serve-static): `mimes` option for serve-static",
        "body": "close #2067 \r\n\r\nThis option enables you to set your own mime to serveStatic().\r\nThis `mimes` overwrites default mime in Hono.\r\n```ts\r\n// e.g. HLS\r\nconst mimes = {\r\n  m3u8: 'application/x-mpegURL',\r\n  ts: 'video/mp2t'\r\n}\r\napp.use('/video/*', serveStatic({mimes}))\r\n```\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2094",
        "comments": [
          "Hi @ryuapp !\r\n\r\nThanks. I've commented. Please check them.",
          "Hi @ryuapp \r\n\r\nIs this ready for review?",
          "@yusukebe now ready\r\n",
          "@ryuapp Thanks! I'll merge this now."
        ]
      },
      {
        "pr_number": 2104,
        "title": "feat(ssg): introduce `disableSSG` and `onlySSG`",
        "body": "This PR introduces `disbleSSG` and `onlySSG` middleware.\r\n\r\n### Usage\r\n\r\nYour application:\r\n\r\n```ts\r\nconst app = new Hono()\r\napp.get('/', (c) => c.html(<h1>Hello</h1>))\r\napp.get('/api', disableSSG(), (c) => c.text('an-api'))\r\napp.get('/static-page', onlySSG(), (c) => c.html(<h1>Welcome to my site</h1>))\r\n```\r\n\r\n### Difference from #2033\r\n\r\nThis Middleware is similar to `isSSG` and `isSSR` proposed in #2033 but different.\r\n\r\n1. Focus on SSG - **SSG Helper is for SSG only** and does not take care of Server-Side-Rendering. Therefore, we can only specify whether to enable SSG or not.\r\n2. Using headers - Add custom headers instead of adding properties to the `Request`/`Response` object. We need to extend the objects. And, without using this middleware, it can check the Request header, and user can write their own process if it has `x-hono-ssg.`\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2104",
        "comments": [
          "@yusukebe \r\nRegarding `disableSSG`, it's clear that the `c.header` method can be used to maintain state, which is quite efficient!\r\n\r\nHowever, I have some questions about `onlySSG`. In this case, it seems that every request must go through `toSSG`, meaning that all file writings have to be executed before any routing within the app occurs. This approach appears to potentially impact performance.\r\n\r\n## Analysis\r\nI haven't fully delved into the code, but it seems that routes registered with `new Hono()` prioritize previously registered routes. Therefore, by serving static files from the folder generated by `toSSG` before app registration, static file routing might be given priority.\r\n\r\n## Work\r\nHere are some experiments to support this theory:\r\n\r\n1. In this case, the serveStatic static route is prioritized, and the HTML file is displayed.\r\n\r\n```typescript\r\napp.use('*', serveStatic({ root: './static' }))\r\napp.get('/ssg', (c) => c.html(<SSGPage />));\r\n```\r\n\r\nor\r\n\r\n```typescript\r\napp.use('*', serveStatic({ root: './static' }))\r\napp.get('/ssg', (c) => c.notFound());\r\n```\r\n\r\n2. In this case, app.get('/ssg') is prioritized, and the HTML file assembled within the routing is displayed.\r\n\r\n```typescript\r\napp.get('/ssg', (c) => c.html(<SSGPage />));\r\napp.use('*', serveStatic({ root: './static' }))\r\n```\r\n\r\n3. In this case, app.get('/ssg') is prioritized, and a notFound response is returned.\r\n\r\n```typescript\r\napp.get('/ssg', (c) => c.notFound());\r\napp.use('*', serveStatic({ root: './static' }))\r\n```\r\n\r\n## Appendix\r\nIf the purpose of onlySSG is to be used only during static builds and to be inactive in regular routing, it might be sufficient to simply override with c.notFound without adding header logic.",
          "Hi @watany-dev, thanks fo the comment.\r\n\r\nFirst, let's get a clear understanding of how `toSSG` should be used.\r\n\r\nThis is my scenario for a hybrid SSG/SSR app.\r\n\r\n### 1. Write my application\r\n\r\nFor example, name it `src/index.ts`:\r\n\r\n```ts\r\n// src/index.ts\r\n\r\nimport { Hono } from 'hono'\r\nimport { disableSSG, onlySSG } from 'hono/ssg'\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/', (c) => c.html(<h1>Hello</h1>))\r\napp.get('/api', disableSSG(), (c) => c.text('an-api'))\r\napp.get('/static-page', onlySSG(), (c) => c.html(<h1>Welcome to my site</h1>))\r\n\r\nexport default app\r\n```\r\n\r\n### 2. Development\r\n\r\nDeveloping with a local server. If we also want to see `/static-page`, we might have to do the following, although it is verbose. This could be improved, but for now I think it is fine the way it is.\r\n\r\n```ts\r\nimport { env } from 'hono/adapter'\r\n\r\n// ...\r\n\r\napp.get(\r\n  '/static-page',\r\n  async (c, next) => {\r\n    if (env<{ mode: string }>(c).mode === 'production') {\r\n      await onlySSG()(c, next)\r\n    } else {\r\n      await next()\r\n    }\r\n  },\r\n  (c) => c.html(<h1>Welcome to my site</h1>)\r\n)\r\n```\r\n\r\n### 3. Deploy - SSG\r\n\r\nUse `toSSG` to export HTML statically and deploy it to such as Cloudflare Pages.\r\n\r\nCreate a build script to run on Node.js. Name it `build.ts`.\r\n\r\n```ts\r\n// build.ts\r\n\r\nimport fs from 'node:fs/promises'\r\nimport { toSSG } from 'hono/ssg'\r\nimport app from './src/index'\r\n\r\ntoSSG(app, fs, { dir: 'dist' })\r\n```\r\n\r\nBuild pages with the `build.ts`.\r\n\r\n```\r\ntsx ./build.ts\r\n```\r\n\r\nDeploy them using Wrangler.\r\n\r\n```\r\nwrangler pages deploy dist/\r\n```\r\n\r\n### 4. Deploy - SSR\r\n\r\nFor example, we can deploy the application as an SSR to Cloudflare Workers.\r\n\r\n```\r\nwrangler deploy src/index.ts\r\n```\r\n\r\n---\r\n\r\nMaybe your scenario is something completely different. We need to share.",
          "If we don't make default option, we can probably write this code:\r\n```\r\napp.use('*', disableSSG())\r\napp.get('/', c => c.json('Hello world!'))\r\napp.get('/', onlySSG(),  c => c.json('Hello world!'))\r\n```\r\nI think it's cool.\r\nDo you think this code is good?",
          "@yusukebe \n\nThanks, I understand the use case. That use case makes sense to me. I think it is good.",
          "@nakasyou \r\n\r\n> If we don't make default option, we can probably write this code:\r\n\r\nYeah, exactly. We can write the code.\r\n\r\n@watany-dev \r\n\r\nThank you for understanding. If we are going with this use case, I think this issue you mentioned is no longer a problem. How about it?\r\n\r\n> However, I have some questions about `onlySSG`. In this case, it seems that every request must go through `toSSG`, meaning that all file writings have to be executed before any routing within the app occurs. This approach appears to potentially impact performance.\r\n\r\n@nakasyou @watany-dev \r\n\r\nIf you are OK, I'll merge this PR and close #2033 ( but thanks for @nakasyou ).",
          "@yusukebe \r\nYes, there is nothing to block because the use case is different. I think we can merge them!",
          "@yusukebe \r\n> If you are OK, I'll merge this PR and close https://github.com/honojs/hono/pull/2033 ( but thanks for @nakasyou ).\r\n\r\nYes, I don't have dissatisfaction for this PR.",
          "Thanks both! Merge now!"
        ]
      },
      {
        "pr_number": 2119,
        "title": "feat!(mime): reduce default mimes",
        "body": "As the number of MIME increases in the future, it will be impossible to support them all due to file size problems.\r\nWe think that it should primarily support files used by browsers.\r\nInstead, you can maintain the previous state by using mimes option #2094 .\r\n\r\n## Delete extension List\r\n\r\n**azw(application/vnd.amazon.ebook)**\r\nIf Amazon is using Hono, it should not be deleted.\r\n\r\n**abw, csh, doc, docs, xls, xlsx, odp, ods, odt, ppt, pptx, vsd**\r\nFiles used by specific software.\r\n\r\n**swf, xul**\r\nFiles for software whose support has ended.\r\n\r\n**mpkg, sh**\r\nInstaller and scripts.\r\n\r\n**jar, php**\r\nOther language files.\r\n\r\n**arc, bz, bz2, tar, 7z**\r\nArchive and compressed files.\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2119",
        "comments": [
          "> Instead, you can maintain the previous state by using mimes option #2094 .\r\n\r\nExactly, now we have a `mimes` option! Thanks. Merge now."
        ]
      },
      {
        "pr_number": 2121,
        "title": "feat(types): better `c.var` type",
        "body": "I noticed `ContextVariableMap` is pretty much useless for `c.var` if `Env` in `Context` is `any` (the default), so I decided to make it respect it without breaking much code.\r\n\r\n## Before\r\n\r\n```ts\r\ndeclare module 'hono' {\r\n  export interface ContextVariableMap {\r\n    x: string;\r\n  }\r\n}\r\n\r\nconst c = new Context(...);\r\n\r\nc.var.x; // any\r\nc.var.y; // any\r\n```\r\n\r\n## Now\r\n\r\n```ts\r\ndeclare module 'hono' {\r\n  export interface ContextVariableMap {\r\n    x: string;\r\n  }\r\n}\r\n\r\nconst c = new Context(...);\r\n\r\nc.var.x; // string\r\nc.var.y; // still any, as to not break any code\r\n```",
        "html_url": "https://github.com/honojs/hono/pull/2121",
        "comments": [
          "Hi @Kyiro \r\n\r\nI think this PR looks good, but it can infer type correctly in my environment.\r\n\r\n<img width=\"596\" alt=\"Screenshot 2024-01-31 at 5 02 38\" src=\"https://github.com/honojs/hono/assets/10682/d0902f98-774d-44fb-a0c9-528fbcee2090\">\r\n\r\nOr, my understanding is wrong?",
          "It's only an issue with middleware handlers and such.\r\n```ts\r\nconst middleware: MiddlewareHandler = (c, next) => {\r\n    c.var.x; // it's different here because Context's Env is any by default\r\n};\r\n```",
          "@Kyiro \r\n\r\nAh, understood well. Please re-run `denoify`.",
          "@Kyiro \r\n\r\nThanks! Merge now.",
          "~~This is a `feat` but it's a minor change. So, I'll include it in the next patch-release.~~\r\n\r\nThis will be included in the next v4!"
        ]
      },
      {
        "pr_number": 2128,
        "title": "fix(jsx-renderer): correct nested layouts",
        "body": "Fixed not working correctly when there are more than 2 nested layouts.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2128",
        "comments": []
      },
      {
        "pr_number": 2130,
        "title": "feat!(validator): supports transformation",
        "body": "This PR allows changing the type of value returned by the validator.\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { validator } from 'hono/validator'\r\n\r\nconst app = new Hono()\r\n\r\napp.get(\r\n  '/',\r\n  validator('query', () => {\r\n    return {\r\n      age: 123\r\n    }\r\n  }),\r\n  (c) => {\r\n    const { age } = c.req.valid('query')\r\n    return c.json({\r\n      'your age is': age // number\r\n    })\r\n  }\r\n)\r\n```\r\n\r\nThe Zod Validator will need to be modified later.\r\n\r\nRelated to https://github.com/honojs/middleware/issues/368\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2130",
        "comments": []
      },
      {
        "pr_number": 2132,
        "title": "feat(jsx/dom): more react staff",
        "body": "Merging this PR will accomplish the purpose of #2131.\r\n\r\n### New staff members\r\n\r\n`useMemo`, `useLeyoutEffect`, `isValidElement`, `cloneElement`\r\n\r\n### Fixed\r\n\r\n#### `useContext`\r\n\r\nFixed the same problem with dom version as #2124\r\n\r\n#### `useEffect`\r\n\r\nAs in the original React, useEffect is now executed asynchronously after the DOM is rendered, rather than synchronously.\r\n\r\n### Enable to use 'hono/jsx/dom' for replacement of 'react'. \r\n\r\nYou can use dom-specific version of hooks and utils by importing from 'hono/jsx/dom' by 09da043\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2132",
        "comments": ["@yusukebe Would you please review?"]
      },
      {
        "pr_number": 2139,
        "title": "refactor(jsx): Remove unused HONO_COMPONENT feature",
        "body": "Fixes #2133\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2139",
        "comments": []
      },
      {
        "pr_number": 2145,
        "title": "Merge main into v4",
        "body": "Fixes #2137",
        "html_url": "https://github.com/honojs/hono/pull/2145",
        "comments": [
          "Hi @yusukebe \r\n\r\nI think this will merge correctly.\r\n\r\nMerging this PR might further nest merge commits, which might pollute the commit log a bit.\r\n\r\nIf you are OK with this content, you can push 0623c21 directly to v4.",
          "@usualoma \r\n\r\nThanks! I've done it."
        ]
      },
      {
        "pr_number": 2167,
        "title": "v4",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/2167",
        "comments": ["The time has come. Let's go!"]
      },
      {
        "pr_number": 2146,
        "title": "feat(jsx): \"className\" is now an alias for \"class\"",
        "body": "Fixes #2141\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2146",
        "comments": ["@yusukebe  Would you please review?"]
      },
      {
        "pr_number": 2150,
        "title": "fix!(deno): put SSG helper into `helper.ts`",
        "body": "It would be better to have that in `helper.ts` than in `middleware.ts`. We can use it like this:\r\n\r\n```ts\r\nimport { toSSG } from 'https://deno.land/x/hono/helper.ts'\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2150",
        "comments": []
      },
      {
        "pr_number": 2151,
        "title": "refactor(jsx): Tidyup the types to be exported",
        "body": "Tidyup and organize the type definitions exported from hono/jsx in src/jsx/types.ts.\r\n\r\nI don't think this will affect most users, but it could be a breaking change for a small percentage of users, so I think this should be included in a major version upgrade (v4).\r\n\r\n### New exported type\r\n\r\n* PropsWithChildren #2142\r\n\r\n### Changed types\r\n\r\n* Remove \"children\" from FC #2142\r\n* JSXNode\r\n    * The previous \"class as a value\" import is no longer available, and only \"type\" import is now available.\r\n        * `import { JSXNode } from 'hono/jsx'` is no longer available, only `import type { JSXNode } from 'hono/jsx'` is available.\r\n\r\n### No longer be exported\r\n\r\nUntil now, the types used internally were over-exported. With this PR change, types needed only internally should not be exported.\r\n\r\n* Props\r\n* JSXFragmentNode\r\n* jsxFn\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2151",
        "comments": [
          "I am trying to figure out how to solve the following problem\r\nhttps://github.com/honojs/hono/actions/runs/7776848588/job/21204467952?pr=2151",
          "@usualoma \r\n\r\nMaybe this issue: https://github.com/garronej/denoify/issues/124",
          "@yusukebe Oh, thank you. I understand.\r\nI think `export *` would work here, so I changed it temporarily with 874ca99.\r\nPlease review.",
          "@usualoma \r\n\r\nI think it is perfect except for the `denofy` matter. We can update that once `denoify` is fixed.\r\n\r\nThank you for your hard work."
        ]
      },
      {
        "pr_number": 2154,
        "title": "fix(types): `MergeSchemaPath` infer inputs not only params",
        "body": "Fixes #2153\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2154",
        "comments": []
      },
      {
        "pr_number": 2161,
        "title": "Fix/function for attribute",
        "body": "Like React's `renderToString()`, the value should be ignored if the key starts with \"on\" and an error should occur if the key does not.\r\n\r\nhttps://github.com/honojs/hono/compare/v4...usualoma:hono:fix/function-for-attribute?expand=1#diff-bbb085cf2da64bb28cf34775197b5fb966c1f425b9d12087a4f6e892a7324557R296-R308\r\n\r\nDepending on the configuration of the application, users may want to pass functions as strings. However, it is not a good behavior for hono to automatically convert functions to strings, since the stringified function may unintentionally contain server-side code. If an application needs to stringify functions, it should explicitly stringify them using `toString()`.\r\n\r\n```tsx\r\n<button data-handler={((ev) => { clientSideCode(ev) }).toString()}>Click</button>\r\n```\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2161",
        "comments": [
          "@usualoma \r\n\r\nThanks! Looks good!\r\n\r\nSerializing something like a function (maybe not a real function) and passing it from the server side to the client is an interesting challenge, but I don't think we need to do it now."
        ]
      },
      {
        "pr_number": 2162,
        "title": "fix(jsx): The third argument of jsx(), key, is optional",
        "body": "As shown in the following example, if key is unspecified, the third argument is not passed, so it is correct that it is optional.\r\n\r\n![image](https://github.com/honojs/hono/assets/30598/7186880e-3143-475a-9cb1-a7589d3523ca)\r\nhttps://legacy.reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2162",
        "comments": ["Looks good \ud83d\udc4d"]
      },
      {
        "pr_number": 2165,
        "title": "Feat/more jsx event",
        "body": "fixes #2140\r\n\r\n### Event types\r\n\r\nIn hono, handlers are registered directly with `addEventListener`, so we defined the raw Event as it is.\r\nThe list of events is referenced below.\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/Element\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement#events\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement#events\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/Element/input_event\r\n\r\n\r\nSome events may be missing, in which case you can add your own events.\r\n\r\n```ts\r\ndeclare global {\r\n  namespace Hono {\r\n    interface EventAttributes {\r\n      onMyCustomEvent?: (event: Event) => void\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### Support event capture phase\r\n\r\nAs with React, if the event name ends with `Capture`, it is considered a capture phase handler.\r\n\r\n### Names are now strictly handled\r\n\r\nReact requires the `on` to be followed by an uppercase letter, as in `onClick`. This PR will add a type, and I don't think any user will write it like `onclick`, so I think it would be less confusing to adapt hono to React as well.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2165",
        "comments": [
          "I found a bug, but it has been fixed in b536fa2.\r\nThe work is complete.",
          "@usualoma \r\n\r\nSuper cool! Now we have all the features to v4. Thanks!"
        ]
      },
      {
        "pr_number": 2167,
        "title": "v4",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/2167",
        "comments": ["The time has come. Let's go!"]
      },
      {
        "pr_number": 2159,
        "title": "docs: update the migration guide for releasing v4",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2159",
        "comments": []
      },
      {
        "pr_number": 2168,
        "title": "perf(mime): make `getExtension()` fast",
        "body": "`find` method is generally slower than for loop.\r\nThis PR replace it with for loop. More than 10x faster.\r\n## Benchmark on Deno\r\n<details>\r\n\r\n<summary>Source code</summary>\r\n\r\n\r\n```ts\r\n// Run `deno bench`\r\n\r\nexport const getExtension1 = (mimeType: string): string | undefined => {\r\n  return Object.keys(baseMimes).find((ext) => baseMimes[ext] === mimeType);\r\n};\r\nexport const getExtension2 = (mimeType: string): string | undefined => {\r\n  for (const ext in baseMimes) {\r\n    if (baseMimes[ext] === mimeType) {\r\n      return ext;\r\n    }\r\n  }\r\n};\r\nconst baseMimes: Record<string, string> = {\r\n  aac: \"audio/aac\",\r\n  avi: \"video/x-msvideo\",\r\n  avif: \"image/avif\",\r\n  av1: \"video/av1\",\r\n  bin: \"application/octet-stream\",\r\n  bmp: \"image/bmp\",\r\n  css: \"text/css\",\r\n  csv: \"text/csv\",\r\n  eot: \"application/vnd.ms-fontobject\",\r\n  epub: \"application/epub+zip\",\r\n  gif: \"image/gif\",\r\n  gz: \"application/gzip\",\r\n  htm: \"text/html\",\r\n  html: \"text/html\",\r\n  ico: \"image/x-icon\",\r\n  ics: \"text/calendar\",\r\n  jpeg: \"image/jpeg\",\r\n  jpg: \"image/jpeg\",\r\n  js: \"text/javascript\",\r\n  json: \"application/json\",\r\n  jsonld: \"application/ld+json\",\r\n  map: \"application/json\",\r\n  mid: \"audio/x-midi\",\r\n  midi: \"audio/x-midi\",\r\n  mjs: \"text/javascript\",\r\n  mp3: \"audio/mpeg\",\r\n  mp4: \"video/mp4\",\r\n  mpeg: \"video/mpeg\",\r\n  oga: \"audio/ogg\",\r\n  ogv: \"video/ogg\",\r\n  ogx: \"application/ogg\",\r\n  opus: \"audio/opus\",\r\n  otf: \"font/otf\",\r\n  pdf: \"application/pdf\",\r\n  png: \"image/png\",\r\n  rtf: \"application/rtf\",\r\n  svg: \"image/svg+xml\",\r\n  tif: \"image/tiff\",\r\n  tiff: \"image/tiff\",\r\n  ts: \"video/mp2t\",\r\n  ttf: \"font/ttf\",\r\n  txt: \"text/plain\",\r\n  wasm: \"application/wasm\",\r\n  webm: \"video/webm\",\r\n  weba: \"audio/webm\",\r\n  webp: \"image/webp\",\r\n  woff: \"font/woff\",\r\n  woff2: \"font/woff2\",\r\n  xhtml: \"application/xhtml+xml\",\r\n  xml: \"application/xml\",\r\n  zip: \"application/zip\",\r\n  \"3gp\": \"video/3gpp\",\r\n  \"3g2\": \"video/3gpp2\",\r\n  gltf: \"model/gltf+json\",\r\n  glb: \"model/gltf-binary\",\r\n};\r\n\r\nDeno.bench(\"Old: getExtension() find `text/html`\", () => {\r\n  getExtension1(\"text/html\");\r\n});\r\nDeno.bench(\"New: getExtension() find `text/html`\", () => {\r\n  getExtension2(\"text/html\");\r\n});\r\nDeno.bench(\"Old: getExtension() find default non-existent extensions\", () => {\r\n  getExtension1(\"hono/hono\");\r\n});\r\nDeno.bench(\"New: getExtension() find default non-existent extensions\", () => {\r\n  getExtension2(\"hono/hono\");\r\n});\r\n```\r\n\r\n</details>\r\n\r\n```\r\nbenchmark                                                     time (avg)        iter/s             (min \u2026 max)       p75       p99      p995\r\n-------------------------------------------------------------------------------------------------------------- -----------------------------\r\nOld: getExtension() find `text/html`                         317.18 ns/iter   3,152,772.1  (287.25 ns \u2026 456.3 ns)  328.2 ns 436.62 ns  456.3 ns\r\nNew: getExtension() find `text/html`                          26.67 ns/iter  37,496,954.0   (24.54 ns \u2026 69.92 ns)   25.6 ns  59.25 ns  62.88 ns\r\nOld: getExtension() find default non-existent extensions       1.15 \u00b5s/iter     871,974.7     (1.07 \u00b5s \u2026 2.56 \u00b5s)   1.13 \u00b5s   2.56 \u00b5s   2.56 \u00b5s\r\nNew: getExtension() find default non-existent extensions      96.86 ns/iter  10,323,689.8  (91.29 ns \u2026 172.49 ns)  95.53 ns 160.97 ns 169.22 ns\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno",
        "html_url": "https://github.com/honojs/hono/pull/2168",
        "comments": ["@ryuapp \r\n\r\nNice! `find` is really slow. Thanks!"]
      },
      {
        "pr_number": 2167,
        "title": "v4",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/2167",
        "comments": ["The time has come. Let's go!"]
      }
    ],
    "v3.12.11": [
      {
        "pr_number": 2152,
        "title": "fix(types): `MergeSchemePath` infers param types correctly",
        "body": "Fixes #2148\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2152",
        "comments": []
      }
    ],
    "v4.0.0-rc.4": [
      {
        "pr_number": 1753,
        "title": "feat(base): Set Default Path to '*' for app.use()",
        "body": "fixed: #1754 \r\n\r\nIn the previous implementation, if a path was not specified in the app.use method, the route would default to the current path. This was inconvenient when wanting to apply middleware to all requests without specifying a specific path.\r\n\r\nThe main change is as follows:\r\nWe modified the use method in the Hono class so that if the first argument is a middleware function, the default path is set to '*'. This could be a breaking change when the first argument is not specified, and therefore, it might be appropriate to manage this under the v4 branch\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1753",
        "comments": [
          "Hi @watany-dev,\r\n\r\nTotally agree. And as you've pointed out, since this will be a breaking change, let's plan to introduce it in `v4`. Thanks!",
          "I like this! This was the behavior I expected when calling .use() without a path, and every time I get confused when it doesn't work",
          "Hi @watany-dev !\r\n\r\nI made the `v4` branch. I'll merge this into `v4` now!"
        ]
      },
      {
        "pr_number": 1917,
        "title": "feat: Introduce jsx/dom",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1917",
        "comments": [
          "There are probably still a lot of bugs, but since we have implemented a minimal number of hooks and added a minimal number of tests, I would like to end this PR work here.\r\nI think we are at a level where we can consider merging.",
          "Hi @usualoma !\r\n\r\nAwesome work! I have made a minimal example and used it, but the feel is good.\r\n\r\nI've made the `v4` branch for the X day. I'll merge this into `v4` and release the RC version. Then shall we can improve it!\r\n\r\nThanks."
        ]
      },
      {
        "pr_number": 1933,
        "title": "ci: enables CI in the v4 branch",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1933",
        "comments": []
      },
      {
        "pr_number": 1923,
        "title": "feat(hono-base): `app.on` supports multiple paths",
        "body": "Fixes #1901\r\n\r\nThis PR enables `app.on` to handle multiple paths.\r\n\r\nUsage:\r\n\r\n```ts\r\napp.on('GET', ['/hello', '/ja/hello', '/en/hello'], (c) => {\r\n  return c.text('Hello!')\r\n})\r\n```\r\n\r\nIt does not support multiple paths with `app.get()`, etc.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1923",
        "comments": [
          "Hi @usualoma \r\n\r\nCould you review this?",
          "@yusukebe LGTM!",
          "@usualoma \r\n\r\nThanks!"
        ]
      },
      {
        "pr_number": 1934,
        "title": "feat!: remove deprecated features",
        "body": "In this PR, I've removed the deprecated features for releasing v4.0.0.\r\n\r\nOne of the benefits of removing those features is a reduction in size: the bundle size of Hello World has gone from 12.33 KiB to 10.72 KiB!\r\n\r\n<img width=\"666\" alt=\"Screenshot 2024-01-10 at 9 20 47\" src=\"https://github.com/honojs/hono/assets/10682/7e829e90-5e42-4633-8b01-08c20f3bbef2\">\r\n\r\n### TODO\r\n\r\nWhen we release v4.0.0, we need to write a migration guide based on this PR.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1934",
        "comments": []
      },
      {
        "pr_number": 2167,
        "title": "v4",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/2167",
        "comments": ["The time has come. Let's go!"]
      },
      {
        "pr_number": 1936,
        "title": "fix(jsx/dom): fix cleanup for deps",
        "body": "There was a problem that cleanup was not called when changing \"deps\", so this has been fixed.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1936",
        "comments": [
          "@yusukebe, Would you please review?\r\nLooking at the unit tests, you will understand what has been fixed."
        ]
      },
      {
        "pr_number": 1938,
        "title": "refactor(jsx/dom): replace existing content by render()",
        "body": "Fixes #1937\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1938",
        "comments": [
          "@usualoma \r\n\r\nI've tried running it, and it worked well. Thanks!"
        ]
      },
      {
        "pr_number": 1928,
        "title": "feat(css): Introduce pseudo global selector and class name based extend syntax",
        "body": "### Global selector\r\n\r\nIf you wrap the whole thing (not just part of it) in a pseudo-selector called `:-hono-global`. The output of the  `css` is not wrapped in the generated class name, but is interpreted as a top-level specification.\r\n\r\n```ts\r\ncss`\r\n:-hono-global {\r\n  body {\r\n    font-size: 10px;\r\n  }\r\n}\r\n`\r\n```\r\n\r\n### Class name based extend syntax\r\n\r\nYou can extend it by embedding the class name by writing it in the following syntax `${baseClass} {`\r\n\r\n```ts\r\nconst baseClass = css`display: flex`\r\nconst extendedByContent = css`\r\n  ${baseClass}\r\n  flex-direction: column;\r\n` // This is already possible\r\nconst extendedByClassName = css`\r\n  ${baseClass} {\r\n    flex-direction: column;\r\n    p {\r\n      color: red;\r\n    }\r\n  }\r\n` // This is made possible by this PR\r\n```\r\n\r\n\r\n### Use both \"Global selector\" and \"Class name based extend syntax\"\r\n\r\nThe following can be written to place the media query at the top level so that it can be interpreted by older browsers that do not support nesting.\r\n\r\n```ts\r\nconst baseClass = css`display: flex`\r\nconst globalClass = css`\r\n:-hono-global {\r\n  @media (min-width: 768px) {\r\n    ${baseClass} {\r\n      flex-direction: column;\r\n    }\r\n  }\r\n}\r\n`\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1928",
        "comments": [
          "### Generated deferent class name for deferent first line comment even if the content is the same\r\n\r\n\"Class name based extend syntax\" can be used to generate unique class names, since there may be times when you want to have the same content but different base classes. If a comment with unique content is added to the first line, its content is included in the calculation of the hash value.\r\n\r\n```ts\r\nconst headerClassA = css`\r\n  /* class A */\r\n  display: flex;\r\n`\r\nconst headerClassB = css`\r\n  /* class B */\r\n  display: flex;\r\n`\r\n\r\nconst extendedClassA = css`\r\n  ${headerClassA} {\r\n    p { font-size: 10px }\r\n  }\r\n`\r\n\r\nconst extendedClassB = css`\r\n  ${headerClassB} {\r\n    p { font-size: 11px }\r\n  }\r\n`\r\n\r\n// If headerClassA and headerClassB do not have different class names, problems will occur.\r\n```",
          "@usualoma \r\n\r\nIs this the correct way to use the Global selector?\r\n\r\n```tsx\r\napp.get('/', (c) => {\r\n  const globalClass = css`\r\n    :-hono-global {\r\n      body {\r\n        color: red;\r\n      }\r\n    }\r\n  `\r\n  return c.html(\r\n    <html>\r\n      <head>\r\n        <Style />\r\n      </head>\r\n      <body class={globalClass}>\r\n        <h1>Hello!</h1>\r\n      </body>\r\n    </html>\r\n  )\r\n})\r\n```",
          "Hi, @yusukebe \r\n\r\nPlease do it that way. css`` does not trigger side-effects, so even if you define global CSS, you need to explicitly embed it somewhere in the template.\r\n\r\nOr you can specify it in the child component.\r\n\r\n```ts\r\nconst baseClass = css`display: flex`\r\nconst baseClassWithGlobalClass = css`\r\n:-hono-global {\r\n  @media (min-width: 768px) {\r\n    ${baseClass} {\r\n      flex-direction: column;\r\n    }\r\n  }\r\n}\r\n`\r\napp.get('/', (c) => {\r\n  c.render(<div class={baseClassWithGlobalClass}>Content</div>);\r\n})\r\n\r\n// => <style id=\"hono-css\">@media (min-width:768px){.css-3980466870{flex-direction:column}}.css-3980466870{display:flex}</style> ... <div class=\"css-3980466870\">Content</div>\r\n```\r\n\r\n### If you want to use straightforward global CSS\r\n\r\nBy e6cf20f, when \"css\" is passed to the children of a Style component, it is now interpreted as global CSS. This is a seemingly crazy obvious behavior, but it is useful if you want to define global CSS by embedding variables. \" -hono-global\" is useful, but if we could define global css without it that would be more beautiful.\r\n\r\n<img width=\"874\" alt=\"image\" src=\"https://github.com/honojs/hono/assets/30598/e478184a-e807-4f7a-bb68-dd00e11ce7ff\">\r\n",
          "I've added all the changes I want to make, so you can have it merged into main or v4 whichever is better.",
          "@usualoma Thanks! makes sense.\r\n\r\n> when \"css\" is passed to the children of a Style component, it is now interpreted as global CSS\r\n\r\nThis is so cool and super easy to understand.\r\n\r\nI'll merge this into `v4` now."
        ]
      },
      {
        "pr_number": 2167,
        "title": "v4",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/2167",
        "comments": ["The time has come. Let's go!"]
      },
      {
        "pr_number": 1904,
        "title": "feat: Introducing a New SSG Adaptor/Helper ",
        "body": "To celebrate the release of Hono v4, I propose a new feature. This is somewhat niche, but it's a Helper (or Adaptor) designed to convert Hono code into static HTML. Utilizing this, users can easily host SSG on platforms like S3 or R2. Currently, I'm grappling with three main concerns.\r\n\r\n1. is this within the scope of responsibilities for the Hono framework? If it's deemed unnecessary, I might consider moving it to hono/middleware.\r\n2. I'm wondering if it's more fitting to provide this as an Adaptor rather than a Helper, given its nature.\r\n3. is the functionality interface appropriate? I've found myself pondering over this and have started studying SSG in other frameworks as well :)\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1904",
        "comments": [
          "Hi @watany, excuse me from outside.\r\n\r\nThanks for the great suggestions! I like the concept.\r\nIn terms of Hono's built-in middleware approach, I think we have to avoid dependence on runtime as much as possible.\r\n\r\nFor example, I thought it would be cleaner to export only the function to generate `Map<path, renderedHtml>` from `hono/ssg` (maybe `hono/renderer` would be a better name) and provide the function to save the output to disk from the adaptor of each runtime. I thought it would be cleaner to provide a function from the runtime adaptor to save the output to the disk.\r\nThis would allow for a more scalable approach, such as caching rendered string output in an environment without fs.",
          "I wrote PR: https://github.com/watany-dev/hono/pull/4 for this.\r\n\r\nYou can use API like `generateStaticPaths`  if you merge it PR.",
          "@sor4chi \r\nThank you. I hope the fix is not misrecognized by this kind of fix.\r\nhttps://github.com/watany-dev/hono/pull/5",
          "@nakasyou \r\nIt's a cool feature, but it's middleware that is not in the plan I was trying to do, so please give me a little time to think about it.",
          "Thanks, @watany-dev.\r\nI mostly agree with the policy, but I personally would like to kick `path` and `Buffer` out of `hono/ssg`.\r\nThese are supposed to be nodejs modules...(This can be seen by doing denoify)",
          "Hi @watany-dev !\r\n\r\nThanks for the greeeeat PR. I like this!\r\n\r\nI wondered whether or not to include this feature in the Hono core, but the current implementation is so tiny that it would be best to include it in the Hono core with an adapter.\r\n\r\nI left some comments.\r\n\r\nAnd I made a Vite plugin with this SSG Adapter.\r\n\r\nhttps://github.com/yusukebe/hono-ssg-example\r\nhttps://github.com/yusukebe/hono-ssg-example/blob/main/src/vite-plugin.ts\r\n\r\nThis is simple but very powerful. When used with `@hono/vite-dev-server`, we can do everything from development to page generation to deployment non-stop.\r\n\r\nhttps://github.com/honojs/hono/assets/10682/12ff03ce-d392-42ef-8135-6494ce952f36\r\n\r\nI will create this Vite plugin as `@hono/vite-ssg-build` once this PR is merged and the next update is released.",
          "Hey @watany-dev !\r\n\r\nCan you check my comments?",
          "@yusukebe \nYes, I am fixing it now. I followed @sor4chi advice and am taking the time to port the toSSG to Bun and Deno!",
          "@watany-dev \r\n\r\nOkay! Implementing each `toSSG()` in the adapter is very good!",
          "@yusukebe \r\nI believe I've now addressed all the comments that have come in.\r\n\r\n Notes:\r\n- I've partially added deno.d.ts to the Adaptor to use Deno's file module.\r\n- Bun now supports Vitest, so I'm taking this opportunity to unify the test cases under Vitest. \r\n- The existing tsconfig.json stopped working, so I've added some settings to it.\r\n\r\nTo Do:\r\n- Add toSSG to the Node.js Adaptor. I will issue a Pull Request for this after the interfaces for Deno and Bun have been accepted.\r\n- Removal of the fs module from the bun module. However, this might be sufficient for now.\r\n- Documentation needs to be created.\r\n- Deno's c.render doesn't work with the same code as Bun for some reason. I have simplified it for now.",
          "Hi @watany-dev !\r\n\r\nIt does not seem to be the end yet. Check my comments!",
          "@yusukebe \r\nThanks for the great review. I am sure we could have handled it. I also set a Default value for path since option was a required argument. Hope you like it.",
          "By the way, do you have any idea how to deal with dynamic param regarding SSG?",
          "@watany-dev \r\n\r\nThanks! You did it! I'll merge this into the \"v4\" branch.\r\n\r\n@sor4chi \r\n\r\n> By the way, do you have any idea how to deal with dynamic param regarding SSG?\r\n\r\nI prefer the approach suggested in @nakasyou's PR. For example:\r\n\r\n```ts\r\napp.get(\r\n  '/posts/:id',\r\n  ssgParams(() => {\r\n    return Array.from({ length: 10 }, (_, i) => ({ id: i.toString() }))\r\n  }),\r\n  (c) => {\r\n    return c.html(`<h1>${c.req.param('id')}</h1>`)\r\n  }\r\n)\r\n```\r\n\r\n@nakasyou Please create your own PR based on \"v4\", not necessarily the same API as above.",
          "@nakasyou @watany-dev @sor4chi \r\n\r\nOr, instead of specifying it in the handler, you can create hooks in the `toSSG()` options. This way, you don't have to modify the application.\r\n\r\n```ts\r\ntoSSG(app, fs, {\r\n  beforeRequest: (route, app) => {\r\n    if (route.path === '/posts/:id') {\r\n      Array.from({ length: 10 }, (_, i) => {\r\n        app.request(`/posts/${i}`)\r\n      })\r\n    }\r\n  },\r\n  afterResponse: (res) => {\r\n    if (!res.headers.get('content-type').match(/^text\\/html/)) {\r\n      return null // or false\r\n    }\r\n    return res\r\n  }\r\n})\r\n```"
        ]
      },
      {
        "pr_number": 1967,
        "title": "chore(helper): Add experimental flag the SSG features",
        "body": "fixes: https://github.com/honojs/hono/issues/1961\r\n\r\nAll exported APIs have been described. Please let me know if this standard is excessive.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1967",
        "comments": ["@watany-dev \r\n\r\nThanks! Looks good. Merge now."]
      },
      {
        "pr_number": 1969,
        "title": "refactor: remove unnecessary `import`",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1969",
        "comments": []
      },
      {
        "pr_number": 1970,
        "title": "refactor: remove and fix comments",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1970",
        "comments": []
      },
      {
        "pr_number": 2167,
        "title": "v4",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/2167",
        "comments": ["The time has come. Let's go!"]
      },
      {
        "pr_number": 1971,
        "title": "ci: remove lagon runtime tests and other lagon things",
        "body": "Fixes #1888\r\n\r\nSince Lagon will be offline, removed the runtime tests for and other Lagon things.\r\n\r\nIn the `getRuntimeKey()` of the Adapter Helper, I'll leave the Lagon detection.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1971",
        "comments": []
      },
      {
        "pr_number": 1965,
        "title": "refactor(ssg): SSG works without `node:path`",
        "body": "You can close #1964 If you merge this PR.\n\n### Author should do the followings, if applicable\n\n- [x] Add tests\n- [x] Run tests\n- [x] `yarn denoify` to generate files for Deno\n",
        "html_url": "https://github.com/honojs/hono/pull/1965",
        "comments": [
          "It appears that the spec does not allow me to do what I have in mind, so here is my suggestion.\r\n\r\nThis code could be made as concise as the following\r\nhttps://github.com/EdamAme-x/hono/blob/refactor/ssg-without-node-path/src/helper/ssg/utils.ts",
          "Of course, all test cases are passed.",
          "@nakasyou \r\n\r\nThanks! I'll merge this now.\r\n\r\n@EdamAme-x \r\n\r\nThank you for the suggestion. I like your code, it's very clear to understand. In this case, I will accept this PR code since we only need to be able to keep the specs by testing. Please contribute again!",
          "thanks.\ni do it after this"
        ]
      },
      {
        "pr_number": 1979,
        "title": "feat(factory): remove `deprecated` from `Factory` and `createHandlers`",
        "body": "Fixes #1948\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1979",
        "comments": []
      },
      {
        "pr_number": 1976,
        "title": "fix(ssg): fix path parser bug & refactor code",
        "body": "### Author should do the followings, if applicable\n\n- [x] Add tests\n- [x] Run tests\n- [x] `yarn denoify` to generate files for Deno\n",
        "html_url": "https://github.com/honojs/hono/pull/1976",
        "comments": [
          "I have improved the code to make it easier to understand and faster.\r\nand i noticed before code (https://github.com/honojs/hono/pull/1965) has bug :(\r\n\r\nSpecifically, the triple dots should have been valid but were poorly parsed with the following use.\r\n```ts\r\npath = path.replace(/^\\./g, '')\r\n```\r\n\r\n`.`, `..` and string without dot are operates normally.\r\n\r\nbut, `...`, `....`, (dotLength >= 3) or ex. `.hello`\r\nthese strings out to be \"..\", \"...\", and \"hello\", respectively.\r\nIt is a normal directory name to start with dot or to have multiple dots.\r\n\r\nAnd i fixed this problem by improving the regular expression.\r\n```ts\r\npath = path.replace(/^\\.(?!\\.)/g, '')\r\n```",
          "sry\nI found a few problems.\nI will fix it later.",
          "I checked and it was fine.\r\nTest case is passed by this pr",
          "@EdamAme-x Thanks! Merge now."
        ]
      },
      {
        "pr_number": 2167,
        "title": "v4",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/2167",
        "comments": ["The time has come. Let's go!"]
      },
      {
        "pr_number": 1968,
        "title": "feat(ssg): Implement Dynamic File Extension on MIME Type and Enhanced Response Handling",
        "body": "fixes: https://github.com/honojs/hono/issues/1962 https://github.com/honojs/hono/issues/1963\r\n\r\nI have addressed these two issues together as they are interconnected\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1968",
        "comments": [
          "If it's necessary to implement all corresponding MIME types, the determineExtension function might become too large, so I'm considering moving it to utils.ts.",
          "Hi @watany-dev \r\n\r\nAlmost seems to be good, but I've left the comments. Check them.",
          "@yusukebe \r\nThank you for the review. I forgot about `util/mime`.",
          "@watany-dev \r\n\r\nThanks very much. Merging now."
        ]
      },
      {
        "pr_number": 1981,
        "title": "feat(jsx/dom): rewrite renderer to use virtual tree",
        "body": "By #1917 and #1955 we found that we could achieve \"render to dom\" with our own implementation and it made sense, but it was, to put it mildly, a rather dirty implementation and an impossible one to maintain.\r\n\r\nAs mentioned on https://github.com/honojs/hono/pull/1909#issuecomment-1880043938, I think the cost of implementation is high, but still, without a virtual tree approach, the code for this feature is I don't think it would be maintainable.\r\n\r\nSo, I would like to replace it with this implementation that creates a virtual tree.\r\n\r\n### Differences from #1917, #1955\r\n\r\n#### Async component is not supported\r\n\r\nUnfortunately, as with the original React, it is not possible to use async components when rendering to dom. I was very worried about this, but I still think it would be better not to support this because it would not be possible to match the policy for rendering JSX to DOM.\r\n\r\n```ts\r\nconst Component = async () => {\r\n  const num = await promise\r\n  return <div>{num}</div>;\r\n};\r\n```\r\n\r\n`use` hook is available and should be used when rendering to dom.\r\n\r\n```ts\r\nconst Component = () => {\r\n  const num = use(promise)\r\n  return <div>{num}</div>;\r\n};\r\n```\r\n\r\n### Small\r\n\r\n\"src/jsx/dom/render.ts\"  is very small, about 3 Kb.\r\n\r\n```\r\n$ npx esbuild --minify src/jsx/dom/render.ts | wc\r\n       1      66    3132\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1981",
        "comments": [
          "This PR also fixes these issues.\r\n\r\nFixes https://github.com/honojs/hono/issues/1944\r\nFixes https://github.com/honojs/hono/issues/1941\r\nFixes https://github.com/honojs/hono/issues/1942\r\nFixes https://github.com/honojs/hono/issues/1943",
          "@usualoma \r\n\r\nIt's amazingly small! It is good that the implementation is small and easy to maintain. It's good if working AsyncComponent with `use`.\r\n\r\nWhat I am concerned about is the case where the server and the client see the same component. This is an important issue for Islands Architecture, which will be introduced in v4.\r\n\r\nI tried this PR code, but, of course, the `use` did not work on the server. The code is below.\r\n\r\n```tsx\r\nimport { useState, use } from 'hono/jsx/hooks'\r\n\r\nexport default function Counter() {\r\n  const promise = new Promise((resolve) => setTimeout(resolve, 2000))\r\n  use(promise)\r\n  const [count, setCount] = useState(0)\r\n  return (\r\n    <div>\r\n      <p>Count: {count}</p>\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\nRepo: https://github.com/yusukebe/hono-jsx-front-poc/tree/dom\r\n\r\nWhat we need to consider is the `use` specification. If we use `use` on the server side as well, should it wait until Promise resolves it or not? If we follow the client's spec, it should wait. But, for example, it might be a good UI if the server does **not** wait for `use` to resolve, but returns HTML and waits at the client.\r\n\r\nWhat do you think about the server and client referring to the same component regardless of `use`?",
          "### Behavior of `use()` in React\r\n\r\n#### render() to DOM\r\n\r\nThis code does not work\r\n\r\n```ts\r\nexport default function Counter() {\r\n  const promise = new Promise((resolve) => setTimeout(resolve, 2000))\r\n  use(promise)\r\n  const [count, setCount] = useState(0)\r\n  return (\r\n    <div>\r\n      <p>Count: {count}</p>\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\nWe need to pass the same object to `use()`.\r\n\r\n```ts\r\nconst promise = new Promise((resolve) => setTimeout(resolve, 2000)) // Define outside the component or cache it somewhere\r\n\r\nexport default function Counter() {\r\n  use(promise)\r\n  const [count, setCount] = useState(0)\r\n  return (\r\n    <div>\r\n      <p>Count: {count}</p>\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\n#### renderToString()\r\n\r\n`renderToString()` does not support `Suspense`\r\n\r\n#### renderToReadableStream()\r\n\r\nThis code works.\r\n\r\n```ts\r\nexport default function Counter() {\r\n  const promise = new Promise((resolve) => setTimeout(resolve, 2000))\r\n  use(promise)\r\n  const [count, setCount] = useState(0)\r\n  return (\r\n    <div>\r\n      <p>Count: {count}</p>\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\n### Behavior of `use()` in hono/jsx\r\n\r\n#### render() to DOM\r\n\r\nAs with React, the former code will not work. The latter code works.\r\n\r\n#### toString()\r\n\r\nat caba00e, the former code will not work. The latter code works. I believe you saw this and commented.\r\n\r\nat f7070ae, also the former code works like React's `renderToReadableStream()`\r\n\r\n\r\n### Conclusion\r\n\r\nIf the result should be the same whether rendering to DOM or toString(), then the code in caba00e is sufficient and f7070ae is unnecessary.\r\nHowever, I think that f7070ae is also useful, so I think it is OK to include it.",
          "@yusukebe \r\nIf you do not see a problem, you may have this PR merged.\r\nThis PR is still not that small because bundling always introduces unnecessary code for `toString()`, but #1986 will allow bundling of only the dom render, which is expected to make it very small.",
          "@usualoma \r\n\r\nThanks! \r\n\r\nI am wondering if the counter sample in the following repository will work or not. From what I have tried, it does not work with the latest code from this PR. I think this should work, am I wrong? I would be glad if you could check.\r\n\r\nhttps://github.com/yusukebe/hono-jsx-front-poc/tree/dom",
          "@yusukebe \r\nOK, `use()` should be used in `Suspense`.\r\n\r\n```tsx\r\nimport { Suspense } from 'hono/jsx'\r\nimport { useState, use } from 'hono/jsx/hooks'\r\n\r\nconst promise = new Promise((resolve) => setTimeout(resolve, 2000))\r\n\r\nfunction Counter() {\r\n  use(promise)\r\n  const [count, setCount] = useState(0)\r\n  return (\r\n    <div>\r\n      <p>Count: {count}</p>\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default function App() {\r\n  return (\r\n    <Suspense fallback={<div>Loading...</div>}>\r\n      <Counter />\r\n    </Suspense>\r\n  )\r\n}\r\n```",
          "@usualoma \r\n\r\nThanks! I would like to do the following.\r\n\r\n* Server and client use the same AsyncComponent.\r\n* The server returns AsyncComopent without waiting. In this case, it returns the contents of the `Suspense` fallback.\r\n* Client displays the contents of the fallback until the Promise is resolved, then displays it resolved.\r\n\r\nIn the following code, the application waits 2 seconds on the server side for the first access and then waits 2 seconds on the client. On the second and after, the app waits 2 seconds on the client only.\r\n\r\nWhat I'm expecting is this \"behavior after the second time\". This means that the client only waits 2 seconds, and the server does not wait  - In actuality, my ideal is - the server returns the contents of the fallback, and the client also initially renders the fallback (as *hydration*) and then shows the contents from the client after 2 seconds.\r\n\r\n```tsx\r\n// component.tsx\r\nimport { use } from 'hono/jsx/hooks'\r\n\r\nconst promise = new Promise((resolve) => setTimeout(resolve, 2000))\r\n\r\nexport default function Component() {\r\n  use(promise)\r\n  return <p>Done!</p>\r\n}\r\n```\r\n\r\n```tsx\r\n// server.tsx\r\napp.get('/', (c) => {\r\n  return c.render(\r\n    <div id=\"target\">\r\n      <Suspense fallback={'on server...'}>\r\n        <Component />\r\n      </Suspense>\r\n    </div>\r\n  )\r\n})\r\n```\r\n\r\n```tsx\r\n// client.tsx\r\ndocument.addEventListener('DOMContentLoaded', function () {\r\n  const target = document.getElementById('target')\r\n  render(\r\n    <Suspense fallback={'on client...'}>\r\n      <Component />\r\n    </Suspense>,\r\n    target\r\n  )\r\n})\r\n```\r\n\r\nhttps://github.com/honojs/hono/assets/10682/d26f4327-de32-4d07-b94a-eec005c11d06\r\n\r\nThis behavior is expected according to the specification. Therefore, it may not be necessary to change it. However, I cannot realize what I want to do. What do you think about this matter? Or do I expect the wrong things? I'm sorry to bother you.\r\n",
          "Or it may be better to separate the roles of the server and client components as follows:\r\n\r\n* Handling AsyncComponent with Suspense - e.g. fetch external resources => Server Components\r\n* Build a UI with interactions => Client Components\r\n\r\nA quick search shows that Next.js has a similar approach.",
          "@usualoma \r\n\r\nI'm sorry. Please ignore what I have written above!\r\n\r\nIt is a very rare case that this server and client reference the same AsynComponent and SSR that hydrates it. I think it is not used very often (especially in the file-based routing framework we are trying to create) and should not be recommended.\r\n\r\nI will merge if you are OK!",
          "@yusukebe \r\nThanks for checking!\r\nLet's follow up on any improvements that need to be made. As for this PR, I am fine to have this merged.",
          "Yeah! I'll merge this now."
        ]
      },
      {
        "pr_number": 1989,
        "title": "refactor: faster for loop",
        "body": "For loop use the length of the array cached first.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1989",
        "comments": [
          "@EdamAme-x \r\n\r\nThanks! I think this is a good improvement. Merge now."
        ]
      },
      {
        "pr_number": 1984,
        "title": "feat!(cloudflare-workers): make `manifest` required",
        "body": "Fixes #1127 #1093\r\n\r\nThis is the same as #1804 by @Code-Hex .\r\n\r\nWith this PR, if you use the Cloudflare Workers adapter's `serve-static`, you should specify the `manifest` option.\r\n\r\n```ts\r\nimport manifest from '__STATIC_CONTENT_MANIFEST'\r\n\r\n// ...\r\n\r\napp.use('/static/*', serveStatic({ root: './assets', manifest }))\r\n```\r\n\r\nThis avoids a compile error if there is an import of \"`__STATIC_CONTENT_MANIFEST`\" in Hono core's code.\r\n\r\nThis is a BREAKING CHANGE, so we need to write the migration instructions in the migration guide.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1984",
        "comments": [
          "Hi @Code-Hex !\r\n\r\nTo resolve conflicts and follow the latest branch, I have created another PR. I am making you a co-author. Please review this!",
          "Okay! Let's goooo!"
        ]
      },
      {
        "pr_number": 1994,
        "title": "chore: enables lint and format for `.tsx`",
        "body": "### Author should do the followings, if applicable\r\n\r\nEnabled prettier and eslint for `.tsx` as they were not enabled before.\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1994",
        "comments": []
      },
      {
        "pr_number": 1986,
        "title": "feat(jsx/dom): provide jsx-runtime and jsx-dev-runtime via jsx/dom",
        "body": "This PR is a continuation of #1981. The following two commits have been added so far.\r\n* 3a91643a231d6f8e9f898b1ef71373eeac7ebfa4\r\n* d1c9b1bdcfae637c00ab4528aa88d5b461038868\r\n\r\nIf `\"jsxImportSource\": \"hono/jsx\"` is specified, all the stringify code will be included and it will become large, so this can be excluded.\r\n\r\nEven if you bundle code that includes Suspense and ErrorBoundary, it will still be able to fit in about 4Kb.\r\n\r\n```\r\n$ npx esbuild --minify --minify-syntax --tree-shaking=true --bundle dom2.tsx | wc\r\n       1      98    4256\r\n```\r\n\r\n```ts\r\n/** @jsxRuntime automatic @jsxImportSource ./src/jsx/dom */\r\nimport { Suspense, ErrorBoundary } from './src/jsx/dom'\r\nimport { render } from './src/jsx/dom'\r\nimport { use } from './src/jsx/hooks'\r\n\r\nconst promise = new Promise<number>((resolve) => setTimeout(() => resolve(1), 1000))\r\nconst UseComponent = () => {\r\n  const num = use(promise)\r\n  return <div>{num}</div>\r\n}\r\n\r\nconst rejectedPromise = new Promise<number>((_, reject) => setTimeout(() => reject(1), 1000))\r\nconst ErrorComponent = () => {\r\n  const num = use(rejectedPromise)\r\n  return <div>{num}</div>\r\n}\r\n\r\nexport const App = () => {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <div>\r\n          <Suspense fallback={<div>Loading...</div>}>\r\n            <div>\r\n              <h3>UseComponent</h3>\r\n              <UseComponent />\r\n            </div>\r\n          </Suspense>\r\n\r\n          <ErrorBoundary fallback={<div>error</div>}>\r\n            <Suspense fallback={<div>Loading...</div>}>\r\n              <div>\r\n                <h3>ErrorComponent</h3>\r\n                <ErrorComponent />\r\n              </div>\r\n            </Suspense>\r\n          </ErrorBoundary>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nrender(<App />, document.getElementById('root'))\r\n```\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1986",
        "comments": [
          "Hi @usualoma \r\n\r\nThis is super cooool!\r\n\r\nIf we are using Vite, we can specify the JSX runtime for the build  in the config file:\r\n\r\n```ts\r\nimport { defineConfig } from 'vite'\r\nimport devServer from '@hono/vite-dev-server'\r\n\r\nexport default defineConfig(({ mode }) => {\r\n  if (mode === 'client') {\r\n    return {\r\n      build: {\r\n        minify: true,\r\n        rollupOptions: {\r\n          input: ['./app/client.tsx'],\r\n          output: {\r\n            entryFileNames: 'static/client.js'\r\n          }\r\n        }\r\n      },\r\n      esbuild: {\r\n        jsxImportSource: 'hono/jsx/dom' // <=== specify `hono/jsx/dom` for the client\r\n      }\r\n    }\r\n  } else {\r\n    return {\r\n      ssr: {\r\n        noExternal: true\r\n      },\r\n      build: {\r\n        minify: true,\r\n        ssr: './_worker.ts'\r\n      },\r\n      plugins: [\r\n        devServer({\r\n          entry: './app/server.tsx'\r\n        })\r\n      ]\r\n    }\r\n  }\r\n})\r\n```\r\n\r\nThen, it will be ultra small:\r\n\r\n<img width=\"1070\" alt=\"Screenshot 2024-01-15 at 23 54 55\" src=\"https://github.com/honojs/hono/assets/10682/6f35af27-2916-41c2-a50b-f4118ea55045\">\r\n\r\nThe counter sample is now 2.3KB from 3.6KB with Brotli compression!\r\n\r\nDemo: https://9fe4615e.hono-jsx-front-poc.pages.dev/\r\n\r\nIf we merge #1981, add this PR to v4!",
          "Btw, a Preact app is 5.7KB.\r\n\r\n<img width=\"1113\" alt=\"Screenshot 2024-01-16 at 0 18 47\" src=\"https://github.com/honojs/hono/assets/10682/335429f3-dd3d-4058-bdea-2889cfe36a3a\">\r\n\r\n\r\nhttps://5436b56a.hono-jsx-front-poc.pages.dev/",
          "Hi, @yusukebe \r\n\r\nAdditional testing has been completed.\r\nI am also making changes to the `npm test` and would appreciate a review.",
          "Hi @usualoma \r\n\r\nThanks. First, please merge the upstream to resolve the conflict. I'll check it later.",
          "@yusukebe resolved!",
          "@usualoma \r\n\r\nThanks! I've left one comment. Check it.",
          "@yusukebe \r\nOops, fix typo in [5ac6b00](https://github.com/honojs/hono/pull/1986/commits/5ac6b00f6e8fadaeaf493087a43d662c708d28eb)",
          "@usualoma \r\n\r\nThanks. Merge now!"
        ]
      },
      {
        "pr_number": 1995,
        "title": "fix(types): correct `c.get()` inference",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1995",
        "comments": ["We can go with this."]
      },
      {
        "pr_number": 1996,
        "title": "feat(jsx/dom): startTransition() and useTransition()",
        "body": "#1986 + [abb62fa](https://github.com/honojs/hono/pull/1996/commits/abb62fa15b9a7414d27a0ab82f303c6ab041c60a)\r\n\r\nThis PR provides `startTransition()` and `useTransition()` hook\r\n\r\nI wrote the following example app based on the following site.\r\n\r\n* https://react.dev/reference/react/useTransition\r\n* https://zenn.dev/uhyo/books/react-concurrent-handson-2/viewer/use-starttransition\r\n\r\n```ts\r\nimport { Suspense } from './src/jsx/dom'\r\nimport { render } from './src/jsx/dom'\r\nimport { useState, startTransition, useTransition } from './src/jsx/hooks'\r\n\r\nlet sleeping: boolean = true\r\nconst Sleep1s = () => {\r\n  if (sleeping) {\r\n    throw new Promise<void>((resolve) =>\r\n      setTimeout(() => {\r\n        sleeping = false\r\n        resolve()\r\n      }, 1000)\r\n    )\r\n  }\r\n  return <p>Hello!</p>\r\n}\r\n\r\nfunction SleepApp() {\r\n  const [sleepIsShown, setSleepIsShown] = useState(false)\r\n  return (\r\n    <div>\r\n      <Suspense fallback={<p>Loading...</p>}>{sleepIsShown ? <Sleep1s /> : null}</Suspense>\r\n      <p>\r\n        <button\r\n          className='border p-1'\r\n          onClick={() => {\r\n            startTransition(() => {\r\n              setSleepIsShown(true)\r\n            })\r\n          }}\r\n        >\r\n          Show Sleep1s\r\n        </button>\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst HeavyContent = ({ count }) => {\r\n  const startTime = performance.now()\r\n  while (performance.now() - startTime < 1000) {}\r\n  return <div>HeavyContent!!! {count}</div>\r\n}\r\n\r\nconst Transition = () => {\r\n  const [isPending, startTransition] = useTransition()\r\n  const [count, setCount] = useState(0)\r\n  const [showHeavy, setShowHeavy] = useState(false)\r\n  return (\r\n    <div>\r\n      <button\r\n        onClick={() => {\r\n          startTransition(() => {\r\n            setShowHeavy(true)\r\n            setCount((c) => c + 1)\r\n          })\r\n        }}\r\n      >\r\n        {isPending ? 'Pending...' : 'Click me'}\r\n      </button>\r\n      {showHeavy && (\r\n        <button\r\n          onClick={() => {\r\n            setShowHeavy(false)\r\n          }}\r\n          style=\"margin-left: 10px;\"\r\n        >\r\n          Hide HeavyContent\r\n        </button>\r\n      )}\r\n      <div>{showHeavy ? isPending ? '...' : <HeavyContent count={count} /> : count}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const App = () => {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <div>\r\n          <h3>startTransition with Suspense</h3>\r\n          <SleepApp />\r\n\r\n          <h3>useTransition</h3>\r\n          <Transition />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\nhttps://github.com/honojs/hono/assets/30598/aa611eec-a321-4c9e-880b-553b96be4979\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1996",
        "comments": [
          "@yusukebe rebased and add `useDeferredValue()` at 8d3ddb1\r\nMy work on this PR is complete.",
          "@usualoma \r\n\r\nCool! I've tried and confirmed that these work fine. I'll merge this now."
        ]
      },
      {
        "pr_number": 1997,
        "title": "refactor(jsx): export components and hook function from top level 'hono/jsx'",
        "body": "+ 15204380da15ef4ffea341475da3f22d7a7c56e1\r\n\r\nUp to this point, hook functions have been exported from \"hono/jsx/hooks\", but today, when tree shaking is commonplace, there is little motivation to separate export source modules.\r\nIt would be better if all JSX-related components and hook functions could be imported from \"hono/jsx\".\r\n\r\n```ts\r\nimport {\r\n  Suspense,\r\n  ErrorBoundary,\r\n  useState,\r\n  useEffect,\r\n  useRef,\r\n  useCallback,\r\n  use,\r\n  startTransition,\r\n  useTransition,\r\n} from 'hono/jsx'\r\nimport type { RefObject } from 'hono/jsx'\r\n```\r\n\r\nAs for dom-related or dom-specific items, they can continue to be imported as follows.\r\n\r\n```ts\r\nexport { render, Suspense, ErrorBoundary } from 'hono/jsx/dom'\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1997",
        "comments": [
          "Hi @usualoma \r\n\r\nI think this is a good improvement. With our Hono, it's important to make it \"easy\".\r\n\r\nWhen ready, I'll merge!",
          "Reapply \"refactor(jsx): export components and hook function from top level 'hono/jsx'\" at 0fb71c6\r\nAnd adds some minor refactoring.\r\n\r\nThis completes the work on this PR.",
          "@usualoma \r\n\r\nThanks! Merging now."
        ]
      },
      {
        "pr_number": 1990,
        "title": "feat(ssg): Ignore Dynamic Route",
        "body": "Resolves https://github.com/honojs/hono/issues/1966\r\n\r\nWe have added an implementation that excludes certain types of routes - specifically, wildcard, path parameters, and regex-based routing - from the SSG (Static Site Generation) process.\r\n\r\nIt's important to note that this does not take into account the ssgParams middleware. Depending on the timing of the merge, we can include support for this middleware in this PR if necessary.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1990",
        "comments": [
          "Let's complete this PR first, and merge it into v4. I left a comment; please take a look.",
          "Hi @watany-dev \r\n\r\nI've merged #1960 into v4 now, but the CI fails:\r\n\r\nhttps://github.com/honojs/hono/actions/runs/7553089110/job/20563202188\r\n\r\nI think `isDynamicRoute` causes the mismatch. Could you see it?\r\n",
          "@yusukebe \n\nIn the short term, revert my commits and it will be cured.\nIf I fix this, I will need to maintain hono/dev and identify the route where ssgparam is set and do some additional processing. This will take a bit of time."
        ]
      },
      {
        "pr_number": 1960,
        "title": "feat: Added `ssgParams` middleware",
        "body": "I added `ssgParams` middleware.\r\nThis is implemented https://github.com/honojs/hono/pull/1904#issuecomment-188809839.\r\n\r\nThere is 2 changes.\r\n\r\n#### 1. API like `generateStaticPaths`.\r\nYou can use API like `generateStaticPaths`.\r\nExample:\r\n```tsx\r\nimport { Hono } from 'hono'\r\nimport { toSSG, ssgParams } from 'hono/ssg'\r\nimport * as fs from 'fs/promises'\r\n\r\napp.get('/', c => c.html(<h1>Top page</h1>))\r\napp.get('/post/:id', ssgParams([{ id: '1' }]), c => c.html(<h1>{c.req.params('id')}</h1>)\r\n\r\nawait toSSG(app, fs)\r\n```\r\n#### 2. Switching SSR/SSG\r\nYou can add No-SSG routes such as:\r\n```tsx\r\nimport { Hono } from 'hono'\r\nimport { toSSG, ssgParams } from 'hono/ssg'\r\nimport * as fs from 'fs/promises'\r\n\r\napp.get('/', c => c.html(<h1>Top page</h1>)) // SSG\r\napp.get(\r\n  '/api',\r\n  ssgParams(false), // Don't SSG\r\n  c => c.json({ status: 'ok' })\r\n) \r\n\r\nawait toSSG(app, fs)\r\n```\r\nThis code is SSG-based mode like [Astro hybrid mode](https://docs.astro.build/en/guides/server-side-rendering/#enable-on-demand-server-rendering).\r\n\r\nNot only this code, you can use SSR-Based mode.\r\n```tsx\r\nimport { Hono } from 'hono'\r\nimport { toSSG, ssgParams } from 'hono/ssg'\r\nimport * as fs from 'fs/promises'\r\n\r\napp.get('/',\r\n  ssgParams(true), // SSG\r\n  c => c.html(<h1>Top page</h1>)\r\n) // SSG\r\n// Or, this code also works.\r\napp.get('/post/:id', ssgParams([{ id: '1' }]), c => c.html(<h1>{c.req.params('id')}</h1>))\r\n\r\napp.get(\r\n  '/api',\r\n  c => c.json({ status: 'ok' })\r\n) // This route will not generate SSG files. `toSSG` don't generate route if not explicitly specified.\r\n\r\nawait toSSG(app, fs, { default: 'ssr' })\r\n```\r\n\r\nHereby, you can write code to combine both SSG and SSR such as:\r\n```tsx\r\n// dev.tsx\r\nimport { Hono } from 'hono'\r\nimport { ssgParams } from 'hono/ssg'\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/', ssgParams(true), c => c.html(<h1>Hello world!</h1>)) // Top page is static.\r\napp.get('/api/random', c => c.json({ result: Math.random() })) // API is dynamic.\r\n\r\nexport default app\r\n```\r\n```tsx\r\n// prediction.ts\r\nimport { Hono } from 'hono'\r\nimport app from './dev'\r\n\r\nconst mainApp = new Hono()\r\nmainApp.use('*', serveStatic({ root: 'static' }))\r\nmainApp.route('/', app)\r\n\r\nexport default app\r\n```\r\n```tsx\r\n// build.ts\r\nimport { Hono } from 'hono'\r\nimport app from './dev'\r\nimport { toSSG, ssgParams } from 'hono/ssg'\r\nimport * as fs from 'fs/promises'\r\n\r\ntoSSG(app, fs, { default: 'ssr' })\r\n```\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1960",
        "comments": [
          "@nakasyou \r\n\r\nSeems to be good. If it's ready for reviewing, please let me know!",
          "@yusukebe Thanks!\r\nYou can review now, so please review this code. ",
          "I think it would be better to separate the generateStaticPaths and the hybrid SSR/SSG middleware. At least to me, the interface seems too complex.\n\nFor the latter middleware, it might be good to simplify by just using a flag like isSSG() or isSSG/isSSR. However, I haven't read the underlying implementation of Astro, so these opinions might not be correct:)",
          "Hi @nakasyou \r\n\r\nFor this PR, I created a simple application and used this feature before reviewing the code.\r\n\r\nRepo: https://github.com/yusukebe/hono-ssg-example/tree/ramen\r\nDemo: https://3282047d.hono-ssg.pages.dev/\r\n\r\nFeeling of using `ssgParams` was great! For example, here is the code:\r\n\r\n```tsx\r\napp.get(\r\n  '/shops/:id',\r\n  ssgParams(async () => {\r\n    const shops = await getShops()\r\n    return shops.map((shop) => ({ id: shop.id }))\r\n  }),\r\n  async (c) => {\r\n    const shop = await getShop(c.req.param('id'))\r\n    if (!shop) {\r\n      return c.notFound()\r\n    }\r\n    return c.render(\r\n      <div>\r\n        <h1>{shop.name}</h1>\r\n      </div>\r\n    )\r\n  }\r\n)\r\n```\r\n\r\nHowever, as @watany-dev says, it seems complicated to include \"hybrid SSR/SSG middleware\" things in this feature. It seems unnatural to accept a boolean as an argument to `ssgParams()`.\r\n\r\nI think it would be good to implement only the \"generateStaticPaths function\" in this PR, and propose SSG/SSR switching in another PR.\r\n",
          "@watany-dev @yusukebe \r\n> I think it would be better to separate the generateStaticPaths and the hybrid SSR/SSG middleware. At least to me, the interface seems too complex.\r\n\r\n> However, as @watany-dev says, it seems complicated to include \"hybrid SSR/SSG middleware\" things in this feature. It seems unnatural to accept a boolean as an argument to ssgParams().\r\n\r\nI think so after I thought again.\r\nCertainly, to separate staticPaths API and hybrid API is quite understandable.\r\nSo I'll make other PR.",
          "@watany-dev @yusukebe\r\nI removed feature for switching SSR/SSG.\r\nI'll make other PR to add API like `isSSG`.",
          "Speaking of which, have you decided on ssgParams as the name of the middleware? I feel like there is a name that is more in line with the actual situation than the original multiple function params, and it may be okay to keep it as it is.",
          "ssgPrams is middleware, but it is exported from `hono/ssg`, so I think \"**SSG Helper**\" should be the \"common name\".",
          "Hi @nakasyou \r\n\r\nI've left the comment about testing. Please check it and resolve the conflicts.",
          "@yusukebe\r\nThank you for review.\r\nI added that test code, and resolve conflicts.\r\n",
          "@nakasyou \r\n\r\nThanks! Let's land it."
        ]
      },
      {
        "pr_number": 2006,
        "title": "fix(ssg): fixed `isDynamicRoute` and `ssgParams` matter",
        "body": "When introducing `ssgParams()`, tests fail. I've fixed the matter.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2006",
        "comments": [
          "Hi @watany-dev @nakasyou \r\n\r\nI think we can fix the issue with this PR. Could you review?",
          "@nakasyou has not yet reviewed, but I will merge. Thanks!"
        ]
      },
      {
        "pr_number": 1999,
        "title": "feat(jsx/dom): support createContext and useContext in jsx/dom",
        "body": "```ts\r\nimport { createContext, useContext } from 'hono/jsx'\r\n// or dom specific version\r\n// import { createContext, useContext } from 'hono/jsx/dom'\r\n\r\nconst Context = createContext(0)\r\nconst Content = () => {\r\n  const num = useContext(Context)\r\n  return <p>{num}</p>\r\n}\r\nconst Component = () => {\r\n  return (\r\n    <>\r\n      <Context.Provider value={1}>\r\n        <Content />\r\n        <Context.Provider value={3}>\r\n          <Content />\r\n        </Context.Provider>\r\n        <Content />\r\n      </Context.Provider>\r\n    </>\r\n  )\r\n}\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1999",
        "comments": [
          "Hi @usualoma !\r\n\r\nDoes this mean that this `useContext` can be used from both the server and DOM? It works fine, but I am a little reluctant to use `jsx/dom/context.ts` for DOM in the `jsx/index.ts`.  Or do I understand this wrong?",
          "@yusukebe Thanks for pointing that out. I think that is indeed true.\r\n\r\n> Does this mean that this useContext can be used from both the server and DOM?\r\n\r\nYes, it is.\r\n\r\nIn 05e0b5a, I have re-organized the placement of components in files.\r\nHow about this?",
          "@usualoma \r\n\r\n> In 05e0b5a, I have re-organized the placement of components in files.\r\n> How about this?\r\n\r\nThanks! I like this! Let's go with it.",
          "@yusukebe \r\nThanks for confirming.\r\nThe test failing is a HEAD issue on the v4 branch, so I think it is safe to have this PR merged."
        ]
      },
      {
        "pr_number": 2003,
        "title": "refactor(jsx/dom): make `useTransition()` handling more simple",
        "body": "After relearning about TaskQueue and Microtask in JavaScript, I understood that execution by `setTimeout()` does not overtake the first `update()`. There is no need to use `promise` here.\r\nAlso, I don't think a 10ms wait is necessary.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2003",
        "comments": []
      },
      {
        "pr_number": 2167,
        "title": "v4",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/2167",
        "comments": ["The time has come. Let's go!"]
      },
      {
        "pr_number": 2014,
        "title": "chore(package.json): specify the config in `test:deno`",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2014",
        "comments": []
      },
      {
        "pr_number": 2015,
        "title": "chore(runtime-test): add `deno.lock`",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2015",
        "comments": []
      },
      {
        "pr_number": 2167,
        "title": "v4",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/2167",
        "comments": ["The time has come. Let's go!"]
      },
      {
        "pr_number": 2017,
        "title": "fix(jsx/dom): find \"insertBefore\" node from next node list if not found",
        "body": "Fixes #2016\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2017",
        "comments": ["@yusukebe Would you please review?"]
      },
      {
        "pr_number": 2021,
        "title": "feat!: validator throws error rathar than `return c.json()`",
        "body": "Fixes #1441\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2021",
        "comments": []
      },
      {
        "pr_number": 2012,
        "title": "refactor(ssg): Removal of Libraries Dependent on Node.js",
        "body": "These modifications were made to eliminate the dependency on Node.js. \r\n\r\n- Changes in the fs for the Bun Adaptor.\r\n- Revision of the Buffer type.\r\n- Changed to 'toDenoSSG', 'toBunSSG' for each adapter to address duplicate naming of toSSG for deno.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2012",
        "comments": [
          "Hi @watany-dev !\r\n\r\nThanks for the PR.\r\n\r\nI think you can use `@types/bun` instead of `bun.d.ts` for only types matter. In the core of Hono, you are not allowed to use specific platform types. However, in this case, it is an adapter for Bun, so you may use it.\r\n\r\nActually, I think you can install `@types/bun` as `devDependencies` and write triple slash directives in `ssg.ts`.\r\n\r\n```ts\r\n/// <reference types=\"bun\" />\r\n```",
          "@yusukebe \r\nI am having trouble writing RuntimeTest because I am not familiar with Deno. Is there any chance you could confirm how to write it for me since I am not in a hurry?",
          "Hi @watany-dev !\r\n\r\nI made CI pass!",
          "Thanks for the great job!!! We will deal with the rest!",
          "@yusukebe \r\nSorry for being so careless. I have reverted the name of the comment.",
          "Thanks. Merge now!"
        ]
      },
      {
        "pr_number": 2027,
        "title": "feat!(deno): move middleware to helper",
        "body": "This may also need to be noted in the Migration Guide.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2027",
        "comments": [
          "@watany-dev \r\n\r\nThanks! I've renamed the title. I'll merge it now."
        ]
      },
      {
        "pr_number": 2029,
        "title": "fix(SSG): Correct extension of the file output",
        "body": "fixed https://github.com/honojs/hono/issues/2028\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2029",
        "comments": ["@watany-dev \r\n\r\nGreat! Merge now."]
      },
      {
        "pr_number": 2020,
        "title": "feat(jsx/dom): Introduce startViewTransition()",
        "body": "### Included in this PR\r\n\r\n* Introduce `startViewTransition()`\r\n* Partial support for `<Style />`\r\n\r\n### `startViewTransition()`\r\n\r\nThis is an API not found in the original React.\r\nThe usage of this API is the same as the existing `startTransition()`, with state updates wrapped and passed as callback\r\n\r\n#### Is this API something that is needed?\r\n\r\nIf you simply want to use `document.startViewTransition()`, you can do so by writing the following, although it is a bit long.\r\n\r\n```ts\r\n<button onClick={() => {\r\n  if (!document.startViewTransition) {\r\n    setCount((c) => c + 1)\r\n  }\r\n  else {\r\n    document.startViewTransition(() => {\r\n      setCount((c) => c + 1)\r\n    });\r\n  }\r\n}}>\r\n  {count}\r\n</button>\r\n```\r\n\r\nReplacing this with the `startViewTransition()` provided by hono here has the following two advantages.\r\n\r\n* Can be written in short\r\n* Transition can be applied to fallback by `Suspense` and subsequent delayed rendering.\r\n\r\n```ts\r\n<button onClick={() => {\r\n  startViewTransition(() => {\r\n    setCount((c) => c + 1)\r\n  });\r\n}}>\r\n  {count}\r\n</button>\r\n```\r\n\r\n#### Restrictions\r\n\r\nCurrently, it cannot be used with `useTransition()` at the same time. However, I am considering making it possible to use it at the same time in subsequent PRs.\r\n\r\n### Partial support for `<Style />`\r\n\r\n`<Style />` is not likely to be rendered dom in a production environment, but it is useful in a demo environment, so I partially supported it. API for passing global CSS to children is not yet supported.\r\n\r\n### Demo\r\n\r\nhttps://github.com/honojs/hono/assets/30598/7ffecf98-3c5b-4433-9655-00b27538fc8d\r\n\r\n```ts\r\nimport { Style, css } from './src/helper/css'\r\nimport { render, Suspense } from './src/jsx/dom'\r\nimport { useState, startViewTransition, use } from './src/jsx/hooks'\r\n\r\nconst imagePromise = new Map<string, Promise<string>>()\r\nconst loadImage = (src: string) => {\r\n  if (!imagePromise.has(src)) {\r\n    imagePromise.set(\r\n      src,\r\n      new Promise((resolve) => {\r\n        ;(async () => {\r\n          await new Promise((resolve) => setTimeout(resolve, 1000))\r\n          const image = new window.Image()\r\n          image.onload = () => resolve(src)\r\n          image.src = src\r\n        })()\r\n      })\r\n    )\r\n  }\r\n  return imagePromise.get(src) as Promise<string>\r\n}\r\n\r\nconst ThumbnailImage = () => <img src='https://avatars.githubusercontent.com/u/98495527' />\r\nconst OriginalImage = () => {\r\n  const image = use(\r\n    loadImage('https://github.com/honojs/hono/blob/main/docs/images/hono-logo.png?raw=true')\r\n  )\r\n  return (\r\n    <div\r\n      class={css`\r\n        background: url('${image}');\r\n        background-size: contain;\r\n        background-repeat: no-repeat;\r\n        background-position: center;\r\n        width: 600px;\r\n        height: 600px;\r\n      `}\r\n    />\r\n  )\r\n}\r\n\r\nconst Image = () => {\r\n  const [showOriginalImage, setShowOriginalImage] = useState(false)\r\n  return (\r\n    <div\r\n      onClick={() => startViewTransition(() => setShowOriginalImage(!showOriginalImage))}\r\n      class={css`\r\n        img,\r\n        div {\r\n          view-transition-name: image;\r\n        }\r\n      `}\r\n    >\r\n      {showOriginalImage ? (\r\n        <Suspense\r\n          fallback={\r\n            <div\r\n              class={css`\r\n                width: 600px;\r\n                height: 600px;\r\n                display: flex;\r\n                justify-content: center;\r\n                align-items: center;\r\n                background-image: url('https://avatars.githubusercontent.com/u/98495527');\r\n                background-size: contain;\r\n                background-repeat: no-repeat;\r\n                background-position: center;\r\n                background-color: rgba(255, 255, 255, 0.5);\r\n                background-blend-mode: lighten;\r\n              `}\r\n            >\r\n              Loading...\r\n            </div>\r\n          }\r\n        >\r\n          <OriginalImage />\r\n        </Suspense>\r\n      ) : (\r\n        <ThumbnailImage />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const App = () => {\r\n  return (\r\n    <>\r\n      <Style />\r\n      <div>\r\n        <div>\r\n          <div>\r\n            <Image />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nrender(<App />, document.getElementById('root'))\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2020",
        "comments": [
          "Hi @usualoma !\r\n\r\nThis is a super cool feature!\r\n\r\nThis is not directly related to this, but I was playing with this feature and noticed that `keyframes` works on the DOM?\r\n\r\n",
          "Anyway. This PR is great and completed. I will merge this now."
        ]
      },
      {
        "pr_number": 2167,
        "title": "v4",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/2167",
        "comments": ["The time has come. Let's go!"]
      },
      {
        "pr_number": 2032,
        "title": "fix(ssg): Remove ArrayBuffer from FileSystemModule's writeFile",
        "body": "fixes: https://github.com/honojs/hono/issues/2031\r\n \r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2032",
        "comments": ["Thanks!"]
      },
      {
        "pr_number": 2036,
        "title": "refactor(jsx/dom): invoke update() in microtask",
        "body": "This PR contains two refactorings, and fixes. This is the last PR regarding \"jsx/dom\" for v4 and is intended to be a feature freeze. (Continue to fix bugs and support CSS helpers.)\r\n\r\n### refactor(jsx/dom): invoke update() in microtask\r\n\r\nThis improves the following two issues\r\n\r\n* Multiple updates of stete in a single callback will now invoke `update()` only once.\r\n    * https://github.com/honojs/hono/compare/v4...usualoma:hono:feat/jsx-dom-render-in-microtask?expand=1#diff-8f050239e20450fd8425feb7efbda60df851ebbc32bec8139d6d9ad1b53a7bc0R189-R217\r\n* `useTransition` and `startViewTransition` can be used at the same time.\r\n\r\n```ts\r\n/** @jsxRuntime automatic @jsxImportSource ./src/jsx/dom */\r\nimport { render } from './src/jsx/dom'\r\nimport { useState, useTransition, startViewTransition } from './src/jsx/hooks'\r\n\r\nconst HeavyContent = ({ count }) => {\r\n  const startTime = performance.now()\r\n  while (performance.now() - startTime < 1000) {}\r\n  return <div>HeavyContent!!! {count}</div>\r\n}\r\n\r\nconst Transition = () => {\r\n  const [isPending, startTransition] = useTransition()\r\n  const [count, setCount] = useState(0)\r\n  const [showHeavy, setShowHeavy] = useState(false)\r\n  return (\r\n    <div>\r\n      <button\r\n        onClick={() => {\r\n          startViewTransition(() => {\r\n            startTransition(() => {\r\n              setShowHeavy(true)\r\n              setCount((c) => c + 1)\r\n            })\r\n          })\r\n        }}\r\n      >\r\n        {'Click me'}\r\n      </button>\r\n      {showHeavy && (\r\n        <button\r\n          onClick={() => {\r\n            startViewTransition(() => {\r\n              setShowHeavy(false)\r\n            })\r\n          }}\r\n          style='margin-left: 10px;'\r\n        >\r\n          Hide HeavyContent\r\n        </button>\r\n      )}\r\n      <div>{showHeavy ? isPending ? '...' : <HeavyContent count={count} /> : count}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const App = () => {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <div>\r\n          <h3>useTransition</h3>\r\n          <Transition />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nrender(<App />, document.getElementById('root'))\r\n```\r\n\r\nhttps://github.com/honojs/hono/assets/30598/c92a6f61-2246-44c8-ad36-df81680e8eee\r\n\r\n#### fix(jsx/dom): should not render removed node\r\n\r\nStable behavior when Suspense is shown and hidden repeatedly in a short period of time.\r\n\r\nhttps://github.com/honojs/hono/compare/v4...usualoma:hono:feat/jsx-dom-render-in-microtask?expand=1#diff-00be452f071d90d2904b8acdd0b15dc607fee092c4545b38387e2f52a6eba35fR95-R131\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2036",
        "comments": [
          "Hi @usualoma !\r\n\r\nLooks good! I'll merge this.\r\n\r\n> This is the last PR regarding \"jsx/dom\" for v4 and is intended to be a feature freeze. (Continue to fix bugs and support CSS helpers.)\r\n\r\nYeah. Let's go with the features for v4."
        ]
      },
      {
        "pr_number": 2001,
        "title": "feat: introduce Accepts Helper",
        "body": "### Author should do the followings, if applicable\r\n\r\nResolve #1792 \r\nResolve #1897 \r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2001",
        "comments": [
          "Hi, @yusukebe. I tried to implement the accept helper!",
          "Hi @sor4chi \r\n\r\nAlmost looks good. But, I want you to write some code using real apps like this:\r\n\r\n```ts\r\nconst app = new Hono()\r\n\r\napp.get('/', (c) => {\r\n  const result = matchAccept(c, {})\r\n  return c.json({\r\n    result,\r\n  })\r\n})\r\n\r\nconst res = await app.request('/', {\r\n  headers: {\r\n    //...\r\n  },\r\n})\r\n\r\nexpect(res.json()).toEqual({})\r\n```",
          "These are proxy usecases\r\n\r\n```ts\r\napp.get(\"*\", async (c) => {\r\n  const encoding = matchAccept(c, {\r\n    header: \"Accept-Encoding\",\r\n    supports: [\"gzip\", \"deflate\"],\r\n    default: \"identity\",\r\n  });\r\n  const res = await fetch(`${ORIGIN_URL}/${c.req.path}`, c.req.raw);\r\n\r\n  if (encoding === \"gzip\") {\r\n    return res.body?.pipeThrough(new CompressionStream(\"gzip\"));\r\n  }\r\n\r\n  if (encoding === \"deflate\") {\r\n    return res.body?.pipeThrough(new CompressionStream(\"deflate\"));\r\n  }\r\n\r\n  return res;\r\n});\r\n\r\napp.get(\"*\", (c) => {\r\n  const supportedLangs = [\"en\", \"ja\", \"zh\"];\r\n  const lang = matchAccept(c, {\r\n    header: \"Accept-Language\",\r\n    supports: supportedLangs,\r\n    default: \"en\",\r\n  });\r\n\r\n  const isLangedPath = supportedLangs.some((l) => c.req.path.startsWith(`/${l}`));\r\n  if (isLangedPath) {\r\n    return fetch(c.req.raw);\r\n  }\r\n\r\n  return c.redirect(`${ORIGIN_URL}/${lang}${c.req.path}`)\r\n})\r\n```",
          "@sor4chi \r\n\r\nThanks. Could you add tests that are using `app` like the code?",
          "@yusukebe Alright, added!",
          "@sor4chi \r\n\r\nGreat work! Last thing. Please remove the warnings by linter.",
          "@sor4chi \r\n\r\nIs this ready?",
          "@yusukebe yes, please.",
          "@sor4chi \r\n\r\nI've commented about naming. Check it!",
          "@yusukebe Thank you for reviewing, fixed it!",
          "Okay! Let's land it. Thanks for contributing.",
          "Hi @sor4chi !\r\n\r\nCould you write the website document for this Accepts Helper?"
        ]
      },
      {
        "pr_number": 2024,
        "title": "feat: improve `ssgParams` flexibility",
        "body": "### Author should do the followings, if applicable\r\n\r\nContext Env generics support for `ssgParams` middleware.\r\nuse a simple array for `ssgParams` middleware's argument.\r\n\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2024",
        "comments": [
          "There may be another way to do the `ssgParams` types, so please wait.",
          "I see.",
          "@yusukebe Thanks, I fixed!",
          "@sor4chi \r\n\r\nI've commented. If you want to pass an array to `ssgParams`, can you write tests for it?",
          "@yusukebe \r\nSorry, I forgot about that.\r\nI just added it!",
          "Thanks. Merge now."
        ]
      },
      {
        "pr_number": 2040,
        "title": "refactor(types): name them `BlankSchema` or `BlankInput`",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2040",
        "comments": []
      },
      {
        "pr_number": 2041,
        "title": "feat(deno): export accpet helper for deno",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2041",
        "comments": []
      },
      {
        "pr_number": 1916,
        "title": "docs: Add JSDoc",
        "body": "close #1338\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1916",
        "comments": [
          "good\r\nI want to help with this PR",
          "Thanks @EdamAme-x, but this work is almost done and I need your help to make the API docs better!",
          "I've added a few things i think need",
          "@EdamAme-x please make PR  (to nabeken5/hono).\r\n\r\nIt looks fine to me, so I'll open it.\r\n@yusukebe  Please check.",
          "hi @nabeken5 \r\nI'm usually using codespaces to do the work because I'm using **Windows** and **storage issues**.\r\nI'll try to add  new PullRequest next (next month) time since codespace's no longer available this month.",
          "hi @EdamAme-x \r\nI want to move this PR as fast as we can.\r\nI don't know much about it, but maybe using other 3rd-party apps like [Gitpod](https://www.gitpod.io/) or [CodeSandbox](https://codesandbox.io/) would help?\r\n(I've used CodeSandbox and recommend it because you can SSH from a local VSCode)",
          "thanks.\nideally, it would be preferable for u to finish the task without worrying about me. It will likely take some time to complete, as there are other tasks to be done as well.",
          "hi @nabeken5 \r\ni created PullRequest to your branch.\r\nhttps://github.com/nabeken5/hono/pull/1",
          "ready to go\ud83e\udd73",
          "@nabeken5 \r\n\r\nSuper thanks! I'll check this later.",
          "@nabeken5 @EdamAme-x Thanks both! I'd like to merge this PR.\r\n\r\n@nabeken5 \r\n\r\nCould you do the three things for merging?\r\n\r\n1. Resolve the conflicts.\r\n2. `yarn format:fix` to format the code.\r\n3. `yarn denoify` to generate the code for Deno.",
          "We are ready!",
          "@nabeken5 @EdamAme-x Thanks both!\r\n\r\nLet's land it. Merging now!"
        ]
      },
      {
        "pr_number": 2167,
        "title": "v4",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/2167",
        "comments": ["The time has come. Let's go!"]
      },
      {
        "pr_number": 2046,
        "title": "fix!(types): Fix context type when chaining routes with middlewares",
        "body": "Fix https://github.com/honojs/hono/issues/2019.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2046",
        "comments": [
          "Sorry, I forgot to run `yarn format:fix`.",
          "@agatan \r\n\r\nAwesome! Thanks for the hard work!"
        ]
      },
      {
        "pr_number": 2063,
        "title": "refactor: rename accept to accepts",
        "body": "### Author should do the followings, if applicable\r\nhttps://github.com/honojs/hono/issues/2042\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2063",
        "comments": [
          "@EdamAme-x \r\n\r\nGreat! Thanks for handling it. I'll merge this now."
        ]
      },
      {
        "pr_number": 2064,
        "title": "fix: use DOCTYPE by default ",
        "body": "Fixes #2052\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2064",
        "comments": [
          "https://github.com/honojs/hono/issues/2052",
          "@EdamAme-x \r\n\r\nAwesome! Thank you for your contribution."
        ]
      },
      {
        "pr_number": 2056,
        "title": "fix(ssg): Uniformly Convert Paths Ending with Slash to 'index.ext' Format",
        "body": "- before:  `/api/` -> `./static/api/.html`\r\n- after:  `/api/` -> `./static/api/index.html`\r\n\r\n@yusukebe \r\nCurrently, the implementation uniformly converts paths like `/css/` to `/css/index.css`. Considering this, there are two possible approaches to the implementation, and I have chosen the first one:\r\n\r\n1. Treat all paths ending with a slash uniformly as `index.ext`, even for non-HTML files. Those who dislike this approach can use paths like `/css` without the trailing slash.\r\n2. For non-HTML files ending with a slash, complete them as `/css.css`. I did not adopt this approach as it seems counterintuitive\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2056",
        "comments": [
          "@watany-dev \r\n\r\nThanks! It is good. We may have a problem with these path issues, but let's handle it then."
        ]
      },
      {
        "pr_number": 2053,
        "title": "feat: Introduce `useViewTransition()` hook and `viewTransition()` helper",
        "body": "Fixes #2034, #2035\r\n\r\n### Update `startViewTransition()` family\r\n\r\nForgot to mention in the previous PR that `document.startViewTransition()` is currently only available in Google Chrome and Edge.\r\nhttps://caniuse.com/mdn-api_document_startviewtransition\r\n\r\nThis PR adds the following new items\r\n```ts\r\nimport { useViewTransition } from 'hono/jsx'\r\nimport { viewTransition } from 'hono/css'\r\n// or dom-specific version import { viewTransition } from 'hono/jsx/dom/css'\r\n```\r\n\r\nIn the following, we will look at the usage of the `startViewTransition()` family along with these usages.\r\n\r\n#### Easiest example\r\n\r\nSimply call `startViewTransition()` function (not a hook).\r\n\r\n```tsx\r\nimport { startViewTransition } from 'hono/jsx'\r\n\r\nconst Content = () => {\r\n  const [showLargeImage, setShowLargeImage] = useState(false)\r\n  return (\r\n    <>\r\n      <button onClick={() => startViewTransition(() => setShowLargeImage((state) => !state))}>\r\n        Click!\r\n      </button>\r\n      <div>\r\n        {!showLargeImage ? (\r\n          <img src='https://avatars.githubusercontent.com/u/98495527' />\r\n        ) : (\r\n          <div\r\n            class={css`\r\n              background: url('https://github.com/honojs/hono/blob/main/docs/images/hono-logo.png?raw=true');\r\n              background-size: contain;\r\n              background-repeat: no-repeat;\r\n              background-position: center;\r\n              width: 600px;\r\n              height: 600px;\r\n            `}\r\n          ></div>\r\n        )}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n```\r\n\r\n#### Next Step\r\n\r\nYou can use `viewTransition()` helper for getting unique `view-transition-name`.\r\n\r\n```tsx\r\nimport { startViewTransition } from 'hono/jsx'\r\n\r\nconst Content = () => {\r\n  const [showLargeImage, setShowLargeImage] = useState(false)\r\n  const [transitionNameClass] = useState(() => viewTransition())\r\n  return (\r\n    <>\r\n      <button onClick={() => startViewTransition(() => setShowLargeImage((state) => !state))}>\r\n        Click!\r\n      </button>\r\n      <div>\r\n        {!showLargeImage ? (\r\n          <img src='https://avatars.githubusercontent.com/u/98495527' class={transitionNameClass} />\r\n        ) : (\r\n          <div\r\n            class={css`\r\n              ${transitionNameClass}\r\n              background: url('https://github.com/honojs/hono/blob/main/docs/images/hono-logo.png?raw=true');\r\n              background-size: contain;\r\n              background-repeat: no-repeat;\r\n              background-position: center;\r\n              width: 600px;\r\n              height: 600px;\r\n            `}\r\n          ></div>\r\n        )}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n```\r\n\r\n#### Use with `keyframes`\r\n\r\n`::view-transition-old()` is converted to `::view-transition-old(${uniqueName)`\r\n\r\n```tsx\r\nimport { startViewTransition } from 'hono/jsx'\r\n\r\nconst rotate = keyframes`\r\n  from {\r\n    rotate: 0deg;\r\n  }\r\n  to {\r\n    rotate: 360deg;\r\n  }\r\n`\r\n\r\nconst Content = () => {\r\n  const [showLargeImage, setShowLargeImage] = useState(false)\r\n  const [transitionNameClass] = useState(() =>\r\n    viewTransition(css`\r\n      ::view-transition-old() {\r\n        animation-name: ${rotate};\r\n      }\r\n      ::view-transition-new() {\r\n        animation-name: ${rotate};\r\n      }\r\n    `)\r\n  )\r\n  return (\r\n    <>\r\n      <button onClick={() => startViewTransition(() => setShowLargeImage((state) => !state))}>\r\n        Click!\r\n      </button>\r\n      <div>\r\n        {!showLargeImage ? (\r\n          <img src='https://avatars.githubusercontent.com/u/98495527' class={transitionNameClass} />\r\n        ) : (\r\n          <div\r\n            class={css`\r\n              ${transitionNameClass}\r\n              background: url('https://github.com/honojs/hono/blob/main/docs/images/hono-logo.png?raw=true');\r\n              background-size: contain;\r\n              background-repeat: no-repeat;\r\n              background-position: center;\r\n              width: 600px;\r\n              height: 600px;\r\n            `}\r\n          ></div>\r\n        )}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n```\r\n\r\n#### If you want to change the style only during the animation\r\n\r\nYou can use `useViewTransition()`.  This hook returns `[boolean, (callback: () => void) => void]` and they are `isUpdating` flag and `startViewTransition()` function.\r\nIf you want to change the style only during the animation, you can specify the style if `isUpdating` is `true`.\r\n\r\nWhen this hook is used, Component is evaluated at the following two times.\r\n* Inside the callback of a call to `startViewTransition()`.\r\n* When the `finish` promise becomes fulfilled\r\n    * https://developer.mozilla.org/en-US/docs/Web/API/ViewTransition/finished\r\n\r\n\r\n```tsx\r\nimport { useViewTransition } from 'hono/jsx'\r\n\r\nconst rotate = keyframes`\r\n  from {\r\n    rotate: 0deg;\r\n  }\r\n  to {\r\n    rotate: 360deg;\r\n  }\r\n`\r\n\r\nconst Content = () => {\r\n  const [isUpdating, startViewTransition] = useViewTransition()\r\n  const [showLargeImage, setShowLargeImage] = useState(false)\r\n  const [transitionNameClass] = useState(() =>\r\n    viewTransition(css`\r\n      ::view-transition-old() {\r\n        animation: ${rotate} 2s ease-in-out;\r\n      }\r\n      ::view-transition-new() {\r\n        animation: ${rotate} 2s ease-in-out;\r\n      }\r\n    `)\r\n  )\r\n  return (\r\n    <>\r\n      <button onClick={() => startViewTransition(() => setShowLargeImage((state) => !state))}>\r\n        Click!\r\n      </button>\r\n      <div>\r\n        {!showLargeImage ? (\r\n          <img src='https://avatars.githubusercontent.com/u/98495527' class={transitionNameClass} />\r\n        ) : (\r\n          <div\r\n            class={css`\r\n              ${transitionNameClass}\r\n              background: url('https://github.com/honojs/hono/blob/main/docs/images/hono-logo.png?raw=true');\r\n              background-size: contain;\r\n              background-repeat: no-repeat;\r\n              background-position: center;\r\n              width: 600px;\r\n              height: 600px;\r\n              position: relative;\r\n              ${isUpdating &&\r\n              css`\r\n                &:before {\r\n                  content: 'Loading...';\r\n                  position: absolute;\r\n                  top: 50%;\r\n                  left: 50%;\r\n                }\r\n              `}\r\n            `}\r\n          ></div>\r\n        )}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n```\r\n\r\n\r\n#### Example of overall use\r\n\r\nhttps://github.com/honojs/hono/assets/30598/f9514a08-d666-42c6-8109-1fd028af65d1\r\n\r\n```ts\r\n/** @jsxRuntime automatic @jsxImportSource ./src/jsx/dom */\r\nimport { render, Suspense } from './src/jsx/dom'\r\nimport { Style, css, keyframes, viewTransition } from './src/jsx/dom/css'\r\nimport { useState, useViewTransition, use } from './src/jsx/hooks'\r\n\r\nconst imagePromise = new Map<string, Promise<string>>()\r\nconst loadImage = (src: string) => {\r\n  if (!imagePromise.has(src)) {\r\n    imagePromise.set(\r\n      src,\r\n      new Promise((resolve) => {\r\n        ;(async () => {\r\n          await new Promise((resolve) => setTimeout(resolve, 700))\r\n          const image = new window.Image()\r\n          image.onload = () => resolve(src)\r\n          image.src = src\r\n        })()\r\n      })\r\n    )\r\n  }\r\n  return imagePromise.get(src) as Promise<string>\r\n}\r\n\r\nconst ThumbnailImage = ({ transition }: { transition: string }) => (\r\n  <img src='https://avatars.githubusercontent.com/u/98495527' class={transition} />\r\n)\r\nconst OriginalImage = ({\r\n  transition,\r\n  setIsImageShown,\r\n}: {\r\n  transition: string\r\n  setIsImageShown: (boolean) => void\r\n}) => {\r\n  const [isUpdating] = useViewTransition()\r\n  const image = use(\r\n    loadImage('https://github.com/honojs/hono/blob/main/docs/images/hono-logo.png?raw=true')\r\n  )\r\n  if (!isUpdating) {\r\n    setIsImageShown(true)\r\n  }\r\n  return (\r\n    <div\r\n      class={css`\r\n        ${transition}\r\n        background: url('${image}');\r\n        background-size: contain;\r\n        background-repeat: no-repeat;\r\n        background-position: center;\r\n        width: 600px;\r\n        height: 600px;\r\n      `}\r\n    />\r\n  )\r\n}\r\n\r\nconst Image = () => {\r\n  const [showOriginalImage, setShowOriginalImage] = useState(false)\r\n  const [isShown, setIsShown] = useState(false)\r\n  const [isImageShown, setIsImageShown] = useState(false)\r\n  const [isUpdating, startViewTransition] = useViewTransition()\r\n\r\n\r\n  const rotate360 = keyframes`\r\n0% {\r\n  transform: rotate(0deg);\r\n}\r\n100% {\r\n  transform: rotate(360deg);\r\n}\r\n`\r\n  const rotate20 = keyframes`\r\n0% {\r\n  transform: rotate(0deg);\r\n}\r\n50% {\r\n  transform: rotate(20deg);\r\n}\r\n100% {\r\n  transform: rotate(0deg);\r\n}\r\n`\r\n  const fadeIn = keyframes`\r\n0% {\r\n  opacity: 0;\r\n}\r\n100% {\r\n  opacity: 1;\r\n}\r\n`\r\n  const fadeOut = keyframes`\r\n0% {\r\n  opacity: 1;\r\n}\r\n100% {\r\n  opacity: 0;\r\n}\r\n`\r\n  const loadingTransition = viewTransition(css`\r\n    ::view-transition-old() {\r\n      animation: ${rotate360} 0.5s ease-in-out;\r\n    }\r\n\r\n    ::view-transition-new() {\r\n      animation: ${rotate360} 0.5s ease-in-out;\r\n    }\r\n  `)\r\n  const loadedTransition = viewTransition(css`\r\n    ::view-transition-old() {\r\n      animation: ${fadeOut} 0.5s linear;\r\n    }\r\n\r\n    ::view-transition-new() {\r\n      animation: ${fadeIn} 0.5s linear;\r\n    }\r\n  `)\r\n  const switchTransition = viewTransition(css`\r\n    ::view-transition-old() {\r\n      animation: ${rotate20} 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275);\r\n    }\r\n\r\n    ::view-transition-new() {\r\n      animation: ${rotate20} 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275);\r\n    }\r\n  `)\r\n\r\n  return (\r\n    <div\r\n      onClick={() =>\r\n        startViewTransition(() => {\r\n          setShowOriginalImage(!showOriginalImage)\r\n          setIsShown(true)\r\n        })\r\n      }\r\n    >\r\n      {showOriginalImage ? (\r\n        <Suspense\r\n          fallback={\r\n            <div\r\n              class={css`\r\n                ${isUpdating ? loadingTransition : loadedTransition}\r\n                width: 600px;\r\n                height: 600px;\r\n                display: flex;\r\n                justify-content: center;\r\n                align-items: center;\r\n                background-image: url('https://avatars.githubusercontent.com/u/98495527');\r\n                background-size: contain;\r\n                background-repeat: no-repeat;\r\n                background-position: center;\r\n                background-color: rgba(255, 255, 255, 0.5);\r\n                background-blend-mode: lighten;\r\n              `}\r\n            >\r\n              Loading...\r\n            </div>\r\n          }\r\n        >\r\n          <OriginalImage\r\n            transition={\r\n              isImageShown ? switchTransition : isUpdating ? loadingTransition : loadedTransition\r\n            }\r\n            setIsImageShown={setIsImageShown}\r\n          />\r\n        </Suspense>\r\n      ) : (\r\n        <ThumbnailImage transition={isShown ? switchTransition : loadingTransition} />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const App = () => {\r\n  return (\r\n    <>\r\n      <Style />\r\n      <div>\r\n        <div>\r\n          <div>\r\n            <Image />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nrender(<App />, document.getElementById('root'))\r\n```\r\n\r\n### Other changes\r\n\r\n#### Support `CSSProperties`\r\n\r\nMerging this PR would allow the following to be written.\r\n\r\n```tsx\r\n<h1 style={{fontSize: '20px'}}>Header</h1>\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2053",
        "comments": [
          "@yusukebe Would you please review?",
          "Hi @usualoma\r\n\r\nAwesome! I have been playing with these features for a while, and they are a lot of fun. Merging. Thanks!\r\n"
        ]
      },
      {
        "pr_number": 2054,
        "title": "feat(ssg): support Improve Hook Handling",
        "body": "Following @yusukebe  advice, I have created the beforeRequestHook and AfterRequestHook. Users can now prevent unexpected outputs with these hooks.\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2054",
        "comments": [
          "Hi @watany-dev ! Thanks for the PR.\r\n\r\nI would like to use it like the following:\r\n\r\n```tsx\r\nimport fs from 'node:fs/promises'\r\nimport { Hono } from 'hono'\r\nimport { toSSG } from 'hono/ssg'\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/foo', (c) => {\r\n  const message = c.req.header('x-message') ?? 'no message'\r\n  return c.html(<h1>Hello Foo, {message}</h1>)\r\n})\r\n\r\napp.get('/bar', (c) => {\r\n  return c.html(<h1>This is Bar</h1>, {\r\n    headers: {\r\n      'x-ssg-as-text': '1',\r\n    },\r\n  })\r\n})\r\n\r\ntoSSG(app, fs, {\r\n  beforeRequestHook: (req) => {\r\n    req.headers.append('x-message', 'SSG is great!')\r\n    return req\r\n  },\r\n  afterResponseHook: (res) => {\r\n    if (res.headers.get('x-ssg-as-text')) {\r\n      res.headers.set('Content-Type', 'text/plain')\r\n    }\r\n    return res\r\n  },\r\n  // Added `afterGenerateHook`. I think this is useful.  \r\n  afterGenerateHook: (result) => {\r\n    result.files?.map((file) => {\r\n      console.log(`Generated! ${file}`)\r\n    })\r\n  },\r\n})\r\n```\r\n\r\nIf you agree with this approach, you will have to change your code as follows:\r\n\r\n```diff\r\ndiff --git a/src/helper/ssg/index.ts b/src/helper/ssg/index.ts\r\nindex e0e0e0d..5297881 100644\r\n--- a/src/helper/ssg/index.ts\r\n+++ b/src/helper/ssg/index.ts\r\n@@ -88,11 +88,13 @@ export const ssgParams: SSGParamsMiddleware = (params) => async (c, next) => {\r\n \r\n export type BeforeRequestHook = (req: Request) => Request | false\r\n export type AfterResponseHook = (res: Response) => Response | false\r\n+export type AfterGenerateHook = (result: ToSSGResult) => void | Promise<void>\r\n \r\n export interface ToSSGOptions {\r\n   dir?: string\r\n   beforeRequestHook?: BeforeRequestHook\r\n   afterResponseHook?: AfterResponseHook\r\n+  afterGenerateHook?: AfterGenerateHook\r\n }\r\n \r\n /**\r\n@@ -117,8 +119,14 @@ export const fetchRoutesContent = async <\r\n \r\n     // GET Route Info\r\n     const thisRouteBaseURL = new URL(route.path, baseURL).toString()\r\n-    const forGetInfoURLRequest = new Request(thisRouteBaseURL) as AddedSSGDataRequest\r\n-    if (beforeRequestHook && !beforeRequestHook(forGetInfoURLRequest)) continue\r\n+\r\n+    let forGetInfoURLRequest = new Request(thisRouteBaseURL) as AddedSSGDataRequest\r\n+    if (beforeRequestHook) {\r\n+      const maybeRequest = beforeRequestHook(forGetInfoURLRequest)\r\n+      if (!maybeRequest) continue\r\n+      forGetInfoURLRequest = maybeRequest as unknown as AddedSSGDataRequest\r\n+    }\r\n+\r\n     await app.fetch(forGetInfoURLRequest)\r\n \r\n     if (!forGetInfoURLRequest.ssgParams) {\r\n@@ -128,8 +136,12 @@ export const fetchRoutesContent = async <\r\n \r\n     for (const param of forGetInfoURLRequest.ssgParams) {\r\n       const replacedUrlParam = replaceUrlParam(route.path, param)\r\n-      const response = await app.request(replacedUrlParam)\r\n-      if (afterResponseHook && !afterResponseHook(response)) continue\r\n+      let response = await app.request(replacedUrlParam, forGetInfoURLRequest)\r\n+      if (afterResponseHook) {\r\n+        const maybeResponse = afterResponseHook(response)\r\n+        if (!maybeResponse) continue\r\n+        response = maybeResponse\r\n+      }\r\n       const mimeType = response.headers.get('Content-Type')?.split(';')[0] || 'text/plain'\r\n       const content = await parseResponseContent(response)\r\n       htmlMap.set(replacedUrlParam, {\r\n@@ -210,13 +222,25 @@ export interface ToSSGAdaptorInterface<\r\n  * The API might be changed.\r\n  */\r\n export const toSSG: ToSSGInterface = async (app, fs, options) => {\r\n+  let result: ToSSGResult | undefined = undefined\r\n   try {\r\n     const outputDir = options?.dir ?? './static'\r\n-    const maps = await fetchRoutesContent(app)\r\n+    const maps = await fetchRoutesContent(\r\n+      app,\r\n+      options?.beforeRequestHook,\r\n+      options?.afterResponseHook\r\n+    )\r\n+\r\n     const files = await saveContentToFiles(maps, fs, outputDir)\r\n-    return { success: true, files }\r\n+    result = { success: true, files }\r\n   } catch (error) {\r\n     const errorObj = error instanceof Error ? error : new Error(String(error))\r\n-    return { success: false, error: errorObj }\r\n+    result = { success: false, error: errorObj }\r\n+  }\r\n+\r\n+  if (options?.afterGenerateHook) {\r\n+    await options.afterGenerateHook(result)\r\n   }\r\n+\r\n+  return result\r\n }\r\n```\r\n\r\nThis code is rough and may need to be improved.\r\n\r\nWhat do you think?",
          "@yusukebe \r\nI see! I'm interested and will think about it. This would be useful for listing file output destinations and SSG target path listings.",
          "@yusukebe \r\nThank you. I also made a new hook.",
          "@watany-dev \r\n\r\nGreat! I'll merge this now. Thanks."
        ]
      },
      {
        "pr_number": 2074,
        "title": "fix: await generate hook",
        "body": "ref https://github.com/honojs/hono/pull/2054\r\n\r\nThe test appears to be failing accidentally. This is probably due to something not awaiting generatehook\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2074",
        "comments": ["@watany-dev \r\n\r\nThanks. Merging."]
      },
      {
        "pr_number": 2071,
        "title": "fix:(ssg): make 'files' mandatory in ToSSGResult",
        "body": "fixes https://github.com/honojs/hono/issues/2070\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2071",
        "comments": ["Thanks @watany-dev !"]
      },
      {
        "pr_number": 2073,
        "title": "feat(types): explicitly specify statusCode",
        "body": "### Author should do the followings, if applicable\r\nexplicitly specify statusCode\r\nI explicitly specified all status codes defined in the specification.\r\n\r\n```ts\r\napp.get(\"/\", (c) => {\r\n   // redirect status code \r\n    return c.redirect(\"https://hono.dev\", 301);\r\n}).get(\"/2\", (c) => {\r\n    // general\r\n    // ...\r\n    return c.text(\"success!\", 201);\r\n})\r\n```\r\n\r\n```ts\r\napp.post(\"/3\", (c) => {\r\n    // type error\r\n    return c.text(\"bad status code\", 666)\r\n})\r\n```\r\n\r\nbut, if statusCode is unoffical statusCode\r\n```ts\r\nimport type { UnOfficalStatusCode } from \"hono/utils/http-status\";\r\n\r\napp.post(\"/4\", (c) => {\r\n    return c.text'(\"unoffical status code\", 666 as UnOfficalStatusCode)\r\n})\r\n```\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2073",
        "comments": [
          "@yusukebe  \nWhat do you think?\r\nI believe the UX will go up",
          "Hi @EdamAme-x \r\n\r\nSeems to be good!\r\n\r\nAs for the Unofficial status code, passing `ResponseInit` as the second argument will not cause a type error.\r\n\r\n```ts\r\napp.post('/666', (c) => {\r\n  return c.text('unofficial status code', {\r\n    status: 666,\r\n  })\r\n})\r\n```\r\n\r\nEither way, I would like to merge. Is that okay?",
          "Of course. Thanks!",
          "Let's go."
        ]
      },
      {
        "pr_number": 2098,
        "title": "chore: vitest test.pool to 'forks'",
        "body": "fixes https://github.com/honojs/hono/issues/2090\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2098",
        "comments": ["@watany-dev \r\n\r\nThanks. Merging now."]
      },
      {
        "pr_number": 2087,
        "title": "goodbye: lagon",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2087",
        "comments": [
          "https://github.com/honojs/hono/issues/2082",
          "The test itself is successful, although it fails with a mysterious timeout.",
          "Hi @EdamAme-x !\r\n\r\nThe test problem was fixed. So, this can be merged. Thanks!"
        ]
      },
      {
        "pr_number": 2092,
        "title": "refactor: faster for loop in jsx/dom",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2092",
        "comments": [
          "Hi @EdamAme-x \r\nThank you. I think it's good!",
          "Thanks! Merging."
        ]
      },
      {
        "pr_number": 2093,
        "title": "refactor: \"if\" on one line and deletion of unneeded variables",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2093",
        "comments": []
      },
      {
        "pr_number": 2096,
        "title": "fix: add typesVersions of accepts helper",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\nSorry, I forgot this!",
        "html_url": "https://github.com/honojs/hono/pull/2096",
        "comments": []
      },
      {
        "pr_number": 2167,
        "title": "v4",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/2167",
        "comments": ["The time has come. Let's go!"]
      },
      {
        "pr_number": 2167,
        "title": "v4",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/2167",
        "comments": ["The time has come. Let's go!"]
      },
      {
        "pr_number": 2105,
        "title": "chore: use Bun as a package manager",
        "body": "This PR proposes to use Bun as a package manager instead of Yarn.\r\n\r\n## Motivation\r\n\r\nWe have been using Yarn v1. However, we are having problems with the slow installation of dependencies. Also, the development of Yarn v1 has stopped.\r\n\r\nI am not that much of a package manager, but I have an admiration for other modern tools such as Yarn v4 (Berry) and pnpm.\r\n\r\nHowever, we cannot use [np](https://github.com/sindresorhus/np) in yarn v4 or pnpm. We are currently using np for this honojs/hono release, which must be able to use it.\r\n\r\n## Bun\r\n\r\nHono supports Bun and loves Bun. Bun is also an excellent package manager. So this time we will use Bun as a package manager instead of Yarn v4 or pnpm.\r\n\r\nNote: Bun can be a bundler and a test environment, but in this case, we will use it as a package manager and task runner.\r\n\r\n## Bun vs Yarn v4/pnpm\r\n\r\nCompare Bun with package managers such as Yarn v4 and pnpm.\r\n\r\nBun:\r\n\r\n* Pros - Ultra-fast.\r\n* Pros - Bun can emit `yarn.lock` compatible with Yarn v1. - So, this project will include `bun.lockb` and `yarn.lock`.\r\n* Pros - We may use np.\r\n* Pros - Does not need `yarn`.\r\n* Cons - Need to install Bun.\r\n* Cons - Does not support Windows. - but will support it soon.\r\n\r\nYarn v4/pnpm:\r\n\r\n* Pros - Does not need to install Bun.\r\n* Pros - Many projects use it.\r\n* Cons - np does not support it.  Though supporting yarn v4, it can not upload to `registry.npmjs.org`.\r\n* Cons - Fast, but slower than Bun.\r\n\r\n## How fast?\r\n\r\nhttps://github.com/honojs/hono/assets/10682/0a53a4a7-455c-440d-a6a4-ff375e85f884\r\n\r\n## On which runtime will the tests be run?\r\n\r\nNode.js.\r\n\r\nWe're using Vitest, which means that tests run on Node.js. The result of `getRuntimeKey()` is `node`.\r\n\r\n## Changes\r\n\r\nThere are no major changes, but contributors will type the following commands.\r\n\r\n* `yarn test` => `bun run test`\r\n* `yarn denoify` => `bun run denoify` or `bun denoify`\r\n* `yarn build` => `bun run build`\r\n\r\nHowever, there is not only `bun.lockb` but also `yarn.lock`, so you can use the yarn commands.\r\n\r\n## Are you sure about this?\r\n\r\nYes. If there is a major problem, we can go back to yarn. Plus, Hono likes Bun.\r\n\r\n---\r\n\r\nRelated #2051 #1405\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2105",
        "comments": [
          "Hi @ThatOneBro !\r\n\r\nFirst, I want you to see this PR. I think this is a great challenge. What do you think?",
          "Hey @yusukebe !\r\n\r\nI think Bun at this point is a good choice for the Hono project in terms of package manager and task runner since these both have stabilized a lot over the last half of a year. \r\n\r\nI would probably choose Bun over pnpm at this point, especially since Hono is currently using Yarn lockfile which is supported by Bun but not pnpm (aside from one-way import).\r\n\r\nLGTM!",
          "I'd say that `pnpm` over `yarn` is already a good enhancement (which my company did last year). @yusukebe have you considered dead simple `npm` instead?\r\n\r\nI have nothing against Bun, and I even considered using it as runtime at work over Node, but only when it gets more mature/stable. Hopefully, I'll switch by Summer \ud83d\ude0e",
          "@rafaell-lycan \r\n\r\n> @yusukebe have you considered dead simple `npm` instead?\r\n\r\nYeah. But `npm` has no special advantages, and in that case, I'd rather keep using yarn v1. And, Bun is more exciting.\r\n\r\n> I have nothing against Bun, and I even considered using it as runtime at work over Node, but only when it gets more mature/stable. Hopefully, I'll switch by Summer \ud83d\ude0e\r\n\r\nNice! I bet it will be even better by then!",
          "Merge time! Let's go."
        ]
      },
      {
        "pr_number": 2113,
        "title": "docs(contributing): add `Installing dependencies`",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2113",
        "comments": []
      },
      {
        "pr_number": 2167,
        "title": "v4",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/2167",
        "comments": ["The time has come. Let's go!"]
      },
      {
        "pr_number": 2094,
        "title": "feat(serve-static): `mimes` option for serve-static",
        "body": "close #2067 \r\n\r\nThis option enables you to set your own mime to serveStatic().\r\nThis `mimes` overwrites default mime in Hono.\r\n```ts\r\n// e.g. HLS\r\nconst mimes = {\r\n  m3u8: 'application/x-mpegURL',\r\n  ts: 'video/mp2t'\r\n}\r\napp.use('/video/*', serveStatic({mimes}))\r\n```\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2094",
        "comments": [
          "Hi @ryuapp !\r\n\r\nThanks. I've commented. Please check them.",
          "Hi @ryuapp \r\n\r\nIs this ready for review?",
          "@yusukebe now ready\r\n",
          "@ryuapp Thanks! I'll merge this now."
        ]
      },
      {
        "pr_number": 2104,
        "title": "feat(ssg): introduce `disableSSG` and `onlySSG`",
        "body": "This PR introduces `disbleSSG` and `onlySSG` middleware.\r\n\r\n### Usage\r\n\r\nYour application:\r\n\r\n```ts\r\nconst app = new Hono()\r\napp.get('/', (c) => c.html(<h1>Hello</h1>))\r\napp.get('/api', disableSSG(), (c) => c.text('an-api'))\r\napp.get('/static-page', onlySSG(), (c) => c.html(<h1>Welcome to my site</h1>))\r\n```\r\n\r\n### Difference from #2033\r\n\r\nThis Middleware is similar to `isSSG` and `isSSR` proposed in #2033 but different.\r\n\r\n1. Focus on SSG - **SSG Helper is for SSG only** and does not take care of Server-Side-Rendering. Therefore, we can only specify whether to enable SSG or not.\r\n2. Using headers - Add custom headers instead of adding properties to the `Request`/`Response` object. We need to extend the objects. And, without using this middleware, it can check the Request header, and user can write their own process if it has `x-hono-ssg.`\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2104",
        "comments": [
          "@yusukebe \r\nRegarding `disableSSG`, it's clear that the `c.header` method can be used to maintain state, which is quite efficient!\r\n\r\nHowever, I have some questions about `onlySSG`. In this case, it seems that every request must go through `toSSG`, meaning that all file writings have to be executed before any routing within the app occurs. This approach appears to potentially impact performance.\r\n\r\n## Analysis\r\nI haven't fully delved into the code, but it seems that routes registered with `new Hono()` prioritize previously registered routes. Therefore, by serving static files from the folder generated by `toSSG` before app registration, static file routing might be given priority.\r\n\r\n## Work\r\nHere are some experiments to support this theory:\r\n\r\n1. In this case, the serveStatic static route is prioritized, and the HTML file is displayed.\r\n\r\n```typescript\r\napp.use('*', serveStatic({ root: './static' }))\r\napp.get('/ssg', (c) => c.html(<SSGPage />));\r\n```\r\n\r\nor\r\n\r\n```typescript\r\napp.use('*', serveStatic({ root: './static' }))\r\napp.get('/ssg', (c) => c.notFound());\r\n```\r\n\r\n2. In this case, app.get('/ssg') is prioritized, and the HTML file assembled within the routing is displayed.\r\n\r\n```typescript\r\napp.get('/ssg', (c) => c.html(<SSGPage />));\r\napp.use('*', serveStatic({ root: './static' }))\r\n```\r\n\r\n3. In this case, app.get('/ssg') is prioritized, and a notFound response is returned.\r\n\r\n```typescript\r\napp.get('/ssg', (c) => c.notFound());\r\napp.use('*', serveStatic({ root: './static' }))\r\n```\r\n\r\n## Appendix\r\nIf the purpose of onlySSG is to be used only during static builds and to be inactive in regular routing, it might be sufficient to simply override with c.notFound without adding header logic.",
          "Hi @watany-dev, thanks fo the comment.\r\n\r\nFirst, let's get a clear understanding of how `toSSG` should be used.\r\n\r\nThis is my scenario for a hybrid SSG/SSR app.\r\n\r\n### 1. Write my application\r\n\r\nFor example, name it `src/index.ts`:\r\n\r\n```ts\r\n// src/index.ts\r\n\r\nimport { Hono } from 'hono'\r\nimport { disableSSG, onlySSG } from 'hono/ssg'\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/', (c) => c.html(<h1>Hello</h1>))\r\napp.get('/api', disableSSG(), (c) => c.text('an-api'))\r\napp.get('/static-page', onlySSG(), (c) => c.html(<h1>Welcome to my site</h1>))\r\n\r\nexport default app\r\n```\r\n\r\n### 2. Development\r\n\r\nDeveloping with a local server. If we also want to see `/static-page`, we might have to do the following, although it is verbose. This could be improved, but for now I think it is fine the way it is.\r\n\r\n```ts\r\nimport { env } from 'hono/adapter'\r\n\r\n// ...\r\n\r\napp.get(\r\n  '/static-page',\r\n  async (c, next) => {\r\n    if (env<{ mode: string }>(c).mode === 'production') {\r\n      await onlySSG()(c, next)\r\n    } else {\r\n      await next()\r\n    }\r\n  },\r\n  (c) => c.html(<h1>Welcome to my site</h1>)\r\n)\r\n```\r\n\r\n### 3. Deploy - SSG\r\n\r\nUse `toSSG` to export HTML statically and deploy it to such as Cloudflare Pages.\r\n\r\nCreate a build script to run on Node.js. Name it `build.ts`.\r\n\r\n```ts\r\n// build.ts\r\n\r\nimport fs from 'node:fs/promises'\r\nimport { toSSG } from 'hono/ssg'\r\nimport app from './src/index'\r\n\r\ntoSSG(app, fs, { dir: 'dist' })\r\n```\r\n\r\nBuild pages with the `build.ts`.\r\n\r\n```\r\ntsx ./build.ts\r\n```\r\n\r\nDeploy them using Wrangler.\r\n\r\n```\r\nwrangler pages deploy dist/\r\n```\r\n\r\n### 4. Deploy - SSR\r\n\r\nFor example, we can deploy the application as an SSR to Cloudflare Workers.\r\n\r\n```\r\nwrangler deploy src/index.ts\r\n```\r\n\r\n---\r\n\r\nMaybe your scenario is something completely different. We need to share.",
          "If we don't make default option, we can probably write this code:\r\n```\r\napp.use('*', disableSSG())\r\napp.get('/', c => c.json('Hello world!'))\r\napp.get('/', onlySSG(),  c => c.json('Hello world!'))\r\n```\r\nI think it's cool.\r\nDo you think this code is good?",
          "@yusukebe \n\nThanks, I understand the use case. That use case makes sense to me. I think it is good.",
          "@nakasyou \r\n\r\n> If we don't make default option, we can probably write this code:\r\n\r\nYeah, exactly. We can write the code.\r\n\r\n@watany-dev \r\n\r\nThank you for understanding. If we are going with this use case, I think this issue you mentioned is no longer a problem. How about it?\r\n\r\n> However, I have some questions about `onlySSG`. In this case, it seems that every request must go through `toSSG`, meaning that all file writings have to be executed before any routing within the app occurs. This approach appears to potentially impact performance.\r\n\r\n@nakasyou @watany-dev \r\n\r\nIf you are OK, I'll merge this PR and close #2033 ( but thanks for @nakasyou ).",
          "@yusukebe \r\nYes, there is nothing to block because the use case is different. I think we can merge them!",
          "@yusukebe \r\n> If you are OK, I'll merge this PR and close https://github.com/honojs/hono/pull/2033 ( but thanks for @nakasyou ).\r\n\r\nYes, I don't have dissatisfaction for this PR.",
          "Thanks both! Merge now!"
        ]
      },
      {
        "pr_number": 2119,
        "title": "feat!(mime): reduce default mimes",
        "body": "As the number of MIME increases in the future, it will be impossible to support them all due to file size problems.\r\nWe think that it should primarily support files used by browsers.\r\nInstead, you can maintain the previous state by using mimes option #2094 .\r\n\r\n## Delete extension List\r\n\r\n**azw(application/vnd.amazon.ebook)**\r\nIf Amazon is using Hono, it should not be deleted.\r\n\r\n**abw, csh, doc, docs, xls, xlsx, odp, ods, odt, ppt, pptx, vsd**\r\nFiles used by specific software.\r\n\r\n**swf, xul**\r\nFiles for software whose support has ended.\r\n\r\n**mpkg, sh**\r\nInstaller and scripts.\r\n\r\n**jar, php**\r\nOther language files.\r\n\r\n**arc, bz, bz2, tar, 7z**\r\nArchive and compressed files.\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2119",
        "comments": [
          "> Instead, you can maintain the previous state by using mimes option #2094 .\r\n\r\nExactly, now we have a `mimes` option! Thanks. Merge now."
        ]
      },
      {
        "pr_number": 2121,
        "title": "feat(types): better `c.var` type",
        "body": "I noticed `ContextVariableMap` is pretty much useless for `c.var` if `Env` in `Context` is `any` (the default), so I decided to make it respect it without breaking much code.\r\n\r\n## Before\r\n\r\n```ts\r\ndeclare module 'hono' {\r\n  export interface ContextVariableMap {\r\n    x: string;\r\n  }\r\n}\r\n\r\nconst c = new Context(...);\r\n\r\nc.var.x; // any\r\nc.var.y; // any\r\n```\r\n\r\n## Now\r\n\r\n```ts\r\ndeclare module 'hono' {\r\n  export interface ContextVariableMap {\r\n    x: string;\r\n  }\r\n}\r\n\r\nconst c = new Context(...);\r\n\r\nc.var.x; // string\r\nc.var.y; // still any, as to not break any code\r\n```",
        "html_url": "https://github.com/honojs/hono/pull/2121",
        "comments": [
          "Hi @Kyiro \r\n\r\nI think this PR looks good, but it can infer type correctly in my environment.\r\n\r\n<img width=\"596\" alt=\"Screenshot 2024-01-31 at 5 02 38\" src=\"https://github.com/honojs/hono/assets/10682/d0902f98-774d-44fb-a0c9-528fbcee2090\">\r\n\r\nOr, my understanding is wrong?",
          "It's only an issue with middleware handlers and such.\r\n```ts\r\nconst middleware: MiddlewareHandler = (c, next) => {\r\n    c.var.x; // it's different here because Context's Env is any by default\r\n};\r\n```",
          "@Kyiro \r\n\r\nAh, understood well. Please re-run `denoify`.",
          "@Kyiro \r\n\r\nThanks! Merge now.",
          "~~This is a `feat` but it's a minor change. So, I'll include it in the next patch-release.~~\r\n\r\nThis will be included in the next v4!"
        ]
      },
      {
        "pr_number": 2128,
        "title": "fix(jsx-renderer): correct nested layouts",
        "body": "Fixed not working correctly when there are more than 2 nested layouts.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2128",
        "comments": []
      },
      {
        "pr_number": 2130,
        "title": "feat!(validator): supports transformation",
        "body": "This PR allows changing the type of value returned by the validator.\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { validator } from 'hono/validator'\r\n\r\nconst app = new Hono()\r\n\r\napp.get(\r\n  '/',\r\n  validator('query', () => {\r\n    return {\r\n      age: 123\r\n    }\r\n  }),\r\n  (c) => {\r\n    const { age } = c.req.valid('query')\r\n    return c.json({\r\n      'your age is': age // number\r\n    })\r\n  }\r\n)\r\n```\r\n\r\nThe Zod Validator will need to be modified later.\r\n\r\nRelated to https://github.com/honojs/middleware/issues/368\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2130",
        "comments": []
      },
      {
        "pr_number": 2132,
        "title": "feat(jsx/dom): more react staff",
        "body": "Merging this PR will accomplish the purpose of #2131.\r\n\r\n### New staff members\r\n\r\n`useMemo`, `useLeyoutEffect`, `isValidElement`, `cloneElement`\r\n\r\n### Fixed\r\n\r\n#### `useContext`\r\n\r\nFixed the same problem with dom version as #2124\r\n\r\n#### `useEffect`\r\n\r\nAs in the original React, useEffect is now executed asynchronously after the DOM is rendered, rather than synchronously.\r\n\r\n### Enable to use 'hono/jsx/dom' for replacement of 'react'. \r\n\r\nYou can use dom-specific version of hooks and utils by importing from 'hono/jsx/dom' by 09da043\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2132",
        "comments": ["@yusukebe Would you please review?"]
      },
      {
        "pr_number": 2139,
        "title": "refactor(jsx): Remove unused HONO_COMPONENT feature",
        "body": "Fixes #2133\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2139",
        "comments": []
      },
      {
        "pr_number": 2143,
        "title": "fix(html): Remove circular dependencies in `hono/html`",
        "body": "# Why\r\nThere is a circular dependency between `src/helper/html/index.ts` and `src/utils/html.ts`. This PR removes this circular dependency by removing imports to helper files in utility files.\r\n\r\nI found this circular dependency while running Hono in [Expo API Routes](https://blog.expo.dev/rfc-api-routes-cce5a3b9f25d). Displaying warnings for node_modules dependencies is [a bug](https://github.com/expo/expo/issues/26613) in Expo but I believe it's good to remove circular dependencies in the first place. \r\n\r\n<img width=\"704\" alt=\"Screenshot 2024-02-03 at 18 31 40\" src=\"https://github.com/honojs/hono/assets/13040/4fe07f2f-42ed-4d0e-9948-f9c43029cd00\">\r\n\r\n# How\r\nMove the `raw` function to `src/utils/html.ts` and re-export `raw` in `src/helper/html/index.ts`\r\n\r\n# Test Plan\r\n- Run the following command to find circular dependencies warnings disappear after the change.\r\n```\r\nnpx dpdm --transform --no-tree ./src/helper/html/index.ts\r\n```\r\n<img width=\"816\" alt=\"Screenshot 2024-02-03 at 18 14 13\" src=\"https://github.com/honojs/hono/assets/13040/818c1182-925b-4096-8817-6796a1dd14f2\">\r\n\r\n- Tests for the `raw` remain in the `src/helper/html/index.ts` file so that we continue to test all public API surfaces there. \r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2143",
        "comments": [
          "Hi @javascripter \r\n\r\nThanks for the PR. This is good!\r\n\r\nOne thing, please run `yarn lint:fix && yarn format:fix` to format the codes.",
          "@yusukebe Thanks for taking a look! I've reformatted the code and rerun `yarn denoify`.",
          "@javascripter \r\n\r\nThanks! Merge now.\r\n\r\nIf you have another opportunity to make a contribution, we would be happy to do so!"
        ]
      },
      {
        "pr_number": 2145,
        "title": "Merge main into v4",
        "body": "Fixes #2137",
        "html_url": "https://github.com/honojs/hono/pull/2145",
        "comments": [
          "Hi @yusukebe \r\n\r\nI think this will merge correctly.\r\n\r\nMerging this PR might further nest merge commits, which might pollute the commit log a bit.\r\n\r\nIf you are OK with this content, you can push 0623c21 directly to v4.",
          "@usualoma \r\n\r\nThanks! I've done it."
        ]
      },
      {
        "pr_number": 2167,
        "title": "v4",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/2167",
        "comments": ["The time has come. Let's go!"]
      }
    ],
    "v3.12.10": [
      {
        "pr_number": 2136,
        "title": "fix(trie-router): fix same parameter name issue",
        "body": "Fixes #2134\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2136",
        "comments": []
      },
      {
        "pr_number": 2145,
        "title": "Merge main into v4",
        "body": "Fixes #2137",
        "html_url": "https://github.com/honojs/hono/pull/2145",
        "comments": [
          "Hi @yusukebe \r\n\r\nI think this will merge correctly.\r\n\r\nMerging this PR might further nest merge commits, which might pollute the commit log a bit.\r\n\r\nIf you are OK with this content, you can push 0623c21 directly to v4.",
          "@usualoma \r\n\r\nThanks! I've done it."
        ]
      }
    ],
    "v3.12.9": [
      {
        "pr_number": 2095,
        "title": "chore: add development environment",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2095",
        "comments": [
          "I recently familiarized myself with your project. Having thoroughly reviewed the project documentation, I am enthusiastic about contributing to its development.\r\n\r\nTo kick things off, given my keen interest in Docker container development :smile: , I've implemented some modifications to facilitate a smoother onboarding process for newcomers to the project.",
          "Welcome! @jarqvi \r\n\r\nI want to merge this PR. Check my comment, fix it, and please do `yarn denoify`.",
          "Thanks for Notes.\r\nDone.",
          "@jarqvi \r\n\r\nSorry! I've noticed one thing that I've commented on.",
          "it's good idea, ok."
        ]
      },
      {
        "pr_number": 2112,
        "title": "chore(lint): set `curly` rule as `all`",
        "body": "Related to https://github.com/orgs/honojs/discussions/2108\r\n\r\nAs mentioned above, the style of braces in if statements should be unified. It should not be changed by refactoring. Therefore, we add the eslint rule. The option `all` is the style preferred by me and @usualoma. We will go with that.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2112",
        "comments": []
      },
      {
        "pr_number": 2115,
        "title": "fix: replace fs.existsSync() with Bun.file().exists()",
        "body": "- [x] Run tests",
        "html_url": "https://github.com/honojs/hono/pull/2115",
        "comments": ["@the-pesar Thanks. Merge now."]
      },
      {
        "pr_number": 2122,
        "title": "fix(types): infer complex path params",
        "body": "Fixes #2100\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2122",
        "comments": []
      },
      {
        "pr_number": 2124,
        "title": "fix(jsx): fix context provider with async component",
        "body": "### What will be fixed?\r\n\r\nIn JSX `toString()`, `useContext()` did not work correctly for nested async component. This PR fixes that problem.\r\nIt is possible that this PR will fix #2118, but it may be another cause, which will need to be confirmed after merged.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2124",
        "comments": ["Thanks! @usualoma \r\n\r\nMerge now."]
      },
      {
        "pr_number": 2145,
        "title": "Merge main into v4",
        "body": "Fixes #2137",
        "html_url": "https://github.com/honojs/hono/pull/2145",
        "comments": [
          "Hi @yusukebe \r\n\r\nI think this will merge correctly.\r\n\r\nMerging this PR might further nest merge commits, which might pollute the commit log a bit.\r\n\r\nIf you are OK with this content, you can push 0623c21 directly to v4.",
          "@usualoma \r\n\r\nThanks! I've done it."
        ]
      }
    ],
    "v4.0.0-rc.3": [],
    "v3.12.8": [
      {
        "pr_number": 2081,
        "title": "fix(factory): correct types inside of `createMiddleware()`",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2081",
        "comments": []
      },
      {
        "pr_number": 2085,
        "title": "fix: enable to return Response like object ",
        "body": "This PR fixes regression in the https://github.com/honojs/hono/pull/2080.\r\n\r\nAt first glance, it appears to be a significant change from the following code, but the conditions are the same.\r\n\r\n```ts\r\n      if (res instanceof Response) return res\r\n\r\n      return (async () => {\r\n        let awaited: Response | void\r\n        try {\r\n          awaited = await res\r\n          if (!awaited) {\r\n            return this.notFoundHandler(c)\r\n          }\r\n        } catch (err) {\r\n          return this.handleError(err, c)\r\n        }\r\n        return awaited\r\n      })()\r\n```\r\n\r\nIf `res instanceof Response` is `false`, whether it is a `Promise<Response>` or a Response-like object, it is resolved in the subsequent `await res`. Therefore, it is sufficient to check the type of res with `res instanceof Promise` and switch its behavior.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2085",
        "comments": []
      },
      {
        "pr_number": 2088,
        "title": "refactor: request param",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2088",
        "comments": []
      }
    ],
    "v3.12.7": [
      {
        "pr_number": 2007,
        "title": "feat(dev): support `NO_COLOR`",
        "body": "Many frameworks support `NO_COLOR` because color libraries like ~chalk~, [kleur](https://github.com/lukeed/kleur) and [picocolors](https://github.com/alexeyraspopov/picocolors) support the env.\r\nThis helps disabling colored text output for some developers.\r\nhttps://no-color.org/\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2007",
        "comments": [
          "@ryuapp \r\n\r\nThanks! This is good.\r\n\r\nCan you write the test, although that will be very simple?",
          "@yusukebe \r\nI need to add an environment variable before running test because [vi.stubEnv](https://vitest.dev/api/vi.html#vi-stubenv-0-26-0) cannot be used in this test due to the initialization timing of `isNoColor`.\r\n\r\nDo you have any comments about this test?",
          "@ryuapp \r\n\r\nHow about this?\r\n\r\n```diff\r\ndiff --git a/src/helper/dev/index.test.ts b/src/helper/dev/index.test.ts\r\nindex 65d2480..84fd24f 100644\r\n--- a/src/helper/dev/index.test.ts\r\n+++ b/src/helper/dev/index.test.ts\r\n@@ -3,7 +3,6 @@ import { RegExpRouter } from '../../router/reg-exp-router'\r\n import type { Handler, MiddlewareHandler } from '../../types'\r\n import { inspectRoutes, showRoutes, getRouterName } from '.'\r\n \r\n-const isNoColor = 'NO_COLOR' in process.env\r\n const namedMiddleware: MiddlewareHandler = (_, next) => next()\r\n const namedHandler: Handler = (c) => c.text('hi')\r\n const app = new Hono()\r\n@@ -57,11 +56,12 @@ describe('inspectRoutes()', () => {\r\n   })\r\n })\r\n \r\n-describe.runIf(!isNoColor)('showRoutes()', () => {\r\n+describe('showRoutes()', () => {\r\n   let logs: string[] = []\r\n \r\n   let originalLog: typeof console.log\r\n   beforeAll(() => {\r\n+    vi.stubEnv('NO_COLOR', '')\r\n     originalLog = console.log\r\n     console.log = (...args) => logs.push(...args)\r\n   })\r\n@@ -127,11 +127,12 @@ describe.runIf(!isNoColor)('showRoutes()', () => {\r\n   })\r\n })\r\n \r\n-describe.runIf(isNoColor)('showRoutes() in NO_COLOR', () => {\r\n+describe('showRoutes() in NO_COLOR', () => {\r\n   let logs: string[] = []\r\n \r\n   let originalLog: typeof console.log\r\n   beforeAll(() => {\r\n+    vi.stubEnv('NO_COLOR', 'true')\r\n     originalLog = console.log\r\n     console.log = (...args) => logs.push(...args)\r\n   })\r\ndiff --git a/src/helper/dev/index.ts b/src/helper/dev/index.ts\r\nindex bcaa001..f303ba9 100644\r\n--- a/src/helper/dev/index.ts\r\n+++ b/src/helper/dev/index.ts\r\n@@ -14,15 +14,6 @@ interface RouteData {\r\n   isMiddleware: boolean\r\n }\r\n \r\n-// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n-const { process, Deno } = globalThis as any\r\n-const isNoColor =\r\n-  typeof process !== 'undefined'\r\n-    ? // eslint-disable-next-line no-unsafe-optional-chaining\r\n-      'NO_COLOR' in process?.env\r\n-    : typeof Deno?.noColor === 'boolean'\r\n-    ? (Deno.noColor as boolean)\r\n-    : false\r\n const isMiddleware = (handler: Function) => handler.length > 1\r\n const handlerName = (handler: Function) => {\r\n   return handler.name || (isMiddleware(handler) ? '[middleware]' : '[handler]')\r\n@@ -48,6 +39,15 @@ export const inspectRoutes = <E extends Env>(hono: Hono<E>): RouteData[] => {\r\n }\r\n \r\n export const showRoutes = <E extends Env>(hono: Hono<E>, opts?: ShowRoutesOptions) => {\r\n+  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n+  const { process, Deno } = globalThis as any\r\n+  const isNoColor =\r\n+    typeof process !== 'undefined'\r\n+      ? !!process?.env.NO_COLOR\r\n+      : typeof Deno?.noColor === 'boolean'\r\n+      ? (Deno.noColor as boolean)\r\n+      : false\r\n+\r\n   const colorEnabled = opts?.colorize ?? !isNoColor\r\n   const routeData: Record<string, RouteData[]> = {}\r\n   let maxMethodLength = 0\r\n```\r\n\r\nIf this works, the `test:no-color` command will no longer be necessary.",
          "@yusukebe \r\nThank you for the comment.\r\nIt works well. I avoided that implementation because it reads the environment variable every time the function is executed.\r\nBut, I reconsidered that this feature does not require performance at the expense of test simplicity.\r\nI'll fix that later.",
          "@ryuapp \r\n\r\nThanks! This is a minor feat, so I'll include this in the next patch release."
        ]
      },
      {
        "pr_number": 2062,
        "title": "refactor(test): change to not use `env` command",
        "body": "`env` command can't work on Windows and move it to config.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2062",
        "comments": ["@ryuapp \r\n\r\nLooks great! Thanks!"]
      },
      {
        "pr_number": 2057,
        "title": "refactor: stream pull",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2057",
        "comments": ["@ariskemper \r\n\r\nThanks! Merge now"]
      },
      {
        "pr_number": 2058,
        "title": "refactor: url util splitRoutingPath",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2058",
        "comments": [
          "@ariskemper \r\n\r\nThanks to you, the code is now neat! Merge now."
        ]
      },
      {
        "pr_number": 2080,
        "title": "fix(hono-base): fix not found handler calling timing when one middleware",
        "body": "Fixes #2061\r\n\r\nFix problem where notFound was not handled correctly when the result returned from the router was a single middleware.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2080",
        "comments": [
          "That was a bug! Thank you for the good fix.\r\n\r\nMerging now."
        ]
      }
    ],
    "v4.0.0-rc.2": [
      {
        "pr_number": 2038,
        "title": "refactor: aws lambda createResult method",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2038",
        "comments": ["@ariskemper \r\n\r\nThanks!"]
      },
      {
        "pr_number": 2039,
        "title": "refactor: secure headers middleware",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2039",
        "comments": ["@ariskemper \r\n\r\n Became neat. Thanks!"]
      },
      {
        "pr_number": 2045,
        "title": "refactor: body parser",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2045",
        "comments": ["@ariskemper \r\n\r\nThanks again. I'll merge this."]
      }
    ],
    "v3.12.6": [
      {
        "pr_number": 2018,
        "title": "fix(types): use middlewares with different env types",
        "body": "Hello!\r\nFirst off, thank you for creating Hono. I'm using it in my personal projects and it's been a great experience!\r\n\r\nThis pull request aims to improve type inference when extending context variables in middlewares.\r\n\r\nCurrently, When using handlers like `app.get` to register middlewares that extends context variables, the context type is correctly inferred.\r\n\r\n```typescript\r\nconst app = new Hono()\r\nconst mw = createMiddleware<{ Variables: { foo: string } }>(async () => {});\r\n\r\napp.get(mw, async (c) => {\r\n    // this is correctly typed.\r\n    const foo: string = c.var.foo\r\n})\r\n```\r\n\r\nHowever, when using `app.use`, the types aren't as well defined.\r\n\r\n```typescript\r\napp.use(mw).get(async (c) => {\r\n    // this isn't correctly typed before merging this PR.\r\n    const foo: string = c.var.foo\r\n})\r\n```\r\n\r\nWhile `app.use` can accept path parametrers like `app.use('/foo', ...)`, but the type inference in these cases is quite complex and isn't covered in this PR.\r\n\r\nI believe this improvement will make Hono even more robust for TypeScript users. Looking forward to your feedback!\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2018",
        "comments": [
          "Sorry, I realized I forgot to run  `yarn denoify`  after applying `yarn format:fix`. I've now corrected this and force-pushed the changes.\r\n\r\nThis is my first contribution to Hono, so I apologize in advance for any oversights. I'm open to feedback and keen to make any necessary adjustments.",
          "Hi @agatan !\r\n\r\nAwesome work! I'll merge this now. Thanks!\r\n",
          "Thank you for the quick response! I'm looking forward to the release of v4!"
        ]
      },
      {
        "pr_number": 2025,
        "title": "fix(context): fixed middleware + `c.json({}, requestInit)` problem",
        "body": "Fixes #2023\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2025",
        "comments": []
      }
    ],
    "v4.0.0-rc.1": [
      {
        "pr_number": 1991,
        "title": "feat: Add Type to request for Lambda@Edge adapter to support S3 origin",
        "body": "The origin field in the request object in the Lambda@Edge adapter is assumed to be only a custom origin.\r\n\r\nReferring to \r\nhttps://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-event-structure.html ,\r\nI have defined a TypeScript type that is also compatible with S3 origins.\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1991",
        "comments": [
          "Thanks for filling in. Looks good.\r\nhttps://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/aws-lambda/common/cloudfront.d.ts",
          "Thanks. Merge now."
        ]
      },
      {
        "pr_number": 2005,
        "title": "Refactor middleware, tests",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2005",
        "comments": [
          "Hi @ariskemper \r\n\r\nThanks. I want to merge this. So, please run the `yarn format:fix`  to format the code.",
          "@ariskemper \r\n\r\nThanks, but please `denoify` again!",
          "@ariskemper \r\n\r\nThanks! I'll merge this now."
        ]
      },
      {
        "pr_number": 2008,
        "title": "feat: add script for watch, remove tsc from test",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2008",
        "comments": [
          "Hi @ariskemper \r\n\r\nI want to run `tsc` in the test phase.",
          "@yusukebe you want to run typecheck before tests?",
          "@ariskemper \r\n\r\nYes!",
          "Thanks!"
        ]
      },
      {
        "pr_number": 2009,
        "title": "refactor: cors",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2009",
        "comments": []
      },
      {
        "pr_number": 2011,
        "title": "refactor: jwt",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/2011",
        "comments": []
      }
    ],
    "v3.12.5": [
      {
        "pr_number": 1992,
        "title": "fix(trie-router): fixed same name path params matter",
        "body": "Fixes #1985\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1992",
        "comments": []
      }
    ],
    "v3.12.4": [
      {
        "pr_number": 1957,
        "title": "chore(package.json): use escape double quotes",
        "body": "Some commands don't work on Windows because of single quotes.\r\nI replaced them with double quotes.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1957",
        "comments": ["@ryuapp \r\n\r\nThanks! Seems to be good. Merge now."]
      },
      {
        "pr_number": 1983,
        "title": "fix(trie-router): fixed the issue same param name is used",
        "body": "Fixes #1982\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1983",
        "comments": []
      }
    ],
    "v3.12.3": [
      {
        "pr_number": 1947,
        "title": "fix(context): set multiple cookies correctly in `set res`",
        "body": "Fixes #1927\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1947",
        "comments": []
      },
      {
        "pr_number": 1952,
        "title": "feat(client): export `ClientResponse` and `ClientRequest`",
        "body": "Resolves #1950\r\n\r\nThis is a `feat` but a minor issue; I'll release it as a patch release.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1952",
        "comments": []
      },
      {
        "pr_number": 1951,
        "title": "fix(routers): RegExpRouter and LinearRouter support multiple optional params",
        "body": "Fixes #1925\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1951",
        "comments": []
      },
      {
        "pr_number": 1949,
        "title": "Fix/response for lambda@edge adapter",
        "body": "In the current implementation, when lambda@Edge is launched with a CloudFront origin request, CloudFront returns an error when processing binary data.\r\n\r\nProbably because the body is base64 but there is no bodyEncoding property.\r\n\r\nWhen returning a base64 body, the bodyEncoding property should now include base64.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1949",
        "comments": [
          "Hi @mosle !\r\n\r\nThanks for the PR. Seem to be good.\r\n\r\n@watany-dev Could you review this?",
          "@mosle\r\nThank you. This is correct. If you run `npm run format:fix` `npm run lint:fix`, the CI error will go away.",
          "@watany-dev Thank you for reviewing.\r\n\r\nDone!",
          "Thanks both. I'll merge this now!"
        ]
      }
    ],
    "v3.12.2": [
      {
        "pr_number": 1940,
        "title": "feat: support multiple optinal parameters",
        "body": "Resolves #1925\r\n\r\nThis PR is a `feat,` but it's not so major then; I'll include this in the next patch release. \r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1940",
        "comments": [
          "Hi @usualoma !\r\n\r\nCould you review this?",
          "@yusukebe I think it is good!",
          "Thanks! Merging now."
        ]
      },
      {
        "pr_number": 1922,
        "title": "fix(cache): Allow composing cache control directives",
        "body": "# Changes\r\n\r\nFix https://github.com/honojs/hono/issues/1915\r\n\r\n1. Allow nested cache middlewares to compose a final Cache-Control header\r\n2. Allow handlers to also add cache control directives\r\n\r\nThis slightly changes the implementation from raw string handling to acknowledge the existance of individual directives, this way we can avoid duplicating directives that were overriden in inner middleware/handlers.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [X] Add tests\r\n- [X] Run tests\r\n- [X] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1922",
        "comments": [
          "Perhaps it makes sense to add a directive-based APi instead of relying on plain strings in the middleware constructor and maybe also in the handlers ?\r\n\r\n```js\r\ncache({\r\n  maxAge: 0,\r\n})\r\n// ...\r\nc.cache({ private: true })\r\n```  ",
          "Hi @eduardvercaemer \r\n\r\nThanks for the PR.\r\n\r\nFirst, please run `yarn format:fix` to fix the format for passing CI. And, added a comment, please check it.\r\n\r\n> Perhaps it makes sense to add a directive-based APi instead of relying on plain strings in the middleware constructor and maybe also in the handlers ?\r\n\r\nThat is certainly a good idea and would improve DX. If you are willing to make a PR, you are welcome to do so.",
          "I fixed the issue with lower case and the format. If I get the chance I'll also work on a PR for the directive-based API \ud83d\ude04 ",
          "@eduardvercaemer \r\n\r\nAwesome!\r\n\r\nOne more thing. Please run `yarn lint --fix` to fix the lint error.",
          "@eduardvercaemer \r\n\r\nYou've fixed it! Thanks. Merging now!"
        ]
      },
      {
        "pr_number": 1930,
        "title": "fix(netlify): update package.json to export `./netlify`",
        "body": "### Purpose\r\n\r\nHi, thank you for the great work on Hono! It seemed like this was missing from the package.json which may have caused some issues. Please let me know if changes should be made.\r\n\r\nThanks!\r\n\r\n- [x] Add `./netlify` to package exports.\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1930",
        "comments": [
          "Hi @charkour !\r\n\r\nThanks for this PR!\r\n\r\nIt does not have `adapter/netlify/index.ts`, and it throws the error. I added it in #1932 and merged it into the main. Please try to import that.",
          "Hi @charkour \r\n\r\nI've fixed the error by myself. Thanks!",
          "Thank you for fixing that, @yusukebe!"
        ]
      },
      {
        "pr_number": 1931,
        "title": "fix(netlify): change path in `deno_dist/adapter/netlify`",
        "body": "### Purpose\r\n\r\nThere is an issue when using the Netlify Adapter via `deno.land/x`. https://github.com/honojs/hono/blob/8de60599aafca908b6214f047571415c6e17f8ea/deno_dist/adapter/netlify/handler.ts#L4 This line references `../../index.ts` but that doesn't exist in the root of `deno_dist/` so we must use `../../hono.ts` or `../../mod.ts`. Please let me know what you prefer. Thank you!\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\n\r\nPhoto of error:\r\n<img width=\"661\" alt=\"image\" src=\"https://github.com/honojs/hono/assets/33156025/2f79af52-362d-49a3-9960-2e874c2eb409\">\r\n\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1931",
        "comments": ["Hi @charkour \r\n\r\nLooks good! Thanks!", "Thank you!"]
      }
    ],
    "v4.0.0-rc.0": [
      {
        "pr_number": 1924,
        "title": "fix(client): Fix issue awaiting RPC client",
        "body": "Right now if you await the RPC client, it produces undefined behavior and can hang the application. This also occurs if the client is returned from an async function that is then awaited. This adds a quick fix to detect that edge case, and handle it properly.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1924",
        "comments": [
          "Hi @codekrafter \r\n\r\nThanks for the PR. Please check the two things:\r\n\r\n1. Run `yarn format:fix` to fix the format for passing CI.\r\n2. Write a proper test.\r\n\r\n",
          "I've added a test and tweaked the fix to avoid the runtime from detecting the client as a thenable, instead of adding a passthrough promise implementation.",
          "@codekrafter I'll merge this now. Thanks a lot!"
        ]
      },
      {
        "pr_number": 1932,
        "title": "fix(netlify): add `adapter/netlify/index.ts`",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1932",
        "comments": []
      }
    ],
    "v3.12.1": [
      {
        "pr_number": 1910,
        "title": "fix(jsx): fix jsx-runtime for falsy children",
        "body": "Fixes #1905\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1910",
        "comments": [
          "@yusukebe Would you please review?",
          "Thanks, I'll merge this now."
        ]
      },
      {
        "pr_number": 1914,
        "title": "fix(validator): exclude Response type for returned values from `c.req.valid()`",
        "body": "Fixes #1912\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1914",
        "comments": []
      },
      {
        "pr_number": 1900,
        "title": "feat: exports router types",
        "body": "If you merge this PR, Hono users be able to import router types.\r\n\r\nI want to custom router, so I have to import router type.\r\nBut router type (`src/router.ts`) isn't exported types.\r\nSo I must write this code.\r\n```ts\r\nimport type { Router } from '....../node_modules/hono/dist/types/router'\r\n```\r\nIt isn't smart. So I made this PR.\r\n\r\nPeople who want to make custom router can writes this code if you marge this PR:\r\n```ts\r\nimport type { Router } from 'hono/router'\r\n```\r\n\r\nmemo: I think better name than `hono/router` is probably exists.\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1900",
        "comments": [
          "Hi @nakasyou !\r\n\r\nLooks good to me! `hono/router` is fine! I'll merge this right now and include it in the next patch release because it is a minor feature. Thanks.",
          "Thank you for merging my Pull Request!"
        ]
      },
      {
        "pr_number": 1920,
        "title": "fix: streamSSE's doesn't trigger `onAbort` correctly",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\n#1902",
        "html_url": "https://github.com/honojs/hono/pull/1920",
        "comments": [
          "Hi, @watany-dev.\r\nI have changed streamSSE from the traditional implementation method to something similar to the original stream helper one, can you review it once as I am not familiar with this implementation?\r\n\r\ncc: @yusukebe ",
          "@sor4chi \r\nThank you. I was also able to confirm that onAbort stops normally when I actually run it. I think this is the way to go.",
          "@watany-dev Thanks for reviewing!\n\n@yusukebe This PR is review ready, please take a look this!",
          "Hi @sor4chi \r\n\r\nLooks good! I've left one comment. Check it please!",
          "fixed!",
          "@sor4chi @watany-dev \r\n\r\nThanks! Merging now."
        ]
      }
    ],
    "v3.12.0": [
      {
        "pr_number": 1846,
        "title": "fix: move `c.stream*` to helper",
        "body": "ref: #1843 \r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1846",
        "comments": [
          "@sor4chi \r\n\r\nIs this ready to review?",
          "@yusukebe Yes, please.",
          "Hi, @yusukebe \r\nThanks, I fixed."
        ]
      },
      {
        "pr_number": 1823,
        "title": "feat(middleware/csrf): Introduce CSRF middleware",
        "body": "This middleware prevents CSRF attacks by checking request headers.\r\n\r\n### All you have to do\r\n\r\nWhen you need to protect against CSRF attacks (i.e. submitting with a form element) all you have to do is add the following one line\r\n\r\n```ts\r\napp.use('*', csrf())\r\n```\r\n\r\nThis works well enough in most cases.\r\nFor \"old browsers that do not send Origin headers\" or \"environments that use reverse proxies and drop Origin headers,\" it may not be possible to submit with false positives. If you want to support such environments, this middleware is not sufficient, and it is better to use CSRF tokens.\r\n\r\n### Options\r\n\r\nBy default, the Origin header is compared to the requested URL. Generally, this works well enough, but sometimes an explicit specification is necessary for a variety of reasons. It is advisable to refer to the OWASP cheat sheet for the circumstances in which the specification is required and for notes on the contents of the specification.\r\nhttps://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#identifying-the-target-origin\r\n\r\nIn csrf middleware, as in cors middleware, \"origin\" can be specified as string, string[], or Function.\r\n\r\n```ts\r\n// string\r\napp.use('*', csrf({origin: \"myapp.example.com\"}))\r\n\r\n// string[]\r\napp.use('*', csrf({origin: [\"myapp.example.com\", \"development.myapp.example.com\"]}))\r\n\r\n// Function\r\n// It is strongly recommended that the protocol be verified to ensure a match to `$`. You should *never* do a forward match.\r\napp.use('*', csrf({origin: (origin) => /https:\\/\\/(\\w+\\.)?myapp\\.example\\.com$/.test(origin)})\r\n```\r\n\r\n### Thanks\r\n\r\nThis PR could not have been put together without the help of all those involved in the #1688 discussions. The documentation pointed to by @htunnicliff  and the Sveltekit implementation shared by @hjaber were especially helpful.\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1823",
        "comments": [
          "@yusukebe \r\nWould you please review?",
          "Hi @usualoma!\r\n\r\nEverything looks almost perfect! The tests cover all cases, great! I've left one comment. Please take a look.",
          "@yusukebe Thank you!\r\nFixed typo in abb72bd.",
          "@usualoma \r\n\r\nOkay! It's a new feature, so let's release it in `v3.12.0` which is the next minor release! I'll merge it into the \"next\" branch later.",
          "Sorry, I closed it by mistake.\" Merge into the \"next\" branch."
        ]
      },
      {
        "pr_number": 1841,
        "title": "feat(dev): add `getRouterName()`",
        "body": "This PR introduces `getRouterName()` function in `hono/dev` helper and deprecates `app.routerName()`.\r\n\r\nI think `app.routerName()` is not used by many users, and if users use it, the purpose is debugging in most cases. So, we can place it in `hono/dev` is better.\r\n\r\nUsage:\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { getRouterName } from 'hono/dev'\r\n\r\nconst app = new Hono()\r\n\r\n//...\r\n\r\nconsole.log(getRouterName(app))\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1841",
        "comments": [
          "Hi @usualoma !\r\n\r\nHow do you think this PR?",
          "I think you are right \ud83d\udc4d ",
          "@usualoma \r\n\r\nThanks! I'll include this feature in the next minor version."
        ]
      },
      {
        "pr_number": 1825,
        "title": "feat: Add `onNotFound` handler in adapters' `serveStatic`",
        "body": "Resolve #1810\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1825",
        "comments": [
          "Hi @Th1nkK1D \r\n\r\nLooks good!\r\n\r\nYou can prevent the CI test on Bun from failing by using the latest version of Bun. In PR #1832, I've updated the Bun version used in CI and merged it. So, please merge the main branch into this branch and then push the changes.",
          "> You can prevent the CI test on Bun from failing by using the latest version of Bun. In PR #1832, I've updated the Bun version used in CI and merged it. So, please merge the main branch into this branch and then push the changes.\r\n\r\nForgot to mention that it was done ;)"
        ]
      },
      {
        "pr_number": 1863,
        "title": "feat(helper): export SSEStreamingApi and SSEMessage.",
        "body": "retake this.\r\nhttps://github.com/honojs/hono/pull/1856\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1863",
        "comments": [
          "@watany-dev \r\n\r\nThanks. I think it is a good idea to create `stream.ts`!\r\n\r\nMerge now."
        ]
      },
      {
        "pr_number": 1877,
        "title": "fix(hono-base): fixed a typo",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1877",
        "comments": []
      },
      {
        "pr_number": 1895,
        "title": "Next",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1895",
        "comments": ["Ship now."]
      },
      {
        "pr_number": 1865,
        "title": "feat: pass context to onNotFound callback in serveStatic",
        "body": "#1810 \r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1865",
        "comments": [
          "I had no idea how to infer Middleware Handler's Context and pass it to onNotFound argument's context.",
          "@sor4chi \r\n\r\n> I had no idea how to infer Middleware Handler's Context and pass it to onNotFound argument's context.\r\n\r\nPlease tell us along with specific examples.",
          "```ts\r\nexport type ServeStaticOptions<E extends Env> = {\r\n  root?: string\r\n  path?: string\r\n  rewriteRequestPath?: (path: string) => string\r\n  onNotFound?: (path: string, c: Context<E>) => void | Promise<void>\r\n}\r\n\r\nexport const serveStatic = <E extends Env = Env>(options: ServeStaticOptions<E> = { root: '' }): MiddlewareHandler<E> => {\r\n```\r\n\r\nIf we could do something like this, we should be able to access envs type-safely from the callback context, but is this impossible with the current design?",
          "@sor4chi \r\n\r\nI struggled for hours to implement it, but I can't. Maybe it's impossible. I'll make more time to try.",
          "Okay, Thank you so much!\r\nEven if this is not possible, it might help users just to be able to put Env Generics in `serveStatic`. If this is not possible, I will do so.",
          "@sor4chi \r\n\r\nAre you imagining the following code? If so, please implement that to make it true!\r\n\r\n```ts\r\nconst app = new Hono<Env>()\r\n\r\napp.get(\r\n  '/static/*',\r\n  serveStatic<Env>({\r\n    onNotFound: (path, c) => {},\r\n  })\r\n)\r\n```",
          "Hi, @yusukebe.\r\nI finished supporting Env support for context.",
          "@sor4chi \r\n\r\nThanks! But, also please change the `adapter/cloudflare-workers/server-static-module.ts`.",
          "@yusukebe fixed! thanks for finding it!",
          "@sor4chi \r\n\r\nThanks! I'll merge this into \"next\" now."
        ]
      },
      {
        "pr_number": 1850,
        "title": "feat: introduce css Helper",
        "body": "This PR introduces middleware to enable super simple CSS in JS features.\r\n\r\nUsage:\r\n\r\n```tsx\r\nimport { Hono } from 'hono'\r\nimport { css, renderStyles } from 'hono/css'\r\nimport { jsxRenderer } from 'hono/jsx-renderer'\r\n\r\nconst app = new Hono()\r\n\r\napp.get(\r\n  '*',\r\n  jsxRenderer(({ children }) => {\r\n    return (\r\n      <html>\r\n        <head>\r\n          <style>{renderStyles()}</style>\r\n        </head>\r\n        <body>{children}</body>\r\n      </html>\r\n    )\r\n  })\r\n)\r\n\r\napp.get('/', (c) => {\r\n  const HeaderClass = css`\r\n    background-color: blue;\r\n    color: white;\r\n    padding: 1rem;\r\n  `\r\n  return c.render(\r\n    <html>\r\n      <body>\r\n        <h1 class={HeaderClass}>Hello!</h1>\r\n      </body>\r\n    </html>\r\n  )\r\n})\r\n\r\nexport default app\r\n```\r\n\r\nTips: If you use VS Code, you can use [vscode-styled-components](https://marketplace.visualstudio.com/items?itemName=styled-components.vscode-styled-components) for Syntax highlighting and IntelliSense for `css` tagged literals.\r\n\r\nIt's nice that the code is short, but there might be some things that need to be considered.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1850",
        "comments": [
          "Hi @usualoma ! What do you think about this feature?",
          "Don't overthink it! Please ship it, let us try it and then we'll see where to go from there! :) ",
          "@yusukebe \r\n\r\nVery cool idea! We should merge the PRs as it can provide very good DX when used with vscode-styled-components. I think we need to make some modifications and I'm putting it together. Please wait a bit.",
          "@yusukebe \r\n\r\nIt appears to me that two major modifications are needed. I have no idea how to fix them yet.\r\n\r\n#### Sometimes `renderStyles()` is called first\r\n\r\nSometimes `renderStyles()` is called first when the child component `css` is used. This is even more likely to occur in asynchronous components.\r\n\r\n#### Context\r\n\r\nI think the current implementation would mix the styles of multiple requests. This may be, though, that the current behavior is the correct specification.\r\n\r\n#### Test Examples\r\n\r\nWith current HEAD, I think the following tests will fail\r\n\r\n```ts\r\ndescribe('child component', () => {\r\n  const app = new Hono()\r\n  const Component = () => {\r\n    const HeaderClass = css`\r\n      background-color: blue;\r\n      color: white;\r\n      padding: 1rem;\r\n    `\r\n    return `<h1 class=${HeaderClass}>Hello!</h1>`\r\n  }\r\n  app.get('/', (c) => {\r\n    return c.text(`<style>${renderStyles()}</style>${Component()}`)\r\n  })\r\n\r\n  it('Should render CSS styles', async () => {\r\n    const res = await app.request('/')\r\n    expect(res.status).toBe(200)\r\n    const html = await res.text()\r\n    expect(html).toBe(\r\n      '<style>.css-4167396862 { background-color: blue; color: white; padding: 1rem; }</style><h1 class=css-4167396862>Hello!</h1>'\r\n    )\r\n  })\r\n})\r\n\r\ndescribe('context', () => {\r\n  const app = new Hono()\r\n  app.get('/white', (c) => {\r\n    const HeaderClass = css`\r\n      background-color: blue;\r\n      color: white;\r\n      padding: 1rem;\r\n    `\r\n    return c.text(`<style>${renderStyles()}</style><h1 class=${HeaderClass}>Hello!</h1>`)\r\n  })\r\n  app.get('/black', (c) => {\r\n    const HeaderClass = css`\r\n      background-color: blue;\r\n      color: black;\r\n      padding: 1rem;\r\n    `\r\n    return c.text(`<style>${renderStyles()}</style><h1 class=${HeaderClass}>Hello!</h1>`)\r\n  })\r\n\r\n  it('Should render CSS styles only for /black', async () => {\r\n    await app.request('/white')\r\n    const res = await app.request('/black')\r\n    expect(res.status).toBe(200)\r\n    const html = await res.text()\r\n    expect(html).toBe(\r\n      '<style>.css-1147732022 { background-color: blue; color: black; padding: 1rem; }</style><h1 class=css-1147732022>Hello!</h1>'\r\n    )\r\n  })\r\n})\r\n```",
          "Just idea.\n\nPerhaps, we may make it if treat as a feature of JSX components like styled-components.",
          "@usualoma \r\n\r\nHow about this, though? We have to consider whether it should be included in the JSX Renderer.\r\n\r\n#1855",
          "@yusukebe \r\n\r\nThanks for reminding me about #1780. I'm glad to hear it.\r\n\r\nHowever, #1780 does not support asynchronous, considering the features we need to implement this time, I think it may not be the best option.\r\n\r\nI would like to be able to get the expected results with all of the following patterns\r\n\r\n```ts\r\nconst Header = async () => {\r\n  const HeaderClass = css`\r\n    background-color: blue;\r\n    color: white;\r\n    padding: 1rem;\r\n  `\r\n  return <h1 class={HeaderClass}>Hello!</h1>\r\n}\r\n\r\nconst AsyncHeader = async () => {\r\n  await new Promise((r) => setTimeout(r, 1000))\r\n  const HeaderClass = css`\r\n    background-color: red;\r\n    color: white;\r\n    padding: 1rem;\r\n  `\r\n  return <h1 class={HeaderClass}>Hello!</h1>\r\n}\r\n\r\nconst SuspencedHeader = async () => {\r\n  await new Promise((r) => setTimeout(r, 1000))\r\n  const HeaderClass = css`\r\n    background-color: green;\r\n    color: white;\r\n    padding: 1rem;\r\n  `\r\n  return <h1 class={HeaderClass}>Hello!</h1>\r\n}\r\n\r\napp.get('/', (c) => {\r\n  return c.render(\r\n    <html>\r\n      <body>\r\n        <Header />\r\n        <AsyncHeader />\r\n        <Suspence fallback={<p>Loading...</p>}>\r\n          <SuspencedHeader />\r\n        </Suspence>\r\n      </body>\r\n    </html>\r\n  )\r\n})\r\n```\r\n\r\nI have an idea for implementation, let me suggest it later.",
          "@usualoma \r\n\r\n> I have an idea for implementation, let me suggest it later.\r\n\r\nOkay! I'll be waiting.",
          "@yusukebe \r\nI have implemented #1858 based on #1850. What do you think of this approach?",
          "How far should we go in implementing this feature?\r\nI would suggest that pseudo-elements, pseudo-selectors, and `@keyframes` should be able to be written the same way as styled-components.\r\n\r\nhttps://github.com/usualoma/hono/pull/4",
          "@usualoma \r\n\r\nI've left the comment on #1858!",
          "Let's land it!"
        ]
      },
      {
        "pr_number": 1886,
        "title": "feat(dev): add `colorize` option for `showRoutes()`",
        "body": "This PR introduces the `colorize` option for `showRoutes()` in `hono/dev`.\r\n\r\nYou can disable colorizing the output if you set the option as `false`:\r\n\r\n```ts\r\nshowRoutes(app, {\r\n  colorize: false,\r\n})\r\n```\r\n\r\nResolves #1881, related to #1883.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1886",
        "comments": ["@yusukebe LGTM!"]
      },
      {
        "pr_number": 1871,
        "title": "feat: implement stream.onAbort",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\nrelated: #1795 #1770",
        "html_url": "https://github.com/honojs/hono/pull/1871",
        "comments": [
          "@sor4chi \r\n\r\nIs this ready to review?",
          "Happy new year @yusukebe.\r\nYes, please.",
          "@sor4chi \r\n\r\nHappy New Year!\r\n\r\nI've checked it and tried to use it in some environment. But is this expected behavior?\r\n\r\nhttps://github.com/honojs/hono/assets/10682/63ce4840-8c8e-45c9-bb81-28a6eb8a4985\r\n\r\nThe code:\r\n\r\n```ts\r\nimport { serve } from '@hono/node-server'\r\nimport { Hono } from '../../src'\r\nimport { streamText } from '../../src/helper/streaming'\r\n\r\nexport const app = new Hono()\r\n\r\napp.get('/', async (c) => {\r\n  return streamText(c, async (stream) => {\r\n    stream.onAbort(async () => {\r\n      console.log('Aborted!')\r\n      await stream.close()\r\n    })\r\n    for (;;) {\r\n      stream.writeln('Hello World!')\r\n      console.log('Hello World!')\r\n      await new Promise((r) => setTimeout(r, 1000))\r\n    }\r\n  })\r\n})\r\n\r\nserve(app)\r\n```",
          "@yusukebe in your example, the loop still goes on, but there is no logic to stop the loop after the stream is aborted. You could make it a while loop instead of a for loop, and check for a variable (e.g. `while (!aborted)`) that is set by the event handler.",
          "Hi @HeyITGuyFixIt \r\n\r\nSo you are saying that it should be code like this? I understand!\r\n\r\n```ts\r\napp.get('/', async (c) => {\r\n  let aborted = false\r\n  return streamText(c, async (stream) => {\r\n    stream.onAbort(async () => {\r\n      console.log('Aborted!')\r\n      aborted = true\r\n    })\r\n    while (!aborted) {\r\n      stream.writeln('Hello World!')\r\n      console.log('Hello World!')\r\n      await new Promise((r) => setTimeout(r, 1000))\r\n    }\r\n  })\r\n})\r\n```",
          "@yusukebe yeah. Give it a try to make sure that works ",
          "@HeyITGuyFixIt \r\n\r\nIt works well! What do you think of this PR? Looks good for you?\r\n\r\nIf @sor4chi can check again, I'd like to merge this into the next branch.",
          "@yusukebe \r\nI have noticed this behavior, but since the purpose is to take an abort hook in the first place and not to close the stream.\r\n\r\nSo I'd like to leave it as it is since I think I can handle it by implementing it myself if I want to do it as @HeyITGuyFixIt has presented it.",
          "@yusukebe it looks good to me",
          "@sor4chi @HeyITGuyFixIt Thanks! Merge now."
        ]
      },
      {
        "pr_number": 1887,
        "title": "refactor: cloudflare workers' serve-static module",
        "body": "### Author should do the followings, if applicable\n\n- [x] Add tests\n- [x] Run tests\n- [x] `yarn denoify` to generate files for Deno\n\nfixes of #1865",
        "html_url": "https://github.com/honojs/hono/pull/1887",
        "comments": [
          "Hi, @yusukebe\r\n\r\nCould you please review this one too?\r\nI forgot `onNotFound` in the serve-static module and refactored around it.",
          "How about this?\r\n\r\nSince the `options.namespace` is not `deleted`, the actual value could come in, but since it has a type, I think we can go with this.\r\n\r\n```ts\r\nconst module = <E extends Env = Env>(\r\n  options: Omit<ServeStaticOptions<E>, 'namespace'> = { root: '' }\r\n) => {\r\n  options.manifest ??= manifest\r\n  return serveStatic<E>(options)\r\n}\r\n```",
          "@yusukebe exactly, thank you!",
          "@sor4chi \r\n\r\nOkay! Land it."
        ]
      },
      {
        "pr_number": 1885,
        "title": "feat(client): add `param` option to `$url()`",
        "body": "This PR introduces an option to the `$url()` function in Hono's client.\r\n\r\nYou can write the param values as an option of `$url()` like the following:\r\n\r\n```ts\r\nconst route = app.get('/api/:id/bar', (c) => c.json({ foo: 'bar' }))\r\n\r\nconst client = hc<typeof route>('http://localhost:8787/')\r\nconst url = client.api[':id'].bar.$url({\r\n  param: {\r\n    id: '123',\r\n  },\r\n})\r\n```\r\n\r\nInferring types are available:\r\n\r\nhttps://github.com/honojs/hono/assets/10682/eaff7c97-6429-41ae-b2ca-8813387a85af\r\n\r\nResolves #1870\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1885",
        "comments": ["@douglasduteil Thanks!"]
      },
      {
        "pr_number": 1892,
        "title": "fix(deno): export css Helper for Deno",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1892",
        "comments": []
      },
      {
        "pr_number": 1895,
        "title": "Next",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1895",
        "comments": ["Ship now."]
      }
    ],
    "v3.11.12": [
      {
        "pr_number": 1873,
        "title": "fix(dev): preserve original handler in [composedHandler].",
        "body": "Fixes #1868\r\n\r\nHow about this solution?\r\n\r\n### If we do more\r\n\r\nI suppose we could add the information \"added from sub pp\" in inspectRoutes. But I didn't go that far at this point, because I think it's enough to fix the problem in #1868.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1873",
        "comments": [
          "@usualoma Happy New Year!\r\n\r\nI think this way is good. And I also think we don't need `added from sub app` now. I'v left one comment, please check it.",
          "@yusukebe Happy New Year \ud83c\udf8d \r\nYou're right, I did change it! \r\n239db3d",
          "@usualoma \r\n\r\nThanks! I'll merge this now."
        ]
      },
      {
        "pr_number": 1853,
        "title": "fix(types): `JSONParsed` supports interface and `Date` etc.",
        "body": "Fixes #1842\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1853",
        "comments": ["I think we can merge this into main. Let's go."]
      }
    ],
    "v3.11.11": [
      {
        "pr_number": 1851,
        "title": "Refactor(test): update vitest settings",
        "body": "I have made these settings. \r\n\r\n~~1. Handling Vitest's type checking. This makes tsc --no-emit unnecessary.\r\nhttps://vitest.dev/config/#typecheck~~\r\n2. I don't think the Vitest configuration file is needed in tsconfig.build. I have listed similar items that I think are unnecessary, but please point out if I am mistaken.\r\n3.  Update from Vitest 1.04 to 1.10.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1851",
        "comments": [
          "Hi @watany-dev \r\n\r\nThanks!\r\n\r\nI've tried Vite's type checking before, but it did not work well, and also, with this PR, it doesn't catch the type errors.\r\n\r\n<img width=\"1045\" alt=\"Screenshot 2023-12-24 at 15 52 19\" src=\"https://github.com/honojs/hono/assets/10682/137adc92-68b9-4117-a492-154815656508\">\r\n\r\nI don't know if this setting is right or not. Anyway, if it can not check types, we have to keep using `tsc`.\r\n\r\n\r\n",
          "@yusukebe \r\nThank you for the review. Upon rechecking the typecheck tests for Vitest, it appears that '*.test-d.ts' is the scope, and it's not a complete substitute for tsc. I have reverted the changes.\r\nhttps://vitest.dev/guide/testing-types.html#testing-types",
          "> 2. I don't think the Vitest configuration file is needed in tsconfig.build. I have listed similar items that I think are unnecessary, but please point out if I am mistaken.\r\n\r\n~~We don't have to modify `tsconfig.build.json` because it is just for the build phase used in `build.ts`. Vitest uses `tsconfig.json`.~~\r\n\r\n@watany-dev \r\n\r\nSorry! I've misunderstood! It looks good!",
          "@watany-dev \r\n\r\nThanks. We can merge this!"
        ]
      },
      {
        "pr_number": 1861,
        "title": "fix(client): add missing properties to `ClientResponse`",
        "body": "Fixes #1857\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1861",
        "comments": []
      },
      {
        "pr_number": 1862,
        "title": "fix(req): avoid error when `req.queries()` receives unexpected values",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1862",
        "comments": []
      }
    ],
    "v3.11.10": [
      {
        "pr_number": 1852,
        "title": "fix(trie-router): pass params to the next node",
        "body": "Fixes #1847\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1852",
        "comments": []
      }
    ],
    "v3.11.9": [
      {
        "pr_number": 1828,
        "title": "Use vitest for fastly compute testing",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\nThis PR improves Fastly Compute runtime testing. I've created vite plugin for [fastly-js-compute runtime](https://github.com/ysugimoto/vite-plugin-fastly-js-compute) and use it in this PR.\r\n\r\nNo longer need `jest` so removes from dependencies and now all hono testings will run only `vitest`.\r\n\r\n<img width=\"1088\" alt=\"Screen Shot 2023-12-17 at 8 24 07\" src=\"https://github.com/honojs/hono/assets/1000401/8250778b-214a-425d-bf24-553d9173ec59\">\r\n\r\nHope this PR accelerates hono testing.\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1828",
        "comments": [
          "Hi @ysugimoto\r\n\r\nSuper great! This is exactly what we wanted to do.\r\n\r\nThere are two issues we need to address.\r\n\r\nFirst, please format the code to pass CI:\r\n\r\n```txt\r\nyarn format:fix\r\n```\r\n\r\nSecond, this test fails on Node.js 20.x:\r\n\r\n![SS](https://github.com/honojs/hono/assets/10682/f0fa21d3-b860-4c09-be54-e2f30c6a5105)\r\n\r\nThis failure is due to an issue with [vite-plugin-fastly-js-compute](https://github.com/ysugimoto/vite-plugin-fastly-js-compute). I've already created an issue for it:\r\n\r\nhttps://github.com/ysugimoto/vite-plugin-fastly-js-compute/issues/1\r\n\r\nEven after this issue is resolved and we use the fixed plugin, the following test will fail on Node.js 20.x because it doesn\u2019t throw an error. Node.js 20.x includes `crypto` and `crypto.subtle.importKey`.\r\n\r\n```ts\r\ndescribe('JWT Auth Middleware does not work', () => {\r\n  const app = new Hono()\r\n\r\n  it('Should throw error', () => {\r\n    expect(() => {\r\n      app.use('/jwt/*', jwt({ secret: 'secret' }))\r\n    }).toThrow(/`crypto.subtle.importKey` is undefined/)\r\n  })\r\n})\r\n```\r\n\r\nWe may need to update the test to support this condition and add a CI that runs on Node.js 20.x, not just 18.x. I\u2019ll work on it once this PR is merged.",
          "@yusukebe Thanks for the quick review!\r\n\r\n1. I have done to run `yarn format:fix`\r\n2. Skip `JWT Auth Middleware does not work` tests in nodejs 20 environment.\r\n\r\nJust to explain about 2, nodejs 20 has a native WebCrypto module as global and has many features.\r\nit would be fine but not fine in Fastly Compute runtime.\r\n\r\nFastly Runtime does not have WebCrypto features completely so the above test result is different in nodejs and Fastly Compute runtime (due to nodejs crypto having `crypto.subtle.importKey` function)\r\n\r\nTherefore, I mark whether this test should skip or not by checking `__fastlyComputeNodeDefaultCrypto` field, which comes from `vite-plugin-fastly-js-compute` - whether crypto is polyfill-ed or not.\r\n\r\nIf you have any unclear points or any other suggestions, let me know.\r\n",
          "@ysugimoto\r\n\r\n> Therefore, I mark whether this test should skip or not by checking the `__fastlyComputeNodeDefaultCrypto` field, which comes from `vite-plugin-fastly-js-compute` - to determine whether crypto is polyfilled or not.\r\n\r\nThis makes sense. You are right, we have to consider that Fastly Compute's `crypto` does not have all the features of Node's `crypto`, and using `__fastlyComputeNodeDefaultCrypto` is a smart idea.\r\n\r\nJust one thing. Please run `yarn lint:fix` to fix the lint error. After that, I'll merge it.",
          "Done to run `yarn lint:fix` \ud83d\udc4d ",
          "Thanks! Merging now."
        ]
      },
      {
        "pr_number": 1829,
        "title": "chore(package.json): remove `ts-jest`",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1829",
        "comments": []
      },
      {
        "pr_number": 1830,
        "title": "chore: upgrading vitest to v1.0",
        "body": "Sorry, I broke the reviewed working branch. Here are the fixes.\r\n\r\n- vitest to v1.0.4\r\n- @vitest/coverage-v8 to v1.0.4\r\n- Commented.\r\n    - ref: https://github.com/honojs/hono/pull/1817",
        "html_url": "https://github.com/honojs/hono/pull/1830",
        "comments": ["@watany-dev \r\n\r\nThanks! LGTM! Let's go!"]
      },
      {
        "pr_number": 1832,
        "title": "ci(bun): use `1.0.18`",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1832",
        "comments": []
      },
      {
        "pr_number": 1831,
        "title": "chore(utils): Move cf module",
        "body": "I've been wondering about this for a while, so I checked `utils/cloudflare` and realized that it would be better to put it as ` adapter/cloudflare-workers`. \r\n\r\nIf sharing with pages etc. is in the roadmap, this Refactor is not needed. \r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1831",
        "comments": [
          "Hi @watany-dev \r\n\r\nThis refactoring is good! It is used only for Cloudflare Workers; Pages does not use it. So we can go with it. Can you fix the error? Then, I'll merge it.",
          "@yusukebe \r\nAppreciate the review. Yes, I have fixed it, including the lint check.",
          "@yusukebe \r\nI tried Rename. Is this OK?",
          "Okay! Let's go with it!"
        ]
      },
      {
        "pr_number": 1839,
        "title": "fix(hono-base): make `onError` and `notFound` as class field",
        "body": "Fixes #1835\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1839",
        "comments": []
      }
    ],
    "v3.11.8": [
      {
        "pr_number": 1820,
        "title": "chore: bump `devDependencies`",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1820",
        "comments": []
      },
      {
        "pr_number": 1819,
        "title": "chore(`tsconfig.json`): use `vitest/globals` for types",
        "body": "Now, tests are Vitest-base.\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1819",
        "comments": []
      },
      {
        "pr_number": 1821,
        "title": "fix(factory): infer a merged path correctly",
        "body": "Reproduce: https://gist.github.com/sor4chi/a488b66c25017b228b6f45875157a073\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1821",
        "comments": []
      },
      {
        "pr_number": 1826,
        "title": "feat(helper/html): Support Promise<string | HtmlEscapedString> in html tagged template literals",
        "body": "This PR allows `Promise<string | HtmlEscapedString>` to be passed to the `html` tagFunction variables as well.\r\n\r\nFixes: #1812\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1826",
        "comments": [
          "@yusukebe @Code-Hex \r\nWould you please review?",
          "Great! LGTM!"
        ]
      }
    ],
    "v3.11.7": [
      {
        "pr_number": 1815,
        "title": "chore: use `@hono/eslint-config`",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1815",
        "comments": []
      },
      {
        "pr_number": 1816,
        "title": "chore: bump up `@hono/eslint-config`",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1816",
        "comments": []
      }
    ],
    "v3.11.6": [
      {
        "pr_number": 1814,
        "title": "fix(context): set `status` correctly",
        "body": "Fixes #1813\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1814",
        "comments": []
      }
    ],
    "v3.11.5": [
      {
        "pr_number": 1808,
        "title": "fix(context): set headers values correctly",
        "body": "In `context.ts`, I fixed a bug where header values were not set correctly if `#this.headers` was set and the `arg` was of type `ResponseInit`.\r\n\r\nRelated to #1807\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1808",
        "comments": []
      },
      {
        "pr_number": 1809,
        "title": "docs(readme): update `hono/tiny` size",
        "body": "Hono have grown.\r\nI checked the size of `hono/tiny` with following the command.\r\n```sh\r\nnpx esbuild --outdir=dist --bundle --minify ./src/preset/tiny.ts\r\n```\r\n### Result\r\n```sh\r\nnpx esbuild --outdir=dist --bundle --minify ./src/preset/tiny.ts\r\n\r\n  dist\\tiny.js  13.9kb\r\n\r\n\u26a1 Done in 12ms\r\n```\r\nBased on the above result, I update the size in readme.\r\nMinimal app may exceed 14kb.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1809",
        "comments": [
          "@ryuapp \r\n\r\nYou are right! Thanks, I'll merge it now."
        ]
      },
      {
        "pr_number": 1806,
        "title": "fix(context): `c.json()` allows object and returns JSONParsed<T>",
        "body": "Fixes #1800\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1806",
        "comments": [
          "@DeanMauro Thank you for reviewing.\r\n\r\nI'll merge it now."
        ]
      }
    ],
    "v3.11.4": [
      {
        "pr_number": 1794,
        "title": "fix(client): `c.json()` supports `undefined`/`null` response",
        "body": "Fixes #1793\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1794",
        "comments": []
      }
    ],
    "v3.11.3": [
      {
        "pr_number": 1785,
        "title": "fix(base): name `private _basePath` instead of `#basePath`",
        "body": "Fixes https://github.com/honojs/middleware/issues/290\r\n\r\nTo maintain compatibility with Zod OpenAPI Hono, change the `basePath` property to `private _basePath` instead of using `#basePath`. Using `#basePath` causes issues in Zod OpenAPI Hono, as seen in https://github.com/honojs/middleware/issues/290.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1785",
        "comments": []
      },
      {
        "pr_number": 1786,
        "title": "fix(client): make `ClientResponse.json()` returns Union correctly",
        "body": "Fixes #1783\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1786",
        "comments": []
      },
      {
        "pr_number": 1788,
        "title": "fix: add missing tail to svg regex",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\ncloses #1787",
        "html_url": "https://github.com/honojs/hono/pull/1788",
        "comments": ["@eliasbrange \r\n\r\nLooks good! Thanks!"]
      }
    ],
    "v3.11.2": [
      {
        "pr_number": 1778,
        "title": "fix(types): Added `E` env type argument to `showRoutes` & `inspectRoutes` `hono` parameter",
        "body": "### What's been changed?\r\n\r\n - Updated `showRoutes` deprecated doc comments to provide the correct import path (`/dev` instead of `/helper`)\r\n - Added `TEnv` type argument to both `showRoutes` & `inspectRoutes` helpers & passed to the first (`hono: Hono`) parameter. \r\n\t - This fixes a type error where if you pass in a Hono instance with a custom environment type these 2 functions will complain as it does not match the default / base `Hono` type(s).\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1778",
        "comments": [
          "Hi @NuroDev !\r\n\r\nGood fix! I've left one comment. Check it!",
          "@NuroDev \r\n\r\nI'll merge this and will release the latest patch version soon. I appreciate your contribution!"
        ]
      }
    ],
    "v3.11.1": [
      {
        "pr_number": 1776,
        "title": "fix(context): Strict type checking `c.json()`",
        "body": "This PR implements stricter type checking for the return values of `c.json()`.\r\n\r\nIn PR #1728, we initially agreed that the type of `c.json()` should be \"Loosely like `c.json()`.\"\r\n\r\nhttps://github.com/honojs/hono/pull/1728#issuecomment-1831888340\r\n\r\nHowever, after reconsidering and reviewing issue #1775, I've decided to change it to \"Strictly like `c.jsonT()`.\"\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1776",
        "comments": []
      }
    ],
    "v3.11.0": [
      {
        "pr_number": 1714,
        "title": "Introduce `ErrorBoundary` component",
        "body": "This PR will accomplish the following\r\n\r\n### Support `Suspense` in non-streaming mode.\r\n\r\n`Suspense` can also be used in a non-streaming configuration. In this case, the output HTML does not contain any JavaScript, but is the text that has been replaced.\r\n\r\nHowever, now that async components are available in Hono, this feature has no particular advantage. It may be useful for users who are used to \"throw a Promise in `Suspense`\".\r\n\r\n```tsx\r\nconst app = new Hono()\r\n\r\nlet shop\r\nfunction Shop({ id }) {\r\n  if (!shop) {\r\n    throw fetch(`https://ramen-api.dev/shops/${id}`).then((res) => res.json()).then((data) => shop = data.shop)\r\n  }\r\n  return <div>{shop.name}</div>\r\n}\r\n\r\napp.get('/suspense-non-streaming', async (c) => {\r\n  return c.html(\r\n    <html>\r\n      <body>\r\n        <Suspense fallback={<div>Loading...</div>}>\r\n          <Shop id=\"takasagoya\" />\r\n        </Suspense>\r\n      </body>\r\n    </html>\r\n  )\r\n})\r\n```\r\n\r\n### Introduce `ErrorBoundary` component.\r\n\r\nThis is more of a main issue, adding an ErrorBoundary that can be replaced by a fallback when an error occurs in the processing of children.\r\nThis is true for synchronous rendering, asynchronous rendering including async, and streaming, all of which produce the same expected results in all environments.\r\n\r\nhttps://github.com/honojs/hono/assets/30598/72d21b6d-01ef-4d92-96c2-2f6b61af3219\r\n\r\n```tsx\r\nconst app = new Hono()\r\n\r\nasync function Shop({ id }) {\r\n  const data = await fetch(`https://ramen-api.dev/shops/${id}`).then((res) => res.json())\r\n  return <div>{data.shop.name}</div>\r\n}\r\n\r\nfunction SyncError() {\r\n  throw new Error('Error')\r\n}\r\n\r\nasync function AsyncError() {\r\n  await new Promise((resolve) => setTimeout(resolve, 2000))\r\n  throw new Error('Error')\r\n}\r\n\r\nfunction Fallback() {\r\n  return <div>Out Of Service</div>\r\n}\r\n\r\napp.get('/sync', async (c) => {\r\n  return c.html(\r\n    <html>\r\n      <body>\r\n        <ErrorBoundary fallback={<Fallback />}>\r\n          <SyncError />\r\n        </ErrorBoundary>\r\n      </body>\r\n    </html>\r\n  )\r\n})\r\n\r\napp.get('/async', async (c) => {\r\n  return c.html(\r\n    <html>\r\n      <body>\r\n        <ErrorBoundary fallback={<Fallback />}>\r\n          <Shop id='takasagoya' />\r\n        </ErrorBoundary>\r\n        <ErrorBoundary fallback={<Fallback />}>\r\n          <AsyncError />\r\n        </ErrorBoundary>\r\n      </body>\r\n    </html>\r\n  )\r\n})\r\n\r\napp.get('/streaming-suspense-all', async (c) => {\r\n  return c.body(\r\n    renderToReadableStream(\r\n      <html>\r\n        <body>\r\n          <ErrorBoundary fallback={<Fallback />}>\r\n            <Suspense fallback={<div>Loading...</div>}>\r\n              <Shop id='takasagoya' />\r\n            </Suspense>\r\n            <Suspense fallback={<div>Loading...</div>}>\r\n              <Shop id='sugitaya' />\r\n            </Suspense>\r\n            <Suspense fallback={<div>Loading...</div>}>\r\n              <AsyncError />\r\n            </Suspense>\r\n          </ErrorBoundary>\r\n        </body>\r\n      </html>\r\n    ),\r\n    {\r\n      headers: {\r\n        'Transfer-Encoding': 'chunked',\r\n        'Content-Type': 'text/html; charset=UTF-8',\r\n      },\r\n    }\r\n  )\r\n})\r\n\r\napp.get('/streaming-suspense-each', async (c) => {\r\n  return c.body(\r\n    renderToReadableStream(\r\n      <html>\r\n        <body>\r\n          <ErrorBoundary fallback={<Fallback />}>\r\n            <Suspense fallback={<div>Loading...</div>}>\r\n              <Shop id='takasagoya' />\r\n            </Suspense>\r\n          </ErrorBoundary>\r\n          <ErrorBoundary fallback={<Fallback />}>\r\n            <Suspense fallback={<div>Loading...</div>}>\r\n              <Shop id='sugitaya' />\r\n            </Suspense>\r\n          </ErrorBoundary>\r\n          <ErrorBoundary fallback={<Fallback />}>\r\n            <Suspense fallback={<div>Loading...</div>}>\r\n              <AsyncError />\r\n            </Suspense>\r\n          </ErrorBoundary>\r\n        </body>\r\n      </html>\r\n    ),\r\n    {\r\n      headers: {\r\n        'Transfer-Encoding': 'chunked',\r\n        'Content-Type': 'text/html; charset=UTF-8',\r\n      },\r\n    }\r\n  )\r\n})\r\n```\r\n\r\n### Is this a necessary feature for Hono?\r\n\r\nA component named ErrorBoundary is introduced in the official React documentation, but it is not provided complete and is to be created by the user as needed. However, there seems to be an OSS that is very widely used.\r\n\r\nhttps://react.dev/reference/react/Component\r\nhttps://github.com/bvaughn/react-error-boundary\r\n\r\nPersonally, I would prefer to refrain from original extensions that are not in the original React, but on the other hand, I think that `ErrorBoundary` is useful enough and worth providing officially, as it would be difficult for users to implement it by themselves.\r\n\r\n\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1714",
        "comments": [
          "@yusukebe What do you think about this PR?",
          "@usualoma \r\n\r\nThanks. I'll check this later.",
          "This PR may close this issue #1705.",
          "Hi @usualoma \r\n\r\nWith this current code, is `Suspense` working correctly?",
          "@yusukebe Thanks!\r\n\r\nI have confirmed Suspense behavior without ErrorBoundary with the following code.\r\nDo you have a code that doesn't work?\r\n\r\n```tsx\r\nimport { Hono } from './src/hono'\r\nimport { jsx } from './src/jsx'\r\nimport { Suspense, renderToReadableStream } from './src/jsx/streaming'\r\n\r\nconst app = new Hono()\r\n\r\nconst AsyncMoreComponent = async () => {\r\n  await new Promise((resolve) => setTimeout(resolve, 2000))\r\n  const data = await (await fetch('https://ramen-api.dev/shops/takasagoya')).json()\r\n  return <span>{data.shop.name}</span>\r\n}\r\n\r\nconst AsyncComponent = async () => {\r\n  await new Promise((resolve) => setTimeout(resolve, 2000))\r\n  const data = await (await fetch('https://ramen-api.dev/shops/yoshimuraya')).json()\r\n  return (\r\n    <p>\r\n      I like {data.shop.name} and{' '}\r\n      <Suspense fallback={<span>...</span>}>\r\n        <AsyncMoreComponent />\r\n      </Suspense>{' '}\r\n      \ud83c\udf5c\r\n    </p>\r\n  )\r\n}\r\n\r\napp.get('/', async (c) => {\r\n  const stream = renderToReadableStream(\r\n    <html>\r\n      <body>\r\n        <h1>SSR Streaming</h1>\r\n        <Suspense fallback={<p>loading...</p>}>\r\n          <AsyncComponent />\r\n        </Suspense>\r\n      </body>\r\n    </html>\r\n  )\r\n  return c.body(stream, {\r\n    headers: {\r\n      'Transfer-Encoding': 'chunked',\r\n      'Content-Type': 'text/html; charset=UTF-8',\r\n    },\r\n  })\r\n})\r\n\r\nexport default app\r\n```\r\n\r\n```\r\n% npx wrangler dev suspense.tsx\r\n```\r\n\r\n\r\nhttps://github.com/honojs/hono/assets/30598/a09471c3-ab6e-473f-aed7-0a9bb0f426c4\r\n\r\n",
          "@usualoma \r\n\r\nAh, I made a mistake when importing `jsx`. It works well now!",
          "@usualoma\r\n\r\nI've tried using it and like the feel of it. This is a great feature!\r\n\r\nHowever, I'm considering an alternative syntax. While I appreciate the functionality of `ErrorBoundary`, I don't want write many `<ErrorBoundary>...</ErrorBoundary>`.\r\n\r\n```tsx\r\n  <>\r\n    <ErrorBoundary fallback={<Fallback />}>\r\n      <Suspense fallback={<div>Loading...</div>}>\r\n        <Shop id='takasagoya' />\r\n      </Suspense>\r\n    </ErrorBoundary>\r\n    <ErrorBoundary fallback={<Fallback />}>\r\n      <Suspense fallback={<div>Loading...</div>}>\r\n        <Shop id='sugitaya' />\r\n      </Suspense>\r\n    </ErrorBoundary>\r\n    <ErrorBoundary fallback={<Fallback />}>\r\n      <Suspense fallback={<div>Loading...</div>}>\r\n        <Shop id='yoshimuraya' />\r\n      </Suspense>\r\n    </ErrorBoundary>\r\n    <ErrorBoundary>...</ErrorBoundary>\r\n  </>\r\n```\r\n\r\nTo simplify, what about passing `Fallback` as an attribute, maybe named `onError`?\r\n\r\n```tsx\r\n  <>\r\n    <Suspense fallback={<div>Loading...</div>} onError={<Fallback />}>\r\n      <Shop id='takasagoya' />\r\n    </Suspense>\r\n    <Suspense fallback={<div>Loading...</div>} onError={<Fallback />}>\r\n      <Shop id='sugitaya' />\r\n    </Suspense>\r\n    <Suspense fallback={<div>Loading...</div>} onError={<Fallback />}>\r\n      <Shop id='yoshimuraya' />\r\n    </Suspense>\r\n  </>\r\n```\r\n\r\nIt would also be useful to apply `onError` to `Fragment`:\r\n\r\n```tsx\r\n  <Fragment onError={<Fallback />}>\r\n    <Suspense fallback={<div>Loading...</div>}>\r\n      <Shop id='takasagoya' />\r\n    </Suspense>\r\n    <Suspense fallback={<div>Loading...</div>}>\r\n      <Shop id='sugitaya' />\r\n    </Suspense>\r\n    <Suspense fallback={<div>Loading...</div>}>\r\n      <Shop id='yoshimuraya' />\r\n    </Suspense>\r\n  </Fragment>\r\n```\r\n\r\nAnd for cases without `Suspense`, it would be nice to write like this:\r\n\r\n```tsx\r\n<Component onError={<Fallback />} />\r\n```\r\n\r\nI prefer this syntax as it reduces nesting and complexity though this is a just idea.",
          "@yusukebe \r\n\r\nAh, yes, I know exactly what you mean. I, too, wondered, \"Is it best practice to write an ErrorBoundary every time we use Suspense?\" I have been wondering about this question.\r\n\r\nRegarding this, in Hono and React (18.3.0 or later?) I think the following code is OK since the expected result is achieved with `async`/`await` in Suspense when using\r\n\r\n(One might argue that \"it is more declarative to specify with onError.\")\r\n\r\n```tsx\r\nconst Shop = async ({id}) => {\r\n  try {\r\n    const data = await fetch(`https://ramen-api.dev/shops/${id}`).then((res) => res.json())\r\n    return <div>{data.shop.name}</div>\r\n  }\r\n  catch {\r\n    return <Fallback />;\r\n  }\r\n};\r\n<Suspense fallback={<div>Loading...</div>}>\r\n   <Shop id='takasagoya' />\r\n</Suspense>\r\n```\r\n\r\nAlso, regarding the Fragment thing, the same experience can be had by rewriting Fragment to ErrorBoundary (which can be done in this PR branch), but is it different?\r\n\r\n```tsx\r\n  <Fragment onError={<Fallback />}>\r\n    ...\r\n  </Fragment>\r\n```\r\n\r\nto\r\n\r\n```tsx\r\n<ErrorBoundary fallback={<Fallback />}>\r\n  <Suspense fallback={<div>Loading...</div>}>\r\n    <Shop id='takasagoya' />\r\n  </Suspense>\r\n  <Suspense fallback={<div>Loading...</div>}>\r\n    <Shop id='sugitaya' />\r\n  </Suspense>\r\n  <Suspense fallback={<div>Loading...</div>}>\r\n    <Shop id='yoshimuraya' />\r\n  </Suspense>\r\n</ErrorBoundary>\r\n```\r\n\r\nMy conclusion at this point is that implementing onError is a premature optimization. It would be better only to implement ErrorBoundary in this PR, and if it is still necessary after using it for a while, then add something like onError at that time.",
          "Hi @usualoma \r\n\r\n> My conclusion at this point is that implementing onError is a premature optimization. It would be better only to implement ErrorBoundary in this PR, and if it is still necessary after using it for a while, then add something like onError at that time.\r\n\r\nFully agree! Let's add the `ErrorBoundary` first. Could you please prepare this PR for review, even though it's almost ready?",
          "@yusukebe\r\nOK, I need to do some refactoring and add some tests, so please wait a bit.",
          "@yusukebe \r\nReady for review!\r\n\r\n### Exported from top level\r\n\r\nErrorBoundary is a major component, and it is difficult to understand if the import source is separated (e.g., 'hono/jsx/utils'), so I decided to export from the top level. When it is minified, it will be removed by tree shaking if not used, so I do not see a problem with its inclusion in the top level here.\r\n\r\n```\r\nimport { ErrorBoundary } from 'hono/jsx'\r\n```\r\n\r\n### `onError` and `fallbackRender`\r\n\r\nThe concepts of `onError` and `fallbackRender` are taken from the react-error-boundary.  These can be used to output error logs, display fallbacks according to the error contents, etc.\r\n\r\nhttps://github.com/bvaughn/react-error-boundary#logging-errors-with-onerror\r\nhttps://github.com/bvaughn/react-error-boundary#errorboundary-with-fallbackrender-prop\r\n\r\n### Why support both synchronous and asynchronous rendering?\r\n\r\nA lot of additional code is needed to support both. But I still see value in supporting both. Because if there is an \"independent component\", whether it is handled synchronously or asynchronously may depend on the request handler that renders it.\r\n\r\n### Do you really need to use `ErrorBoundary`?\r\n\r\nOne thing I would like to add.\r\nI am sure this component is beneficial, but when using it, please consider whether it is appropriate to use `ErrorBoundary`. For `jsx` components processed on the server side, the fact that an error occurs in the View is most likely because the View contains business logic. In general, it is better to have the business logic in the process before the View, so when using `ErrorBoundary`, it is better to consider whether the View should supplement the error or not.",
          "### `onError`\r\n\r\nYou can write the following to record errors that occur in a component.\r\n\r\n```tsx\r\n      <html>\r\n        <body>\r\n          <ErrorBoundary fallback={<Fallback />} onError={(e) => console.log(e)}>\r\n            <Suspense fallback={<div>Loading...</div>}>\r\n              <Shop id='takasagoya' />\r\n            </Suspense>\r\n          </ErrorBoundary>\r\n        </body>\r\n      </html>\r\n```\r\n\r\n### `fallbackRender`\r\n\r\nYou can write the following to output fallback according to the content of the error.\r\n\r\n```tsx\r\n      <html>\r\n        <body>\r\n          <ErrorBoundary fallbackRender={(e:Error) => <div>Got an error: {e.message}</div>}>\r\n            <Suspense fallback={<div>Loading...</div>}>\r\n              <Shop id='takasagoya' />\r\n            </Suspense>\r\n          </ErrorBoundary>\r\n        </body>\r\n      </html>\r\n```",
          "This is fantastic!",
          "@usualoma \r\n\r\nPlease wait a moment for reviewing. I'm busy to check other issues and PRs."
        ]
      },
      {
        "pr_number": 1710,
        "title": "feat(adaptor): Enhance AWS Lambda Event Handling and Interface",
        "body": "fixed https://github.com/honojs/hono/issues/1620\r\n\r\nTo provide full access to the Event, which is the input for AWS Lambda, the following modifications have been made:\r\n\r\n## 1. Review of the Event\r\n- Confirmed that having API Gateway versions 1.0 and 2.0 is sufficient after reviewing the specifications. The official documentation states that the Event for the traditional Lambda URL is same to version 2.0.\r\n  - [APIgw event](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-lambda.html)\r\n  - [Lambda URL event](https://docs.aws.amazon.com/lambda/latest/dg/urls-invocation.html#urls-payloads)\r\n\r\n- Added missing properties in the Event Interface.\r\n\r\n- Renamed the externally exported `LambdaFunctionUrlRequestContext` to `ApiGatewayRequestContextV2` for name alignment with Event.\r\n  - This is a breaking change, so concurrently using the old name's copied Type for a certain period might be beneficial.\r\n\r\n## 2. Access to the Event\r\n- Defined as `export type LambdaEvent = APIGatewayProxyEvent | APIGatewayProxyEventV2` and exported in the index.\r\n  - Allows users to specify using Bindings.\r\n\r\n## 3. Discontinuation of requestContext (Not Yet Implemented)\r\n- Currently obtained as follows, which is cumbersome as it requires users to choose between v1 and v2 for the request context.\r\n\r\n```typescript\r\nimport { Hono } from 'hono'\r\nimport type { ApiGatewayRequestContext } from 'hono/aws-lambda'\r\nimport { handle } from 'hono/aws-lambda'\r\n\r\ntype Bindings = {\r\n  requestContext: ApiGatewayRequestContext \r\n}\r\n\r\nconst app = new Hono<{ Bindings: Bindings }>()\r\n\r\napp.get('/custom-context/', (c) => {\r\n  const lambdaContext = c.env.requestContext\r\n  return c.json(lambdaContext)\r\n})\r\n\r\nexport const handler = handle(app)\r\n```\r\n\r\nWith access to the event now available, this can be rewritten simply. Also, the internal unnecessary logic getRequestContext(event) can be removed.\r\n\r\n```typescript\r\nimport { Hono } from 'hono'\r\n// import type { ApiGatewayRequestContext } from 'hono/aws-lambda'\r\nimport type { LambdaEvent } from 'hono/aws-lambda'\r\nimport { handle } from 'hono/aws-lambda'\r\n\r\ntype Bindings = {\r\n  event: LambdaEvent \r\n//   requestContext: ApiGatewayRequestContext \r\n}\r\n\r\nconst app = new Hono<{ Bindings: Bindings }>()\r\n\r\napp.get('/custom-context/', (c) => {\r\n//   const lambdaContext = c.env.requestContext\r\n  const lambdaContext = c.env.event.requestContext\r\n  return c.json(lambdaContext)\r\n})\r\n\r\nexport const handler = handle(app)\r\n\r\n```\r\nIf the removal of requestContext is approved, a comment like \"Remove in Hono V4\" can be added.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1710",
        "comments": [
          "Hi @watany-dev \r\n\r\nI'll review this later. It will be merged into a \"next\" branch because this will be new feature. ",
          "Hi @watany-dev !\r\n\r\nCould you fix the conflict? After fixing it, I'll merge this into a \"next\" branch for the `v3.11.0`.",
          "@yusukebe \nThanks. I fixed it.",
          "@yusukebe \r\nYes, I was able to indicate the deprecation to the user.",
          "After fully supporting the API Gateway V1 event, we found that the traditional support for ALB was no longer possible. Therefore, we have defined a new schema.",
          "Hi @watany-dev \r\n\r\nSorry for the late reply. I am sick in bed right now. Will review when I'm better. Thanks.",
          "@watany-dev \r\n\r\nI'm back. This great! Let's go with it.",
          "Hi @watany-dev \r\n\r\nI'll release the new version `v3.11.0` soon. If there are any descriptions on the website that need updating, could you please create a PR for them?",
          "@yusukebe \r\nOK! I wrote this Update\r\nhttps://github.com/honojs/website/pull/172",
          "@watany-dev \r\n\r\nThanks!"
        ]
      },
      {
        "pr_number": 1774,
        "title": "Next",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1774",
        "comments": []
      },
      {
        "pr_number": 1735,
        "title": "feat(types): Support types until 10 handlers",
        "body": "Handle until 10 handlers on `app.method([path], ...handlers)` by simple adding more overloads.\r\n\r\nThis is not optimal by far. I'm compromised to find a better and beautiful solution, but until then I think this will cover more use cases, like I'm personally facing now.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [X] Add tests\r\n- [X] Run tests\r\n- [X] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1735",
        "comments": [
          "Hi @gabrielDonnantuoni !\r\n\r\nThank you for this PR. As you mentioned, while it may not be the best solution, it seems to be the only way available. It looks good, and I'll review the details later.",
          "`OnHandlerInterface` updated, @yusukebe \ud83e\udd1d ",
          "@gabrielDonnantuoni\r\n\r\nGreat work!\r\n\r\nSince this is a new feature, I'll merge it into the \"[next](https://github.com/honojs/hono/tree/next)\" branch for the upcoming minor release `v3.11.0`. It will be released later.\r\n\r\nThank you very much."
        ]
      },
      {
        "pr_number": 1743,
        "title": "feat: introduce `createFactory()` and `createHandlers()`",
        "body": "I made #1722 a draft and create this new PR instead it.\r\n\r\nThis PR introduce `Factory` class, `createFactory()`, and `createHandlers()` in `Factory` exported from `hono/factory`.\r\n\r\n```ts\r\nimport { createFactory } from 'hono/factory'\r\nimport { logger } from 'hono/logger'\r\n\r\nconst factory = createFactory<Env>()\r\n\r\nconst middleware = factory.createMiddleware(async (c, next) => {\r\n  c.set('foo', 'bar')\r\n  await next()\r\n})\r\n\r\nconst handlers = factory.createHandlers(logger(), middleware, (c) => {\r\n  return c.json(c.var.foo)\r\n})\r\n\r\napp.get('/api', ...handlers)\r\n```\r\n\r\nThis is useful for defining handlers outside of `app.get('/api', ...)`. Using this approach, you can structure your application in a Ruby on Rails-like Controller pattern, as discussed in #1072.\r\n\r\nA key feature is its ability to correctly infer types.\r\n\r\n<img width=\"534\" alt=\"Screenshot 2023-11-29 at 5 56 32\" src=\"https://github.com/honojs/hono/assets/10682/68027eda-d442-4562-89ff-285d6ddd43be\">\r\n\r\n### Why we can't call `createHandlers()`directly\r\n\r\nIdeally, you might write shortly as follows:\r\n\r\n```ts\r\nimport { createHandlers } from 'helper/factory'\r\n```\r\n\r\nHowever, there is a problem that passing `Env` as follows will break other types:\r\n\r\n```ts\r\ncreateHandlers<Env>()\r\n```\r\n\r\n### `createMiddleware()`\r\n\r\nYou can use `createMiddleware` as before:\r\n\r\n```ts\r\nimport { createMiddleware } from 'helper/factory'\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1743",
        "comments": [
          "Hi @usualoma \r\n\r\nPlease review this one!",
          "@usualoma \r\n\r\nThanks! I'll merge this into the \"next\" later."
        ]
      },
      {
        "pr_number": 1748,
        "title": "feat(context): remove `experimental` from `c.render`/`c.setRenderer()`",
        "body": "Closes #1709\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1748",
        "comments": []
      },
      {
        "pr_number": 1749,
        "title": "feat/allow `bearerAuth` to accept a list of token strings",
        "body": "This PR enables the `bearerAuth` middleware to accept a list of strings. It retains the current-state ability to accept a single string (I.e., **not** a breaking change).\r\n\r\nThis enables simple usage of multiple tokens of varying privileges. A trivial example is below.\r\n\r\n```ts\r\nconst rToken = 'read'\r\nconst pToken = 'read+write'\r\nconst validTokens = [rToken, pToken]\r\n\r\napi.use('/posts/:id', async (c, next) => {\r\n  // PATCH and DELETE require the privileged token\r\n  if (c.event.request.method === 'PATCH' || c.event.request.method === 'DELETE') {\r\n    const bearer = bearerAuth({ token: pToken });\r\n    return bearer(c, next);\r\n  }\r\n  // GET works with any valid token\r\n  const bearer = bearerAuth({ token: validTokens });\r\n  return bearer(c, next);\r\n});\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno",
        "html_url": "https://github.com/honojs/hono/pull/1749",
        "comments": [
          "Hi @mstibbard,\r\n\r\nAwesome! I really like this feature. The implementation is good, and I appreciate that you included tests.\r\n\r\nThere's one thing. Could you please run `yarn denoify` and then git add, commit, and push the generated file?\r\n\r\n@usualoma,\r\n\r\nWould you mind reviewing this?",
          "Thanks @mstibbard!\r\nI think it is a necessary feature and a good implementation!",
          "> There's one thing. Could you please run `yarn denoify` and then git add, commit, and push the generated file?\r\n\r\nDone :) I did run it but saw it added a lot of files so I didn't commit them!",
          "@mstibbard \r\n\r\nAh, the tests files are not needed in the `deno_dist`.",
          "@yusukebe third time is the charm? \ud83d\ude06 ",
          "@mstibbard \r\n\r\nYessss! Great!\r\n\r\nFirst, I'll merge this into \"next\" branch for the next minor version `v3.11.0` while this is new feature. It will be released in a while.\r\n\r\nThank you very much!\r\n"
        ]
      },
      {
        "pr_number": 1716,
        "title": "Introduce `inspectRoutes()` and `showRoutes()`",
        "body": "Introduce `showRoutes()` and `captureRouteStackTrace()`.\r\n\r\nIf it were only \"simple to externalize showRoutes(),\" it might be too much functionality, but this is how I implemented it for now.\r\n\r\nAs for the file name and line number with routing added would be of little use in a small application, but I am trying to add something valuable to the development. (The line numbers shift a bit in Bun. Node.js does not output the line numbers because it minifies them before executing them, while Deno outputs the correct information.)\r\n\r\n\r\n### How it works?\r\n\r\n```ts\r\nimport { captureRouteStackTrace, showRoutes } from './src/helper/dev'\r\nimport { createMiddleware } from './src/helper/factory'\r\nimport { Hono } from './src/hono'\r\nimport { basicAuth } from './src/middleware/basic-auth'\r\nimport { logger } from './src/middleware/logger'\r\n\r\nconst app = new Hono()\r\n\r\nif (process.env.HONO_ENV === 'development') {\r\n  captureRouteStackTrace(app)\r\n}\r\n\r\napp.use('*', logger())\r\napp.get('/', basicAuth({ username: 'foo', password: 'bar' }), (c) => c.text('hi'))\r\napp.get(\r\n  '/mw',\r\n  createMiddleware((c, next) => next()),\r\n  (c) => c.text('hi')\r\n)\r\n\r\nif (process.env.HONO_ENV === 'development') {\r\n  showRoutes(\r\n    app,\r\n    process.argv[2] === '--show-list' ? { includeMiddleware: true, showList: true } : undefined\r\n  )\r\n}\r\n\r\nexport default app\r\n```\r\n\r\n```\r\n% HONO_ENV=development bun run app.ts # default\r\nGET       /\r\nGET       /mw\r\n% HONO_ENV=development bun run app.ts --show-list\r\nALL       /*\r\n             logger        /Users/taku/src/github.com/honojs/hono/app.ts:13:0\r\nGET       /    \r\n             basicAuth     /Users/taku/src/github.com/honojs/hono/app.ts:14:0\r\n             [handler]     /Users/taku/src/github.com/honojs/hono/app.ts:14:0\r\nGET       /mw  \r\n             [middleware]  /Users/taku/src/github.com/honojs/hono/app.ts:21:2\r\n             [handler]     /Users/taku/src/github.com/honojs/hono/app.ts:21:2\r\n```\r\n\r\nor\r\n\r\n```ts\r\nimport { captureRouteStackTrace, showRoutes } from './src/helper/dev'\r\nimport { createMiddleware } from './src/helper/factory'\r\nimport { Hono } from './src/hono'\r\nimport { basicAuth } from './src/middleware/basic-auth'\r\nimport { logger } from './src/middleware/logger'\r\n\r\nconst app = new Hono()\r\n\r\napp.use('*', logger())\r\napp.get('/', basicAuth({ username: 'foo', password: 'bar' }), (c) => c.text('hi'))\r\napp.get(\r\n  '/mw',\r\n  createMiddleware((c, next) => next()),\r\n  (c) => c.text('hi')\r\n)\r\n\r\nif (process.env.HONO_ENV === 'development') {\r\n  app.get('/show-routes', (c) => {\r\n    let html = '<table><tr><th>Method</th><th>Path</th></tr>'\r\n    showRoutes(app, {\r\n      writer: ({ method, path }) => {\r\n        html += `<tr><td>${method}</td><td>${path}</td></tr>`\r\n      },\r\n    })\r\n    html += '</table>'\r\n    return c.html(html)\r\n  })\r\n}\r\n\r\nexport default app\r\n```\r\n\r\n```\r\n% curl http://localhost:3000/show-routes\r\n<table><tr><th>Method</th><th>Path</th></tr><tr><td>GET</td><td>/</td></tr><tr><td>GET</td><td>/mw</td></tr><tr><td>GET</td><td>/show-routes</td></tr></table>\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1716",
        "comments": [
          "Hi @yusukebe!\r\nWould you please give your opinion?",
          "@usualoma \r\n\r\nWoooow, capturing the line from the Error stack trace! Haha cool idea! It's \"too much\" as you said, but I like it. And using a named function in built-in or 3rd-party middleware to get the middleware name is good.\r\n\r\n> Node.js does not output the line numbers because it minifies them before executing them\r\n\r\nThis matter might be resolved if it supports adding sourcemap #1712. \r\n\r\nAnd we can refer to this project: https://github.com/azu/express-router-dependency-graph\r\n\r\nOverall, it almost looks good. Let's move forward with this.",
          "I can't imagine the specific use-cases right now, but the JSON output function which that project has is interesting.",
          "Hi @yusukebe!\r\n\r\nThanks for your comment.\r\nI learned about https://github.com/azu/express-router-dependency-graph; that's helpful.\r\n\r\nAh, it would be more convenient if it were provided in CLI. The following code is not beautiful (not terrible).\r\n\r\n```\r\nif (process.env.HONO_ENV === 'development') {\r\n  captureRouteStackTrace(app)\r\n}\r\n```\r\n\r\nThe \"app.ts\" contains only the production code, and if you run the following in CLI, `captureRouteStackTrace` will run internally, and you will get the following output, which may be what we need.\r\n\r\n```\r\n$ hono-inspect-routes --show-list app.ts\r\nALL       /*\r\n             logger        /Users/taku/src/github.com/honojs/hono/app.ts:13:0\r\nGET       /    \r\n             basicAuth     /Users/taku/src/github.com/honojs/hono/app.ts:14:0\r\n             [handler]     /Users/taku/src/github.com/honojs/hono/app.ts:14:0\r\nGET       /mw  \r\n             [middleware]  /Users/taku/src/github.com/honojs/hono/app.ts:21:2\r\n             [handler]     /Users/taku/src/github.com/honojs/hono/app.ts:21:2\r\n```\r\n\r\nIt would be better to add `--format=json` so that the output is in JSON format.",
          "Hi @yusukebe!\r\n\r\nI thought about it for a while, but I will complete `showRoutes()` as a helper, as a very simple function in this PR.\r\n\r\nI think `captureRouteStackTrace()` is an interesting idea, but the call `captureRouteStackTrace(app)` just doesn't seem pretty, so I'd like to think about it more calmly.\r\n\r\nI added `inspectRoutes(app)` as an alternative for users who want to get output in JSON format.\r\n\r\nHow about this as a PR for solving #676?",
          "Hi @usualoma \r\n\r\nSorry for the late reply. I am sick in bed. Will comment when I'm better.",
          "@yusukebe \r\nTake care and don't worry about the PR.",
          "Hi @usualoma,\r\n\r\nIt's great to make this simple! I'm trying to use this feature now.\r\n\r\nWe need to test the application with a lot of routes. For example, I've tried the [isucon13 applications](https://github.com/isucon/isucon13/tree/main/webapp/node).\r\n\r\nCurrent `app.showRoutes()`, many lines!:\r\n\r\n![Screenshot of current app.showRoutes()](https://github.com/honojs/hono/assets/10682/c12eae96-bf22-4e81-b9d8-00520e56914c)\r\n\r\n`showRoutes(app)` in this PR is neat!\r\n\r\n![Screenshot of showRoutes(app) in the PR](https://github.com/honojs/hono/assets/10682/f006c158-cb7b-4e44-8594-8e3296e212b6)\r\n\r\nHowever, with `showList: true`, it's not easy to understand.\r\n\r\n![Screenshot with showList: true, showing difficulty in understanding](https://github.com/honojs/hono/assets/10682/05490459-19e5-448a-910e-0d437eaf92b7)\r\n\r\nSo, we might need to rethink how we display many items.\r\n\r\nAdditionally, the options `showList` and `includeMiddleware` aren't very user-friendly as it's hard to understand their functions. What about adding a `verbose` option to set all options to `true`?",
          "@yusukebe \r\n> So, we might need to rethink how we display many items.\r\n\r\nHmmm sure, this is hard to understand. But so far no good ideas have come to mind.\r\n\r\nI think you are right about the \"verbose\" option, so I changed it in dde76a8.\r\n\r\nWe will consider improving the \"verbose\" display when there are many items later, but how about merging with this content first?",
          "@yusukebe \r\n\r\n> We will consider improving the \"verbose\" display when there are many items later, but how about merging with this content first?\r\n\r\nTotally agree! I will merge this into \"next\" and release it first."
        ]
      },
      {
        "pr_number": 1774,
        "title": "Next",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1774",
        "comments": []
      },
      {
        "pr_number": 1757,
        "title": "fix(types): Keep `Env` types with changed routes",
        "body": "Fixes #1755\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1757",
        "comments": []
      },
      {
        "pr_number": 1763,
        "title": "refactor(router): remove duplication `MESSAGE_MATCHER_IS_ALREADY_BUILT`",
        "body": "To reduce a build size.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1763",
        "comments": []
      },
      {
        "pr_number": 1728,
        "title": "Ensure that calls to `c.json()` have a type equivalent to `c.jsonT()`",
        "body": "I am unfamiliar with PRC mode, so I apologize if I am off base.\r\n\r\nThe idea of the RPC mode is a great one, but having to call jsonT() instead of json() is expensive to learn. Also, hono-base.ts and context.ts have additional processing for this purpose, so if you could eliminate that, that would be great.\r\n\r\nIt is an evil hack that is declared to return a TypedResponse but only returns a Response, but if this works well, it is better this way.\r\n\r\nIn my small demo, I had no problems with this change.\r\n\r\n<img width=\"640\" alt=\"image\" src=\"https://github.com/honojs/hono/assets/30598/01f9b07a-08a7-440a-97a9-ffac16be0796\">\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1728",
        "comments": [
          "Hi @usualoma !\r\n\r\nExactly. We can use `c.json()` to keep supporting the RPC! Initially, I made the `c.jsonT()` to allow users use RPC \r\nexpressly. However now PRC is very general function for Hono, merging `c.jsonT()` into `c.json()` makes sense. This PR is great.\r\n\r\nCould you finalize this PR? We should also create an alias from `c.jsonT()` to `c.json()` and mark `c.jsonT()` as deprecated.",
          "@yusukebe \r\nI have been working on it and got to a much better point, but I need some guidance at the end. When an ambiguous type is passed to `json()`, should we be lax or strict?\r\n\r\n### Strictly like `c.jsonT()`\r\n\r\nCurrently, some tests are failing, but if some one has an application that passes the same ambiguous type to `c.json()`, putting in this PR will cause a type error and the need to make the type explicit.\r\n\r\n```diff\r\ndiff --git a/src/adapter/vercel/handler.test.ts b/src/adapter/vercel/handler.test.ts\r\nindex e4f69e5..772be14 100644\r\n--- a/src/adapter/vercel/handler.test.ts\r\n+++ b/src/adapter/vercel/handler.test.ts\r\n@@ -13,7 +13,7 @@ describe('Adapter for Next.js', () => {\r\n          */\r\n         // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n         // @ts-ignore\r\n-        waitUntil: c.executionCtx.waitUntil(),\r\n+        waitUntil: c.executionCtx.waitUntil() as string,\r\n       })\r\n     })\r\n     const handler = handle(app)\r\ndiff --git a/src/hono.test.ts b/src/hono.test.ts\r\nindex a8f5963..6aabb49 100644\r\n--- a/src/hono.test.ts\r\n+++ b/src/hono.test.ts\r\n@@ -1897,10 +1897,10 @@ describe('Parse Body', () => {\r\n   const app = new Hono()\r\n \r\n   app.post('/json', async (c) => {\r\n-    return c.json(await c.req.parseBody(), 200)\r\n+    return c.json<{}>(await c.req.parseBody(), 200)\r\n   })\r\n   app.post('/form', async (c) => {\r\n-    return c.json(await c.req.parseBody(), 200)\r\n+    return c.json<{}>(await c.req.parseBody(), 200)\r\n   })\r\n \r\n   it('POST with JSON', async () => {\r\n```\r\n\r\n### Loosely like `c.json()`\r\n\r\nAlternatively, we could possibly not return a JSONValue in ambiguous cases.\r\n\r\n```diff\r\ndiff --git a/src/client/client.test.ts b/src/client/client.test.ts\r\nindex cdad9d4..2178980 100644\r\n--- a/src/client/client.test.ts\r\n+++ b/src/client/client.test.ts\r\n@@ -502,7 +502,6 @@ describe('Merge path with `app.route()`', () => {\r\n \r\n   it('Should not allow the incorrect JSON type', async () => {\r\n     const app = new Hono()\r\n-    // @ts-expect-error\r\n     const route = app.get('/api/foo', (c) => c.json({ datetime: new Date() }))\r\n     type AppType = typeof route\r\n     const client = hc<AppType>('http://localhost')\r\ndiff --git a/src/context.ts b/src/context.ts\r\nindex 983a455..2e4d25d 100644\r\n--- a/src/context.ts\r\n+++ b/src/context.ts\r\n@@ -47,7 +47,7 @@ interface TextRespond {\r\n \r\n interface JSONRespond {\r\n   <T>(\r\n-    object: InterfaceToType<T> extends JSONValue ? T : JSONValue,\r\n+    object: InterfaceToType<T> extends JSONValue ? T : T extends JSONValue ? JSONValue : T,\r\n     status?: StatusCode,\r\n     headers?: HeaderRecord\r\n   ): Response &\r\n@@ -317,7 +317,7 @@ export class Context<\r\n   }\r\n \r\n   json: JSONRespond = <T>(\r\n-    object: InterfaceToType<T> extends JSONValue ? T : JSONValue,\r\n+    object: InterfaceToType<T> extends JSONValue ? T : T extends JSONValue ? JSONValue : T,\r\n     arg?: StatusCode | ResponseInit,\r\n     headers?: HeaderRecord\r\n   ): Response &\r\n@@ -345,7 +345,7 @@ export class Context<\r\n    * `c.json()` now returns data type, so you can just replace `c.jsonT()` to `c.json()`.\r\n    */\r\n   jsonT: JSONRespond = <T>(\r\n-    object: InterfaceToType<T> extends JSONValue ? T : JSONValue,\r\n+    object: InterfaceToType<T> extends JSONValue ? T : T extends JSONValue ? JSONValue : T,\r\n     arg?: StatusCode | ResponseInit,\r\n     headers?: HeaderRecord\r\n   ): Response &\r\n```\r\n\r\nIn that case, error checking at https://github.com/honojs/hono/blob/main/src/client/client.test.ts#L505 will no longer be in effect. However, since https://github.com/honojs/hono/blob/main/src/client/client.test.ts#L511 will be \"never\", the client app will be able to notice that something is wrong. (I wonder if it is hard to locate the error)\r\n",
          "Hi @usualoma \r\n\r\nThank you for your efforts. I would prefer the \"Loosely like c.json()\" approach. In this case, being too strict isn't the better option.",
          " Hi @usualoma !\r\n\r\nIs this ready for reviewing?",
          "@yusukebe plz!",
          "@yusukebe Fixed!\r\n\r\n> Additionally, I think there are some type definitions that might be redundant and could be removed. But, I'm not sure if it's necessary to do. So let's go merge this first.\r\n\r\nThat's right. I thought I could delete a few more types too, but I couldn't determine which ones could be deleted."
        ]
      },
      {
        "pr_number": 1744,
        "title": "feat(request): Introduce `matchedRoutes` and `routePath` for `HonoRequest`",
        "body": "```ts\r\napp.use('*', async function logger(c, next) {\r\n  await next()\r\n  c.req.matchedRoutes.forEach(({ handler, method, path }, i) => {\r\n    const name = handler.name || (handler.length < 2 ? '[handler]' : '[middleware]')\r\n    console.log(\r\n      method,\r\n      ' ',\r\n      path,\r\n      ' '.repeat(Math.max(10 - path.length, 0)),\r\n      name,\r\n      i === c.req.routeIndex ? '<- respond from here' : ''\r\n    )\r\n  })\r\n})\r\napp.use('*', async function namedMiddleware(c, next) {\r\n  await next()\r\n})\r\napp.get('/*', async (c, next) => await next())\r\napp.get('/hi/:name', (c) => c.json({ name: c.req.param('name'), path: c.req.routePath }))\r\n```\r\n\r\n```\r\n% bun run --hot app.ts\r\nStarted server http://localhost:3000\r\nALL   /*          logger \r\nALL   /*          namedMiddleware \r\nGET   /hi/*       [middleware] \r\nGET   /hi/:name   [handler] <- respond from here\r\n```\r\n\r\n```\r\n% curl http://localhost:3000/hi/hono\r\n{\"name\":\"hono\",\"path\":\"/hi/:name\"}\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1744",
        "comments": [
          "@usualoma \r\n\r\nCould you resolve the conflicts?",
          "@yusukebe Oops. Resolved!",
          "Hi @usualoma \r\n\r\nThis is great. I like the minimal changes to the code and the features are implemented, `Context` and routers are not changed.\r\n\r\nI made only one comment. Check it. Thanks!",
          "@yusukebe Thank you for your review. These changes would improve DX.\r\nFixed problem in 4c596ac!",
          "Thanks!\r\n\r\nOkay, merge now. Maybe I'll release the next minor version \"v3.11.0\" soon."
        ]
      },
      {
        "pr_number": 1771,
        "title": "feat(jsx): mark `ErrorBoundary` as `experimental`",
        "body": "Make `ErrorBoundary` as `experimental` as same as `Suspense`.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1771",
        "comments": []
      },
      {
        "pr_number": 1772,
        "title": "fix(factory): Filter undefined in `createHandlers`",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1772",
        "comments": []
      },
      {
        "pr_number": 1762,
        "title": "refactor: use `#` for private properties",
        "body": "Closes #1738\r\n\r\n* Use `#foo` instead of `private _foo` for private properties.\r\n* Use proper descriptive property names.\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1762",
        "comments": [
          "Hi @usualoma !\r\n\r\nCould you review this one?",
          "I wouldn't want to review that :P",
          "I think this is good, so I'll proceed with merging it now. If you have any suggestions about this, please feel free to raise an issue.",
          "@yusukebe Go ahead!"
        ]
      },
      {
        "pr_number": 1774,
        "title": "Next",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1774",
        "comments": []
      }
    ],
    "v3.10.5": [
      {
        "pr_number": 1769,
        "title": "fix(client): Allow optional props in JSON response",
        "body": "Fixes #1766 https://github.com/honojs/middleware/issues/285\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1769",
        "comments": []
      },
      {
        "pr_number": 1768,
        "title": "chore(benchmarks/jsx): Update benchmark",
        "body": "* Update the compared libraries to the latest version\r\n* Add a benchmark script when using \"react-jsx\"\r\n* Additional targets for bundle size comparison\r\n\r\n### Result\r\n\r\n```\r\n% npm run bench:node\r\n\r\n> jsx@1.0.0 bench:node\r\n> esbuild --bundle src/benchmark.ts | node\r\n\r\nHono x 437,736 ops/sec \u00b10.25% (95 runs sampled)\r\nReact x 56,216 ops/sec \u00b11.09% (99 runs sampled)\r\nPreact x 266,304 ops/sec \u00b10.21% (98 runs sampled)\r\nNano x 60,715 ops/sec \u00b10.21% (98 runs sampled)\r\nFastest is Hono\r\n\r\n% npm run bench:bun\r\n\r\n> jsx@1.0.0 bench:bun\r\n> bun run src/benchmark.ts\r\n\r\nHono x 390,353 ops/sec \u00b10.44% (97 runs sampled)\r\nReact x 45,185 ops/sec \u00b10.29% (98 runs sampled)\r\nPreact x 257,160 ops/sec \u00b11.51% (96 runs sampled)\r\nNano x 57,867 ops/sec \u00b13.02% (95 runs sampled)\r\nFastest is Hono\r\n\r\n% npm run bench:react-jsx:node\r\n\r\n> jsx@1.0.0 bench:react-jsx:node\r\n> esbuild --bundle src/react-jsx/benchmark.ts | node\r\n\r\nHono x 341,062 ops/sec \u00b10.45% (99 runs sampled)\r\nReact x 55,241 ops/sec \u00b10.47% (100 runs sampled)\r\nPreact x 287,187 ops/sec \u00b10.27% (94 runs sampled)\r\nNano x 54,391 ops/sec \u00b10.37% (95 runs sampled)\r\nFastest is Hono\r\n\r\n% npm run compare-bundle-size\r\n\r\n> jsx@1.0.0 compare-bundle-size\r\n> esbuild --minify --minify-syntax --tree-shaking=true --bundle src/{hono,react,preact,nano}.ts --outdir=dist\r\n\r\n\r\n  dist/react.js   76.9kb\r\n  dist/nano.js    35.3kb\r\n  dist/preact.js  15.3kb\r\n  dist/hono.js     3.4kb\r\n\r\n\u26a1 Done in 41ms\r\n```\r\n\r\n### Analysis\r\n\r\nIt might be possible to optimize a bit more for the \"react-jsx\" case, but that is a topic for another PR. (It just seems to be quite difficult)",
        "html_url": "https://github.com/honojs/hono/pull/1768",
        "comments": [
          "@usualoma \r\n\r\nCool! I also ran the benchmarks in my machine and results are same. Hono's JSX is really fastest and smallest!\r\n\r\nOne thing, please fix the issue about a package manager.",
          "@yusukebe\r\nSorry, I had run yarn and updated the yarn.lock, but in the process of working, I accidentally added the package-lock.json I had generated.\r\nI removed it in 2625e85.\r\n\r\nI was investigating after making this PR, but looking at speed alone, the following libraries are faster than hono's jsx.\r\nhttps://github.com/kitajs/html\r\n\r\nThe library returns a string directly from the call to `jsx()` without creating a JSXNode object in the process. We actually considered this approach in the beginning with hono, but abandoned it because of the large difference in behavior with React.\r\n\r\nThe limitations of this approach are well illustrated by ErrorBoundary, which cannot support the sync component.\r\nhttps://github.com/kitajs/html#error-boundaries\r\n\r\nAlso, it seems that variables are not escaped by default in this library, and that it is necessary to add the attribute value \"safe\".\r\n\r\nSo, the performance of this library is excellent, although it is difficult to compare because of the large functional differences. I think \"@kitajs/html\" is a good competitor for hono's jsx.",
          "@usualoma \r\n\r\nThanks!\r\n\r\nYeah, `@kitajs/html` is interesting. Let's keep to follow that.\r\n\r\nAnyway this benchmark is very worthful, merge now."
        ]
      }
    ],
    "v3.10.4": [
      {
        "pr_number": 1761,
        "title": "fix(context): Set `content-type` with `c.text()` correctly",
        "body": "Fixes #1759\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1761",
        "comments": []
      }
    ],
    "v3.10.3": [
      {
        "pr_number": 1731,
        "title": "chore: remove `jest.config.js`",
        "body": "Now that we are going to use Vitest, we can remove it.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1731",
        "comments": []
      },
      {
        "pr_number": 1694,
        "title": "Invalid HTTP header error is hidden",
        "body": "This error is captured and never shown which may by misleading. This PR suggest to throw this error directly to the reponse.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1694",
        "comments": [
          "Hi @RobertSasak!\r\n\r\nYou're right! It's not handling the error correctly. I would like you to do three things:\r\n\r\n1. Write a proper test.\r\n2. Fix any lint errors.\r\n3. Run `yarn denoify` and then `git add/commit/push` the generated file for Deno.\r\n\r\nThanks!",
          "@RobertSasak\r\n\r\nI've resolved some issues myself, and everything looks good now. I'm going to merge it. Thanks!",
          "Wow, thank you. "
        ]
      },
      {
        "pr_number": 1739,
        "title": "fix(jsx): Write the raw value if the value is a HtmlEscaped string",
        "body": "Fix a double escaping problem when an escaped string is passed as an HTML attribute value.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1739",
        "comments": ["Hi @yusukebe!\r\nWould you please review?"]
      },
      {
        "pr_number": 1742,
        "title": "fix(helper/cookie): make default `Path=/` for `setCookie()`/`setSignedCookie()`",
        "body": "Close #1741 \r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1742",
        "comments": [
          "Hi @usualoma \r\n\r\nCan you review this?",
          "In this PR, I've rewrite some tests but, the behavior of `setCookie()`/`setSignedCookie()` is not changed for end-users.",
          "@yusukebe \r\n\r\nYes, I believe this is the expected result of `setCookie()` / `setSignedCookie()` !\r\n\r\nYou should probably apply `s/getCookie/setCookie/` to the title of this PR.",
          "> You should probably apply `s/getCookie/setCookie/` to the title of this PR.\r\n\r\nAh!\r\n\r\nThanks!"
        ]
      }
    ],
    "v3.10.2": [
      {
        "pr_number": 1708,
        "title": "ci: rename fastly `compute@edge` to `compute`",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1708",
        "comments": []
      },
      {
        "pr_number": 1715,
        "title": "Fix/request param keys",
        "body": "Fixes #1713\r\n\r\n### Reproducible versions\r\n\r\nv3.8.0 or later\r\n\r\n### Reproducible environment\r\n\r\n* A router other than RegExpRouter is being used.\r\n* The value is the name of a property or method of the Array object.\r\n\r\n### Details\r\n\r\nRouters other than RegExpRouter do not return ParamStash, but Hono was mistakenly referring to it in HonoRequest and returning the method.\r\n\r\nThe fact that null is no longer returned below appears to be a change in behavior, but in fact there is no change in behavior because the outer `if (this._s)` has never been valid and this is unreachable.\r\nhttps://github.com/honojs/hono/compare/main...usualoma:hono:fix/request-param-keys?expand=1#diff-a7eab0275ad9a7a7d3fbced508e6fabbea622ceaf3c7e9d38e08824f4687bd87L73\r\n\r\nThere also appears to be no performance degradation due to this change.\r\n\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1715",
        "comments": [
          "Hi @yusukebe!\r\n\r\nWould you please review?",
          "@yusukebe Thank you for your comments.\r\nUpdated!",
          "LGTM!"
        ]
      },
      {
        "pr_number": 1721,
        "title": "fix(types): fixed a typo",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1721",
        "comments": []
      },
      {
        "pr_number": 1711,
        "title": "Export APIGatewayProxyResult from aws-lambda",
        "body": "Adds an export for `APIGatewayProxyResult` so that it can be referenced from a handler:\r\n\r\n```ts\r\nexport const handler: APIGatewayProxyResult = handle(app);\r\n```\r\n\r\nWithout it exposed, TS complains:\r\n\r\n```\r\nExported variable 'handler' has or is using name 'APIGatewayProxyResult' from external module \"node_modules/.pnpm/hono@3.10.1/node_modules/hono/dist/types/adapter/aws-lambda/handler\" but cannot be named.\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1711",
        "comments": [
          "Hi @juho \r\n\r\nThanks for creating the PR. Please fix the error and check the comment!",
          "@yusukebe Thanks, I've made the change",
          "@juho \r\n\r\nThanks! I'll merge now and ship it soon."
        ]
      },
      {
        "pr_number": 1729,
        "title": "fix(compose): allow notFound handler to be async",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1729",
        "comments": [
          "Hi @rschick \r\n\r\nThanks for the PR. Looks good! Merge now."
        ]
      },
      {
        "pr_number": 1730,
        "title": "fix(compose): allow `onError()` handler to be async",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1730",
        "comments": []
      }
    ],
    "v3.10.1": [
      {
        "pr_number": 1702,
        "title": "fix(context): `c.text()` set the status set by `c.status()`",
        "body": "Fixes #1699\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1702",
        "comments": []
      },
      {
        "pr_number": 1701,
        "title": "perf(compose): simplify",
        "body": "With this PR, I've refactored `compose.ts` to simplify it and improve performance.\r\n\r\nWe might consider adding changes to enhance performance as mentioned in [this comment](https://github.com/honojs/hono/pull/1685#issuecomment-1809240099).\r\n\r\nHowever, let's first focus on merging this refactoring. Although it's a `perf` change, it could be related to a new feature, so we should merge it into the `next` branch.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1701",
        "comments": [
          "Hi @usualoma !\r\n\r\nCould you review this?",
          "@usualoma\r\n\r\nThanks!\r\n\r\nI've reconsidered and decided it's not necessary to wait for the next minor version release. So, I'll merge this into the main  now."
        ]
      }
    ],
    "v3.10.0": [
      {
        "pr_number": 1660,
        "title": "feat(jsx/streaming): Support nested Suspense.",
        "body": "Fixes #1658\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1660",
        "comments": [
          "Cool! Works well.\r\n\r\nhttps://github.com/honojs/hono/assets/10682/bfea1839-54f4-4855-81f8-8b3d029517b2\r\n\r\nThank you for your ultrafast implementation."
        ]
      },
      {
        "pr_number": 1663,
        "title": "perf(jsx/streaming): In multiple Suspense, go ahead in the order of resolved.",
        "body": "Prior to this PR, if there were multiple nested Suspense, they were processed in stages, but in this PR, they will be processed first in the order of termination.\r\n\r\nIn the test I added this PR, it was `<p>last</p><p>first</p>` before this PR, but now it is `<p>first</p><p>last</p>` with this PR.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1663",
        "comments": ["Looks good. Merge now."]
      },
      {
        "pr_number": 1662,
        "title": "feat(jsx-renderer): Support \"stream\" option in jsxRenderer.",
        "body": "@yusukebe \r\nHow about this?\r\nImplemented: #1659\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1662",
        "comments": ["@yusukebe Thank you for your review.\r\nDone!", "Thanks!"]
      },
      {
        "pr_number": 1664,
        "title": "docs: rename Fastly `Compute@Edge` to `Compute`",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1664",
        "comments": []
      },
      {
        "pr_number": 1665,
        "title": "fix(jsx/streaming): Fixed a problem when multiple children are added directly under Suspense.",
        "body": "@yusukebe I'm adding a few more bug fixes now, so please wait a bit.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1665",
        "comments": [
          "@yusukebe \r\nWork completed.\r\n\r\nAlthough 8af2247 is not directly related to this PR, the refactoring has improved the outlook and slightly shortened the code.\r\n\r\nPlease review.",
          "Hi @usualoma \r\n\r\nUsing `raw()` is good idea. Looks good for me. Thanks!"
        ]
      },
      {
        "pr_number": 1668,
        "title": "fix(types): infer env types with chaining handlers",
        "body": "Fixes #1666\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1668",
        "comments": []
      },
      {
        "pr_number": 1669,
        "title": "feat(hono): remove `experimental` flag from `app.mount()`",
        "body": "Closes #1667\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1669",
        "comments": []
      },
      {
        "pr_number": 1673,
        "title": "fix(Adaptor): Lambda Response Streaming With Content Type ",
        "body": "fixed: https://github.com/honojs/hono/issues/1672\r\n\r\nI'd like to share that we have completed actual device verification with AWS Lambda for the magic method awslambda.HttpResponseStream.from, which adds metadata (statusCode, Headers) to the responseStream.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1673",
        "comments": [
          "Hi @watany-dev !\r\n\r\nI didn't know `application/vnd.awslambda.http-integration-response`!\r\n\r\nLike the CI is failing, you can't write the actual logic in a `.d.ts` file. I think you should write `streamifyResponse` and `awslambda.HttpResponseStream.from` in `handler.ts` or create a new file for them.",
          "@yusukebe \r\nThese specific AWS Lambda headers and methods are already executed within the AWS environment, so they are not necessary in the .d.ts file, right? I have removed them and added a reference to the source library in the comments. (This is the official sample implementation for when users are setting up the AWS Lambda environment.)",
          "@watany-dev\r\n\r\nI'm currently trying to run the Hono app with `v3.10.0-rc.2` or the version from this PR, but the `content-type` header value is still fixed as `application/octet-stream`. I'll continue to investigate this.",
          "FYI, this PR fixes the problem in my environment. `text/event-stream` , and `text/html; charset=UTF-8` are now sent.\r\n@watany-dev @yusukebe ",
          "Ah, this PR version works. My configuration was wrong; the content-types are now correct.\r\n\r\nOne thing not directly related to this PR: HTTP Streaming with `Suspense` and `renderToReadableStream()` does not work.",
          "@usualoma @yusukebe \nThanks for confirming this.\n\nI can't find a track record of Suspense or renderToReadableStream working with AWS lambda, even with the original React, so it may be too complicated to handle here.",
          "Hmm.\r\n\r\nThis PR is OK, so I'll merge it later.\r\n\r\nHowever, I think we might make `Suspense` and `renderToReadableStream()` work on Lambda function URLs. I saw an example here that suggests it may be possible:\r\nhttps://github.com/aws-samples/serverless-patterns/tree/main/lambda-streaming-ttfb-write-sam",
          "Thanks, this is interesting and I'll check the behavior, I hope it's a bug in adaptor, otherwise it's tricky...",
          "Anyway, I'm merging it now. Thanks!",
          "Created the issue #1678. "
        ]
      },
      {
        "pr_number": 1680,
        "title": "fix(types): allow arbitrary values as environment values",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\nRight now it is only possible to set a string as environment value. But in my case I'm using [Cloudflare Pages Functions](https://developers.cloudflare.com/pages/platform/functions/) which allows me to [bind](https://developers.cloudflare.com/pages/platform/functions/bindings/) different kinds of Cloudflare resources.\r\n\r\nFor example I want to bind my Pages Function (which is a [Cloudflare Worker](https://developers.cloudflare.com/workers/) in the end) to [R2](https://developers.cloudflare.com/r2/). Therefore I have to use `R2Bucket` as type:\r\n\r\n```ts\r\nimport { env } from \"hono/adapter\";\r\n\r\ntype Environment = {\r\n\treadonly MY_BUCKET: R2Bucket;\r\n}\r\n\r\nconst { MY_BUCKET } = env<Environment>(context, \"workerd\");\r\n```\r\n\r\nWith the current implementation I'm just able to assign `string` to `MY_BUCKET` (compiler error message: `Type 'R2Bucket' is not assignable to type 'string'`)",
        "html_url": "https://github.com/honojs/hono/pull/1680",
        "comments": [
          "Hi @screendriver \r\n\r\nThis is a good fix. I'll merge this now. Thanks."
        ]
      },
      {
        "pr_number": 1682,
        "title": "fix(context): implement `ContextVariableMap` for `c.var`",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1682",
        "comments": []
      },
      {
        "pr_number": 1687,
        "title": "feat(app): use `console.error()` for default `errorHandler`",
        "body": "Using `console.error(err)` is better than `console.trace(err)` to understand what is happening.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1687",
        "comments": ["This is a good feature. Merging it immediately."]
      },
      {
        "pr_number": 1690,
        "title": "Next",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1690",
        "comments": ["It's time for merging!"]
      }
    ],
    "v3.10.0-rc.2": [
      {
        "pr_number": 1653,
        "title": "feat(helper/factory): remove `@experimental` from `createMiddleware()`",
        "body": "Resolves #1646\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1653",
        "comments": []
      },
      {
        "pr_number": 1656,
        "title": "fix(jsx/streaming): Fixed a bug that caused async components to be evaluated multiple times inside Suspense.",
        "body": "Fixes #1654\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1656",
        "comments": ["LGTM!"]
      },
      {
        "pr_number": 1650,
        "title": "fix(helper): Stream SSE Helper Non-Closure",
        "body": "I fixed a bug where the Stream SSE Helper would not close, preventing the session from ending. Additionally, I've implemented error handling for the pipe.\r\n\r\nActually, it was known that the AWS Lambda Adaptor did not terminate during testing, so I've added tests to cover that :)\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1650",
        "comments": [
          "> Actually, it was known that the AWS Lambda Adaptor did not terminate during testing, so I've added tests to cover that :)\r\n\r\nWow, thanks! I've left one comment, please check it out."
        ]
      },
      {
        "pr_number": 1651,
        "title": "feat(jsx): Define jsxTemplate/jsxAttr/jsxEscape for \"@jsx precompile\" of Deno 1.38",
        "body": "### What is this PR?\r\n\r\nMerging this PR will support the JSX transforms included in Deno's 1.38\r\nhttps://deno.com/blog/v1.38#fastest-jsx-transform\r\n\r\nThe async component and `renderToReadableStream()` are also working.\r\n\r\n### Benchmark\r\n\r\nThe following benchmarks were used for comparison\r\n\r\n```ts\r\nimport { bench, run } from 'https://esm.sh/mitata'\r\n\r\nconst title = '<Hello>'\r\nconst name = '<Deno>'\r\nconst Component = (props: { name: string }) => (\r\n  <>\r\n    Hello <b>{props.name}!</b>\r\n  </>\r\n)\r\nconst getHtml = () => (\r\n  <div>\r\n    <a title={title}>\r\n      <Component name={name} />\r\n    </a>\r\n  </div>\r\n)\r\n\r\nif (getHtml().toString() !== '<div><a title=\"&lt;Hello&gt;\">Hello <b>&lt;Deno&gt;!</b></a></div>') {\r\n  throw new Error('failed')\r\n}\r\n\r\nbench('toString()', () => {\r\n  for (let i = 0; i < 10000; i++) {\r\n    getHtml().toString()\r\n  }\r\n})\r\n\r\nawait run()\r\n```\r\n\r\n#### \"react-jsx\" : Previously available\r\n\r\ndeno.json\r\n```json\r\n{\r\n  \"compilerOptions\": {\r\n    \"jsx\": \"react-jsx\",\r\n    \"jsxFragmentFactory\": \"Fragment\",\r\n    \"jsxImportSource\": \"hono/jsx\"\r\n  },\r\n  \"imports\": {\r\n    \"hono/jsx/jsx-runtime\": \"./deno_dist/jsx/jsx-runtime.ts\",\r\n    \"hono\": \"./deno_dist/hono.ts\"\r\n  }\r\n}\r\n```\r\n\r\n```\r\n# deno run --allow-read bench-jsx.tsx \r\ncpu: unknown\r\nruntime: deno 1.38.0 (x86_64-unknown-linux-gnu)\r\n\r\nbenchmark       time (avg)             (min \u2026 max)       p75       p99      p995\r\n-------------------------------------------------- -----------------------------\r\ntoString()   12.31 ms/iter         (10 ms \u2026 14 ms)     12 ms     14 ms     14 ms\r\n```\r\n\r\n#### \"precompile\" : Newly available\r\n\r\ndeno.json\r\n```json\r\n{\r\n  \"compilerOptions\": {\r\n    \"jsx\": \"precompile\",\r\n    \"jsxFragmentFactory\": \"Fragment\",\r\n    \"jsxImportSource\": \"hono/jsx\"\r\n  },\r\n  \"imports\": {\r\n    \"hono/jsx/jsx-runtime\": \"./deno_dist/jsx/jsx-runtime.ts\",\r\n    \"hono\": \"./deno_dist/hono.ts\"\r\n  }\r\n}\r\n```\r\n\r\n```\r\n# deno run --allow-read bench-jsx.tsx \r\ncpu: unknown\r\nruntime: deno 1.38.0 (x86_64-unknown-linux-gnu)\r\n\r\nbenchmark       time (avg)             (min \u2026 max)       p75       p99      p995\r\n-------------------------------------------------- -----------------------------\r\ntoString()    7.65 ms/iter          (6 ms \u2026 72 ms)      8 ms     72 ms     72 ms\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1651",
        "comments": [
          "I'm trying to figure out how to write a concise test...",
          "Hi @yusukebe!\r\nI also added a runtime test.\r\nPlease review.",
          "Completed some minor adjustments.",
          "Hi @usualoma!\r\n\r\nThis is a super interesting feature and awesome work! The point is that you can do this with just a few code changes, which is cool!\r\n\r\n`hono/jsx` may be the first JSX engine to support `jsx: precompile` outside of Preact.\r\n\r\nLooks good to me. I'll merge this into \"next\" later. Thanks a lot!"
        ]
      },
      {
        "pr_number": 1690,
        "title": "Next",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1690",
        "comments": ["It's time for merging!"]
      }
    ],
    "v3.10.0-rc.1": [
      {
        "pr_number": 1625,
        "title": "feat(adaptor): Support AWS Function URL Streaming",
        "body": "fixed: https://github.com/honojs/hono/issues/1183\r\n\r\nWe were able to run the streaming response by operating this module on the actual machine. Unfortunately, awslambda.streamifyResponse provided by AWS Lambda is globally available in the Lambda Nodejs environment, but no method for local testing is provided.\r\n\r\nTherefore, we decided to separate it as streamHandle from the existing handle. This way, even if there's a bug, existing users won't be affected. Whether to release this as 'experimental' or to halt integration until a testing method is established is a challenging decision.\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1625",
        "comments": [
          "Hi @watany-dev,\r\n\r\n> Unfortunately, `awslambda.streamifyResponse` provided by AWS Lambda is globally available in the Lambda Node.js environment, but no method for local testing is provided.\r\n\r\nCan we create a fake API for mocking in testing only? For example, the `Cache API` does not exist on Node.js, but we mock it in [this file](https://github.com/honojs/hono/blob/main/src/test-utils/setup-vitest.ts) to test Cache Middleware.\r\n\r\n```ts\r\ntype StoreMap = Map<string | Request, Response>\r\n\r\nclass MockCache {\r\n  // ...\r\n}\r\n\r\nconst globalStore: Map<string | Request, Response> = new Map()\r\n\r\nconst caches = {\r\n  open: (name: string) => {\r\n    return new MockCache(name, globalStore)\r\n  },\r\n}\r\n\r\nvi.stubGlobal('caches', caches)\r\n```\r\n\r\nI think it's OK to mock that are difficult to reproduce depending on the specific environment.",
          "@yusukebe \r\nI've taken into account your helpful advice, and I'm pleased to report that the local tests have passed without issue. Thank you.",
          "@watany-dev \r\n\r\nGreat! Looks good. I'll merge this later to \"next\" branch because this is a new feature.",
          "It's a time for merging! I'll merge this into the \"next\" branch and will release a RC version first. Thanks!"
        ]
      },
      {
        "pr_number": 1630,
        "title": "feat: Introduce streaming API with `Suspense` and `use`.",
        "body": "This PR is based on #1626.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1630",
        "comments": [
          "Hi @yusukebe!\r\n\r\nThere are no significant changes from https://github.com/usualoma/hono/pull/3, but I have added the following three refactorings and a test of the replacement results using \"happy-dom\".\r\n\r\n* 442538e\r\n* b154592\r\n* d7efbab\r\n* 2d15249",
          "Refactoring is complete.",
          "Hi @usualoma,\r\n\r\nI'll take a look this PR along with #1626 and check how it feels to use it. So please give me a minute. Thanks.",
          "@usualoma \r\n\r\nIs it OK to assume that this PR includes all of #1626? But, if so, let's keep #1626 open until this PR is merged.",
          "@yusukebe\r\n\r\nThanks for the confirmation!\r\n\r\nI have made a separate PR to clarify the scope of the change, but this PR contains #1626 in its entirety.\r\n\r\nWe can merge #1626, then this PR, and so on. Or we can merge this PR into the \"main\" branch (or \"next\" branch) and close #1626.",
          "Hi @usualoma!\r\n\r\nSorry for the late reply. I've tested this feature thoroughly and it's amazing!\r\n\r\nThe example below demonstrates it working seamlessly:\r\n\r\n```tsx\r\nimport { Hono } from 'hono'\r\nimport { use, Suspense, renderToReadableStream } from 'hono/jsx/streaming'\r\nimport type { Shop } from './types'\r\n\r\nconst app = new Hono()\r\n\r\nconst fetchData = async (): Promise<{ shop: Shop }> => {\r\n  const res = await fetch('https://ramen-api.dev/shops/yoshimuraya')\r\n  return res.json()\r\n}\r\n\r\nconst AsyncComponent = () => {\r\n  const data = use(fetchData())\r\n  return <p>I like {data.shop.name} \ud83c\udf5c</p>\r\n}\r\n\r\napp.get('/', async (c) => {\r\n  const stream = renderToReadableStream(\r\n    <html>\r\n      <body>\r\n        <h1>SSR Streaming</h1>\r\n        <Suspense fallback={<p>loading...</p>}>\r\n          <AsyncComponent />\r\n        </Suspense>\r\n      </body>\r\n    </html>\r\n  )\r\n  return c.body(stream, {\r\n    headers: {\r\n      'Transfer-Encoding': 'chunked',\r\n      'Content-Type': 'text/html; charset=UTF-8'\r\n    }\r\n  })\r\n})\r\n\r\nexport default app\r\n```\r\n\r\nAdditionally, with this PR https://github.com/honojs/vite-plugins/pull/19, the `@hono/vite-dev-server` now supports streaming, allowing us to develop an app utilizing this feature alongside Vite.\r\n\r\nI've left some comments on the PR, please check them out.\r\n\r\nI believe the streaming methods: `use`, `Suspense`, and `renderToReadableStream` should be tagged as experimental. Although they might not be as frequently used as other features, they indeed highlight our capabilities.",
          "Hi @yusukebe!\r\nThanks for your comments and advice. I have added a commit to each of your points.\r\n\r\n### b91a87d\r\n\r\nBasically, exceptions should be caught by the application and not by the framework, but if we don't catch them, streaming will not be closed, so we catch them.\r\n\r\nI think the test is OK, but when I add this test, the vitest catches the global unhandledRejection and makes an error, so I now skip it.\r\n\r\nhttps://github.com/vitest-dev/vitest/blob/7f5022994ec645838d9fa1867602b2f30d51673a/packages/browser/src/client/main.ts#L104\r\n\r\nhttps://github.com/honojs/hono/pull/1630/files#diff-73983199d8fca23993d81d61ae2256197fce29b2b2855d6ea10dbf57d7283f15R123\r\n\r\n### Demo app\r\n\r\nYour demo app is simple and great. It works well. However, the current code calls fetch() needlessly, so I think it would be better to change it a little. (Sorry if you knew what you were doing...)\r\n\r\nAs is the case with React, the following code will display \"fetchData\" multiple times.\r\n\r\n```ts\r\nimport React, { Suspense, use } from \"react\";\r\nimport { renderToReadableStream } from \"react-dom/server\";\r\n\r\nconst fetchData = async () => {\r\n  await new Promise((resolve) => setTimeout(resolve, 10));\r\n  console.log(\"fetchData\");\r\n  return \"OK\";\r\n};\r\n\r\nfunction Component() {\r\n  const res = use(fetchData());\r\n  return <p>${res}</p>;\r\n}\r\n\r\nconst elm = (\r\n  <Suspense fallback={<div>Loading...</div>}>\r\n    <Component />\r\n  </Suspense>\r\n);\r\n\r\nconst stream = await renderToReadableStream(elm);\r\nconst decoder = new TextDecoder(\"utf-8\");\r\nfor await (const chunk of stream) {\r\n  console.log(decoder.decode(chunk));\r\n}\r\n```\r\n\r\n<img width=\"912\" alt=\"image\" src=\"https://github.com/honojs/hono/assets/30598/3886e575-8467-4d95-9bdb-1da7d6a5a7dd\">\r\n\r\nFor example, if the result of fetch() is cached as a Promise as shown below, unnecessary fetch() will not be called.\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { use, Suspense, renderToReadableStream } from 'hono/jsx/streaming'\r\nimport type { Shop } from './types'\r\n\r\nconst app = new Hono()\r\n\r\nconst fetchDataCache = {}\r\nconst fetchData = (name): Promise<{ shop: Shop }> =>\r\n  (fetchDataCache[name] ||= fetch(`https://ramen-api.dev/shops/${name}`).then((res) => res.json()))\r\n\r\nconst AsyncComponent = () => {\r\n  const data = use(fetchData(\"yoshimuraya\"))\r\n  return <p>I like {data.shop.name} \ud83c\udf5c</p>\r\n}\r\n\r\napp.get('/', async (c) => {\r\n  const stream = renderToReadableStream(\r\n    <html>\r\n      <body>\r\n        <h1>SSR Streaming</h1>\r\n        <Suspense fallback={<p>loading...</p>}>\r\n          <AsyncComponent />\r\n        </Suspense>\r\n      </body>\r\n    </html>\r\n  )\r\n  return c.body(stream, {\r\n    headers: {\r\n      'Transfer-Encoding': 'chunked',\r\n      'Content-Type': 'text/html; charset=UTF-8',\r\n    },\r\n  })\r\n})\r\n\r\nexport default app\r\n```",
          "Hi @usualoma,\r\n\r\nThanks. I understood both.\r\n\r\nAdditionally, something awesome happened last night. One of the React members, Dan, mentioned the honojs account on Twitter and gave us an advice. It's an honor to receive an advice from a React committer regarding JSX.\r\n\r\nhttps://x.com/dan_abramov/status/1721179995370914192?s=20\r\nhttps://x.com/dan_abramov/status/1721230099368841219?s=20\r\n\r\nI agree with what he said; the `use()` is not necessary for the API. We can simplify it by removing `use()`:\r\n\r\n```tsx\r\nconst AsyncComponent = async () => {\r\n  const res = await fetch(`https://ramen-api.dev/shops/yoshimuraya`)\r\n  const data = await res.json()\r\n  return <p>I like {data.shop.name} \ud83c\udf5c</p>\r\n}\r\n\r\napp.get('/', async (c) => {\r\n  const stream = renderToReadableStream(\r\n    <html>\r\n      <body>\r\n        <h1>SSR Streaming</h1>\r\n        <Suspense fallback={<p>loading...</p>}>\r\n          <AsyncComponent />\r\n        </Suspense>\r\n      </body>\r\n    </html>\r\n  )\r\n  // ...\r\n})\r\n```\r\n\r\nThis is enabled if the Async Component inside `Suspense` is treated as a streaming component.\r\n\r\nWhat do you think about this? If we can implement it, I believe we won't need to create `use()`.",
          "Hi @yusukebe!\r\n\r\nOh, that is a great honor and much-appreciated advice!\r\nI didn't know that even in React, if we use the Async Component in Suspense, it is treated as a streaming component without using `use()`. If so, it certainly makes more sense not to use `use()` in hono.\r\n\r\nI implemented that in f4589b7.\r\nI removed `use()` in 1573ec1; or if we keep it, users who used `use()` in React may be able to migrate to it with little learning cost.",
          "@usualoma\r\n\r\nThanks!\r\n\r\n> I didn't know that even in React, if we use the Async Component in Suspense, it is treated as a streaming component without using `use()`. If so, it certainly makes more sense not to use `use()` in hono.\r\n\r\nHe might have been referring only to the hono/jsx spec, and not React, as he knows our hono/jsx doesn't follow the React spec completely. In React, it's still necessary to throw a Promise in Suspense, and maybe it should support client components too (although I don't have took a look the spec well).\r\n\r\nAnyway. All things are done. I'll prepare the \"next\" branch and I'll merge this into it.",
          "@yusukebe \r\n\r\nUh, I wrote the code to make sure it worked. (I haven't read the code for React's internal implementation though.)\r\n\r\nThe following code using React's Suspense is handled as streaming content in SSR.\r\n\r\n```ts\r\nimport { Hono } from \"hono\";\r\nimport React, { Suspense } from \"react\"; // 18.3.0\r\nimport { renderToReadableStream } from \"react-dom/server\";\r\n\r\nconst app = new Hono();\r\n\r\nasync function Component() {\r\n  const data = await (\r\n    await fetch(\"https://ramen-api.dev/shops/takasagoya\")\r\n  ).json();\r\n  await new Promise((resolve) => setTimeout(resolve, 1000));\r\n  return <h1>{data.shop.name}</h1>;\r\n}\r\n\r\napp.get(\"/\", async (c) => {\r\n  const stream = renderToReadableStream(\r\n    <html>\r\n      <head>\r\n        <meta charSet=\"utf-8\" />\r\n      </head>\r\n      <body>\r\n        <Suspense fallback={<div>Loading...</div>}>\r\n          <Component />\r\n        </Suspense>\r\n      </body>\r\n    </html>\r\n  );\r\n\r\n  return c.body(await stream, 200, {\r\n    \"X-Content-Type-Options\": \"nosniff\",\r\n    \"Content-Type\": \"text/html\",\r\n  });\r\n});\r\n\r\nexport default app;\r\n```\r\n\r\nhttps://github.com/honojs/hono/assets/30598/adf596d0-87d1-49bd-8def-841435b33286\r\n\r\nTherefore, the fact that async components are treated as streaming content in Suspense is not a specification unique to hono, but a behavior compatible with the original React.",
          "@usualoma \r\n\r\nI got it! As you said, this is good thing for React user to migrate to hono/jsx. Great!",
          "It's a time for merging! I'll merge this into the \"next\" branch and release a RC version first. Thanks!",
          "@usualoma \r\n\r\nWow! https://x.com/dan_abramov/status/1721811659453313480?s=20",
          "@yusukebe I'm testing this out and having some TypeScript trouble with the latest example above. I've got \r\n\r\n```ts\r\n    \"jsx\": \"react\",\r\n    \"jsxFactory\": \"jsx\",\r\n    \"jsxFragmentFactory\": \"Fragment\"\r\n```\r\n\r\nin my tsconfig.json file, but JSX components aren't being recognized. Any suggestions?\r\n\r\n_Update: I am a silly person and did not use a `.tsx` file extension_"
        ]
      },
      {
        "pr_number": 1690,
        "title": "Next",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1690",
        "comments": ["It's time for merging!"]
      }
    ],
    "v3.9.2": [
      {
        "pr_number": 1636,
        "title": "chore(ci): maintenance Node.js",
        "body": " made the following changes to the CI:\r\n\r\n- Updated to the latest version as Action's version v4 is now available.\r\nhttps://github.com/actions/setup-node/releases/tag/v4.0.0\r\n\r\n- Fixed the issue where multiple versions of Node.js could not be selected. Apologies!",
        "html_url": "https://github.com/honojs/hono/pull/1636",
        "comments": [
          "Hi @watany-dev \r\n\r\n> Fixed the issue where multiple versions of Node.js could not be selected. Apologies!\r\n\r\nAh, you are right! I also missed it. Thanks!"
        ]
      },
      {
        "pr_number": 1642,
        "title": "fix(utils/filepath): filepath supports Windows",
        "body": "This PR makes `filepath` util supports Windows and prevents the path traversal on Windows.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1642",
        "comments": []
      }
    ],
    "v3.9.1": [
      {
        "pr_number": 1633,
        "title": "fix(`package.json`): export types correctly",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1633",
        "comments": []
      }
    ],
    "v3.9.0": [
      {
        "pr_number": 1614,
        "title": "feat: types for JSX elements",
        "body": "This PR introduces type definitions for JSX elements to enhance the developer experience.\r\n\r\n### Approach\r\n\r\nThere are several ways to add types to JSX elements. With this PR, the approach taken is as follows:\r\n\r\n* Define types manually, without referring to the DOM lib.\r\n* Main tags are ported from React's definitions: https://www.npmjs.com/package/@types/react?activeTab=code\r\n* Removed some elements and attributes such as ARIA's to keep it minimum.\r\n* Renamed some properties for HTML compatibility, e.g., `readOnly` to `readonly`.\r\n* For compatibility with unknown elements and attributes, it allows any elements and attributes.\r\n\r\n### Screenshots\r\n\r\n<img width=\"1098\" alt=\"Screenshot 2023-10-23 at 17 47 03\" src=\"https://github.com/honojs/hono/assets/10682/ce0587b8-1369-4ba3-ac02-9cd644553843\">\r\n\r\n<img width=\"637\" alt=\"Screenshot 2023-10-23 at 17 49 03\" src=\"https://github.com/honojs/hono/assets/10682/3d1104be-a59b-4367-8643-ae924e27f544\">\r\n\r\n### Allowing any elements and attributes\r\n\r\nIn this PR, any elements and any attributes are allowed. This is defined as follows:\r\n\r\nAttributes:\r\n\r\n```ts\r\ntype AnyAttributes = { [attributeName: string]: any }\r\n\r\n//...\r\n\r\ninterface HTMLAttributes extends JSXAttributes, AnyAttributes {\r\n```\r\n\r\nElements:\r\n\r\n```ts\r\ntype IntrinsicElements = IntrinsicElementsDefined & { [tagName: string]: Props }\r\n```\r\n\r\nThis means that the feature doesn't support type safety completely, but it offers flexibility. You can use user-defined tags and maintain backward compatibility.\r\n\r\nThis doesn't throw an error.\r\n\r\n<img width=\"443\" alt=\"Screenshot 2023-10-23 at 18 06 09\" src=\"https://github.com/honojs/hono/assets/10682/b4220351-0a25-4c82-a446-d0b5df2b28ea\">\r\n\r\nI believe it shouldn't be too strict in this case for JSX, as flexibility is important and this approach can sufficiently improve DX.\r\n\r\n---\r\n\r\nResolves #1409",
        "html_url": "https://github.com/honojs/hono/pull/1614",
        "comments": [
          "@sjc5 Thanks! Fixed.",
          "Everything is done. I'll create a `next` branch for the next minor release, and merge this into it."
        ]
      },
      {
        "pr_number": 1624,
        "title": "Next",
        "body": "Let's go!",
        "html_url": "https://github.com/honojs/hono/pull/1624",
        "comments": []
      },
      {
        "pr_number": 1622,
        "title": "feat(helper/adapter): add `runtime` option to `env`",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1622",
        "comments": []
      },
      {
        "pr_number": 1621,
        "title": "feat(jsx-renderer): `docType` option",
        "body": "Currently, when using JSX Renderer, we can't easily add a `DOCTYPE`. This PR introduces a `docType` option for the JSX Renderer to add a `DOCTYPE`.\r\n\r\n```tsx\r\napp.use(\r\n  '*',\r\n  jsxRenderer(\r\n    ({ children }) => {\r\n      return (\r\n        <html>\r\n          <body>{children}</body>\r\n        </html>\r\n      )\r\n    },\r\n    { docType: true }\r\n  )\r\n)\r\n```\r\n\r\nIf you want to customize the `DOCTYPE`, you can pass the string:\r\n\r\n```tsx\r\napp.use(\r\n  '*',\r\n  jsxRenderer(\r\n    ({ children }) => {\r\n      return (\r\n        <html>\r\n          <body>{children}</body>\r\n        </html>\r\n      )\r\n    },\r\n    {\r\n      docType:\r\n        '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">',\r\n    }\r\n  )\r\n)\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1621",
        "comments": []
      },
      {
        "pr_number": 1624,
        "title": "Next",
        "body": "Let's go!",
        "html_url": "https://github.com/honojs/hono/pull/1624",
        "comments": []
      }
    ],
    "v3.9.0-rc.1": [],
    "v3.8.4": [
      {
        "pr_number": 1610,
        "title": "Fix: combine fluent interface with route grouping",
        "body": "**How to reproduce**\r\n\r\n```ts\r\nimport { Hono } from 'hono';\r\n\r\nconst group = new Hono().get('/', (c) => c.text('ok'));\r\nconst app = new Hono().use().route('/group', group);\r\n\r\nexport default app;\r\n```\r\n\r\nThe issue only appears if `app` is exported (or `group` is imported).\r\n\r\n**Error observed**\r\n\r\n```\r\nThe inferred type of 'app' cannot be named without a reference to '../../../node_modules/hono/dist/types/hono-base'. This is likely not portable. A type annotation is necessary.ts(2742)\r\n```\r\n\r\n<img width=\"632\" alt=\"image\" src=\"https://github.com/colinhacks/zod/assets/6740947/459f7cf9-bac9-4ba9-b925-35e2a4bdf0c9\">\r\n\r\n**Solution**\r\n\r\nUpgrading to `v3.8.2` partially addressed the issue (https://github.com/honojs/hono/pull/1604/files), but I found it necessary to make `hono/types` publicly accessible also.",
        "html_url": "https://github.com/honojs/hono/pull/1610",
        "comments": [
          "@ashtonsix \r\n\r\nThanks! Good point. Let's go with this."
        ]
      },
      {
        "pr_number": 1618,
        "title": "[Client types] make args param optional if the input has no required keys",
        "body": "This PR modifies the `ClientRequest` type, so the `args` param is only required if the input has required keys (specified by the validator).\r\n\r\n![CleanShot 2023-10-24 at 12 20 21@2x](https://github.com/honojs/hono/assets/16190582/a0f9b4e9-e9cd-4370-b40f-af9c1d6d4189)\r\n\r\n\r\nSee #1583",
        "html_url": "https://github.com/honojs/hono/pull/1618",
        "comments": [
          "Oops. @MonsterDeveloper Could you run the command to prettify the code?\r\n\r\n```text\r\nnpx prettier --write ./src\r\n```",
          "@yusukebe done:)",
          "Oops! Please run `denoify`! ",
          "Sorry, forgot about `denoifying` each commit:) Should be OK now.",
          "Perfect! I'll merge it now and release the new version including this later. Thank you very much!!"
        ]
      },
      {
        "pr_number": 1613,
        "title": "Aws lambda cookies fix",
        "body": "### Issue: Unable to set multiple cookies when using aws-lambda adapter\r\nThe `getCookie`  and `setCookie` helpers don't work properly when handling multiple cookies with aws-lambda adapter because of different versions of request and response payload in `API Gateway Proxy Event`.\r\n\r\n### Fix implementation: \r\nI created two functions `getCookies` and `setCookies` in src/adapter/aws-lambda/handler.ts file to get and set cookies payload/header corresponding to the version of the `API Gateway Proxy Event`. Additionally, two tests for this implementation are added in the lambda runtime test file.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno",
        "html_url": "https://github.com/honojs/hono/pull/1613",
        "comments": [
          "Hi @OJ217 !\r\n\r\nThank for the PR. Looks good for me.\r\n\r\n@watany-dev  Can you review this?",
          "@OJ217 \r\nIt generally seems fine, but it would be good to consider that the Lambda Function URL also has cookies, similar to API Gateway V2.\r\nhttps://docs.aws.amazon.com/lambda/latest/dg/urls-invocation.html",
          "Hi @watany-dev!\r\nI have checked the documentation for Lambda Function URL. It says *The request and response event formats follow the same schema as the [Amazon API Gateway payload format version 2.0](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-lambda.html#http-api-develop-integrations-lambda.proxy-format).* Since the way of getting and setting cookies is determined by checking the payload version using the existing **isProxyEventV2**, I think it will also work for Lambda Function URL.",
          "Thanks both.\r\n\r\n@OJ217 Can I merge it?",
          "@yusukebe Sure!",
          "Okay! Merging now."
        ]
      }
    ],
    "v3.8.3": [
      {
        "pr_number": 1607,
        "title": "fix(jsx-renderer): fix `PropsForRenderer`",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1607",
        "comments": []
      },
      {
        "pr_number": 1608,
        "title": "fix(hc): allows optional schemas",
        "body": "Fixes #1583\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1608",
        "comments": []
      }
    ],
    "v3.8.2": [
      {
        "pr_number": 1595,
        "title": "fix(context): change `FetchEvent` detection way",
        "body": "To detect whether it is a `FetchEvent` or not, I've used this method in this PR instead of `instanceof`:\r\n\r\n```ts\r\nthis._exCtx && 'respondWith' in this._exCtx\r\n```\r\n\r\nFixes #1423\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1595",
        "comments": []
      },
      {
        "pr_number": 1596,
        "title": "test(validator): fix the error message for node v18.18",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1596",
        "comments": []
      },
      {
        "pr_number": 1598,
        "title": "chore(ci): update node v20",
        "body": "Starting from October 24, NodeJS V20 will become the LTS version. I believe we should also support this in our CI. For now, I've only added Node, but if there is a need to include other runtimes, I am more than happy to accommodate that as well.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1598",
        "comments": [
          "Hi @watany-dev,\r\n\r\nThank you for bringing this to our attention. However, I'd like to stick to the \"one\" `Main` test approach.\r\n\r\nAll Web-standards APIs are fixed and the differences between the versions of Node.js should be tested in the `runtimes` test. I've addressed the issue with PR #1596 concerning the differences between the versions, but it's not a major problem.\r\n\r\nNevertheless, using v20 in the `Main` test is great. So, could you modify it to a single version - v20 test?",
          "@yusukebe \r\nYes, I've set the Main to test with v20. The Node.js Runtime tests are targeting both 18 and 20.",
          "@watany-dev \r\n\r\nThanks! That's what I wanted. Merging now."
        ]
      },
      {
        "pr_number": 1599,
        "title": "chore(ci): bun v1",
        "body": "\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1599",
        "comments": [
          "After upgrading the version of Bun, the tests related to JSX started to fail. As a temporary fix, I'm importing src/jsx, but I would like to know if there\u2019s a better approach.",
          "@watany-dev \r\n\r\nThanks! Let's go with this."
        ]
      },
      {
        "pr_number": 1604,
        "title": "fix(package.json): export `hono-base`",
        "body": "Fixes #1591\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1604",
        "comments": []
      },
      {
        "pr_number": 1562,
        "title": "fix: Don't kebab case style property values",
        "body": "Currently, both style property keys and values are kebab cased.\r\n\r\nThis JSX:\r\n```\r\nfontFamily: \"Menlo, Consolas, DejaVu Sans Mono, monospace\"\r\n```\r\n\r\nResults in the following HTML:\r\n```\r\nfont-family:-menlo, -consolas, -deja-vu -sans -mono, monospace;\r\n```\r\n\r\nInstead of:\r\n```\r\nfont-family:Menlo, Consolas, DejaVu Sans Mono, monospace;\r\n```\r\n\r\nThis fixes the issue by only applying kebab casing to the key, not the value.",
        "html_url": "https://github.com/honojs/hono/pull/1562",
        "comments": [
          "Hi @bconnorwhite!\r\n\r\nThank you for the PR. This is a good fix!\r\n\r\nOne thing, I'd like you to write a proper test. Could you do it?",
          "@bconnorwhite \r\n\r\nAnd please run the command for fixing styles.\r\n\r\n```txt\r\nyarn format:fix\r\n```",
          "@bconnorwhite \r\n\r\nI've added the test and fixed format. Thanks!"
        ]
      }
    ],
    "v3.8.1": [
      {
        "pr_number": 1593,
        "title": "fix: `c.req.params()` in nested app with custom error handler.",
        "body": "Fixes #1590\r\n\r\nIt may look like a dirty hack at first glance, but if you look closely, you will see it is not a problem.\r\n\r\nI have also considered the following approaches.\r\n\r\n* https://github.com/usualoma/hono/tree/fix-nested-onerror-params-by-getParams\r\n* https://github.com/usualoma/hono/tree/fix-nested-onerror-params-by-undefined\r\n\r\nHowever, they all increase the code and complexity of types, so this PR approach is better.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1593",
        "comments": [
          "Hi @usualoma !\r\n\r\n> It may look like a dirty hack at first glance, but if you look closely, you will see it is not a problem.\r\n\r\nIndeed, it took a little bit of time to understand what it does. But, as you said, it makes sense and it's good that it can be fixed by modifying only one line.\r\n\r\nThank you very much!"
        ]
      }
    ],
    "v3.8.0": [
      {
        "pr_number": 1504,
        "title": "feat(helper): streaming-sse",
        "body": "As I work on supporting SSE for the Lambda Adaptor, I am creating a general-purpose helper. The reason the test code is inadequate is because of the lock error I'm encountering. If you're open to embracing this helper, I would greatly appreciate any insights or ideas you might have on this.\r\n\r\n```bash\r\n\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af Unhandled Errors \u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\r\n\r\nVitest caught 1 unhandled error during the test run.\r\nThis might cause false positive tests. Resolve unhandled errors to make sure your tests are not affected.\r\n\r\n\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af Unhandled Rejection \u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\r\nTypeError: Invalid state: WritableStream is locked\r\n \u276f new NodeError node:internal/errors:405:5\r\n \u276f setupWritableStreamDefaultWriter node:internal/webstreams/writablestream:594:11\r\n \u276f new WritableStreamDefaultWriter node:internal/webstreams/writablestream:402:5\r\n \u276f WritableStream.getWriter node:internal/webstreams/writablestream:264:12\r\n \u276f new StreamingApi src/utils/stream.ts:8:28\r\n      6|   constructor(writable: WritableStream) {\r\n      7|     this.writable = writable\r\n      8|     this.writer = writable.getWriter()\r\n       |                            ^\r\n      9|     this.encoder = new TextEncoder()\r\n     10|   }\r\n \u276f new SSEStreamingApi src/helper/stream/index.ts:12:5\r\n \u276f src/helper/stream/index.ts:38:20\r\n \u276f Context.stream src/context.ts:396:5\r\n \u276f Module.streamAsSSE src/helper/stream/index.ts:37:12\r\n \u276f src/helper/stream/index.test.ts:10:17\r\n\r\n\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\r\nSerialized Error: { code: 'ERR_INVALID_STATE' }\r\nThis error originated in \"src/helper/stream/index.test.ts\" test file. It doesn't mean the error was thrown inside the file itself, but while it was running.\r\n\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\r\n\r\n Test Files  52 passed (52)\r\n      Tests  815 passed (815)\r\n     Errors  1 error\r\n   Start at  09:58:26\r\n   Duration  22.17s (transform 7.42s, setup 16ms, collect 23.54s, tests 16.66s, environment 8.90s, prepare 37.28s)\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1504",
        "comments": [
          "Hi @watany-dev !\r\n\r\nI have commented on a few minor points, but I would like to accept this PR! Could you move on to the next action?",
          "@sor4chi \n\nDo you know anything about this write lock issue?",
          "Hi, @watany-dev. Thank you for implementing this helper!\r\n\r\nI think this is because when you set up an instance of `StreamingAPI`, it is designed to get `writer` from the constructor argument `writable`, so you cannot reuse `StreamingAPI.writable`, which already gets `writer`, as the constructor argument of `StreamingAPI`.\r\n\r\nHow about this kind of implementation?\r\nThis approach is to create another `reader` / `writer` pair and pipe it to the `originalStream`.\r\n\r\n```diff\r\ndiff --git a/src/helper/stream/index.ts b/src/helper/stream/index.ts\r\nindex f4a28ae..ff94178 100644\r\n--- a/src/helper/stream/index.ts\r\n+++ b/src/helper/stream/index.ts\r\n@@ -8,8 +8,8 @@ interface SSEMessage {\r\n }\r\n \r\n class SSEStreamingApi extends StreamingApi {\r\n-  constructor(originalStream: StreamingApi) {\r\n-    super(originalStream['writable']) // Accessing the private writable property - normally not recommended but works for this specific solution.\r\n+  constructor(writable: WritableStream) {\r\n+    super(writable)\r\n   }\r\n \r\n   async writeSse(message: SSEMessage) {\r\n@@ -35,7 +35,9 @@ function setSSEHeaders(context: Context) {\r\n \r\n export const streamAsSSE = (c: Context, cb: (stream: SSEStreamingApi) => Promise<void>) => {\r\n   return c.stream(async (originalStream: StreamingApi) => {\r\n-    const stream = new SSEStreamingApi(originalStream)\r\n+    const { readable, writable } = new TransformStream()\r\n+    const stream = new SSEStreamingApi(writable)\r\n+    originalStream.pipe(readable)\r\n     setSSEHeaders(c)\r\n \r\n     try {\r\n```\r\n\r\n",
          "@sor4chi \r\nThank you. I am grateful that it now works smoothly thanks to your wonderful idea. \r\n\r\n@yusukebe \r\nI've incorporated your idea. Could you please take a look?\r\n",
          "@watany-dev \r\n\r\nI'll merge this PR. It will be included in the next minor version update. I will create a `next` branch for the version up in a while and merge it there.\r\n\r\nThanks!"
        ]
      },
      {
        "pr_number": 1528,
        "title": "feat: `parseBody()` for multi values' field",
        "body": "### Author should do the followings, if applicable\r\n\r\nHi @yusukebe \r\nThis is an implemention of the suggesion in #1018\r\nAs you mention, this changes have backward compatible.\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1528",
        "comments": [
          "That's quite specific but it might be useful. \ud83d\udc4f ",
          "Hi @sor4chi \r\n\r\nThanks for a great PR!\r\n\r\nOne thing. How do we treat an object with a single value? In the following example, it is about the value of `message`.\r\n\r\n```ts\r\nconst data = new FormData()\r\ndata.append('file', 'aaa')\r\ndata.append('file', 'bbb')\r\ndata.append('message', 'hello')\r\n```\r\n\r\nIn the current implementation, it returns the value of `message` as an array `['hello']`. But, I think the user would expect a `'hello'` to be returned in this case.",
          "Hi, @yusukebe \r\n\r\nIndeed it is.\r\nI completely forgot about the test case so I added it and reimplemented it, thanks.",
          "@sor4chi \r\n\r\nThanks for fixing. I'd like to merge this, but this is a new feature, so will merge it into \"next\" branch for a next minor release \"v3.8.0\" later.",
          "I look forward to using it at Hono Storage, thank you!"
        ]
      },
      {
        "pr_number": 1540,
        "title": "feat: rename middleware to createMiddleware",
        "body": "### Description - \r\nThis PR aims to rename `middleware` to `createMiddleware` in `hono/factory`\r\nCloses: https://github.com/honojs/hono/issues/1530\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1540",
        "comments": [
          "@yusukebe I run `yarn denoify` , you can now run the ci to check . ",
          "@arunavabasu-03 Thanks!\r\n\r\nLooks good to me. I'll merge into the `next` branch later for next minor version."
        ]
      },
      {
        "pr_number": 1496,
        "title": "Introduce \"Context\" API and \"renderer\" for JSX.",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1496",
        "comments": [
          "Hi @usualoma !\r\n\r\nThanks for the PR. Maybe I've fixed the problem, and everything works well! Let's ship it.",
          "@yusukebe\r\nOh sorry, I had added the wrong file to deno_dist. Thanks for all your help."
        ]
      },
      {
        "pr_number": 1589,
        "title": "Next",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1589",
        "comments": ["Let's go!"]
      },
      {
        "pr_number": 1589,
        "title": "Next",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1589",
        "comments": ["Let's go!"]
      },
      {
        "pr_number": 1589,
        "title": "Next",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1589",
        "comments": ["Let's go!"]
      },
      {
        "pr_number": 1556,
        "title": "feat(reg-exp-router): Improve capture group support.",
        "body": "### What will this PR improve?\r\n\r\n* `(a|b)` => Automatically converted to non-capturing group and no longer an error in RegExpRouter. \ud83c\udd95 \r\n* `(?:a|b)` => If you already explicitly use non-capturing groups, it works without error. (Backward compatible)\r\n* `prefix(a|b)` => Throw `UnsupportedPathError`. \ud83c\udd95 \r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1556",
        "comments": [
          "@usualoma \r\n\r\nAwesome work! It's compatible with my other routers and I think it's perfect!\r\n\r\nI'll merge this into the `next` branch to release as a next minor version \"v3.8\". Thanks!"
        ]
      },
      {
        "pr_number": 1566,
        "title": "feat: one `params` per a handler (optimized for RegExpRouter)",
        "body": "After thinking about this issue for a while, I have come to the conclusion that the interface should be almost the same as #1555.\r\n\r\n### What is different about this PR\r\n\r\n#### Data structure based on array\r\n\r\n`Result<T>` is now defined as an Array.\r\nhttps://github.com/usualoma/hono/blob/bb0ff1fb680ce88d2fce991552e05eb17f283f01/src/router.ts#L14\r\n\r\nThis is because an Array is faster to access elements than an Object, and the bundle size is smaller when minified.\r\nHowever, since the contribution to speed by making it an Array is limited and the code is less readable, some may argue that the format using Objects is better in this regard.\r\n\r\n#### Optimized for RegExpRouter\r\n\r\nThe following data structures can now be returned from `match`. This allows the RegExpRouter to work as fast as before.\r\n\r\n<img width=\"555\" alt=\"data-structure\" src=\"https://github.com/honojs/hono/assets/30598/892bdda9-6c0e-41ab-a98c-2e7aca5fedf8\">\r\n\r\n\r\n### benchmark\r\n\r\nIn my environment, the results were about the same as before.\r\n\r\nbenchmarks/handle-event\r\n\r\n```\r\nHono - main x 484,819 ops/sec \u00b16.77% (72 runs sampled)\r\nHono - params-per-handler-2 x 495,303 ops/sec \u00b16.74% (75 runs sampled)\r\nitty-router x 217,435 ops/sec \u00b12.53% (92 runs sampled)\r\nsunder x 258,899 ops/sec \u00b15.35% (75 runs sampled)\r\nworktop x 188,327 ops/sec \u00b13.43% (85 runs sampled)\r\nFastest is Hono - params-per-handler-2,Hono - main\r\n```\r\n\r\nbenchmarks/routers (I perceive the same performance because the ranking often changes when the routers are reordered.)\r\n\r\n```\r\n\u2022 all together\r\n-------------------------------------------------------------------------------- -----------------------------\r\nHono TrieRouter                             2.01 \u00b5s/iter     (1.99 \u00b5s \u2026 2.07 \u00b5s)   2.02 \u00b5s   2.07 \u00b5s   2.07 \u00b5s\r\nHono RegExpRouter - main                  443.81 ns/iter (422.96 ns \u2026 468.42 ns) 446.81 ns 462.18 ns 468.42 ns\r\nHono RegExpRouter - params-per-handler-2  451.29 ns/iter (431.47 ns \u2026 476.33 ns) 453.57 ns 476.24 ns 476.33 ns\r\n@medley/router                            608.95 ns/iter (591.48 ns \u2026 629.72 ns) 612.27 ns 629.72 ns 629.72 ns\r\nfind-my-way                                 1.03 \u00b5s/iter     (1.01 \u00b5s \u2026 1.11 \u00b5s)   1.03 \u00b5s   1.11 \u00b5s   1.11 \u00b5s\r\nkoa-tree-router                           659.81 ns/iter (638.36 ns \u2026 724.44 ns) 665.09 ns 724.44 ns 724.44 ns\r\ntrek-router                                 1.02 \u00b5s/iter   (988.83 ns \u2026 1.05 \u00b5s)   1.02 \u00b5s   1.05 \u00b5s   1.05 \u00b5s\r\nexpress (WARNING: includes handling)        7.83 \u00b5s/iter     (7.77 \u00b5s \u2026 7.93 \u00b5s)   7.86 \u00b5s   7.93 \u00b5s   7.93 \u00b5s\r\nkoa-router                                 13.03 \u00b5s/iter     (12 \u00b5s \u2026 164.54 \u00b5s)  12.75 \u00b5s  17.46 \u00b5s  21.96 \u00b5s\r\nradix3                                      1.55 \u00b5s/iter      (1.5 \u00b5s \u2026 1.59 \u00b5s)   1.56 \u00b5s   1.59 \u00b5s   1.59 \u00b5s\r\n\r\nsummary for all together\r\n  Hono RegExpRouter - main\r\n   1.02x faster than Hono RegExpRouter - params-per-handler-2\r\n   1.37x faster than @medley/router\r\n   1.49x faster than koa-tree-router\r\n   2.29x faster than trek-router\r\n   2.32x faster than find-my-way\r\n   3.5x faster than radix3\r\n   4.53x faster than Hono TrieRouter\r\n   17.64x faster than express (WARNING: includes handling)\r\n   29.35x faster than koa-router\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1566",
        "comments": [
          "Hi @usualoma,\r\n\r\nI have taken the time to think about this and I find it to be an interesting approach!\r\n\r\n> However, since the contribution to speed by making it an Array is limited and the code is less readable, some may argue that the format using Objects is better in this regard.\r\n\r\nIndeed, but I don't think it's significantly less readable.\r\n\r\nSo, how about we go this way!? If so, can you complete the PR? It's a hard task to write the code for other routers, but I'd like you to do it.\r\n\r\nThanks!\r\n",
          "@yusukebe OK, I will try to implement this specification in other routers.",
          "@yusukebe \r\nBy the way, TrieRouter no longer checks for \"Duplicate param name\" at all, so it no longer makes an error if multiple cases of the same name exist in a single path.\r\n\r\nBefore\r\nhttps://github.com/honojs/hono/blob/main/src/router/trie-router/node.test.ts#L435-L440\r\n\r\nAfter\r\nhttps://github.com/usualoma/hono/blob/48127094af314dad390907f727d1353ff322c4f1/src/router/trie-router/node.test.ts#L451-L458\r\n\r\nWhat do you think about this point with other routers?\r\n\r\nIn my opinion, it is better to \"not check Duplicate param name at all, even on other routers\".\r\nThe reason for this is that there is no need for the framework to check it, since it is unlikely that there are multiple instances of the same name in a single path.\r\nInstead, stopping checking and making the code shorter would be more useful.",
          "@yusukebe \r\nOh, sorry, I didn't explain myself well enough.\r\n\r\nRegExpRouter still makes an error for duplicates like `/:id/:id` in this branch, but I'm talking about whether or not to stop doing that check.\r\nhttps://github.com/usualoma/hono/blob/48127094af314dad390907f727d1353ff322c4f1/src/router/reg-exp-router/node.ts#L100-L102",
          "@usualoma\r\n\r\n> What do you think about this point with other routers?\r\n> In my opinion, it is better to \"not check Duplicate param name at all, even on other routers\".\r\n\r\nI agree. We don't need to check it. And I've implemented it to make `id` be `123` not `456` in the test of TrieRouter:\r\n\r\n```ts\r\nit('self', () => {\r\n  const node = new Node()\r\n  node.insert('get', '/:id/:id', 'foo')\r\n  const [res] = node.search('get', '/123/456')\r\n  expect(res.length).toBe(1)\r\n  expect(res[0][0]).toBe('foo')\r\n  expect(res[0][1]['id']).toBe('123')\r\n})\r\n```\r\n\r\nI think it's sufficient to have a rule that if the path has the same param name, the first value will be used.",
          "Should it throw `UnsupportedPathError`?\r\n\r\n> https://github.com/usualoma/hono/blob/48127094af314dad390907f727d1353ff322c4f1/src/router/reg-exp-router/node.ts#L100-L102",
          "> Should it throw `UnsupportedPathError`?\r\n\r\nAh, if we could throw an error in the insert phase, that would be best.",
          "Done.\r\n\r\n@yusukebe Review, please.\r\n\r\n### For `/:id/:id`\r\n\r\n* LinearRouter, RegExpRouter, TrieRouter : If the path is `/123/456`, `id` be `123` not `456`.\r\n* PatternRouter : `throw new UnsupportedPathError()` in the insert phase",
          "Hi @usualoma,\r\n\r\nThank you very much for the great work. It looks good!\r\n\r\nI've added some tests and merged the `next` branch. I think there's no problem, so I'll merge it tomorrow morning.",
          "@yusukebe Thanks. LGTM!",
          "Okay!! Let's go!!"
        ]
      },
      {
        "pr_number": 1575,
        "title": "test: fix the sleep time for SSE",
        "body": "We don't need the much time.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1575",
        "comments": []
      },
      {
        "pr_number": 1560,
        "title": "feat(app): `basePath` option for the constructor, deprecate `app.basePath()`",
        "body": "* Create `basePath` option for the constructor of `Hono`.\r\n* Deprecate `app.basePath()`.\r\n\r\nYou can specify the base-path like the following:\r\n\r\n```ts\r\nconst app = new Hono({ basePath: '/api' })\r\n```\r\n\r\n\r\nResolves #1531\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1560",
        "comments": []
      },
      {
        "pr_number": 1589,
        "title": "Next",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1589",
        "comments": ["Let's go!"]
      },
      {
        "pr_number": 1589,
        "title": "Next",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1589",
        "comments": ["Let's go!"]
      },
      {
        "pr_number": 1578,
        "title": "feat(`package.json`): export `streaming` helper",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1578",
        "comments": []
      },
      {
        "pr_number": 1579,
        "title": "fix(streaming): fix SSE format",
        "body": "Fixes #1577 \r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1579",
        "comments": []
      },
      {
        "pr_number": 1581,
        "title": "fix(factory): fixed the comment",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1581",
        "comments": []
      },
      {
        "pr_number": 1582,
        "title": "feat(deno): export the `factory` helper for Deno",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1582",
        "comments": []
      },
      {
        "pr_number": 1586,
        "title": "Revert \"feat(app): `basePath` option for the constructor, deprecate `app.basePath()` (#1560)\"",
        "body": "Fixes #1584 \r\n\r\nThis reverts commit 8b6bd46e6699d6ad80eced222b8cd52c9a878692.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1586",
        "comments": []
      },
      {
        "pr_number": 1588,
        "title": "refactor: refactored `hono-base`",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1588",
        "comments": []
      },
      {
        "pr_number": 1589,
        "title": "Next",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1589",
        "comments": ["Let's go!"]
      }
    ],
    "v3.8.0-rc.3": [
      {
        "pr_number": 1570,
        "title": "chore: bump up denoify",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1570",
        "comments": []
      }
    ],
    "v3.7.6": [
      {
        "pr_number": 1558,
        "title": "test: use Node.js Native Web APIs instead of miniflare's",
        "body": "Resolves #1557\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1558",
        "comments": []
      },
      {
        "pr_number": 1554,
        "title": "fix: return status 500 when using validator 'form'",
        "body": "When using `validator('form', ...)` hono is returning a 500 status when receiving a POST request with a JSON in request body, instead of a bad request 400, .\r\n\r\nThis is happenning due to a unhandled error in an\r\nunderlying library (@miniflare).\r\nhttps://github.com/cloudflare/miniflare/pull/711\r\n\r\nThe code changes in this PR are responsible to prepare the code to handle possible TypeError that can be thrown in the future, by the lib doing the FormData parsing, as per, https://fetch.spec.whatwg.org/#dom-body-formdata.\r\n\r\nThis PR should wait for bugfix on @miniflare.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests (don't have deno to perform `yarn test:all`\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1554",
        "comments": [
          "Hi @b-marques \r\n\r\nThank you for the PR!\r\n\r\nI think it is a miniflare problem that the test fails. The following PR does not use `vitest-environment-miniflare` but only the Node.js native Web APIs. Using this, that errors will not occur.\r\n\r\n#1558\r\n\r\nSince `vitest-environment-miniflare` may not be maintained in the future, I wanted to use the Node.js's. I will merge #1558 and then I want you to fetch it over here and try again. What do you think?\r\n",
          "I see...\r\n\r\nFor sure, I will wait for #1558 to be merged to proceed with tests on my side.",
          "Hi @b-marques \r\n\r\nI've merged #1558 into the main. Try it.",
          "Hi @yusukebe , it stills relevant.\r\n\r\nThe Node.js native Web APIs can also throw Errors that hono is not handling.",
          "@yusukebe  I would like also to mention about the possibility to add a check for the 'appliaction/json' header in the validator. Since a forgery attack trying to avoid preflight request can send a json payload with wrong content-type, and hono will accept and validate it.",
          "@b-marques \r\n\r\n> The Node.js native Web APIs can also throw Errors that hono is not handling.\r\n\r\nThe test on my local and CI passed, is there still a problem?\r\n\r\n>  I would like also to mention about the possibility to add a check for the 'appliaction/json' header in the validator.\r\n\r\nThat's right. If this PR is merged, can you create another one?",
          "@yusukebe  \r\n> The test on my local and CI passed, is there still a problem?\r\n> \r\nWith the changes in this PR, it's not going to be a problem anymore. But without those changes, we still receive a 500 status, when we should receive a 400 Bad request.\r\n\r\n> That's right. If this PR is merged, can you create another one?\r\n>\r\nFor sure.",
          "@yusukebe done (:",
          "Hi @b-marques!\r\n\r\nPerfect! I'll merge it now. Thanks for the contribution."
        ]
      },
      {
        "pr_number": 1565,
        "title": "perf(hono-base): use `instanceOf`",
        "body": "Since #1311, it uses `res.constructor.name === 'Response'` instead of `res instanceof Response`. However, on Node.js, this change results in a significant performance decrease. Therefore, it should be rolled back.\r\n\r\n<img width=\"587\" alt=\"Screenshot 2023-10-12 at 17 36 16\" src=\"https://github.com/honojs/hono/assets/10682/37399211-32a8-4433-a717-518c4b4b2bad\">\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1565",
        "comments": []
      },
      {
        "pr_number": 1566,
        "title": "feat: one `params` per a handler (optimized for RegExpRouter)",
        "body": "After thinking about this issue for a while, I have come to the conclusion that the interface should be almost the same as #1555.\r\n\r\n### What is different about this PR\r\n\r\n#### Data structure based on array\r\n\r\n`Result<T>` is now defined as an Array.\r\nhttps://github.com/usualoma/hono/blob/bb0ff1fb680ce88d2fce991552e05eb17f283f01/src/router.ts#L14\r\n\r\nThis is because an Array is faster to access elements than an Object, and the bundle size is smaller when minified.\r\nHowever, since the contribution to speed by making it an Array is limited and the code is less readable, some may argue that the format using Objects is better in this regard.\r\n\r\n#### Optimized for RegExpRouter\r\n\r\nThe following data structures can now be returned from `match`. This allows the RegExpRouter to work as fast as before.\r\n\r\n<img width=\"555\" alt=\"data-structure\" src=\"https://github.com/honojs/hono/assets/30598/892bdda9-6c0e-41ab-a98c-2e7aca5fedf8\">\r\n\r\n\r\n### benchmark\r\n\r\nIn my environment, the results were about the same as before.\r\n\r\nbenchmarks/handle-event\r\n\r\n```\r\nHono - main x 484,819 ops/sec \u00b16.77% (72 runs sampled)\r\nHono - params-per-handler-2 x 495,303 ops/sec \u00b16.74% (75 runs sampled)\r\nitty-router x 217,435 ops/sec \u00b12.53% (92 runs sampled)\r\nsunder x 258,899 ops/sec \u00b15.35% (75 runs sampled)\r\nworktop x 188,327 ops/sec \u00b13.43% (85 runs sampled)\r\nFastest is Hono - params-per-handler-2,Hono - main\r\n```\r\n\r\nbenchmarks/routers (I perceive the same performance because the ranking often changes when the routers are reordered.)\r\n\r\n```\r\n\u2022 all together\r\n-------------------------------------------------------------------------------- -----------------------------\r\nHono TrieRouter                             2.01 \u00b5s/iter     (1.99 \u00b5s \u2026 2.07 \u00b5s)   2.02 \u00b5s   2.07 \u00b5s   2.07 \u00b5s\r\nHono RegExpRouter - main                  443.81 ns/iter (422.96 ns \u2026 468.42 ns) 446.81 ns 462.18 ns 468.42 ns\r\nHono RegExpRouter - params-per-handler-2  451.29 ns/iter (431.47 ns \u2026 476.33 ns) 453.57 ns 476.24 ns 476.33 ns\r\n@medley/router                            608.95 ns/iter (591.48 ns \u2026 629.72 ns) 612.27 ns 629.72 ns 629.72 ns\r\nfind-my-way                                 1.03 \u00b5s/iter     (1.01 \u00b5s \u2026 1.11 \u00b5s)   1.03 \u00b5s   1.11 \u00b5s   1.11 \u00b5s\r\nkoa-tree-router                           659.81 ns/iter (638.36 ns \u2026 724.44 ns) 665.09 ns 724.44 ns 724.44 ns\r\ntrek-router                                 1.02 \u00b5s/iter   (988.83 ns \u2026 1.05 \u00b5s)   1.02 \u00b5s   1.05 \u00b5s   1.05 \u00b5s\r\nexpress (WARNING: includes handling)        7.83 \u00b5s/iter     (7.77 \u00b5s \u2026 7.93 \u00b5s)   7.86 \u00b5s   7.93 \u00b5s   7.93 \u00b5s\r\nkoa-router                                 13.03 \u00b5s/iter     (12 \u00b5s \u2026 164.54 \u00b5s)  12.75 \u00b5s  17.46 \u00b5s  21.96 \u00b5s\r\nradix3                                      1.55 \u00b5s/iter      (1.5 \u00b5s \u2026 1.59 \u00b5s)   1.56 \u00b5s   1.59 \u00b5s   1.59 \u00b5s\r\n\r\nsummary for all together\r\n  Hono RegExpRouter - main\r\n   1.02x faster than Hono RegExpRouter - params-per-handler-2\r\n   1.37x faster than @medley/router\r\n   1.49x faster than koa-tree-router\r\n   2.29x faster than trek-router\r\n   2.32x faster than find-my-way\r\n   3.5x faster than radix3\r\n   4.53x faster than Hono TrieRouter\r\n   17.64x faster than express (WARNING: includes handling)\r\n   29.35x faster than koa-router\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1566",
        "comments": [
          "Hi @usualoma,\r\n\r\nI have taken the time to think about this and I find it to be an interesting approach!\r\n\r\n> However, since the contribution to speed by making it an Array is limited and the code is less readable, some may argue that the format using Objects is better in this regard.\r\n\r\nIndeed, but I don't think it's significantly less readable.\r\n\r\nSo, how about we go this way!? If so, can you complete the PR? It's a hard task to write the code for other routers, but I'd like you to do it.\r\n\r\nThanks!\r\n",
          "@yusukebe OK, I will try to implement this specification in other routers.",
          "@yusukebe \r\nBy the way, TrieRouter no longer checks for \"Duplicate param name\" at all, so it no longer makes an error if multiple cases of the same name exist in a single path.\r\n\r\nBefore\r\nhttps://github.com/honojs/hono/blob/main/src/router/trie-router/node.test.ts#L435-L440\r\n\r\nAfter\r\nhttps://github.com/usualoma/hono/blob/48127094af314dad390907f727d1353ff322c4f1/src/router/trie-router/node.test.ts#L451-L458\r\n\r\nWhat do you think about this point with other routers?\r\n\r\nIn my opinion, it is better to \"not check Duplicate param name at all, even on other routers\".\r\nThe reason for this is that there is no need for the framework to check it, since it is unlikely that there are multiple instances of the same name in a single path.\r\nInstead, stopping checking and making the code shorter would be more useful.",
          "@yusukebe \r\nOh, sorry, I didn't explain myself well enough.\r\n\r\nRegExpRouter still makes an error for duplicates like `/:id/:id` in this branch, but I'm talking about whether or not to stop doing that check.\r\nhttps://github.com/usualoma/hono/blob/48127094af314dad390907f727d1353ff322c4f1/src/router/reg-exp-router/node.ts#L100-L102",
          "@usualoma\r\n\r\n> What do you think about this point with other routers?\r\n> In my opinion, it is better to \"not check Duplicate param name at all, even on other routers\".\r\n\r\nI agree. We don't need to check it. And I've implemented it to make `id` be `123` not `456` in the test of TrieRouter:\r\n\r\n```ts\r\nit('self', () => {\r\n  const node = new Node()\r\n  node.insert('get', '/:id/:id', 'foo')\r\n  const [res] = node.search('get', '/123/456')\r\n  expect(res.length).toBe(1)\r\n  expect(res[0][0]).toBe('foo')\r\n  expect(res[0][1]['id']).toBe('123')\r\n})\r\n```\r\n\r\nI think it's sufficient to have a rule that if the path has the same param name, the first value will be used.",
          "Should it throw `UnsupportedPathError`?\r\n\r\n> https://github.com/usualoma/hono/blob/48127094af314dad390907f727d1353ff322c4f1/src/router/reg-exp-router/node.ts#L100-L102",
          "> Should it throw `UnsupportedPathError`?\r\n\r\nAh, if we could throw an error in the insert phase, that would be best.",
          "Done.\r\n\r\n@yusukebe Review, please.\r\n\r\n### For `/:id/:id`\r\n\r\n* LinearRouter, RegExpRouter, TrieRouter : If the path is `/123/456`, `id` be `123` not `456`.\r\n* PatternRouter : `throw new UnsupportedPathError()` in the insert phase",
          "Hi @usualoma,\r\n\r\nThank you very much for the great work. It looks good!\r\n\r\nI've added some tests and merged the `next` branch. I think there's no problem, so I'll merge it tomorrow morning.",
          "@yusukebe Thanks. LGTM!",
          "Okay!! Let's go!!"
        ]
      }
    ],
    "v3.8.0-rc.2": [],
    "v3.7.5": [
      {
        "pr_number": 1548,
        "title": "fix(types): don't use webworker types",
        "body": "Fixes #1546 #1547\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1548",
        "comments": []
      }
    ],
    "v3.8.0-rc.1": [],
    "v3.7.4": [
      {
        "pr_number": 1532,
        "title": "fix(context): use `FetchEvent` instead of `FetchEventLike`",
        "body": "Fixes #1423\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1532",
        "comments": [
          "This change, specifically the addition of `<reference lib=\"webworker\" />`, has unfortunately caused #1546 and #1547 "
        ]
      },
      {
        "pr_number": 1535,
        "title": "refactor(hono-base): remove `any` casting",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1535",
        "comments": []
      },
      {
        "pr_number": 1541,
        "title": "fix(jsx): render a child or odd children with `Fragment` correctly",
        "body": "Fixes #1539\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1541",
        "comments": []
      },
      {
        "pr_number": 1543,
        "title": "fix(vercel): pass request context",
        "body": "Fixes #1538\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1543",
        "comments": []
      }
    ],
    "v3.7.3": [
      {
        "pr_number": 1522,
        "title": "fix(types): fix inferring path strings for an optional parameter with regexp",
        "body": "Fix the issue in this comment: https://github.com/honojs/hono/issues/1513#issuecomment-1738890316\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1522",
        "comments": []
      },
      {
        "pr_number": 1523,
        "title": "feat(adaptor): Accessable Lambda \"Context\"",
        "body": "Ref: https://github.com/orgs/honojs/discussions/1519\r\n\r\nLambda \"Context\"\r\nhttps://docs.aws.amazon.com/lambda/latest/dg/typescript-context.html\r\n\r\n```ts\r\n  app.get('/lambda-context', (c) => {\r\n    const fnctx = c.env.lambdaContext\r\n    console.log(fnctx..callbackWaitsForEmptyEventLoop)\r\n    return c.json(fnctx)\r\n  })\r\n```\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1523",
        "comments": [
          "Hi @watany-dev !\r\n\r\nLooks good to me. I'll merge this now and ship a new patch release includes this change while it's a new feature but a small change."
        ]
      }
    ],
    "v3.7.2": [
      {
        "pr_number": 1500,
        "title": "fix(utils/buffer): fix `bufferToFormData()`",
        "body": "This PR may fix https://github.com/honojs/node-server/issues/85.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1500",
        "comments": []
      }
    ],
    "v3.7.1": [
      {
        "pr_number": 1493,
        "title": "fix(deno): export `testing` helper",
        "body": "Fix #1492\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1493",
        "comments": []
      }
    ],
    "v3.7.0": [
      {
        "pr_number": 1100,
        "title": "feat: add devcontainer to improve developer experience",
        "body": "Adding the .devcontainer configuration makes it easier for us to develop projects online.",
        "html_url": "https://github.com/honojs/hono/pull/1100",
        "comments": [
          "Hi @C-Dao \r\n\r\nThank you for creating this PR.\r\n\r\nI must admit, I'm not very familiar with \"devcontainer\". Is it something you're planning to use for \"GitHub Codespaces\"?\r\n\r\nImproving developer experience is always a great goal, but I also want to maintain a minimalistic file structure in the project.\r\n\r\nIf the \"devcontainer\" is indeed very effective, we would be open to considering it.",
          "> Hi @C-Dao\r\n> \r\n> Thank you for creating this PR.\r\n> \r\n> I must admit, I'm not very familiar with \"devcontainer\". Is it something you're planning to use for \"GitHub Codespaces\"?\r\n> \r\n> Improving developer experience is always a great goal, but I also want to maintain a minimalistic file structure in the project.\r\n> \r\n> If the \"devcontainer\" is indeed very effective, we would be open to considering it.\r\n\r\nHi, @yusukebe, \r\n\r\nThanks for your review!\r\n\r\nThe .devcontainer is used for the initial development environment. \r\n\r\nYes, It can be used in \"GitHub Codespaces\". \r\n\r\nBy the way, We can use it to quickly enable local development or remote development in docker by [vscode](https://code.visualstudio.com/docs/devcontainers/containers#_getting-started). \r\n\r\nI think hono supports so many serverless environments, so it has many steps to initial environment. \r\n\r\nLike installing Deno, Bun or Node.js. \r\n\r\nWe can support initial development configuration, So that the developer can easily and quickly get started.",
          "@C-Dao \r\n\r\nSounds good!\r\n\r\nHowever, I'm not currently a user of this \"devcontainer\" and I'm not entirely convinced of its necessity. So, let's leave this PR for now. If other developers express interest in using \"devcontainer\", we can revisit this discussion and decide whether to merge it.",
          "> @C-Dao \n> \n> \n> \n> Sounds good!\n> \n> \n> \n> However, I'm not currently a user of this \"devcontainer\" and I'm not entirely convinced of its necessity. So, let's leave this PR for now. If other developers express interest in using \"devcontainer\", we can revisit this discussion and decide whether to merge it.\n\nYes, I agree.",
          "> @C-Dao\r\n> \r\n> Sounds good!\r\n> \r\n> However, I'm not currently a user of this \"devcontainer\" and I'm not entirely convinced of its necessity. So, let's leave this PR for now. If other developers express interest in using \"devcontainer\", we can revisit this discussion and decide whether to merge it.\r\n\r\ndevcontainer works, it takes care of compatibility issues on everyone's environments, and I've just successfully handled a commit through devcontainer on my windows computer!\r\n\r\nref: #1234 ",
          "Okay! I'll consider to merge this PR.",
          "Hi @C-Dao \r\n\r\nI would love to use it, but on my M1 Mac I get an error because Linux ARM64 binary for Deno is not available officially.\r\n\r\n```\r\n0.466 Error: Official Deno builds for Linux aarch64 are not available. (see: https://github.com/denoland/deno/issues/1846 )\r\n```\r\n\r\nDo you have any ideas?",
          "> Hi @C-Dao \n> \n> \n> \n> I would love to use it, but on my M1 Mac I get an error because Linux ARM64 binary for Deno is not available officially.\n> \n> \n> \n> ```\n> \n> 0.466 Error: Official Deno builds for Linux aarch64 are not available. (see: https://github.com/denoland/deno/issues/1846 )\n> \n> ```\n> \n> \n> \n> Do you have any ideas?\n\nAccording to https://docs.deno.com/runtime/manual/getting_started/installation there are M1 builds - hope this helps!",
          "Thanks! But I meant `Linux` on `arm64`. They said:\r\n\r\n> On Linux and Windows, only x64 is supported.\r\n\r\nI found this project:\r\n\r\nhttps://github.com/LukeChannings/deno-arm64",
          "Oh I see! I completely misunderstood sorry \ud83d\ude2d \r\nThat project seems to work and be maintained yeah - ~~it'll require some Dockerfile adaptation to check the target arch~~ nevermind there's an adapted deno_install script but yeah"
        ]
      },
      {
        "pr_number": 1386,
        "title": "fix: error to retrieve cookie",
        "body": "TypeError: Cannot read properties of undefined (reading 'split')\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1386",
        "comments": [
          "Hi @uaichat \r\n\r\nThank you for the PR.\r\n\r\nI've left a comment and there are two things what you want to do:\r\n\r\n1. Add a test.\r\n\r\nPlease add the following test in `src/helper/cookie/index.ts`:\r\n\r\n```ts\r\n    describe('get null if the value is undefined', () => {\r\n      const app = new Hono()\r\n\r\n      app.get('/cookie', (c) => {\r\n        const yummyCookie = getCookie(c, 'yummy_cookie')\r\n        const res = new Response('Good cookie')\r\n        if (yummyCookie) res.headers.set('Yummy-Cookie', yummyCookie)\r\n        return res\r\n      })\r\n\r\n      it('Should be null', async () => {\r\n        const req = new Request('http://localhost/cookie')\r\n        const cookieString = 'yummy_cookie='\r\n        req.headers.set('Cookie', cookieString)\r\n        const res = await app.request(req)\r\n        expect(res.headers.get('Yummy-Cookie')).toBe(null)\r\n      })\r\n    })\r\n```\r\n\r\n2. `denoify`\r\n\r\nPlease run `denoify` on the root directory and git add&commit&push it.",
          "@yusukebe is the option for maintainer edits enabled on their branch? Perhaps you could add said test and merge it instead of waiting if so as the PR seems stale :)",
          "@CyberFlameGO \r\n\r\nAh, yes. It's enabled. I'll fix and merge this later!"
        ]
      },
      {
        "pr_number": 1476,
        "title": "feat(client) add cookie type validate",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\n### What this PR do?\r\n1. Implemented type checking for Cookies using the Hono client.\r\n2. Modified the args arguments to also handle cookie and header.\r\n\r\nBy incorporating type checking for Cookies through the Hono client, \r\nwe aim to improve security and data integrity. \r\nAdditionally, by allowing args to handle both cookie and header, \r\nwe expand our capacity to address a broader range of validation scenarios.\r\n\r\nThis branch is branched off from the fixes in #1462\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1476",
        "comments": [
          "Hi @yusukebe \r\nPlease review the changes and provide your feedback.",
          "Hi @hagishi \r\n\r\nThis is great! The Validator had support for `header` and `cookie`, but not yet for the client. Thanks.\r\n\r\nI made some comments, please take a look."
        ]
      },
      {
        "pr_number": 1485,
        "title": "fix(jwt): avoid using `enum`",
        "body": "Fix #1484\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1485",
        "comments": []
      },
      {
        "pr_number": 1482,
        "title": "fix(context): fix `c.stream()` and `c.streamText()` matters",
        "body": "This PR includes these fixes:\r\n\r\n* Make the response headers of `c.streamText()` correct.\r\n* Make `text/plain; charset=UTF-8` as the variable to reduce bundle size.\r\n* Handling errors and ignoring them. If there is an error throw, the process may stop. And also, tracing an error may get in the way. So, I decided to do nothing in the catch.\r\n\r\nErrors are as follows. Occurs when accessing while it is streaming.\r\n\r\n<img width=\"708\" alt=\"Screenshot 2023-09-19 at 18 28 02\" src=\"https://github.com/honojs/hono/assets/10682/fe321cef-712d-4351-bbc0-44f38847cb5d\">\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1482",
        "comments": [
          "Hi @sor4chi !\r\n\r\nCould you review this?\r\n\r\nFor error handling, nothing is done when an error occurs. This is because it is easier to use. If a user want to trace, the user can create own `ReadableStream`, so I think there should be no problem.",
          "Thanks!! Merge now!"
        ]
      },
      {
        "pr_number": 1489,
        "title": "Next",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1489",
        "comments": []
      },
      {
        "pr_number": 1487,
        "title": "fix(jwt): incorrect error message",
        "body": "### Description\r\n\r\nThe error message is a duplicate of line 14 `JwtTokenInvalid` and is no descriptive to the actual cause of the issue.\r\n\r\n### Updated \r\n\r\nUpdated the error message to align with the name of the error\r\n\r\n### Author should do the followings, if applicable\r\n- N/A: Add test\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1487",
        "comments": [
          "Hi @NicoPlyley \r\n\r\nThanks. Looks good. I'll merge it now!"
        ]
      },
      {
        "pr_number": 1489,
        "title": "Next",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1489",
        "comments": []
      }
    ],
    "v3.7.0-rc.1": [
      {
        "pr_number": 1489,
        "title": "Next",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1489",
        "comments": []
      },
      {
        "pr_number": 1489,
        "title": "Next",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1489",
        "comments": []
      },
      {
        "pr_number": 1461,
        "title": "feat: Improvement of Parse Body",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\nWhat this PR does\r\n\r\n   - Enhanced the parsing functionality in the Hono framework to properly handle multiple checkboxes.\r\n   - Resulting selections in the request body are now formatted as selections[] = string[], which aligns with common conventions for handling multiple selections.\r\n\r\nThis improvement enhances the usability and clarity of the Hono framework when dealing with multiple checkboxes in user requests. Your feedback and review on this pull request are highly appreciated. Thank you!",
        "html_url": "https://github.com/honojs/hono/pull/1461",
        "comments": ["Thanks @bakunya . Looks good! I'll merge it later!"]
      },
      {
        "pr_number": 1462,
        "title": "feat: Refactor ClientRequest Type for header validation",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\n### What this PR do?\r\n\r\nThe changes are aimed at improving the type safety when dealing with client requests that include headers. \r\nBy enforcing the validation at the type level, we can catch potential issues earlier in the development process, reducing the risk of runtime errors.\r\n\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1462",
        "comments": [
          "Awesome improvement! It's more type-safety now. I'll merge it."
        ]
      },
      {
        "pr_number": 1472,
        "title": "feat: expose the Jwt fucntions under the 'hono/jwt' path",
        "body": "Expose the `sign`, `verify` and `decode` functions under `hono/jwt`\r\n\r\nUsage: \r\n\r\n```js\r\nimport { decode, sign, verify } from 'hono/jwt'\r\n```\r\n\r\nCloses #1443",
        "html_url": "https://github.com/honojs/hono/pull/1472",
        "comments": [
          "@julianpoma \r\n\r\nThanks! I'll merge it into the `next` branch for the next minor version \"v3.7\" later.",
          "I will rebase with the `next` branch then!",
          "Hi @julianpoma \r\n\r\nSorry! please rebase the `next` branch again.",
          "@yusukebe Done :)",
          "@julianpoma \r\n\r\nSuper thanks! I'll merge now."
        ]
      },
      {
        "pr_number": 1451,
        "title": "feat: add Hono test client (RPC)",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\n### What this PR do?\r\nBy using the hc test client, we can easily write tests. This utility enables efficient integration and unit testing by allowing manipulation of the Hono application object rather than making actual HTTP requests.\r\n\r\n### Usage Example\r\n```ts\r\nit('test', async() => {\r\n  const app = new Hono().get('/search', (c) => c.jsonT({ hello: 'world' }))\r\n  const res = await hc(app).search.$get()\r\n\r\n  expect(await res.json()).toEqual({ hello: 'world' })\r\n})\r\n```\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1451",
        "comments": [
          "Hi @hagishi!\r\n\r\nCool! This is one of the things we want to do with RPC-mode. Introducing the `testing` helper makes sense.\r\n\r\nBut, there's one thing we should consider. The function name `hc` might be confusing because `hono/client` has a function with the same name. I haven't come up with a perfect name yet, but something like `appToClient()` might be better. Any thoughts?\r\n",
          "Hi @yusukebe,\r\n\r\nThank you for the review.\r\n\r\nI agree that some parts could indeed be confusing.\r\nFollowing the example of frameworks like [FastAPI](https://fastapi.tiangolo.com/tutorial/testing), \r\nI think a clearer naming convention like testClient(app) would be better.\r\nWhat do you think?\"",
          "Hi @hagishi !\r\n\r\n`testClient` is simple and good! Let's go with it.",
          "Hi @hagishi \r\n\r\nThanks! Merging it now."
        ]
      },
      {
        "pr_number": 1474,
        "title": "chore(benchmark): add memoirist router",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1474",
        "comments": []
      },
      {
        "pr_number": 1489,
        "title": "Next",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1489",
        "comments": []
      }
    ],
    "v3.6.3": [
      {
        "pr_number": 1471,
        "title": "fix(types): return types of `jsonT()` should be union",
        "body": "Fix #1446\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1471",
        "comments": []
      },
      {
        "pr_number": 1473,
        "title": "fix(types): support infering path types for multiple handlers",
        "body": "Fix #1431\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1473",
        "comments": []
      }
    ],
    "v3.6.2": [
      {
        "pr_number": 1458,
        "title": "fix(types): Use ExpectTypeOf from vitest to test types",
        "body": "before we used custom type to test types but now we choose to use ExpectTypeOf from vitest to test types\r\n\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1458",
        "comments": ["Great! Let's go with it!"]
      },
      {
        "pr_number": 1466,
        "title": "fix(types): middleware with different env types",
        "body": "Fix #1445 #1460\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1466",
        "comments": []
      },
      {
        "pr_number": 1470,
        "title": "fix(type): check 1st arg of middleware is `string`",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1470",
        "comments": []
      }
    ],
    "v3.6.1": [
      {
        "pr_number": 1442,
        "title": "feat: extend app.request paramters",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\n### What this PR do?\r\nAdded optional Env?: E['Bindings'] | {} and executionCtx?: ExecutionContext parameters to the app.request method signature.\r\nModified app.request to pass these new parameters to the app.fetch method.\r\n\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1442",
        "comments": [
          "Hi @hagishi !\r\n\r\nLooks good! I'll merge now. This is a new feature but it's a small change. So it will be included in a next patch-version. Thanks!"
        ]
      },
      {
        "pr_number": 1448,
        "title": "fix(hono-base): `deprecate` should be `deprecated`",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1448",
        "comments": []
      },
      {
        "pr_number": 1444,
        "title": "feat: allow the type of app.request",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\n### Changes:\r\n- Defined HonoRequest using type Hono.prototype['request'].\r\n- Updated ClientRequestOptions to optionally accept either the native fetch method or the HonoRequest method.\r\n\r\n### What this PR do?\r\nBy specifying app.request as a custom fetch, users can now write tests through app.request more efficiently while still adhering to type safety.\r\n\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1444",
        "comments": ["Hi @hagishi !\r\n\r\nThanks. Looks good! Ship it."]
      },
      {
        "pr_number": 1449,
        "title": "fix(types): fix the type error in `MiddlewareHandlerInterface`",
        "body": "Fix #1445\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1449",
        "comments": []
      },
      {
        "pr_number": 1454,
        "title": "refactor(helper):  Use getRuntimeKey() in env function",
        "body": "I've removed the logic that depends on c.runtime. I've also refactored the code to map behavior for each runtime to an object. If this is overkill, I can revert it back to the original code.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\nfixed: https://github.com/honojs/hono/issues/1452",
        "html_url": "https://github.com/honojs/hono/pull/1454",
        "comments": [
          "Hi @watany-dev !\r\n\r\nGreat job with nice refactoring. Thanks!"
        ]
      }
    ],
    "v3.6.0": [
      {
        "pr_number": 1384,
        "title": "Add $url method to hono client to extract an endpoint's url",
        "body": "Hello,\r\n\r\nThis change is a proof of concept of a simple feature request. In our project, we are using Hono RPC and need to extract the URL of a Hono router endpoint for mocking in tests.\r\n```\r\nlet fetchMock = getMiniflareFetchMock()\r\n\r\nconst { pathname, hostname } = hono.client.api.bar.$url()\r\n\r\nfetchMock\r\n        .get(hostname)\r\n        .intercept({\r\n          method: \"POST\",\r\n          path: pathname,\r\n        })\r\n        .reply(200, {}, { headers: { \"content-type\": \"application/json\" } }),\r\n```\r\n\r\nThis will mock the request to `http://localhost:8777/api/bar` by using the proposed `$url` method of the Hono client.\r\n\r\nThe `$url` method returns a URL representing the full url of the configured client request.\r\n\r\nDo you think this is good to add to the client? If so, can you guide me in improving the type definitions to include `$url`?\r\n\r\n<img width=\"456\" alt=\"Screenshot 2023-08-28 at 10 48 12 PM\" src=\"https://github.com/honojs/hono/assets/117486829/92805fff-565d-43e0-b3ff-3df24aac7cd1\">\r\n\r\nAnd also to let me know if I should write more tests and if they are in the right file. Thank you for your amazing library!\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1384",
        "comments": [
          "Hi @renzor-fist !\r\n\r\nThis is a very interesting feature. I'll consider whether we should implement it and how to go about it. Please give me a minute. Thanks!",
          "Hi @renzor-fist,\r\n\r\nAfter consideration regarding this feature, I've concluded that it would be a valuable addition to the main. Thank you for introducing such a great feature!\r\n\r\n> If so, can you guide me in improving the type definitions to include `$url`?\r\n\r\nYou can simply use intersection types to achieve this. Update the following lines in the mentioned file:\r\n\r\nhttps://github.com/honojs/hono/blob/4d8034ea89b6414f22554df7558b99833ec4cddc/src/client/types.ts#L10-L20\r\n\r\nTo look like:\r\n\r\n```ts\r\ntype ClientRequest<S extends Schema> = {\r\n  // existing code...\r\n} & {\r\n  $url: () => URL\r\n}\r\n```\r\n\r\nFor testing, it should suffice to verify against the actual values you've written. Should there be any type-related errors, they'll be thrown accordingly.\r\n\r\nThank you for your contribution.",
          "Thank you. I updated with your recommendation. Please let me know if this is satisfactory to merge.",
          "@renzor-fist \r\n\r\nGreat work! LGTM.\r\n\r\nI'll merge it, but given that this is a new feature rather than a mere fix, I'll merge it into the [`next` branch](https://github.com/honojs/hono/tree/next). This will be released for a minor version release, which should be coming up soon. Thank you for your contribution!"
        ]
      },
      {
        "pr_number": 1436,
        "title": "Next",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1436",
        "comments": []
      },
      {
        "pr_number": 1403,
        "title": "feat(context): add `status` to `TypedResponse`",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\n## About the PR\r\nVery simple, just adds a `status` prop to `TypedResponse` like mentioned in the issue.\r\n\r\nCloses #1323.",
        "html_url": "https://github.com/honojs/hono/pull/1403",
        "comments": [
          "Hi @ThatOneBro !\r\n\r\nLGTM! This is a new feature, so I'll  merge it into the `next` branch to release as a minor version. Thanks!"
        ]
      },
      {
        "pr_number": 1397,
        "title": "feat(context): introduce `c.render()`",
        "body": "This PR introduces `c.render()` and `c.setRenderer()` functions. These functions enhance Hono's response handling, allowing for more flexible and modular response structures, especially useful for defining common parts of responses, like HTML layouts.\r\n\r\nYou can set a layout using `c.setRenderer()` within a custom middleware, as shown below:\r\n\r\n```tsx\r\napp.use('*', async (c, next) => {\r\n  c.setRenderer((content) => {\r\n    return c.html(\r\n      <html>\r\n        <body>\r\n          <p>{content}</p>\r\n        </body>\r\n      </html>\r\n    )\r\n  })\r\n  await next()\r\n})\r\n```\r\n\r\nSubsequently, you can utilize `c.render()` to create responses within this layout:\r\n\r\n```tsx\r\napp.get('/', (c) => {\r\n  return c.render('Hello!')\r\n})\r\n```\r\n\r\nThe output of which will be:\r\n\r\n```html\r\n<html><body><p>Hello!</p></body></html>\r\n```\r\n\r\nAdditionally, this feature offers the flexibility to customize arguments. To ensure type safety, types can be defined as:\r\n\r\n```ts\r\ndeclare module 'hono' {\r\n  interface ContextRenderer {\r\n    (content: string, head: { title: string }): Response\r\n  }\r\n}\r\n```\r\n\r\nHere's an example of how you can use this:\r\n\r\n```tsx\r\napp.use('/pages/*', async (c, next) => {\r\n  c.setRenderer((content, head) => {\r\n    return c.html(\r\n      <html>\r\n        <head>\r\n          <title>{head.title}</title>\r\n        </head>\r\n        <body>\r\n          <header>{head.title}</header>\r\n          <p>{content}</p>\r\n        </body>\r\n      </html>\r\n    )\r\n  })\r\n  await next()\r\n})\r\n\r\napp.get('/pages/my-favorite', (c) => {\r\n  return c.render(<p>Ramen and Sushi</p>, {\r\n    title: 'My favorite',\r\n  })\r\n})\r\n\r\napp.get('/pages/my-hobbies', (c) => {\r\n  return c.render(<p>Watching baseball</p>, {\r\n    title: 'My hobbies',\r\n  })\r\n})\r\n```\r\n\r\nAlthough this feature is set to debut as experimental, its transition to general availability will be swift, contingent upon no significant issues arising.",
        "html_url": "https://github.com/honojs/hono/pull/1397",
        "comments": [
          "Cool, I like this a lot! Seems like a good logical step for having different paths render in different ways. \ud83d\udc4d ",
          "Thanks! Merging now!"
        ]
      },
      {
        "pr_number": 1410,
        "title": "feat(req): deprecate `c.req.headers` (not `c.req.header`) and others",
        "body": "This PR makes these properties in `HonoRequest` deprecated:\r\n\r\n```ts\r\nget headers() {\r\n  return this.raw.headers\r\n}\r\nget body() {\r\n  return this.raw.body\r\n}\r\nget bodyUsed() {\r\n  return this.raw.bodyUsed\r\n}\r\nget integrity() {\r\n  return this.raw.integrity\r\n}\r\nget keepalive() {\r\n  return this.raw.keepalive\r\n}\r\nget referrer() {\r\n  return this.raw.referrer\r\n}\r\nget signal() {\r\n  return this.raw.signal\r\n}\r\n```\r\n\r\nThese will be obsolete in v4.\r\n\r\n\r\nClose #1399\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1410",
        "comments": []
      },
      {
        "pr_number": 1436,
        "title": "Next",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1436",
        "comments": []
      },
      {
        "pr_number": 1430,
        "title": "fix(client): remove async from `$url()`",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1430",
        "comments": []
      },
      {
        "pr_number": 1436,
        "title": "Next",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1436",
        "comments": []
      },
      {
        "pr_number": 1436,
        "title": "Next",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1436",
        "comments": []
      },
      {
        "pr_number": 1436,
        "title": "Next",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1436",
        "comments": []
      },
      {
        "pr_number": 1406,
        "title": "feat(context): introduce `c.var`",
        "body": "This PR introduces two new features: the ability to set variables using `Middleware` generics and accessing them via `c.var`.\r\n\r\nCurrently, you can globally define variable types using generics for `Hono`.\r\n\r\n```ts\r\ntype Client = 'foo client'\r\n\r\nconst app = new Hono<{\r\n  Variables: {\r\n    client: Client\r\n  }\r\n}>()\r\n```\r\n\r\nAlternatively, you can specify them for a specific middleware using `ContextVariableMap`:\r\n\r\n```ts\r\n// JWT middleare\r\ndeclare module '../../context' { // Or you can write `declare module 'hono'`\r\n  interface ContextVariableMap {\r\n    jwtPayload: any\r\n  }\r\n}\r\n```\r\n\r\nThe challenge here is that using `ContextVariableMap` makes it globally available. For instance, after importing the JWT middleware, you can access `jwtPayload` in any handler.\r\n\r\nWith this PR, you can confine middleware-defined variables to specific handlers where the middleware is applied.\r\n\r\n```ts\r\nconst oneApiMiddleware: MiddlewareHandler<{\r\n  Variables: {\r\n    client: Client\r\n  }\r\n}> = async (c, next) => {\r\n  c.set('client', new Client())\r\n  await next()\r\n}\r\n\r\napp.get('/foo', oneApiMiddleware, (c) => {\r\n  const client = c.get('client') // `client` is accessible only in this handler\r\n  // ...\r\n  return c.json({})\r\n})\r\n```\r\n\r\nThis offers a scoped approach to variable type availability.\r\n\r\nThe second feature is `c.var`. While the conventional method to access the actual value of a variable is `c.get()`:\r\n\r\n```ts\r\nconst client = c.get('client')\r\n```\r\n\r\nWith `c.var`, you can use a more intuitive syntax:\r\n\r\n```ts\r\nconst result = c.var.client.oneMethod()\r\n```\r\n\r\nThe combination of these two features will provide a powerful tool for developers:\r\n\r\n```ts\r\nconst app = new Hono()\r\n\r\nconst echoMiddleware: MiddlewareHandler<{\r\n  Variables: {\r\n    echo: (str: string) => string\r\n  }\r\n}> = async (c, next) => {\r\n  c.set('echo', (str) => str)\r\n  await next()\r\n}\r\n\r\napp.get('/echo', echoMiddleware, (c) => {\r\n  return c.text(c.var.echo('Hello!'))\r\n})\r\n```\r\n\r\n<img width=\"479\" alt=\"Screenshot 2023-09-04 at 22 54 18\" src=\"https://github.com/honojs/hono/assets/10682/b7b18848-cb69-4080-8a9c-3ee9bdfc1f92\">\r\n\r\nThis was discussed in issue #414 and is now being realized.\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1406",
        "comments": [
          "Hi @usualoma , @ThatOneBro , and others.\r\n\r\nWhat do you think about this feature? I think this is good because it will achieve big things with minimal change of the APIs.",
          "I think this makes a lot of sense overall. \ud83d\udc4d LGTM",
          "With [this commit](https://github.com/honojs/hono/pull/1406/commits/c3358672340197a5e8c2452f1764b5937e514735), I've set the properties to read-only. This is to prevent confusion, emphasizing that users should exclusively use `c.set()` to assign values.\r\n\r\n<img width=\"297\" alt=\"Screenshot 2023-09-06 at 11 15 47\" src=\"https://github.com/honojs/hono/assets/10682/3065a2e2-0ab6-4237-ac0f-4dc1adf83080\">\r\n",
          "> ```ts\r\n> const app = new Hono()\r\n> \r\n> const echoMiddleware: MiddlewareHandler<{\r\n>   Variables: {\r\n>     echo: (str: string) => string\r\n>   }\r\n> }> = async (c, next) => {\r\n>   c.set('echo', (str) => str)\r\n>   await next()\r\n> }\r\n> \r\n> app.get('/echo', echoMiddleware, (c) => {\r\n>   return c.text(c.var.echo('Hello!'))\r\n> })\r\n> ```\r\n\r\nI think there is a large gap in documentation/public knowledge on how to use honojs with cloudflare durable objects in the sense that there is no way shown how to access durable object storage in the route handlers. Would the c.set() and c.text(c.var.echo('Hello!')) solution be good to store and access durable object storage in routes?\r\n\r\n"
        ]
      },
      {
        "pr_number": 1420,
        "title": "feat(jsx): export `FC`",
        "body": "This PR makes JSX supports exporting `FC`. You can use it for specifying types to the function component.\r\n\r\n```tsx\r\nimport { FC } from 'hono/jsx'\r\n\r\nconst Layout: FC<{ title: string }> = (props) => {\r\n  return (\r\n    <html>\r\n      <head>\r\n        <title>{props.title}</title>\r\n      </head>\r\n      <body>{props.children}</body>\r\n    </html>\r\n  )\r\n}\r\n\r\nconst Top = (\r\n  <Layout title='Home page'>\r\n    <h1>Hono</h1>\r\n    <p>Hono is great</p>\r\n  </Layout>\r\n)\r\n```\r\n\r\nFix #1419\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1420",
        "comments": [
          "Can we maybe export `Child` from `hono/jsx` too? \ud83e\udd14 ",
          "Great improvement! \ud83d\udc4d "
        ]
      },
      {
        "pr_number": 1436,
        "title": "Next",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1436",
        "comments": []
      },
      {
        "pr_number": 1434,
        "title": "feat(helper): introduce `factory` helper",
        "body": "This PR introduces `factory` helper. Now, this provides a `middleware` factory method to create a middleware handler.\r\n\r\n```ts\r\nconst mw = (message: string) =>\r\n  middleware(async (c, next) => {\r\n    await next()\r\n    c.header('X-Message', message)\r\n  })\r\n```\r\n\r\nIf define your middleware with `middleware`, the appropriate types will be added.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1434",
        "comments": []
      },
      {
        "pr_number": 1436,
        "title": "Next",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1436",
        "comments": []
      }
    ],
    "v3.6.0-rc.2": [
      {
        "pr_number": 1421,
        "title": "feat(vercel): pass `RequestContext`",
        "body": "PR with implementation added to #1416.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1421",
        "comments": [
          "Hi @lawrencecchen !\r\n\r\nI've created this PR based on your PR. This added `RequestContext`-like types and handling the case if \r\n`passThroughOnException` is called. Please check it out.",
          "Thanks! Looks great \ud83d\udea2 ",
          "Okay, I'll merge this now!"
        ]
      },
      {
        "pr_number": 1404,
        "title": "test(vitest): replace `jest` with `vitest`",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\n## What this PR does\r\nReplaces `jest` with `vitest` and cleans up dependencies. \r\n\r\n~~I did notice one failing test in `lagon` suite, but I think it's unrelated to this PR.~~ EDIT: Tests not failing on CI, so seems ok.\r\n\r\nCloses #1390.\r\n\r\n## TODO\r\n\r\nEDIT: One last test failing on `Fastly Compute@Edge`...\r\n- [x] Get last test running on `Fastly`\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1404",
        "comments": [
          "Currently the `fastly` suite is failing on the test that is supposed to throw `crypto.subtle.importKey in undefined` but is instead throwing `crypto is not defined`... I found I got this same error locally when I was testing in node v18, but on v19 the test passes...\r\n\r\nNode v18:\r\n<img width=\"1060\" alt=\"Screen Shot 2023-09-03 at 10 39 37 PM\" src=\"https://github.com/honojs/hono/assets/1592008/f4123be6-bf16-4871-9007-8d747c825886\">\r\n\r\nNode v19:\r\n<img width=\"854\" alt=\"Screen Shot 2023-09-03 at 10 39 51 PM\" src=\"https://github.com/honojs/hono/assets/1592008/1db76101-a82c-4603-9a9f-031783c7fd70\">\r\n",
          "@ThatOneBro \r\n\r\nGreat work! I've tested this in my local machine, it's fast!\r\n\r\nI'll take a look about the Fastly issue. Thanks!",
          "Hi @ThatOneBro,\r\n\r\nI think reproducing the runtime environment is important. As of now, we've successfully emulated the Fastly environment with `jest-preset-fastly-js-compute`. Considering this, how about we remain the Jest test for Fastly? Of course, we replace other tests with Vitest. This might be a better solution, while we're currently juggling two testing engines: Jest and Vitest.\r\n\r\nWhat do you think about this?",
          "Hey @yusukebe, that makes sense to me. I'll make that change tonight so we can merge this. Keeping `jest` for `Fastly` until there is a `vitest` alternative can work",
          "@ThatOneBro \r\n\r\nThanks!",
          "No problem, @yusukebe! I added `jest` back for the `fastly` tests and looks like everything works now! Let me know if there is anything I missed, otherwise feel free to merge!",
          "Hi @ThatOneBro !\r\n\r\nPerfect! Let's go with it. Thanks Derrick!"
        ]
      },
      {
        "pr_number": 1424,
        "title": "test: ignore `sandbox` dir",
        "body": "I always create a directory called `sandbox` for my experiments.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1424",
        "comments": []
      },
      {
        "pr_number": 1425,
        "title": "ci: add `--no-warnings` option for `main`",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1425",
        "comments": []
      },
      {
        "pr_number": 1426,
        "title": "fix(types): fix `MergeSchemaPath` correct",
        "body": "Fix #1413\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1426",
        "comments": []
      },
      {
        "pr_number": 1427,
        "title": "test: `tsc` before `vitest`",
        "body": "After replacing Jest with Vitest, I noticed that types are not being checked. So, adding `tsc` before running `vitest`.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1427",
        "comments": []
      },
      {
        "pr_number": 1428,
        "title": "cookie parsing improvements",
        "body": "### Author should do the followings, if applicable\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\n### Improvements\r\n- validate cookie names and values during parsing per rfc6265 to mitigate various security threats\r\n- protect signed cookies against timing attacks (i.e. utilize `crypto.subtle.verify` instead of comparing strings)\r\n- fix bug where unsigned cookie values that match the shape of signed values are not returned\r\n- remove constraints on signed cookie values (e.g. signed values can contain period now)\r\n- allow use of binary secret for signed cookies\r\n- improved efficiency (e.g. remove duplicated logic / cache secret key when verifying multiple signed values)\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1428",
        "comments": ["Cool! Looks good. Thanks @jkeys089 !"]
      }
    ],
    "v3.6.0-rc.1": [],
    "v3.5.8": [
      {
        "pr_number": 1401,
        "title": "fix(rpc): infer path with `route()` and `basePath()`",
        "body": "This PR will make the RPC-mode infers the path type correctly, with `app.basePath()` and `app.route()`:\r\n\r\n```ts\r\nconst book = new Hono().post('/create', (c) => c.jsonT('test root'))\r\nconst api = new Hono().basePath('/v1').route('/book', book)\r\n```\r\n\r\nWill be handled as:\r\n\r\n```ts\r\nconst res = await client.v1.book.create.$post()\r\n// ...\r\n```\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1401",
        "comments": []
      },
      {
        "pr_number": 1408,
        "title": "chore(ci): checkout@v4",
        "body": "Updated!\r\nhttps://github.com/actions/checkout/releases/tag/v4.0.0\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1408",
        "comments": ["Thanks! Merge it now!"]
      },
      {
        "pr_number": 1407,
        "title": "chore(ci): Avoid denoify API rate limit",
        "body": "For now, we'll attempt to mitigate the issue using a GitHub Token.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n\r\nclose #1398 ",
        "html_url": "https://github.com/honojs/hono/pull/1407",
        "comments": ["Thanks, hope this works well. Let's go!"]
      },
      {
        "pr_number": 1411,
        "title": "fix(`utils/buffer`): don't decode space as `+`",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1411",
        "comments": []
      },
      {
        "pr_number": 1412,
        "title": "fix(jsx): enable `Fragment`",
        "body": "Fix #1402\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1412",
        "comments": []
      }
    ],
    "v3.5.7": [
      {
        "pr_number": 1395,
        "title": "improvements to secure headers middleware",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\n### Improvements\r\n- fix CSP directive names (e.g. `defaultSrc ` should be `default-src`)\r\n- add more CSP directives (e.g. `child-src`, `connect-src`, `form-action`, etc...)\r\n- add new `Report-To` and `Reporting-Endpoints` headers in support of the `report-to` CSP directive\r\n- pre-calculate CSP header once at setup instead of per request\r\n- allow overriding header values (e.g. `xFrameOptions: true` or `xFrameOptions: 'DENY'`)\r\n\r\nI'd be happy to update the [docs](https://hono.dev/middleware/builtin/secure-headers) as well once this PR is accepted.\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1395",
        "comments": [
          "Hi @jkeys089 \r\n\r\nThank you! Looks good to me.\r\n\r\n@watany-dev \r\n\r\nCould you review this PR, you too?",
          "@jkeys089 \r\nThank you! I have one question. I'm considering adding the 'Report-To' and 'Reporting-Endpoints' headers as features. They seem useful for reporting, but I'm not sure if they are standard. Could you provide me with links to MDN and W3C for more information?",
          "@watany-dev sure, those links are included in the proposed [documentation updates](https://github.com/honojs/website/pull/89).",
          "@jkeys089 @jkeys089 \r\nThank you! I think I'm good to go.",
          "@jkeys089 @watany-dev \r\n\r\nThis change is \"adding a new feature\" but it's tiny. So, I'll merge it into the main now, and will be released as a patch release. Thanks!"
        ]
      },
      {
        "pr_number": 1393,
        "title": "fix(validator): cache `arrayBuffer` to use after validation",
        "body": "This PR enhances the handling of request bodies post-validation. After validating a JSON with the validator, you can now invoke `c.req.text()` to access the request body. Additionally, `c.req.text()` is now available `body` validation. We achieve this by caching the `arrayBuffer` in `c.req.bodyCache` and reusing it when calling `c.req.text()`.\r\n\r\nNote, if you attempt to use `c.req.raw.text()` after validating the `json` or `body`, you will encounter an error. Instead, always use `c.req.text()` in this context.\r\n\r\nFix #1387\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1393",
        "comments": []
      }
    ],
    "v3.5.6": [
      {
        "pr_number": 1385,
        "title": "fix(types): infer a response type for async handler",
        "body": "Degraded by the PR #1379\r\n\r\nFixes #1383\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1385",
        "comments": []
      }
    ],
    "v3.5.5": [
      {
        "pr_number": 1378,
        "title": "ci: check if it is denoified",
        "body": "The original PR: #1374\r\n\r\nI've separated 'denoify' from the 'main'.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1378",
        "comments": [
          "Hi @watany-dev!\r\n\r\nIn this PR, I've separated the \"check if it's denoified\" from the \"main\". I believe this structure is better:\r\n\r\n<img width=\"987\" alt=\"Screenshot 2023-08-27 at 16 09 13\" src=\"https://github.com/honojs/hono/assets/10682/43deb1f9-e444-4e6e-ba12-468efbcea8c3\">\r\n\r\nIf you agree with this change, I'll merge this PR into `main` and credit you as a co-author. Then, I'll close the PR #1374.\r\n",
          "@yusukebe\nIt is certainly simpler to separate them and looks better than the previous commitments! I thought it was good.",
          "@watany-dev \r\n\r\nThanks! Let's go!"
        ]
      },
      {
        "pr_number": 1381,
        "title": "fix: Revert \"feat(`package.json`): export `hono/context`\"",
        "body": "This reverts commit 29fe930b676cef3e67636574630d8144349c2928.\r\n\r\nFix #1380\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1381",
        "comments": []
      },
      {
        "pr_number": 1379,
        "title": "fix(context): different types using `jsonT()`",
        "body": "With this PR, `c.jsonT()` can now handle two or more distinct types:\r\n\r\n```ts\r\nconst app = new Hono()\r\n\r\nconst routes = app.get('/all', (c) => {\r\n  const data: Data = { success: true, data: {} }\r\n\r\n  if (!data.success) {\r\n    return c.jsonT({\r\n      success: false,\r\n      message: 'Could not fetch data',\r\n    })\r\n  }\r\n\r\n  return c.jsonT({\r\n    success: true,\r\n    data: data.data,\r\n  })\r\n})\r\n```\r\n\r\nThe returned types are as follows:\r\n\r\n```ts\r\n{\r\n    success: boolean;\r\n    message: string;\r\n} & {\r\n    success: boolean;\r\n    data: any;\r\n}\r\n```\r\n\r\n<img width=\"372\" alt=\"Screenshot 2023-08-27 at 16 19 41\" src=\"https://github.com/honojs/hono/assets/10682/c430685f-9e7d-4a90-9452-44579861a965\">\r\n\r\nFix #1377.",
        "html_url": "https://github.com/honojs/hono/pull/1379",
        "comments": [
          "Wow @yusukebe, that is some first class library maintenance. Impressive (and unbelievably fast) job! "
        ]
      }
    ],
    "v3.5.4": [
      {
        "pr_number": 1373,
        "title": "fix(types): fix `AddDollar`",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1373",
        "comments": []
      }
    ],
    "v3.5.3": [
      {
        "pr_number": 1372,
        "title": "fix(types): export `ToSchema`",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1372",
        "comments": []
      }
    ],
    "v3.5.2": [
      {
        "pr_number": 1371,
        "title": "fix(types): remove type-errors for routes",
        "body": "This PR prevents infinite loops in type inference for routes. With this update, you can use many routes in RPC mode.\r\n\r\nCurrent:\r\n<img width=\"694\" alt=\"Screenshot 2023-08-24 at 14 55 47\" src=\"https://github.com/honojs/hono/assets/10682/17726680-27ef-4fdb-a745-ad58bf43cfe4\">\r\n\r\nWith this PR:\r\n<img width=\"784\" alt=\"Screenshot 2023-08-24 at 14 54 46\" src=\"https://github.com/honojs/hono/assets/10682/bf9d73a9-13bd-4e9e-b58d-b8b72b58bc64\">\r\n\r\nMay fix #1360\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1371",
        "comments": []
      }
    ],
    "v3.5.1": [
      {
        "pr_number": 1368,
        "title": "fix(client): `continue` if query value is `undefined`",
        "body": "Fix #1367 \r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1368",
        "comments": []
      },
      {
        "pr_number": 1366,
        "title": "fix(compress): delete `content-length` header",
        "body": "It should be deleted. Fix https://github.com/honojs/node-server/issues/79\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1366",
        "comments": []
      }
    ],
    "v3.5.0": [],
    "vv3.5.0-rc.1": [
      {
        "pr_number": 1334,
        "title": "chore: add `format` script",
        "body": "add new script `format`\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n\r\nFix: #1318",
        "html_url": "https://github.com/honojs/hono/pull/1334",
        "comments": [
          "Hi @watany-dev !\r\n\r\nLGTM! I have no further comments. Thanks!"
        ]
      },
      {
        "pr_number": 1336,
        "title": "docs: support change of escapeTextForBrowser path in react",
        "body": "Hello!\r\n\r\nSorry for the very minor changes.\r\n\r\nOn Sep 29, 2022, \r\nhttps://github.com/facebook/react/commit/97d75c9c8bcddb0daed1ed062101c7f5e9b825f4\r\nIt appears that the implementation detail portion of  React-DOM implementation details has been moved from `. /packages/react-dom` to `. /packages/react-dom-bindings`.\r\nThe link was thereby broken and has been corrected to the correct link.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1336",
        "comments": [
          "Hi @sor4chi!\r\n\r\nEven though it's a small fix, it's quite helpful. Thanks for your contribution!"
        ]
      },
      {
        "pr_number": 1339,
        "title": "refactor: lint",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1339",
        "comments": []
      },
      {
        "pr_number": 1344,
        "title": "refactor: denoify",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1344",
        "comments": []
      },
      {
        "pr_number": 1343,
        "title": "refactor(compress-middleware): resolve type assertion using const assertion",
        "body": "Hello. Please merge it if you like!\r\nI could not remove ts-ignore because Nodejs globalThis does not have a CompressionStream type...\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1343",
        "comments": [
          "Hi @sor4chi !\r\n\r\nThanks. This is a good refactoring. One thing, could you do `yarn denoify` and git add&commit&push the generated file?",
          "@yusukebe \r\noh, I forgot to do that.\r\nIs this the right commit message?",
          "@sor4chi \r\n\r\nNo problem! I'll merge it now. Thanks for your contributing."
        ]
      },
      {
        "pr_number": 1340,
        "title": "Web query undefined check",
        "body": "### Notes\r\n- Opened this PR after I was confused why conditional code was being ran in my API when using the RPC client. Realized that I had a query string that contained `&filter=undefined` that was then parsed into `{ filter: 'undefined'}`\r\n- Added check for undefined value in query to prevent API receiving values of `undefined`. \r\n",
        "html_url": "https://github.com/honojs/hono/pull/1340",
        "comments": [
          "Hi @Tanner-Scadden !\r\n\r\nThank you for the PR. Looks good! I have one request before merging. Could you run `yarn denoify` and git add&commit&push generated files? They are needed for Deno.\r\n\r\n",
          "> Hi @Tanner-Scadden !\r\n> \r\n> Thank you for the PR. Looks good! I have one request before merging. Could you run `yarn denoify` and git add&commit&push generated files? They are needed for Deno.\r\n\r\ndone!",
          "Thanks! Let's go with this!"
        ]
      },
      {
        "pr_number": 1332,
        "title": "feat(`package.json`): export `hono/context`",
        "body": "This PR enables to export `hono/context`. With this feature, you can set the variables types for `c.get()`/`c.set()` using `ContextVariableMap`.\r\n\r\n```ts\r\ndeclare module 'hono/context' {\r\n  interface ContextVariableMap {\r\n    message: string\r\n  }\r\n}\r\n```\r\n\r\n<img width=\"496\" alt=\"Screenshot 2023-08-15 at 12 22 57\" src=\"https://github.com/honojs/hono/assets/10682/2aabd96e-4695-4dfa-8e2e-23ae03a0b429\">\r\n\r\nFix #1319",
        "html_url": "https://github.com/honojs/hono/pull/1332",
        "comments": []
      },
      {
        "pr_number": 1333,
        "title": "feat(req): cache body content",
        "body": "This PR allows `HonoRequest` to cache its body content retrieved from methods like `req.raw.json()`. The following methods will have their results cached:\r\n\r\n* `json()`\r\n* `text()`\r\n* `arrayBuffer()`\r\n* `blob()`\r\n* `formData()`\r\n\r\nBefore this feature, if we needed to call `req.json()` more than once, we would have to use `clone()`. In validators, `clone()` was used to preserve the request for subsequent uses:\r\n\r\n```ts\r\nvalue = await c.req.raw.clone().json()\r\n```\r\n\r\nHowever, this approach triggered warnings in Cloudflare/Wrangler:\r\n\r\n```\r\nYour worker created multiple branches of a single stream (for instance, by calling `response.clone()` or `request.clone()`) but did not consume the body of both branches. This behavior is inefficient since it requires the entire stream of data to be buffered in memory rather than being streamed. As a result, your worker might be unexpectedly terminated for exceeding the memory limit. If your intention was only to copy the request or response headers and metadata (e.g., to modify them), consider using the appropriate constructors (e.g., `new Response(response.body, response)`, `new Request(request)`, etc.).\r\n```\r\n\r\nWith this PR, the content is cached within the `HonoRequest` object, preventing such warnings.\r\n\r\nThis change does not degrade performance and involves minimal code adjustments. I believe it's a valuable enhancement.\r\n\r\n--- \r\n\r\nFix #1317 #1179 #567 https://github.com/honojs/middleware/issues/62\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1333",
        "comments": [
          "Hi @usualoma @ThatOneBro \r\n\r\nWhat do you feel about this PR? Let me know your opinion.",
          "Thanks @ThatOneBro !\r\n\r\nWe'll go with this."
        ]
      },
      {
        "pr_number": 1342,
        "title": "fix(middleware): signed cookie misinterpretation of cookie values with dot",
        "body": "Related issue: https://github.com/honojs/hono/issues/1337\r\n\r\nDone the following:\r\n- [x] Modified tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1342",
        "comments": ["Thanks! Let's go!"]
      },
      {
        "pr_number": 1312,
        "title": "refactor(context): allow passing `HonoRequest` as 1st arg",
        "body": "This does not cause performance degradation, but it makes the code cleaner.",
        "html_url": "https://github.com/honojs/hono/pull/1312",
        "comments": []
      },
      {
        "pr_number": 1351,
        "title": "fix(req): fix inferring types in `req.valid()`",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1351",
        "comments": []
      },
      {
        "pr_number": 1350,
        "title": "feat(validator): deprecate `queries` (use `query` instead)",
        "body": "Fixes #1349 \r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1350",
        "comments": []
      },
      {
        "pr_number": 1352,
        "title": "feat(validator): supports `header` and `cookie`",
        "body": "Resolve #1348\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1352",
        "comments": []
      },
      {
        "pr_number": 1354,
        "title": "fix(type): add missing S to RemoveBlankRecord",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1354",
        "comments": [
          "Hi @sizumita !\r\n\r\nThanks for fixing. I'll merge it now!"
        ]
      },
      {
        "pr_number": 1345,
        "title": "feat(app): pass `env` to `getPath()`",
        "body": "Resolve #1320\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1345",
        "comments": [
          "Hi @baygeldin !\r\n\r\nI've implemented the feature to resolve your request. Indeed, this will be useful for some users of Cloudflare Workers.\r\n\r\nCould you check this PR?",
          "@baygeldin \r\n\r\nThanks for your review. I'll merge this now. Next version (maybe minor upgrade) includes this feature will be released later!"
        ]
      },
      {
        "pr_number": 1359,
        "title": "fix(client): ignore `header` and `cookie` types",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1359",
        "comments": []
      },
      {
        "pr_number": 1357,
        "title": "fix(types): corrected argument types for `Context` methods",
        "body": "Each method is typed by Interface and doesn't affect the type of function arguments as seen by the caller, but wouldn't it be healthier to modify it?\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1357",
        "comments": [
          "Hi @asaxeye !\r\n\r\nThank you!! This is typos/bugs. Looks good, merge now."
        ]
      },
      {
        "pr_number": 1341,
        "title": "feat(middleware): Alternative middleware equivalent to Helmet",
        "body": "I created this middleware as an experimental equivalent to Helmet. Originally made for my own use, I've opened a PR in this repository because there was a request for Helmet in the Github Issues. One difference from the official Helmet is that this middleware only adopts headers that can be set with fixed values, and users can only set each header to true/false.\r\n\r\nI'm still undecided about the name of the middleware. It's not a pure Helmet. Names like 'mini-helmet' or 'kabuto' could be interesting, but for now, I've opted for a straightforward naming.\r\n\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\n## Doc(sample)\r\n\r\n---\r\n### Secure Header Middleware\r\nThis middleware simplifies the setup of security headers. Inspired in part by the capabilities of Helmet, it allows you to control the activation and deactivation of specific security headers.\r\n\r\n#### Installation\r\nThe middleware is built into the Hono framework, so no additional installation is required.\r\n\r\n#### Usage\r\n```ts\r\nimport { secureHeader } from 'hono/secure-header';\r\n\r\napp.use('*', secureHeader({ xFrameOptions: false, xXssProtection: false }));\r\n\r\n```\r\n\r\nfix: https://github.com/honojs/hono/issues/798\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1341",
        "comments": [
          "Cooooool! Really wanted it. I'll check it later!",
          "Please also refer to the documentation.\r\nhttps://github.com/honojs/website/pull/83",
          "Hi @watany-dev,\r\n\r\nThank you for the excellent PR! It's evident that this is a much-desired feature, and I'm grateful that you've taken it on.\r\n\r\nAbout the naming: I understand the familiarity of \"Helmet\" for developers who have experience with Express. However, for those who might not have that background (like myself), it could be a tad confusing.\r\n\r\nI concur that `secure-header` is more descriptive and self-explanatory. That being said, considering the plural nature (as we're dealing with multiple headers), `secure-headers` might be more apt. For instance, the `Response` object utilizes the `headers` property, not `header`:\r\n\r\n```ts\r\nconst res = new Response()\r\nres.headers.get('foo')\r\n```\r\n\r\nI've also added some comments in the PR; kindly see them.\r\n\r\nLastly, it's imperative for users to be informed about the positioning of this middleware. As illustrated by the following test, it's evident that order matters:\r\n\r\n```ts\r\nit('should remove x-powered-by header', async () => {\r\n  const app = new Hono()\r\n  app.use('*', poweredBy())\r\n  app.use('*', secureHeader())\r\n\r\n  const res = await app.request('/test')\r\n  expect(res.headers.get('x-powered-by')).toBeFalsy()\r\n})\r\n```\r\n\r\nWe'll need to highlight this aspect in our documentation on the website.",
          "@yusukebe \r\nThank you for the comment. I've made the corrections; could you please check? ",
          "Some questions/concerns\r\n- Are there plans for including support for the CSP header? (Which is also probably the most important)...\r\n- ... as well as `X-Powered-by` and `Cross-Origin-Embedder-Policy` seem to be missing\r\n- Can we add links to the MDN docs of the respective to the docs?\r\n- `Origin-Agent-Cluster` is included within the docs AND \"not supported\" list \ud83e\udd14\r\n\r\nI would be very happy to work on it if you don't want to, just let me know",
          "Hi @watany-dev,\r\n\r\nThank you for the revisions. Also, please take into account the feedback provided by @zisra.\r\n\r\nI believe:\r\n> \"Can we add links to the MDN docs of the respective to the docs?\"\r\n\r\nis a great idea. I've approved it, but if you'd like to make any additional changes, feel free to do so.",
          "@zisra \r\nThank you for the feedback! I believe we've been able to set up the CSP header for general use cases. We've also addressed the other comments. (We'll provide the CSP documentation at a later date.)",
          "- Address CI errors\n- Instructions on using CSP\n- Document differences in default values between our implementation and Helmet\n- Document the order of middleware usage",
          "@yusukebe \r\nThank you. I believe I've corrected the areas that needed fixing. There is a part where CI fails with a 429 error, but it seems to be a temporary error unrelated to this matter. I will add \"workflow_dispatch\" to ci.yaml in a separate PR so that it can be executed manually.",
          "This is the latest version, including the document.\n\n\u203bforgot denoify...",
          "Sorry for the wait. It's done now.",
          "@watany-dev \r\n\r\nThank you very much. You've done the awesome work. The next release (minor change) includes this feature will be released later. Thanks again!"
        ]
      },
      {
        "pr_number": 1353,
        "title": "feat: introduce \"Helpers\"",
        "body": "Resolve #1347\r\n\r\nWhat I've done:\r\n\r\n* Create `src/helper`.\r\n* Make Cookie Middleware and html Middleware as helpers.\r\n* Move `src/adapter` to `src/helper/adapter`.\r\n* Deprecate `c.runtime()` and make `getRuntimeKey()` func in `hono/adapter`. `c.runtime()` will be obsolete in v4.\r\n* Move `src/middleware/jsx` to `src/jsx`\r\n* Add `src/helper.ts` for Deno.\r\n\r\nChanged the structures but, import paths like `import { getCookie } from 'hono/cookie'` are not changed.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1353",
        "comments": []
      },
      {
        "pr_number": 1361,
        "title": "fix(`middleware.ts`): export secure-headers for Deno",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1361",
        "comments": []
      }
    ],
    "v3.4.3": [
      {
        "pr_number": 1330,
        "title": "fix(app): set `/` for `path` as default",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1330",
        "comments": []
      }
    ],
    "v3.4.2": [
      {
        "pr_number": 1307,
        "title": "Add missing wasm mime type",
        "body": "Wasm wont load in the browser without a corect Content-Type!",
        "html_url": "https://github.com/honojs/hono/pull/1307",
        "comments": [
          "Hi @timfish \r\n\r\nYou are right! One thing, could you do `yarn denoify`, and git add&commit&push the generated file. It is needed for Deno.",
          "Done!",
          "Great!"
        ]
      },
      {
        "pr_number": 1314,
        "title": "chore: add github issue/PR templates",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1314",
        "comments": []
      },
      {
        "pr_number": 1311,
        "title": "perf(hono-base): use `constructor.name` instead of `instanceof`",
        "body": "To detect the class name of the instance, `res.contructor.name === 'Response'` is faster than `res instanceof Response` on Bun.\r\n\r\n<img width=\"709\" alt=\"Screenshot 2023-08-09 at 13 38 42\" src=\"https://github.com/honojs/hono/assets/10682/975e386e-a463-42cd-8147-462294372712\">\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1311",
        "comments": []
      },
      {
        "pr_number": 1315,
        "title": "refactor(utils/url): remove unnecessary code",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1315",
        "comments": []
      },
      {
        "pr_number": 1305,
        "title": "fix(adaptor): Access to custom request context on AWS Lambda Adaptor ",
        "body": "fixed: https://github.com/honojs/hono/issues/1197\r\n\r\nWe have revised the approach by opting to retrieve it as c.env, rather than the method of the function we were discussing.\r\n\r\nusage:\r\n\r\n```typescript\r\nimport { handle, getLambdaContext } from 'hono/aws-lambda'\r\nimport type { ApiGatewayRequestContext } from 'hono/aws-lambda'\r\nimport { Hono } from 'hono'\r\n\r\ntype Bindings = {\r\n  requestContext: ApiGatewayRequestContext \r\n}\r\n\r\napp.get('/custom-context/apigw', (c) => {\r\n  const lambdaContext = c.env.requestContext\r\n  return c.json(lambdaContext)\r\n})\r\n\r\n```",
        "html_url": "https://github.com/honojs/hono/pull/1305",
        "comments": [
          "Hi @watany-dev !\r\n\r\n> We have revised the approach by opting to retrieve it as `c.env`.\r\n\r\nThat's a good idea! I implemented the [Netlify Adapter in the same way](https://hono.dev/getting-started/netlify#context):\r\n\r\n```ts\r\nimport { Hono } from 'https://deno.land/x/hono/mod.ts'\r\nimport { prettyJSON } from 'https://deno.land/x/hono/middleware.ts'\r\n\r\nimport { handle } from 'https://deno.land/x/hono/adapter/netlify/mod.ts'\r\nimport type { Env } from 'https://deno.land/x/hono/adapter/netlify/mod.ts'\r\n\r\nconst app = new Hono<Env>()\r\n\r\napp.get('/country', prettyJSON(), (c) =>\r\n  c.json({\r\n    'You are in': c.env.context.geo.country?.name,\r\n  })\r\n)\r\n```\r\n\r\nI'll review this PR in detail later.",
          "Hi @watany-dev,\r\n\r\nLGTM! But there's one thing. Could you run `yarn lint --fix ./runtime_tests/lambda`? The styles are broken in the test files.",
          "@yusukebe \r\nSorry, I've fixed the code under the `runtime_test` directory.",
          "@watany-dev \r\n\r\nAh, sorry one more thing. Could you run `yarn prettier --write runtime_tests/lambda` too?",
          "@yusukebe fixed!",
          "@watany-dev Cool! Super thanks!\r\n\r\nI'll merge this now."
        ]
      },
      {
        "pr_number": 1309,
        "title": "Export Schema type to allow route exports in declaration files",
        "body": "Fixes #1308 ",
        "html_url": "https://github.com/honojs/hono/pull/1309",
        "comments": [
          "Hi @rosahaj,\r\n\r\nI understand the problem, and this is a good solution. I want to merge it, but there's one thing you need to do. Please run `yarn denoify`, then add, commit, and push the generated file. This step is necessary for Deno. Thanks.",
          "> Hi @rosahaj,\r\n> \r\n> I understand the problem, and this is a good solution. I want to merge it, but there's one thing you need to do. Please run `yarn denoify`, then add, commit, and push the generated file. This step is necessary for Deno. Thanks.\r\n\r\nI have run `yarn denoify`, but it didn't change any files since Deno uses `src/mod.ts`, not `src/index.ts`. I have applied the change to `src/mod.ts` as well and ran `yarn denoify`.\r\n\r\nBy the way, have you thought about automatically running `denoify` through GitHub actions for every created PR?",
          "Hi @rosahaj \r\n\r\n> I have run `yarn denoify`, but it didn't change any files since Deno uses `src/mod.ts`, not `src/index.ts`. I have applied the change to `src/mod.ts` as well and ran `yarn denoify`.\r\n\r\nAh, you are right. That's not be emitted. Thanks!\r\n\r\n> By the way, have you thought about automatically running `denoify` through GitHub actions for every created PR?\r\n\r\nYeah, sounds good. Do you have any idea? I though it but, I couldn't touch it yet.\r\n\r\nAnyway, I'll merge this PR now!"
        ]
      },
      {
        "pr_number": 1321,
        "title": "fix misspell",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1321",
        "comments": [
          "Hi @CyberFlameGO !\r\n\r\nThank you for fixing. One thing. Can you do `yarn denoify` and git add&commit&push generated file? It's needed for Deno.",
          "My bad! There you are :)",
          "Thanks! Merge now."
        ]
      },
      {
        "pr_number": 1313,
        "title": "chore: fix linter",
        "body": "Fix the reasons that the linter did not notice.",
        "html_url": "https://github.com/honojs/hono/pull/1313",
        "comments": [
          "wait #1305",
          "Hi @watany-dev !\r\n\r\n#1305  has been merged. So, could you merge it into this branch, fix the errors, and commit?",
          "@yusukebe\nYes! We also fetch the latest commit and confirm that the test passes successfully!",
          "Great!! Let's go!"
        ]
      },
      {
        "pr_number": 1324,
        "title": "test(routing): add tests for routing without path",
        "body": "We have to test patterns like the following:\r\n\r\n```ts\r\napp.get((c) => {\r\n  return c.text('Hello')\r\n})\r\n```\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1324",
        "comments": []
      },
      {
        "pr_number": 1325,
        "title": "Fix reflecting basePath when no path in handler",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1325",
        "comments": [
          "Hi @sizumita!\r\n\r\nThanks for your contribution.\r\n\r\nCould you please address the error causing the CI to fail? And, I'd appreciate if you could add a test for the following pattern:\r\n\r\n```ts\r\napp.post('/books/:id').get((c) => {\r\n  const foo = c.req.param('id');\r\n  return c.text(foo);\r\n});\r\n```\r\n",
          "Hello, @yusukebe!\r\n\r\n> Hi @sizumita!\r\n> \r\n> Thanks for your contribution.\r\n> \r\n> Could you please address the error causing the CI to fail? And, I'd appreciate if you could add a test for the following pattern:\r\n> \r\n> ```ts\r\n> app.post('/books/:id').get((c) => {\r\n>   const foo = c.req.param('id');\r\n>   return c.text(foo);\r\n> });\r\n> ```\r\n\r\nI'm sorry that I missed running test in local.\r\nSince It's caused by missing type and invalid test syntax, I fixed it.\r\n\r\nThank you.",
          "@sizumita \r\n\r\nThanks! One thing. Can you add the test code for this:\r\n\r\n```ts\r\napp.post('/books/:id').get((c) => {\r\n  const foo = c.req.param('id');\r\n  return c.text(foo);\r\n});\r\n```",
          "@yusukebe \r\n\r\nI'm sorry for missing your order:pray:\r\nI added it and tested in local.",
          "Thanks! Ship it."
        ]
      },
      {
        "pr_number": 1328,
        "title": "fix(types): fix handler types",
        "body": "### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1328",
        "comments": []
      },
      {
        "pr_number": 1329,
        "title": "feat(req): allow passing generics to `c.req.param()`",
        "body": "You can do like this:\r\n\r\n<img width=\"619\" alt=\"Screenshot 2023-08-14 at 23 28 36\" src=\"https://github.com/honojs/hono/assets/10682/ba34723b-c846-47a2-aacc-954070d0c0da\">\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1329",
        "comments": []
      }
    ],
    "v3.4.1": [
      {
        "pr_number": 1304,
        "title": "fix(netlify): fix import paths",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1304",
        "comments": []
      }
    ],
    "v3.4.0": [
      {
        "pr_number": 1274,
        "title": "chore: tweak `jest.config.js`",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1274",
        "comments": []
      },
      {
        "pr_number": 1275,
        "title": "refactor(hono-base): remove async/await from `app.request`",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1275",
        "comments": []
      },
      {
        "pr_number": 1276,
        "title": "perf(utils/url): use regexp instead of `indexOf()`",
        "body": "RegExp is faster than `indexOf()` + `slice()` on Bun:\r\n\r\n```ts\r\nbench('regexp', async () => {\r\n  const match = request.url.match(/^https?:\\/\\/[^/]+(\\/[^?]*)/)\r\n  match ? match[1] : ''\r\n})\r\n\r\nbench('indexOf', async () => {\r\n  const url = request.url\r\n  const queryIndex = request.url.indexOf('?', 8)\r\n  url.slice(url.indexOf('/', 8), queryIndex === -1 ? undefined : queryIndex)\r\n})\r\n```\r\n\r\n<img width=\"665\" alt=\"Screenshot 2023-07-29 at 23 30 40\" src=\"https://github.com/honojs/hono/assets/10682/abbcbfad-dd18-4a01-818a-e6565b419f42\">\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1276",
        "comments": []
      },
      {
        "pr_number": 1278,
        "title": "doc: Adding a Supported Runtime - Lambda@Edge",
        "body": "I've finished writing the 'GetStarted' section; may I add it?",
        "html_url": "https://github.com/honojs/hono/pull/1278",
        "comments": [
          "Hi @watany-dev !\r\n\r\nYeah, finished! Let's go with it!"
        ]
      },
      {
        "pr_number": 1282,
        "title": "test(app): add more tests for hostname-routing",
        "body": "Related #1255",
        "html_url": "https://github.com/honojs/hono/pull/1282",
        "comments": []
      },
      {
        "pr_number": 1283,
        "title": "fix(types): add a missing handler type",
        "body": "Added a missing handler type: `app.get(path, handler)`.\r\n\r\n<img width=\"285\" alt=\"Screenshot 2023-08-03 at 22 58 02\" src=\"https://github.com/honojs/hono/assets/10682/9fa6494b-41bc-4941-8e1b-27545f37f6ec\">\r\n\r\nWill be:\r\n\r\n<img width=\"355\" alt=\"Screenshot 2023-08-03 at 22 58 07\" src=\"https://github.com/honojs/hono/assets/10682/ff9c980f-7643-4bc7-a655-611618e3071f\">\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1283",
        "comments": []
      },
      {
        "pr_number": 1284,
        "title": "perf(context): add `init` flag",
        "body": "I've measured the benchmark roughly, but it may be a little bit faster.",
        "html_url": "https://github.com/honojs/hono/pull/1284",
        "comments": []
      },
      {
        "pr_number": 1279,
        "title": "feat(middleware): Simple cookie signing functionality",
        "body": "Relates issue: https://github.com/honojs/hono/issues/1164\r\n\r\nRelated PR for website/docs: https://github.com/honojs/website/pull/77\r\n\r\nTried to be backwards compatible with the current `setCookie`/`getCookie` API, so decided to introduce new functions for this instead (similar to how express cookie-parser would do that).\r\n\r\nSome things I wasn't sure about:\r\n* If a cookie signature is not valid, what should happen with the cookie. At the moment it would return `undefined` in the `getSignedCookie` method. This might be misleading and hiding errors though, but throwing an error here instead might be too invasive. How would you handle this and at notify that the cookie was tampered with?\r\n* Thinking about this a bit more, `getSignedCookie` should probably just work exactly like `getCookie` for multiple cookies (`key` not specified) and return all cookies, but only compare the signature for cookies where a signature is provided (and otherwise ignore).\r\n* Somehow related to previous concern, `getCookie` without a `key` specified does return the signed cookie as well (without checking and removing the signature, so the value of the cookie would be the actual value + signature. Would that be intended behaviour or should signed cookies be removed from a `getCookie` result?\r\n\r\nPlease let me know if changes are needed.",
        "html_url": "https://github.com/honojs/hono/pull/1279",
        "comments": [
          "Hi @torte !\r\n\r\nThank you for creating the PR. Adding `parseSigned` and `serializeSigned` seems like a good idea. I'll review others later. Please wait.\r\n\r\nHi @dnlsandiego, @chrisbrocklesby\r\n\r\nPlease take a look at this when you have time.\r\n",
          "@torte \r\n\r\n> If a cookie signature is not valid, what should happen with the cookie?\r\n\r\nIndeed, it's better to behave differently from the situation where the value does not exist, so `undefined` probably is not preferred. In [Express's cookie-parser](https://expressjs.com/en/resources/middleware/cookie-parser.html), it returns `false` when it's not valid:\r\n\r\n<img width=\"498\" alt=\"Screenshot 2023-08-02 at 9 05 06\" src=\"https://github.com/honojs/hono/assets/10682/dbc4a2b6-aec9-46a7-8a09-939d6bf2cf59\">\r\n\r\nI think returning `false` is good, following Express's approach. Alternatively, we can have it show warnings with `console.warn()` for the developer.\r\n\r\n> Would that be intended behaviour or should signed cookies be removed from a getCookie result?\r\n\r\nI think `getCookie()` should not return signed cookie values. Express's `req.cookies`, not `req.signedCookies`, does not include signed cookies. In my opinion, signed values should not be obtained from the `getCookie()` method.\r\n\r\n> but only compare the signature for cookies where a signature is provided (and otherwise ignore).\r\n\r\nSo, it's better to ignore the value when the signature is not provided, because signed cookies and normal cookies should be distinguished as mentioned above.\r\n\r\nThis is my opinion.\r\n\r\n---\r\n\r\n@usualoma @metrue @ThatOneBro  and others:\r\n\r\nIf you have any opinions, please share them.",
          "Yep, that makes sense. Will make the changes later if there isn't any disagreement on this.\r\n\r\nI won't introduce a `context.signedCookies` property, since `context.cookies` is depcrecated for v4. \r\n\r\n`getSignedCookie` without a key will return all signed cookies and attempt to validate the signature. Might need to swap the arguments `key` <-> `secret` in that function so it makes more sense.",
          "@torte\r\n\r\nTotally, I agree. Could you make the changes when you have time? Thanks!",
          "@yusukebe Done from my end. Beside the things I mentioned in my last comment, I also changed `parse` and `parseSigned` a bit to accept an optional `name` parameter. Reason for that is that I don't think hono should try to compare signatures for other signed cookie if a cookie name was specified, mostly to preserve CPU time. The same change was made for `parse` to be consistent. ",
          ">  I also changed `parse` and `parseSigned` a bit to accept an optional name parameter.\r\n\r\nMake sense. Let's go with it!\r\n\r\nThanks!",
          "Nice and thank you for reviewing.\r\n\r\nDon't forget about the docs PR as well: https://github.com/honojs/website/pull/77",
          "@torte \r\n\r\nOkay. I'll merge it after releasing new version."
        ]
      },
      {
        "pr_number": 1295,
        "title": "fix(adapter/aws-lambda): use content-encoding to determine isBase64Encoded",
        "body": "https://github.com/honojs/hono/issues/1294",
        "html_url": "https://github.com/honojs/hono/pull/1295",
        "comments": [
          "Hi @if1live !\r\n\r\nThank you for raising the issue and submitting the PR. It's a great fix. I have left some comments; please check them!",
          "Thank you for the quick response.\r\nThe request received in the comments has been taken into PR.\r\nI'm glad to be able to contribute to hono.",
          "Hi @if1live \r\n\r\nLGTM! Merging!"
        ]
      },
      {
        "pr_number": 1289,
        "title": "feat(parseBody): allow passing generics to `parseBody()`",
        "body": "This allows to write like the following:\r\n\r\n```ts\r\napp.post('/', async (c) => {\r\n  const { foo } = await c.req.parseBody<{ foo: string }>()\r\n  // foo is string\r\n})\r\n```",
        "html_url": "https://github.com/honojs/hono/pull/1289",
        "comments": []
      },
      {
        "pr_number": 1290,
        "title": "feat(adapter): add Netlify adapter",
        "body": "This PR introduces Netfliy adapter. Hono runs on Netlify Edge Functions. Fix #1281\r\n\r\n[Netlify Edge Functions](https://www.netlify.com/products/#netlify-edge-functions) is a Deno-based platform. So, you can use the Hono's Deno module on `deno.land/x`.\r\n\r\nUsage:\r\n\r\n```ts\r\n// netlify/edge-functions/index.ts\r\nimport { Hono } from 'https://deno.land/x/hono/mod.ts'\r\nimport { prettyJSON } from 'https://deno.land/x/hono/middleware.ts'\r\n\r\nimport { handle } from 'https://deno.land/x/hono/adapter/netlify/mod.ts'\r\nimport type { Env } from 'https://deno.land/x/hono/adapter/netlify/mod.ts'\r\n\r\nconst app = new Hono<Env>()\r\n\r\napp.get('/country', prettyJSON(), (c) =>\r\n  c.json({\r\n    'You are in': c.env.context.geo.country?.name\r\n  })\r\n)\r\n\r\nexport default handle(app)\r\n```\r\n```toml\r\n# netlify.toml\r\n[[edge_functions]]\r\n  function = \"index\"\r\n  path = \"/*\"\r\n```\r\n\r\nYou can develop and deploy your application with [Netlify CLI](https://www.netlify.com/products/cli/).\r\n\r\nDev:\r\n\r\n```\r\nnetlify dev\r\n```\r\n\r\nDeploy:\r\n\r\n```\r\nnetlify deploy --prod\r\n```",
        "html_url": "https://github.com/honojs/hono/pull/1290",
        "comments": []
      },
      {
        "pr_number": 1296,
        "title": "docs(jsdoc): fix a `app.route()` JSDoc description",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1296",
        "comments": []
      },
      {
        "pr_number": 1297,
        "title": "chore(benchmark): update the handle-event benchmark",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1297",
        "comments": []
      },
      {
        "pr_number": 1298,
        "title": "refactor(app): add \"deprecate message\" for `app.handleEvent()`",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1298",
        "comments": []
      },
      {
        "pr_number": 1303,
        "title": "fix(validator): support async validator func",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1303",
        "comments": []
      }
    ],
    "v3.3.4": [
      {
        "pr_number": 1263,
        "title": "fix(lambda-edge) Adding Export Type CloudFrontResponse and CloudFrontConfig",
        "body": "- CloudFrontResponse: \r\n    - I simply forgot to export it. My apologies!\r\n- CloudFrontConfig: \r\n    - At first, I thought it wasn't necessary. However, I found a sample online that requires it, so I've included it: https://www.withcoherence.com/post/aws-spa-routing-the-bad-the-ugly-and-the-uglier.",
        "html_url": "https://github.com/honojs/hono/pull/1263",
        "comments": ["LGTM! Let's go!"]
      },
      {
        "pr_number": 1266,
        "title": "fix escapeToBuffer vulnerability",
        "body": "Escape single quote (0x27) to limit execution capabilities under certain conditions.\r\n\r\nExample, using JSX:\r\n```tsx\r\nconst value = \"alert('works')\"\r\nserver.get(\"/*\", c => c.html(<script>{value}</script>))\r\n```\r\n```tsx\r\nconst value = \"alert('bar!')\"\r\nserver.get(\"/*\", c => {\r\n  return c.html(<Html><div onmouseover={value}>foo</div></Html>)\r\n})\r\n```\r\n\r\nThe condition under which it works are limited and should be avoided, but in reality its never as straightforward as in this simple example. Adjusted behavior mimics that of react-dom escaping single quotes.\r\n\r\n\r\nHere without jsx. More dangerous, you can escape properties and inject script, because single quotes are valid attribute value delimiters and in this example are not enforced like they are in jsx:\r\n```ts\r\nconst value = \"' onmouseover='alert(`bar!`)' data-x='\"\r\nserver.get(\"/*\", c => {\r\n  return c.html(html`<html><div class='${value}'>foo</div></html>`)\r\n})\r\n```",
        "html_url": "https://github.com/honojs/hono/pull/1266",
        "comments": [
          "@Codinak \r\n\r\nThis is a good fix. One thing, could you run `yarn denoify` command? This is needed to generate file for Deno. And please git add&commit&push it. Thanks!",
          "Thanks! I'll merge it now!"
        ]
      },
      {
        "pr_number": 1271,
        "title": "fix(utils/filepath): don't allow dot segments",
        "body": "Security fix for ServeStatic of Bun. Bun's Request object doesn't remove dot segments `..` in URL path. So, we have to remove it in our framework.",
        "html_url": "https://github.com/honojs/hono/pull/1271",
        "comments": []
      },
      {
        "pr_number": 1269,
        "title": "added generic parameters to aws-lambda handler to fix #1265",
        "body": "fixes [#1265](https://github.com/honojs/hono/issues/1265)",
        "html_url": "https://github.com/honojs/hono/pull/1269",
        "comments": [
          "Hi @DianomiJH \r\n\r\nThanks. I'll merge it!",
          "Hello guys. I need your help on importing { handler } from 'hono/aws-lambda\". When I run my API gate way linked with this Hono function that has this important I get a handler error. Seem there is no package called hono/aws-lambda. And when i try to install it i get the same error that package doesn't exist. What could I be doing wrong. "
        ]
      },
      {
        "pr_number": 1272,
        "title": "fix(utils/filepath): allow `..` in filename",
        "body": "It can allow `foo/bar....buzz.jpg` and `foo../bar.jpg` as filepath.",
        "html_url": "https://github.com/honojs/hono/pull/1272",
        "comments": []
      },
      {
        "pr_number": 1273,
        "title": "feat(cloudflare-pages): add `serveStatic()`",
        "body": "Resolve #1264",
        "html_url": "https://github.com/honojs/hono/pull/1273",
        "comments": []
      }
    ],
    "v3.3.3": [
      {
        "pr_number": 1251,
        "title": "feat(adaptor): Lambda@Edge supports response callbacks",
        "body": "\r\nadding\r\n\r\n1. Cloudflont response can now be handled.\r\n\r\n```ts\r\ntype Bindings = {\r\n  callback: Callback\r\n  request: CloudFrontRequest\r\n  response: CloudFrontResponse\r\n}\r\n\r\napp.get('/callback/response', async (c, next) => {\r\n  await next()\r\n  c.env.callback(null, c.env.response)\r\n})\r\n\r\n```\r\n\r\n2. Headers can now be added in OriginResponse. (I have a feeling we can do this in a much cooler way)\r\n\r\n```ts\r\n  app.get('/header/add', async (c, next) => {\r\n    c.env.response.headers['Strict-Transport-Security'.toLowerCase()] = [{\r\n      key: 'Strict-Transport-Security',\r\n      value: 'max-age=63072000; includeSubdomains; preload'\r\n    }];\r\n    c.env.response.headers['X-Custom'.toLowerCase()] = [{\r\n      key: 'X-Custom',\r\n      value: 'Foo'\r\n    }];\r\n    await next()\r\n    c.env.callback(null, c.env.response)\r\n  })\r\n```\r\n\r\n3. refactoring. I cut out a lot of the internal header manipulation process.",
        "html_url": "https://github.com/honojs/hono/pull/1251",
        "comments": ["Hi @watany-dev !\r\n\r\nLGTM! Great work!"]
      },
      {
        "pr_number": 1259,
        "title": "fix(hono-base): enable `strict` with `getPath` option",
        "body": "Fix #1254",
        "html_url": "https://github.com/honojs/hono/pull/1259",
        "comments": []
      }
    ],
    "v3.3.2": [
      {
        "pr_number": 1242,
        "title": "refactor(etag): simplify cloning logic",
        "body": "If the upstream response doesn't include an `ETag` header, the ETag middleware needs to clone the response so it can read the body to compute an ETag. This commit simplifies the management of the original and cloned responses.",
        "html_url": "https://github.com/honojs/hono/pull/1242",
        "comments": [
          "Hi @jamesarosen !\r\n\r\nLooks good! One thing, could you do `yarn denoify` and git add&commit&push the generated file?",
          "> could you do yarn denoify\r\n\r\nDone \ud83d\udc4d ",
          "Hi @jamesarosen !\r\n\r\nThanks!"
        ]
      },
      {
        "pr_number": 1244,
        "title": "fix(pattern-router): For \"Named param with trailing wildcard\"",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1244",
        "comments": []
      },
      {
        "pr_number": 1246,
        "title": "fix(trie-router-router): For \"Named param with trailing wildcard\"",
        "body": "Related to #1243\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1246",
        "comments": [
          "Hey @usualoma \r\n\r\nCan you review this?",
          "@yusukebe Thanks. LGTM!"
        ]
      },
      {
        "pr_number": 1250,
        "title": "fix(hono/quick): use SmartRouter",
        "body": "As discussed in #1243, the LinearRouter can't handle all route patterns. Therefore, the `hono/quick` preset must use SmartRouter with LinearRouter and TrieRouter.\r\n\r\n```ts\r\nthis.router = new SmartRouter({\r\n  routers: [new LinearRouter(), new TrieRouter()],\r\n})\r\n```\r\n\r\nAs a result of this PR, the bundle size will increase slightly:\r\n\r\n```\r\n// `hono/quick` before this PR\r\nTotal Upload: 13.14 KiB / gzip: 4.89 KiB\r\n\r\n// `hono/quick` with this PR\r\nTotal Upload: 16.85 KiB / gzip: 6.36 KiB\r\n```\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1250",
        "comments": []
      }
    ],
    "v3.3.1": [
      {
        "pr_number": 1235,
        "title": "fix(lambda): avoid UTF-8-encoding binary data",
        "body": "So far, the AWS Lambda adapter has used `atob` to convert a Base64-encoded request body to a binary. However, `atob` returns a string, and passing that to the `Request` constructor (at least on Node.js, which Lambda runs on) results in the binary string being encoded as UTF-8. This means that if the request body contains bytes which are not in the ASCII range, they are replaced with UTF-8 multi-byte encodings, which leads to `c.req.blob()`, `c.req.formData()`, etc. returning the wrong binary data!\r\n\r\nThis commit fixes the issue by replacing `atob(body)` with `Buffer.from(body, 'base64')`, which does not have that problem. The `Buffer` can be directly passed as body for `new Request()` because it implements the `Uint8Array` interface. While this makes the AWS Lambda adapter depend directly on the \"node:buffer\" module, this should be fine because AWS Lambda functions always run on Node.",
        "html_url": "https://github.com/honojs/hono/pull/1235",
        "comments": [
          "Hi @denisw !\r\n\r\nThanks for the PR.I think you are right. We shouldn't be using `atob()`, and it's good to use `Buffer`.\r\n\r\nI'm going to merge it!",
          "Hey @watany-dev,\r\n\r\nI believe the Lambda@Edge adapter is also using `atob()`. Could you please check this and if it is the case, consider replacing it with `Buffer`?",
          "@yusukebe \n\nYes, that's right, I made it as a reference and it has the same process. I'll remove it for reference."
        ]
      },
      {
        "pr_number": 1232,
        "title": "fix(cache): clone the response",
        "body": "This PR is based on @brn 's #686, introduces a Cache Middleware that returns a cloned response. And make it does not cache responses with a status of >= 400, such as 404 not found.\r\n\r\nThis will fix #820 #1231",
        "html_url": "https://github.com/honojs/hono/pull/1232",
        "comments": []
      },
      {
        "pr_number": 1234,
        "title": "perf(deno/middlewares/serveStatic): serve static with stream",
        "body": "In deno, we can use streams to handle static services, which makes the response faster and the program memory usage less under large files\u3002",
        "html_url": "https://github.com/honojs/hono/pull/1234",
        "comments": [
          "Hi @markthree !\r\n\r\nThanks for creating this PR. This is a good change and I'd like to merge it, but there are two things I'd like you to do:\r\n\r\n### Fix the test\r\n\r\nTo pass the test, you need to add the following code below these lines:\r\n\r\nhttps://github.com/honojs/hono/blob/5090c3c817fcae0c4de57843c143a0a4b2337e98/runtime_tests/deno/middleware.test.tsx#L94-L96\r\n\r\nHere is the code to add:\r\n\r\n```ts\r\nawait res.body?.cancel()\r\n```\r\n\r\nThis will close the file opened in the test.\r\n\r\n### Write code in the correct place\r\n\r\nFiles under `deno_dist/*` are auto-generated. Actually, you should write your code in the following file:\r\n\r\n```\r\nsrc/adapter/deno/serve-static.ts\r\n```\r\n\r\nThen, run `yarn denoify` in the top directory to generate the files for Deno. Finally, git add, commit and push them.",
          "@yusukebe Hi\r\n\r\nAll steps have been completed \ud83d\ude4c",
          "@markthree \r\n\r\nThank you! However, it appears that unnecessary test files have been included in the `deno_dist` directory. We don't need files such as:\r\n\r\n```\r\ndeno_dist/adapter/aws-lambda/handler.test.ts\r\ndeno_dist/adapter/cloudflare-pages/handler.test.ts\r\n....\r\ndeno_dist/utils/url.test.ts\r\ndeno_dist/validator/validator.test.ts\r\n```\r\n\r\nCould you please run `yarn denoify` again? These files should be removed.",
          "@yusukebe Hold on, I'll rebuild.",
          "@yusukebe Sorry, the `yarn denoify` command is executing denoify and rm in parallel on my windows computer, so I was not able to accurately delete the test files in one go, I'll retry it in the docker container",
          "@yusukebe hi\r\nEverything is ok \ud83d\ude01",
          "Great!! I'll merge it now! Thanks!"
        ]
      },
      {
        "pr_number": 1238,
        "title": "fix: Safe modification of Buffer",
        "body": "This modification replaces the use of atob() and new Buffer() with Buffer.from(). As mentioned in [this article](https://nodejs.org/dist/latest-v6.x/docs/api/buffer.html#buffer_class_buffer), I believe that new Buffer() should not be used.",
        "html_url": "https://github.com/honojs/hono/pull/1238",
        "comments": [
          "Hi @watany-dev,\r\n\r\nAs you've pointed out, we need to use `Buffer.from()`. Your changes look good. Thanks!"
        ]
      }
    ],
    "v3.3.0": [
      {
        "pr_number": 1230,
        "title": "fix(lambda-edge): update schema and refactor ",
        "body": "1. Following this URL, I have aligned it with the correct schema. \r\nhttps://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/lambda-generating-http-responses-in-requests.html#lambda-generating-http-responses-required-fields\r\n\r\n2. Additionally, I have removed unnecessary array checks",
        "html_url": "https://github.com/honojs/hono/pull/1230",
        "comments": []
      },
      {
        "pr_number": 1229,
        "title": "feat(lambda-edge): pass the `context` and `callback` as env",
        "body": "This PR allows the Lambda@Edge Adapter to pass the `callback` method, `context`, and `request` object to handlers as `env` variables. This means it can continue request processing if basic authentication has been verified.\r\n\r\n\r\n```ts\r\nimport { Callback, CloudFrontRequest, handle } from 'hono/lambda-edge'\r\n\r\ntype Bindings = {\r\n  callback: Callback\r\n  request: CloudFrontRequest\r\n}\r\n\r\nconst app = new Hono<{ Bindings: Bindings }>()\r\n\r\napp.get(\r\n  '*',\r\n  basicAuth({\r\n    username: 'a',\r\n    password: 'b'\r\n  })\r\n)\r\n\r\napp.get('/index.html', async (c, next) => {\r\n  await next()\r\n  c.env.callback(null, c.env.request)\r\n})\r\n\r\nexport const handler = handle(app)\r\n```\r\n\r\nThere's a limitation issue where you cannot add headers such as a specific header value to an origin response. You can only pass through.\r\n\r\nFix #1225",
        "html_url": "https://github.com/honojs/hono/pull/1229",
        "comments": [
          "Hi @watany-dev !\r\n\r\nThis PR may fix your issue #1225. Could you try to run the snippets with it?",
          "@yusukebe Of course, yes.",
          "@watany-dev \r\n\r\nThanks, I'll merge this PR if it works well on your environment.",
          "@yusukebe \r\nThank you. Wow, it worked so smoothly in just one go!",
          "@watany-dev \r\n\r\nAwesome!"
        ]
      }
    ],
    "v3.3.0-rc.1": [
      {
        "pr_number": 1209,
        "title": "fix(tests): Lagon env test",
        "body": "This PR fixes the env test of Lagon by using the `-e` (or `--env`) flag of `lagon dev` to load the `.env.lagon` file.",
        "html_url": "https://github.com/honojs/hono/pull/1209",
        "comments": ["Thanks @QuiiBz !"]
      },
      {
        "pr_number": 1214,
        "title": "Fix replaceUrlParam to ignore regexp in path",
        "body": "This PR fixes #1213. \r\n\r\nFix Regex pattern in replaceUrlParam to replace regex path correctly.",
        "html_url": "https://github.com/honojs/hono/pull/1214",
        "comments": [
          "Hi @hyp3rflow !\r\n\r\nThanks for raising the issue and quick fix.\r\n\r\nThe implementation and the tests look great! However, there is one more step I'd like you to take. Please run `yarn denoify`, then add, commit, and push the generated file. This step is necessary for Deno.",
          "@yusukebe thanks for the quick review :) I've pushed generated denoify files.",
          "Great! I'll merge it now! Thanks!"
        ]
      },
      {
        "pr_number": 1215,
        "title": "Add Server-Timing API as middleware",
        "body": "This adds [Server-Timing](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Server-Timing) as a middleware.\r\n\r\nPlease see honojs/middleware#99 for context.\r\n\r\n\r\nI've replaced `process.hrtime()` with this, since `jest` failed to access performance:\r\n```ts\r\nconst getTime = () => {\r\n  try {\r\n    return performance.now()\r\n  } catch {}\r\n  return Date.now()\r\n}\r\n```\r\n\r\nThis technique may not fully work for cloudflare worker, because they [disallow the use of timers](https://developers.cloudflare.com/workers/learning/security-model/#step-1-disallow-timers-and-multi-threading).\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1215",
        "comments": [
          "Nice, I wasn't sure how CF Workers would handle that, thanks for checking!",
          "Thanks! I'll merge it and release `v3.3.0` includes this feature soon. Great work!"
        ]
      },
      {
        "pr_number": 1217,
        "title": "docs: add a svg logo image",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1217",
        "comments": []
      },
      {
        "pr_number": 1210,
        "title": "feat(adapter): AWS Lambda Adapter supports requests via Lambda@edge",
        "body": "I'm a little unsure, but I made it.\r\nhttps://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-event-structure.html#lambda-event-structure-response",
        "html_url": "https://github.com/honojs/hono/pull/1210",
        "comments": [
          "Please let me know if I should separate this commit from the API and make it as `adaptor/aws-lambda-edge` :)",
          "Hi @watany-dev !\r\n\r\nThanks for the PR. Supporting Lambda@Edge is indeed something we are interested in.\r\n\r\n> Please let me know if I should separate this commit from the API and make it as `adaptor/aws-lambda-edge` :)\r\n\r\nYes, it would be best to separate the adapter from `adapter/aws-lambda` and make this standalone. I believe naming it `adapter/lambda-edge` would be appropriate:\r\n\r\n<img width=\"690\" alt=\"Screenshot 2023-07-01 at 17 25 00\" src=\"https://github.com/honojs/hono/assets/10682/848a6dd2-7e71-4337-94e3-9df81417dad7\">\r\n\r\n<img width=\"726\" alt=\"Screenshot 2023-07-01 at 17 25 07\" src=\"https://github.com/honojs/hono/assets/10682/14182815-6cbf-4e46-b330-52ca058dd6e9\">\r\n",
          "Hi @watany-dev \r\n\r\nIs this still working progress?",
          "@yusukebe \r\nYes, I have fetched the latest materials and am in the process of working on it. Since I haven't been able to write the tests yet, I think it will take a few more days.",
          "@watany-dev \r\n\r\nOkay!",
          "@yusukebe \r\nThanks for waiting. We were able to create it successfully.",
          "@watany-dev \r\n\r\nFinally, you did it. Thank you! I'll merge now!!",
          "@watany-dev \r\n\r\nIf you feel up to it, could you write the document like [\"AWS Lambda\"](https://hono.dev/getting-started/aws-lambda) on website? Repository is [here](https://github.com/honojs/website). But, you don't have to do it.\r\n",
          "@yusukebe \r\nThank you for the wonderful offer. My writing might not be able to start until after July 14th. If that's okay, please allow me to contribute.",
          "@watany-dev \r\n\r\nThat's OK! Thanks."
        ]
      },
      {
        "pr_number": 1222,
        "title": "chore(ci): Update Action",
        "body": "While fixing this CI https://github.com/honojs/hono/pull/1210, I noticed that the latest Actions were not being used.\r\n\r\n- actions/checkout@v2 ->actions/checkout@v3\r\n    - https://github.com/actions/checkout\r\n    \r\n- actions/setup-node@v2 ->actions/setup-node@v3\r\n    - https://github.com/actions/setup-node",
        "html_url": "https://github.com/honojs/hono/pull/1222",
        "comments": ["Hi @watany-dev !\r\n\r\nThanks!"]
      },
      {
        "pr_number": 1224,
        "title": "fix(mount): include query params",
        "body": "Fix #1221",
        "html_url": "https://github.com/honojs/hono/pull/1224",
        "comments": []
      }
    ],
    "v3.2.7": [
      {
        "pr_number": 1196,
        "title": "fix(utils/cookie): allow 0 to maxAge",
        "body": "With #1194 fix, it doe's not allow `0` for the maxAge option. `0` can be set.",
        "html_url": "https://github.com/honojs/hono/pull/1196",
        "comments": []
      },
      {
        "pr_number": 1201,
        "title": "fix(tsconfig): remove `skipLibCheck`",
        "body": "Fix #1200",
        "html_url": "https://github.com/honojs/hono/pull/1201",
        "comments": []
      },
      {
        "pr_number": 1205,
        "title": "ci(bun): fix Bun version",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1205",
        "comments": []
      },
      {
        "pr_number": 1199,
        "title": "fix(etag): support multi-value If-None-Match",
        "body": "* chore(etag): reduce global state in tests\r\n* perf(etag): don't override ETags from upstream\r\n* perf(etag): 304s include only necessary headers\r\n* fix(etag): Support multi-value If-None-Match\r\n* perf(etag): prefer Header.prototype.get\r\n\r\nI recommend reviewing commit-by-commit as each commit has detailed rationale, including references to the relevant specs.",
        "html_url": "https://github.com/honojs/hono/pull/1199",
        "comments": [
          "Hi @jamesarosen !\r\n\r\nGreat work! It looks good.\r\n\r\nThere's one thing I'd like you to do. Could you run `yarn denoify` and add, commit, and push the generated file?\r\n\r\nWe can ignore the \"Bun\" CI failure because it's a Bun-related issue. After merging, I'll fix the version of Bun.\r\n",
          "> please run yarn denoify\r\n\r\nDone \ud83d\udc4d ",
          "Great! I'll merge it now!"
        ]
      },
      {
        "pr_number": 1204,
        "title": "perf(Request) optimize Request.prototype.header",
        "body": "`Request.prototype.header` has two overloads:\r\n\r\n 1. with a string name, it returns that header value if present\r\n 2. with no argument, it returns all the headers as an object\r\n\r\nPreviously, the implementation built the whole object for (2) even when returning a single header. This was wasteful. This commit changes it to return the header by name if specified and only iterate over all the headers when the caller asks for the whole object.",
        "html_url": "https://github.com/honojs/hono/pull/1204",
        "comments": [
          "Hi @jamesarosen !\r\n\r\nGood improvement, it looks good. I'd like to merge it, so please run `yarn denoify` as well as in #1199.",
          "> please run yarn denoify\r\n\r\nDone \ud83d\udc4d ",
          "Great! Thanks!"
        ]
      },
      {
        "pr_number": 1206,
        "title": "fix(types): allow not to set `skipLibCheck`",
        "body": "Currently, if a user doesn't set `skipLibCheck` to `true` in `tsconfig.json`, it throws the error as shown below:\r\n\r\n<img width=\"1108\" alt=\"SS\" src=\"https://github.com/honojs/hono/assets/10682/19bead2f-6b58-4232-baba-1ecbe744a2ce\">\r\n\r\nTo fix it, in this PR, I've done the following:\r\n\r\n1. Removed unnecessary properties that are not in `@cloudflare/workers-types` and `DOM` from `Request`.\r\n2. Created `FetchEventLike` to ensure compatibility between environments where there is `FetchEvent` and where there isn't.\r\n3. Added the properties in `Response` to `ClientResponse`.\r\n\r\nThis change allows it to pass `tsc` and simplifies `tsconfig.json`:\r\n\r\n<img width=\"428\" alt=\"SS\" src=\"https://github.com/honojs/hono/assets/10682/f8cc2900-9492-4aa0-9826-d4e65d76c2ff\">\r\n\r\n```ts\r\n{\r\n  \"compilerOptions\": {\r\n    \"target\": \"ESNext\",\r\n    \"module\": \"ESNext\",\r\n    \"moduleResolution\": \"node\",\r\n    \"strict\": true,\r\n    \"lib\": [\r\n      \"esnext\"\r\n    ],\r\n    \"types\": [\r\n      \"@cloudflare/workers-types\",\r\n    ],\r\n  },\r\n}\r\n```\r\n\r\nAnd if you don't want to use `@cloudflare/workers-types`:\r\n\r\n```ts\r\n{\r\n  \"compilerOptions\": {\r\n    \"target\": \"ESNext\",\r\n    \"module\": \"ESNext\",\r\n    \"moduleResolution\": \"node\",\r\n    \"strict\": true,\r\n    \"lib\": [\r\n      \"esnext\",\r\n      \"DOM\"\r\n    ],\r\n    \"types\": [\r\n      \"node\"\r\n    ],\r\n  },\r\n}\r\n```\r\n\r\nFixes #1200",
        "html_url": "https://github.com/honojs/hono/pull/1206",
        "comments": ["Thanks! Merging!"]
      },
      {
        "pr_number": 1190,
        "title": "add deleteCookie",
        "body": "fixes #1175\r\n\r\nThis implementation is based on `cookies.delete` in sveltekit (https://github.com/sveltejs/kit/blob/842e6abc7f32b228dc441c78d5636b1fbb1bae48/packages/kit/src/runtime/server/cookie.js#L117-L122)",
        "html_url": "https://github.com/honojs/hono/pull/1190",
        "comments": [
          "Hi @ryoppippi !\r\n\r\nThank you for the PR. I was just thinking about the same thing, that we should implement `deleteCookie()`. However, there are some wrong points in your implementation and test. I'll write or comment in detail about what needs to be done later. Though, if you have time, feel free to make the corrections yourself.",
          "@ryoppippi \r\n\r\nI've left some comments. Please address them after merging the current main branch into this branch, then the tests should pass.\r\n\r\nDon't forget to run the tests on your local machine before pushing.",
          "Hi @yusukebe \r\nThank you for reviewing my code and giving me some advice.\r\nI fixed my code, so please take a look at it!",
          "Hi @ryoppippi !\r\n\r\nThanks for the fixes. Just one thing - we need to test whether it works correctly when passing the third argument `opt`:\r\n\r\n```ts\r\ndeleteCookie(c, 'delicious_cookie', {\r\n  path: '/',\r\n  secure: true,\r\n  domain: 'example.com',\r\n})\r\n```\r\n\r\nCould you add a test for this?",
          "@yusukebe \r\nYes! I added that test!",
          "@ryoppippi \r\n\r\nPerfect!! I'll merge it. Thanks!"
        ]
      },
      {
        "pr_number": 1208,
        "title": "fix(`jsonT`): remove overloads from `JSONTRespond`",
        "body": "The code below should not throw an error, but currently, it throws a \"Type\" error:\r\n\r\n```ts\r\nconst route = app.get('/message', (c) => {\r\n  const ok = Math.random() > 0.5\r\n  if (ok) {\r\n    return c.jsonT({\r\n      success: true,\r\n      message: 'Error!',\r\n    })\r\n  }\r\n  return c.jsonT({\r\n    success: false,\r\n    message: 'Success!',\r\n  })\r\n})\r\n```\r\n\r\n<img width=\"521\" alt=\"SS\" src=\"https://github.com/honojs/hono/assets/10682/e1bdb544-d9d2-49bd-9220-1a9f587a9c05\">\r\n\r\nThis is because 'success' is \"`true`\", not \"`boolean`\".\r\n\r\n<img width=\"556\" alt=\"SS\" src=\"https://github.com/honojs/hono/assets/10682/35d3983f-7513-4bb5-b625-91ab9eb03d36\">\r\n\r\nPR #1162 fixed this bug or something similar, but to maintain backward compatibility, the old pattern remains via overloading.\r\n\r\nHowever, I think it's unnecessary to keep the old code and it's better to change the test code just for that. This is because, it's a bug if 'success' is not considered as \"`boolean`\", rather than maintaining the test code unchanged.\r\n\r\nWith this PR, the code works as expected.\r\n\r\n<img width=\"783\" alt=\"SS\" src=\"https://github.com/honojs/hono/assets/10682/9563858b-6031-451f-9ed6-27676d7c2a54\">",
        "html_url": "https://github.com/honojs/hono/pull/1208",
        "comments": []
      }
    ],
    "v3.2.6": [
      {
        "pr_number": 1189,
        "title": "fix: application/x-www-form-urlencoded decoding",
        "body": "The current logic for decoding application/x-www-form-urlencoded is overly restrictive and misses `Content-Type` headers with a character encoding set, i.e., `application/x-www-form-urlencoded; charset=UTF-8`.\r\n\r\nThis fix harmonizes the logic for handling `multipart/form-data` and `application/x-www-form-urlencoded` in the `parseBody` method of request objects.",
        "html_url": "https://github.com/honojs/hono/pull/1189",
        "comments": [
          "Hi @klittlepage!\r\n\r\nGreat fix! And it's great that you've already do`denoify`. I'll merge it right away. Thanks!"
        ]
      },
      {
        "pr_number": 1194,
        "title": "fix(cookie): `maxAge` should be positive",
        "body": "This is based on #1177",
        "html_url": "https://github.com/honojs/hono/pull/1194",
        "comments": [
          "Hi @Manouchehri @ryoppippi \r\n\r\nI've created this issue based on #1177. Could you review this? If it's OK, I'll merge it into the main branch with @Manouchehri as a co-author.",
          "Looks good to me. ",
          "Thanks! I'll merge it now!"
        ]
      }
    ],
    "v3.2.5": [
      {
        "pr_number": 1162,
        "title": "feat: Allow `context.jsonT` to take interface as an argument",
        "body": "close #1158\r\n\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1162",
        "comments": [
          "Hi @ayame113 !\r\n\r\nExcellent! The implementation looks good, including the changes for the overloads. It's also good that you ran `denoify`. I'll merge it now. Thanks!",
          "Thank you for your review!"
        ]
      },
      {
        "pr_number": 1167,
        "title": "chore(benchmark): add radix3",
        "body": "Related #1166",
        "html_url": "https://github.com/honojs/hono/pull/1167",
        "comments": []
      },
      {
        "pr_number": 1165,
        "title": "fix: replace to use better base64-encoder",
        "body": "discussed in and close #1160 \r\n\r\nAt first I thought I should add new test but this PR makes no change for a behavior from outside so I decided not to do so.",
        "html_url": "https://github.com/honojs/hono/pull/1165",
        "comments": ["Hi @Kanahiro !\r\n\r\nPerfect! I'll merge it, thanks!"]
      },
      {
        "pr_number": 1161,
        "title": "fix(HttpException): error message should not be the HTTP reason phrase",
        "body": "Closes #1147",
        "html_url": "https://github.com/honojs/hono/pull/1161",
        "comments": [
          "Hi @cah4a, thank you for creating this PR.\r\n\r\nI have two things I'd like you to do.\r\n\r\nFirst, to pass the tests, please remove the following line:\r\n\r\nhttps://github.com/honojs/hono/blob/4925edd3259f805e193a969bf9da03cfe8a82d37/src/hono.test.ts#L931\r\n\r\nNext, run `yarn denoify` to generate the files to be used on Deno. After that, add, commit, and push them.",
          "Sorry for getting lost.\r\n\r\nFixed PR.",
          "Thanks!"
        ]
      },
      {
        "pr_number": 1168,
        "title": "fix: avoid range-error",
        "body": "In Node.js, spread operator for large-sized array occurs Range Error:\r\n\r\nhttps://stackoverflow.com/questions/51249561/aws-lambda-rangeerror-maximum-call-stack-size-exceeded\r\nhttps://github.com/nodejs/node/issues/16870\r\n\r\nWhen I use somewhat large image this problem happens. To avoid this I re-wrote some codes. This doesn't make no change on behaiviors.",
        "html_url": "https://github.com/honojs/hono/pull/1168",
        "comments": [
          "Hi @Kanahiro !\r\n\r\nThank you for the PR! I'd like to merge it. So, one thing. Please do `denoify` and add&commit&push the genereted file.",
          "@yusukebe \r\nThank you for guidance, it's done!",
          "Okay, I'll merge now!"
        ]
      },
      {
        "pr_number": 1159,
        "title": "feat(jsx): React-like `style` conversion",
        "body": "This PR introduces a React-like `style` attribute conversion in the JSX middleware. This could be referred to as \"CSS in JS\", but since the definition isn't clear, I'll call it \"React-like\" for now.\r\n\r\nYou can now write `style` attributes using an object:\r\n\r\n```ts\r\nconst Tag = () => (\r\n  <h1\r\n    style={{\r\n      color: 'red',\r\n      fontSize: 'small',\r\n    }}\r\n  >\r\n    Hello\r\n  </h1>\r\n)\r\n```\r\n\r\nThis will be converted to:\r\n\r\n```html\r\n<h1 style=\"color:red;font-size:small\">Hello</h1>\r\n```\r\n\r\nI believe this feature will be useful for creating styled web pages.",
        "html_url": "https://github.com/honojs/hono/pull/1159",
        "comments": []
      }
    ],
    "v3.2.4": [
      {
        "pr_number": 1139,
        "title": "feat: define JSX.ElementChildrenAttribute interface",
        "body": "Fix #1138.",
        "html_url": "https://github.com/honojs/hono/pull/1139",
        "comments": [
          "Hi @yudai-nkt!\r\n\r\nGreat job! I'd like to merge it.\r\n\r\nJust one thing. Could you run the `denoify` command to generate files for Deno and push them?",
          "Oops, I've seen you ask contributors for denoify many times but I forgot \ud83d\ude05 ",
          "Yes, `denoify` can be troublesome, but for now, it's safer to do it manually.\r\n\r\nOkay, I'll proceed with the merge. Thanks!"
        ]
      },
      {
        "pr_number": 1146,
        "title": "fix(reg-exp-router): Register static paths first for duplicate checking.",
        "body": "Fixes #1140",
        "html_url": "https://github.com/honojs/hono/pull/1146",
        "comments": ["@usualoma \r\n\r\nLooks good! Thanks!"]
      },
      {
        "pr_number": 1149,
        "title": "ci: don't specify Bun version in CI",
        "body": "Fix #1131",
        "html_url": "https://github.com/honojs/hono/pull/1149",
        "comments": []
      },
      {
        "pr_number": 1150,
        "title": "perf: use `indexOf()` intead of `includes()`",
        "body": "`indexOf()` is faster than `includes()`.\r\n\r\nBenchmark script:\r\n\r\n```ts\r\nbench('noop', () => {})\r\n\r\nbench('includes', async () => {\r\n  'abc+defg'.includes('+')\r\n})\r\n\r\nbench('indexOf', async () => {\r\n  'abc+defg'.indexOf('+') !== -1\r\n})\r\n\r\nawait run()\r\n```\r\n\r\nResults:\r\n\r\n```\r\nyusuke $ bun run src/benchmark-includes.mts\r\ncpu: Apple M1 Pro\r\nruntime: bun 0.6.6 (arm64-darwin)\r\n\r\nbenchmark      time (avg)             (min \u2026 max)       p75       p99      p995\r\n------------------------------------------------- -----------------------------\r\nnoop       319.56 ps/iter      (300 ps \u2026 9.97 ns)  312.5 ps  370.9 ps  379.1 ps\r\nincludes     86.1 ns/iter  (82.47 ns \u2026 208.26 ns)   84.9 ns 122.15 ns 126.49 ns\r\nindexOf     81.83 ns/iter  (78.61 ns \u2026 126.58 ns)  81.25 ns 115.38 ns 116.34 ns\r\n```\r\n\r\n```\r\nyusuke $ tsx src/benchmark-includes.mts\r\ncpu: Apple M1 Pro\r\nruntime: node v18.16.0 (arm64-darwin)\r\n\r\nbenchmark      time (avg)             (min \u2026 max)       p75       p99      p995\r\n------------------------------------------------- -----------------------------\r\nnoop       318.36 ps/iter  (304.1 ps \u2026 284.83 ns)  312.5 ps  337.5 ps  341.7 ps\r\nincludes    60.78 ns/iter  (55.94 ns \u2026 122.27 ns)  61.53 ns 110.34 ns 119.61 ns\r\nindexOf     59.25 ns/iter     (53.15 ns \u2026 123 ns)  60.42 ns  66.92 ns 112.51 ns\r\n```",
        "html_url": "https://github.com/honojs/hono/pull/1150",
        "comments": []
      },
      {
        "pr_number": 1142,
        "title": "feat: handle HEAD method",
        "body": "This PR allows `app.get()` to handle the HEAD method, resolving issue #1130.\r\n\r\nCurrently, we have to define the process in `app.head()` if a HEAD method request comes in. However, the HEAD method is essentially \"the response of GET without the body\". Therefore, `HEAD /foo` will be handled by `app.get('/foo')` and return the response without the body. Users will not be able to define `app.head()`.\r\n\r\nWhile this is a feature change, on the other hand, it simply corrects the handling of HEAD. Therefore, I believe it's acceptable to release it as a patch.",
        "html_url": "https://github.com/honojs/hono/pull/1142",
        "comments": [
          "Often a HEAD request is made to decide whether making a GET request or not.\r\n\r\nAs MDN states [in this article](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/HEAD):\r\n\r\n> [...] if a URL might produce a large download, a HEAD request could read its [Content-Length](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Length) header to check the filesize without actually downloading the file.\r\n\r\nIf I understood the change introduced by this PR correctly, forcing Hono to make a GET request would kind of  destroy the purpose of making a HEAD request in the first place.",
          "This PR implies that if a HEAD request comes to `/foo`, `app.get('/foo')` will handle it. The creation of a `Request` object in this code is just for dispatching `app.get('/foo')`; it's not for real requests.\r\n\r\nHowever, it might be better for users to have the option to apply it or not. Therefore, I've created an alternative middleware pattern: #1143.",
          "> forcing Hono to make a GET request would kind of destroy the purpose of making a HEAD request\r\n\r\nIn what case would you NOT want the HEAD request to act as a GET request? I can't think of one.\r\n\r\nThe middleware is more flexible, but I believe it's extra configuration 99% of users shouldn't need to think about.\r\n\r\nI would not deprecate app.head. it can be used to override the HEAD request for a particular route by placing it above the app.get.",
          "I believe there are advantages to implementing this as middleware. We wouldn't have to write more code in the core, such as in `hono-base.ts`. I prefer not to complicate the core.\r\n\r\n> I would not deprecate app.head. it can be used to override the HEAD request for a particular route by placing it above the app.get.\r\n\r\nI somewhat agree, but it's difficult to implement. If we were to do so, the code would become very complex. By using the middleware pattern, we don't have to deprecate `app.head()`, and we can control the areas where the HEAD request handling applies.\r\n\r\nI'd like to know others's opinions. cc: @usualoma @metrue @ThatOneBro",
          "I think this makes sense as a concept. Using the middleware would be best probably, because sometimes users may be able to optimize requests in interesting ways by avoiding things like computing the body if the body length is known ahead of time (maybe this is handled in another way too, but this is what comes to mind.)",
          "While I think the middleware idea in #1143 is excellent, I think this PR is better because I believe in most use cases, the result of a HEAD request will be \"the result of a GET request minus the body.\"\r\n\r\nHowever, I understand that there is a desire to optimize the HEAD request without sending the GET request to the backend. How about adding #1152 to cover such cases? It could be written as follows.\r\n\r\n```ts\r\napp.get('/download', (c) => {\r\n  if (c.req.method === 'HEAD') {\r\n    return new Response(null, {\r\n      status: 200,\r\n      headers: {\r\n        'Content-Type': 'application/octet-stream',\r\n        'Content-Length': cachedLength,\r\n      },\r\n    })\r\n  }\r\n\r\n  return fetch(backend);\r\n})\r\n```",
          "@usualoma \r\n\r\nThank you for your comment and for creating the PR. It's difficult to choose which PR to merge.\r\n\r\nYour implementation #1152 is good, but I'm concerned about the increasing number of arguments in `dispatch()`, from three to four with PR #1152. I'd like to keep `hono-base.ts` simple. Therefore, the middleware pattern #1143 it's better, I think.",
          "> I believe there are advantages to implementing this as middleware. We wouldn't have to write more code in the core, such as in `hono-base.ts`. I prefer not to complicate the core.\r\n> \r\n> > I would not deprecate app.head. it can be used to override the HEAD request for a particular route by placing it above the app.get.\r\n> \r\n> I somewhat agree, but it's difficult to implement. If we were to do so, the code would become very complex. By using the middleware pattern, we don't have to deprecate `app.head()`, and we can control the areas where the HEAD request handling applies.\r\n> \r\n> I'd like to know others's opinions. cc: @usualoma @metrue @ThatOneBro\r\n\r\nI know that it might complicate the core code, but most web servers have this feature enabled by default. Most web devs don't know about this feature, and there are larger changes of web devs not enabling them via middleware.",
          "Okay. Anyway, #1152 should be merge into this PR. I'll do that.",
          "I am not against using middleware, but I still think this PR is better. I think it is standard web server behavior, and hono-base.ts is not that complicated.\r\n\r\nIncluding the #1156 change is also better for the following reasons.\r\n* `dispatch` is a private method, so the caller is in a controllable location, and I think the argument increase here is acceptable\r\n* That there is an overhead if the caller needs to create an object of options at the time of the call.\r\n* That there is a small overhead in `options?.eventOrExecutionCtx`.\r\n* Option object (`DispatchOptions` ) is hard to mangle.",
          "> `dispatch` is a private method, so the caller is in a controllable location, and I think the argument increase here is acceptable\r\n\r\nThat's right! So, it's private.I've realized your implementation is excellent and this PR is better than the middleware pattern.\r\n\r\nThanks!\r\n",
          "@alexgleason Thanks for raising the issue.\r\n@jackdbd @ThatOneBro @renhiyama Thanks for your comments.\r\n@usualoma Thanks for the great implementation.\r\n\r\nLet's go with it. I'll merge it!",
          "Thank you @yusukebe!"
        ]
      },
      {
        "pr_number": 1148,
        "title": "fix(tire-router/pattern-router): fixed the named capture issue",
        "body": "This PR will fix the issue of capturing named parameters in TrieRouter and PatternRouter.\r\n\r\nIf we have the following routes:\r\n\r\n```ts\r\napp.get('/webhooks/github', async (c, next) => {\r\n  await next()\r\n})\r\n\r\napp.get('/webhooks/:service', (c) => {\r\n  return c.text(`service: ${c.req.param('service')}`)\r\n})\r\n```\r\n\r\nThen, when accessing `GET /webhooks/github`, it currently can't handle the named parameter as `github`:\r\n\r\n```\r\nGET /webhooks/github => service: undefined\r\n```\r\n\r\nWith this fix, it can capture `github`:\r\n\r\n```\r\nGET /webhooks/github => service: github\r\n```\r\n\r\nResolves #1141",
        "html_url": "https://github.com/honojs/hono/pull/1148",
        "comments": [
          "Hi @usualoma !\r\n\r\nCould you review this? I think the spec is good, but I'd like to you review the implementation.",
          "Hi @yusukebe!\r\n\r\nAs for TrieRouter, I think that change is fine.\r\n\r\nAs for PatternRouter, I think it can be written a little shorter, as in #1154.",
          "@usualoma \r\n\r\n> As for PatternRouter, I think it can be written a little shorter, as in https://github.com/honojs/hono/pull/1154.\r\n\r\nAhhh, only that! Super thank you!"
        ]
      },
      {
        "pr_number": 1157,
        "title": "refactor: Tweaks variable names to reduce code.",
        "body": "It would reduce the number of conditional branches in `result?.handlers` and `result?.params` and shorten the code by a few lines.\r\n\r\nSince this is not a particularly big improvement, it is safe to decide not to merge.",
        "html_url": "https://github.com/honojs/hono/pull/1157",
        "comments": [
          "Hi @usualoma!\r\n\r\nIt's neat and it's great that `result?` has been removed! I'd like to merge this, but there's a conflict. Could you resolve it?",
          "@yusukebe Thanks! Resolved.  6c0b358",
          "Thanks! Merge now!"
        ]
      }
    ],
    "v3.2.3": [
      {
        "pr_number": 1135,
        "title": "fix: Add missing client types and TypedResponse type",
        "body": "Hi @yusukebe we have an issue with `hc` \u2013 we'd like to publish typed hono client from our Hono app as a library with zero dependencies, but since hono package.json has `\"types\": \"dist/types/index.d.ts\",` and this file doesn't contain client types we can't make it standalone \u2013 without `import from 'hono/dist...'` (see screenshots now/after change).\r\n\r\nWe have such entry point (client.ts) that we build separately from Hono app worker itself:\r\n```\r\nimport { hc } from 'hono/client';\r\n\r\nimport { AppType } from '.';\r\n\r\nexport type { InferRequestType, InferResponseType } from 'hono/client';\r\n\r\nexport const client = hc<AppType>;\r\n```\r\n\r\nThis is what we have now after build:\r\n<img width=\"908\" alt=\"Screen Shot 2566-05-27 at 20 32 41\" src=\"https://github.com/honojs/hono/assets/116948/8a90094d-2cf4-4721-98d2-12e8788af660\">\r\n\r\nThis is what we want to have with this changes:\r\n<img width=\"920\" alt=\"Screen Shot 2566-05-27 at 20 29 39\" src=\"https://github.com/honojs/hono/assets/116948/8d81466a-bcc8-430e-8a09-0300b2772052\">\r\n\r\nSo i exported few hono client types that we \r\nneed for that. Changed RequestOptions => ClientRequestOptions to avoid possible type name collisions. As it uses only internally now that should not be a breaking change for anybody.\r\nAs well I exported the TypedResponse bcs we don't want use jsonT but instead to return Response | TypedResponse from handler and we need this type to be exposed as well.\r\n\r\nI'm not sure if I need to change files in deno_dist as well. so please let me know if i need to roll them back",
        "html_url": "https://github.com/honojs/hono/pull/1135",
        "comments": [
          "Hi @dimik \r\n\r\nYou are right, it should be exported. I'll merge it. Thanks!"
        ]
      },
      {
        "pr_number": 1137,
        "title": "fix(deno): export client types",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1137",
        "comments": []
      }
    ],
    "v3.2.2": [
      {
        "pr_number": 1122,
        "title": "fix(basic-auth): handle passing invalid value to `atob()`",
        "body": "This PR will fix #1121.\r\n\r\nIf an invalid value like `G9ubzphY29vbHByb2plY3Q=` is passed to `atob()`, it should throw a `DOMException`. However, the existing Basic Auth middleware cannot handle this, resulting in a \"500 Internal Error\" when an invalid string is sent.\r\n\r\nThe `jest-environment-miniflare` testing environment does not throw an exception from `atob()`. Therefore, this PR includes a test for this in `runtime_tests/deno/middleware.test.tsx`. The implementation in Deno is correct according to the spec.\r\n\r\nRegarding the implementation, it uses `try`, even though we can check if the string is valid or invalid for Base64. This is because testing is difficult due to the above reasons, so I believe we need to keep the implementation as simple as possible.",
        "html_url": "https://github.com/honojs/hono/pull/1122",
        "comments": []
      },
      {
        "pr_number": 1123,
        "title": "fix typo",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1123",
        "comments": ["Thank you!"]
      },
      {
        "pr_number": 1124,
        "title": "chore: denoify",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1124",
        "comments": []
      },
      {
        "pr_number": 1128,
        "title": "fix: export `PatternRouter` and `LinearRouter`",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1128",
        "comments": []
      },
      {
        "pr_number": 1129,
        "title": "fix(middleware): don't use `headers.append()`, use `headers.set()`",
        "body": "Some middleware are using `response.headers.append()` when setting header values. With this method, it's possible to set duplicate values if the middleware is called twice.\r\n\r\n```ts\r\napp.use(\r\n  '/api/*',\r\n  cors({\r\n    origin: 'http://example.com',\r\n  })\r\n)\r\napp.use(\r\n  '/api/*',\r\n  cors({\r\n    origin: 'http://example.com',\r\n  })\r\n)\r\n```\r\n\r\nIn this PR, `response.headers.set()` is used to fix this issue.",
        "html_url": "https://github.com/honojs/hono/pull/1129",
        "comments": []
      }
    ],
    "v3.2.1": [
      {
        "pr_number": 1119,
        "title": "fix(app): `app.mount()` supports `/`",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1119",
        "comments": []
      }
    ],
    "v3.2.0": [
      {
        "pr_number": 1117,
        "title": "v3.2",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1117",
        "comments": ["Let's go!"]
      },
      {
        "pr_number": 1117,
        "title": "v3.2",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1117",
        "comments": ["Let's go!"]
      },
      {
        "pr_number": 1117,
        "title": "v3.2",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1117",
        "comments": ["Let's go!"]
      },
      {
        "pr_number": 1117,
        "title": "v3.2",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1117",
        "comments": ["Let's go!"]
      },
      {
        "pr_number": 1051,
        "title": "perf: shorten code",
        "body": "This PR enables the reduction of code size when bundling. I've done two things:\r\n\r\n* Shortened private variable names.\r\n* Created a private function for `decodeURIComponent`.\r\n\r\nThe result:\r\n\r\n<img width=\"771\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/235346328-ac5eaa95-f284-4bd9-8777-f67946f98cd5.png\">\r\n\r\nWhile heavy optimization may not be ideal, this scope is only for the internal code, so I believe this is a good improvement \ud83d\udc4d ",
        "html_url": "https://github.com/honojs/hono/pull/1051",
        "comments": []
      },
      {
        "pr_number": 1053,
        "title": "perf: use `===` instead of `startsWith` and `endsWith`",
        "body": "`===` is faster than `startsWith` or `endsWith` on Bun:\r\n\r\n<img width=\"891\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/235352353-71fd40e1-b71f-4863-a606-ca2921ac407b.png\">\r\n\r\nWe mainly measure performance based on Bun, so this change is effective.",
        "html_url": "https://github.com/honojs/hono/pull/1053",
        "comments": []
      },
      {
        "pr_number": 1117,
        "title": "v3.2",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1117",
        "comments": ["Let's go!"]
      },
      {
        "pr_number": 1117,
        "title": "v3.2",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1117",
        "comments": ["Let's go!"]
      },
      {
        "pr_number": 1117,
        "title": "v3.2",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1117",
        "comments": ["Let's go!"]
      },
      {
        "pr_number": 1064,
        "title": "feat: Allow getPath to be replaced.",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1064",
        "comments": [
          "If we are willing to require migration for `strict: false` users, it may be simpler to add the following changes.\r\n\r\n```diff\r\ndiff --git a/src/hono-base.ts b/src/hono-base.ts\r\nindex cac579e..bb28cec 100644\r\n--- a/src/hono-base.ts\r\n+++ b/src/hono-base.ts\r\n@@ -19,7 +19,7 @@ import type {\r\n   MergeSchemaPath,\r\n } from './types'\r\n import type { RemoveBlankRecord } from './utils/types'\r\n-import { getPath, getPathNoStrict, mergePath } from './utils/url'\r\n+import { getPath, mergePath } from './utils/url'\r\n \r\n type Methods = typeof METHODS[number] | typeof METHOD_NAME_ALL_LOWERCASE\r\n \r\n@@ -64,13 +64,13 @@ class Hono<E extends Env = Env, S = {}, BasePath extends string = ''> extends de\r\n     To use it, inherit the class and implement router in the constructor.\r\n   */\r\n   router!: Router<H>\r\n-  readonly getPath: (request: Request) => string\r\n+  readonly getPath: (request: Request) => string = getPath\r\n   private _basePath: string = ''\r\n   private path: string = '*'\r\n \r\n   routes: RouterRoute[] = []\r\n \r\n-  constructor(init: Partial<Pick<Hono, 'router' | 'getPath'> & { strict: boolean }> = {}) {\r\n+  constructor(init: Partial<Pick<Hono, 'router' | 'getPath'>> = {}) {\r\n     super()\r\n \r\n     // Implementation of app.get(...handlers[]) or app.get(path, ...handlers[])\r\n@@ -118,10 +118,7 @@ class Hono<E extends Env = Env, S = {}, BasePath extends string = ''> extends de\r\n       return this\r\n     }\r\n \r\n-    const strict = init.strict ?? true\r\n-    delete init.strict\r\n     Object.assign(this, init)\r\n-    this.getPath ||= strict ? getPath : getPathNoStrict\r\n   }\r\n \r\n   private clone(): Hono<E, S, BasePath> {\r\ndiff --git a/src/hono.test.ts b/src/hono.test.ts\r\nindex 4ec928b..2fb23c2 100644\r\n--- a/src/hono.test.ts\r\n+++ b/src/hono.test.ts\r\n@@ -9,6 +9,7 @@ import { RegExpRouter } from './router/reg-exp-router'\r\n import { TrieRouter } from './router/trie-router'\r\n import type { Handler, Next } from './types'\r\n import type { Expect, Equal } from './utils/types'\r\n+import { getPathNoStrict } from './utils/url'\r\n \r\n // https://stackoverflow.com/a/65666402\r\n function throwExpression(errorMessage: string): never {\r\n@@ -111,8 +112,8 @@ describe('strict parameter', () => {\r\n     })\r\n   })\r\n \r\n-  describe('strict is false', () => {\r\n-    const app = new Hono({ strict: false })\r\n+  describe('getPath: getPathNoStrict', () => {\r\n+    const app = new Hono({ getPath: getPathNoStrict })\r\n \r\n     app.get('/hello', (c) => {\r\n       return c.text('/hello')\r\ndiff --git a/src/hono.ts b/src/hono.ts\r\nindex f6c6017..c56387d 100644\r\n--- a/src/hono.ts\r\n+++ b/src/hono.ts\r\n@@ -9,7 +9,7 @@ export class Hono<E extends Env = Env, S = {}, BasePath extends string = ''> ext\r\n   S,\r\n   BasePath\r\n > {\r\n-  constructor(init: Partial<Pick<Hono, 'router' | 'getPath'> & { strict: boolean }> = {}) {\r\n+  constructor(init: Partial<Pick<Hono, 'router' | 'getPath'>> = {}) {\r\n     super(init)\r\n     this.router = new SmartRouter({\r\n       routers: [new RegExpRouter(), new TrieRouter()],\r\n\r\n```",
          "Thanks! I'll check it later.",
          "Very clever!",
          "Hi @usualoma !\r\n\r\nI've checked and measured the performance to see if there is any slowdown with this PR. But, I didn't find any deletions as you mentioned.\r\n\r\n> If we are willing to require migration for `strict: false` users, it may be simpler to add the following changes.\r\n\r\nThis is not a bad idea, as it will reduce the number of options for the Hono constructor. However, it would introduce a breaking change, and using the strict option is simpler for users than importing `getPathNoStrict`. I think we don't need to implement it.\r\n\r\nWe can go with it. I'll merge it now. Great work!\r\n\r\nBy the way, I'm planning to include this feature in the next major version, v4! I'll create an issue to share the idea of v4 later on.",
          "\ud83d\udc4d "
        ]
      },
      {
        "pr_number": 1117,
        "title": "v3.2",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1117",
        "comments": ["Let's go!"]
      },
      {
        "pr_number": 1073,
        "title": "feat(adapter): add `hono/vercel` / deprecate `hono/nextjs`",
        "body": "I realized that Hono works on Vercel, not only with Next.js. Therefore, I create `hono/vercel` and deprecate `hono/nextjs`. `hono/nextjs` will become obsolete in v4.",
        "html_url": "https://github.com/honojs/hono/pull/1073",
        "comments": []
      },
      {
        "pr_number": 1079,
        "title": "fix: enable specifying router from args",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1079",
        "comments": []
      },
      {
        "pr_number": 1080,
        "title": "fix(context): enable extending `ContextVarableMap`",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1080",
        "comments": []
      },
      {
        "pr_number": 1074,
        "title": "feat(preset): add `hono/quick`",
        "body": "This PR introduces `hono/quick` and a `preset` directory to manage `hono/tiny` and `hono/quick`.\r\n\r\n`hono/quick` uses only the **LinearRouter**. It has the fastest boot time, making it suitable for Fastly Compute@Edge.\r\n\r\nYou can use `hono/quick` just like `hono`:\r\n\r\n```ts\r\nimport { Hono } from 'hono/quick'\r\n```",
        "html_url": "https://github.com/honojs/hono/pull/1074",
        "comments": []
      },
      {
        "pr_number": 1117,
        "title": "v3.2",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1117",
        "comments": ["Let's go!"]
      },
      {
        "pr_number": 1082,
        "title": "fix: remove `type.ts`",
        "body": "Close #1078",
        "html_url": "https://github.com/honojs/hono/pull/1082",
        "comments": []
      },
      {
        "pr_number": 1117,
        "title": "v3.2",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1117",
        "comments": ["Let's go!"]
      },
      {
        "pr_number": 1086,
        "title": "fix(context): Fix typo in charset, again.",
        "body": "Here it is UTF8 again!\r\n\r\nhttps://github.com/honojs/hono/commit/0a19deaa5bb800a43909c0f25e53d68dbcf4e48a#diff-1c6b79733c620b41d7f8b63deb644f09e5fda79664918394b443c2a348731605L278-R279",
        "html_url": "https://github.com/honojs/hono/pull/1086",
        "comments": ["Ah, you are right. Thanks!"]
      },
      {
        "pr_number": 1117,
        "title": "v3.2",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1117",
        "comments": ["Let's go!"]
      },
      {
        "pr_number": 1117,
        "title": "v3.2",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1117",
        "comments": ["Let's go!"]
      },
      {
        "pr_number": 1117,
        "title": "v3.2",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1117",
        "comments": ["Let's go!"]
      },
      {
        "pr_number": 1117,
        "title": "v3.2",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1117",
        "comments": ["Let's go!"]
      },
      {
        "pr_number": 1098,
        "title": "fix(cloudflare-workers): serveStatic `rewriteRequestPath` option",
        "body": "This PR enables the `rewriteRequestPath` option for `serveStatic`.",
        "html_url": "https://github.com/honojs/hono/pull/1098",
        "comments": []
      },
      {
        "pr_number": 1090,
        "title": "feat(app): `onError()` supports async",
        "body": "As mentioned by @AliKaanT in #1088, `app.onError()` can be an asynchronous function.\r\n\r\n```ts\r\napp.onError(async (e, c) => {\r\n  //...\r\n})\r\n```\r\n\r\nThis PR enables support for an asynchronous function in `app.onError()`. It is based on #1088, I added tests and a small fix. If this is merged, I will need to add @AliKaanT as a co-author.",
        "html_url": "https://github.com/honojs/hono/pull/1090",
        "comments": [
          "Hi @usualoma !\r\n\r\nCould you review this PR? I think it can support an async function.",
          "@yusukebe \r\nYes, looks good to me!",
          "@usualoma Thanks!"
        ]
      },
      {
        "pr_number": 1083,
        "title": "fix(types): set `/` for generics `basePath`",
        "body": "TODO:\r\n\r\n- [x] `denoify`",
        "html_url": "https://github.com/honojs/hono/pull/1083",
        "comments": []
      },
      {
        "pr_number": 1117,
        "title": "v3.2",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1117",
        "comments": ["Let's go!"]
      },
      {
        "pr_number": 1103,
        "title": "feat(deno): export cookie middleware",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1103",
        "comments": []
      },
      {
        "pr_number": 1117,
        "title": "v3.2",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1117",
        "comments": ["Let's go!"]
      },
      {
        "pr_number": 1106,
        "title": "fix(app): export `fire()` correctly",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1106",
        "comments": []
      },
      {
        "pr_number": 1108,
        "title": "ci: use `setup-bun`",
        "body": "Use `setup-bun` for CI and specify the Bun version `v0.5.9`.",
        "html_url": "https://github.com/honojs/hono/pull/1108",
        "comments": []
      },
      {
        "pr_number": 1117,
        "title": "v3.2",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1117",
        "comments": ["Let's go!"]
      },
      {
        "pr_number": 1117,
        "title": "v3.2",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1117",
        "comments": ["Let's go!"]
      },
      {
        "pr_number": 1105,
        "title": "feat(app): `app.routerName()`",
        "body": "This PR introduces a `c.routerName()` function in `context.ts`. With this function, we can determine the name of the currently active router. This can be useful for debugging purposes.\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\n\r\n//...\r\n\r\napp.get('/', (c) => {\r\n  return c.text(c.routerName ?? 'N/A') // \"SmartRouter + RegExpRouter\"\r\n})\r\n```\r\n\r\n",
        "html_url": "https://github.com/honojs/hono/pull/1105",
        "comments": [
          "Hi @usualoma !\r\n\r\nLet me know how do you feel this feature if you can!",
          "It would be a good feature to get the name of the router!\r\n\r\nHowever, I thought the following\r\n* It is the app, not the context, that should know the router name\r\n* Passing the router's name to the context for each request is a wasteful process in most cases.\r\n\r\nI prefer to get it with `app.routerName` as follows.\r\n\r\nhttps://github.com/honojs/hono/pull/1110",
          "Ah, your idea is super simple. Let's go with #1110 !"
        ]
      },
      {
        "pr_number": 1104,
        "title": "feat: `app.mount()`",
        "body": "This PR introduces a new feature, `mount()`.\r\n\r\nCurrently, there are many frameworks that support Web Standard APIs. They provide applications that receive a Request and return a Response:\r\n\r\n```\r\nRequest => app => Response\r\n```\r\n\r\nI've found an interesting idea to utilize this unique point, which is `mount()`.\r\n\r\nBy using `mount()`, you can integrate applications using other frameworks, such as *itty-router*, with Hono.\r\n\r\n```ts\r\nimport { Router as IttyRouter } from 'itty-router'\r\nimport { Hono } from 'hono'\r\nimport { mount } from 'hono/mounter'\r\n\r\n// Create itty-router application\r\nconst ittyRouter = IttyRouter()\r\n\r\n// Handle `GET /itty-router/hello`\r\nittyRouter.get('/hello', () => new Response('Hello from itty-router'))\r\n\r\n// Hono application\r\nconst app = new Hono()\r\n\r\n// Mount!\r\napp.get(...mount('/itty-router', ittyRouter.handle))\r\n\r\nexport default app\r\n```\r\n\r\nAnd I also tried the Remix app:\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { env } from 'hono/adapter'\r\nimport { mount } from 'hono/mounter'\r\n\r\nimport { serveStatic } from 'hono/cloudflare-workers'\r\n\r\nimport { createRequestHandler } from '@remix-run/cloudflare'\r\nimport * as build from './build'\r\n\r\n// Remix application\r\n// @ts-ignore\r\nconst handleRemixRequest = createRequestHandler(build, process.env.NODE_ENV)\r\n\r\n// Hono application\r\nconst app = new Hono()\r\n\r\n// Static files for Remix\r\napp.get(\r\n  '/remix/build/*',\r\n  serveStatic({\r\n    root: './',\r\n  })\r\n)\r\n\r\n// Mount Remix app\r\napp.get(\r\n  ...mount('/remix', handleRemixRequest, (c) => {\r\n    return { env: env(c) }\r\n  })\r\n)\r\n```\r\n\r\nThis means we can mount any applications built with any framework like *itty-router*, *Remix*, *Qwik*, *SoildJS* into our Hono app. We don't need to create middleware to mount a specific framework, we can do it simply with `mount()`.\r\n\r\nWith this implementation, now, we have two concepts: **adapt** and **mount**. In my view, **adapt** means \"Hono adapts to any runtime\", while **mount** means \"Hono can mount any framework\". Along with middleware, we can create a large ecosystem like the following:\r\n\r\n![Image](https://github.com/honojs/hono/assets/10682/74272c1d-decc-488a-bed4-24ddab8c451e)\r\n\r\nWith these special features, Hono will not just be a web framework, it will be like a \"Glue\".\r\n\r\nIn any case, I believe the ability to mount applications built with other frameworks is a good idea.",
        "html_url": "https://github.com/honojs/hono/pull/1104",
        "comments": [
          "Hi @usualoma , @metrue , @yujong-lee , @ThatOneBro , @yudai-nkt and others.\r\n\r\nI think this is a good feature. What about you? Although you don't have to review the implementation, if you have any opinions about this feature, its APIs, or concepts, please let me know.",
          "Hi @aiji42,\r\n\r\nIf you have any opinions as well, please let us know.\r\n",
          "@yusukebe \r\nDoes this mean that while Hono receives requests with the base path, it behaves as if the request was made without the base path portion when viewed from the framework side? In the example you provided with Remix, if Hono receives a request at /remix/foo/bar, does it appear as if access was made at /foo/bar from the Remix side?\r\n\r\n",
          "@aiji42 \r\n\r\nThank you for the comment. Yes, you are correct. If the end-user accesses `/remix/foo/bar`, the Remix app will receive the Request as `/foo/bar`.",
          "@yusukebe \r\nThat's very cool\ud83c\udf89 I think it will be useful in the small library I'm currently developing.\r\n\r\nHowever, the actual scenes where it can be used might be limited. In real use cases, you need to be aware of the base path when generating links. Many frameworks support base paths, and I get the feeling that issues may arise due to the path the framework receives not matching the actual path on the browser.\r\n\r\nBut for me, it's an extremely beneficial feature!",
          "Similar to a feedback above, I also would like to see some motivating use cases. One example I came up with is framework migration (like from Remix to SvelteKit or whatever combinations), but I'm not sure if it is really the case.\r\n\r\nOf course, just because I don't come up with real-world use cases doesn't mean this PR isn't appealing. The idea of being runtime/framework agnostic seems interesting anyway! ",
          "Thank you for your comments!\r\n\r\nAdditionally, there's one advantage to this structure using `mount()`. We can apply **middleware** to any mounted application, regardless of whether it was built with *itty-router*, *Remix*, or *Qwik*:\r\n\r\n```ts\r\napp.use('/another-app/admin/*', basicAuth({ username, password }))\r\n```\r\n\r\nThis is incredibly useful, as we won't have to implement features like BasicAuth for each specific framework like *itty-router* or *Remix*.\r\n\r\n\r\n",
          "hey @yusukebe  sorry for the late response, I like your idea, it's amazing, basically it means Hono empowers the other frameworks possibility to run on multiple runtimes (with Hono runtime adapters) while enjoys Hono middlewares out of the box.",
          "Hi @yusukebe!\r\n This is a cool idea! I hope it can be merged.\r\n\r\n### API\r\n\r\nI think there is room for consideration regarding the API.\r\n\r\n<img width=\"625\" alt=\"feat__`mount__`_by_yusukebe_\u00b7_Pull_Request__1104_\u00b7_honojs_hono\" src=\"https://github.com/honojs/hono/assets/30598/a0ff6b9a-bc68-42d4-a05b-5fd5564e5904\">\r\n\r\nI understand that you don't want to put additional code in hono-base.ts, but I'm still inclined to write it this way.\r\n\r\n```ts\r\napp.mount('/remix', handleRemixRequest, (c) => {\r\n  return { env: env(c) }\r\n})\r\n```\r\n\r\nOr (and this is not a good look) it would be better to have the following so there is no confusion as to whether to use \"get\" or \"all\".\r\n\r\n```ts\r\nmount(app, '/remix', handleRemixRequest, (c) => {\r\n  return { env: env(c) }\r\n})\r\n```\r\n\r\nI also think the two ways I suggested would make the `getNewRequestURL` process in the current code a bit more robustly implemented. (Now, I don't think it would work reliably when basePath and regular expressions are involved.)",
          "@yusukebe \r\n\r\n> we can mount any applications built with any framework like itty-router, Remix, Qwik, SoildJS into our Hono app.\r\n\r\nI love this idea! Great work!",
          "@aiji42 @yudai-nkt @metrue @usualoma @yujong-lee \r\n\r\nThank you for your comments! Let's go with this idea.\r\n\r\n## About API\r\n\r\nAs @usualoma mentioned:\r\n\r\n> I think there is room for consideration regarding the API.\r\n\r\nIndeed.\r\n\r\n```ts\r\napp.mount('/remix', handleRemixRequest, (c) => {\r\n  return { env: env(c) }\r\n})\r\n```\r\n\r\nI believe this `app.mount()` looks neat! We have to examine the implementation to see how much the code will increase. Nonetheless, it might be worth including in `hono-base.ts`.",
          "Hi @usualoma!\r\n\r\nI've implemented this feature as `app.mount()`:\r\n\r\n```ts\r\nconst ittyRouter = IttyRouter()\r\n\r\nittyRouter.get('/hello', () => new Response('Hello from itty-router!'))\r\n\r\nconst app = new Hono()\r\n\r\napp.mount('/itty-router', ittyRouter.handle)\r\n```\r\n\r\nCode size for `v3.1.8`:\r\n\r\n<img width=\"353\" alt=\"Screenshot 2023-05-17 at 17 49 43\" src=\"https://github.com/honojs/hono/assets/10682/9ae7f2e7-d10c-4668-9fb0-6ee07d9a869d\">\r\n\r\nCode size for `mounter/mount()` (`hono-base.ts` does not include `app.mount()`):\r\n\r\n<img width=\"345\" alt=\"Screenshot 2023-05-17 at 18 22 49\" src=\"https://github.com/honojs/hono/assets/10682/42f7c07c-9eaa-4c67-a8c7-9df4ee98ac42\">\r\n\r\nCode size for `app.mount()`:\r\n\r\n<img width=\"352\" alt=\"Screenshot 2023-05-17 at 17 48 58\" src=\"https://github.com/honojs/hono/assets/10682/cab126bd-a876-4817-9b77-3c6f7cd3fd99\">\r\n\r\nBy adding `app.mount()`, the application size will increase, of course. However, the code is smaller than in `v3.1.8`, so I think this increase is acceptable. Also, this API, `app.mount()`, is neat and cool. I would like to proceed with this API!\r\n\r\nCould you review my implementation?",
          "@yusukebe Thanks. `app.mount()` is pretty great!\r\n\r\nI suggest that the URL passed to the sub-app be generated as follows.\r\n\r\n* If we don't consider regular expressions, etc. (I don't think this is usually necessary) : https://github.com/honojs/hono/pull/1112\r\n* If we consider regular expressions : https://github.com/honojs/hono/pull/1111",
          "Hi @usualoma \r\n\r\nThanks! I believe we don't need to support regular expressions for `app.mount()`. So, let's go ahead with #1112!"
        ]
      },
      {
        "pr_number": 1113,
        "title": "fix(preset): fix constructor args",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1113",
        "comments": []
      },
      {
        "pr_number": 1114,
        "title": "fix(router): `PatternRouter` supports a hostname, added tests",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1114",
        "comments": []
      },
      {
        "pr_number": 1115,
        "title": "docs(readme): update",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1115",
        "comments": []
      },
      {
        "pr_number": 1117,
        "title": "v3.2",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1117",
        "comments": ["Let's go!"]
      }
    ],
    "v3.2.0-rc.3": [],
    "v3.2.0-rc.2": [
      {
        "pr_number": 1117,
        "title": "v3.2",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1117",
        "comments": ["Let's go!"]
      },
      {
        "pr_number": 1117,
        "title": "v3.2",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1117",
        "comments": ["Let's go!"]
      },
      {
        "pr_number": 1117,
        "title": "v3.2",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1117",
        "comments": ["Let's go!"]
      },
      {
        "pr_number": 1117,
        "title": "v3.2",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1117",
        "comments": ["Let's go!"]
      },
      {
        "pr_number": 1051,
        "title": "perf: shorten code",
        "body": "This PR enables the reduction of code size when bundling. I've done two things:\r\n\r\n* Shortened private variable names.\r\n* Created a private function for `decodeURIComponent`.\r\n\r\nThe result:\r\n\r\n<img width=\"771\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/235346328-ac5eaa95-f284-4bd9-8777-f67946f98cd5.png\">\r\n\r\nWhile heavy optimization may not be ideal, this scope is only for the internal code, so I believe this is a good improvement \ud83d\udc4d ",
        "html_url": "https://github.com/honojs/hono/pull/1051",
        "comments": []
      },
      {
        "pr_number": 1053,
        "title": "perf: use `===` instead of `startsWith` and `endsWith`",
        "body": "`===` is faster than `startsWith` or `endsWith` on Bun:\r\n\r\n<img width=\"891\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/235352353-71fd40e1-b71f-4863-a606-ca2921ac407b.png\">\r\n\r\nWe mainly measure performance based on Bun, so this change is effective.",
        "html_url": "https://github.com/honojs/hono/pull/1053",
        "comments": []
      },
      {
        "pr_number": 1117,
        "title": "v3.2",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1117",
        "comments": ["Let's go!"]
      },
      {
        "pr_number": 1117,
        "title": "v3.2",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1117",
        "comments": ["Let's go!"]
      },
      {
        "pr_number": 1117,
        "title": "v3.2",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1117",
        "comments": ["Let's go!"]
      },
      {
        "pr_number": 1064,
        "title": "feat: Allow getPath to be replaced.",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1064",
        "comments": [
          "If we are willing to require migration for `strict: false` users, it may be simpler to add the following changes.\r\n\r\n```diff\r\ndiff --git a/src/hono-base.ts b/src/hono-base.ts\r\nindex cac579e..bb28cec 100644\r\n--- a/src/hono-base.ts\r\n+++ b/src/hono-base.ts\r\n@@ -19,7 +19,7 @@ import type {\r\n   MergeSchemaPath,\r\n } from './types'\r\n import type { RemoveBlankRecord } from './utils/types'\r\n-import { getPath, getPathNoStrict, mergePath } from './utils/url'\r\n+import { getPath, mergePath } from './utils/url'\r\n \r\n type Methods = typeof METHODS[number] | typeof METHOD_NAME_ALL_LOWERCASE\r\n \r\n@@ -64,13 +64,13 @@ class Hono<E extends Env = Env, S = {}, BasePath extends string = ''> extends de\r\n     To use it, inherit the class and implement router in the constructor.\r\n   */\r\n   router!: Router<H>\r\n-  readonly getPath: (request: Request) => string\r\n+  readonly getPath: (request: Request) => string = getPath\r\n   private _basePath: string = ''\r\n   private path: string = '*'\r\n \r\n   routes: RouterRoute[] = []\r\n \r\n-  constructor(init: Partial<Pick<Hono, 'router' | 'getPath'> & { strict: boolean }> = {}) {\r\n+  constructor(init: Partial<Pick<Hono, 'router' | 'getPath'>> = {}) {\r\n     super()\r\n \r\n     // Implementation of app.get(...handlers[]) or app.get(path, ...handlers[])\r\n@@ -118,10 +118,7 @@ class Hono<E extends Env = Env, S = {}, BasePath extends string = ''> extends de\r\n       return this\r\n     }\r\n \r\n-    const strict = init.strict ?? true\r\n-    delete init.strict\r\n     Object.assign(this, init)\r\n-    this.getPath ||= strict ? getPath : getPathNoStrict\r\n   }\r\n \r\n   private clone(): Hono<E, S, BasePath> {\r\ndiff --git a/src/hono.test.ts b/src/hono.test.ts\r\nindex 4ec928b..2fb23c2 100644\r\n--- a/src/hono.test.ts\r\n+++ b/src/hono.test.ts\r\n@@ -9,6 +9,7 @@ import { RegExpRouter } from './router/reg-exp-router'\r\n import { TrieRouter } from './router/trie-router'\r\n import type { Handler, Next } from './types'\r\n import type { Expect, Equal } from './utils/types'\r\n+import { getPathNoStrict } from './utils/url'\r\n \r\n // https://stackoverflow.com/a/65666402\r\n function throwExpression(errorMessage: string): never {\r\n@@ -111,8 +112,8 @@ describe('strict parameter', () => {\r\n     })\r\n   })\r\n \r\n-  describe('strict is false', () => {\r\n-    const app = new Hono({ strict: false })\r\n+  describe('getPath: getPathNoStrict', () => {\r\n+    const app = new Hono({ getPath: getPathNoStrict })\r\n \r\n     app.get('/hello', (c) => {\r\n       return c.text('/hello')\r\ndiff --git a/src/hono.ts b/src/hono.ts\r\nindex f6c6017..c56387d 100644\r\n--- a/src/hono.ts\r\n+++ b/src/hono.ts\r\n@@ -9,7 +9,7 @@ export class Hono<E extends Env = Env, S = {}, BasePath extends string = ''> ext\r\n   S,\r\n   BasePath\r\n > {\r\n-  constructor(init: Partial<Pick<Hono, 'router' | 'getPath'> & { strict: boolean }> = {}) {\r\n+  constructor(init: Partial<Pick<Hono, 'router' | 'getPath'>> = {}) {\r\n     super(init)\r\n     this.router = new SmartRouter({\r\n       routers: [new RegExpRouter(), new TrieRouter()],\r\n\r\n```",
          "Thanks! I'll check it later.",
          "Very clever!",
          "Hi @usualoma !\r\n\r\nI've checked and measured the performance to see if there is any slowdown with this PR. But, I didn't find any deletions as you mentioned.\r\n\r\n> If we are willing to require migration for `strict: false` users, it may be simpler to add the following changes.\r\n\r\nThis is not a bad idea, as it will reduce the number of options for the Hono constructor. However, it would introduce a breaking change, and using the strict option is simpler for users than importing `getPathNoStrict`. I think we don't need to implement it.\r\n\r\nWe can go with it. I'll merge it now. Great work!\r\n\r\nBy the way, I'm planning to include this feature in the next major version, v4! I'll create an issue to share the idea of v4 later on.",
          "\ud83d\udc4d "
        ]
      },
      {
        "pr_number": 1117,
        "title": "v3.2",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1117",
        "comments": ["Let's go!"]
      },
      {
        "pr_number": 1073,
        "title": "feat(adapter): add `hono/vercel` / deprecate `hono/nextjs`",
        "body": "I realized that Hono works on Vercel, not only with Next.js. Therefore, I create `hono/vercel` and deprecate `hono/nextjs`. `hono/nextjs` will become obsolete in v4.",
        "html_url": "https://github.com/honojs/hono/pull/1073",
        "comments": []
      },
      {
        "pr_number": 1079,
        "title": "fix: enable specifying router from args",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1079",
        "comments": []
      },
      {
        "pr_number": 1080,
        "title": "fix(context): enable extending `ContextVarableMap`",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1080",
        "comments": []
      },
      {
        "pr_number": 1074,
        "title": "feat(preset): add `hono/quick`",
        "body": "This PR introduces `hono/quick` and a `preset` directory to manage `hono/tiny` and `hono/quick`.\r\n\r\n`hono/quick` uses only the **LinearRouter**. It has the fastest boot time, making it suitable for Fastly Compute@Edge.\r\n\r\nYou can use `hono/quick` just like `hono`:\r\n\r\n```ts\r\nimport { Hono } from 'hono/quick'\r\n```",
        "html_url": "https://github.com/honojs/hono/pull/1074",
        "comments": []
      },
      {
        "pr_number": 1117,
        "title": "v3.2",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1117",
        "comments": ["Let's go!"]
      },
      {
        "pr_number": 1082,
        "title": "fix: remove `type.ts`",
        "body": "Close #1078",
        "html_url": "https://github.com/honojs/hono/pull/1082",
        "comments": []
      },
      {
        "pr_number": 1117,
        "title": "v3.2",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1117",
        "comments": ["Let's go!"]
      },
      {
        "pr_number": 1085,
        "title": "fix(getQueryParam): Fixed a bug in getQueryParam when a partial matching key was found.",
        "body": "Fixes #1084",
        "html_url": "https://github.com/honojs/hono/pull/1085",
        "comments": ["Thank you for the quick fix! Looks good. I'll merge it."]
      },
      {
        "pr_number": 1086,
        "title": "fix(context): Fix typo in charset, again.",
        "body": "Here it is UTF8 again!\r\n\r\nhttps://github.com/honojs/hono/commit/0a19deaa5bb800a43909c0f25e53d68dbcf4e48a#diff-1c6b79733c620b41d7f8b63deb644f09e5fda79664918394b443c2a348731605L278-R279",
        "html_url": "https://github.com/honojs/hono/pull/1086",
        "comments": ["Ah, you are right. Thanks!"]
      },
      {
        "pr_number": 1076,
        "title": "feat(adapter): AWS Lambda Adapter supports requests via Lambda Function URLs.",
        "body": "Lambda Function URLs are endpoints that allow for simple requests to be passed to Lambda without an API Gateway. \r\n\r\nhttps://aws.amazon.com/jp/blogs/aws/announcing-aws-lambda-function-urls-built-in-https-endpoints-for-single-function-microservices/\r\n\r\nMost of the event is compatible with API Gateway, but the location of the method is different, which is why, as mentioned in https://github.com/honojs/hono/issues/1075, we specified the behavior of GET during a POST request. This patch attempts to fix that issue.",
        "html_url": "https://github.com/honojs/hono/pull/1076",
        "comments": [
          "Hi @watany-dev !\r\n\r\nThank you for the PR. I'd like to try running the application with this PR in my environment. So, please wait until I've done it.\r\n\r\n",
          "I have reviewed the workflow and understood the need to perform runtime tests. I have made the necessary modifications.",
          "Sorry, I fixed the Format.",
          "Thanks! I'll merge it now!"
        ]
      },
      {
        "pr_number": 1117,
        "title": "v3.2",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1117",
        "comments": ["Let's go!"]
      },
      {
        "pr_number": 1095,
        "title": "chore:denoify",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1095",
        "comments": []
      },
      {
        "pr_number": 1091,
        "title": "fix(lambda): don't encode text",
        "body": "This PR concerns the AWS Lambda adapter.\r\n\r\nFrom PR #1009, it encodes any content as Base64.\r\n\r\nThis works fine on Function URLs, but it does not perform well on Lambda with API Gateway. We don't need to encode text-based content, only binary. In this PR, it determines whether the content is text or not and decides whether encoding is necessary.",
        "html_url": "https://github.com/honojs/hono/pull/1091",
        "comments": [
          "Hi @schonert !\r\n\r\nWe had to use a regular expression to determine whether the content is text, and if it's binary, it should be encoded in base 64. This fix should be fine. If you notice any problems, please let me know! Thanks!"
        ]
      },
      {
        "pr_number": 1117,
        "title": "v3.2",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1117",
        "comments": ["Let's go!"]
      },
      {
        "pr_number": 1117,
        "title": "v3.2",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1117",
        "comments": ["Let's go!"]
      },
      {
        "pr_number": 1117,
        "title": "v3.2",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1117",
        "comments": ["Let's go!"]
      }
    ],
    "v3.2.0-rc.1": [
      {
        "pr_number": 1058,
        "title": "fix(deno): export `HTTPException` from `mod.ts`",
        "body": "Fix #1049 ",
        "html_url": "https://github.com/honojs/hono/pull/1058",
        "comments": []
      },
      {
        "pr_number": 1060,
        "title": "chore: update eslint",
        "body": "Update eslint and remove `.eslintignore` which is not used.",
        "html_url": "https://github.com/honojs/hono/pull/1060",
        "comments": []
      },
      {
        "pr_number": 1062,
        "title": "chore: move runtime tests into `runtime_tests`",
        "body": "Moved runtime tests for Fastly, Bun, Deno, etc., to the `runtime_tests` directory.",
        "html_url": "https://github.com/honojs/hono/pull/1062",
        "comments": []
      },
      {
        "pr_number": 1009,
        "title": "feat(adapter): Added aws-handler support for APIGatewayProxyEventV2",
        "body": "Super exicted about the slim adapter! Got the chance to start using it yesterday and ran into some missing mappings when calling lambda directly through the function URL.\r\n\r\n- Renamed `APIGatewayEvent` to `APIGatewayProxyEvent` to follow the convention from `@types/aws-lambda`\r\n- Added `APIGatewayEventV2`. The type used by function urls\r\n- Added support for sending files through streams. Ran into issues while using with `serveStatic`. Files will be converted to `base64`.\r\n- Broke the handler into smaller functions. It became quite bloated when accounting for base64 and event mapping\r\n\r\nSubmitted directly through github.com - will catch up on any red flags \ud83d\udc4d ",
        "html_url": "https://github.com/honojs/hono/pull/1009",
        "comments": [
          "All tests are green \ud83d\udc4d",
          "Hi @schonert !\r\n\r\nThank you for creating PR! I am glad you wish Lambda adapter for Hono.\r\n\r\nI commented on several points of concern. And I also get the following error in the test. How about making `queryStringParameters` optional and checking it in the adapter?\r\n\r\n<img width=\"675\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/227490713-5b77b1c9-598b-4bd0-b0fd-f09523a8a77c.png\">\r\n",
          "@schonert \r\n\r\nSorry! The `package.json` was wrong, and I've fixed it. So, please merge `main` into your branch.",
          "@yusukebe \r\n\r\nSorry about the hold-up. Merged main into PR branch \ud83d\udc4d ",
          "I see the tests did not pass - strange since I recall running before submitting. I'll take a look",
          "@yusukebe did you get the chance to check out my comments?",
          "Hi @schonert !\r\n\r\nWhich are your comments? I've left the comments on your code, so please check it again!",
          "@yusukebe i simply replied to your comments\r\n\r\nhttps://github.com/honojs/hono/pull/1009#discussion_r1160327315\r\nhttps://github.com/honojs/hono/pull/1009#discussion_r1160328051",
          "@schonert \r\n\r\nDid you leave comments? I can't see any of your comments.",
          "Hmm strange. I've tagged you and linked? Attached a screenshot below \ud83d\udc47 \r\n<img width=\"847\" alt=\"image\" src=\"https://user-images.githubusercontent.com/2185697/234789122-94ee09fa-124d-459f-9dd9-58b251bb90d7.png\">\r\n",
          "Hi @schonert !\r\n\r\nYeah, it's strange, but now I understand your comments well, with the help of your screenshots. Thanks a lot!\r\n\r\nAccording to the Web API specs, the `Response` body is always a `ReadableStream`, even if it's plain text. So I think we don't have to check if it's a `ReadableStream` or not. How about writing it like this?:\r\n\r\n```ts\r\nconst body = await fromReadableToString(res) // always use `fromReadableToString`\r\n\r\nconst result: APIGatewayProxyResult = {\r\n  //...\r\n  isBase64Encoded: true, // it must be base64\r\n}\r\n```\r\n\r\nWe'll have to rewrite the tests, but I think this approach might be the best.",
          "So we just simply always base64? Would be a simple and straightforward solution. Not aware of any downsides \ud83d\udc4d\ud83c\udffb",
          "@schonert \r\n\r\n> So we just simply always base64?\r\n\r\nAbsolutely! So, could you please rewrite the code and tests? We can run the CI again once you've completed the changes.\r\n",
          "@yusukebe finally got around to implementing the changes above. \r\nBeen using Github codespace - which was an awful slow experience. Should have just cloned the project down from day one \ud83d\ude05",
          "Hi @schonert !\r\n\r\nGreat! It's time to merge! Thanks!"
        ]
      },
      {
        "pr_number": 1065,
        "title": "feat(serve-static): `rewriteRequestPath` option for Workers/Deno/Bun",
        "body": "This PR introduces `rewriteRequestPath` option for a serve-static for Cloudflare Workers, Deno, and Bun.\r\n\r\n```ts\r\napp.use(\r\n  '/dot-static/*',\r\n   serveStatic({\r\n    root: './assets',\r\n    rewriteRequestPath: (path) => path.replace(/^\\/dot-static/, '/.static'),\r\n  })\r\n)\r\n```\r\n\r\nFix #1033",
        "html_url": "https://github.com/honojs/hono/pull/1065",
        "comments": []
      },
      {
        "pr_number": 1070,
        "title": "fix(jsx): fix a `jsx-runtime` bug",
        "body": "Fix #1068 ",
        "html_url": "https://github.com/honojs/hono/pull/1070",
        "comments": []
      },
      {
        "pr_number": 1071,
        "title": "feat(context): clear the header with `c.header(key, undefined)`",
        "body": "This PR allows the Context to clear a header using `c.header(key, undefined)` because previously, we didn't have a way to clear headers.",
        "html_url": "https://github.com/honojs/hono/pull/1071",
        "comments": []
      },
      {
        "pr_number": 1066,
        "title": "feat: Cookie Middleware and deprecate `c.req.cookie()` / `c.cookie()`",
        "body": "This PR introduces the Cookie Middleware, which includes `getCookie()` and `setCookie()` methods. As a result, `c.req.cookie()` and `c.cookie()` will be deprecated.\r\n\r\n```ts\r\nimport { getCookie, setCookie } from 'hono/cookie'\r\n\r\n// ...\r\n\r\napp.get('/cookie', (c) => {\r\n  const yummyCookie = getCookie(c, 'yummy_cookie')\r\n  // ...\r\n  setCookie(c, 'delicious_cookie', 'macha')\r\n  //\r\n}\r\n```\r\n\r\n`c.req.cookie()` and `c.header()` will be obsolete in v4.\r\n\r\nRelated to #965 ",
        "html_url": "https://github.com/honojs/hono/pull/1066",
        "comments": []
      }
    ],
    "v3.1.8": [
      {
        "pr_number": 1056,
        "title": "empty string is a valid header value",
        "body": "As mentioned in [this PR](https://github.com/honojs/hono/pull/884#issuecomment-1426925215), empty strings are valid header values.",
        "html_url": "https://github.com/honojs/hono/pull/1056",
        "comments": ["Hi @AlexErrant !\r\n\r\nGood fix and test! Thanks!"]
      },
      {
        "pr_number": 1057,
        "title": "fix: check `global.fastly` instead of `require('fastly:env')`",
        "body": "This PR fixes the method for detecting whether the code is running on Fastly Compute@Edge or not.\r\n\r\nPreviously, it used `require('fastly:env')` and checked whether it could access the variables. With this PR, it checks for `global.fastly` instead. Additionally, in `adapter.ts`, the `env` function used dynamic require, but this caused errors in environments like `webpack`, so it has been removed. We can use `ConfigStore` to manage user-defined data on Fastly.\r\n\r\nResolve #1052",
        "html_url": "https://github.com/honojs/hono/pull/1057",
        "comments": []
      }
    ],
    "v3.1.7": [
      {
        "pr_number": 1046,
        "title": "fix(context): Fix typo in charset.",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1046",
        "comments": ["Thanks!"]
      }
    ],
    "v3.1.6": [
      {
        "pr_number": 1026,
        "title": "fix(pages): fixed type mismatch in `EventContext`",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1026",
        "comments": []
      }
    ],
    "v3.1.5": [
      {
        "pr_number": 1023,
        "title": "fix(utils/url): Fix behavior when parameters with no value specified are mixed.",
        "body": "This PR fixes #1022\r\n\r\nThere is almost no performance degradation (In particular, there is no degradation for `_getQueryParam(url, key)`.)",
        "html_url": "https://github.com/honojs/hono/pull/1023",
        "comments": [
          "Hi @usualoma !\r\n\r\nLooks good to me!\r\n\r\nSuper thanks for the quick fix."
        ]
      },
      {
        "pr_number": 1021,
        "title": "feat(adapter): infer env typings from context",
        "body": "closes  #1017 ",
        "html_url": "https://github.com/honojs/hono/pull/1021",
        "comments": [
          "Hi @marbemac \r\n\r\nThanks for your contribution!\r\n\r\nI'll merge it."
        ]
      },
      {
        "pr_number": 1019,
        "title": "feat(types): expose `Input` type",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1019",
        "comments": [
          "Hi @equt !\r\n\r\nYou are right. `Input` should be exposed. Thanks!"
        ]
      },
      {
        "pr_number": 1024,
        "title": "feat(deno): denoify",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/1024",
        "comments": []
      },
      {
        "pr_number": 1025,
        "title": "feat(jwt): support for getting payload from `c.get('jwtPayload')`",
        "body": "Copied from #1013.\r\n\r\n---\r\n\r\nThis PR will add support for getting the decoded payload from `c.get('jwtPaload')` for JWT Auth Middleware.\r\n\r\n```ts\r\napp.post(\r\n  '/auth/abc',\r\n  jwt({\r\n    secret: 'a-secret',\r\n  }),\r\n  (c) => {\r\n    const payload = c.get('jwtPayload')\r\n    //...\r\n  }\r\n)\r\n```\r\n\r\nThis will resolve #810 #1005 \r\n\r\n### Does it include breaking changes?\r\n\r\nThe `verify()` API in `utils/jwt/jwt.ts` has been changed. It will return `any` instead of `boolean`. This seems to be  a breaking change, but this function is mainly \"utility\" used in the Hono internal. We should release the fix, including breaking changes as major version up, but this change will not affect end users. EDIT ~~I'd like to release it as a minor version up \"3.2.0\".~~\r\n\r\n\r\nEDIT:\r\n\r\nWe can release this with a patch release.\r\n\r\n* Utilities such as `utils/url.ts` are broken and changed without notice. utilities are intended to be used internally and may be changed in patch releases. Same for `utils/jwt/jwt.ts.\r\n* It is not a major feature addition, and we don't have to include it in the Minor or Major release.",
        "html_url": "https://github.com/honojs/hono/pull/1025",
        "comments": []
      }
    ],
    "v3.1.4": [
      {
        "pr_number": 1015,
        "title": "refactor(utils/url): Decode parameters more accurately without performance degradation.",
        "body": "More accurate decoding in query string parsing. (e.g., encoded keys)\r\n\r\n### performance\r\n\r\nThe following are the results of a comparison between hono's v3.1.3 and fast-querystring (which is used in elysia) with a slight modification to the benchmarks/query-param added in this PR.\r\n\r\nIn some places, hono's v3.1.3 is faster because decoding is skipped, and compared to that, this PR has a performance decrease. Nevertheless, the speed reduction is slight, and the amount of code has not increased.\r\nThis should be changed as it is unsuitable for a framework not to get parameters right.\r\n\r\n#### bun\r\n\r\n```\r\n$ npm run bench:bun\r\n\r\n> bench:bun\r\n> bun run ./src/bench.mts\r\n\r\ncpu: Apple M2 Pro\r\nruntime: bun 0.5.8 (arm64-darwin)\r\n\r\nbenchmark            time (avg)             (min \u2026 max)       p75       p99      p995\r\n------------------------------------------------------- -----------------------------\r\n\u2022 {\"url\":\"http://example.com/?page=1\",\"key\":\"page\"}\r\n------------------------------------------------------- -----------------------------\r\nhono 3.1.3        65.82 ns/iter  (61.54 ns \u2026 198.54 ns)  65.23 ns 117.97 ns 133.18 ns\r\nhono with PR      66.68 ns/iter  (60.56 ns \u2026 174.03 ns)  66.41 ns 123.95 ns  138.5 ns\r\nfastQuerystring   90.34 ns/iter  (84.92 ns \u2026 269.87 ns)  88.87 ns 143.85 ns 167.52 ns\r\n\r\nsummary for {\"url\":\"http://example.com/?page=1\",\"key\":\"page\"}\r\n  hono 3.1.3\r\n   1.01x faster than hono with PR\r\n   1.37x faster than fastQuerystring\r\n\r\n\u2022 {\"url\":\"http://example.com/?url=http://example.com&page=1\",\"key\":\"page\"}\r\n------------------------------------------------------- -----------------------------\r\nhono 3.1.3       158.91 ns/iter  (150.2 ns \u2026 333.56 ns) 155.87 ns 217.88 ns 324.67 ns\r\nhono with PR     121.36 ns/iter (111.56 ns \u2026 219.51 ns) 119.86 ns 184.04 ns    193 ns\r\nfastQuerystring  161.95 ns/iter  (152.05 ns \u2026 230.4 ns) 163.67 ns 225.31 ns 227.72 ns\r\n\r\nsummary for {\"url\":\"http://example.com/?url=http://example.com&page=1\",\"key\":\"page\"}\r\n  hono with PR\r\n   1.31x faster than hono 3.1.3\r\n   1.33x faster than fastQuerystring\r\n\r\n\u2022 {\"url\":\"http://example.com/?page=1\"}\r\n------------------------------------------------------- -----------------------------\r\nhono 3.1.3        93.51 ns/iter   (88.1 ns \u2026 216.14 ns)  92.46 ns 146.49 ns 192.24 ns\r\nhono with PR      98.15 ns/iter   (93.23 ns \u2026 176.8 ns)  97.18 ns 149.85 ns 162.26 ns\r\nfastQuerystring   88.39 ns/iter  (82.92 ns \u2026 211.82 ns)  87.12 ns 143.22 ns 178.06 ns\r\n\r\nsummary for {\"url\":\"http://example.com/?page=1\"}\r\n  fastQuerystring\r\n   1.06x faster than hono 3.1.3\r\n   1.11x faster than hono with PR\r\n\r\n\u2022 {\"url\":\"http://example.com/?url=http://example.com&page=1\"}\r\n------------------------------------------------------- -----------------------------\r\nhono 3.1.3       181.37 ns/iter (170.66 ns \u2026 302.08 ns) 180.01 ns 243.45 ns 247.03 ns\r\nhono with PR     186.77 ns/iter (176.45 ns \u2026 290.13 ns)  190.2 ns  246.7 ns 263.16 ns\r\nfastQuerystring  162.25 ns/iter  (153.31 ns \u2026 302.2 ns) 159.61 ns 227.72 ns 247.82 ns\r\n\r\nsummary for {\"url\":\"http://example.com/?url=http://example.com&page=1\"}\r\n  fastQuerystring\r\n   1.12x faster than hono 3.1.3\r\n   1.15x faster than hono with PR\r\n\r\n\u2022 {\"url\":\"http://example.com/?url=http://example.com/very/very/deep/path/to/something&search=very-long-search-string\"}\r\n------------------------------------------------------- -----------------------------\r\nhono 3.1.3       196.09 ns/iter  (183.96 ns \u2026 276.2 ns) 194.43 ns 257.71 ns 272.48 ns\r\nhono with PR     232.93 ns/iter (222.82 ns \u2026 309.85 ns) 231.97 ns 294.33 ns 299.66 ns\r\nfastQuerystring  259.47 ns/iter (249.71 ns \u2026 319.48 ns) 258.02 ns 315.05 ns 315.56 ns\r\n\r\nsummary for {\"url\":\"http://example.com/?url=http://example.com/very/very/deep/path/to/something&search=very-long-search-string\"}\r\n  hono 3.1.3\r\n   1.19x faster than hono with PR\r\n   1.32x faster than fastQuerystring\r\n\r\n\u2022 {\"url\":\"http://example.com/?search=Hono+is+a+small,+simple,+and+ultrafast+web+framework+for+the+Edge.&page=1\"}\r\n------------------------------------------------------- -----------------------------\r\nhono 3.1.3       184.92 ns/iter (174.18 ns \u2026 326.26 ns) 187.11 ns 254.86 ns 256.74 ns\r\nhono with PR     621.62 ns/iter (576.61 ns \u2026 810.12 ns)  623.6 ns 810.12 ns 810.12 ns\r\nfastQuerystring  542.04 ns/iter (516.23 ns \u2026 739.35 ns) 538.62 ns 710.87 ns 739.35 ns\r\n\r\nsummary for {\"url\":\"http://example.com/?search=Hono+is+a+small,+simple,+and+ultrafast+web+framework+for+the+Edge.&page=1\"}\r\n  hono 3.1.3\r\n   2.93x faster than fastQuerystring\r\n   3.36x faster than hono with PR\r\n\r\n\u2022 {\"url\":\"http://example.com/?a=1&b=2&c=3&d=4&e=5&f=6&g=7&h=8&i=9&j=10\"}\r\n------------------------------------------------------- -----------------------------\r\nhono 3.1.3       628.45 ns/iter (598.59 ns \u2026 732.02 ns) 638.18 ns 732.02 ns 732.02 ns\r\nhono with PR     658.52 ns/iter  (525.1 ns \u2026 733.42 ns) 661.84 ns 733.42 ns 733.42 ns\r\nfastQuerystring   301.3 ns/iter (283.41 ns \u2026 388.77 ns) 302.77 ns 383.02 ns 388.77 ns\r\n\r\nsummary for {\"url\":\"http://example.com/?a=1&b=2&c=3&d=4&e=5&f=6&g=7&h=8&i=9&j=10\"}\r\n  fastQuerystring\r\n   2.09x faster than hono 3.1.3\r\n   2.19x faster than hono with PR\r\n```\r\n\r\n#### node\r\n\r\n```\r\n$ npm run bench:node\r\n\r\n> bench:node\r\n> tsx ./src/bench.mts\r\n\r\ncpu: Apple M2 Pro\r\nruntime: node v18.14.0 (arm64-darwin)\r\n\r\nbenchmark            time (avg)             (min \u2026 max)       p75       p99      p995\r\n------------------------------------------------------- -----------------------------\r\n\u2022 {\"url\":\"http://example.com/?page=1\",\"key\":\"page\"}\r\n------------------------------------------------------- -----------------------------\r\nhono 3.1.3        41.39 ns/iter  (37.95 ns \u2026 516.84 ns)  43.52 ns  57.09 ns  60.73 ns\r\nhono with PR      55.12 ns/iter     (52.5 ns \u2026 68.3 ns)  57.14 ns  62.19 ns  64.97 ns\r\nfastQuerystring   66.02 ns/iter  (63.96 ns \u2026 372.19 ns)   65.9 ns  72.42 ns  73.45 ns\r\n\r\nsummary for {\"url\":\"http://example.com/?page=1\",\"key\":\"page\"}\r\n  hono 3.1.3\r\n   1.33x faster than hono with PR\r\n   1.6x faster than fastQuerystring\r\n\r\n\u2022 {\"url\":\"http://example.com/?url=http://example.com&page=1\",\"key\":\"page\"}\r\n------------------------------------------------------- -----------------------------\r\nhono 3.1.3        124.2 ns/iter  (118.8 ns \u2026 131.31 ns) 126.15 ns 130.28 ns 130.52 ns\r\nhono with PR      76.68 ns/iter    (73.77 ns \u2026 88.6 ns)  79.09 ns  83.51 ns  84.45 ns\r\nfastQuerystring  199.72 ns/iter (194.35 ns \u2026 217.53 ns) 202.18 ns 211.56 ns 211.94 ns\r\n\r\nsummary for {\"url\":\"http://example.com/?url=http://example.com&page=1\",\"key\":\"page\"}\r\n  hono with PR\r\n   1.62x faster than hono 3.1.3\r\n   2.6x faster than fastQuerystring\r\n\r\n\u2022 {\"url\":\"http://example.com/?page=1\"}\r\n------------------------------------------------------- -----------------------------\r\nhono 3.1.3        80.57 ns/iter  (77.79 ns \u2026 104.94 ns)  82.96 ns  89.03 ns  99.25 ns\r\nhono with PR      91.85 ns/iter    (87.9 ns \u2026 107.6 ns)   93.9 ns 101.43 ns 103.75 ns\r\nfastQuerystring   71.55 ns/iter   (68.54 ns \u2026 86.92 ns)  74.12 ns  82.68 ns  82.95 ns\r\n\r\nsummary for {\"url\":\"http://example.com/?page=1\"}\r\n  fastQuerystring\r\n   1.13x faster than hono 3.1.3\r\n   1.28x faster than hono with PR\r\n\r\n\u2022 {\"url\":\"http://example.com/?url=http://example.com&page=1\"}\r\n------------------------------------------------------- -----------------------------\r\nhono 3.1.3       164.39 ns/iter (153.94 ns \u2026 197.98 ns) 168.11 ns 186.43 ns 196.59 ns\r\nhono with PR     167.32 ns/iter (163.34 ns \u2026 181.16 ns) 169.12 ns 176.17 ns 177.04 ns\r\nfastQuerystring  202.08 ns/iter (195.31 ns \u2026 213.89 ns) 204.75 ns  213.7 ns  213.7 ns\r\n\r\nsummary for {\"url\":\"http://example.com/?url=http://example.com&page=1\"}\r\n  hono 3.1.3\r\n   1.02x faster than hono with PR\r\n   1.23x faster than fastQuerystring\r\n\r\n\u2022 {\"url\":\"http://example.com/?url=http://example.com/very/very/deep/path/to/something&search=very-long-search-string\"}\r\n------------------------------------------------------- -----------------------------\r\nhono 3.1.3       161.58 ns/iter (156.25 ns \u2026 172.65 ns)  163.5 ns 168.73 ns 172.38 ns\r\nhono with PR     200.47 ns/iter (195.61 ns \u2026 212.69 ns) 202.35 ns 210.52 ns 211.87 ns\r\nfastQuerystring  400.78 ns/iter (393.91 ns \u2026 439.39 ns) 402.97 ns 426.57 ns 439.39 ns\r\n\r\nsummary for {\"url\":\"http://example.com/?url=http://example.com/very/very/deep/path/to/something&search=very-long-search-string\"}\r\n  hono 3.1.3\r\n   1.24x faster than hono with PR\r\n   2.48x faster than fastQuerystring\r\n\r\n\u2022 {\"url\":\"http://example.com/?search=Hono+is+a+small,+simple,+and+ultrafast+web+framework+for+the+Edge.&page=1\"}\r\n------------------------------------------------------- -----------------------------\r\nhono 3.1.3       165.62 ns/iter (159.12 ns \u2026 206.62 ns) 167.27 ns 182.45 ns 203.05 ns\r\nhono with PR        646 ns/iter (634.85 ns \u2026 691.84 ns) 647.97 ns 691.84 ns 691.84 ns\r\nfastQuerystring  724.25 ns/iter (711.73 ns \u2026 763.09 ns) 725.07 ns 763.09 ns 763.09 ns\r\n\r\nsummary for {\"url\":\"http://example.com/?search=Hono+is+a+small,+simple,+and+ultrafast+web+framework+for+the+Edge.&page=1\"}\r\n  hono 3.1.3\r\n   3.9x faster than hono with PR\r\n   4.37x faster than fastQuerystring\r\n\r\n\u2022 {\"url\":\"http://example.com/?a=1&b=2&c=3&d=4&e=5&f=6&g=7&h=8&i=9&j=10\"}\r\n------------------------------------------------------- -----------------------------\r\nhono 3.1.3       534.15 ns/iter  (524.4 ns \u2026 561.31 ns) 536.08 ns 552.36 ns 561.31 ns\r\nhono with PR     419.28 ns/iter (410.06 ns \u2026 449.23 ns) 421.47 ns 439.72 ns 449.23 ns\r\nfastQuerystring  397.81 ns/iter (388.85 ns \u2026 414.47 ns) 400.37 ns 412.43 ns 414.47 ns\r\n\r\nsummary for {\"url\":\"http://example.com/?a=1&b=2&c=3&d=4&e=5&f=6&g=7&h=8&i=9&j=10\"}\r\n  fastQuerystring\r\n   1.05x faster than hono with PR\r\n   1.34x faster than hono 3.1.3\r\n```",
        "html_url": "https://github.com/honojs/hono/pull/1015",
        "comments": [
          "Hi @usualoma !\r\n\r\nThanks for the PR.\r\n\r\nI've implemented the decoding query parameters, but I needed more confidence. So I am thankful that this PR supports decoding `+` and keys with spaces. And I think it is good that you have created a benchmark. As for performance, it is faster than `fast-querystring`, which is great.\r\n\r\nI'll merge it!",
          "This change brings new bug.\r\n\r\n`?pretty&foo=bar` could be resolved with `{ foo: 'bar' }`, but now cannot be resolved",
          "![image](https://user-images.githubusercontent.com/447084/229032684-4047d929-82d6-44bb-88c4-7a2042c29f02.png)\r\n",
          "But with new query system\uff1a\r\n![image](https://user-images.githubusercontent.com/447084/229033661-57b50e2a-2a24-4ac3-b3b1-5c82f7f2705e.png)\r\n",
          "Bug requested: https://github.com/honojs/hono/issues/1022"
        ]
      },
      {
        "pr_number": 1013,
        "title": "feat(jwt): support for getting payload from `c.get('jwtPayload')`",
        "body": "This PR will add support for getting the decoded payload from `c.get('jwtPaload')` for JWT Auth Middleware.\r\n\r\n```ts\r\napp.post(\r\n  '/auth/abc',\r\n  jwt({\r\n    secret: 'a-secret',\r\n  }),\r\n  (c) => {\r\n    const payload = c.get('jwtPayload')\r\n    //...\r\n  }\r\n)\r\n```\r\n\r\nThis will resolve #810 #1005 \r\n\r\n### Does it include breaking changes?\r\n\r\nThe `verify()` API in `utils/jwt/jwt.ts` has been changed. It will return `any` instead of `boolean`. This seems to be  a breaking change, but this function is mainly \"utility\" used in the Hono internal. We should release the fix, including breaking changes as major version up, but this change will not affect end users. EDIT ~~I'd like to release it as a minor version up \"3.2.0\".~~\r\n\r\n\r\nEDIT:\r\n\r\nWe can release this with a patch release.\r\n\r\n* Utilities such as `utils/url.ts` are broken and changed without notice. utilities are intended to be used internally and may be changed in patch releases. Same for `utils/jwt/jwt.ts.\r\n* It is not a major feature addition, and we don't have to include it in the Minor or Major release.",
        "html_url": "https://github.com/honojs/hono/pull/1013",
        "comments": ["Thanks for this"]
      }
    ],
    "v3.1.3": [
      {
        "pr_number": 1012,
        "title": "fix(package.json): fixed `test:wrangler` and `test:lambda`",
        "body": "The `package.json` was incorrectly configured and has been fixed.",
        "html_url": "https://github.com/honojs/hono/pull/1012",
        "comments": []
      },
      {
        "pr_number": 1010,
        "title": "fix(req): decode special chars in URL params",
        "body": "This PR enables `c.req.query` and `c.req.queries` to decode special characters in URL parameters.\r\n\r\nThis will fix #1006",
        "html_url": "https://github.com/honojs/hono/pull/1010",
        "comments": []
      },
      {
        "pr_number": 1013,
        "title": "feat(jwt): support for getting payload from `c.get('jwtPayload')`",
        "body": "This PR will add support for getting the decoded payload from `c.get('jwtPaload')` for JWT Auth Middleware.\r\n\r\n```ts\r\napp.post(\r\n  '/auth/abc',\r\n  jwt({\r\n    secret: 'a-secret',\r\n  }),\r\n  (c) => {\r\n    const payload = c.get('jwtPayload')\r\n    //...\r\n  }\r\n)\r\n```\r\n\r\nThis will resolve #810 #1005 \r\n\r\n### Does it include breaking changes?\r\n\r\nThe `verify()` API in `utils/jwt/jwt.ts` has been changed. It will return `any` instead of `boolean`. This seems to be  a breaking change, but this function is mainly \"utility\" used in the Hono internal. We should release the fix, including breaking changes as major version up, but this change will not affect end users. EDIT ~~I'd like to release it as a minor version up \"3.2.0\".~~\r\n\r\n\r\nEDIT:\r\n\r\nWe can release this with a patch release.\r\n\r\n* Utilities such as `utils/url.ts` are broken and changed without notice. utilities are intended to be used internally and may be changed in patch releases. Same for `utils/jwt/jwt.ts.\r\n* It is not a major feature addition, and we don't have to include it in the Minor or Major release.",
        "html_url": "https://github.com/honojs/hono/pull/1013",
        "comments": ["Thanks for this"]
      },
      {
        "pr_number": 1013,
        "title": "feat(jwt): support for getting payload from `c.get('jwtPayload')`",
        "body": "This PR will add support for getting the decoded payload from `c.get('jwtPaload')` for JWT Auth Middleware.\r\n\r\n```ts\r\napp.post(\r\n  '/auth/abc',\r\n  jwt({\r\n    secret: 'a-secret',\r\n  }),\r\n  (c) => {\r\n    const payload = c.get('jwtPayload')\r\n    //...\r\n  }\r\n)\r\n```\r\n\r\nThis will resolve #810 #1005 \r\n\r\n### Does it include breaking changes?\r\n\r\nThe `verify()` API in `utils/jwt/jwt.ts` has been changed. It will return `any` instead of `boolean`. This seems to be  a breaking change, but this function is mainly \"utility\" used in the Hono internal. We should release the fix, including breaking changes as major version up, but this change will not affect end users. EDIT ~~I'd like to release it as a minor version up \"3.2.0\".~~\r\n\r\n\r\nEDIT:\r\n\r\nWe can release this with a patch release.\r\n\r\n* Utilities such as `utils/url.ts` are broken and changed without notice. utilities are intended to be used internally and may be changed in patch releases. Same for `utils/jwt/jwt.ts.\r\n* It is not a major feature addition, and we don't have to include it in the Minor or Major release.",
        "html_url": "https://github.com/honojs/hono/pull/1013",
        "comments": ["Thanks for this"]
      }
    ],
    "v3.1.2": [
      {
        "pr_number": 1001,
        "title": "supported issued_at validation for JWT",
        "body": "This validation is allowed `current_time >= iat` if there is iat field.\r\n\r\n[RFC](https://www.rfc-editor.org/rfc/rfc7519#section-4.1.6) for iat but there is no reference to requirements. ",
        "html_url": "https://github.com/honojs/hono/pull/1001",
        "comments": [
          "Hi @Code-Hex !\r\n\r\nThanks for the PR. Looks good.\r\n\r\nOne thing. Could you do `yarn denoify`and commit the generated files? These are necessary for Deno.",
          "@yusukebe Thanks @yusukebe !\r\nI did run `yarn denoify` and committed it!",
          "Thanks! I'll merge it now!"
        ]
      },
      {
        "pr_number": 1004,
        "title": "fix(app): don't remove slash form `/` if strict is false",
        "body": "Do not remove slashes when the strict option is `false` and the path is `/`.\r\n\r\nFix https://github.com/honojs/hono/issues/1000",
        "html_url": "https://github.com/honojs/hono/pull/1004",
        "comments": []
      }
    ],
    "v3.1.1": [
      {
        "pr_number": 997,
        "title": "fix(context): fixed a bug for `c.header()` with a `append` option",
        "body": "This PR fixes the issue for `c.header()` with `append` option.\r\n\r\nWhen using `c.header()` with the `append` option as in the following code, the `Content-Type` was not set correctly.\r\n\r\n```ts\r\napp.get('/', (c) => {\r\n  c.header('foo', 'bar', { append: true })\r\n  return c.html('<h1>This rendered fine</h1>') // <== text/plain...\r\n})\r\n```\r\n\r\nThis PR will resolve it.\r\n\r\nFix #995 ",
        "html_url": "https://github.com/honojs/hono/pull/997",
        "comments": []
      },
      {
        "pr_number": 998,
        "title": "feat: Enable to add subApp with basePath.",
        "body": "This PR fixes #996.",
        "html_url": "https://github.com/honojs/hono/pull/998",
        "comments": [
          "Hi @usualoma !\r\n\r\nLooks good! I'll merge it soon and ship a patch release that includes this fix.\r\n\r\nThanks!"
        ]
      },
      {
        "pr_number": 999,
        "title": "Refactoring base64 logic for JWT",
        "body": "- Import base64 logic from https://github.com/Code-Hex/firebase-auth-cloudflare-workers/blob/main/src/base64.ts\r\n- Decoding speed will be faster almost 2x\r\n- Accept to encode RFC 3548 examples\r\n- This PR is created at YAPC::Japan::Kyoto 2023 \ud83d\udd25 ",
        "html_url": "https://github.com/honojs/hono/pull/999",
        "comments": [
          "I fix them \ud83d\ude4f ",
          "@yusukebe I passed all tests in middleware\r\n\r\n```\r\n PASS  src/middleware/etag/index.test.ts\r\n PASS  src/middleware/bearer-auth/index.test.ts\r\n PASS  src/middleware/pretty-json/index.test.ts\r\n PASS  src/middleware/cors/index.test.ts\r\n PASS  src/middleware/basic-auth/index.test.ts\r\n PASS  src/middleware/compress/index.test.ts\r\n PASS  src/middleware/html/index.test.ts\r\n PASS  src/middleware/cache/index.test.ts\r\n PASS  src/middleware/powered-by/index.test.ts\r\n PASS  src/middleware/jsx/index.test.tsx\r\n PASS  src/middleware/jwt/index.test.ts\r\n PASS  src/middleware/logger/index.test.ts\r\n```",
          "Hi @Code-Hex !\r\n\r\nLooks good to me!\r\n\r\n@akiym Can you review it?:)\r\n",
          "Thanks @akiym !\r\n\r\nI'll add you as a co-author for this PR."
        ]
      }
    ],
    "v3.1.0": [
      {
        "pr_number": 983,
        "title": "fix(types): infer types correctly",
        "body": "This PR will fix two issues about types:\r\n\r\n1. It could not infer the param type if the path has path parameters.\r\n\r\n<img width=\"576\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/225035919-b58f64c8-e98d-4acd-bc0e-d1102faf1177.png\">\r\n\r\n2. The value became `unknown` in validation functions.\r\n\r\n<img width=\"579\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/225036338-2ea5b5f7-9c7c-4942-af26-768360258716.png\">\r\n\r\n",
        "html_url": "https://github.com/honojs/hono/pull/983",
        "comments": []
      },
      {
        "pr_number": 982,
        "title": "feat(validator): Allow validator to apply validation to path param.",
        "body": "How about allowing the validator to also apply validation to the path param?\r\n\r\nWe can still write the following, which is a helpful way to do it.\r\n```\r\napp.get('/users/:id{[0-9]+}/books/:title', handler);\r\n```\r\n\r\nHowever, validating with a validator in the following cases would be good.\r\n* Should use 400 instead of 404.\r\n* Should be validated by something that regular expressions cannot express.\r\n* Should be changed to Number type.\r\n\r\n### Type?\r\n\r\nI tried the following changes but couldn't get the https://github.com/usualoma/hono/blob/1a3f2f62d6dece59e4c5e90b5ed21f0388d8b4d9/src/validator/validator.test.ts#L96-L150 test to pass and gave up. Although we cannot reference the path parameter type (generated from `:id`) in ValidationFunction, this PR change would be a useful enough feature.\r\n\r\n```diff\r\ndiff --git a/src/validator/validator.ts b/src/validator/validator.ts\r\nindex c38ad05..b5d27a5 100644\r\n--- a/src/validator/validator.ts\r\n+++ b/src/validator/validator.ts\r\n@@ -7,9 +7,9 @@ type ValidationTargetByMethod<M> = M extends 'get' | 'head' // GET and HEAD requ\r\n   ? Exclude<keyof ValidationTargets, ValidationTargetKeysWithBody>\r\n   : keyof ValidationTargets\r\n \r\n-export type ValidationFunction<InputType, OutputType, E extends Env = {}> = (\r\n+export type ValidationFunction<InputType, OutputType, E extends Env = {}, P extends string = any> = (\r\n   value: InputType,\r\n-  c: Context<E>\r\n+  c: Context<E, P>\r\n ) => OutputType | Response | Promise<Response>\r\n \r\n export const validator = <\r\n@@ -29,7 +29,7 @@ export const validator = <\r\n   E extends Env = any\r\n >(\r\n   target: U,\r\n-  validationFunc: ValidationFunction<InputType, OutputType, E>\r\n+  validationFunc: ValidationFunction<InputType, OutputType, E, P>\r\n ): MiddlewareHandler<E, P, V> => {\r\n   return async (c, next) => {\r\n     let value = {}\r\n```",
        "html_url": "https://github.com/honojs/hono/pull/982",
        "comments": [
          "Hi @usualoma !\r\n\r\nGood suggestion! But there were some bugs about inferring types apart from this PR. I've fixed these bugs in PR #983 \r\n\r\nShall we discuss this PR after merging the current \"next\" branch?",
          "@yusukebe Thanks!\r\nI have merged \"next\" in ad00c7d.\r\n\r\nHowever, keeping this PR as a small change is better because the current code that does not pass the path as a template parameter works well when a validation function is defined separately, as shown below.\r\n\r\nhttps://github.com/usualoma/hono/blob/1a3f2f62d6dece59e4c5e90b5ed21f0388d8b4d9/src/validator/validator.test.ts#L99-L103",
          "@usualoma \r\n\r\nHow about this though it will be verbose?:\r\n\r\n```diff\r\ndiff --git a/src/validator/validator.ts b/src/validator/validator.ts\r\nindex 0ed7065..60f524e 100644\r\n--- a/src/validator/validator.ts\r\n+++ b/src/validator/validator.ts\r\n@@ -7,10 +7,12 @@ type ValidationTargetByMethod<M> = M extends 'get' | 'head' // GET and HEAD requ\r\n   ? Exclude<keyof ValidationTargets, ValidationTargetKeysWithBody>\r\n   : keyof ValidationTargets\r\n\r\n-export type ValidationFunction<InputType, OutputType, E extends Env = {}> = (\r\n-  value: InputType,\r\n-  c: Context<E>\r\n-) => OutputType | Response | Promise<Response>\r\n+export type ValidationFunction<\r\n+  InputType,\r\n+  OutputType,\r\n+  E extends Env = {},\r\n+  P extends string = string\r\n+> = (value: InputType, c: Context<E, P>) => OutputType | Response | Promise<Response>\r\n\r\n export const validator = <\r\n   InputType,\r\n@@ -18,6 +20,7 @@ export const validator = <\r\n   M extends string,\r\n   U extends ValidationTargetByMethod<M>,\r\n   OutputType = ValidationTargets[U],\r\n+  P2 extends string = P,\r\n   V extends {\r\n     in: { [K in U]: unknown extends InputType ? OutputType : InputType }\r\n     out: { [K in U]: OutputType }\r\n@@ -32,7 +35,8 @@ export const validator = <\r\n   validationFunc: ValidationFunction<\r\n     unknown extends InputType ? ValidationTargets[U] : InputType,\r\n     OutputType,\r\n-    E\r\n+    E,\r\n+    P2\r\n   >\r\n ): MiddlewareHandler<E, P, V> => {\r\n   return async (c, next) => {\r\n@@ -67,7 +71,7 @@ export const validator = <\r\n         break\r\n     }\r\n\r\n-    const res = validationFunc(value as never, c)\r\n+    const res = validationFunc(value as never, c as never)\r\n\r\n     if (res instanceof Response || res instanceof Promise) {\r\n       return res\r\n```",
          "@yusukebe \r\nOh wow, this is great! This looks good to me.\r\n\r\nIf we include this change, you should be the author; what should we do? Would you like to add it in another PR or add the commit to this branch?",
          "@usualoma \r\n\r\nNo. The author of this PR is you! So apply the above diff. Then, I will make myself as \"Co-author\" when I merge it.",
          "@yusukebe \r\nThank you, I understand.\r\nApplied the patch and denoified.",
          "Thank you for understanding. I've merged!"
        ]
      },
      {
        "pr_number": 984,
        "title": "feat(validator): `query` supports array params",
        "body": "This PR enables the validator to handle array params with `query`, not using `queries`.\r\n\r\nFor example, before this PR, we could not validate multiple params like `tag` using `query`:\r\n\r\n```\r\nhttp://localhost/search?page=123&tag=a&tag=b\r\n```\r\n\r\nOr we have to use `queries` but if we do so, they all will be `array`.\r\n\r\nWith this PR, the values we could get from `query` will be `Record<string, string | string[]>`. So we can write the followings:\r\n\r\n```ts\r\nconst app = new Hono()\r\n\r\nconst schema = z.object({\r\n  q: z.string(),\r\n  tag: z.array(z.string()),\r\n})\r\n\r\nconst route = app.get('/post', zValidator('query', schema), (c) => {\r\n  const { q, tag } = c.req.valid('query')\r\n  return c.jsonT({\r\n    queryString: q,\r\n    tags: tag,\r\n  })\r\n})\r\n```\r\n\r\nThis issue is mentioned by @equt in our Discord. Thanks.",
        "html_url": "https://github.com/honojs/hono/pull/984",
        "comments": [
          "LGTM, but I believe it more appropriate to have `z.union([z.array(z.string()), z.string()])` for the `tag` according to the following line\r\n\r\nhttps://github.com/honojs/hono/blob/89c7af4d076533e1f01ab3563ea271434c049c4b/src/validator/validator.ts#L62\r\n\r\nThis would allow if there is only one tag being presented. Anyway, great work, and many thanks for such instant feedback.",
          "Thank you for reviewing. If you have any further suggestions, please let us know anytime!"
        ]
      },
      {
        "pr_number": 988,
        "title": "feat(req): introduce `c.req.path`",
        "body": "This PR introduces the property `path` for HonoRequest.\r\n\r\nThis simple feature allows you to get the URL's path by accessing `c.req.path`.\r\n\r\n```ts\r\napp.get('/search', (c) => c.text(c.req.path)) // \"search\"\r\n```\r\n\r\nThis feature is what many users wanted. This is good because there is no performance degradation, only a slight increase in file size. There are some API changes, but they are used internally, so there are no problems.",
        "html_url": "https://github.com/honojs/hono/pull/988",
        "comments": [
          "Hi @yusukebe!\r\n\r\nI think `c.req.path` is a nice feature!\r\n\r\nAs I mentioned in my comment below, I believe that \"usually clients do not send fragments\" and \"even if an evil client sends them, there is no need to cut them,\" but should we cut them?\r\nhttps://github.com/honojs/hono/pull/498#pullrequestreview-1096123598",
          "@usualoma \r\n\r\nThanks for your comment.\r\n\r\nYou are right! We don't have to cut fragments, and we can remove `removeFragment` from `url.ts`. Great!\r\n",
          "PS.\r\n\r\nPreviously `getQueryParam()` cut fragments, but there is no need for that, and `URLSearchParams` does not cut fragments either.",
          "I'll merge it.",
          "\ud83d\udc4d "
        ]
      },
      {
        "pr_number": 987,
        "title": "feat(adapter): introduce AWS Lambda Adapter",
        "body": "This PR introduces the AWS Lambda Adapter. With this Adapter, you can run applications using Hono on AWS Lambda, and you can also publish them with API Gateway.\r\n\r\n### Caution\r\n\r\nIf this feature is released, it will be experimental for a while and the API might be change\r\n\r\n### Usage\r\n\r\nThe usage is almost the same as the Cloudflare Pages and Next.js adapters. Import `handle`, give the Hono application, and export it.\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { handle } from 'hono/aws-lambda'\r\nimport { logger } from 'hono/logger'\r\n\r\nconst app = new Hono()\r\n\r\napp.use('*', logger())\r\n\r\napp.get('/hello', (c) => {\r\n  return c.json({\r\n    message: 'Hono meets Lambda',\r\n  })\r\n})\r\n\r\nexport const handler = handle(app)\r\n```\r\n\r\nThis is all you need to do to get your Hono application running in Lambda.\r\n\r\n### Settings\r\n\r\nUse AWS API Gateway to publish applications run on Lambda.\r\n\r\n<img width=\"712\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/225646479-368a9034-91c0-4abd-87b1-f2eca99115fc.png\">\r\n\r\nIn API Gateway, create a Route `ANY /{proxy+}`. This way, the Hono application can handle all methods and paths.\r\n\r\n<img width=\"641\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/225646901-eef470de-4861-490f-a6ab-209012571575.png\">\r\n\r\n### Deploy\r\n\r\nThe simplest way is to use esbuild to transpile to JavaScript, compress it to Zip, and upload it using `aws` CLI. For example, `package.json` could look like this.\r\n\r\n```json\r\n{\r\n  \"name\": \"lambda-hello\",\r\n  \"type\": \"module\",\r\n  \"scripts\": {\r\n    \"build\": \"esbuild --bundle --outfile=./dist/index.js --platform=node --target=node18 ./src/index.ts\",\r\n    \"zip\": \"zip -j lambda.zip dist/index.js\",\r\n    \"update\": \"aws lambda update-function-code --zip-file fileb://lambda.zip --function-name hello\",\r\n    \"deploy\": \"run-s build zip update\"\r\n  }\r\n}\r\n```\r\n\r\n\r\n### Is this what users really want?\r\n\r\nI think the answer is \"Yes\". Hono was originally intended for environments where Web Standard runs natively, such as Cloudflare Workers and Deno. However, Node.js v18 now supports Web Standard such as Request/Response, so it can work on Lambda without Polyfill.\r\n\r\nMany users use Hono for Cloudflare Workers. But that's not all we need to do, because one of Hono's key features is that it works on many platforms. With Hono running on many platforms, more users will use it and get a lot of feedback. We want to make it even better.\r\n\r\n### Have to include it in core?\r\n\r\nMaybe yes. It's OK to be `hono/aws-lambda`. AWS Lambda adapters should be treated like Cloudflare Pages and Next.js adapters. By limiting support to Node.js v18 only, Polyfill is not needed, so the project will not be as large as it could be with as little code as possible.",
        "html_url": "https://github.com/honojs/hono/pull/987",
        "comments": []
      },
      {
        "pr_number": 989,
        "title": "Merge next into main",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/989",
        "comments": []
      }
    ],
    "v3.1.0-rc.2": [
      {
        "pr_number": 989,
        "title": "Merge next into main",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/989",
        "comments": []
      },
      {
        "pr_number": 980,
        "title": "feat(pages): enable getting `eventContext`",
        "body": "This PR is for an adapter of Cloudflare Pages. Now we can get \"EventContext\" from `env`. It's useful for adding Basic Auth to your page's site with the middleware.\r\n\r\n```ts\r\n// functions/_middleware.ts\r\nimport { Hono } from 'hono'\r\nimport { basicAuth } from 'hono/basic-auth'\r\nimport { handle } from 'hono/cloudflare-pages'\r\nimport type { EventContext } from 'hono/cloudflare-pages'\r\n\r\ntype Bindings = {\r\n  eventContext: EventContext\r\n}\r\n\r\nconst app = new Hono<{ Bindings: Bindings }>()\r\n\r\napp.get(\r\n  '*',\r\n  basicAuth({\r\n    username: 'hoge',\r\n    password: 'bar',\r\n  }),\r\n  async (c) => {\r\n    return c.env.eventContext.next()\r\n  }\r\n)\r\n\r\nexport const onRequest = handle(app)\r\n```",
        "html_url": "https://github.com/honojs/hono/pull/980",
        "comments": []
      },
      {
        "pr_number": 981,
        "title": "feat(page/nextjs): show \"deprecated\" for 2nd arg of `handle()`",
        "body": "This PR is for the Cloudflare Pages adapter and the Next.js adapter. Now, we recommend using `app.basePath()` to set the base path instead of passing a second argument to `handle()`. With this PR showing the \"deprecated\" message:\r\n\r\n<img width=\"561\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/224855331-1cc293a7-e406-421d-9eb8-7414e1374f55.png\">\r\n",
        "html_url": "https://github.com/honojs/hono/pull/981",
        "comments": []
      }
    ],
    "v3.1.0-rc.1": [
      {
        "pr_number": 957,
        "title": "feat(context): allow passing `unknown` to `executionCtx.waitUntil`",
        "body": "This is suggested by @koistya. Thanks!",
        "html_url": "https://github.com/honojs/hono/pull/957",
        "comments": [
          "I'll merge it into the \"next\" branch, which is the base branch for the next minor release (v3.1)."
        ]
      },
      {
        "pr_number": 951,
        "title": "fix(type): remove unnecessary distribution",
        "body": "Do not use `PrettyJSON<T>` because it causes unnecessary distributions. As a side effect, `boolean` is inferred to `true | false`. But I think there is no problem in practical use.\r\n\r\nThis will fix #950 ",
        "html_url": "https://github.com/honojs/hono/pull/951",
        "comments": [
          "Hi  @yudai-nkt !\r\n\r\nWhat I want to do is \"do not expand `boolean` to `true | false`\", so I made the `PrettyJSON`:\r\n\r\nhttps://github.com/honojs/hono/pull/939#discussion_r1119813580\r\n\r\nBut, this makes unexpected behavior:\r\n\r\nhttps://github.com/honojs/hono/issues/950\r\n\r\nMy implementation may be bad, however, we can decide don't use `PrettyJSON` and use `true | false` without forcing `boolean` to be them.",
          "I commented without really understanding whether union distribution is the cause of the problem (so deleted it and will check later). thanks for the explanation anyway!",
          "Yes, I confirmed I was misunderstanding and we should go with this PR! Sorry for the disturbance.",
          "Merging it into the \"next\" branch!"
        ]
      },
      {
        "pr_number": 989,
        "title": "Merge next into main",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/989",
        "comments": []
      },
      {
        "pr_number": 989,
        "title": "Merge next into main",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/989",
        "comments": []
      },
      {
        "pr_number": 949,
        "title": "feat: `env` support enviroment variables for multi runtimes",
        "body": "This PR introduces `env` function to get environment variables for any runtimes, not only variables of Cloudflare Workers' Bindings.\r\n\r\nWe can write the code with the same syntax at any runtime:\r\n\r\n```ts\r\nimport { env } from 'hono/adapter'\r\n\r\napp.get('/env', (c) => {\r\n  const { NAME } = env<{ NAME: string }>(c)\r\n  return c.text(NAME)\r\n})\r\n```\r\n\r\nSupported runtimes:\r\n\r\n* Cloudflare Workers\r\n* Deno\r\n* Bun\r\n* Lagon ( It works on dev but can't resolve the path of `.env` on CI )\r\n* Node.js\r\n* Vercel ( No CI )\r\n* Fastly ( Users may not define the values... )\r\n\r\n## Why don't we use `c.env`?\r\n\r\nAlready we are using `c.env` for Cloudflare Workers' Bindings, so we can use it for other runtimes. But, if we do so, we have to write the code to `context.ts`. It's bad to write that things depend on each environment on the common component. Separating `env` as `import { env } from 'hono/adapter'` is a better API.",
        "html_url": "https://github.com/honojs/hono/pull/949",
        "comments": [
          "@yujong-lee @metrue @ThatOneBro and others:\r\n\r\nHi, What do you think about this feature? I think this is necessary, and API design is better.\r\n",
          "Great work! It makes sense to write it as a function.",
          "Thanks. Let's go with it."
        ]
      },
      {
        "pr_number": 964,
        "title": "feat: `route()` with one argument is renamed `basePath()`.",
        "body": "#948 basePath() version\r\n\r\nOne difference from https://github.com/honojs/hono/pull/948#issuecomment-1455115090 is that we replaced `private _basePath` with `#basePath`. This should make it more straightforward that it is a local member.\r\n\r\n### Compatibility\r\n\r\nTo reduce confusion caused by compatibility issues, it would be possible to allow `route(path)` to be used in 3.x and then remove it in 4.x.\r\n\r\n```diff\r\ndiff --git a/src/hono.ts b/src/hono.ts\r\nindex 72380c8..3238c35 100644\r\n--- a/src/hono.ts\r\n+++ b/src/hono.ts\r\n@@ -137,9 +137,23 @@ export class Hono<\r\n   route<SubPath extends string, SubEnv extends Env, SubSchema>(\r\n     path: SubPath,\r\n     app: Hono<SubEnv, SubSchema>\r\n+  ): Hono<E, RemoveBlankRecord<MergeSchemaPath<SubSchema, SubPath> | S>, BasePath>\r\n+  /** @deprecated\r\n+   * Use `basePath` instead of `route` with one argument.\r\n+   * The `route` with one argument has been removed in v4.\r\n+   */\r\n+  route<SubPath extends string>(path: SubPath): Hono<E, RemoveBlankRecord<S>, BasePath>\r\n+  route<SubPath extends string, SubEnv extends Env, SubSchema>(\r\n+    path: SubPath,\r\n+    app?: Hono<SubEnv, SubSchema>\r\n   ): Hono<E, RemoveBlankRecord<MergeSchemaPath<SubSchema, SubPath> | S>, BasePath> {\r\n     const subApp = this.basePath(path)\r\n \r\n+    if (!app) {\r\n+      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n+      return subApp as any\r\n+    }\r\n+\r\n     app.routes.map((r) => {\r\n       const handler =\r\n         app.errorHandler === errorHandler\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/30598/223580511-35d5e183-35e1-4259-86b5-8f111bf9044a.png)\r\n",
        "html_url": "https://github.com/honojs/hono/pull/964",
        "comments": [
          "Hi @yusukebe !\r\n\r\nI have created a PR that adds `basePath()`. How about this?",
          "@usualoma \r\n\r\nGreat work!\r\n\r\nYou're right, I think we should leave `route(path)` and add a `@deprecated` comment for compatibility. Let's remove it when we ship the v4.\r\n\r\nOne thing about `#basePath`:\r\n\r\nI have not used `#` so far because it is slower than `private`. If I run the following script in Node.js, it is true that `#` is slower.\r\n\r\n```ts\r\nimport { run, bench } from 'mitata'\r\n\r\nclass Sharp {\r\n  #prop = true\r\n  setProp() {\r\n    this.#prop = true\r\n  }\r\n}\r\n\r\nclass Private {\r\n  private prop = true\r\n  setProp() {\r\n    this.prop = true\r\n  }\r\n}\r\n\r\nconst withSharp = () => {\r\n  const foo = new Sharp()\r\n  foo.setProp()\r\n}\r\n\r\nconst withPrivate = () => {\r\n  const foo = new Private()\r\n  foo.setProp()\r\n}\r\n\r\n{\r\n  bench('sharp', async () => {\r\n    withSharp()\r\n  })\r\n}\r\n\r\n{\r\n  bench('private', async () => {\r\n    withPrivate()\r\n  })\r\n}\r\n\r\nawait run()\r\n```\r\n\r\nResult:\r\n\r\n```\r\nbenchmark      time (avg)             (min \u2026 max)       p75       p99      p995\r\n------------------------------------------------- -----------------------------\r\nsharp       66.18 ns/iter  (58.64 ns \u2026 126.23 ns)  66.94 ns 116.58 ns 119.22 ns\r\nprivate     60.77 ns/iter  (54.91 ns \u2026 129.85 ns)   61.9 ns  73.13 ns 112.74 ns\r\n```\r\n\r\nSo I thought it was better not to use `#`. I don't see any difference when I measure it on Bun, so we may use `#`. But how about using `private _basePath` in this time?",
          "@yusukebe Updated!\r\n\r\n### sharp vs. private\r\n\r\nIndeed, with your script, \"private\" also won in my environment.\r\n\r\n```\r\nbenchmark      time (avg)             (min \u2026 max)       p75       p99      p995\r\n------------------------------------------------- -----------------------------\r\nsharp       59.18 ns/iter  (53.84 ns \u2026 114.62 ns)  59.99 ns 105.27 ns 107.82 ns\r\nprivate     56.33 ns/iter  (53.27 ns \u2026 107.28 ns)  57.88 ns  71.64 ns   97.9 ns\r\n```\r\n\r\nHowever, when I swapped the order of execution as follows ...\r\n\r\n```ts\r\nimport { run, bench } from 'mitata'\r\n\r\nclass Sharp {\r\n  #prop = true\r\n  setProp() {\r\n    this.#prop = true\r\n  }\r\n}\r\n\r\nclass Private {\r\n  private prop = true\r\n  setProp() {\r\n    this.prop = true\r\n  }\r\n}\r\n\r\nconst withSharp = () => {\r\n  const foo = new Sharp()\r\n  foo.setProp()\r\n}\r\n\r\nconst withPrivate = () => {\r\n  const foo = new Private()\r\n  foo.setProp()\r\n}\r\n\r\n{\r\n  bench('private', async () => {\r\n    withPrivate()\r\n  })\r\n}\r\n\r\n{\r\n  bench('sharp', async () => {\r\n    withSharp()\r\n  })\r\n}\r\n\r\nawait run()\r\n```\r\n\r\nThe results were also swapped.\r\n\r\n```\r\nbenchmark      time (avg)             (min \u2026 max)       p75       p99      p995\r\n------------------------------------------------- -----------------------------\r\nprivate     58.55 ns/iter  (52.36 ns \u2026 116.58 ns)  59.88 ns 103.19 ns 108.03 ns\r\nsharp       55.54 ns/iter  (52.43 ns \u2026 108.97 ns)  57.08 ns  61.97 ns  96.52 ns\r\n```\r\n\r\nI have yet to check all of them, but there is no difference in a modern execution environment. However, I have some misgivings, so I agree with the `_basePath` at this time. Sorry to add more arguments :bow:\r\n\r\n",
          "> The results were also swapped.\r\n\r\nWow, it's right. In my environment also, the results are swapped:\r\n\r\n```\r\nbenchmark      time (avg)             (min \u2026 max)       p75       p99      p995\r\n------------------------------------------------- -----------------------------\r\nprivate     65.63 ns/iter  (58.73 ns \u2026 142.83 ns)  66.36 ns 114.72 ns 117.17 ns\r\nsharp       63.15 ns/iter  (56.47 ns \u2026 133.57 ns)  64.38 ns  74.73 ns 115.07 ns\r\n```\r\n\r\nIndeed, I know sometimes the results are swapped in the order of the benchmarks. Thanks for letting me know.\r\n\r\nNevertheless, let's deal with `#` matter another time. If there is no difference between `private` and `#`, we can refactor it to change everything to `#`.",
          "Okay, I'll merge it now!"
        ]
      },
      {
        "pr_number": 967,
        "title": "fix(type): add forgotten `BasePath`",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/967",
        "comments": []
      },
      {
        "pr_number": 959,
        "title": "feat(context): allow passing `RequestInit` to `c.json()` etc.",
        "body": "This PR proposes allowing us to pass `InitResponse` as the second argument to `c.text()` or `c.json()`. It will overload these methods.\r\n\r\n```ts\r\ninterface TextRespond {\r\n  (text: string, status?: StatusCode, headers?: HeaderRecord): Response\r\n  (text: string, init?: ResponseInit): Response\r\n}\r\n```\r\n\r\nThis is inspired by Issue #952. Now, it is very tedious to customize Basic Auth errors.\r\n\r\n```ts\r\napp.onError((e, c) => {\r\n  if (e instanceof HTTPException) {\r\n    const res = e.getResponse()\r\n    res.headers.set('content-type', 'application/json')\r\n    return new Response(\r\n      JSON.stringify({\r\n        message: 'Unauthorized!',\r\n      }),\r\n      res\r\n    )\r\n// ...\r\n```\r\n\r\nSo I thought it would be easier if we can pass `ResponseInit`, i.e. meta information such as headers, to `c.json()`.\r\n\r\n```ts\r\napp.onError((e, c) => {\r\n  if (e instanceof HTTPException) {\r\n    return c.json(\r\n      {\r\n        message: Unauthorized!',\r\n      },\r\n      e.getResponse()\r\n    )\r\n  }\r\n```\r\n\r\nThis feature is not only used in the above cases, but can also be used when we want to modify and return the content retrieved from the outside using `fetch`.\r\n\r\n```ts\r\napp.get('/mirror', async (c) => {\r\n  const res = await fetch('http://example.com')\r\n  return c.json({ foo: 'bar' }, res)\r\n})\r\n```\r\n\r\n## Side effects\r\n\r\n* The code size will increase. But they are almost types definitions.\r\n* Overload is often confusing to users. But, I think it is intuitive to pass `ResponseInit` in this case.\r\n* The implementation becomes more complex. There is no way around this :(\r\n\r\n---\r\n\r\nIt would be a good feature, except that the code would be complicated. In addition, I think it's not a bad idea to allow overloads since one of the big features of Hono is flexible to write code.\r\n\r\nIf you have any other good ideas, please let me know.",
        "html_url": "https://github.com/honojs/hono/pull/959",
        "comments": [
          "Hi @usualoma !\r\n\r\nWhat do you think about this PR? This reduces the complexity of handling `HTTPException`. The problem is, as I mentioned above, it will increase the code, but do you think it's worth it?",
          "I like this change a lot, makes sense to be able to modify responses like this to me.",
          "Hi @yusukebe,\r\n\r\nThis change makes sense.\r\nIt is good to be able to change Basic Auth errors with onError easily, and it is very nice to use the return value of fetch.\r\nThe implemented code is also easy to understand, so maintenance will not be a problem.",
          "Hi @ThatOneBro @usualoma \r\n\r\nThanks for the comments! I'm going to merge it!"
        ]
      },
      {
        "pr_number": 969,
        "title": "feat(validator): support type transformation",
        "body": "This PR provides supporting \"type transformation\" for the validator.\r\n\r\nFor example, Zod has a \"transform\" feature.\r\n\r\n```ts\r\nz.string()\r\n  .regex(/^[0-9]+$/)\r\n  .transform(Number)\r\n```\r\n\r\nThis means that the input type(`string`) and output type(`number`) are different. But, Hono does not support different input and output types. If we use \"transform\" in Zod Validator Middleware, the value from `c.req.valid()` will be \"input type\" not \"output type\":\r\n\r\n```ts\r\nconst app = new Hono().post(\r\n  '/foo',\r\n  zValidator(\r\n    'json',\r\n    z.object({\r\n      id: z\r\n        .string()\r\n        .regex(/^[0-9]+$/)\r\n        .transform(Number),\r\n    })\r\n  ),\r\n  (c) => {\r\n    c.req.valid('json').id // expected to be `number`\r\n```\r\n\r\n<img width=\"643\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/224057616-69bd5ef2-f8cd-4929-bc85-c2461482db9e.png\">\r\n\r\nThis is mentioned at #946 \r\n\r\nWith this PR, the validator treats input and output types as different, so it will suport Zod's transform.\r\n\r\n<img width=\"577\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/224058868-927497f1-3ed5-46b7-90b9-983f8926ae58.png\">\r\n\r\nWithout this feature, Validation using Zod and others would be very inconvenient to use. So, if there are no problems, would like to include it in the next minor version upgrade \"v3.1.0.\r\n\r\nThis will fix #946",
        "html_url": "https://github.com/honojs/hono/pull/969",
        "comments": [
          "Hi @yudai-nkt !\r\n\r\nLet me know your opinion for this feature. I think the RPC will be brushed up with the addition of this.",
          "I left a small comment and below is an overall one.\r\n\r\nWould it be possible to turn this into a `@hono/zod-validator` feature? As far as I read TypeBox's readme, it doesn't have such type transformation. So it may well be said that this PR is currently a Zod-specific feature. If we add features that are specific to a certain validation library into Hono's core, it will bloat the bundle size (most of the addition in this PR are only type-level though). If future contributors make other validation middlewares such as `@hono/ajv-validator` or `@hono/yup-validator`, it is more likely to happen such situations because each validation library has its own features.\r\n\r\nIn summary, I suppose `@hono/zod-validator` is a better place for this PR to live in and Hono should be kept minimal. I don't know about technical feasibility of implementing this feature in the middleware, so please let me know if it's difficult.",
          "Hi @yudai-nkt !\r\n\r\nThank you for your comment.\r\n\r\n> Would it be possible to turn this into a @hono/zod-validator feature?\r\n\r\nThis feature is not only for the Zod Validator, but for general purposes. I think we should implement it in the core. I used the word \"transform\" because it is a useful.\r\n\r\nFor example, if we want to validate a string input and receive it as a number type in the handler, we can do so without using Zod as follows.\r\n\r\n```ts\r\nconst validationFunction: ValidationFunction<{ id: string }, { id: number }> = (\r\n  v, c\r\n) => {\r\n  // Validate\r\n  if (!/^\\d+$/.test(v.id)) {\r\n    return c.text('Invalid!', 400)\r\n  }\r\n  return {\r\n    id: Number(v.id),\r\n  }\r\n}\r\n\r\nconst route = app.post('/post', validator('json', validationFunction), (c) => {\r\n  const { id } = c.req.valid('json') // `id` is number\r\n  return c.jsonT({\r\n    id \r\n  })\r\n})\r\n\r\nconst client = hc<typeof route>('/')\r\nclient.post.$post({\r\n  json: {\r\n    id: '123', // `id` have to be string\r\n  },\r\n})\r\n```\r\n\r\nThe input type and output type of `@hono/typebox-validator` are the same, so it does not need this feature. But users may write a custom validator with different input and output types using TypeBox (from a scratch).\r\n\r\nIt is natural for doing type conversions within the \"validation function\" and this PR is necessary to support it. Of course, it depends on the scope of the \"validation function\" role, but users may expect type conversions to be available in the \"validation function\".\r\n\r\n---\r\n\r\nI'll consider the naming of `Input[\"input\"]` and `Input[\"output\"]` later!\r\n\r\n",
          "Hi, thanks for your answer and it totally makes sense! TypeBox just doesn't have a _built-in_ type conversion but users can develop such validation based on TypeBox if they need as you say. They can even make their own validator, so this feature is general enough. Now I agree to this PR!",
          "Alright, I'll merge this!"
        ]
      },
      {
        "pr_number": 989,
        "title": "Merge next into main",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/989",
        "comments": []
      },
      {
        "pr_number": 989,
        "title": "Merge next into main",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/989",
        "comments": []
      },
      {
        "pr_number": 970,
        "title": "feat(middleware): support overwriting response after `next()`",
        "body": "This PR enables completely overwriting the response from middleware after `next()`. This matter is mentioned at #960 .\r\n\r\nWe can do it by putting `undefined`:\r\n\r\n```ts\r\napp.use('*', async (c, next) => {\r\n  await next()\r\n  c.res = undefined\r\n  c.res = new Response('New Response')\r\n})\r\n```\r\n\r\nGood PR, as this is done with very few codes.\r\n\r\nFix #960",
        "html_url": "https://github.com/honojs/hono/pull/970",
        "comments": []
      },
      {
        "pr_number": 976,
        "title": "refactor: remove lint warnings",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/976",
        "comments": []
      },
      {
        "pr_number": 977,
        "title": "test(bun): use `test` instead of `wiptest`!",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/977",
        "comments": []
      },
      {
        "pr_number": 971,
        "title": "fix(types): make `MergePath<'/api', '/'>` work well",
        "body": "This PR fixes the `MergePath` type definition.\r\n\r\nBefore this PR if you write the following:\r\n\r\n```ts\r\ntype path = MergePath<'/api', '/'>\r\n```\r\n\r\n`path` will be `/api/`. But this is not correct because the actual value with `mergePath()` is the different. The trailing slash is removed:\r\n\r\nhttps://github.com/honojs/hono/blob/fea78f29bd681350ce61dd71b33042aa6ec7db5c/src/utils/url.test.ts#L113\r\n\r\nSo, I've fixed it:\r\n\r\n```ts\r\ntype path = MergePath<'/api', '/'>\r\n// path will be /api\r\n```\r\n\r\nWhit this PR, the matters mentioned at #962 may be resolved.\r\n\r\n<img width=\"768\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/224492645-57cbb58f-a2f0-47ad-b051-f75071fb48aa.png\">\r\n\r\n",
        "html_url": "https://github.com/honojs/hono/pull/971",
        "comments": [
          "Hi @usualoma !\r\n\r\nI think this is a good fix. What do you think about it?",
          "I'll merge it now. If you have any suggestions, let me know at another place!"
        ]
      },
      {
        "pr_number": 978,
        "title": "fix(client): `removeIndexString` supports `/sub/index`",
        "body": "`removeIndexString`  was supporting only `/`, so if we have a case like below, it will request to `/foo/index`.\r\n\r\n```ts\r\nconst res = await client.foo.index.$get()\r\n```\r\nBut,  if the endpoint path is `/foo/`, of course, it will return Not Found.\r\n\r\nThis PR makes `removeIndexString` support `/sub/index` and will fix the issue.\r\n\r\nFix #962 ",
        "html_url": "https://github.com/honojs/hono/pull/978",
        "comments": []
      }
    ],
    "v3.0.5": [
      {
        "pr_number": 975,
        "title": "fix(route): support a root-level optional parameter",
        "body": "I've implemented a root-level optional parameter `/:optional?` which was not provided.\r\n\r\nThis will fix #974 ",
        "html_url": "https://github.com/honojs/hono/pull/975",
        "comments": []
      }
    ],
    "v3.0.4": [
      {
        "pr_number": 931,
        "title": "chore: update sponsor link",
        "body": "Add @usualoma to our funding list.",
        "html_url": "https://github.com/honojs/hono/pull/931",
        "comments": [
          "@usualoma \r\n\r\nIf you don't like it. Please tell me so \ud83d\udc4d ",
          "@yusukebe \r\nThank you. Of course, I don't disagree. I am curious if I can stand alongside @yusukebe as I only contribute in certain areas...\r\nAnyway, I am grateful to be here."
        ]
      },
      {
        "pr_number": 929,
        "title": "feat: Improve route()",
        "body": "### What is this PR?\r\n\r\nThis PR implements the following.\r\n* Reduce side-effects of `route()` calls on the parent app\r\n    * https://github.com/honojs/hono/compare/main...usualoma:hono:feat/basepath-2?expand=1#diff-8ac13809c9886e994d1db33943de82df4d6c5d88b73fd0270c0189804ff565c2R182\r\n* Support nested `route()` calls\r\n    * https://github.com/honojs/hono/compare/main...usualoma:hono:feat/basepath-2?expand=1#diff-8ac13809c9886e994d1db33943de82df4d6c5d88b73fd0270c0189804ff565c2R179-R180\r\n\r\n\r\n### What will this PR allow us to do\r\n\r\n`route()` can be used to specify the base path.\r\n\r\n```typescript\r\nconst hono = new Hono().route('/api')\r\nconst api = hono.get('/search', (c) => c.jsonT({ ok: true }))\r\ntype AppType = typeof api\r\n```\r\n\r\n<img width=\"703\" alt=\"image\" src=\"https://user-images.githubusercontent.com/30598/221352266-5749c14a-1061-4572-b610-8f305aa59b84.png\">\r\n\r\n\r\n### Why can't we specify our basePath in the constructor in this PR?\r\n\r\nI also wrote the following code to try to be able to specify it in the constructor, but I just could not get it to infer correctly.\r\nhttps://github.com/honojs/hono/compare/main...usualoma:hono:feat/basepath\r\n\r\n<img width=\"726\" alt=\"image\" src=\"https://user-images.githubusercontent.com/30598/221353328-5438f225-3fb1-4401-97b1-22cae612ace7.png\">\r\n\r\n\r\nI know that the following utility method can be prepared and used in place of `new Hono` in the same way as specifying it in the constructor.\r\n\r\n```typescript\r\nexport const hono = <E extends Env = Env, S = {}, BasePath extends string = ''>(\r\n  init: {\r\n    router?: Router<H>\r\n    strict?: boolean\r\n    basePath?: BasePath\r\n  } = {}\r\n) => {\r\n  return new Hono<E, S, BasePath>(init as any)\r\n}\r\n```\r\n\r\n<img width=\"377\" alt=\"image\" src=\"https://user-images.githubusercontent.com/30598/221353136-ad4a43f4-69da-465b-8e07-8a5cfc7dc0a6.png\">\r\n\r\nHowever, I see no need for such a utility method, as it is short enough to be written as follows\r\n\r\n```typescript\r\nconst hono = new Hono().route('/api')\r\n```",
        "html_url": "https://github.com/honojs/hono/pull/929",
        "comments": [
          "Hi @usualoma !\r\n\r\nThis is great! I also don't want to create a utility method like `hono()`. Looks good to me because using the existing `route()` method, two improvements have been made, and the types have been kept.\r\n\r\n@yudai-nkt @ThatOneBro and others\r\nWhat do you think about it? \r\n",
          "Hi @yusukebe,\r\nThanks for the review.\r\nI added two small refactoring commits and then denoify.",
          "Ah, these have been cleaned up by refactoring. Good.",
          "Looks good! Great work @usualoma , this is some pretty crazy Typescript magic you added",
          "I'd say, this is exciting and I'd like to see it in, but I'm very curious to see if it can be cleaned up, `basePath` seems much more intuitive ",
          "Hi @boehs,\r\n\r\nI get that \"basePath is more intuitive.\"\r\nBut when we allow it to be specified in our constructor, the type is inevitably not well inferred.\r\n\r\nIn this PR, we only improve the behavior of route() without changing hono's API. And with the improved behavior of route(), route() can be used in the same way as specifying basePath.\r\n\r\nIn the future, if we find a better way to specify it in the constructor, we can rewrite it that way.\r\n\r\nEven leaving the constructor discussion aside, I think this PR is a useful change, so I think it is a good idea to merge it first.\r\n\r\n\r\n### Other Ideas\r\n\r\nIf route() is not intuitive, it might be possible to create an alias to route().\r\n\r\n```typescript\r\nconst hono = new Hono().basePath('/api')\r\n```\r\n\r\nor\r\n\r\n```typescript\r\nconst hono = new Hono().under('/api')\r\n```\r\n\r\nBut, well, I guess I don't need it.",
          "Hi @boehs @usualoma !\r\n\r\nI also hope to use `basePath` in the constructor, but it's impossible now, as @usualoma said (perhaps we can do it if we master TypeScript more and more). And we don't need an alias method for `route()`.\r\n\r\nThis PR is a very good PR that improves `route()`. I'll merge this."
        ]
      },
      {
        "pr_number": 936,
        "title": "fix: add missing `MergePath`",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/936",
        "comments": ["Thanks!"]
      },
      {
        "pr_number": 933,
        "title": "fix: let the app.request behave the same as fetch",
        "body": "This pr is to extend `app.request` usage range.\r\n\r\nWe test app by fetching directly via `app.request` without a setup of an app server, but the request parameters can only accept string or request, while fetch's can accept string, request or URL for the first parameter.\r\n\r\nMoreover, when the input is request, then the second paramter `RequestInit` dose not worked as fetch dose.",
        "html_url": "https://github.com/honojs/hono/pull/933",
        "comments": [
          "Hi @tangye1234 !\r\n\r\nThanks! This is a good fix. I want to merge. So, for the last step. could you do `yarn denoify`, `git add` the generated file,  and commit&push it? It will be needed for Deno.",
          "> Hi @tangye1234 !\r\n> \r\n> Thanks! This is a good fix. I want to merge. So, for the last step. could you do `yarn denoify`, `git add` the generated file, and commit&push it? It will be needed for Deno.\r\n\r\nThanks for your advice. I have already pushed new generated deno source files.",
          "Okay! I'll merge it. Thank you!"
        ]
      },
      {
        "pr_number": 939,
        "title": "feat(`jsonT`): check JSON type",
        "body": "`jsonT()` returns a JSON object composed of primitive types. For example, a `Date` object is converted to a string. But currently, `jsonT()` allows the `Date` type.\r\n\r\n```ts\r\napp.get('/hello', (c) => {\r\n  return c.jsonT({\r\n    messge: 'Hello',\r\n    datetime: new Date(), // does not show the error\r\n  })\r\n})\r\n```\r\n\r\nAnd the Client will get the `Date` type even though the actual value is a string.\r\n\r\n<img width=\"303\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/221574375-f761fc98-107e-4fa6-97aa-a170bacf678a.png\">\r\n\r\nAllowing the types of objects other than primitives to be loose can be confusing.\r\n\r\nIn this PR, I've made it provides a JSON type and limits the object that `jsonT()` would receive, and if they are not JSON type, it throws an error.\r\n\r\n<img width=\"319\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/221573552-d14d61e8-4f9c-4e68-99d6-9a1c3a055446.png\">\r\n\r\nOn the client side, the return type of `res.json()` is `never`.\r\n\r\n<img width=\"318\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/221573584-8e185c12-12fb-4045-bf28-f0549a37155a.png\">\r\n\r\nThis feature was inspired by the following article.\r\n\r\n<https://zenn.dev/kosei28/articles/f4bac1ed2b64a7#date%E5%9E%8B%E3%81%AF%E6%96%87%E5%AD%97%E5%88%97%E3%81%AB%E3%81%AA%E3%82%8B>\r\n\r\nBy restricting the types that `jsonT()` accepts to JSON types composed of primitives, we can make it more type-safe.",
        "html_url": "https://github.com/honojs/hono/pull/939",
        "comments": [
          "Hi @usualoma @yudai-nkt !\r\n\r\nWhat do you think about this feature? Could you look at it with PR #937?",
          "I think this change is reasonable.",
          "The motivation behind this PR sounds great and I left two small comments. Please check them when you have time.",
          "I'll merge it now!"
        ]
      },
      {
        "pr_number": 937,
        "title": "fix(client): show type error if `$get()` needs args",
        "body": "Made it throws the type error if `client.path.$method()` needs arguments:\r\n\r\n<img width=\"592\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/221541313-13858e40-4df4-4f67-a54d-fad448aea020.png\">\r\n\r\nThis fix will make the Client more type-safety.",
        "html_url": "https://github.com/honojs/hono/pull/937",
        "comments": [
          "This is what I found inconvenient but I haven't filed an issue yet, thanks! I'll check later.",
          "Hi @yudai-nkt !\r\n\r\nHave you done check it? I want to merge it.",
          "I'm afraid I won't have enough time to check this on my local machine anytime soon, but basically LGTM!",
          "Okay, I'll merge it!"
        ]
      },
      {
        "pr_number": 943,
        "title": "fix(pages/nextjs): don't use `route()` if path is not passed",
        "body": "If we use `handle` in the Cloudflare Pages adapter with no second argument:\r\n\r\n```ts\r\nexport const onRequest = handle(app)\r\n```\r\n\r\nWith the current implementation,  `app` will be passed to `route()`\r\n\r\nhttps://github.com/honojs/hono/blob/b1c50597088c2e4e1d3666f53f3f9de171cbd506/src/adapter/cloudflare-pages/handler.ts#L17-L22\r\n\r\nIf we do so, the error thrown from `app` can't be re-thrown:\r\n\r\n```ts\r\nconst app = new Hono().route('/api')\r\n\r\napp.get('/hello', (c) => {\r\n  throw new Error('Capture this error in Sentry!')\r\n})\r\n\r\napp.onError((e) => {\r\n  throw e // <--- This will not be a real \"error\", will return 500 response.\r\n})\r\n\r\nexport const onRequest = handle(app)\r\n```\r\n\r\nThis PR fixes this issue.\r\n\r\nThis will resolve #938",
        "html_url": "https://github.com/honojs/hono/pull/943",
        "comments": [
          "This is a good fix, and there are no side effects. Merge it."
        ]
      },
      {
        "pr_number": 956,
        "title": "docs(readme): add creator name of RegExpRouter and SmartRouter",
        "body": "I have wanted to write this for a while; this is important.\r\n\r\nOne of the features of Hono is the RegExpRouter, but I must not take credit for that.",
        "html_url": "https://github.com/honojs/hono/pull/956",
        "comments": [
          "@usualoma I'll merge this, if that's okay:)",
          "Thank you!"
        ]
      },
      {
        "pr_number": 973,
        "title": "fix(etag): returns correct headers",
        "body": "In this PR, I've made the Etag Middleware returns the `Etag` header if the response is `304`.\r\n\r\nThis will fix #972 ",
        "html_url": "https://github.com/honojs/hono/pull/973",
        "comments": ["@navtoj \r\n\r\nThank you very much!"]
      }
    ],
    "v3.0.2": [
      {
        "pr_number": 920,
        "title": "Custom fetch method for Hono Client options",
        "body": "As described in my issue https://github.com/honojs/hono/issues/917 it would be great to be able to pass a custom fetch method to Hono Client to be able to call Service Bindings through Hono Client.\r\n\r\nI have just added an optional `fetch` method to the `RequestOptions` so that the `fetch` method of a Service Binding can be used instead of the default `fetch` API when it's set in the options.\r\n\r\nSee this example on how it would be used:\r\n```\r\nservices = [\r\n  { binding = \"AUTH\", service = \"auth-service\" },\r\n]\r\n```\r\n```typescript\r\nconst client = hc<CreateProfileType>('/', { fetch: c.env. AUTH.fetch });\r\n...\r\n// use client normally\r\n```",
        "html_url": "https://github.com/honojs/hono/pull/920",
        "comments": [
          "Hi @JonasHiltl !\r\n\r\nGreat work! Now I fully understand what you want to do.\r\n\r\nI'd like to accept this PR, but there is one request. Could you do `yarn denoify` and `git add` the generated file & git commit & push? The file is needed for the Deno. Thanks.",
          "@yusukebe Done!",
          "Thanks. I'll merge it!",
          "This is a really great feature, but I'm currently running into a type error passing the service binding `fetch` function into `ClientRequestOptions`\r\n\r\nHere's a stripped down example of what I'm doing:\r\n\r\n``` ts\r\n// We can assume here that `env` is available as type `Env`\r\n\r\nimport type { Service } from '@cloudflare/workers-types'\r\n\r\ninterface Env {\r\n  API: Service\r\n}\r\n\r\nhc('/', {\r\n  fetch: env.API.fetch.bind(env.API), // Typescript complains that fetch is incompatible, see the error below\r\n})\r\n\r\n\r\n```\r\n\r\n\r\nHere is the type error:\r\n\r\n``` ts\r\nType '{ (input: URL | RequestInfo, init?: RequestInit<CfProperties<unknown>> | undefined): Promise<Response>; (input: RequestInfo, init?: RequestInit<...> | undefined): Promise<...>; (input: string | ... 1 more ... | URL, init?: RequestInit<...> | undefined): Promise<...>; } | ((input: RequestInfo<...>, init?: RequestInit...' is not assignable to type '{ (input: URL | RequestInfo, init?: RequestInit<CfProperties<unknown>> | undefined): Promise<Response>; (input: RequestInfo, init?: RequestInit<...> | undefined): Promise<...>; (input: string | ... 1 more ... | URL, init?: RequestInit<...> | undefined): Promise<...>; } | ((input: URL | RequestInfo, requestInit?: Req...'.\r\n  Type '(input: RequestInfo<unknown, CfProperties<unknown>>, init?: RequestInit<CfProperties<unknown>> | undefined) => Promise<Response>' is not assignable to type '{ (input: URL | RequestInfo, init?: RequestInit<CfProperties<unknown>> | undefined): Promise<Response>; (input: RequestInfo, init?: RequestInit<...> | undefined): Promise<...>; (input: string | ... 1 more ... | URL, init?: RequestInit<...> | undefined): Promise<...>; } | ((input: URL | RequestInfo, requestInit?: Req...'.\r\n    Type '(input: RequestInfo<unknown, CfProperties<unknown>>, init?: RequestInit<CfProperties<unknown>> | undefined) => Promise<Response>' is not assignable to type '{ (input: URL | RequestInfo, init?: RequestInit<CfProperties<unknown>> | undefined): Promise<Response>; (input: RequestInfo, init?: RequestInit<...> | undefined): Promise<...>; (input: string | ... 1 more ... | URL, init?: RequestInit<...> | undefined): Promise<...>; }'.\r\n      Types of parameters 'input' and 'input' are incompatible.\r\n        Type 'URL | RequestInfo' is not assignable to type 'RequestInfo<unknown, CfProperties<unknown>>'.\r\n          Type 'Request' is not assignable to type 'RequestInfo<unknown, CfProperties<unknown>>'.\r\n            Property 'fetcher' is missing in type 'Request' but required in type 'Request<unknown, CfProperties<unknown>>'.ts(2322)\r\nindex.ts(1418, 12): 'fetcher' is declared here.\r\n```\r\n\r\n@JonasHiltl Are you still using a custom fetch function and is it working for you?\r\n\r\n@yusukebe Should I be importing something else in place of the `Service` type?",
          "Hi @ronkeiser \r\n\r\nThis is caused by a type mismatch. The Request object referred to differs between Hono's and `@cloudflare/workers-types`. I think resolving this is complex or impossible. The best workaround is ignoring the type check.",
          "@yusukebe Sounds good. Thank you for your responsiveness and your work on this wonderful project!"
        ]
      },
      {
        "pr_number": 921,
        "title": "feat: allow pathname argument",
        "body": "In order to avoid having to write the full URL every time when writing tests, \r\nwe implemented a feature to implicitly format the URL and generate the request object when the pathname argument is entered.",
        "html_url": "https://github.com/honojs/hono/pull/921",
        "comments": [
          "Hi @hagishi !\r\n\r\nThis is a good feature. Indeed, it is trouble to write `http:/localhost` every time. And since `app.request()` is designed for testing purposes, it's fine to use `http://localhost` when it's just a pathname. But there are two things to consider.\r\n\r\n\r\nFirst, there is a problem if there is no `/` at the beginning.\r\n\r\n```ts\r\nconst res = await app.request('foo')\r\n```\r\n\r\nThis will request to `http://localhostfoo/`. It may be unexpected in many cases. So I think it would be a good idea to use `mergePath` to add the `/` if it is not at the beginning.\r\n\r\n```ts\r\nconst newPath = mergePath('/', input)\r\nconst req = new Request(`http://localhost${newPath}`, requestInit)\r\n```\r\n\r\nThen, this will cause `app.request('foo')` to access `http://localhost/foo`.\r\n\r\nSecond, this place should be more limited.\r\n\r\n```ts\r\n/^http/.test(input)\r\n```\r\n\r\nSuch as \r\n\r\n```ts\r\n/^https?:\\/\\//.test(input)\r\n```\r\n\r\nThis is because users may use the path `httpfoo`.\r\n\r\nWhat do you think about these?",
          "Hi @yusukebe \r\n\r\nThank you for your response!!\r\n\r\n1. I agree to add a leading slash using mergePath if it's missing from the path.\r\n2. I also agree as I didn't anticipate that the path could include \"http\" in the pathname. \ud83d\udc4d ",
          "@hagishi \r\n\r\nThanks. This feature will make it easier to write tests. I'll merge it!"
        ]
      },
      {
        "pr_number": 919,
        "title": "fix(types): `app.route` with multiple endpoints returns types correctly",
        "body": "As pointed out in #915, the type was incorrectly inferred when mounting an app with multiple `jsonT()` endpoints using `app.route()`.\r\n\r\n<img width=\"457\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/220639134-6d99d497-d9ab-4842-ac1c-f34d6bc1cf02.png\">\r\n\r\nThis PR will fix #915",
        "html_url": "https://github.com/honojs/hono/pull/919",
        "comments": []
      },
      {
        "pr_number": 918,
        "title": "Expose HonoRequest Type",
        "body": "Congrats on the v3, launch. Really liking Hono as a clean and fast framework. \r\n\r\nIn my apps, I sometimes build utility functions that are used by multiple handlers and they interact with the Request. Since the request has changed to `HonoRequest`, I think it is valuable to also expose its type, so ppl can write functions and define `HonoRequest` as a parameter.",
        "html_url": "https://github.com/honojs/hono/pull/918",
        "comments": [
          "Hi @KeKs0r !\r\n\r\nYou are right. The type of `HonoRequest` should be exposed.\r\n\r\nWe'd accept this PR, but there is one request. Edit `src/mod.ts` and export `HonoRequest` like `src/index.ts`. This file is used by Deno.",
          "@KeKs0r \r\n\r\nI'll do the matter of Deno after merging this PR. Thanks!"
        ]
      },
      {
        "pr_number": 925,
        "title": "refactor(util): remove using `Buffer` from `encode.ts`",
        "body": "We don't need it anymore. Fix #924",
        "html_url": "https://github.com/honojs/hono/pull/925",
        "comments": []
      },
      {
        "pr_number": 926,
        "title": "fix(validator): clone Request object if `json` or `form`",
        "body": "It throws the error if we do `c.req.json()` or `c.req.parseBody()` after validating `json` or `form` with `hono/validator`, \r\n\r\n```ts\r\nconst app = new Hono()\r\napp.post(\r\n  '/',\r\n  validator('json', () => {\r\n    return {\r\n      foo: 'bar',\r\n    }\r\n  }),\r\n  async (c) => {\r\n    await c.req.json() // throw error!\r\n    return c.text('foo')\r\n  }\r\n)\r\n```\r\n\r\nThis bug is caused by the Request object being used though the body has been used. So, we should clone it before validation.\r\n\r\nFix #818",
        "html_url": "https://github.com/honojs/hono/pull/926",
        "comments": []
      },
      {
        "pr_number": 927,
        "title": "feat(deno): export `HonoRequest` type in Deno",
        "body": "Remaining tasks for #918.",
        "html_url": "https://github.com/honojs/hono/pull/927",
        "comments": []
      }
    ],
    "v3.0.1": [
      {
        "pr_number": 908,
        "title": "feat(client): Inject common headers",
        "body": "Enabled passing the commonly used site header as an argument during HonoClient instance generation.",
        "html_url": "https://github.com/honojs/hono/pull/908",
        "comments": [
          "Hi @hagishi !\r\n\r\nThanks. This is a good feature. I'd like to accept and merge it.\r\n\r\nOne thing. How about making the second argument \"RequestOptions\" (I think it's better to rename `RequestOption` to `RequestOptions`) ?\r\n\r\n```ts\r\n// RequestOption is renamed to `RequestOptions`\r\nhc = <T extends Hono>(baseUrl: string, options?: RequestOptions)\r\n```\r\n\r\nThen, we can pass the args.\r\n\r\n```ts\r\nconst client = hc<AppType>('http://localhost', {\r\n  headers: {\r\n    'x-hono': 'hono',\r\n  },\r\n})\r\n```\r\n\r\nThis would make it easier to handle if there are more options.",
          "Hi @yusukebe \r\nWe made changes to allow accepting RequestOptions as an argument.\r\n\r\n",
          "@hagishi \r\n\r\nGreat work! Implementing `deepMerge` is also good.\r\n\r\nFinally, could you run `yarn denoify` and commit & push the emitted file? It's needed for Deno.",
          "Thanks! I'll merge it!"
        ]
      },
      {
        "pr_number": 909,
        "title": "feat(types): keep schema info with `app.route()`",
        "body": "This PR will fix the matter of #907 .\r\n\r\nWhen using `app.route()`, the schema information is missing but made it so that it is kept.\r\n\r\n<img width=\"753\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/219934403-edb429ca-3d99-440f-b49e-d66223133145.png\">\r\n",
        "html_url": "https://github.com/honojs/hono/pull/909",
        "comments": [
          "Thanks! I checked this PR locally and confirmed it works as expected (with multiple `route`s)!\r\n\r\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2023-02-19 22 08 51](https://user-images.githubusercontent.com/13291527/219950067-0890087e-c0ea-4a1e-9a5f-02e824f4c66a.png)\r\n\r\n"
        ]
      }
    ],
    "v3.0.0": [
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 829,
        "title": "perf: use `substring` and `//.test` ...",
        "body": "This PR makes Hono faster with small improvements.\r\n\r\nNote:\r\n\r\n* `substring` is faster than `slice`\r\n* `indexOf ...` if faster than `//.test`",
        "html_url": "https://github.com/honojs/hono/pull/829",
        "comments": [
          "Buns' tests failed may be because of Bun self. I'll merge."
        ]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 830,
        "title": "fix(bun): fixed throwing the error in `HTTPException`",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/830",
        "comments": []
      },
      {
        "pr_number": 831,
        "title": "feat(validator): support multiple handlers w/ complex patterns.",
        "body": "This PR enable we can register multiple validator/handlers with complex patterns.\r\n\r\nSee: <https://github.com/honojs/hono/issues/823>\r\n\r\nThanks to everyone, it comes true. We can write like this:\r\n\r\n<img width=\"974\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/213915299-df0ea5c5-cfec-43a0-a600-7c0a3f74e43b.png\">\r\n\r\nNote:\r\n\r\n* We can't register over ten handlers with validators. Have to write it down in the document when releasing the \"v3\".\r\n* There may be some things to fix, but I'll merge them in, to be fixed later.\r\n",
        "html_url": "https://github.com/honojs/hono/pull/831",
        "comments": []
      },
      {
        "pr_number": 832,
        "title": "feat(req): support `c.req.valid('query')`",
        "body": "In this PR, we can specify which type of data we want to get by `c.req.valid()` such as `c.req.valid('query')`.\r\n\r\n```ts\r\napi.get(\r\n  '/',\r\n  zValidator(\r\n    'query',\r\n    z.object({\r\n      page: z.number(),\r\n    })\r\n  ),\r\n  (c) => {\r\n    const { page } = c.req.valid('query')\r\n    return c.text(`Current page is ${page}`)\r\n  }\r\n)\r\n```\r\n\r\n<img width=\"593\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/213920690-0982dfd5-37c8-48dd-b569-f4a890bce295.png\">\r\n\r\nWe can call `c.req.valid()` with no arguments as always to get all the data.",
        "html_url": "https://github.com/honojs/hono/pull/832",
        "comments": []
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 837,
        "title": "fix(cloudflare-pages): fix type incompatibility",
        "body": "This will fix #833 ",
        "html_url": "https://github.com/honojs/hono/pull/837",
        "comments": [
          "Thanks for the fix, it works with both newer compatibility date and old one! I'm not sure if it's the best idea to define `EventContext` on Hono's side rather than to `import` it from `@cloudflare/workers-types`, but we can revisit this if another problem occurs in the future. Let's go this way for the time being.",
          "FWIW, the oldest compatibility date that causes the error is 2022-01-31, but I haven't yet figured out which part of the change is the reason.\r\n\r\n<details>\r\n    <summary>See the diff</summary>\r\n\r\n```diff\r\n===================================================================\r\n--- 2021-11-03\r\n+++ 2022-01-31\r\n@@ -449,31 +449,21 @@\r\n   blobs?: ((ArrayBuffer | string) | null)[];\r\n }\r\n declare class Event {\r\n   constructor(type: string, init?: EventInit);\r\n-  /** Returns the type of event, e.g. \"click\", \"hashchange\", or \"submit\". */\r\n-  readonly type: string;\r\n-  /** Returns the event's phase, which is one of NONE, CAPTURING_PHASE, AT_TARGET, and BUBBLING_PHASE. */\r\n-  readonly eventPhase: number;\r\n-  /** Returns true or false depending on how event was initialized. True if event invokes listeners past a ShadowRoot node that is the root of its target, and false otherwise. */\r\n-  readonly composed: boolean;\r\n-  /** Returns true or false depending on how event was initialized. True if event goes through its target's ancestors in reverse tree order, and false otherwise. */\r\n-  readonly bubbles: boolean;\r\n-  /** Returns true or false depending on how event was initialized. Its return value does not always carry meaning, but true can indicate that part of the operation during which event was dispatched, can be canceled by invoking the preventDefault() method. */\r\n-  readonly cancelable: boolean;\r\n-  /** Returns true if preventDefault() was invoked successfully to indicate cancelation, and false otherwise. */\r\n-  readonly defaultPrevented: boolean;\r\n-  /** @deprecated */\r\n-  readonly returnValue: boolean;\r\n-  /** Returns the object whose event listener's callback is currently being invoked. */\r\n-  readonly currentTarget?: EventTarget;\r\n-  /** @deprecated */\r\n-  readonly srcElement?: EventTarget;\r\n-  /** Returns the event's timestamp as the number of milliseconds measured relative to the time origin. */\r\n-  readonly timeStamp: number;\r\n-  /** Returns true if event was dispatched by the user agent, and false otherwise. */\r\n-  readonly isTrusted: boolean;\r\n-  cancelBubble: boolean;\r\n+  get type(): string;\r\n+  get eventPhase(): number;\r\n+  get composed(): boolean;\r\n+  get bubbles(): boolean;\r\n+  get cancelable(): boolean;\r\n+  get defaultPrevented(): boolean;\r\n+  get returnValue(): boolean;\r\n+  get currentTarget(): EventTarget | undefined;\r\n+  get srcElement(): EventTarget | undefined;\r\n+  get timeStamp(): number;\r\n+  get isTrusted(): boolean;\r\n+  get cancelBubble(): boolean;\r\n+  set cancelBubble(value: boolean);\r\n   stopImmediatePropagation(): void;\r\n   preventDefault(): void;\r\n   stopPropagation(): void;\r\n   composedPath(): EventTarget[];\r\n@@ -525,18 +515,16 @@\r\n   handleEvent: (event: Event) => any | undefined;\r\n }\r\n declare class AbortController {\r\n   constructor();\r\n-  /** Returns the AbortSignal object associated with this object. */\r\n-  readonly signal: AbortSignal;\r\n+  get signal(): AbortSignal;\r\n   abort(reason?: any): void;\r\n }\r\n declare abstract class AbortSignal extends EventTarget {\r\n   static abort(reason?: any): AbortSignal;\r\n   static timeout(delay: number): AbortSignal;\r\n-  /** Returns true if this AbortSignal's AbortController has signaled to abort, and false otherwise. */\r\n-  readonly aborted: boolean;\r\n-  readonly reason: any;\r\n+  get aborted(): boolean;\r\n+  get reason(): any;\r\n   throwIfAborted(): void;\r\n }\r\n declare interface Scheduler {\r\n   wait(delay: number, maybeOptions?: SchedulerWaitOptions): Promise<void>;\r\n@@ -551,10 +539,10 @@\r\n   constructor(\r\n     bits?: ((ArrayBuffer | ArrayBufferView) | string | Blob)[],\r\n     options?: BlobOptions\r\n   );\r\n-  readonly size: number;\r\n-  readonly type: string;\r\n+  get size(): number;\r\n+  get type(): string;\r\n   slice(start?: number, end?: number, type?: string): Blob;\r\n   arrayBuffer(): Promise<ArrayBuffer>;\r\n   text(): Promise<string>;\r\n   stream(): ReadableStream;\r\n@@ -567,10 +555,10 @@\r\n     bits: ((ArrayBuffer | ArrayBufferView) | string | Blob)[] | undefined,\r\n     name: string,\r\n     options?: FileOptions\r\n   );\r\n-  readonly name: string;\r\n-  readonly lastModified: number;\r\n+  get name(): string;\r\n+  get lastModified(): number;\r\n }\r\n declare interface FileOptions {\r\n   type?: string;\r\n   lastModified?: number;\r\n@@ -590,10 +578,9 @@\r\n declare interface CacheQueryOptions {\r\n   ignoreMethod?: boolean;\r\n }\r\n declare abstract class Crypto {\r\n-  /** Available only in secure contexts. */\r\n-  readonly subtle: SubtleCrypto;\r\n+  get subtle(): SubtleCrypto;\r\n   getRandomValues<\r\n     T extends\r\n       | Int8Array\r\n       | Uint8Array\r\n@@ -791,25 +778,25 @@\r\n declare class DigestStream extends WritableStream<\r\n   ArrayBuffer | ArrayBufferView\r\n > {\r\n   constructor(algorithm: string | SubtleCryptoHashAlgorithm);\r\n-  readonly digest: Promise<ArrayBuffer>;\r\n+  get digest(): Promise<ArrayBuffer>;\r\n }\r\n declare class TextDecoder {\r\n   constructor(decoder?: string, options?: TextDecoderConstructorOptions);\r\n   decode(\r\n     input?: ArrayBuffer | ArrayBufferView,\r\n     options?: TextDecoderDecodeOptions\r\n   ): string;\r\n-  readonly encoding: string;\r\n-  readonly fatal: boolean;\r\n-  readonly ignoreBOM: boolean;\r\n+  get encoding(): string;\r\n+  get fatal(): boolean;\r\n+  get ignoreBOM(): boolean;\r\n }\r\n declare class TextEncoder {\r\n   constructor();\r\n   encode(input?: string): Uint8Array;\r\n   encodeInto(input: string, buffer: Uint8Array): TextEncoderEncodeIntoResult;\r\n-  readonly encoding: string;\r\n+  get encoding(): string;\r\n }\r\n declare interface TextDecoderConstructorOptions {\r\n   fatal: boolean;\r\n   ignoreBOM: boolean;\r\n@@ -952,10 +939,10 @@\r\n   | Blob\r\n   | URLSearchParams\r\n   | FormData;\r\n declare abstract class Body {\r\n-  readonly body: ReadableStream | null;\r\n-  readonly bodyUsed: boolean;\r\n+  get body(): ReadableStream | null;\r\n+  get bodyUsed(): boolean;\r\n   arrayBuffer(): Promise<ArrayBuffer>;\r\n   text(): Promise<string>;\r\n   json<T>(): Promise<T>;\r\n   formData(): Promise<FormData>;\r\n@@ -965,16 +952,16 @@\r\n   constructor(body?: BodyInit | null, init?: ResponseInit);\r\n   static redirect(url: string, status?: number): Response;\r\n   static json(any: any, maybeInit?: ResponseInit | Response): Response;\r\n   clone(): Response;\r\n-  readonly status: number;\r\n-  readonly statusText: string;\r\n-  readonly headers: Headers;\r\n-  readonly ok: boolean;\r\n-  readonly redirected: boolean;\r\n-  readonly url: string;\r\n-  readonly webSocket: WebSocket | null;\r\n-  readonly cf?: any;\r\n+  get status(): number;\r\n+  get statusText(): string;\r\n+  get headers(): Headers;\r\n+  get ok(): boolean;\r\n+  get redirected(): boolean;\r\n+  get url(): string;\r\n+  get webSocket(): WebSocket | null;\r\n+  get cf(): any | undefined;\r\n }\r\n declare interface ResponseInit {\r\n   status?: number;\r\n   statusText?: string;\r\n@@ -986,20 +973,15 @@\r\n declare type RequestInfo = Request | string | URL;\r\n declare class Request<CfHostMetadata = unknown> extends Body {\r\n   constructor(input: RequestInfo, init?: RequestInit);\r\n   clone(): Request<CfHostMetadata>;\r\n-  /** Returns request's HTTP method, which is \"GET\" by default. */\r\n-  readonly method: string;\r\n-  /** Returns the URL of request as a string. */\r\n-  readonly url: string;\r\n-  /** Returns a Headers object consisting of the headers associated with request. Note that headers added in the network layer by the user agent will not be accounted for in this object, e.g., the \"Host\" header. */\r\n-  readonly headers: Headers;\r\n-  /** Returns the redirect mode associated with request, which is a string indicating how redirects for the request will be handled during fetching. A request will follow redirects by default. */\r\n-  readonly redirect: string;\r\n-  readonly fetcher: Fetcher | null;\r\n-  /** Returns the signal associated with request, which is an AbortSignal object indicating whether or not request has been aborted, and its abort event handler. */\r\n-  readonly signal: AbortSignal;\r\n-  readonly cf?: IncomingRequestCfProperties<CfHostMetadata>;\r\n+  get method(): string;\r\n+  get url(): string;\r\n+  get headers(): Headers;\r\n+  get redirect(): string;\r\n+  get fetcher(): Fetcher | null;\r\n+  get signal(): AbortSignal;\r\n+  get cf(): IncomingRequestCfProperties<CfHostMetadata> | undefined;\r\n }\r\n declare interface RequestInit<\r\n   CfType = IncomingRequestCfProperties | RequestInitCfProperties\r\n > {\r\n@@ -1365,9 +1347,9 @@\r\n       value?: undefined;\r\n     };\r\n /** This Streams API interface represents a readable stream of byte data. The Fetch API offers a concrete instance of a ReadableStream through the body property of a Response object. */\r\n declare interface ReadableStream<R = any> {\r\n-  readonly locked: boolean;\r\n+  get locked(): boolean;\r\n   cancel(reason?: any): Promise<void>;\r\n   getReader(): ReadableStreamDefaultReader<R>;\r\n   getReader(options: ReadableStreamGetReaderOptions): ReadableStreamBYOBReader;\r\n   pipeThrough<T>(\r\n@@ -1396,16 +1378,16 @@\r\n   ): ReadableStream<R>;\r\n };\r\n declare class ReadableStreamDefaultReader<R = any> {\r\n   constructor(stream: ReadableStream);\r\n-  readonly closed: Promise<void>;\r\n+  get closed(): Promise<void>;\r\n   cancel(reason?: any): Promise<void>;\r\n   read(): Promise<ReadableStreamReadResult<R>>;\r\n   releaseLock(): void;\r\n }\r\n declare class ReadableStreamBYOBReader {\r\n   constructor(stream: ReadableStream);\r\n-  readonly closed: Promise<void>;\r\n+  get closed(): Promise<void>;\r\n   cancel(reason?: any): Promise<void>;\r\n   read<T extends ArrayBufferView>(\r\n     view: T\r\n   ): Promise<ReadableStreamReadResult<T>>;\r\n@@ -1461,18 +1443,18 @@\r\n   constructor(\r\n     underlyingSink?: UnderlyingSink,\r\n     queuingStrategy?: QueuingStrategy\r\n   );\r\n-  readonly locked: boolean;\r\n+  get locked(): boolean;\r\n   abort(reason?: any): Promise<void>;\r\n   close(): Promise<void>;\r\n   getWriter(): WritableStreamDefaultWriter<W>;\r\n }\r\n declare class WritableStreamDefaultWriter<W = any> {\r\n   constructor(stream: WritableStream);\r\n-  readonly closed: Promise<void>;\r\n-  readonly ready: Promise<void>;\r\n-  readonly desiredSize: number | null;\r\n+  get closed(): Promise<void>;\r\n+  get ready(): Promise<void>;\r\n+  get desiredSize(): number | null;\r\n   abort(reason?: any): Promise<void>;\r\n   close(): Promise<void>;\r\n   write(chunk?: W): Promise<void>;\r\n   releaseLock(): void;\r\n@@ -1482,10 +1464,10 @@\r\n     transformer?: Transformer<I, O>,\r\n     writableStrategy?: QueuingStrategy<I>,\r\n     readableStrategy?: QueuingStrategy<O>\r\n   );\r\n-  readonly readable: ReadableStream<O>;\r\n-  readonly writable: WritableStream<I>;\r\n+  get readable(): ReadableStream<O>;\r\n+  get writable(): WritableStream<I>;\r\n }\r\n declare class FixedLengthStream extends IdentityTransformStream {\r\n   constructor(expectedLength: number | bigint);\r\n }\r\n@@ -1601,20 +1583,30 @@\r\n   fromTrace(item: TraceItem): TraceMetrics;\r\n }\r\n declare class URL {\r\n   constructor(url: string | URL, base?: string | URL);\r\n-  href: string;\r\n-  readonly origin: string;\r\n-  protocol: string;\r\n-  username: string;\r\n-  password: string;\r\n-  host: string;\r\n-  hostname: string;\r\n-  port: string;\r\n-  pathname: string;\r\n-  search: string;\r\n-  readonly searchParams: URLSearchParams;\r\n-  hash: string;\r\n+  get href(): string;\r\n+  set href(value: string);\r\n+  get origin(): string;\r\n+  get protocol(): string;\r\n+  set protocol(value: string);\r\n+  get username(): string;\r\n+  set username(value: string);\r\n+  get password(): string;\r\n+  set password(value: string);\r\n+  get host(): string;\r\n+  set host(value: string);\r\n+  get hostname(): string;\r\n+  set hostname(value: string);\r\n+  get port(): string;\r\n+  set port(value: string);\r\n+  get pathname(): string;\r\n+  set pathname(value: string);\r\n+  get search(): string;\r\n+  set search(value: string);\r\n+  get searchParams(): URLSearchParams;\r\n+  get hash(): string;\r\n+  set hash(value: string);\r\n   toString(): string;\r\n   toJSON(): string;\r\n }\r\n declare class URLSearchParams {\r\n@@ -1732,16 +1724,12 @@\r\n   static readonly READY_STATE_CONNECTING: number;\r\n   static readonly READY_STATE_OPEN: number;\r\n   static readonly READY_STATE_CLOSING: number;\r\n   static readonly READY_STATE_CLOSED: number;\r\n-  /** Returns the state of the WebSocket object's connection. It can have the values described below. */\r\n-  readonly readyState: number;\r\n-  /** Returns the URL that was used to establish the WebSocket connection. */\r\n-  readonly url: string | null;\r\n-  /** Returns the subprotocol selected by the server, if any. It can be used in conjunction with the array form of the constructor's second argument to perform subprotocol negotiation. */\r\n-  readonly protocol: string | null;\r\n-  /** Returns the extensions selected by the server, if any. */\r\n-  readonly extensions: string | null;\r\n+  get readyState(): number;\r\n+  get url(): string | null;\r\n+  get protocol(): string | null;\r\n+  get extensions(): string | null;\r\n }\r\n declare const WebSocketPair: {\r\n   new (): {\r\n     0: WebSocket;\r\n```\r\n\r\n</details>",
          "Wait, the following patch to `handler.d.ts` (I mean, manually editing node_modules) also removes the error.\r\n\r\n```diff\r\n+ /// <reference types=\"@cloudflare/workers-types\" />\r\n- import type { EventContext } from '@cloudflare/workers-types';\r\n  import type { Hono } from '../../hono';\r\n  import type { Env } from '../../types';\r\n  export declare const handle: <E extends Env>(app: Hono<E, import(\"../../types\").Route, {}, {}>) => (eventContext: EventContext<{}, string, {}>) => Response | Promise<Response>;\r\n```\r\n\r\nThis seems to be the canonical solution in the sense that this uses a type definition in `@cloudflare/workers-types`. However, I don't know the difference between `import`ing types and triple-slash directive.",
          "The things related to Types are tricky:(\r\n\r\n> I'm not sure if defining EventContext on Hono's side rather than importing it from @cloudflare/workers-types,\r\n\r\nUsing `EventContext` imported from `@cloudflare/workers-types` as you did, I got an error, so I solved it by defining a minimal and compatible EventContext on Hono side. I think the way I did looks good, but I will look into it tomorrow to see if there are any side effects. And also about triple-slash.\r\n",
          "I noticed the part you quoted wasn't a complete sentence, but I guess you understand my intention (now fixed in the original comment).\r\n\r\n> I will look into it tomorrow to see if there are any side effects. And also about triple-slash.\r\n\r\nSorry for troubling you, but much appreciated!\r\n",
          "Hi @yudai-nkt !\r\n\r\nIt seems to be better to use \"triple-slash\". With my implementation writing `EventContext` in Hono side, that will be `any` in pages functions:\r\n\r\n<img width=\"461\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/214593945-445e0099-cd44-49e8-9cc2-b87c027ce824.png\">\r\n\r\nBut, with tripe-slash, it will be `EventContext` correctly:\r\n\r\n<img width=\"455\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/214594044-e371f7b3-1259-46f0-a79e-fc14f6275916.png\">\r\n\r\nYou are right, we should use the `@cloudflare/workers-types` type. I think triple-slash is appropriate in this case since using `import` will cause a mismatch in the Request type.",
          "Ah, CI failed. Looks like triple-slash is polluting the `Request` and other APIs.",
          "Hi @stefanmaric !\r\n\r\nDo you know of any good solutions?",
          "> With my implementation writing `EventContext` in Hono side, that will be `any` in pages functions:\r\n\r\nThis was a good catch, but sad to see CI fails. \ud83d\ude22\r\n\r\nI thought #733 removed prototype pollution, so the result is kinda surprising.",
          "By the way, `yarn test` seems to run tests in `deno_dist`, `test_bun`, `test_lagon`, `test_node`, `test_fastly`, and `test_deno` and fails. Is this intended?",
          "> I thought https://github.com/honojs/hono/pull/733 removed prototype pollution, so the result is kinda surprising.\r\n\r\nSo, the `Request` used in `HonoRequest.raw` is polluted.\r\n\r\n> By the way, yarn test seems to run tests in deno_dist, test_bun, test_lagon, test_node, test_fastly, and test_deno and fails. Is this intended?\r\n\r\nNo. It's wired.\r\n\r\nBut, the test with this fix <https://github.com/honojs/hono/pull/837/commits/45a43157f1f1d03787dda316df871039c19cfe2b> succeed. This is defining `EventContext` in Hono side pattern. The `EventContext` did not contain `passThroughOnException` and we needed to remove it, and it has the type.\r\n\r\n<img width=\"333\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/214607709-3901ea6a-63bb-4ce3-b2e6-dfba04da9eb6.png\">\r\n",
          "CI doesn't run those unrelated tests, so it seems like a problem in my environment. Thanks.\r\n\r\nGlad to see CI passes while `EventContext` having the correct type! Would like to hear @stefanmaric's thoughts.",
          "OK, no response from stefan, but I'll merge it.\r\n\r\n@stefanmaric If you have any feedback later, create the issue, let us know!"
        ]
      },
      {
        "pr_number": 845,
        "title": "feat(reg-exp-router): Lookup static path by using Object",
        "body": "Optimize paths that do not contain variables by doing a lookup via Object.\r\nThis optimization will also reduce the size of the regular expression generated when static paths are included, so there will be no negative impact on the overall result.",
        "html_url": "https://github.com/honojs/hono/pull/845",
        "comments": [
          "### TODO\r\n\r\n* [x] Need to check for ambiguous paths. (does not affect performance)",
          "Completed.\r\n\r\n* [x] static path ambiguous check\r\n* [x] merge next branch\r\n* [x] denoify ",
          "@usualoma \r\n\r\nLooks good! It becomes really ultra fast! You already know this, but for reference, here are the results in my environment with the changes. It is the fastest not only in \"all together\" but in most others.\r\n\r\n<img width=\"641\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/215305492-f50fb65a-52e4-4846-bffe-8d9f800bf82f.png\">\r\n\r\n<img width=\"587\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/215305499-e75e4eb3-4fb6-478d-bc92-4b6972efe55e.png\">\r\n\r\n`find-my-way` is used in Fastify, and the other routers are all top-class among the many JavaScript routers. So, winning them means that RegExpRouter is now the fastest router in the JavaScript world!! You can be proud of this work.\r\n\r\nGreat!! Thanks!!",
          "@yusukebe Thanks!\r\n\r\nThanks to Router::Boom, thanks to hono's project, thanks to the points made by the benchmark script in #843, I think we got this result.\r\nI too am happy to be involved with the hono's RegExpRouter that is the fastest in the world."
        ]
      },
      {
        "pr_number": 843,
        "title": "chore: benchmark of routers",
        "body": "Added benchmark scripts for measuring the speed of HTTP routers on Node.js and Bun.\r\n\r\nIn conclusion, in my environment, RegExpRouter is the third fastest on Node.js and the first or second fastest on Bun. Unfortunately, TrieRouter is slow (It's unavoidable because it has a sorting process). The difference in results between Bun and Node.js is probably due to Bun's regular expressions being faster.\r\n\r\n`@medley/router` used in [Elysia](https://elysiajs.com) and `koa-tree-router` are fast. Our advantage is that the file sizes are smaller than anywhere else. And routings are also flexible for users' use-cases. So it is not a comparison in general, but the result is the result.\r\n\r\n## Node.js\r\n\r\n```\r\n---------------------------------------------------------------------------- -----------------------------\r\n\u2022 short static - GET /user\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     140.13 ns/iter (127.78 ns \u2026 204.16 ns) 141.62 ns  191.8 ns 204.08 ns\r\nHono TrieRouter                       212.64 ns/iter (208.33 ns \u2026 287.68 ns) 212.97 ns 268.56 ns 271.18 ns\r\n@medley/router                        102.52 ns/iter   (97.63 ns \u2026 165.8 ns) 105.03 ns 148.52 ns 152.68 ns\r\nfind-my-way                            92.51 ns/iter  (85.26 ns \u2026 105.31 ns)  95.32 ns 100.29 ns 102.32 ns\r\nkoa-tree-router                        89.93 ns/iter    (83.4 ns \u2026 105.3 ns)  92.71 ns 101.17 ns 101.98 ns\r\ntrek-router                           118.23 ns/iter  (109.71 ns \u2026 129.4 ns) 121.31 ns 126.18 ns 127.26 ns\r\nexpress (WARNING: includes handling)  650.04 ns/iter  (639.19 ns \u2026 708.6 ns) 652.52 ns  708.6 ns  708.6 ns\r\nkoa-router                                 2 \u00b5s/iter     (1.92 \u00b5s \u2026 2.07 \u00b5s)   2.04 \u00b5s   2.07 \u00b5s   2.07 \u00b5s\r\n\r\nsummary for short static - GET /user\r\n  koa-tree-router\r\n   1.03x faster than find-my-way\r\n   1.14x faster than @medley/router\r\n   1.31x faster than trek-router\r\n   1.56x faster than Hono RegExpRouter\r\n   2.36x faster than Hono TrieRouter\r\n   7.23x faster than express (WARNING: includes handling)\r\n   22.23x faster than koa-router\r\n```\r\n\r\n```\r\n\u2022 static with same radix - GET /user/comments\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     142.34 ns/iter (138.05 ns \u2026 167.55 ns) 147.97 ns 155.47 ns 159.52 ns\r\nHono TrieRouter                       228.57 ns/iter (220.69 ns \u2026 245.82 ns) 232.03 ns 238.06 ns 238.82 ns\r\n@medley/router                        147.26 ns/iter (138.96 ns \u2026 165.74 ns) 146.72 ns 158.76 ns 161.97 ns\r\nfind-my-way                           160.25 ns/iter (156.06 ns \u2026 178.38 ns) 166.26 ns 175.93 ns 177.41 ns\r\nkoa-tree-router                       125.24 ns/iter (121.52 ns \u2026 147.05 ns)  130.7 ns 136.93 ns 138.42 ns\r\ntrek-router                           174.28 ns/iter (170.04 ns \u2026 193.75 ns) 179.93 ns  189.7 ns 190.02 ns\r\nexpress (WARNING: includes handling)  649.44 ns/iter (643.57 ns \u2026 677.34 ns) 650.24 ns 677.34 ns 677.34 ns\r\nkoa-router                              1.93 \u00b5s/iter     (1.93 \u00b5s \u2026 1.96 \u00b5s)   1.94 \u00b5s   1.96 \u00b5s   1.96 \u00b5s\r\n\r\nsummary for static with same radix - GET /user/comments\r\n  koa-tree-router\r\n   1.14x faster than Hono RegExpRouter\r\n   1.18x faster than @medley/router\r\n   1.28x faster than find-my-way\r\n   1.39x faster than trek-router\r\n   1.83x faster than Hono TrieRouter\r\n   5.19x faster than express (WARNING: includes handling)\r\n   15.44x faster than koa-router\r\n```\r\n\r\n```\r\n\u2022 dynamic route - GET /user/lookup/username/hey\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     177.13 ns/iter (171.65 ns \u2026 205.41 ns) 181.94 ns  191.4 ns 197.01 ns\r\nHono TrieRouter                       346.78 ns/iter (335.76 ns \u2026 370.08 ns) 347.71 ns  367.4 ns 370.08 ns\r\n@medley/router                        197.79 ns/iter (193.47 ns \u2026 212.85 ns) 200.01 ns 210.51 ns 212.78 ns\r\nfind-my-way                            232.1 ns/iter (226.94 ns \u2026 249.44 ns) 237.56 ns  244.4 ns 245.99 ns\r\nkoa-tree-router                       184.69 ns/iter (179.14 ns \u2026 205.31 ns) 188.95 ns 195.54 ns 195.56 ns\r\ntrek-router                           274.84 ns/iter  (268.82 ns \u2026 300.5 ns) 279.72 ns 292.21 ns  300.5 ns\r\nexpress (WARNING: includes handling)    1.24 \u00b5s/iter     (1.22 \u00b5s \u2026 1.34 \u00b5s)   1.25 \u00b5s   1.34 \u00b5s   1.34 \u00b5s\r\nkoa-router                              1.94 \u00b5s/iter     (1.93 \u00b5s \u2026 1.97 \u00b5s)   1.95 \u00b5s   1.97 \u00b5s   1.97 \u00b5s\r\n\r\nsummary for dynamic route - GET /user/lookup/username/hey\r\n  Hono RegExpRouter\r\n   1.04x faster than koa-tree-router\r\n   1.12x faster than @medley/router\r\n   1.31x faster than find-my-way\r\n   1.55x faster than trek-router\r\n   1.96x faster than Hono TrieRouter\r\n   6.99x faster than express (WARNING: includes handling)\r\n   10.97x faster than koa-router\r\n```\r\n\r\n```\r\n\u2022 mixed static dynamic - GET /event/abcd1234/comments\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     170.34 ns/iter (165.74 ns \u2026 194.03 ns) 175.47 ns 181.81 ns 183.15 ns\r\nHono TrieRouter                       343.89 ns/iter (333.45 ns \u2026 361.15 ns) 345.72 ns 360.02 ns 361.15 ns\r\n@medley/router                        163.86 ns/iter  (160.07 ns \u2026 192.6 ns) 163.96 ns 175.24 ns 179.88 ns\r\nfind-my-way                           204.68 ns/iter (199.88 ns \u2026 224.42 ns) 209.68 ns 219.07 ns 222.63 ns\r\nkoa-tree-router                        154.1 ns/iter (148.82 ns \u2026 177.18 ns) 159.07 ns 164.34 ns 166.34 ns\r\ntrek-router                           242.45 ns/iter    (237 ns \u2026 269.24 ns) 247.57 ns  256.9 ns 261.64 ns\r\nexpress (WARNING: includes handling)    1.37 \u00b5s/iter     (1.36 \u00b5s \u2026 1.39 \u00b5s)   1.37 \u00b5s   1.39 \u00b5s   1.39 \u00b5s\r\nkoa-router                              1.96 \u00b5s/iter     (1.96 \u00b5s \u2026 1.99 \u00b5s)   1.97 \u00b5s   1.99 \u00b5s   1.99 \u00b5s\r\n\r\nsummary for mixed static dynamic - GET /event/abcd1234/comments\r\n  koa-tree-router\r\n   1.06x faster than @medley/router\r\n   1.11x faster than Hono RegExpRouter\r\n   1.33x faster than find-my-way\r\n   1.57x faster than trek-router\r\n   2.23x faster than Hono TrieRouter\r\n   8.87x faster than express (WARNING: includes handling)\r\n   12.75x faster than koa-router\r\n```\r\n\r\n```\r\n\u2022 post - POST /event/abcd1234/comment\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     144.05 ns/iter (139.87 ns \u2026 167.19 ns) 149.78 ns 156.18 ns    158 ns\r\nHono TrieRouter                       348.78 ns/iter (338.37 ns \u2026 370.21 ns) 350.56 ns 368.32 ns 370.21 ns\r\n@medley/router                        143.85 ns/iter (140.32 ns \u2026 165.14 ns) 145.48 ns 156.71 ns 162.33 ns\r\nfind-my-way                           201.54 ns/iter (189.71 ns \u2026 218.24 ns) 207.03 ns 211.65 ns 213.17 ns\r\nkoa-tree-router                       143.99 ns/iter (139.08 ns \u2026 160.36 ns) 149.27 ns 157.24 ns 157.63 ns\r\ntrek-router                           208.32 ns/iter (203.03 ns \u2026 234.24 ns) 213.88 ns 217.34 ns 223.78 ns\r\nexpress (WARNING: includes handling)     1.4 \u00b5s/iter     (1.39 \u00b5s \u2026 1.43 \u00b5s)   1.41 \u00b5s   1.43 \u00b5s   1.43 \u00b5s\r\nkoa-router                              1.98 \u00b5s/iter     (1.95 \u00b5s \u2026 2.09 \u00b5s)   1.97 \u00b5s   2.09 \u00b5s   2.09 \u00b5s\r\n\r\nsummary for post - POST /event/abcd1234/comment\r\n  @medley/router\r\n   1x faster than koa-tree-router\r\n   1x faster than Hono RegExpRouter\r\n   1.4x faster than find-my-way\r\n   1.45x faster than trek-router\r\n   2.42x faster than Hono TrieRouter\r\n   9.77x faster than express (WARNING: includes handling)\r\n   13.76x faster than koa-router\r\n```\r\n\r\n```\r\n\u2022 long static - GET /very/deeply/nested/route/hello/there\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     157.36 ns/iter (153.27 ns \u2026 171.93 ns) 163.09 ns 169.76 ns 169.88 ns\r\nHono TrieRouter                       330.73 ns/iter (327.63 ns \u2026 348.84 ns) 330.72 ns 340.64 ns 348.84 ns\r\n@medley/router                        119.18 ns/iter (116.12 ns \u2026 137.22 ns) 120.24 ns 129.64 ns 135.63 ns\r\nfind-my-way                           202.87 ns/iter (197.88 ns \u2026 227.67 ns) 208.79 ns 215.96 ns 220.36 ns\r\nkoa-tree-router                       118.05 ns/iter (114.83 ns \u2026 132.02 ns) 118.89 ns 129.57 ns 131.43 ns\r\ntrek-router                           137.67 ns/iter (133.75 ns \u2026 159.65 ns) 138.97 ns 148.92 ns 150.93 ns\r\nexpress (WARNING: includes handling)  946.79 ns/iter  (936.7 ns \u2026 978.62 ns) 952.38 ns 978.62 ns 978.62 ns\r\nkoa-router                              1.97 \u00b5s/iter     (1.93 \u00b5s \u2026 3.07 \u00b5s)   1.94 \u00b5s   3.07 \u00b5s   3.07 \u00b5s\r\n\r\nsummary for long static - GET /very/deeply/nested/route/hello/there\r\n  koa-tree-router\r\n   1.01x faster than @medley/router\r\n   1.17x faster than trek-router\r\n   1.33x faster than Hono RegExpRouter\r\n   1.72x faster than find-my-way\r\n   2.8x faster than Hono TrieRouter\r\n   8.02x faster than express (WARNING: includes handling)\r\n   16.69x faster than koa-router\r\n```\r\n\r\n```\r\n\u2022 wildcard - GET /static/index.html\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     151.54 ns/iter (147.36 ns \u2026 170.38 ns) 157.15 ns 161.79 ns 164.05 ns\r\nHono TrieRouter                       251.79 ns/iter (241.96 ns \u2026 263.23 ns) 254.75 ns 261.34 ns 262.23 ns\r\n@medley/router                        112.59 ns/iter (109.32 ns \u2026 128.28 ns) 113.77 ns 123.61 ns 126.79 ns\r\nfind-my-way                           178.03 ns/iter  (170.61 ns \u2026 197.7 ns)  183.5 ns 189.43 ns  191.6 ns\r\nkoa-tree-router                       155.66 ns/iter (149.68 ns \u2026 170.77 ns) 160.97 ns    165 ns 165.39 ns\r\ntrek-router                           183.27 ns/iter (176.93 ns \u2026 217.39 ns) 187.99 ns 203.07 ns 210.88 ns\r\nexpress (WARNING: includes handling)    1.59 \u00b5s/iter     (1.57 \u00b5s \u2026 1.62 \u00b5s)   1.59 \u00b5s   1.62 \u00b5s   1.62 \u00b5s\r\nkoa-router                              1.94 \u00b5s/iter     (1.93 \u00b5s \u2026 1.96 \u00b5s)   1.94 \u00b5s   1.96 \u00b5s   1.96 \u00b5s\r\n\r\nsummary for wildcard - GET /static/index.html\r\n  @medley/router\r\n   1.35x faster than Hono RegExpRouter\r\n   1.38x faster than koa-tree-router\r\n   1.58x faster than find-my-way\r\n   1.63x faster than trek-router\r\n   2.24x faster than Hono TrieRouter\r\n   14.08x faster than express (WARNING: includes handling)\r\n   17.21x faster than koa-router\r\n```\r\n\r\n```\r\n\u2022 all together\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     718.63 ns/iter  (714.32 ns \u2026 731.9 ns) 718.27 ns  731.9 ns  731.9 ns\r\nHono TrieRouter                         1.81 \u00b5s/iter     (1.78 \u00b5s \u2026 1.93 \u00b5s)   1.81 \u00b5s   1.93 \u00b5s   1.93 \u00b5s\r\n@medley/router                        636.27 ns/iter (616.76 ns \u2026 658.81 ns) 643.83 ns 658.81 ns 658.81 ns\r\nfind-my-way                             1.04 \u00b5s/iter     (1.03 \u00b5s \u2026 1.06 \u00b5s)   1.04 \u00b5s   1.06 \u00b5s   1.06 \u00b5s\r\nkoa-tree-router                       664.27 ns/iter (656.67 ns \u2026 698.83 ns) 668.99 ns 698.83 ns 698.83 ns\r\ntrek-router                             1.03 \u00b5s/iter     (1.02 \u00b5s \u2026 1.05 \u00b5s)   1.03 \u00b5s   1.05 \u00b5s   1.05 \u00b5s\r\nexpress (WARNING: includes handling)     7.8 \u00b5s/iter   (7.46 \u00b5s \u2026 180.96 \u00b5s)   7.71 \u00b5s   8.25 \u00b5s   8.46 \u00b5s\r\nkoa-router                             13.62 \u00b5s/iter  (13.04 \u00b5s \u2026 168.54 \u00b5s)  13.33 \u00b5s  14.25 \u00b5s  14.71 \u00b5s\r\n\r\nsummary for all together\r\n  @medley/router\r\n   1.04x faster than koa-tree-router\r\n   1.13x faster than Hono RegExpRouter\r\n   1.62x faster than trek-router\r\n   1.63x faster than find-my-way\r\n   2.84x faster than Hono TrieRouter\r\n   12.27x faster than express (WARNING: includes handling)\r\n   21.4x faster than koa-router\r\n```\r\n\r\n## Bun\r\n\r\n```\r\n---------------------------------------------------------------------------- -----------------------------\r\n\u2022 short static - GET /user\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     168.73 ns/iter (155.26 ns \u2026 529.23 ns) 160.26 ns 300.99 ns 442.68 ns\r\nHono TrieRouter                       299.78 ns/iter (283.41 ns \u2026 566.59 ns) 292.11 ns 392.59 ns 566.59 ns\r\n@medley/router                        138.87 ns/iter (130.71 ns \u2026 456.34 ns) 135.23 ns 214.85 ns 339.99 ns\r\nfind-my-way                           144.66 ns/iter (133.18 ns \u2026 540.48 ns) 136.62 ns 214.69 ns 269.18 ns\r\nkoa-tree-router                       145.17 ns/iter (136.34 ns \u2026 319.57 ns) 143.15 ns 209.65 ns 228.62 ns\r\ntrek-router                           202.52 ns/iter  (195.13 ns \u2026 297.4 ns) 198.32 ns 274.77 ns 286.13 ns\r\nexpress (WARNING: includes handling)  484.38 ns/iter (426.34 ns \u2026 627.66 ns) 514.05 ns 587.09 ns 627.66 ns\r\nkoa-router                            243.78 ns/iter (237.05 ns \u2026 368.07 ns) 238.96 ns 311.95 ns 314.21 ns\r\n\r\nsummary for short static - GET /user\r\n  @medley/router\r\n   1.04x faster than find-my-way\r\n   1.05x faster than koa-tree-router\r\n   1.22x faster than Hono RegExpRouter\r\n   1.46x faster than trek-router\r\n   1.76x faster than koa-router\r\n   2.16x faster than Hono TrieRouter\r\n   3.49x faster than express (WARNING: includes handling)\r\n```\r\n\r\n```\r\n\u2022 static with same radix - GET /user/comments\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     171.63 ns/iter (163.48 ns \u2026 265.79 ns)  166.2 ns 248.03 ns 257.31 ns\r\nHono TrieRouter                       347.94 ns/iter (331.75 ns \u2026 415.75 ns) 346.66 ns 408.46 ns 415.75 ns\r\n@medley/router                        183.44 ns/iter (177.56 ns \u2026 326.72 ns) 179.72 ns 256.21 ns  266.2 ns\r\nfind-my-way                           179.22 ns/iter (169.39 ns \u2026 310.33 ns) 172.55 ns 245.25 ns 259.35 ns\r\nkoa-tree-router                       219.69 ns/iter (202.87 ns \u2026 545.36 ns) 212.75 ns 391.11 ns 414.03 ns\r\ntrek-router                           323.44 ns/iter (311.88 ns \u2026 490.22 ns) 317.66 ns 468.47 ns 490.22 ns\r\nexpress (WARNING: includes handling)  514.78 ns/iter (464.45 ns \u2026 887.69 ns) 540.96 ns 792.68 ns 887.69 ns\r\nkoa-router                            247.07 ns/iter (240.22 ns \u2026 324.99 ns) 242.82 ns 308.39 ns 313.53 ns\r\n\r\nsummary for static with same radix - GET /user/comments\r\n  Hono RegExpRouter\r\n   1.04x faster than find-my-way\r\n   1.07x faster than @medley/router\r\n   1.28x faster than koa-tree-router\r\n   1.44x faster than koa-router\r\n   1.88x faster than trek-router\r\n   2.03x faster than Hono TrieRouter\r\n   3x faster than express (WARNING: includes handling)\r\n```\r\n\r\n```\r\n\u2022 dynamic route - GET /user/lookup/username/hey\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     200.52 ns/iter (187.81 ns \u2026 815.73 ns) 191.07 ns 283.99 ns  319.7 ns\r\nHono TrieRouter                       537.26 ns/iter (504.63 ns \u2026 743.42 ns) 558.99 ns 625.86 ns 743.42 ns\r\n@medley/router                        232.64 ns/iter (224.27 ns \u2026 397.93 ns) 228.27 ns  302.4 ns 304.69 ns\r\nfind-my-way                            255.5 ns/iter    (243 ns \u2026 394.65 ns) 248.55 ns 353.18 ns 374.52 ns\r\nkoa-tree-router                       317.31 ns/iter (296.53 ns \u2026 695.05 ns) 309.98 ns 616.73 ns 695.05 ns\r\ntrek-router                           477.65 ns/iter (459.42 ns \u2026 599.56 ns) 474.82 ns 552.95 ns 599.56 ns\r\nexpress (WARNING: includes handling)  680.13 ns/iter (622.32 ns \u2026 989.88 ns) 705.92 ns 989.88 ns 989.88 ns\r\nkoa-router                            260.56 ns/iter (245.98 ns \u2026 405.98 ns) 259.22 ns 356.82 ns 401.38 ns\r\n\r\nsummary for dynamic route - GET /user/lookup/username/hey\r\n  Hono RegExpRouter\r\n   1.16x faster than @medley/router\r\n   1.27x faster than find-my-way\r\n   1.3x faster than koa-router\r\n   1.58x faster than koa-tree-router\r\n   2.38x faster than trek-router\r\n   2.68x faster than Hono TrieRouter\r\n   3.39x faster than express (WARNING: includes handling)\r\n```\r\n\r\n```\r\n\u2022 mixed static dynamic - GET /event/abcd1234/comments\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     185.69 ns/iter (174.91 ns \u2026 350.57 ns) 178.87 ns 248.85 ns 250.18 ns\r\nHono TrieRouter                       495.27 ns/iter (467.85 ns \u2026 693.42 ns) 517.84 ns 669.43 ns 693.42 ns\r\n@medley/router                         204.9 ns/iter (196.53 ns \u2026 435.48 ns) 201.86 ns 268.48 ns 271.07 ns\r\nfind-my-way                           231.49 ns/iter (218.18 ns \u2026 651.66 ns) 224.91 ns 303.14 ns 422.08 ns\r\nkoa-tree-router                       232.55 ns/iter (213.71 ns \u2026 642.89 ns) 231.68 ns 335.15 ns  457.5 ns\r\ntrek-router                           375.87 ns/iter (357.45 ns \u2026 453.71 ns) 371.06 ns 452.52 ns 453.71 ns\r\nexpress (WARNING: includes handling)  744.96 ns/iter (690.56 ns \u2026 874.35 ns) 778.95 ns 874.35 ns 874.35 ns\r\nkoa-router                            280.95 ns/iter (273.88 ns \u2026 354.77 ns) 277.15 ns 354.35 ns 354.77 ns\r\n\r\nsummary for mixed static dynamic - GET /event/abcd1234/comments\r\n  Hono RegExpRouter\r\n   1.1x faster than @medley/router\r\n   1.25x faster than find-my-way\r\n   1.25x faster than koa-tree-router\r\n   1.51x faster than koa-router\r\n   2.02x faster than trek-router\r\n   2.67x faster than Hono TrieRouter\r\n   4.01x faster than express (WARNING: includes handling)\r\n```\r\n\r\n```\r\n\u2022 post - POST /event/abcd1234/comment\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                      176.4 ns/iter (165.13 ns \u2026 399.69 ns) 170.03 ns 340.78 ns 343.89 ns\r\nHono TrieRouter                        481.9 ns/iter  (459.2 ns \u2026 709.09 ns) 497.73 ns 544.45 ns 709.09 ns\r\n@medley/router                        196.83 ns/iter (190.49 ns \u2026 276.23 ns) 193.87 ns 257.18 ns 258.75 ns\r\nfind-my-way                           230.39 ns/iter (216.49 ns \u2026 432.98 ns) 225.69 ns 362.38 ns 396.37 ns\r\nkoa-tree-router                       197.11 ns/iter  (185.3 ns \u2026 409.62 ns) 189.76 ns 339.91 ns  369.8 ns\r\ntrek-router                           342.75 ns/iter (320.11 ns \u2026 482.31 ns) 338.26 ns  424.3 ns 482.31 ns\r\nexpress (WARNING: includes handling)  771.15 ns/iter (719.96 ns \u2026 868.24 ns)  801.8 ns 868.24 ns 868.24 ns\r\nkoa-router                            281.43 ns/iter    (270 ns \u2026 845.24 ns)  273.8 ns 431.55 ns 845.24 ns\r\n\r\nsummary for post - POST /event/abcd1234/comment\r\n  Hono RegExpRouter\r\n   1.12x faster than @medley/router\r\n   1.12x faster than koa-tree-router\r\n   1.31x faster than find-my-way\r\n   1.6x faster than koa-router\r\n   1.94x faster than trek-router\r\n   2.73x faster than Hono TrieRouter\r\n   4.37x faster than express (WARNING: includes handling)\r\n```\r\n\r\n```\r\n\u2022 long static - GET /very/deeply/nested/route/hello/there\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     186.33 ns/iter (173.07 ns \u2026 471.34 ns) 176.23 ns 423.24 ns  447.8 ns\r\nHono TrieRouter                       596.31 ns/iter (552.77 ns \u2026 885.07 ns) 622.17 ns 885.07 ns 885.07 ns\r\n@medley/router                         153.5 ns/iter (146.78 ns \u2026 276.27 ns) 150.01 ns 228.09 ns 233.19 ns\r\nfind-my-way                           225.42 ns/iter (211.88 ns \u2026 470.68 ns) 216.22 ns  368.7 ns 374.38 ns\r\nkoa-tree-router                       149.99 ns/iter  (138.15 ns \u2026 267.1 ns) 145.84 ns 238.43 ns 257.82 ns\r\ntrek-router                           223.83 ns/iter (214.91 ns \u2026 438.52 ns)  219.3 ns 294.52 ns 384.65 ns\r\nexpress (WARNING: includes handling)  704.11 ns/iter  (654.1 ns \u2026 871.75 ns) 731.77 ns 871.75 ns 871.75 ns\r\nkoa-router                            249.48 ns/iter (240.57 ns \u2026 461.07 ns) 243.83 ns 328.85 ns 430.88 ns\r\n\r\nsummary for long static - GET /very/deeply/nested/route/hello/there\r\n  koa-tree-router\r\n   1.02x faster than @medley/router\r\n   1.24x faster than Hono RegExpRouter\r\n   1.49x faster than trek-router\r\n   1.5x faster than find-my-way\r\n   1.66x faster than koa-router\r\n   3.98x faster than Hono TrieRouter\r\n   4.69x faster than express (WARNING: includes handling)\r\n```\r\n\r\n```\r\n\u2022 wildcard - GET /static/index.html\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     179.74 ns/iter  (168.36 ns \u2026 505.2 ns)  172.1 ns 301.09 ns 429.03 ns\r\nHono TrieRouter                       380.33 ns/iter (356.47 ns \u2026 660.87 ns)  379.8 ns 593.38 ns 660.87 ns\r\n@medley/router                        170.49 ns/iter (161.83 ns \u2026 295.87 ns) 167.55 ns 232.78 ns 261.57 ns\r\nfind-my-way                           204.86 ns/iter (191.16 ns \u2026 339.58 ns) 199.85 ns 288.19 ns 301.88 ns\r\nkoa-tree-router                       246.26 ns/iter (232.76 ns \u2026 343.84 ns) 239.21 ns 317.59 ns 323.75 ns\r\ntrek-router                           336.63 ns/iter (324.76 ns \u2026 511.53 ns) 329.93 ns 421.44 ns 511.53 ns\r\nexpress (WARNING: includes handling)  835.68 ns/iter (786.98 ns \u2026 921.52 ns) 865.44 ns 921.52 ns 921.52 ns\r\nkoa-router                            254.61 ns/iter    (247 ns \u2026 444.44 ns) 250.19 ns 319.26 ns 320.58 ns\r\n\r\nsummary for wildcard - GET /static/index.html\r\n  @medley/router\r\n   1.05x faster than Hono RegExpRouter\r\n   1.2x faster than find-my-way\r\n   1.44x faster than koa-tree-router\r\n   1.49x faster than koa-router\r\n   1.97x faster than trek-router\r\n   2.23x faster than Hono TrieRouter\r\n   4.9x faster than express (WARNING: includes handling)\r\n```\r\n\r\n```\r\n\u2022 all together\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     704.36 ns/iter (642.59 ns \u2026 840.34 ns) 727.19 ns 840.34 ns 840.34 ns\r\nHono TrieRouter                         2.61 \u00b5s/iter     (2.53 \u00b5s \u2026 2.89 \u00b5s)   2.63 \u00b5s   2.89 \u00b5s   2.89 \u00b5s\r\n@medley/router                        706.27 ns/iter (680.35 ns \u2026 813.39 ns) 729.65 ns 813.39 ns 813.39 ns\r\nfind-my-way                             1.05 \u00b5s/iter   (987.37 ns \u2026 1.38 \u00b5s)   1.07 \u00b5s   1.38 \u00b5s   1.38 \u00b5s\r\nkoa-tree-router                       951.36 ns/iter     (894.3 ns \u2026 1.1 \u00b5s) 978.63 ns    1.1 \u00b5s    1.1 \u00b5s\r\ntrek-router                             1.79 \u00b5s/iter     (1.74 \u00b5s \u2026 1.86 \u00b5s)   1.82 \u00b5s   1.86 \u00b5s   1.86 \u00b5s\r\nexpress (WARNING: includes handling)    4.37 \u00b5s/iter     (4.26 \u00b5s \u2026 5.09 \u00b5s)   4.36 \u00b5s   5.09 \u00b5s   5.09 \u00b5s\r\nkoa-router                              1.37 \u00b5s/iter     (1.33 \u00b5s \u2026 1.56 \u00b5s)    1.4 \u00b5s   1.56 \u00b5s   1.56 \u00b5s\r\n\r\nsummary for all together\r\n  Hono RegExpRouter\r\n   1x faster than @medley/router\r\n   1.35x faster than koa-tree-router\r\n   1.5x faster than find-my-way\r\n   1.94x faster than koa-router\r\n   2.54x faster than trek-router\r\n   3.71x faster than Hono TrieRouter\r\n   6.2x faster than express (WARNING: includes handling)\r\n```",
        "html_url": "https://github.com/honojs/hono/pull/843",
        "comments": [
          "Hi @usualoma !\r\n\r\nHow about these benchmark scripts and the results? If you like, you can run the scripts in your environment. And, we don't have to force to do it, but perhaps there is a point where we can improve it?",
          "@yusukebe \r\n\r\n#845 resulted in the following in my environment\r\n\r\n```\r\n% npm run bench:node\r\n\r\n...\r\n\r\nsummary for all together\r\n  Hono RegExpRouter\r\n   1.25x faster than koa-tree-router\r\n   1.26x faster than @medley/router\r\n   1.89x faster than trek-router\r\n   2.21x faster than find-my-way\r\n   4.18x faster than Hono TrieRouter\r\n   20.84x faster than express (WARNING: includes handling)\r\n   27.52x faster than koa-router\r\n```\r\n\r\nWhat do you think?",
          "@usualoma \r\n\r\nThanks. I'll check it later.",
          "Thanks for #845 .\r\n\r\nThis benchmark is very useful.\r\n\r\nFor example, benchmarks that handle HTTP requests such as these are also important. Of these, Hono is the fastest or second fastest.\r\n\r\n* https://github.com/denosaurs/benc\r\n* https://github.com/SaltyAom/bun-http-framework-benchmark\r\n\r\nHowever, these can be advantageous or disadvantageous depending on the features of each framework. For example, in the case of Hono, using header values is convenient for the users, but their handling is complicated inside the core.\r\n\r\nSo it is very important to have a benchmark that is less dependent on the specifications. With this, we can say that Hono is Ultra-fast.\r\n\r\nThen, you can use this benchmark script!"
        ]
      },
      {
        "pr_number": 850,
        "title": "Rename runtime keys",
        "body": "Resolves #844.",
        "html_url": "https://github.com/honojs/hono/pull/850",
        "comments": [
          "Hi @yujong-lee !\r\n\r\nThanks. One thing. We have to change the test, failed at this line:\r\n\r\nhttps://github.com/honojs/hono/actions/runs/4034617841/jobs/6935965327#step:7:331",
          "Thanks, I'll merge it."
        ]
      },
      {
        "pr_number": 853,
        "title": "feat: rewnew output types",
        "body": "This PR renews output types emitted from \"app\".\r\n\r\nBefore this PR, it will output types with `app.build()` and the client such as `hc` use it. But in this PR, we don't have to use `app.build()`, and emitted types are changed:\r\n\r\nFor example, write the endpoint with the validator middleware:\r\n\r\n```ts\r\nconst route = app.post(\r\n  '/api/v2/posts',\r\n  validator(\r\n    'json',\r\n    validatorFunc(\r\n      z.object({\r\n        id: z.number(),\r\n        title: z.string(),\r\n      })\r\n    )\r\n  ),\r\n  (c) => {\r\n    return c.jsonT({\r\n      success: true,\r\n    })\r\n  }\r\n)\r\n```\r\n\r\nAnd we can get the type:\r\n\r\n```ts\r\nexport type AppType = typeof route\r\ntype Schema = ExtractSchema<typeof route>\r\n```\r\n\r\nThe extracted types are the followings. `Schema` will be:\r\n\r\n```ts\r\ntype Schema = {\r\n  '/api/v2/posts': {\r\n    $post: {\r\n      input: {\r\n        json: {\r\n          id: number\r\n          title: string\r\n        }\r\n      }\r\n      output: {\r\n        success: boolean\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nI think this format is very useful for writing the client.  Just a simple use of this types and the client looks like this.\r\n\r\nhttps://user-images.githubusercontent.com/10682/215485265-a74e85e1-ea8a-44f3-abf3-423b08051222.mov\r\n\r\nThis client has no implementation but is more type-safe.\r\n\r\nI think this is good PR.\r\n\r\nBTW:\r\n\r\nI am now thinking of rewriting the client and creating it in the core project as `hono/client`. This is because it is easier to handle and develop.",
        "html_url": "https://github.com/honojs/hono/pull/853",
        "comments": [
          "Use Comment Block Generator <https://blocks.jkniest.dev> for formatting the comment blocks.\r\nPretty good."
        ]
      },
      {
        "pr_number": 856,
        "title": "fix(breaking): obsolete no args `c.req.valid()`",
        "body": "This PR obsolete `c.req.valid()` has no arguments.\r\n\r\nWe can **not** do:\r\n\r\n```ts\r\nconst { page } = c.req.valid()\r\n```\r\n\r\nstill we can do:\r\n\r\n```ts\r\nconst { page } = c.req.valid('query')\r\n```\r\n\r\nThe `c.req.valid()` could merge the same key, and result may be unintended values. Then, this change allowed us to remove `utils/object.ts`, thus reducing the bundle size and package size.",
        "html_url": "https://github.com/honojs/hono/pull/856",
        "comments": []
      },
      {
        "pr_number": 857,
        "title": "refactor(request): don't cache jsonBody, formBody, and headers",
        "body": "Don't cache JSON body, Form body, and Headers in `HonoRequest`. These were used in Validator, but we no longer need to cache them, so we removed them. There is no performance degradation unless multiple Validations are performed.",
        "html_url": "https://github.com/honojs/hono/pull/857",
        "comments": []
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 859,
        "title": "fix(req): `never` if `c.req.valid()`",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/859",
        "comments": []
      },
      {
        "pr_number": 860,
        "title": "perf(context): improve handling response",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/860",
        "comments": []
      },
      {
        "pr_number": 861,
        "title": "refactor: obsolute `CustomHandler`",
        "body": "It's not needed. Use `Handler` or `MiddlewareHandler` instead.",
        "html_url": "https://github.com/honojs/hono/pull/861",
        "comments": []
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 867,
        "title": "perf(reg-exp-router): Cache Result<T> instead of T[] if there is no parameter.",
        "body": "I would like to change it to cache the constructed `Result<T>` for static paths.\r\n\r\nI could not see a clear change in the benchmark, but I believe there is a slight performance benefit, which can reduce object creation at request time.",
        "html_url": "https://github.com/honojs/hono/pull/867",
        "comments": [
          "Hi @usualoma !\r\n\r\nThis seems to be a good change, and there is no side effect. Okay, I'll merge it!"
        ]
      },
      {
        "pr_number": 862,
        "title": "feat: `hc` - Hono Client",
        "body": "This PR introduces a new feature, \"Hono Client\". \"hc\" for the same purpose was built as `@hono/hc`, but making it obsolete, includes it in the core package.\r\n\r\n## Usage\r\n\r\nFirst, create the API server. Write the endpoint and export the type of route:\r\n\r\n```ts\r\n// server.ts\r\nimport { Hono } from 'hono'\r\nimport { z } from 'zod'\r\nimport { zValidator } from '@hono/zod-validator'\r\n\r\nconst app = new Hono()\r\n\r\nconst route = app.post(\r\n  '/api/v2/posts',\r\n  zValidator(\r\n    'json',\r\n    z.object({\r\n      id: z.number(),\r\n      title: z.string(),\r\n    })\r\n  ),\r\n  (c) => {\r\n    const { id, title } = c.req.valid('json')\r\n   // Use `c.jsonT()` to emit types\r\n    return c.jsonT({\r\n      message: `${id} is ${title}`,\r\n      success: true,\r\n    })\r\n  }\r\n)\r\n\r\nexport type AppType = typeof route // export the type\r\n```\r\n\r\nSecond, start writing the `client.ts`, import the type from `server.ts` and pass it to the `hc` function as Generics:\r\n\r\n```ts\r\nimport { hc } from 'hono/client'\r\n\r\nimport type { AppType } from './server'\r\n\r\nconst client = hc<AppType>('http://localhost:8787/')\r\n```\r\n\r\nThen, time for magic:\r\n\r\nhttps://user-images.githubusercontent.com/10682/216456881-7c9d4bad-e669-4cfb-a027-86ce98074973.mov\r\n\r\nIt will suggest the code based on the path and schema of the API server endpoint.\r\n\r\nAnd handle the response:\r\n\r\nhttps://user-images.githubusercontent.com/10682/216457919-1484ed48-b1d3-4428-b6be-565f7a9ee879.mov\r\n\r\n`data` has the appropriate type. Great!\r\n\r\nThe final code is here:\r\n\r\n```ts\r\nconst res = await client.api.v2.posts.$post({\r\n  json: {\r\n    id: 123,\r\n    title: 'Hello!!',\r\n  },\r\n})\r\n\r\nconst data = await res.json()\r\n\r\nconsole.log(data.message)\r\n```\r\n\r\n### Don't you use `@hono/hc`?\r\n\r\nSeparating core packages and `hc` is good, but it makes development difficult. For example, if we want to refer to the same `Hono` or `ValidationTypes` types, but the projects are separated, it is difficult to do so, and type errors occur frequently. Even if we include it in the core package, it is independent of `hono`, so the bundle size will not change unless we use it. In addition, it is very small and does not depend on an external library.",
        "html_url": "https://github.com/honojs/hono/pull/862",
        "comments": [
          "Hi, @usualoma @ThatOneBro @cleaton and others!\r\n\r\nHow about this? You don't have to do a detailed review, I'd like to hear your brief thoughts.\r\n",
          "@yusukebe over all I think it looks good, the client api is easy to use and I like that it's possible to pass additional request parameters. \r\n\r\nI think hiding the typed result behind a `json()` method togeter with all the existing `Response` methods makes it difficult to discover (Result has so many methods/attributes...). I would suggest giving another name than `json` maybe `ht()` for `HonoType` or something else. Can also consider using an interface to split the `Result` methods, ex:\r\n```ts\r\ninterface HonoResponse<T> {\r\n   response(): Response\r\n   ht(): TypedResponse<T>\r\n```\r\n\r\nThis kind of interface could also help make the client composable with server endpoints in a way where it's possible to forward responses from nested Hono Servers without unwrapping the response. For example in Cloudflare, have endpoint defined in a worker, inside the endpoint use hono client to call DurableObject instance and directly return the result (making the worker endpoint and DO endpoint return type identical). Current implementation which requires returning `c.jsonT()` requires extracting the DO response in the worker endpoint.\r\n\r\nnot directly related to this PR, but i happened to see\r\n```ts\r\n export type TypeResponse<T = unknown> = {\r\n   response: Response | Promise<Response>\r\n   data: T\r\n   format: 'json' // Currently, support only `json` with `c.jsonT()`\r\n }\r\n ```\r\n it does not look like `data` is used anywhere so I think it can be removed (it's already encoded inside `response`). A typescript type can contain type parameters that are not used in any field/value (very useful for passing type info forward without incuring runtime cost of passing the actual object)",
          "Hi @cleaton ! \r\n\r\n> I think hiding the typed result behind a json() method togeter with all the existing Response methods makes it difficult to discover (Result has so many methods/attributes...).\r\n\r\nIs this referring to the client's `res.json()`?\r\n\r\n```ts\r\nconst res = await client.api.v2.posts.$get()\r\n\r\nconst data = await res.json() // <--- this?\r\n```\r\n\r\nYou are right `json()` is a hard keyword to discover. But, this is because I want to keep compatibility with the `Response` object, which is the return value of the `fetch`. I thought about wrapping the `fetch`'s `Response` like `HonoResponse`, but decided against it because it would be too complicated.",
          "@yusukebe I think this is great! Everything looks really nice to me. I haven't used it yet but once I use it I will be sure to give more feedback. For now, I think this is a great decision \ud83d\ude04 ",
          "@yusukebe\r\nThis is some really great magic!\r\nI think this PR is well implemented with lean and less code, and is highly maintainable.",
          "Hi @cleaton !\r\n\r\nI'll merge this PR soon.\r\n\r\nThis feature - Hono Client - is based on your comment, which inspired us. https://github.com/honojs/hono/issues/582#issuecomment-1279598527 I think it is a super cool idea. We are proud to be able to add this feature to Hono. Thank you very much!",
          "@yusukebe thanks for your hard work! Looking forward to using it ~",
          "I'll merge it now!"
        ]
      },
      {
        "pr_number": 869,
        "title": "feat: Remove the StaticRouter from default candidates.",
        "body": "#868",
        "html_url": "https://github.com/honojs/hono/pull/869",
        "comments": [
          "We will create a separate PR to drop StaticRouter from the package, so I will merge this PR. Thank you."
        ]
      },
      {
        "pr_number": 873,
        "title": "feat(router) [breaking]: StaticRouter obsolete",
        "body": "We've discussed in #868, we decided to remove StaticRouter from default candidates and remove it also from the packages. This means StaticRouter will become obsolete. After merging the PR, we can't use StaticRouter.\r\n\r\nThanks to @usualoma for creating StaticRouter. And goodbye StaticRouter.\r\n\r\nThis will fix #868.",
        "html_url": "https://github.com/honojs/hono/pull/873",
        "comments": [
          "Hi @usualoma !\r\n\r\nIf you are OK, I will merge this PR with you as co-author.",
          "@yusukebe Thanks, LGTM!"
        ]
      },
      {
        "pr_number": 876,
        "title": "merge main into next",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/876",
        "comments": []
      },
      {
        "pr_number": 876,
        "title": "merge main into next",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/876",
        "comments": []
      },
      {
        "pr_number": 876,
        "title": "merge main into next",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/876",
        "comments": []
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 878,
        "title": "feat(adapter): `handle(path, app)` for CF Pages & Next.js",
        "body": "This PR is for the adapter of Cloudflare Pages and Next.js. It allows passing the mount path as an argument to `handle`.\r\n\r\nFor example, if you struct the Next.js project like this:\r\n\r\n<img width=\"191\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/218135327-6cbc7c72-8e16-441e-9119-d8f989896243.png\">\r\n\r\n`pages/api/[route].ts` could be follows:\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { handle } from 'hono/nextjs'\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/hello', (c) => {\r\n  return c.json({\r\n    message: 'Hello',\r\n  })\r\n})\r\n\r\napp.get('/morning', (c) => {\r\n  return c.json({\r\n    message: 'Morning',\r\n  })\r\n})\r\n\r\nexport default handle('/api', app)\r\n```\r\n\r\nIt is simpler because you don't have to write `/api` in the argument of `app.get` every time.",
        "html_url": "https://github.com/honojs/hono/pull/878",
        "comments": []
      },
      {
        "pr_number": 879,
        "title": "feat(validator): moved validator outside of middleware",
        "body": "We have been treating `validator` as Middleware, but since it is different in property from Middleware, move it out.",
        "html_url": "https://github.com/honojs/hono/pull/879",
        "comments": []
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 880,
        "title": "chore: update Deno benchmark",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/880",
        "comments": []
      },
      {
        "pr_number": 881,
        "title": "feat(adapter)!: simplify HandleInterface and reduce bundle size",
        "body": "***This PR breaks compatibility with rc.12 but is still compatible with rc.11.*** Since rc.12 is only 9 hours old and adapters aren't in the stable releases yet, I hope this breaking change doesn't have any significant impact.\r\n\r\nWith this PR, type definitions for `handle` in Cloudflare Pages and Next.js become simpler and parameter names are more descriptive. It also saves the bundle size; minified ESM for Cloudflare Pages adapter is reduced from 825B to 503B and Next.js adapter from 561B to 406B.\r\n\r\nHere are the pros/cons I can think of:\r\n\r\n<dl>\r\n<dt>Pros</dt>\r\n  <dd>\r\n\r\n  - Bundle size is smaller.\r\n  - Interface is simpler.\r\n  </dd>\r\n<dt>Cons</dt>\r\n  <dd>\r\n\r\n  - Parameter order is different from `Hono.prototype.route`. Some people might feel awkward.\r\n  - A new Hono app is always instantiated and this has a slight overhead. That said, I think it won't be a problem because:\r\n    - The overhead is negligible compared to other heavy work user's app does.\r\n    - I guess people want to mount `subApp` to a dedicated path like `/api` when they use these adapters (at least I do). So `new Hono()` is called anyway in rc.12 as well.\r\n</dl>\r\n\r\nFeel free to close if you disagree to this change.",
        "html_url": "https://github.com/honojs/hono/pull/881",
        "comments": [
          "By the way, I really appreciate #878. My `functions/api/[[route]].ts` looks like the following and this gets even simpler with the new `handle`, which internally does the same job.\r\n\r\n```ts\r\nimport { Hono } from \"hono\";\r\nimport { handle } from \"hono/cloudflare-pages\";\r\n\r\nconst api = new Hono<{ Bindings: Env }>();\r\n// requests handling here.\r\nconst app = new Hono();\r\napp.route(\"/api\", api);\r\n\r\nexport const onRequest: PagesFunction = handle(app);\r\n```\r\n\r\nThanks for making this feature built-in!",
          "Hi @yudai-nkt !\r\n\r\nYou are right! Your way is better.\r\n\r\n> Parameter order is different from Hono.prototype.route. Some people might feel awkward.\r\n\r\nThis was my concern as well, but it is more important to simplify the code and reduce the bundle size.\r\n\r\n> By the way, I really appreciate #878.\r\n\r\nGlad you liked it :)\r\n\r\nOkay, let's go with it."
        ]
      },
      {
        "pr_number": 882,
        "title": "feat(`app`): support multiple methods with `app.on()`",
        "body": "This PR enables handling multiple methods with `app.on()` method.\r\n\r\n```ts\r\napp.on(['PUT', 'DELETE'], '/posts/:id', (c) => {\r\n  //...\r\n  return c.text(`Your method is ${c.req.method}`)\r\n})\r\n```",
        "html_url": "https://github.com/honojs/hono/pull/882",
        "comments": []
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 883,
        "title": "feat: move http-exception out of utils",
        "body": "Moved `src/utils/http-exception.ts` to `src/http-exception.ts` because \"HTTPException\" is not just a utility object.",
        "html_url": "https://github.com/honojs/hono/pull/883",
        "comments": []
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 887,
        "title": "fix(deno): allow `{}` for `app.fetch` fo compatibility",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/887",
        "comments": []
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 888,
        "title": "fix(req): query return type as `string | undefined`",
        "body": "The return type of `c.req.query()` should be `string | undefined`.\r\n\r\nAnd this PR fix `getPathFromURL()` in `utils/urls.ts`. This seems to be a \"breaking change\", but this is rather nice since it is compatible with v2.",
        "html_url": "https://github.com/honojs/hono/pull/888",
        "comments": []
      },
      {
        "pr_number": 889,
        "title": "refactor: rename to `TypedResponse`",
        "body": "Rename `TypeResponse` to `TypedResponse`.",
        "html_url": "https://github.com/honojs/hono/pull/889",
        "comments": []
      },
      {
        "pr_number": 890,
        "title": "refactor: rename `ValidationTypes` to `ValidationTargets`",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/890",
        "comments": []
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 891,
        "title": "docs(readme): add bundlephobia badges",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/891",
        "comments": []
      },
      {
        "pr_number": 893,
        "title": "feat: change the arg `InferResponseType` receives",
        "body": "```ts\r\nconst req = client.index\r\ntype Actual = InferResponseType<typeof req>\r\n```\r\n\r\nwill be:\r\n\r\n```ts\r\nconst req = client.index.$get\r\ntype Actual = InferResponseType<typeof req>\r\n```",
        "html_url": "https://github.com/honojs/hono/pull/893",
        "comments": []
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 898,
        "title": "feat(client): introduce `Fetch` type",
        "body": "With `Fetch`, you can write `fetcher` for [SWR](https://swr.vercel.app/ja) type-safety.\r\n\r\n```ts\r\nimport useSWR from 'swr'\r\nimport { hc, InferRequestType, Fetch } from 'hono/client'\r\nimport { AppType } from '../functions/api/[[route]]'\r\n\r\nconst App = () => {\r\n  const client = hc<AppType>('/api')\r\n  const $get = client.hello.$get\r\n\r\n  const fetcher = (method: Fetch<typeof $get>) => (arg: InferRequestType<typeof $get>) => {\r\n    return async () => {\r\n      const res = await method(arg)\r\n      return await res.json()\r\n    }\r\n  }\r\n\r\n  const { data, error, isLoading } = useSWR(\r\n    'api-hello',\r\n    fetcher($get)({\r\n      query: {\r\n        name: 'SWR',\r\n      },\r\n    })\r\n  )\r\n\r\n  if (error) return <div>failed to load</div>\r\n  if (isLoading) return <div>loading...</div>\r\n\r\n  return <h1>{data.message}</h1>\r\n}\r\n```\r\n\r\n",
        "html_url": "https://github.com/honojs/hono/pull/898",
        "comments": []
      },
      {
        "pr_number": 899,
        "title": "refactor(req): remove `async` keyword from `json()` etc.",
        "body": "Refactored. Perhaps, it may improve performance.",
        "html_url": "https://github.com/honojs/hono/pull/899",
        "comments": []
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 900,
        "title": "chore: `honojs.dev` to `hono.dev`",
        "body": "Now, we've got a new domain, \"hono.dev\"!",
        "html_url": "https://github.com/honojs/hono/pull/900",
        "comments": []
      },
      {
        "pr_number": 901,
        "title": "fix(jsx): declare types for JSX correctly",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/901",
        "comments": []
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 902,
        "title": "docs(readme): update for v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/902",
        "comments": []
      },
      {
        "pr_number": 903,
        "title": "docs: update migration guide for v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/903",
        "comments": []
      },
      {
        "pr_number": 904,
        "title": "docs(migration): add descriptions",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/904",
        "comments": []
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      }
    ],
    "v3.0.0-rc.16": [],
    "v3.0.0-rc.15": [],
    "v2.7.8": [
      {
        "pr_number": 884,
        "title": "header may return undefined",
        "body": "See [Line 94](https://github.com/honojs/hono/pull/884/files#diff-b1a2ab03a3672e105afeaab6615ad625365cd8459d592a840d925f132af62b35R94).",
        "html_url": "https://github.com/honojs/hono/pull/884",
        "comments": [
          "Hi @AlexErrant !\r\n\r\nThank you for creating the PR.\r\n\r\nYou are right, that value could be `undefined`. But we want to return `''` in the case of `undefined`. So, what we should do is not change the return type but assign `''` in the case of `undefined`.\r\n\r\n```ts\r\nreturn this.headerData[name.toLowerCase()] || ''\r\n```\r\n\r\nThen the tests don't fail.",
          "> But we want to return `''` in the case of `undefined`\r\n\r\nI think returning an empty string is incorrect behavior. For example, [consider a custom request header used to prevent CSRF attacks](https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#use-of-custom-request-headers):\r\n\r\n> ...you can simply verify the presence of this header and value on all your server side AJAX endpoints in order to protect against CSRF attacks\r\n\r\nI follow OWASP's advice [here](https://github.com/AlexErrant/Pentive/blob/7cc709f70de45cbfce46c66fe19349a21ce5a3e0/mediaRouter/src/util.ts#L71), where I check for the presence of a custom header - if it doesn't exist, I return early. The value of my custom header [also happens to be an empty string](https://github.com/AlexErrant/Pentive/blob/7cc709f70de45cbfce46c66fe19349a21ce5a3e0/app/src/apiClient.ts#L11). (For the purposes of CSRF, the value of the custom header is irrelevant.)\r\n\r\nWhat you're suggesting has two disadvantages:\r\n1. Making it return `''` for `undefined` is API breaking behavior. If anyone else were to implement CSRF security like me, you would be breaking their security!\r\n2. It's impossible to test for the (non)existence of a header using this function - `''` is a valid header value.",
          "@AlexErrant \r\n\r\nThanks for the detailed explanation. I've reconsidered. You are right. \"We should not return `''`\".\r\n\r\nSo, I want to accept your PR, but some tests fail because of type mismatches. Could you fix the tests?",
          "@AlexErrant \r\n\r\nAnd, please do `yarn denoify`. This is needed to generate the code for Deno.",
          "LMK if you'd rather _not_ have that last commit.",
          "Thanks!"
        ]
      }
    ],
    "v3.0.0-rc.14": [],
    "v3.0.0-rc.13": [],
    "v3.0.0-rc.12": [
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 829,
        "title": "perf: use `substring` and `//.test` ...",
        "body": "This PR makes Hono faster with small improvements.\r\n\r\nNote:\r\n\r\n* `substring` is faster than `slice`\r\n* `indexOf ...` if faster than `//.test`",
        "html_url": "https://github.com/honojs/hono/pull/829",
        "comments": [
          "Buns' tests failed may be because of Bun self. I'll merge."
        ]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 830,
        "title": "fix(bun): fixed throwing the error in `HTTPException`",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/830",
        "comments": []
      },
      {
        "pr_number": 831,
        "title": "feat(validator): support multiple handlers w/ complex patterns.",
        "body": "This PR enable we can register multiple validator/handlers with complex patterns.\r\n\r\nSee: <https://github.com/honojs/hono/issues/823>\r\n\r\nThanks to everyone, it comes true. We can write like this:\r\n\r\n<img width=\"974\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/213915299-df0ea5c5-cfec-43a0-a600-7c0a3f74e43b.png\">\r\n\r\nNote:\r\n\r\n* We can't register over ten handlers with validators. Have to write it down in the document when releasing the \"v3\".\r\n* There may be some things to fix, but I'll merge them in, to be fixed later.\r\n",
        "html_url": "https://github.com/honojs/hono/pull/831",
        "comments": []
      },
      {
        "pr_number": 832,
        "title": "feat(req): support `c.req.valid('query')`",
        "body": "In this PR, we can specify which type of data we want to get by `c.req.valid()` such as `c.req.valid('query')`.\r\n\r\n```ts\r\napi.get(\r\n  '/',\r\n  zValidator(\r\n    'query',\r\n    z.object({\r\n      page: z.number(),\r\n    })\r\n  ),\r\n  (c) => {\r\n    const { page } = c.req.valid('query')\r\n    return c.text(`Current page is ${page}`)\r\n  }\r\n)\r\n```\r\n\r\n<img width=\"593\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/213920690-0982dfd5-37c8-48dd-b569-f4a890bce295.png\">\r\n\r\nWe can call `c.req.valid()` with no arguments as always to get all the data.",
        "html_url": "https://github.com/honojs/hono/pull/832",
        "comments": []
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 837,
        "title": "fix(cloudflare-pages): fix type incompatibility",
        "body": "This will fix #833 ",
        "html_url": "https://github.com/honojs/hono/pull/837",
        "comments": [
          "Thanks for the fix, it works with both newer compatibility date and old one! I'm not sure if it's the best idea to define `EventContext` on Hono's side rather than to `import` it from `@cloudflare/workers-types`, but we can revisit this if another problem occurs in the future. Let's go this way for the time being.",
          "FWIW, the oldest compatibility date that causes the error is 2022-01-31, but I haven't yet figured out which part of the change is the reason.\r\n\r\n<details>\r\n    <summary>See the diff</summary>\r\n\r\n```diff\r\n===================================================================\r\n--- 2021-11-03\r\n+++ 2022-01-31\r\n@@ -449,31 +449,21 @@\r\n   blobs?: ((ArrayBuffer | string) | null)[];\r\n }\r\n declare class Event {\r\n   constructor(type: string, init?: EventInit);\r\n-  /** Returns the type of event, e.g. \"click\", \"hashchange\", or \"submit\". */\r\n-  readonly type: string;\r\n-  /** Returns the event's phase, which is one of NONE, CAPTURING_PHASE, AT_TARGET, and BUBBLING_PHASE. */\r\n-  readonly eventPhase: number;\r\n-  /** Returns true or false depending on how event was initialized. True if event invokes listeners past a ShadowRoot node that is the root of its target, and false otherwise. */\r\n-  readonly composed: boolean;\r\n-  /** Returns true or false depending on how event was initialized. True if event goes through its target's ancestors in reverse tree order, and false otherwise. */\r\n-  readonly bubbles: boolean;\r\n-  /** Returns true or false depending on how event was initialized. Its return value does not always carry meaning, but true can indicate that part of the operation during which event was dispatched, can be canceled by invoking the preventDefault() method. */\r\n-  readonly cancelable: boolean;\r\n-  /** Returns true if preventDefault() was invoked successfully to indicate cancelation, and false otherwise. */\r\n-  readonly defaultPrevented: boolean;\r\n-  /** @deprecated */\r\n-  readonly returnValue: boolean;\r\n-  /** Returns the object whose event listener's callback is currently being invoked. */\r\n-  readonly currentTarget?: EventTarget;\r\n-  /** @deprecated */\r\n-  readonly srcElement?: EventTarget;\r\n-  /** Returns the event's timestamp as the number of milliseconds measured relative to the time origin. */\r\n-  readonly timeStamp: number;\r\n-  /** Returns true if event was dispatched by the user agent, and false otherwise. */\r\n-  readonly isTrusted: boolean;\r\n-  cancelBubble: boolean;\r\n+  get type(): string;\r\n+  get eventPhase(): number;\r\n+  get composed(): boolean;\r\n+  get bubbles(): boolean;\r\n+  get cancelable(): boolean;\r\n+  get defaultPrevented(): boolean;\r\n+  get returnValue(): boolean;\r\n+  get currentTarget(): EventTarget | undefined;\r\n+  get srcElement(): EventTarget | undefined;\r\n+  get timeStamp(): number;\r\n+  get isTrusted(): boolean;\r\n+  get cancelBubble(): boolean;\r\n+  set cancelBubble(value: boolean);\r\n   stopImmediatePropagation(): void;\r\n   preventDefault(): void;\r\n   stopPropagation(): void;\r\n   composedPath(): EventTarget[];\r\n@@ -525,18 +515,16 @@\r\n   handleEvent: (event: Event) => any | undefined;\r\n }\r\n declare class AbortController {\r\n   constructor();\r\n-  /** Returns the AbortSignal object associated with this object. */\r\n-  readonly signal: AbortSignal;\r\n+  get signal(): AbortSignal;\r\n   abort(reason?: any): void;\r\n }\r\n declare abstract class AbortSignal extends EventTarget {\r\n   static abort(reason?: any): AbortSignal;\r\n   static timeout(delay: number): AbortSignal;\r\n-  /** Returns true if this AbortSignal's AbortController has signaled to abort, and false otherwise. */\r\n-  readonly aborted: boolean;\r\n-  readonly reason: any;\r\n+  get aborted(): boolean;\r\n+  get reason(): any;\r\n   throwIfAborted(): void;\r\n }\r\n declare interface Scheduler {\r\n   wait(delay: number, maybeOptions?: SchedulerWaitOptions): Promise<void>;\r\n@@ -551,10 +539,10 @@\r\n   constructor(\r\n     bits?: ((ArrayBuffer | ArrayBufferView) | string | Blob)[],\r\n     options?: BlobOptions\r\n   );\r\n-  readonly size: number;\r\n-  readonly type: string;\r\n+  get size(): number;\r\n+  get type(): string;\r\n   slice(start?: number, end?: number, type?: string): Blob;\r\n   arrayBuffer(): Promise<ArrayBuffer>;\r\n   text(): Promise<string>;\r\n   stream(): ReadableStream;\r\n@@ -567,10 +555,10 @@\r\n     bits: ((ArrayBuffer | ArrayBufferView) | string | Blob)[] | undefined,\r\n     name: string,\r\n     options?: FileOptions\r\n   );\r\n-  readonly name: string;\r\n-  readonly lastModified: number;\r\n+  get name(): string;\r\n+  get lastModified(): number;\r\n }\r\n declare interface FileOptions {\r\n   type?: string;\r\n   lastModified?: number;\r\n@@ -590,10 +578,9 @@\r\n declare interface CacheQueryOptions {\r\n   ignoreMethod?: boolean;\r\n }\r\n declare abstract class Crypto {\r\n-  /** Available only in secure contexts. */\r\n-  readonly subtle: SubtleCrypto;\r\n+  get subtle(): SubtleCrypto;\r\n   getRandomValues<\r\n     T extends\r\n       | Int8Array\r\n       | Uint8Array\r\n@@ -791,25 +778,25 @@\r\n declare class DigestStream extends WritableStream<\r\n   ArrayBuffer | ArrayBufferView\r\n > {\r\n   constructor(algorithm: string | SubtleCryptoHashAlgorithm);\r\n-  readonly digest: Promise<ArrayBuffer>;\r\n+  get digest(): Promise<ArrayBuffer>;\r\n }\r\n declare class TextDecoder {\r\n   constructor(decoder?: string, options?: TextDecoderConstructorOptions);\r\n   decode(\r\n     input?: ArrayBuffer | ArrayBufferView,\r\n     options?: TextDecoderDecodeOptions\r\n   ): string;\r\n-  readonly encoding: string;\r\n-  readonly fatal: boolean;\r\n-  readonly ignoreBOM: boolean;\r\n+  get encoding(): string;\r\n+  get fatal(): boolean;\r\n+  get ignoreBOM(): boolean;\r\n }\r\n declare class TextEncoder {\r\n   constructor();\r\n   encode(input?: string): Uint8Array;\r\n   encodeInto(input: string, buffer: Uint8Array): TextEncoderEncodeIntoResult;\r\n-  readonly encoding: string;\r\n+  get encoding(): string;\r\n }\r\n declare interface TextDecoderConstructorOptions {\r\n   fatal: boolean;\r\n   ignoreBOM: boolean;\r\n@@ -952,10 +939,10 @@\r\n   | Blob\r\n   | URLSearchParams\r\n   | FormData;\r\n declare abstract class Body {\r\n-  readonly body: ReadableStream | null;\r\n-  readonly bodyUsed: boolean;\r\n+  get body(): ReadableStream | null;\r\n+  get bodyUsed(): boolean;\r\n   arrayBuffer(): Promise<ArrayBuffer>;\r\n   text(): Promise<string>;\r\n   json<T>(): Promise<T>;\r\n   formData(): Promise<FormData>;\r\n@@ -965,16 +952,16 @@\r\n   constructor(body?: BodyInit | null, init?: ResponseInit);\r\n   static redirect(url: string, status?: number): Response;\r\n   static json(any: any, maybeInit?: ResponseInit | Response): Response;\r\n   clone(): Response;\r\n-  readonly status: number;\r\n-  readonly statusText: string;\r\n-  readonly headers: Headers;\r\n-  readonly ok: boolean;\r\n-  readonly redirected: boolean;\r\n-  readonly url: string;\r\n-  readonly webSocket: WebSocket | null;\r\n-  readonly cf?: any;\r\n+  get status(): number;\r\n+  get statusText(): string;\r\n+  get headers(): Headers;\r\n+  get ok(): boolean;\r\n+  get redirected(): boolean;\r\n+  get url(): string;\r\n+  get webSocket(): WebSocket | null;\r\n+  get cf(): any | undefined;\r\n }\r\n declare interface ResponseInit {\r\n   status?: number;\r\n   statusText?: string;\r\n@@ -986,20 +973,15 @@\r\n declare type RequestInfo = Request | string | URL;\r\n declare class Request<CfHostMetadata = unknown> extends Body {\r\n   constructor(input: RequestInfo, init?: RequestInit);\r\n   clone(): Request<CfHostMetadata>;\r\n-  /** Returns request's HTTP method, which is \"GET\" by default. */\r\n-  readonly method: string;\r\n-  /** Returns the URL of request as a string. */\r\n-  readonly url: string;\r\n-  /** Returns a Headers object consisting of the headers associated with request. Note that headers added in the network layer by the user agent will not be accounted for in this object, e.g., the \"Host\" header. */\r\n-  readonly headers: Headers;\r\n-  /** Returns the redirect mode associated with request, which is a string indicating how redirects for the request will be handled during fetching. A request will follow redirects by default. */\r\n-  readonly redirect: string;\r\n-  readonly fetcher: Fetcher | null;\r\n-  /** Returns the signal associated with request, which is an AbortSignal object indicating whether or not request has been aborted, and its abort event handler. */\r\n-  readonly signal: AbortSignal;\r\n-  readonly cf?: IncomingRequestCfProperties<CfHostMetadata>;\r\n+  get method(): string;\r\n+  get url(): string;\r\n+  get headers(): Headers;\r\n+  get redirect(): string;\r\n+  get fetcher(): Fetcher | null;\r\n+  get signal(): AbortSignal;\r\n+  get cf(): IncomingRequestCfProperties<CfHostMetadata> | undefined;\r\n }\r\n declare interface RequestInit<\r\n   CfType = IncomingRequestCfProperties | RequestInitCfProperties\r\n > {\r\n@@ -1365,9 +1347,9 @@\r\n       value?: undefined;\r\n     };\r\n /** This Streams API interface represents a readable stream of byte data. The Fetch API offers a concrete instance of a ReadableStream through the body property of a Response object. */\r\n declare interface ReadableStream<R = any> {\r\n-  readonly locked: boolean;\r\n+  get locked(): boolean;\r\n   cancel(reason?: any): Promise<void>;\r\n   getReader(): ReadableStreamDefaultReader<R>;\r\n   getReader(options: ReadableStreamGetReaderOptions): ReadableStreamBYOBReader;\r\n   pipeThrough<T>(\r\n@@ -1396,16 +1378,16 @@\r\n   ): ReadableStream<R>;\r\n };\r\n declare class ReadableStreamDefaultReader<R = any> {\r\n   constructor(stream: ReadableStream);\r\n-  readonly closed: Promise<void>;\r\n+  get closed(): Promise<void>;\r\n   cancel(reason?: any): Promise<void>;\r\n   read(): Promise<ReadableStreamReadResult<R>>;\r\n   releaseLock(): void;\r\n }\r\n declare class ReadableStreamBYOBReader {\r\n   constructor(stream: ReadableStream);\r\n-  readonly closed: Promise<void>;\r\n+  get closed(): Promise<void>;\r\n   cancel(reason?: any): Promise<void>;\r\n   read<T extends ArrayBufferView>(\r\n     view: T\r\n   ): Promise<ReadableStreamReadResult<T>>;\r\n@@ -1461,18 +1443,18 @@\r\n   constructor(\r\n     underlyingSink?: UnderlyingSink,\r\n     queuingStrategy?: QueuingStrategy\r\n   );\r\n-  readonly locked: boolean;\r\n+  get locked(): boolean;\r\n   abort(reason?: any): Promise<void>;\r\n   close(): Promise<void>;\r\n   getWriter(): WritableStreamDefaultWriter<W>;\r\n }\r\n declare class WritableStreamDefaultWriter<W = any> {\r\n   constructor(stream: WritableStream);\r\n-  readonly closed: Promise<void>;\r\n-  readonly ready: Promise<void>;\r\n-  readonly desiredSize: number | null;\r\n+  get closed(): Promise<void>;\r\n+  get ready(): Promise<void>;\r\n+  get desiredSize(): number | null;\r\n   abort(reason?: any): Promise<void>;\r\n   close(): Promise<void>;\r\n   write(chunk?: W): Promise<void>;\r\n   releaseLock(): void;\r\n@@ -1482,10 +1464,10 @@\r\n     transformer?: Transformer<I, O>,\r\n     writableStrategy?: QueuingStrategy<I>,\r\n     readableStrategy?: QueuingStrategy<O>\r\n   );\r\n-  readonly readable: ReadableStream<O>;\r\n-  readonly writable: WritableStream<I>;\r\n+  get readable(): ReadableStream<O>;\r\n+  get writable(): WritableStream<I>;\r\n }\r\n declare class FixedLengthStream extends IdentityTransformStream {\r\n   constructor(expectedLength: number | bigint);\r\n }\r\n@@ -1601,20 +1583,30 @@\r\n   fromTrace(item: TraceItem): TraceMetrics;\r\n }\r\n declare class URL {\r\n   constructor(url: string | URL, base?: string | URL);\r\n-  href: string;\r\n-  readonly origin: string;\r\n-  protocol: string;\r\n-  username: string;\r\n-  password: string;\r\n-  host: string;\r\n-  hostname: string;\r\n-  port: string;\r\n-  pathname: string;\r\n-  search: string;\r\n-  readonly searchParams: URLSearchParams;\r\n-  hash: string;\r\n+  get href(): string;\r\n+  set href(value: string);\r\n+  get origin(): string;\r\n+  get protocol(): string;\r\n+  set protocol(value: string);\r\n+  get username(): string;\r\n+  set username(value: string);\r\n+  get password(): string;\r\n+  set password(value: string);\r\n+  get host(): string;\r\n+  set host(value: string);\r\n+  get hostname(): string;\r\n+  set hostname(value: string);\r\n+  get port(): string;\r\n+  set port(value: string);\r\n+  get pathname(): string;\r\n+  set pathname(value: string);\r\n+  get search(): string;\r\n+  set search(value: string);\r\n+  get searchParams(): URLSearchParams;\r\n+  get hash(): string;\r\n+  set hash(value: string);\r\n   toString(): string;\r\n   toJSON(): string;\r\n }\r\n declare class URLSearchParams {\r\n@@ -1732,16 +1724,12 @@\r\n   static readonly READY_STATE_CONNECTING: number;\r\n   static readonly READY_STATE_OPEN: number;\r\n   static readonly READY_STATE_CLOSING: number;\r\n   static readonly READY_STATE_CLOSED: number;\r\n-  /** Returns the state of the WebSocket object's connection. It can have the values described below. */\r\n-  readonly readyState: number;\r\n-  /** Returns the URL that was used to establish the WebSocket connection. */\r\n-  readonly url: string | null;\r\n-  /** Returns the subprotocol selected by the server, if any. It can be used in conjunction with the array form of the constructor's second argument to perform subprotocol negotiation. */\r\n-  readonly protocol: string | null;\r\n-  /** Returns the extensions selected by the server, if any. */\r\n-  readonly extensions: string | null;\r\n+  get readyState(): number;\r\n+  get url(): string | null;\r\n+  get protocol(): string | null;\r\n+  get extensions(): string | null;\r\n }\r\n declare const WebSocketPair: {\r\n   new (): {\r\n     0: WebSocket;\r\n```\r\n\r\n</details>",
          "Wait, the following patch to `handler.d.ts` (I mean, manually editing node_modules) also removes the error.\r\n\r\n```diff\r\n+ /// <reference types=\"@cloudflare/workers-types\" />\r\n- import type { EventContext } from '@cloudflare/workers-types';\r\n  import type { Hono } from '../../hono';\r\n  import type { Env } from '../../types';\r\n  export declare const handle: <E extends Env>(app: Hono<E, import(\"../../types\").Route, {}, {}>) => (eventContext: EventContext<{}, string, {}>) => Response | Promise<Response>;\r\n```\r\n\r\nThis seems to be the canonical solution in the sense that this uses a type definition in `@cloudflare/workers-types`. However, I don't know the difference between `import`ing types and triple-slash directive.",
          "The things related to Types are tricky:(\r\n\r\n> I'm not sure if defining EventContext on Hono's side rather than importing it from @cloudflare/workers-types,\r\n\r\nUsing `EventContext` imported from `@cloudflare/workers-types` as you did, I got an error, so I solved it by defining a minimal and compatible EventContext on Hono side. I think the way I did looks good, but I will look into it tomorrow to see if there are any side effects. And also about triple-slash.\r\n",
          "I noticed the part you quoted wasn't a complete sentence, but I guess you understand my intention (now fixed in the original comment).\r\n\r\n> I will look into it tomorrow to see if there are any side effects. And also about triple-slash.\r\n\r\nSorry for troubling you, but much appreciated!\r\n",
          "Hi @yudai-nkt !\r\n\r\nIt seems to be better to use \"triple-slash\". With my implementation writing `EventContext` in Hono side, that will be `any` in pages functions:\r\n\r\n<img width=\"461\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/214593945-445e0099-cd44-49e8-9cc2-b87c027ce824.png\">\r\n\r\nBut, with tripe-slash, it will be `EventContext` correctly:\r\n\r\n<img width=\"455\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/214594044-e371f7b3-1259-46f0-a79e-fc14f6275916.png\">\r\n\r\nYou are right, we should use the `@cloudflare/workers-types` type. I think triple-slash is appropriate in this case since using `import` will cause a mismatch in the Request type.",
          "Ah, CI failed. Looks like triple-slash is polluting the `Request` and other APIs.",
          "Hi @stefanmaric !\r\n\r\nDo you know of any good solutions?",
          "> With my implementation writing `EventContext` in Hono side, that will be `any` in pages functions:\r\n\r\nThis was a good catch, but sad to see CI fails. \ud83d\ude22\r\n\r\nI thought #733 removed prototype pollution, so the result is kinda surprising.",
          "By the way, `yarn test` seems to run tests in `deno_dist`, `test_bun`, `test_lagon`, `test_node`, `test_fastly`, and `test_deno` and fails. Is this intended?",
          "> I thought https://github.com/honojs/hono/pull/733 removed prototype pollution, so the result is kinda surprising.\r\n\r\nSo, the `Request` used in `HonoRequest.raw` is polluted.\r\n\r\n> By the way, yarn test seems to run tests in deno_dist, test_bun, test_lagon, test_node, test_fastly, and test_deno and fails. Is this intended?\r\n\r\nNo. It's wired.\r\n\r\nBut, the test with this fix <https://github.com/honojs/hono/pull/837/commits/45a43157f1f1d03787dda316df871039c19cfe2b> succeed. This is defining `EventContext` in Hono side pattern. The `EventContext` did not contain `passThroughOnException` and we needed to remove it, and it has the type.\r\n\r\n<img width=\"333\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/214607709-3901ea6a-63bb-4ce3-b2e6-dfba04da9eb6.png\">\r\n",
          "CI doesn't run those unrelated tests, so it seems like a problem in my environment. Thanks.\r\n\r\nGlad to see CI passes while `EventContext` having the correct type! Would like to hear @stefanmaric's thoughts.",
          "OK, no response from stefan, but I'll merge it.\r\n\r\n@stefanmaric If you have any feedback later, create the issue, let us know!"
        ]
      },
      {
        "pr_number": 845,
        "title": "feat(reg-exp-router): Lookup static path by using Object",
        "body": "Optimize paths that do not contain variables by doing a lookup via Object.\r\nThis optimization will also reduce the size of the regular expression generated when static paths are included, so there will be no negative impact on the overall result.",
        "html_url": "https://github.com/honojs/hono/pull/845",
        "comments": [
          "### TODO\r\n\r\n* [x] Need to check for ambiguous paths. (does not affect performance)",
          "Completed.\r\n\r\n* [x] static path ambiguous check\r\n* [x] merge next branch\r\n* [x] denoify ",
          "@usualoma \r\n\r\nLooks good! It becomes really ultra fast! You already know this, but for reference, here are the results in my environment with the changes. It is the fastest not only in \"all together\" but in most others.\r\n\r\n<img width=\"641\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/215305492-f50fb65a-52e4-4846-bffe-8d9f800bf82f.png\">\r\n\r\n<img width=\"587\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/215305499-e75e4eb3-4fb6-478d-bc92-4b6972efe55e.png\">\r\n\r\n`find-my-way` is used in Fastify, and the other routers are all top-class among the many JavaScript routers. So, winning them means that RegExpRouter is now the fastest router in the JavaScript world!! You can be proud of this work.\r\n\r\nGreat!! Thanks!!",
          "@yusukebe Thanks!\r\n\r\nThanks to Router::Boom, thanks to hono's project, thanks to the points made by the benchmark script in #843, I think we got this result.\r\nI too am happy to be involved with the hono's RegExpRouter that is the fastest in the world."
        ]
      },
      {
        "pr_number": 843,
        "title": "chore: benchmark of routers",
        "body": "Added benchmark scripts for measuring the speed of HTTP routers on Node.js and Bun.\r\n\r\nIn conclusion, in my environment, RegExpRouter is the third fastest on Node.js and the first or second fastest on Bun. Unfortunately, TrieRouter is slow (It's unavoidable because it has a sorting process). The difference in results between Bun and Node.js is probably due to Bun's regular expressions being faster.\r\n\r\n`@medley/router` used in [Elysia](https://elysiajs.com) and `koa-tree-router` are fast. Our advantage is that the file sizes are smaller than anywhere else. And routings are also flexible for users' use-cases. So it is not a comparison in general, but the result is the result.\r\n\r\n## Node.js\r\n\r\n```\r\n---------------------------------------------------------------------------- -----------------------------\r\n\u2022 short static - GET /user\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     140.13 ns/iter (127.78 ns \u2026 204.16 ns) 141.62 ns  191.8 ns 204.08 ns\r\nHono TrieRouter                       212.64 ns/iter (208.33 ns \u2026 287.68 ns) 212.97 ns 268.56 ns 271.18 ns\r\n@medley/router                        102.52 ns/iter   (97.63 ns \u2026 165.8 ns) 105.03 ns 148.52 ns 152.68 ns\r\nfind-my-way                            92.51 ns/iter  (85.26 ns \u2026 105.31 ns)  95.32 ns 100.29 ns 102.32 ns\r\nkoa-tree-router                        89.93 ns/iter    (83.4 ns \u2026 105.3 ns)  92.71 ns 101.17 ns 101.98 ns\r\ntrek-router                           118.23 ns/iter  (109.71 ns \u2026 129.4 ns) 121.31 ns 126.18 ns 127.26 ns\r\nexpress (WARNING: includes handling)  650.04 ns/iter  (639.19 ns \u2026 708.6 ns) 652.52 ns  708.6 ns  708.6 ns\r\nkoa-router                                 2 \u00b5s/iter     (1.92 \u00b5s \u2026 2.07 \u00b5s)   2.04 \u00b5s   2.07 \u00b5s   2.07 \u00b5s\r\n\r\nsummary for short static - GET /user\r\n  koa-tree-router\r\n   1.03x faster than find-my-way\r\n   1.14x faster than @medley/router\r\n   1.31x faster than trek-router\r\n   1.56x faster than Hono RegExpRouter\r\n   2.36x faster than Hono TrieRouter\r\n   7.23x faster than express (WARNING: includes handling)\r\n   22.23x faster than koa-router\r\n```\r\n\r\n```\r\n\u2022 static with same radix - GET /user/comments\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     142.34 ns/iter (138.05 ns \u2026 167.55 ns) 147.97 ns 155.47 ns 159.52 ns\r\nHono TrieRouter                       228.57 ns/iter (220.69 ns \u2026 245.82 ns) 232.03 ns 238.06 ns 238.82 ns\r\n@medley/router                        147.26 ns/iter (138.96 ns \u2026 165.74 ns) 146.72 ns 158.76 ns 161.97 ns\r\nfind-my-way                           160.25 ns/iter (156.06 ns \u2026 178.38 ns) 166.26 ns 175.93 ns 177.41 ns\r\nkoa-tree-router                       125.24 ns/iter (121.52 ns \u2026 147.05 ns)  130.7 ns 136.93 ns 138.42 ns\r\ntrek-router                           174.28 ns/iter (170.04 ns \u2026 193.75 ns) 179.93 ns  189.7 ns 190.02 ns\r\nexpress (WARNING: includes handling)  649.44 ns/iter (643.57 ns \u2026 677.34 ns) 650.24 ns 677.34 ns 677.34 ns\r\nkoa-router                              1.93 \u00b5s/iter     (1.93 \u00b5s \u2026 1.96 \u00b5s)   1.94 \u00b5s   1.96 \u00b5s   1.96 \u00b5s\r\n\r\nsummary for static with same radix - GET /user/comments\r\n  koa-tree-router\r\n   1.14x faster than Hono RegExpRouter\r\n   1.18x faster than @medley/router\r\n   1.28x faster than find-my-way\r\n   1.39x faster than trek-router\r\n   1.83x faster than Hono TrieRouter\r\n   5.19x faster than express (WARNING: includes handling)\r\n   15.44x faster than koa-router\r\n```\r\n\r\n```\r\n\u2022 dynamic route - GET /user/lookup/username/hey\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     177.13 ns/iter (171.65 ns \u2026 205.41 ns) 181.94 ns  191.4 ns 197.01 ns\r\nHono TrieRouter                       346.78 ns/iter (335.76 ns \u2026 370.08 ns) 347.71 ns  367.4 ns 370.08 ns\r\n@medley/router                        197.79 ns/iter (193.47 ns \u2026 212.85 ns) 200.01 ns 210.51 ns 212.78 ns\r\nfind-my-way                            232.1 ns/iter (226.94 ns \u2026 249.44 ns) 237.56 ns  244.4 ns 245.99 ns\r\nkoa-tree-router                       184.69 ns/iter (179.14 ns \u2026 205.31 ns) 188.95 ns 195.54 ns 195.56 ns\r\ntrek-router                           274.84 ns/iter  (268.82 ns \u2026 300.5 ns) 279.72 ns 292.21 ns  300.5 ns\r\nexpress (WARNING: includes handling)    1.24 \u00b5s/iter     (1.22 \u00b5s \u2026 1.34 \u00b5s)   1.25 \u00b5s   1.34 \u00b5s   1.34 \u00b5s\r\nkoa-router                              1.94 \u00b5s/iter     (1.93 \u00b5s \u2026 1.97 \u00b5s)   1.95 \u00b5s   1.97 \u00b5s   1.97 \u00b5s\r\n\r\nsummary for dynamic route - GET /user/lookup/username/hey\r\n  Hono RegExpRouter\r\n   1.04x faster than koa-tree-router\r\n   1.12x faster than @medley/router\r\n   1.31x faster than find-my-way\r\n   1.55x faster than trek-router\r\n   1.96x faster than Hono TrieRouter\r\n   6.99x faster than express (WARNING: includes handling)\r\n   10.97x faster than koa-router\r\n```\r\n\r\n```\r\n\u2022 mixed static dynamic - GET /event/abcd1234/comments\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     170.34 ns/iter (165.74 ns \u2026 194.03 ns) 175.47 ns 181.81 ns 183.15 ns\r\nHono TrieRouter                       343.89 ns/iter (333.45 ns \u2026 361.15 ns) 345.72 ns 360.02 ns 361.15 ns\r\n@medley/router                        163.86 ns/iter  (160.07 ns \u2026 192.6 ns) 163.96 ns 175.24 ns 179.88 ns\r\nfind-my-way                           204.68 ns/iter (199.88 ns \u2026 224.42 ns) 209.68 ns 219.07 ns 222.63 ns\r\nkoa-tree-router                        154.1 ns/iter (148.82 ns \u2026 177.18 ns) 159.07 ns 164.34 ns 166.34 ns\r\ntrek-router                           242.45 ns/iter    (237 ns \u2026 269.24 ns) 247.57 ns  256.9 ns 261.64 ns\r\nexpress (WARNING: includes handling)    1.37 \u00b5s/iter     (1.36 \u00b5s \u2026 1.39 \u00b5s)   1.37 \u00b5s   1.39 \u00b5s   1.39 \u00b5s\r\nkoa-router                              1.96 \u00b5s/iter     (1.96 \u00b5s \u2026 1.99 \u00b5s)   1.97 \u00b5s   1.99 \u00b5s   1.99 \u00b5s\r\n\r\nsummary for mixed static dynamic - GET /event/abcd1234/comments\r\n  koa-tree-router\r\n   1.06x faster than @medley/router\r\n   1.11x faster than Hono RegExpRouter\r\n   1.33x faster than find-my-way\r\n   1.57x faster than trek-router\r\n   2.23x faster than Hono TrieRouter\r\n   8.87x faster than express (WARNING: includes handling)\r\n   12.75x faster than koa-router\r\n```\r\n\r\n```\r\n\u2022 post - POST /event/abcd1234/comment\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     144.05 ns/iter (139.87 ns \u2026 167.19 ns) 149.78 ns 156.18 ns    158 ns\r\nHono TrieRouter                       348.78 ns/iter (338.37 ns \u2026 370.21 ns) 350.56 ns 368.32 ns 370.21 ns\r\n@medley/router                        143.85 ns/iter (140.32 ns \u2026 165.14 ns) 145.48 ns 156.71 ns 162.33 ns\r\nfind-my-way                           201.54 ns/iter (189.71 ns \u2026 218.24 ns) 207.03 ns 211.65 ns 213.17 ns\r\nkoa-tree-router                       143.99 ns/iter (139.08 ns \u2026 160.36 ns) 149.27 ns 157.24 ns 157.63 ns\r\ntrek-router                           208.32 ns/iter (203.03 ns \u2026 234.24 ns) 213.88 ns 217.34 ns 223.78 ns\r\nexpress (WARNING: includes handling)     1.4 \u00b5s/iter     (1.39 \u00b5s \u2026 1.43 \u00b5s)   1.41 \u00b5s   1.43 \u00b5s   1.43 \u00b5s\r\nkoa-router                              1.98 \u00b5s/iter     (1.95 \u00b5s \u2026 2.09 \u00b5s)   1.97 \u00b5s   2.09 \u00b5s   2.09 \u00b5s\r\n\r\nsummary for post - POST /event/abcd1234/comment\r\n  @medley/router\r\n   1x faster than koa-tree-router\r\n   1x faster than Hono RegExpRouter\r\n   1.4x faster than find-my-way\r\n   1.45x faster than trek-router\r\n   2.42x faster than Hono TrieRouter\r\n   9.77x faster than express (WARNING: includes handling)\r\n   13.76x faster than koa-router\r\n```\r\n\r\n```\r\n\u2022 long static - GET /very/deeply/nested/route/hello/there\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     157.36 ns/iter (153.27 ns \u2026 171.93 ns) 163.09 ns 169.76 ns 169.88 ns\r\nHono TrieRouter                       330.73 ns/iter (327.63 ns \u2026 348.84 ns) 330.72 ns 340.64 ns 348.84 ns\r\n@medley/router                        119.18 ns/iter (116.12 ns \u2026 137.22 ns) 120.24 ns 129.64 ns 135.63 ns\r\nfind-my-way                           202.87 ns/iter (197.88 ns \u2026 227.67 ns) 208.79 ns 215.96 ns 220.36 ns\r\nkoa-tree-router                       118.05 ns/iter (114.83 ns \u2026 132.02 ns) 118.89 ns 129.57 ns 131.43 ns\r\ntrek-router                           137.67 ns/iter (133.75 ns \u2026 159.65 ns) 138.97 ns 148.92 ns 150.93 ns\r\nexpress (WARNING: includes handling)  946.79 ns/iter  (936.7 ns \u2026 978.62 ns) 952.38 ns 978.62 ns 978.62 ns\r\nkoa-router                              1.97 \u00b5s/iter     (1.93 \u00b5s \u2026 3.07 \u00b5s)   1.94 \u00b5s   3.07 \u00b5s   3.07 \u00b5s\r\n\r\nsummary for long static - GET /very/deeply/nested/route/hello/there\r\n  koa-tree-router\r\n   1.01x faster than @medley/router\r\n   1.17x faster than trek-router\r\n   1.33x faster than Hono RegExpRouter\r\n   1.72x faster than find-my-way\r\n   2.8x faster than Hono TrieRouter\r\n   8.02x faster than express (WARNING: includes handling)\r\n   16.69x faster than koa-router\r\n```\r\n\r\n```\r\n\u2022 wildcard - GET /static/index.html\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     151.54 ns/iter (147.36 ns \u2026 170.38 ns) 157.15 ns 161.79 ns 164.05 ns\r\nHono TrieRouter                       251.79 ns/iter (241.96 ns \u2026 263.23 ns) 254.75 ns 261.34 ns 262.23 ns\r\n@medley/router                        112.59 ns/iter (109.32 ns \u2026 128.28 ns) 113.77 ns 123.61 ns 126.79 ns\r\nfind-my-way                           178.03 ns/iter  (170.61 ns \u2026 197.7 ns)  183.5 ns 189.43 ns  191.6 ns\r\nkoa-tree-router                       155.66 ns/iter (149.68 ns \u2026 170.77 ns) 160.97 ns    165 ns 165.39 ns\r\ntrek-router                           183.27 ns/iter (176.93 ns \u2026 217.39 ns) 187.99 ns 203.07 ns 210.88 ns\r\nexpress (WARNING: includes handling)    1.59 \u00b5s/iter     (1.57 \u00b5s \u2026 1.62 \u00b5s)   1.59 \u00b5s   1.62 \u00b5s   1.62 \u00b5s\r\nkoa-router                              1.94 \u00b5s/iter     (1.93 \u00b5s \u2026 1.96 \u00b5s)   1.94 \u00b5s   1.96 \u00b5s   1.96 \u00b5s\r\n\r\nsummary for wildcard - GET /static/index.html\r\n  @medley/router\r\n   1.35x faster than Hono RegExpRouter\r\n   1.38x faster than koa-tree-router\r\n   1.58x faster than find-my-way\r\n   1.63x faster than trek-router\r\n   2.24x faster than Hono TrieRouter\r\n   14.08x faster than express (WARNING: includes handling)\r\n   17.21x faster than koa-router\r\n```\r\n\r\n```\r\n\u2022 all together\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     718.63 ns/iter  (714.32 ns \u2026 731.9 ns) 718.27 ns  731.9 ns  731.9 ns\r\nHono TrieRouter                         1.81 \u00b5s/iter     (1.78 \u00b5s \u2026 1.93 \u00b5s)   1.81 \u00b5s   1.93 \u00b5s   1.93 \u00b5s\r\n@medley/router                        636.27 ns/iter (616.76 ns \u2026 658.81 ns) 643.83 ns 658.81 ns 658.81 ns\r\nfind-my-way                             1.04 \u00b5s/iter     (1.03 \u00b5s \u2026 1.06 \u00b5s)   1.04 \u00b5s   1.06 \u00b5s   1.06 \u00b5s\r\nkoa-tree-router                       664.27 ns/iter (656.67 ns \u2026 698.83 ns) 668.99 ns 698.83 ns 698.83 ns\r\ntrek-router                             1.03 \u00b5s/iter     (1.02 \u00b5s \u2026 1.05 \u00b5s)   1.03 \u00b5s   1.05 \u00b5s   1.05 \u00b5s\r\nexpress (WARNING: includes handling)     7.8 \u00b5s/iter   (7.46 \u00b5s \u2026 180.96 \u00b5s)   7.71 \u00b5s   8.25 \u00b5s   8.46 \u00b5s\r\nkoa-router                             13.62 \u00b5s/iter  (13.04 \u00b5s \u2026 168.54 \u00b5s)  13.33 \u00b5s  14.25 \u00b5s  14.71 \u00b5s\r\n\r\nsummary for all together\r\n  @medley/router\r\n   1.04x faster than koa-tree-router\r\n   1.13x faster than Hono RegExpRouter\r\n   1.62x faster than trek-router\r\n   1.63x faster than find-my-way\r\n   2.84x faster than Hono TrieRouter\r\n   12.27x faster than express (WARNING: includes handling)\r\n   21.4x faster than koa-router\r\n```\r\n\r\n## Bun\r\n\r\n```\r\n---------------------------------------------------------------------------- -----------------------------\r\n\u2022 short static - GET /user\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     168.73 ns/iter (155.26 ns \u2026 529.23 ns) 160.26 ns 300.99 ns 442.68 ns\r\nHono TrieRouter                       299.78 ns/iter (283.41 ns \u2026 566.59 ns) 292.11 ns 392.59 ns 566.59 ns\r\n@medley/router                        138.87 ns/iter (130.71 ns \u2026 456.34 ns) 135.23 ns 214.85 ns 339.99 ns\r\nfind-my-way                           144.66 ns/iter (133.18 ns \u2026 540.48 ns) 136.62 ns 214.69 ns 269.18 ns\r\nkoa-tree-router                       145.17 ns/iter (136.34 ns \u2026 319.57 ns) 143.15 ns 209.65 ns 228.62 ns\r\ntrek-router                           202.52 ns/iter  (195.13 ns \u2026 297.4 ns) 198.32 ns 274.77 ns 286.13 ns\r\nexpress (WARNING: includes handling)  484.38 ns/iter (426.34 ns \u2026 627.66 ns) 514.05 ns 587.09 ns 627.66 ns\r\nkoa-router                            243.78 ns/iter (237.05 ns \u2026 368.07 ns) 238.96 ns 311.95 ns 314.21 ns\r\n\r\nsummary for short static - GET /user\r\n  @medley/router\r\n   1.04x faster than find-my-way\r\n   1.05x faster than koa-tree-router\r\n   1.22x faster than Hono RegExpRouter\r\n   1.46x faster than trek-router\r\n   1.76x faster than koa-router\r\n   2.16x faster than Hono TrieRouter\r\n   3.49x faster than express (WARNING: includes handling)\r\n```\r\n\r\n```\r\n\u2022 static with same radix - GET /user/comments\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     171.63 ns/iter (163.48 ns \u2026 265.79 ns)  166.2 ns 248.03 ns 257.31 ns\r\nHono TrieRouter                       347.94 ns/iter (331.75 ns \u2026 415.75 ns) 346.66 ns 408.46 ns 415.75 ns\r\n@medley/router                        183.44 ns/iter (177.56 ns \u2026 326.72 ns) 179.72 ns 256.21 ns  266.2 ns\r\nfind-my-way                           179.22 ns/iter (169.39 ns \u2026 310.33 ns) 172.55 ns 245.25 ns 259.35 ns\r\nkoa-tree-router                       219.69 ns/iter (202.87 ns \u2026 545.36 ns) 212.75 ns 391.11 ns 414.03 ns\r\ntrek-router                           323.44 ns/iter (311.88 ns \u2026 490.22 ns) 317.66 ns 468.47 ns 490.22 ns\r\nexpress (WARNING: includes handling)  514.78 ns/iter (464.45 ns \u2026 887.69 ns) 540.96 ns 792.68 ns 887.69 ns\r\nkoa-router                            247.07 ns/iter (240.22 ns \u2026 324.99 ns) 242.82 ns 308.39 ns 313.53 ns\r\n\r\nsummary for static with same radix - GET /user/comments\r\n  Hono RegExpRouter\r\n   1.04x faster than find-my-way\r\n   1.07x faster than @medley/router\r\n   1.28x faster than koa-tree-router\r\n   1.44x faster than koa-router\r\n   1.88x faster than trek-router\r\n   2.03x faster than Hono TrieRouter\r\n   3x faster than express (WARNING: includes handling)\r\n```\r\n\r\n```\r\n\u2022 dynamic route - GET /user/lookup/username/hey\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     200.52 ns/iter (187.81 ns \u2026 815.73 ns) 191.07 ns 283.99 ns  319.7 ns\r\nHono TrieRouter                       537.26 ns/iter (504.63 ns \u2026 743.42 ns) 558.99 ns 625.86 ns 743.42 ns\r\n@medley/router                        232.64 ns/iter (224.27 ns \u2026 397.93 ns) 228.27 ns  302.4 ns 304.69 ns\r\nfind-my-way                            255.5 ns/iter    (243 ns \u2026 394.65 ns) 248.55 ns 353.18 ns 374.52 ns\r\nkoa-tree-router                       317.31 ns/iter (296.53 ns \u2026 695.05 ns) 309.98 ns 616.73 ns 695.05 ns\r\ntrek-router                           477.65 ns/iter (459.42 ns \u2026 599.56 ns) 474.82 ns 552.95 ns 599.56 ns\r\nexpress (WARNING: includes handling)  680.13 ns/iter (622.32 ns \u2026 989.88 ns) 705.92 ns 989.88 ns 989.88 ns\r\nkoa-router                            260.56 ns/iter (245.98 ns \u2026 405.98 ns) 259.22 ns 356.82 ns 401.38 ns\r\n\r\nsummary for dynamic route - GET /user/lookup/username/hey\r\n  Hono RegExpRouter\r\n   1.16x faster than @medley/router\r\n   1.27x faster than find-my-way\r\n   1.3x faster than koa-router\r\n   1.58x faster than koa-tree-router\r\n   2.38x faster than trek-router\r\n   2.68x faster than Hono TrieRouter\r\n   3.39x faster than express (WARNING: includes handling)\r\n```\r\n\r\n```\r\n\u2022 mixed static dynamic - GET /event/abcd1234/comments\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     185.69 ns/iter (174.91 ns \u2026 350.57 ns) 178.87 ns 248.85 ns 250.18 ns\r\nHono TrieRouter                       495.27 ns/iter (467.85 ns \u2026 693.42 ns) 517.84 ns 669.43 ns 693.42 ns\r\n@medley/router                         204.9 ns/iter (196.53 ns \u2026 435.48 ns) 201.86 ns 268.48 ns 271.07 ns\r\nfind-my-way                           231.49 ns/iter (218.18 ns \u2026 651.66 ns) 224.91 ns 303.14 ns 422.08 ns\r\nkoa-tree-router                       232.55 ns/iter (213.71 ns \u2026 642.89 ns) 231.68 ns 335.15 ns  457.5 ns\r\ntrek-router                           375.87 ns/iter (357.45 ns \u2026 453.71 ns) 371.06 ns 452.52 ns 453.71 ns\r\nexpress (WARNING: includes handling)  744.96 ns/iter (690.56 ns \u2026 874.35 ns) 778.95 ns 874.35 ns 874.35 ns\r\nkoa-router                            280.95 ns/iter (273.88 ns \u2026 354.77 ns) 277.15 ns 354.35 ns 354.77 ns\r\n\r\nsummary for mixed static dynamic - GET /event/abcd1234/comments\r\n  Hono RegExpRouter\r\n   1.1x faster than @medley/router\r\n   1.25x faster than find-my-way\r\n   1.25x faster than koa-tree-router\r\n   1.51x faster than koa-router\r\n   2.02x faster than trek-router\r\n   2.67x faster than Hono TrieRouter\r\n   4.01x faster than express (WARNING: includes handling)\r\n```\r\n\r\n```\r\n\u2022 post - POST /event/abcd1234/comment\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                      176.4 ns/iter (165.13 ns \u2026 399.69 ns) 170.03 ns 340.78 ns 343.89 ns\r\nHono TrieRouter                        481.9 ns/iter  (459.2 ns \u2026 709.09 ns) 497.73 ns 544.45 ns 709.09 ns\r\n@medley/router                        196.83 ns/iter (190.49 ns \u2026 276.23 ns) 193.87 ns 257.18 ns 258.75 ns\r\nfind-my-way                           230.39 ns/iter (216.49 ns \u2026 432.98 ns) 225.69 ns 362.38 ns 396.37 ns\r\nkoa-tree-router                       197.11 ns/iter  (185.3 ns \u2026 409.62 ns) 189.76 ns 339.91 ns  369.8 ns\r\ntrek-router                           342.75 ns/iter (320.11 ns \u2026 482.31 ns) 338.26 ns  424.3 ns 482.31 ns\r\nexpress (WARNING: includes handling)  771.15 ns/iter (719.96 ns \u2026 868.24 ns)  801.8 ns 868.24 ns 868.24 ns\r\nkoa-router                            281.43 ns/iter    (270 ns \u2026 845.24 ns)  273.8 ns 431.55 ns 845.24 ns\r\n\r\nsummary for post - POST /event/abcd1234/comment\r\n  Hono RegExpRouter\r\n   1.12x faster than @medley/router\r\n   1.12x faster than koa-tree-router\r\n   1.31x faster than find-my-way\r\n   1.6x faster than koa-router\r\n   1.94x faster than trek-router\r\n   2.73x faster than Hono TrieRouter\r\n   4.37x faster than express (WARNING: includes handling)\r\n```\r\n\r\n```\r\n\u2022 long static - GET /very/deeply/nested/route/hello/there\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     186.33 ns/iter (173.07 ns \u2026 471.34 ns) 176.23 ns 423.24 ns  447.8 ns\r\nHono TrieRouter                       596.31 ns/iter (552.77 ns \u2026 885.07 ns) 622.17 ns 885.07 ns 885.07 ns\r\n@medley/router                         153.5 ns/iter (146.78 ns \u2026 276.27 ns) 150.01 ns 228.09 ns 233.19 ns\r\nfind-my-way                           225.42 ns/iter (211.88 ns \u2026 470.68 ns) 216.22 ns  368.7 ns 374.38 ns\r\nkoa-tree-router                       149.99 ns/iter  (138.15 ns \u2026 267.1 ns) 145.84 ns 238.43 ns 257.82 ns\r\ntrek-router                           223.83 ns/iter (214.91 ns \u2026 438.52 ns)  219.3 ns 294.52 ns 384.65 ns\r\nexpress (WARNING: includes handling)  704.11 ns/iter  (654.1 ns \u2026 871.75 ns) 731.77 ns 871.75 ns 871.75 ns\r\nkoa-router                            249.48 ns/iter (240.57 ns \u2026 461.07 ns) 243.83 ns 328.85 ns 430.88 ns\r\n\r\nsummary for long static - GET /very/deeply/nested/route/hello/there\r\n  koa-tree-router\r\n   1.02x faster than @medley/router\r\n   1.24x faster than Hono RegExpRouter\r\n   1.49x faster than trek-router\r\n   1.5x faster than find-my-way\r\n   1.66x faster than koa-router\r\n   3.98x faster than Hono TrieRouter\r\n   4.69x faster than express (WARNING: includes handling)\r\n```\r\n\r\n```\r\n\u2022 wildcard - GET /static/index.html\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     179.74 ns/iter  (168.36 ns \u2026 505.2 ns)  172.1 ns 301.09 ns 429.03 ns\r\nHono TrieRouter                       380.33 ns/iter (356.47 ns \u2026 660.87 ns)  379.8 ns 593.38 ns 660.87 ns\r\n@medley/router                        170.49 ns/iter (161.83 ns \u2026 295.87 ns) 167.55 ns 232.78 ns 261.57 ns\r\nfind-my-way                           204.86 ns/iter (191.16 ns \u2026 339.58 ns) 199.85 ns 288.19 ns 301.88 ns\r\nkoa-tree-router                       246.26 ns/iter (232.76 ns \u2026 343.84 ns) 239.21 ns 317.59 ns 323.75 ns\r\ntrek-router                           336.63 ns/iter (324.76 ns \u2026 511.53 ns) 329.93 ns 421.44 ns 511.53 ns\r\nexpress (WARNING: includes handling)  835.68 ns/iter (786.98 ns \u2026 921.52 ns) 865.44 ns 921.52 ns 921.52 ns\r\nkoa-router                            254.61 ns/iter    (247 ns \u2026 444.44 ns) 250.19 ns 319.26 ns 320.58 ns\r\n\r\nsummary for wildcard - GET /static/index.html\r\n  @medley/router\r\n   1.05x faster than Hono RegExpRouter\r\n   1.2x faster than find-my-way\r\n   1.44x faster than koa-tree-router\r\n   1.49x faster than koa-router\r\n   1.97x faster than trek-router\r\n   2.23x faster than Hono TrieRouter\r\n   4.9x faster than express (WARNING: includes handling)\r\n```\r\n\r\n```\r\n\u2022 all together\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     704.36 ns/iter (642.59 ns \u2026 840.34 ns) 727.19 ns 840.34 ns 840.34 ns\r\nHono TrieRouter                         2.61 \u00b5s/iter     (2.53 \u00b5s \u2026 2.89 \u00b5s)   2.63 \u00b5s   2.89 \u00b5s   2.89 \u00b5s\r\n@medley/router                        706.27 ns/iter (680.35 ns \u2026 813.39 ns) 729.65 ns 813.39 ns 813.39 ns\r\nfind-my-way                             1.05 \u00b5s/iter   (987.37 ns \u2026 1.38 \u00b5s)   1.07 \u00b5s   1.38 \u00b5s   1.38 \u00b5s\r\nkoa-tree-router                       951.36 ns/iter     (894.3 ns \u2026 1.1 \u00b5s) 978.63 ns    1.1 \u00b5s    1.1 \u00b5s\r\ntrek-router                             1.79 \u00b5s/iter     (1.74 \u00b5s \u2026 1.86 \u00b5s)   1.82 \u00b5s   1.86 \u00b5s   1.86 \u00b5s\r\nexpress (WARNING: includes handling)    4.37 \u00b5s/iter     (4.26 \u00b5s \u2026 5.09 \u00b5s)   4.36 \u00b5s   5.09 \u00b5s   5.09 \u00b5s\r\nkoa-router                              1.37 \u00b5s/iter     (1.33 \u00b5s \u2026 1.56 \u00b5s)    1.4 \u00b5s   1.56 \u00b5s   1.56 \u00b5s\r\n\r\nsummary for all together\r\n  Hono RegExpRouter\r\n   1x faster than @medley/router\r\n   1.35x faster than koa-tree-router\r\n   1.5x faster than find-my-way\r\n   1.94x faster than koa-router\r\n   2.54x faster than trek-router\r\n   3.71x faster than Hono TrieRouter\r\n   6.2x faster than express (WARNING: includes handling)\r\n```",
        "html_url": "https://github.com/honojs/hono/pull/843",
        "comments": [
          "Hi @usualoma !\r\n\r\nHow about these benchmark scripts and the results? If you like, you can run the scripts in your environment. And, we don't have to force to do it, but perhaps there is a point where we can improve it?",
          "@yusukebe \r\n\r\n#845 resulted in the following in my environment\r\n\r\n```\r\n% npm run bench:node\r\n\r\n...\r\n\r\nsummary for all together\r\n  Hono RegExpRouter\r\n   1.25x faster than koa-tree-router\r\n   1.26x faster than @medley/router\r\n   1.89x faster than trek-router\r\n   2.21x faster than find-my-way\r\n   4.18x faster than Hono TrieRouter\r\n   20.84x faster than express (WARNING: includes handling)\r\n   27.52x faster than koa-router\r\n```\r\n\r\nWhat do you think?",
          "@usualoma \r\n\r\nThanks. I'll check it later.",
          "Thanks for #845 .\r\n\r\nThis benchmark is very useful.\r\n\r\nFor example, benchmarks that handle HTTP requests such as these are also important. Of these, Hono is the fastest or second fastest.\r\n\r\n* https://github.com/denosaurs/benc\r\n* https://github.com/SaltyAom/bun-http-framework-benchmark\r\n\r\nHowever, these can be advantageous or disadvantageous depending on the features of each framework. For example, in the case of Hono, using header values is convenient for the users, but their handling is complicated inside the core.\r\n\r\nSo it is very important to have a benchmark that is less dependent on the specifications. With this, we can say that Hono is Ultra-fast.\r\n\r\nThen, you can use this benchmark script!"
        ]
      },
      {
        "pr_number": 850,
        "title": "Rename runtime keys",
        "body": "Resolves #844.",
        "html_url": "https://github.com/honojs/hono/pull/850",
        "comments": [
          "Hi @yujong-lee !\r\n\r\nThanks. One thing. We have to change the test, failed at this line:\r\n\r\nhttps://github.com/honojs/hono/actions/runs/4034617841/jobs/6935965327#step:7:331",
          "Thanks, I'll merge it."
        ]
      },
      {
        "pr_number": 853,
        "title": "feat: rewnew output types",
        "body": "This PR renews output types emitted from \"app\".\r\n\r\nBefore this PR, it will output types with `app.build()` and the client such as `hc` use it. But in this PR, we don't have to use `app.build()`, and emitted types are changed:\r\n\r\nFor example, write the endpoint with the validator middleware:\r\n\r\n```ts\r\nconst route = app.post(\r\n  '/api/v2/posts',\r\n  validator(\r\n    'json',\r\n    validatorFunc(\r\n      z.object({\r\n        id: z.number(),\r\n        title: z.string(),\r\n      })\r\n    )\r\n  ),\r\n  (c) => {\r\n    return c.jsonT({\r\n      success: true,\r\n    })\r\n  }\r\n)\r\n```\r\n\r\nAnd we can get the type:\r\n\r\n```ts\r\nexport type AppType = typeof route\r\ntype Schema = ExtractSchema<typeof route>\r\n```\r\n\r\nThe extracted types are the followings. `Schema` will be:\r\n\r\n```ts\r\ntype Schema = {\r\n  '/api/v2/posts': {\r\n    $post: {\r\n      input: {\r\n        json: {\r\n          id: number\r\n          title: string\r\n        }\r\n      }\r\n      output: {\r\n        success: boolean\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nI think this format is very useful for writing the client.  Just a simple use of this types and the client looks like this.\r\n\r\nhttps://user-images.githubusercontent.com/10682/215485265-a74e85e1-ea8a-44f3-abf3-423b08051222.mov\r\n\r\nThis client has no implementation but is more type-safe.\r\n\r\nI think this is good PR.\r\n\r\nBTW:\r\n\r\nI am now thinking of rewriting the client and creating it in the core project as `hono/client`. This is because it is easier to handle and develop.",
        "html_url": "https://github.com/honojs/hono/pull/853",
        "comments": [
          "Use Comment Block Generator <https://blocks.jkniest.dev> for formatting the comment blocks.\r\nPretty good."
        ]
      },
      {
        "pr_number": 856,
        "title": "fix(breaking): obsolete no args `c.req.valid()`",
        "body": "This PR obsolete `c.req.valid()` has no arguments.\r\n\r\nWe can **not** do:\r\n\r\n```ts\r\nconst { page } = c.req.valid()\r\n```\r\n\r\nstill we can do:\r\n\r\n```ts\r\nconst { page } = c.req.valid('query')\r\n```\r\n\r\nThe `c.req.valid()` could merge the same key, and result may be unintended values. Then, this change allowed us to remove `utils/object.ts`, thus reducing the bundle size and package size.",
        "html_url": "https://github.com/honojs/hono/pull/856",
        "comments": []
      },
      {
        "pr_number": 857,
        "title": "refactor(request): don't cache jsonBody, formBody, and headers",
        "body": "Don't cache JSON body, Form body, and Headers in `HonoRequest`. These were used in Validator, but we no longer need to cache them, so we removed them. There is no performance degradation unless multiple Validations are performed.",
        "html_url": "https://github.com/honojs/hono/pull/857",
        "comments": []
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 859,
        "title": "fix(req): `never` if `c.req.valid()`",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/859",
        "comments": []
      },
      {
        "pr_number": 860,
        "title": "perf(context): improve handling response",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/860",
        "comments": []
      },
      {
        "pr_number": 861,
        "title": "refactor: obsolute `CustomHandler`",
        "body": "It's not needed. Use `Handler` or `MiddlewareHandler` instead.",
        "html_url": "https://github.com/honojs/hono/pull/861",
        "comments": []
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 867,
        "title": "perf(reg-exp-router): Cache Result<T> instead of T[] if there is no parameter.",
        "body": "I would like to change it to cache the constructed `Result<T>` for static paths.\r\n\r\nI could not see a clear change in the benchmark, but I believe there is a slight performance benefit, which can reduce object creation at request time.",
        "html_url": "https://github.com/honojs/hono/pull/867",
        "comments": [
          "Hi @usualoma !\r\n\r\nThis seems to be a good change, and there is no side effect. Okay, I'll merge it!"
        ]
      },
      {
        "pr_number": 862,
        "title": "feat: `hc` - Hono Client",
        "body": "This PR introduces a new feature, \"Hono Client\". \"hc\" for the same purpose was built as `@hono/hc`, but making it obsolete, includes it in the core package.\r\n\r\n## Usage\r\n\r\nFirst, create the API server. Write the endpoint and export the type of route:\r\n\r\n```ts\r\n// server.ts\r\nimport { Hono } from 'hono'\r\nimport { z } from 'zod'\r\nimport { zValidator } from '@hono/zod-validator'\r\n\r\nconst app = new Hono()\r\n\r\nconst route = app.post(\r\n  '/api/v2/posts',\r\n  zValidator(\r\n    'json',\r\n    z.object({\r\n      id: z.number(),\r\n      title: z.string(),\r\n    })\r\n  ),\r\n  (c) => {\r\n    const { id, title } = c.req.valid('json')\r\n   // Use `c.jsonT()` to emit types\r\n    return c.jsonT({\r\n      message: `${id} is ${title}`,\r\n      success: true,\r\n    })\r\n  }\r\n)\r\n\r\nexport type AppType = typeof route // export the type\r\n```\r\n\r\nSecond, start writing the `client.ts`, import the type from `server.ts` and pass it to the `hc` function as Generics:\r\n\r\n```ts\r\nimport { hc } from 'hono/client'\r\n\r\nimport type { AppType } from './server'\r\n\r\nconst client = hc<AppType>('http://localhost:8787/')\r\n```\r\n\r\nThen, time for magic:\r\n\r\nhttps://user-images.githubusercontent.com/10682/216456881-7c9d4bad-e669-4cfb-a027-86ce98074973.mov\r\n\r\nIt will suggest the code based on the path and schema of the API server endpoint.\r\n\r\nAnd handle the response:\r\n\r\nhttps://user-images.githubusercontent.com/10682/216457919-1484ed48-b1d3-4428-b6be-565f7a9ee879.mov\r\n\r\n`data` has the appropriate type. Great!\r\n\r\nThe final code is here:\r\n\r\n```ts\r\nconst res = await client.api.v2.posts.$post({\r\n  json: {\r\n    id: 123,\r\n    title: 'Hello!!',\r\n  },\r\n})\r\n\r\nconst data = await res.json()\r\n\r\nconsole.log(data.message)\r\n```\r\n\r\n### Don't you use `@hono/hc`?\r\n\r\nSeparating core packages and `hc` is good, but it makes development difficult. For example, if we want to refer to the same `Hono` or `ValidationTypes` types, but the projects are separated, it is difficult to do so, and type errors occur frequently. Even if we include it in the core package, it is independent of `hono`, so the bundle size will not change unless we use it. In addition, it is very small and does not depend on an external library.",
        "html_url": "https://github.com/honojs/hono/pull/862",
        "comments": [
          "Hi, @usualoma @ThatOneBro @cleaton and others!\r\n\r\nHow about this? You don't have to do a detailed review, I'd like to hear your brief thoughts.\r\n",
          "@yusukebe over all I think it looks good, the client api is easy to use and I like that it's possible to pass additional request parameters. \r\n\r\nI think hiding the typed result behind a `json()` method togeter with all the existing `Response` methods makes it difficult to discover (Result has so many methods/attributes...). I would suggest giving another name than `json` maybe `ht()` for `HonoType` or something else. Can also consider using an interface to split the `Result` methods, ex:\r\n```ts\r\ninterface HonoResponse<T> {\r\n   response(): Response\r\n   ht(): TypedResponse<T>\r\n```\r\n\r\nThis kind of interface could also help make the client composable with server endpoints in a way where it's possible to forward responses from nested Hono Servers without unwrapping the response. For example in Cloudflare, have endpoint defined in a worker, inside the endpoint use hono client to call DurableObject instance and directly return the result (making the worker endpoint and DO endpoint return type identical). Current implementation which requires returning `c.jsonT()` requires extracting the DO response in the worker endpoint.\r\n\r\nnot directly related to this PR, but i happened to see\r\n```ts\r\n export type TypeResponse<T = unknown> = {\r\n   response: Response | Promise<Response>\r\n   data: T\r\n   format: 'json' // Currently, support only `json` with `c.jsonT()`\r\n }\r\n ```\r\n it does not look like `data` is used anywhere so I think it can be removed (it's already encoded inside `response`). A typescript type can contain type parameters that are not used in any field/value (very useful for passing type info forward without incuring runtime cost of passing the actual object)",
          "Hi @cleaton ! \r\n\r\n> I think hiding the typed result behind a json() method togeter with all the existing Response methods makes it difficult to discover (Result has so many methods/attributes...).\r\n\r\nIs this referring to the client's `res.json()`?\r\n\r\n```ts\r\nconst res = await client.api.v2.posts.$get()\r\n\r\nconst data = await res.json() // <--- this?\r\n```\r\n\r\nYou are right `json()` is a hard keyword to discover. But, this is because I want to keep compatibility with the `Response` object, which is the return value of the `fetch`. I thought about wrapping the `fetch`'s `Response` like `HonoResponse`, but decided against it because it would be too complicated.",
          "@yusukebe I think this is great! Everything looks really nice to me. I haven't used it yet but once I use it I will be sure to give more feedback. For now, I think this is a great decision \ud83d\ude04 ",
          "@yusukebe\r\nThis is some really great magic!\r\nI think this PR is well implemented with lean and less code, and is highly maintainable.",
          "Hi @cleaton !\r\n\r\nI'll merge this PR soon.\r\n\r\nThis feature - Hono Client - is based on your comment, which inspired us. https://github.com/honojs/hono/issues/582#issuecomment-1279598527 I think it is a super cool idea. We are proud to be able to add this feature to Hono. Thank you very much!",
          "@yusukebe thanks for your hard work! Looking forward to using it ~",
          "I'll merge it now!"
        ]
      },
      {
        "pr_number": 869,
        "title": "feat: Remove the StaticRouter from default candidates.",
        "body": "#868",
        "html_url": "https://github.com/honojs/hono/pull/869",
        "comments": [
          "We will create a separate PR to drop StaticRouter from the package, so I will merge this PR. Thank you."
        ]
      },
      {
        "pr_number": 873,
        "title": "feat(router) [breaking]: StaticRouter obsolete",
        "body": "We've discussed in #868, we decided to remove StaticRouter from default candidates and remove it also from the packages. This means StaticRouter will become obsolete. After merging the PR, we can't use StaticRouter.\r\n\r\nThanks to @usualoma for creating StaticRouter. And goodbye StaticRouter.\r\n\r\nThis will fix #868.",
        "html_url": "https://github.com/honojs/hono/pull/873",
        "comments": [
          "Hi @usualoma !\r\n\r\nIf you are OK, I will merge this PR with you as co-author.",
          "@yusukebe Thanks, LGTM!"
        ]
      },
      {
        "pr_number": 876,
        "title": "merge main into next",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/876",
        "comments": []
      },
      {
        "pr_number": 876,
        "title": "merge main into next",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/876",
        "comments": []
      },
      {
        "pr_number": 876,
        "title": "merge main into next",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/876",
        "comments": []
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 878,
        "title": "feat(adapter): `handle(path, app)` for CF Pages & Next.js",
        "body": "This PR is for the adapter of Cloudflare Pages and Next.js. It allows passing the mount path as an argument to `handle`.\r\n\r\nFor example, if you struct the Next.js project like this:\r\n\r\n<img width=\"191\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/218135327-6cbc7c72-8e16-441e-9119-d8f989896243.png\">\r\n\r\n`pages/api/[route].ts` could be follows:\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { handle } from 'hono/nextjs'\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/hello', (c) => {\r\n  return c.json({\r\n    message: 'Hello',\r\n  })\r\n})\r\n\r\napp.get('/morning', (c) => {\r\n  return c.json({\r\n    message: 'Morning',\r\n  })\r\n})\r\n\r\nexport default handle('/api', app)\r\n```\r\n\r\nIt is simpler because you don't have to write `/api` in the argument of `app.get` every time.",
        "html_url": "https://github.com/honojs/hono/pull/878",
        "comments": []
      },
      {
        "pr_number": 879,
        "title": "feat(validator): moved validator outside of middleware",
        "body": "We have been treating `validator` as Middleware, but since it is different in property from Middleware, move it out.",
        "html_url": "https://github.com/honojs/hono/pull/879",
        "comments": []
      }
    ],
    "v2.7.7": [
      {
        "pr_number": 871,
        "title": "feat: use added app's errorHandler",
        "body": "Derived from #866, version for errorHandler only",
        "html_url": "https://github.com/honojs/hono/pull/871",
        "comments": [
          "Hi @usualoma \r\n\r\nUsing `compose`! This is a good idea!\r\n\r\nIt is not we should do usually, but how about changing the order of the `compose` arguments?\r\n\r\n```ts\r\nconst compose = (\r\n  middleware: Function[],\r\n  onNotFound?: NotFoundHandler,\r\n  onError?: ErrorHandler\r\n) => Function\r\n```\r\n\r\nTo:\r\n\r\n```ts\r\nconst compose = (\r\n  middleware: Function[],\r\n  onError?: ErrorHandler, \r\n  onNotFound?: NotFoundHandler\r\n) => Function\r\n```\r\n\r\nBy doing so, we can remove the following `notFoundHandler`:\r\n\r\nhttps://github.com/honojs/hono/pull/871/commits/0707d87d0e5b4b662e6b7bf258d5c7f61477e9c4#diff-a6d396782ec1222678901e1d0ac0bf9bb5b63f6560fd26fd81694dc2b4de5a89R129\r\n\r\n`compose` is only used in `hono.ts` and it is not difficult to rewrite `compose.test.ts`. I think it's good to keep code short.",
          "> It is not we should do usually, but how about changing the order of the compose arguments?\r\n\r\nYes, I agree.\r\n\r\nSwapped and pushed.\r\nec3a21b",
          "Thanks! I'll merge it.",
          "Ah, wait. The following tests \"one handler pattern\" will fail:\r\n\r\n```ts\r\ndescribe('onError', () => {\r\n  const app = new Hono()\r\n  const sub = new Hono()\r\n\r\n  sub.get('/ok', (c) => c.text('OK'))\r\n\r\n  sub.get('/error', () => {\r\n    throw new Error('This is Error')\r\n  })\r\n\r\n  sub.onError((err, c) => {\r\n    return c.text('onError by sub', 500)\r\n  })\r\n\r\n  app.route('/sub', sub)\r\n\r\n  it('handled by app', async () => {\r\n    const res = await app.request('https://example.com/sub/ok')\r\n    expect(res.status).toBe(200)\r\n  })\r\n})\r\n```\r\n\r\n<img width=\"669\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/217551093-4d7b19d1-977f-420e-83ef-0716ac7fc8a6.png\">\r\n\r\nUsing the `compose` is a good idea, but it does not support \"one handler pattern\".",
          "@yusukebe Oh, sorry, you're right. I'll reconsider."
        ]
      },
      {
        "pr_number": 872,
        "title": "Revert \"feat: use added app's errorHandler (#871)\"",
        "body": "This reverts commit b8a99b53672520b0b23547906cfc4042931438d7.\r\n\r\n#871 seems to fix #851, but it does not support \"one handler pattern\". The following tests fails:\r\n\r\n```ts\r\ndescribe('onError', () => {\r\n  const app = new Hono()\r\n  const sub = new Hono()\r\n\r\n  sub.get('/ok', (c) => c.text('OK'))\r\n\r\n  sub.get('/error', () => {\r\n    throw new Error('This is Error')\r\n  })\r\n\r\n  sub.onError((err, c) => {\r\n    return c.text('onError by sub', 500)\r\n  })\r\n\r\n  app.route('/sub', sub)\r\n\r\n  it('handled by app', async () => {\r\n    const res = await app.request('https://example.com/sub/ok')\r\n    expect(res.status).toBe(200)\r\n  })\r\n})\r\n```\r\n\r\nSo, I will revert it.",
        "html_url": "https://github.com/honojs/hono/pull/872",
        "comments": []
      },
      {
        "pr_number": 874,
        "title": "feat: use added app's errorHandler with comose()",
        "body": "A shorter version that solves the problem of https://github.com/honojs/hono/pull/871#issuecomment-1422647262",
        "html_url": "https://github.com/honojs/hono/pull/874",
        "comments": [
          "Hi @usualoma\r\n\r\nLooks good!\r\n\r\nI think it is a matter of taste whether we choose this (`compose()`) or PR #875 (try/catch), but the shorter is better.\r\n\r\nLet's go with this.",
          "@yusukebe OK, 076e075 denoified.",
          "Thanks!"
        ]
      },
      {
        "pr_number": 876,
        "title": "merge main into next",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/876",
        "comments": []
      },
      {
        "pr_number": 876,
        "title": "merge main into next",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/876",
        "comments": []
      }
    ],
    "v2.7.6": [
      {
        "pr_number": 863,
        "title": "Fix 404 error on Serve Static Middleware",
        "body": "There will be a 404 error when non-standard characters appear in URL. Add `decodeURI()` to fix it.",
        "html_url": "https://github.com/honojs/hono/pull/863",
        "comments": [
          "Hi @BioniCosmos !\r\n\r\nThanks! It's a good fix. I'll merge it."
        ]
      },
      {
        "pr_number": 864,
        "title": "fix(serve-static): decode url pathname",
        "body": "The fix in the PR https://github.com/honojs/hono/pull/863 is only for Deno. So this PR will fix it for Cloudflare and Bun.",
        "html_url": "https://github.com/honojs/hono/pull/864",
        "comments": []
      },
      {
        "pr_number": 865,
        "title": "chore: denoify",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/865",
        "comments": []
      }
    ],
    "v3.0.0-rc.10": [],
    "v3.0.0-rc.9": [
      {
        "pr_number": 827,
        "title": "Missing mime types",
        "body": "Missing many common mime types such as: GLTF, GLB, MP4, M4P etc",
        "html_url": "https://github.com/honojs/hono/pull/827",
        "comments": [
          "Hi @Hoodgail !\r\n\r\nThank you for the PR.\r\n\r\nIt's difficult to accept it because if we do so, the package size will be very large. The one of the core concepts of Hono is to be small. Of course, I also think it's not good there is no `mp4` in the mime type utils, but, I think it is not necessary, such as `oa2: \"application/vnd.fujitsu.oasys2\"`. The best thing to do is to select only the mime types that we really need carefully.",
          "Thank you for your response, makes sense, i don't know what i was thinking adding all of those there, i'll remove the unnecessary ones",
          "Done, maybe this change makes more sense",
          "Thank you! But one more thing. Can you sort them alphabetically?",
          "Done, but could you also check out https://github.com/honojs/node-server/pull/18 ?",
          "Thanks! I'll check it later.",
          "@Hoodgail \r\n\r\nCould you do `yarn lint:fix` and `yarn denoify`?",
          "Are the office docs (doc_ xls_ ppt_) really used in apps that often to be hard-coded?  I don't see `.wav` used much anymore for new sites.\r\n\r\nAdd [`avif`](https://caniuse.com/avif) for certain please\r\n\r\nUnsure about these media codex, even tough I like them\r\n? [`AV1`](https://caniuse.com/av1)  default for iPhone vids, YouTube starting to serve\r\n? [`jpgxl`](https://caniuse.com/jpegxl) still in beta, pushed by Cloudinary IIRC\r\n\r\nThanks for adding the other media MIME; I'm about to build a video player with Hono!",
          "@tomByrer I think AVI is a good mime to add, i've seen people use it before, But i also added jpegx1 it might be in beta but some people might find it usefull still",
          "Thanks, @Hoodgail and @tomByrer !\r\n\r\nLooks good! I'll merge it now."
        ]
      }
    ],
    "v2.7.5": [
      {
        "pr_number": 836,
        "title": "fix(context): fixed bug raw `Response` content-type is overwritten",
        "body": "Fix #835 ",
        "html_url": "https://github.com/honojs/hono/pull/836",
        "comments": []
      }
    ],
    "v2.7.4": [
      {
        "pr_number": 826,
        "title": "fix(request): make optional param type correct",
        "body": "This PR fix #821 \r\n\r\nIn the current version, if `/api/animal/:type?` is defined as a route, `type` will be `string` though it is \"optional\". It's the wrong type. In this PR, it will be `string | undefined`.\r\n\r\n<img width=\"508\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/213830168-8efd6d2b-2f9f-4ce3-87bb-88b301179ed5.png\">\r\n\r\nI've made PR #825  which makes it a blank string `''` not `string | undefined`. But, after getting advice from @pmbanugo, I rethought it should be `string | undefined`.",
        "html_url": "https://github.com/honojs/hono/pull/826",
        "comments": [
          "Hi @pmbanugo, how about this change?",
          "Yes, this type is what I think is better.  I looked at the new tests and they also certify what I would expect. \ud83d\udc4d\ud83c\udffd \r\n\r\nAlthough there were some @ts-ignore this has caused you \ud83d\ude48 I'm wondering if there's a different way to implement it to avoid most of those. I don't know the codebase so I have no suggestion for an alternate approach. But it does get the job done \ud83d\udc4d\ud83c\udffd ",
          "@pmbanugo \r\n\r\nThank you for reviewing!\r\n\r\nOf course, I think we don't have to use `@ts-ignore`, but the current version has a complicated code about \"Types\". So we plan to refactor it and make it a bit cleaner in the next major version.\r\n\r\nOkay, I'll merge it later!\r\n",
          "I see. Thanks! "
        ]
      },
      {
        "pr_number": 834,
        "title": "fix(context): set the header values of already set",
        "body": "This will fix #828 ",
        "html_url": "https://github.com/honojs/hono/pull/834",
        "comments": []
      }
    ],
    "v3.0.0-rc.8": [
      {
        "pr_number": 824,
        "title": "build: validate package exports after build",
        "body": "This PR checks if Hono has proper package exports using publint. See #822 for details.",
        "html_url": "https://github.com/honojs/hono/pull/824",
        "comments": ["Thankyou. I'll merge it."]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      },
      {
        "pr_number": 905,
        "title": "v3",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/905",
        "comments": ["All right, ship it!"]
      }
    ],
    "v3.0.0-rc.7": [
      {
        "pr_number": 817,
        "title": "fix: export `Env`",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/817",
        "comments": []
      }
    ],
    "v3.0.0-rc.6": [
      {
        "pr_number": 815,
        "title": "refactor: remove the json util not needed",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/815",
        "comments": []
      },
      {
        "pr_number": 816,
        "title": "refactor(utils): remove minor mime types",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/816",
        "comments": []
      }
    ],
    "v2.7.3": [
      {
        "pr_number": 805,
        "title": "remove unnecessary individual strict mode family options",
        "body": "The [TypeScript documentation](https://www.typescriptlang.org/tsconfig#strict) said:\r\n\r\n> The `strict` flag enables a wide range of type checking behavior that results in stronger guarantees of program correctness. **Turning this on is equivalent to enabling all of the strict mode family options**, which are outlined below. You can then turn off individual strict mode family checks as needed.\r\n\r\nBecause there is already a `strict` flag, so `strictPropertyInitialization` and `strictNullChecks` are redundant.",
        "html_url": "https://github.com/honojs/hono/pull/805",
        "comments": [
          "Hi @hclj37 !\r\n\r\nYou are right! I'll merge this. Thanks!"
        ]
      },
      {
        "pr_number": 813,
        "title": "fix(context): enable destruction such `json`",
        "body": "This will fix #812",
        "html_url": "https://github.com/honojs/hono/pull/813",
        "comments": []
      },
      {
        "pr_number": 814,
        "title": "fix: fixed type error for optional parameters",
        "body": "This fixes #804",
        "html_url": "https://github.com/honojs/hono/pull/814",
        "comments": []
      }
    ],
    "v3.0.0-rc.5": [],
    "v2.7.2": [
      {
        "pr_number": 792,
        "title": "fix(cors): fix bugs handling pre-flight",
        "body": "This PR fixes a bug that a pre-flight request would be 404.",
        "html_url": "https://github.com/honojs/hono/pull/792",
        "comments": []
      }
    ],
    "v3.0.0-rc.4": [
      {
        "pr_number": 769,
        "title": "chore: update license, contributors as the copyright holders",
        "body": "Hono is not made only by me. Need contributors. Thanks!!",
        "html_url": "https://github.com/honojs/hono/pull/769",
        "comments": []
      },
      {
        "pr_number": 776,
        "title": "fix(package.json): typo exports static-router",
        "body": "There was a mistake in #747 , sorry.\r\nI was able to find it in publint.\r\n``npx publint`` or https://publint.dev/hono",
        "html_url": "https://github.com/honojs/hono/pull/776",
        "comments": [
          "Hi @taishinaritomi !\r\n\r\nThank you!\r\n\r\n> npx publint or https://publint.dev/hono\r\n\r\nI didn't know `publint`, it was difficult to check `package.json` etc. works well. This is what I want.\r\n\r\nI'll merge it."
        ]
      }
    ],
    "v3.0.0-rc.3": [],
    "v2.7.1": [
      {
        "pr_number": 759,
        "title": "docs(migration): write about validator middleware",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/759",
        "comments": []
      },
      {
        "pr_number": 760,
        "title": "chore(validator): show warnings about the breaking changes",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/760",
        "comments": []
      }
    ],
    "v3.0.0-rc.2": [
      {
        "pr_number": 758,
        "title": "fix(jsonT): `undefined` if it is not object",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/758",
        "comments": []
      }
    ],
    "v3.0.0-0": [
      {
        "pr_number": 745,
        "title": "feat: new validator middleware using 3rd-party & current middleware obsolete",
        "body": "This RP includes big changes. If we accept it, we have to merge it into [next branch](https://github.com/honojs/hono/tree/next), and it will be released in the next major version, \"v3\".\r\n\r\nIn this PR, I introduce new validator middleware supporting the \"RPC\" feature. And make the current built-in validator obsolete.\r\n\r\n## Current built-in validator obsolete\r\n\r\nPerhaps this means \"heartbroken\".  I really like the current Built-in Validator, it can easily handle JSON, Forms, etc., and is easy and intuitive to write. But the more we try to make it better, the more we have to do. It is very difficult to make the Validator correct. So I began to think that there was no need for us to make our own validators. I am very sorry to the contributor who worked with, but with this PR, I have removed the current built-in validator completely.\r\n\r\n## New \"generic\" validator middleware for using 3rd-party\r\n\r\nSo I would recommend using 3rd validators, such [Zod](https://zod.dev), [TypeBox](https://github.com/sinclairzx81/typebox). They provide type safety as well as value verification.\r\n\r\nTherefore, I created a thin Validator middleware that can handle such 3rd-party Validators in a generic way. \r\n\r\n## New types for RPC\r\n\r\nOn the other hand, I would like to add an \"RPC\" feature like [tPRC](https://trpc.io). This means that server-side API definitions are shared as \"Types\" and can be used by the Client.\r\n\r\nhttps://github.com/honojs/hono/issues/727\r\n\r\nSo, I added new types and methods `app.build()` and `c.jsonT()` to provide \"RPC\" for 3rd-party validators.\r\n\r\n## Example\r\n\r\nFor example, we can write the validator with \"Zod\" like this:\r\n\r\n```ts\r\nconst v =\r\n  <T extends ZodSchema>(schema: T) =>\r\n  (value: unknown, c: Context) => {\r\n    const parsed = schema.safeParse(value)\r\n    if (!parsed.success) {\r\n      return c.text('Invalid!', 400)\r\n    }\r\n    const data = parsed.data as z.infer<T>\r\n    return data\r\n  }\r\n\r\nconst api = new Hono()\r\n\r\nconst postRoute = api\r\n  .post(\r\n    '/author',\r\n    validator(\r\n      'json',\r\n      v(\r\n        z.object({\r\n          name: z.string(),\r\n          age: z.string(),\r\n          nickname: z.string().optional(),\r\n        })\r\n      )\r\n    ),\r\n    (c) => {\r\n      const author = c.req.valid()\r\n      return c.jsonT({\r\n        youare: {\r\n          name: author.name,\r\n          age: author.age,\r\n        },\r\n      })\r\n    }\r\n  )\r\n  .build()\r\n\r\nexport type AppType = typeof postRoute\r\n```\r\n\r\nThis is a screencast for the demo. It's a little different from the implementation in this PR, but it works the same.\r\n\r\nhttps://user-images.githubusercontent.com/10682/209447905-bf1afe60-c0fd-45bb-881a-9cf00a352d08.mov\r\n\r\n## Make the client\r\n\r\nFor now, I plan to create an HTTP cline that wraps `fetch`. We will not include this in the core package, but will distribute it under `@hono` namespace `@hono/client`. And will be managed in [the monorepo for middleware](https://github.com/honojs/middleware).\r\n\r\n## `@hono/zod` etc.\r\n\r\nIt is also a good idea to create a module like `@hono/zod` to write it simpler and shorter.\r\n\r\n## TODO\r\n\r\nIf we accept this PR, there are a few things we must do.\r\n\r\n* Refactor the code.\r\n* Deprecate the current built-in validator.\r\n* Release the next branch as \"pre-release\" and test it well.\r\n* Create `@hono/client`.\r\n* Try validators other than \"Zod\".\r\n",
        "html_url": "https://github.com/honojs/hono/pull/745",
        "comments": [
          "Makes sense to me. It was fun to work on the validator but you are right, it's a lot of work to make it work well and zod does a lot of the good work for us. I think this makes sense \ud83d\udc4d ",
          "Multiple Validator support and a large refactoring on Type. All done. Merging."
        ]
      },
      {
        "pr_number": 748,
        "title": "refactor: refactor and fix Types",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/748",
        "comments": []
      }
    ],
    "v2.7.0": [
      {
        "pr_number": 742,
        "title": "feat: Lagon support with runtime detection & tests",
        "body": "Closes https://github.com/honojs/hono/issues/734\r\nCloses https://github.com/lagonapp/lagon/issues/97\r\n\r\nThis PR follows https://github.com/honojs/honojs.dev/pull/27 and adds the following:\r\n- Runtime detection using the `__lagon__` global, returning the `lagon` key as specified in WinterCG Runtime Keys\r\n- `test:lagon` command that runs `lagon_test/index.ts` inside Lagon (using `lagon dev`) and runs `lagon_test/index.test.ts` against it\r\n- Add \"Lagon\" mentions after mentions of Cloudflare Workers, Deno and Bun",
        "html_url": "https://github.com/honojs/hono/pull/742",
        "comments": [
          "Hi @QuiiBz !\r\n\r\nGreat!! We can test with `test:lagon`!!\r\n\r\n> Add \"Lagon\" mentions after mentions of Cloudflare Workers, Deno and Bun\r\n\r\nThis is OK. However, with all due respect, \"Lagon\" is still in the \"Dev\" phase and may not specify here in some cases. But, now, it's OK. It is good to support many platforms for Hono.",
          "Agree, I can remove those mentions if you want while it's still in dev. I've just released a new version of Lagon CLI to add support for ETag, so I'll remove the `.skip` on the ETag test.",
          "CI failed. I think you should do a `build` before `jest`.",
          "> Agree, I can remove those mentions if you want while it's still in dev.\r\n\r\nThanks for understanding!",
          "> CI failed. I think you should do a `build` before `jest`.\r\n\r\nYes, I'm just waiting for the latest release of the CLI to push the fix :)",
          "Just removed the mentions of Lagon, enabled the ETag test, and added a build step before running the tests. Now the CI should work!",
          "Thank you! I'll merge it!"
        ]
      },
      {
        "pr_number": 747,
        "title": "fix: Support tsconfig.json \"moduleResolution\" : \"NodeNext\"",
        "body": "To support \"moduleResolution\" : \"NodeNext\", output .d.ts to the dist/types directory and add dist/types/package.json { \"type\": \"commonjs\" }.\r\n\r\n#679 \r\n#668",
        "html_url": "https://github.com/honojs/hono/pull/747",
        "comments": [
          "Hi @taishinaritomi !\r\n\r\nI've checked, and this works well in my environment! It's very helpful. Thank you!"
        ]
      }
    ],
    "v2.6.2": [
      {
        "pr_number": 719,
        "title": "Log a more detailed error stack.",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/719",
        "comments": ["Thank you! I will merge it."]
      },
      {
        "pr_number": 720,
        "title": "fix(type): make `SchemaToProp` work correctly",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/720",
        "comments": []
      },
      {
        "pr_number": 721,
        "title": "fix(request): `c.req.param()` should return `undefined` not \"undefined\"",
        "body": "`c.req.param('missing-parameter')` was returning \"undefined\". It was a string!! not `undefined`.  Of course, it should not return a string, should return `undefined`.\r\n\r\nThis was taught to me by noil on Discord. Thanks.",
        "html_url": "https://github.com/honojs/hono/pull/721",
        "comments": []
      },
      {
        "pr_number": 722,
        "title": "perf(context): `c.text()` returns a response immediately if header is empty",
        "body": "`c.text()` returns `Response` immediately if headers are empty.\r\n\r\nIt does not set `Content-Type` intentionally, but `text/plain` is added automatically, so it is not a breaking change. This is mainly for benchmarking, but benchmarking is important.\r\n\r\n`GET /` will become 13% faster on Bun!\r\n\r\n<img width=\"SS\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/207391017-a64a0f91-d480-424a-b6c2-d3a1acdc501c.png\">\r\n",
        "html_url": "https://github.com/honojs/hono/pull/722",
        "comments": [
          "Good work! Looks like a nice perf win",
          "Alright, I'll merge it."
        ]
      }
    ],
    "v2.6.1": [
      {
        "pr_number": 714,
        "title": "fix(type): fix the type mismatch if using `Handler` as middleware",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/714",
        "comments": []
      },
      {
        "pr_number": 715,
        "title": "fix(type): infer types correctly",
        "body": "This PR will make`SchemaToProps` return types correctly. We can get \"normal types\" from `c.req.valid()`. I think this is a good change.\r\n\r\nBefore:\r\n<img width=\"442\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/206883003-4d0ab291-6a8d-41ff-996e-897f83624c74.png\">\r\n\r\nAfter:\r\n<img width=\"424\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/206883008-d7907f8c-c498-438a-a9fb-94955b2b1ebe.png\">\r\n",
        "html_url": "https://github.com/honojs/hono/pull/715",
        "comments": []
      }
    ],
    "v2.6.0": [
      {
        "pr_number": 709,
        "title": "`cookie` should return `string | undefined`",
        "body": "if a cookie with a name isn't present, `cookie` function returns undefined although this isn't reflected at the type level.",
        "html_url": "https://github.com/honojs/hono/pull/709",
        "comments": [
          "Hi @unworthyEnzyme !\r\n\r\nThank you for the PR. You are right, it should return `string | undefined`.\r\nI want to merge it, but CI failed. Could you fix the tests? I think we can write like below:\r\n\r\n```ts\r\nif (yummyCookie) res.headers.set('Yummy-Cookie', yummyCookie)\r\n```\r\n\r\nIf we should rewrite the tests, it means \"breaking changes\". We'll write it down clearly in the release.",
          "@yusukebe sorry i should've run the tests before opening a pr. Let me check it out tonight.",
          "@yusukebe  updated the test. Hope it works now although i am seeing tracing output after i changed the test, is this intended?",
          "@unworthyEnzyme \r\n\r\nThank you for updating. \r\n\r\n> Hope it works now although i am seeing tracing output after i changed the test, is this intended?\r\n\r\nYes, no problem! It has been shown before. I'll merge it!"
        ]
      },
      {
        "pr_number": 700,
        "title": "feat(handler): \"schema\" allow normal types",
        "body": "This PR allows normal types, instead of only allowing `Schema` in the Handler.\r\n\r\n```ts\r\ntype User = {\r\n  id: string\r\n  name: string\r\n  age: number\r\n}\r\n\r\nconst handler: Handler<User> = (c) => {\r\n  const user = c.req.valid() // <--- user is User\r\n  // ...\r\n}\r\n```\r\n\r\nThis change also makes it possible to use the 3rd party library such as \"[Zod](https://zod.dev)\" for validation.\r\n\r\n```ts\r\nimport { z } from 'zod'\r\nimport type { ZodType } from 'zod'\r\nimport { Hono } from '../../../src/hono'\r\nimport type { Handler } from '../../../src/index'\r\n\r\nconst app = new Hono()\r\n\r\nconst schema = z.object({\r\n  id: z.string(),\r\n  name: z.string(),\r\n  age: z.number(),\r\n})\r\n\r\n// You can write a custom validator with Zod:\r\nconst zValidtor = <T extends ZodType>(schema: T): Handler<z.infer<T>> => {\r\n  return async (c, next) => {\r\n    const parsed = schema.safeParse(await c.req.json())\r\n    if (!parsed.success) {\r\n      return c.text('Invalid!', 400)\r\n    }\r\n    c.req.valid(parsed.data)\r\n    await next()\r\n  }\r\n}\r\n\r\napp.post('/post', zValidtor(schema), (c) => {\r\n  const user = c.req.valid() // <--- user will be `User`\r\n  return c.json(user)\r\n})\r\n```\r\n\r\nBuiltin Validator is recommended, but if developers want to use Zod, they can.\r\n\r\nThis may resolve #689 ",
        "html_url": "https://github.com/honojs/hono/pull/700",
        "comments": [
          "Hi @usualoma @ThatOneBro and others!\r\n\r\nI've made the cool feature. If you have time, could you check this PR and share your opinion?\r\n\r\nIf there are no problems after sometime, I'll merge it.",
          "this is a great starting point. something I've been wondering is if we should adopt a similar position as tRPC in their api, so rather than this\r\n```ts\r\nimport { z } from 'zod'\r\nimport type { ZodType } from 'zod'\r\nimport { Hono } from '../../../src/hono'\r\nimport type { Handler } from '../../../src/index'\r\n\r\nconst app = new Hono()\r\n\r\nconst schema = z.object({\r\n    id: z.string(),\r\n    name: z.string(),\r\n    age: z.number(),\r\n})\r\n\r\n// You can write a custom validator with Zod:\r\nconst zValidtor = <T extends ZodType>(schema: T): Handler<z.infer<T>> => {\r\n    return async (c, next) => {\r\n        const parsed = schema.safeParse(await c.req.json())\r\n        if (!parsed.success) {\r\n            return c.text('Invalid!', 400)\r\n        }\r\n        c.req.valid(parsed.data)\r\n        await next()\r\n    }\r\n}\r\n\r\napp.post('/post', zValidtor(schema), (c) => {\r\n    const user = c.req.valid() // <--- user will be `User`\r\n    return c.json(user)\r\n})\r\n```\r\nWe could do something like:\r\n\r\n```ts\r\nimport { z } from 'zod'\r\nimport type { ZodType } from 'zod'\r\nimport { Hono } from '../../../src/hono'\r\nimport type { Handler } from '../../../src/index'\r\n\r\nconst app = new Hono()\r\n\r\nconst schema = z.object({\r\n    id: z.string(),\r\n    name: z.string(),\r\n    age: z.number(),\r\n})\r\n\r\napp.post('/post')\r\n    .input(schema)\r\n    .output(schema)\r\n    .return((c) => {\r\n       // TBD, not usre\r\n    })\r\n```",
          "I like this API a lot. I need to test it some but looks good to me. I just started using zod recently so this is a great change!",
          "This is an awesome PR \ud83d\udc4d ",
          "Hi there, thank you for your comment.\r\n\r\nI still have a few more things to do, so will continue working on this PR.\r\n",
          "@yusukebe Apologies for taking so long to review. This resolves #689 exactly as I'd hoped. Thank you!!! Please merge. \r\n\r\nAlso, I have no personal need for the following suggestion, so I can't comment. \r\n\r\n```typescript \r\napp.post('/post')\r\n    .input(schema)\r\n    .output(schema)\r\n    .return((c) => {\r\n       // TBD, not usre\r\n    })\r\n```\r\n",
          "@ryan-mars \r\n\r\n> Also, I have no personal need for the following suggestion, so I can't comment.\r\n\r\nThis relates to the feature that will be introduced in the future. It has nothing to do with this PR. I won't go into details here, but you might like it.\r\n\r\nOkay, I'll merge!"
        ]
      }
    ],
    "v2.5.10": [
      {
        "pr_number": 707,
        "title": "fix(reg-exp-router): bug of \"star and all\" routing",
        "body": "@yusukebe I would like to fix #699 this way. Please review \ud83d\ude47 ",
        "html_url": "https://github.com/honojs/hono/pull/707",
        "comments": [
          "@usualoma \r\n\r\nThank you! Unfortunately, the following tests seem to fail. Could you see it again?\r\n\r\n```ts\r\ndescribe.only('ALL and Star', () => {\r\n  const router = new RegExpRouter<string>()\r\n\r\n  router.add('ALL', '*', 'wildcard')\r\n  router.add('ALL', '/a/*', 'star1')\r\n  router.add('GET', '/a/foo', 'foo')\r\n  router.add('ALL', '/b/*', 'star2')\r\n  router.add('GET', '/b/bar', 'bar')\r\n\r\n  it.only('Should return wildcard, star2 and bar', async () => {\r\n    const res = router.match('GET', '/b/bar')\r\n    expect(res).not.toBeNull()\r\n    expect(res?.handlers).toEqual(['wildcard', 'star2', 'bar'])\r\n  })\r\n})\r\n```",
          "@yusukebe \r\nSorry, my first fix was incorrect.\r\nI redid it and the additional test now goes through.",
          "@usualoma \r\n\r\nThank you! Perfect. I'll merge it!"
        ]
      },
      {
        "pr_number": 708,
        "title": "fix(validator): enable checking `undefined` in rules",
        "body": "This PR will fix #705.",
        "html_url": "https://github.com/honojs/hono/pull/708",
        "comments": []
      }
    ],
    "v2.5.9": [
      {
        "pr_number": 704,
        "title": "fix(trie-router): bug for routing orders with named param",
        "body": "Fixed the bug, we could not capture the named path parameter following the pattern. When accessing `GET /hello/world`, the `console.log()` may show `undefined`:\r\n\r\n```ts\r\napp.get('/hello/:foo', async (c, next) => {\r\n  const foo = c.req.param('foo')\r\n  console.log(foo)\r\n  await next()\r\n})\r\n\r\napp.get('/hello/world', (c) => {\r\n  const foo = c.req.param('foo')\r\n  return c.text('res')\r\n})\r\n```\r\n\r\nThis is a bug of TrieRouter. Already been fixed in this PR.  This bug is reported by this tweet: https://twitter.com/_ayame113_/status/1600467184853319680 Thanks!",
        "html_url": "https://github.com/honojs/hono/pull/704",
        "comments": []
      }
    ],
    "v2.5.8": [
      {
        "pr_number": 694,
        "title": "chore: fix lint warnings",
        "body": "This fixes all the lint warnings we get in PRs:\r\n![Screenshot at 2022-11-30 20-07-23](https://user-images.githubusercontent.com/61631103/204897869-3fbbebd9-3cf1-42d5-baba-ccee0fdd878f.png)\r\n",
        "html_url": "https://github.com/honojs/hono/pull/694",
        "comments": [
          "Hi @dario-piotrowicz \r\n\r\nWow great!!! We ignored it, but I was thinking it was not good.\r\nThank you. I'll merge it."
        ]
      },
      {
        "pr_number": 697,
        "title": "chore: remove unnecessary config testPathIgnorePatterns",
        "body": "## Changes\r\n- This PR removes unnecessary jest config `testPathIgnorePatterns: ['./examples']`.\r\n\r\n## Background\r\nThe config was introduced when `examples` directory was created.\r\nhttps://github.com/honojs/hono/commit/511c0ebd7e63706d748a2950e016c1e542c8103c\r\n\r\nI guess we can remove it since `examples` directory has been removed.\r\nhttps://github.com/honojs/hono/commit/13373f0836cf4976e28e1ed7afab26b452da8de7",
        "html_url": "https://github.com/honojs/hono/pull/697",
        "comments": ["You are right! Thank you, I'll merge it!"]
      },
      {
        "pr_number": 696,
        "title": "Fix detecting node runtime",
        "body": "This resolves #685.",
        "html_url": "https://github.com/honojs/hono/pull/696",
        "comments": [
          "Hi @yujong-lee !\r\n\r\n```ts\r\n    if (typeof global?.EdgeRuntime !== 'string') {\r\n       return 'vercel'\r\n     }\r\n```\r\n\r\nI think this should be:\r\n\r\n```ts\r\nif (typeof global?.EdgeRuntime === 'string') {\r\n```\r\n",
          "@yusukebe  Good catch. Thank you.",
          "It works fine in my environment. I'll merge it!"
        ]
      }
    ],
    "v2.5.7": [
      {
        "pr_number": 680,
        "title": "fix(validator): fix jsons validation after arrays",
        "body": "fix the bug of `v.json()` calls made after a `v.array()` to be mistakenly considered as still being inside the array\r\n\r\nfixes one of the issues mentioned in #677\r\n\r\n____\r\n\r\nThis is the result of the test I've added before applying the change:\r\n![before](https://user-images.githubusercontent.com/61631103/204113972-97527d99-f89b-4a7f-bc40-f1c42d1c031d.png)\r\n\r\n(the rest of the checks passed already, but I've included them for completeness and to cover all cases for `v.json()` :slightly_smiling_face: )",
        "html_url": "https://github.com/honojs/hono/pull/680",
        "comments": [
          "Hi @dario-piotrowicz !\r\n\r\nThank you for the PR. I'm just trying to fix this issue. I've added the comment, please check it!",
          "> Hi @dario-piotrowicz !\r\n> \r\n> Thank you for the PR. I'm just trying to fix this issue. I've added the comment, please check it!\r\n\r\nCool, good point thanks :slightly_smiling_face:\r\nI've applied your suggested change and updated the unit test, all seems to be working fine :slightly_smiling_face::+1: "
        ]
      },
      {
        "pr_number": 684,
        "title": "fix(reg-exp-router): Allows registering a star after a long prefix.",
        "body": "I believe this change will fix #681.",
        "html_url": "https://github.com/honojs/hono/pull/684",
        "comments": [
          "@usualoma \r\n\r\nI have checked, and it works fine. Thank you very much!\r\n\r\nOne thing, could you do `denoify`?",
          "Ah, I did it again...\r\n\r\nFixed eb7be7d.",
          "Thanks, I'll merge it!"
        ]
      },
      {
        "pr_number": 683,
        "title": "fix(validator): fix subsequent nested objects names",
        "body": "fix the bug of having subsequent objects inside a nested structure causing the validator to forget the previous keys in the scheme's path\r\n\r\nfixes point 1 of #677",
        "html_url": "https://github.com/honojs/hono/pull/683",
        "comments": [
          "Hi @dario-piotrowicz !\r\n\r\nAlmost done. There is one thing I would like you to do. Run `yarn denoify` and commit & push the generated code. The files are used for Deno.",
          "> Hi @dario-piotrowicz !\r\n> \r\n> Almost done. There is one thing I would like you to do. Run `yarn denoify` and commit & push the generated code. The files are used for Deno.\r\n\r\nAwesome thanks :smile: \r\nDone :slightly_smiling_face::+1: ",
          "Thanks! I'll merge it!"
        ]
      },
      {
        "pr_number": 691,
        "title": "fix(reg-exp-router): Copy from METHOD_NAME_ALL for new methods",
        "body": "Hi @yusukebe !\r\n\r\nI don't think #684 is the cause of this problem, as #688 reproduces in v2.5.6 as well.\r\nHowever, the cause is in a similar area and it is my fault for not noticing this problem when fixing #684.\r\n\r\nIn the current RegExpRouter architecture, handlers added with METHOD_NAME_ALL are copied to each method, so I believe that copying all existing handlers the first time they (new method) are added will correct the problem, including #681.",
        "html_url": "https://github.com/honojs/hono/pull/691",
        "comments": [
          "Hi @usualoma !\r\n\r\nGreat work! It is fixed.\r\n\r\nHowever, this may not be related to the issue. The following test fails:(\r\n\r\n```ts\r\ndescribe('ALL and Star', () => {\r\n  const router = new RegExpRouter<string>()\r\n\r\n  router.add('ALL', '/x', '/x')\r\n  router.add('GET', '*', 'star')\r\n\r\n  it('Should return /x and star', async () => {\r\n    const res = router.match('GET', '/x')\r\n    expect(res).not.toBeNull()\r\n    console.log(res?.handlers)\r\n    expect(res?.handlers).toEqual(['/x', 'star'])\r\n  })\r\n})\r\n```\r\n\r\nThis does not fail with `TrieRouter` and is expected behavior in the specification.\r\nIf you can respond, it would be helpful if you could either fix it in this PR or create another one.\r\n(I tried to fix it too, but I haven't gotten to it.)\r\n",
          "Indeed...sorry.\r\n\r\nI believe d81ed23 is the appropriate fix.",
          "@usualoma \r\n\r\nSorry to repeat this. How about the following cases? It may fail.\r\n\r\n```ts\r\nrouter.add('GET', '*', 'star1')\r\nrouter.add('ALL', '/x', '/x')\r\nrouter.add('GET', '*', 'star2')\r\nrouter.add('GET', '*', 'star3')\r\n\r\nit('Should return /x and star', async () => {\r\n  const res = router.match('GET', '/x')\r\n  expect(res).not.toBeNull()\r\n  expect(res?.handlers).toEqual(['star1', '/x', 'star2', 'star3'])\r\n})\r\n```",
          "@yusukebe \r\nHow about 5d3adf0!",
          "Perfect! Thank you! I'll merge it!"
        ]
      },
      {
        "pr_number": 690,
        "title": "Fix Validation of optional empty/undefined arrays",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/690",
        "comments": [
          "@dario-piotrowicz \r\n\r\nGreat work! Can we go with it?",
          "@yusukebe thanks :smiley: \r\n\r\nYeah it should be good to go :slightly_smiling_face: "
        ]
      },
      {
        "pr_number": 693,
        "title": "Updated CORS",
        "body": "Do not call `next` for OPTIONS pre-flight requests to avoid side effects and more sensible defaults.",
        "html_url": "https://github.com/honojs/hono/pull/693",
        "comments": [
          "Fixes #692 ",
          "Hi @dagnelies !\r\n\r\nThank you for the issue and quick fix. It looks good. One thing, could you fix the test to pass the CI?",
          "Hmmm... replying with the default `Access-Control-Allow-Headers` from the request makes more sense, I restored that. I restored the default empty `exposedHeaders` too. Probably better that way.",
          "@dagnelies \r\n\r\nI've added the comment. Please check it.",
          "@dagnelies \r\n\r\nThanks! Finally, could you run `yarn denoify` and commit&push the generated file? It will be used for Deno. Please!",
          "Hmmmm ....I guess I did something wrong ...It generated all test files in `deno_dist` too. \ud83e\udd14 I picked it manually.",
          "> It generated all test files in deno_dist too.\r\n\r\nWeird... It should generate only `deno_dist/middleware/cors/index.ts`.",
          "Complete! Thanks a lot! I'll merge it."
        ]
      }
    ],
    "v2.5.6": [
      {
        "pr_number": 679,
        "title": "fix(package.json): add \"type\": \"module\"",
        "body": "hono did not work with ESM project.\r\nAdded type field to package.json.\r\n\r\n```\r\nimport { Hono } from \"hono\";\r\n         ^^^^\r\nSyntaxError: Named export 'Hono' not found. The requested module 'hono' is a CommonJS module, which may not support all module.exports as named exports.\r\nCommonJS modules can always be imported via the default export, for example using:\r\n\r\nimport pkg from 'hono';\r\nconst { Hono } = pkg;\r\n```",
        "html_url": "https://github.com/honojs/hono/pull/679",
        "comments": [
          "Hi @taishinaritomi !\r\n\r\nThis line has been removed in this PR #669 , but you are right, it is needed. \r\n\r\nThank you. I'll merge it.",
          "Hi @taishinaritomi !\r\n\r\nIf you can figure it out, I would like to know.\r\n\r\nSince accepting this PR, and adding `\"type\": \"module\"`, the errors below occur. If we set `\"moduleResolution\": \"NodeNext\"` in `tsconfg.json`, VScode can't load types of Hono.\r\n\r\nhttps://github.com/honojs/hono/issues/668#issuecomment-1365355811\r\n\r\nI'm also looking into this, but if you know how to solve it, please let us know how.\r\n",
          "I will check now",
          "Thank you!",
          "We have found ways to improve it, but it's a lot of work!\r\n\r\n\"tsconfig.json.compilerOptions.moduleResolution = NodeNext\" option seems to require that .d.ts files also have the extension\r\n\r\n## Before\r\n<img width=\"1446\" alt=\"\" src=\"https://user-images.githubusercontent.com/79634025/209622316-4ff34b5d-51aa-448f-9574-3ce7aabe6299.png\">\r\n\r\n## After\r\n<img width=\"1472\" alt=\"\" src=\"https://user-images.githubusercontent.com/79634025/209622336-4a5829ad-8f41-46e5-b166-ef82e6097583.png\">\r\n",
          "Ah, extension! We have a lot of work to do, but it's good to know we've found a solution.\r\nI'll try it soon. Thank you very much!"
        ]
      }
    ],
    "v2.5.5": [
      {
        "pr_number": 673,
        "title": "refactor: support new `@cloudflare/worker-types`",
        "body": "The new version of `@cloudflare/worker-types` has been released:\r\n\r\nhttps://blog.cloudflare.com/improving-workers-types/\r\n\r\nThis PR will support the new version and do some refactorings.\r\n\r\n* Fixed the type mismatch of `Request` object that is caused by using the new *workers-types*.\r\n* The new *workers-types* exports some types like `Request`, and we can import and use it. But we will continue to extend `Request` on the global without doing it.\r\n* We no longer use *workers-types* in the core Hono project. Instead, use [lib.webworker.d.ts](https://raw.githubusercontent.com/microsoft/TypeScript/main/lib/lib.webworker.d.ts). This means it does not depend on Cloudflare Workers.\r\n* However, only `KVNamespace` refers to *workers-types*.\r\n\r\nIf it looks OK, I'll merge it.\r\n\r\nRelated #671 ",
        "html_url": "https://github.com/honojs/hono/pull/673",
        "comments": [
          "By the way, I got this error.\r\n\r\n<img width=\"932\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/203090104-03299ba5-da06-4c2c-8f8a-79f95ba4d0ca.png\">\r\n",
          "@stefanmaric \r\n\r\nThank you for reviewing.\r\n\r\nI'll merge it now.",
          "This closed #671 "
        ]
      },
      {
        "pr_number": 674,
        "title": "refactor(context): refactor `context.ts`",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/674",
        "comments": []
      }
    ],
    "v2.5.4": [
      {
        "pr_number": 670,
        "title": "fix(package.json): add `typesVersions` section",
        "body": "`typesVersions` is needed.",
        "html_url": "https://github.com/honojs/hono/pull/670",
        "comments": []
      }
    ],
    "v2.5.3": [
      {
        "pr_number": 665,
        "title": "Update MIGRATION.md",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/665",
        "comments": ["Thank you!"]
      },
      {
        "pr_number": 669,
        "title": "fix(package.json): exports types correctly",
        "body": "This will fix #668 ",
        "html_url": "https://github.com/honojs/hono/pull/669",
        "comments": []
      }
    ],
    "v2.5.2": [
      {
        "pr_number": 662,
        "title": "fix(param): Decode context.param",
        "body": "Resolve #659.",
        "html_url": "https://github.com/honojs/hono/pull/662",
        "comments": ["Looks good! Thank you! I'll merge it."]
      }
    ],
    "v2.5.1": [
      {
        "pr_number": 658,
        "title": "fix(type): change the type definition of `req` in Context",
        "body": "This will fix #657 ",
        "html_url": "https://github.com/honojs/hono/pull/658",
        "comments": ["LGTM, thx for the quick fix :)"]
      },
      {
        "pr_number": 661,
        "title": "fix(sanitizer)",
        "body": "This address #660.",
        "html_url": "https://github.com/honojs/hono/pull/661",
        "comments": [
          "https://github.com/honojs/hono/blob/d3a6f80d7c70db5e48b3658c6dbbc228c58a3328/src/validator/validator.ts#L249-L257\r\n\r\nThis part is not called. Maybe we should `addRule` in `addSanitizer`? I am not sure what will be a good fix.",
          "Hi @yujong-lee !\r\n\r\nYou may already know this, but sanitizers are currently used only for verification and are not reflected in the verification results. If you are able to correct it, it would be very helpful you could.",
          "@yujong-lee \r\n\r\nI think that the sanitized value in the `validateValue` is not reflected in the result.\r\n\r\nhttps://github.com/honojs/hono/blob/d3a6f80d7c70db5e48b3658c6dbbc228c58a3328/src/validator/validator.ts#L330\r\n\r\nSo we need to sanitize it before passing it to `validateValue` or return the sanitized value from `validateValue`.",
          "@yusukebe Thank you for help! \r\n\r\nYes, that is something we should implement.\r\n\r\nBut another point I found is that in my test case, `validateRule` is called only once with `rule.type = 'type'`, not `rule.type = 'value'`.\r\n\r\nhttps://github.com/honojs/hono/blob/d3a6f80d7c70db5e48b3658c6dbbc228c58a3328/src/validator/validator.ts#L274-L283\r\n\r\nSo `validateValue` is not even called.\r\n\r\nIs there something that I missed?",
          "Ah, yes, you are right! In your test case, the `validateRule` is not called with `rule.type === 'value'`, so the sanitizer is also not called.\r\n\r\nI think we don't have to include sanitizers in `validateValue`. For example, how about creating a `sanitizeValue` function and calling it before `validateValue` and not sanitize in the `validateValue`.",
          "@yujong-lee Thanks! I'll merge it."
        ]
      }
    ],
    "v2.5.0": [
      {
        "pr_number": 644,
        "title": "feat(context): Introducing c.runtime",
        "body": "As mentioned in #413, it might be useful to have way to know on which platform the code is running. This PR introduces `c.runtime`, which is getter of `Context` interface.\r\n\r\n# Node, Deno, and Bun\r\n```ts\r\nconst global = globalThis as any\r\n\r\nif (global?.process?.title === 'node') {\r\n  return 'node'\r\n}\r\n\r\nif (global?.Deno !== undefined) {\r\n  return 'deno'\r\n}\r\n\r\nif (global?.Bun !== undefined) {\r\n  return 'bun' \r\n}\r\n```\r\nThis is straightforward. \r\n\r\nFor `Deno`, `global?.process?.title === 'deno'` is possible,  but I just used shorter one.\r\n\r\n# Cloudflare and Fastly\r\n```ts\r\nif (typeof global?.WebSocketPair === 'function') {\r\n  return 'cloudflare'\r\n}\r\n\r\nreturn 'fastly'\r\n```\r\n\r\n[WebSocketPair](https://developers.cloudflare.com/workers/runtime-apis/websockets/) is Cloudflare Worker's runtime API. I picked this because this is only available in CF. (For example, [cache](https://developers.cloudflare.com/workers/runtime-apis/cache/) exists in other platform with similar API.)\r\n\r\nFor `Fastly`, I don't know good way to determine it at runtime yet. (Resources: [1](https://github.com/honojs/compute-starter-kit), [2](https://developer.fastly.com/reference/compute/ecp-env/))\r\n\r\nBut it is almost safe to say it is `Fastly` if it is not others.\r\n```ts\r\ntype Platform = 'node' | 'deno' | 'bun' | 'cloudflare' | 'fastly'\r\n``` ",
        "html_url": "https://github.com/honojs/hono/pull/644",
        "comments": [
          "Hi @yujong-lee !\r\n\r\nWow great!! This is exactly what I wanted!\r\n\r\nOne thing:\r\n\r\n> But it is almost safe to say it is Fastly if it is not others.\r\n\r\nI think it is better not to judge this as `fastly`. There are other platforms (not just runtime) that Hono runs on. For example, it works on Edge Runtime by Vercel.\r\n\r\n* https://zenn.dev/yusukebe/articles/f3b130f69287fc\r\n\r\nIt also may work on [Vercel Edge Functions](https://vercel.com/features/edge-functions) (Although, Vercel's backend is powered by Cloudflare Workers!).\r\n\r\nThere is another platform/runtime that has not yet been released called Lagon.\r\n\r\n* https://lagon.app\r\n\r\nIt is possible that there will be another platform on which the web standard API will work, so it is better to set `other` if it is difficult to judge.\r\n\r\nOr do you have a better idea than `other`?",
          "`other` seems fine to me. I was thinking `unknown`, but `unknown` feels like something got wrong. \r\n\r\n`other` implies that it is just something that we don't support judging it yet.",
          "1. I found way to determine `Fastly`\r\n[Fastly compute serve](https://developer.fastly.com/reference/cli/compute/serve/) minifies code by default and have no options to turn it off. So I was struggling to find `Fastly-specific global variable`. But I found this [document](https://js-compute-reference-docs.edgecompute.app/index.html) and solved it.\r\n```ts\r\nif (global?.fastly !== undefined) {\r\n   return 'fastly'\r\n}\r\n```\r\n\r\n2. I added `Vercel`\r\n[Addressing the runtime](https://edge-runtime.vercel.sh/features/available-apis#addressing-the-runtime) from official doc.",
          "@yusukebe \r\n\r\nOne question pops in my head is that `Is 'Platform' better term over 'Runtime'?`\r\n\r\n1. We are calling `Runtime API` to determine on which our code is running\r\n2. Platform is a wider term than Runtime. This is important because Vercel has [Serverless Function Runtime](https://vercel.com/docs/concepts/functions/serverless-functions/runtimes) and [Edge Function Runtime](https://edge-runtime.vercel.sh/packages/runtime)\r\n\r\nSo I started to think that `c.runtime` is better than `c.platform`.\r\n\r\nIf we agree to do so, we need to decide how to name return values.\r\n\r\nMy thought is:\r\n- `'node' -> 'Node'`\r\n- `'deno -> 'Deno'`\r\n- `'bun' -> 'Bun'`\r\n- `'vercel' -> 'VercelEdge'`\r\n- `'cloudflare' -> 'CloudflareWorker'`\r\n- `'fastly' ->'FastlyCompute'`\r\n\r\nWhat do you think?",
          "@yujong-lee \r\n\r\nAdding \"fastly\" and \"vercel\" is good!\r\n\r\n> So I started to think that c.runtime is better than c.platform.\r\n\r\nAgree. I think `c.runtime` is better too.\r\n\r\n> If we agree to do so, we need to decide how to name return values.\r\n\r\nI think the name should be short and all lowercase because it can be just a \"short name\". So, I want to go with the following:\r\n\r\n```ts\r\ntype runtime = 'node' | 'deno' | 'bun' | 'vercel' | 'cloudflare' | 'fastly' | 'other'\r\n```\r\n\r\nFor example. It is unlikely that Cloudflare will have a Runtime other than \"Cloudflare Workers\" in he future. So, it's ok to be `cloudflare`. Of course, Cloudflare could have a different Runtime than Workers for Cloudflare Pages. However, that is a rare case, and in that case, we can add cloudflare-pages.\r\n",
          "@yusukebe Ok. I agree.\r\n\r\n I changed the code like below.\r\n```ts\r\nget runtime(): Runtime\r\ntype Runtime = 'node' | 'deno' | 'bun' | 'vercel' | 'cloudflare' | 'fastly' | 'other'\r\n```",
          "Thank you! I'll merge it!"
        ]
      },
      {
        "pr_number": 645,
        "title": "fix(type): make compatibility with `@cloudflare/workers-types`",
        "body": "This will fix #643 ",
        "html_url": "https://github.com/honojs/hono/pull/645",
        "comments": []
      },
      {
        "pr_number": 649,
        "title": "refactor(types): reduce type definitions",
        "body": "This PR is about refactoring. Remove `HonoContext`; use instead of `Context` as a class. Polish `ErrorHandler` and `NotFoundHandler` types.",
        "html_url": "https://github.com/honojs/hono/pull/649",
        "comments": []
      },
      {
        "pr_number": 651,
        "title": "fix(context): check cloudflare before checking node in `c.runtime`",
        "body": "In my environment the test in `context.test.ts` fails:\r\n\r\n<img width=\"563\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/199666904-33bb63fe-5d86-4ca0-954c-c9791403b449.png\">\r\n\r\nI don't know why it is be passed on the CI, but I think we have to fix the test and `contex.ts`.\r\n\r\nActually, the test environment with `miniflare` is not only \"node\" but also \"cloudflare\". There are both `global.process.title` and `global.WebSocketPair` in my environment.\r\n\r\n<img width=\"526\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/199667891-f70623e3-369b-4bc4-bf22-ff73a44dadc0.png\">\r\n\r\nIn this case, we have to check first whether it is `cloudflare` or not and check it later for `node`.\r\n",
        "html_url": "https://github.com/honojs/hono/pull/651",
        "comments": [
          "I was running `npx jest` rather than `yarn test`. I think that's whay `miniflare` env is not applied. I have no idea about why CI passed though.\r\n\r\nAnyway, I agree with the change you made. Thank you for the quick fix."
        ]
      },
      {
        "pr_number": 652,
        "title": "fix(error): make `notFound()` enables to catch errors correctly",
        "body": "This will fix #647",
        "html_url": "https://github.com/honojs/hono/pull/652",
        "comments": []
      },
      {
        "pr_number": 650,
        "title": "feat(app): introduce `app.showRoutes()`",
        "body": "This PR includes a new feature `app.showRoutes()`.\r\n\r\nSometimes it is difficult to see what routes are registered. I've created this feature to prevent us from losing time on that. Using `app.showRoutes`, will show the routes that are registered:\r\n\r\n<img width=\"476\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/199637644-77ccca0b-6218-4dd8-a7fa-8cd218fee245.png\">\r\n",
        "html_url": "https://github.com/honojs/hono/pull/650",
        "comments": []
      },
      {
        "pr_number": 653,
        "title": "feat(app): introduce `app.on(method, path, handler)`",
        "body": "This PR introduces `app.on()`.\r\n\r\nCurrently, the HTTP methods we can use are specified in the code:\r\n\r\nhttps://github.com/honojs/hono/blob/fadce526736a610248ec5175ca66ddcc5a84c883/src/router.ts#L3\r\n\r\nThe `app.on()` function will enable we set the custom HTTP method as we like:\r\n\r\n```ts\r\napp.on('PURGE', '/foo', async (c) => {\r\n  await purgeCache('foo')\r\n  return c.redirect('/')\r\n})\r\n```\r\n",
        "html_url": "https://github.com/honojs/hono/pull/653",
        "comments": [
          "Hi @usualoma !\r\n\r\nIf you can, please review this PR (I think this is a good feature).",
          "Oooh I really like this. I'm going to test it tonight \ud83d\udd25 Looks like a great feature for extending the language of HTTP. (Purge I think is actually pretty common already.) I approve this feature \ud83d\udc4d ",
          "@yusukebe \r\nYes, I too think it would be a very nice feature!\r\nI think some refactoring (#655) needs to be added to accommodate edge cases, but this PR is a good way to go!"
        ]
      },
      {
        "pr_number": 656,
        "title": "fix(types): export `ErrorHandler` and `NotFoundHandler`",
        "body": "I forgot about it.\r\n\r\nThis may close #648",
        "html_url": "https://github.com/honojs/hono/pull/656",
        "comments": []
      }
    ],
    "v2.4.1": [
      {
        "pr_number": 642,
        "title": "fix(jsx): export fragment",
        "body": "`Fragment` is not exported from `jsx-runtime`. Fixed it.",
        "html_url": "https://github.com/honojs/hono/pull/642",
        "comments": []
      }
    ],
    "v2.4.0": [
      {
        "pr_number": 631,
        "title": "fix(build): fix ESM support in Node.js / use `esbuild`",
        "body": "This PR fixes ES Modules support in Node.js is not working well. Previously, if we use Hono package in Node.js directly, the error would throw.\r\n\r\n<img width=\"973\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/198174189-ab5934cf-1875-46e0-8667-9142601abc3d.png\">\r\n\r\nI've done the following to fix this while keeping support for CommonJS.\r\n\r\n* Declare `type: \"module\"` in \"package.json\".\r\n* Use \"esbuild\" and make the script \"build.ts\" to build the projects instead of `tsc`.\r\n* Add extensions for importing modules, in ESM files that are emitted by esbuild, eg:`import { compose } from \"./compose.js\"`.\r\n* Copy \"package.json\" for CommonJS into `dist/cjs/package.json` (a little tricky).\r\n\r\nThis has enabled proper support for both ESM and CommonJS. However, this isn't easy to test and may not work well in your environment. If there is a problem, please let me know. We will fix it.\r\n\r\nThis PR is inspired by #629 . Thanks @pavi2410 . ",
        "html_url": "https://github.com/honojs/hono/pull/631",
        "comments": ["I'll merge it!"]
      },
      {
        "pr_number": 633,
        "title": "test(bun): JWT middleware works on Bun v0.2.2",
        "body": "Now, Bun supports WebCrypto!",
        "html_url": "https://github.com/honojs/hono/pull/633",
        "comments": []
      },
      {
        "pr_number": 634,
        "title": "fix(typo) package.cjs.json target to type",
        "body": "The \"type\" in package.cjs.json was set to \"target\".\r\nThe bug did not occur because the default \"type\" in package.json is \"commonjs\".\r\nI have not checked another property but it may have been overridden by default.\r\n\r\nThis package.cjs.json also worked\r\n```\r\n{}\r\n```",
        "html_url": "https://github.com/honojs/hono/pull/634",
        "comments": [
          "Hi @taishinaritomi !\r\n\r\nYou are right! I was confused with `tsconfig.json`. Thanks for fixing the typo that was difficult to realize!"
        ]
      },
      {
        "pr_number": 635,
        "title": "fix(validator): enable handling \"Bad Request\" in validator",
        "body": "Currently, with Validator middleware, if the JSON body is empty, it will return \"Malformed JSON in request body\" response error immediately. This behavior is good but it's not possible to handle in the validator middleware `done` method. This is mentioned in #561.\r\n\r\nTo handle \"Malformed JSON in request body\" error we have to write another middleware to get an error object. It's very verbose. So, in this PR, I made it we can handle \"Malformed JSON in request body\" in validator middleware.\r\n\r\nIf we have handler like below:\r\n\r\n```ts\r\n\r\napp.post(\r\n  '/posts',\r\n  validator(\r\n    (v) => ({\r\n      title: v.json('title'),\r\n    }),\r\n    {\r\n      done: (results, c) => {\r\n        return c.json(results, 400)\r\n      },\r\n    }\r\n  ),\r\n  (c) => {\r\n    return c.json({\r\n      message: 'Valid!',\r\n    })\r\n  }\r\n)\r\n```\r\n\r\nThen, post the empty body to the endpoint, the result response will be this:\r\n\r\n```json\r\n{\r\n  \"hasError\": true,\r\n  \"messages\": [\r\n    \"Malformed JSON in request body\"\r\n  ],\r\n  \"results\": [\r\n    {\r\n      \"isValid\": false,\r\n      \"message\": \"Malformed JSON in request body\",\r\n      \"target\": \"unknown\",\r\n      \"key\": null,\r\n      \"value\": null,\r\n      \"ruleName\": \"Malformed JSON in request body\",\r\n      \"ruleType\": \"value\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nThis will make it easier to handle cases where the JSON body content is empty.",
        "html_url": "https://github.com/honojs/hono/pull/635",
        "comments": [
          "Looks good to me! Tested it out, works as expected. Good fix \ud83d\udc4d ",
          "Yeah, I'll merge it!"
        ]
      },
      {
        "pr_number": 637,
        "title": "feat(types): introduce `CustomHandler` interface",
        "body": "In this PR, introduce `CustomHandler` interface that is exported for the users as `Handler`.\r\n\r\nIf we want to declare a handler outside of `app.get()`, we write it such like this:\r\n\r\n```ts\r\nconst handler: Handler = (c) => {\r\n  return c.text('Hi!')\r\n}\r\n```\r\n\r\nThen, in this `handler`, how can we make `c.env` or `c.get('foo')` have a type? Pass `string` as the first argument of the Generics for `Handler` and write the following:\r\n\r\n```ts\r\ntype Env = {\r\n  Bindings: { TOKEN: string }\r\n  Variables: { post: Post }\r\n}\r\n\r\nconst handler: Handler<string, Env> = (c) => { // <---\r\n  const post = c.get('post')\r\n  return c.json(post)\r\n}\r\n```\r\n\r\nThis is redundant to write `string` on purpose. So, in this PR, we can write just like this:\r\n\r\n```ts\r\nconst handler: Handler<Env> = (c) => {\r\n  const post = c.get('post')\r\n  return c.json(post)\r\n}\r\n```\r\n\r\nOf course, it keep to have the types:\r\n\r\n<img width=\"386\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/198859014-126412d8-908f-44f9-abd8-805e0909ef84.png\">\r\n\r\nIn actually, we can do something similar for Validator schema:\r\n\r\n```ts\r\nconst schema = (v: Validator) => ({\r\n  query: v.query('q'),\r\n})\r\n\r\ntype Schema = ReturnType<typeof schema>\r\n\r\nconst handler: Handler<Schema> = (c) => {\r\n  const { query } = c.req.valid()\r\n  return c.json({ query: query })\r\n}\r\n```\r\n\r\n<img width=\"446\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/198859081-bfb2d031-59b7-48ca-9e9a-a26d59bcd80e.png\">\r\n\r\nI think this is helpful to declare the handler independently for the user.",
        "html_url": "https://github.com/honojs/hono/pull/637",
        "comments": [
          "This closes #625. \r\n\r\nGreat feature. Looking forward to this being published.",
          "@yujong-lee \r\n\r\nThanks, I'll merge this and a new version will be released soon.\r\n\r\nIt is tested well, but it is difficult to notice problems with \"Types\", so please feel free to create an Issue if you notice any."
        ]
      },
      {
        "pr_number": 636,
        "title": "feat(validator): support `v.queries`",
        "body": "Close #622 ",
        "html_url": "https://github.com/honojs/hono/pull/636",
        "comments": [
          "Looks good so far! I want to test it a bit more though, so I will let you know my full feedback after trying to use it and break it \ud83d\ude06 ",
          "Hi @ThatOneBro !\r\n\r\nI want to merge, do you have something to do?",
          "Hi @yusukebe ! Sorry for the late reply! Looks good to me. Good job. I'll be using it some more soon and will open an issue if anything comes up \ud83d\udc4d",
          "Alright! I'll merge this!"
        ]
      },
      {
        "pr_number": 641,
        "title": "fix(types): improve custom handler",
        "body": "Allow any validated data that is not explicitly type defined.",
        "html_url": "https://github.com/honojs/hono/pull/641",
        "comments": []
      },
      {
        "pr_number": 640,
        "title": "test(routing): add test cases for route grouping order",
        "body": "```ts\r\nit('only works with correct order', async () => {\r\n  three.get('/hi', (c) => c.text('hi'))\r\n  two.route('/three', three)\r\n  one.route('/two', two)\r\n\r\n  const { status } = await one.request('http://localhost/two/three/hi', { method: 'GET' })\r\n  expect(status).toBe(200)\r\n})\r\n```\r\n\r\nSince this is kind-of-mentioned in [Routing Priority](https://honojs.dev/docs/api/routing/#routing-priority), it is easy to order routes incorrectly when grouping them. \r\n(I did. \ud83d\ude04 )\r\n\r\nI made some test cases in Hono's repo to understand what's happening in my app. I think it is good to add here too. And eventually, we better have some more detailed examples [here](https://github.com/honojs/honojs.dev/blob/main/content/docs/api/routing.md).\r\n\r\n",
        "html_url": "https://github.com/honojs/hono/pull/640",
        "comments": [
          "Hi @yujong-lee !\r\n\r\nThank you for the PR. You are right, this leads to mistakes. Sorry for wasting your time;(\r\n\r\nWe want to merge it, so please fix the test to pass the CI.\r\n\r\n",
          "@yujong-lee \r\n\r\nAdded the description about it: https://honojs.dev/docs/api/routing/#grouping-ordering\r\n\r\nIt's a little bit difficult to explain, then if you have the more helpful description, please give us the PR :)\r\nhttps://github.com/honojs/honojs.dev",
          "@yujong-lee \r\n\r\nThanks!"
        ]
      }
    ],
    "v2.3.2": [
      {
        "pr_number": 613,
        "title": "fix(validator): make \"isOptional\" work correctly with \"value\" validation",
        "body": "```ts\r\npage: v.query('page').isOptional().isNumeric()\r\n```\r\n\r\nwas validated as invalid. fixed it.",
        "html_url": "https://github.com/honojs/hono/pull/613",
        "comments": []
      },
      {
        "pr_number": 617,
        "title": "docs(migration): add `v2.2.5 to v2.3.0`",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/617",
        "comments": []
      },
      {
        "pr_number": 619,
        "title": "docs(contribution): update about 3rd-party middleware",
        "body": "Close #618",
        "html_url": "https://github.com/honojs/hono/pull/619",
        "comments": []
      },
      {
        "pr_number": 615,
        "title": "refactor(types): refactor and add tests for checking Types",
        "body": "Refactored the code almost related to Types. Then added the tests for checking Types.",
        "html_url": "https://github.com/honojs/hono/pull/615",
        "comments": ["Looks good to me! \ud83d\udc4d "]
      },
      {
        "pr_number": 620,
        "title": "test(validator): add test for custom rules",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/620",
        "comments": []
      },
      {
        "pr_number": 626,
        "title": "fix(deno): export static-router and smart-router",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/626",
        "comments": []
      },
      {
        "pr_number": 627,
        "title": "feat(validator): export `Validator` from 'hono'",
        "body": "You can write your schema definition outside the middleware handler as follows:\r\n\r\n```ts\r\nimport type { Validator } from 'hono'\r\nimport { validator } from 'hono/validator'\r\n\r\nconst schema = (v: Validator) => ({\r\n  query: v.query('query').isRequired(),\r\n  page: v.query('page').isNumeric().isOptional(),\r\n})\r\n\r\napp.get('/search', validator(schema), (c) => {\r\n  const { query, page } = c.req.valid()\r\n  //...\r\n  return c.text('Result!!')\r\n})\r\n```\r\n\r\n`Validator` and `validator` are similar and confusing, but if you don't like it, just use an alias.\r\n\r\nThis will fix #624 ",
        "html_url": "https://github.com/honojs/hono/pull/627",
        "comments": []
      }
    ],
    "v2.3.1": [
      {
        "pr_number": 612,
        "title": "fix(validator): show \"type\" error messages if does not have \"value\" errors",
        "body": "Fixed the bug returning an empty body if the results don't have \"value\" errors.",
        "html_url": "https://github.com/honojs/hono/pull/612",
        "comments": []
      }
    ],
    "v2.3.0": [
      {
        "pr_number": 589,
        "title": "perf: remove unrequired cloning of ctx.res",
        "body": "Response constructor's 2nd argument does not require a cloned response as all it does is read these fields and does not modify anything:\r\n- status\r\n- statusText\r\n- headers\r\n\r\n> https://fetch.spec.whatwg.org/#initialize-a-response",
        "html_url": "https://github.com/honojs/hono/pull/589",
        "comments": [
          "Hi @JakeChampion !\r\n\r\nThank you! You are right! I'll merge it.\r\n"
        ]
      },
      {
        "pr_number": 594,
        "title": "fix(deno): fixed the bug calling `next()` multiple times in Serve Static",
        "body": "Fix #593 ",
        "html_url": "https://github.com/honojs/hono/pull/594",
        "comments": []
      },
      {
        "pr_number": 595,
        "title": "test(bun): add more tests for serve static middleware",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/595",
        "comments": []
      },
      {
        "pr_number": 596,
        "title": "perf(serve-static): return immediately if `c.finalized`",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/596",
        "comments": []
      },
      {
        "pr_number": 592,
        "title": "feat(validator): introduce nested validation",
        "body": "This PR introduces \"nested validation\" for Validator Middleware.\r\n\r\nIn this PR, we can validate nested JSON structured data using `v.array()` and `v.object()` functions. After much thought and consideration, the result is this API.\r\n\r\nFor example, there is a nested object like below:\r\n\r\n```ts\r\nconst data = {\r\n  posts: [\r\n    {\r\n      id: 123,\r\n      title: 'JavaScript',\r\n      tags: ['Workers', 'Deno', 'Bun'],\r\n    },\r\n  ],\r\n  pager: {\r\n    prev: true,\r\n    next: false,\r\n  },\r\n}\r\n```\r\n\r\nIt will be validated with `v.array()` and `v.object()`:\r\n\r\n```ts\r\napp.post(\r\n  '/posts',\r\n  validator((v) => ({\r\n    posts: v.array('posts', (v) => ({\r\n      id: v.json('id').asNumber().isRequired(),\r\n      title: v.json('title'),\r\n      tags: v.json('tags').asArray(),\r\n    })),\r\n    pager: v.object('pager', (v) => ({\r\n      prev: v.json('prev').asBoolean(),\r\n      next: v.json('next').asBoolean(),\r\n    })),\r\n  })),\r\n  (c) => {\r\n    return c.text('Valid!')\r\n  }\r\n)\r\n```\r\n\r\nAnd it also has types:\r\n\r\n<img width=\"814\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/194732339-d0bee8c4-3388-42a5-b66d-f788b0ce331b.png\">\r\n\r\nIsn't it cool? I want to know your opinion.\r\n\r\n## Implementation\r\n\r\nIt has become a little bit complex. There may be something missing or wrong points in this implementation. If you notice any, please review them.\r\n\r\nThe code for `JSONPathCopy` is based on @ThatOneBro's  and @usualoma 's code.\r\n\r\nhttps://github.com/honojs/hono/pull/508/files#diff-91414c404fd51d6fb8e47ba511fd1a5c410e5fe3e732254f0f6d621175fcd647\r\n\r\nThis PR related: #584",
        "html_url": "https://github.com/honojs/hono/pull/592",
        "comments": [
          "The tests were passed on my environment, but these failed on the CI. I know it's about copying objects. I'll investigate to solve it.",
          "Looks good to me so far! I will look again tomorrow to make sure everything makes sense, but from first glances it looks great. I was able to use nested arrays successfully on CFW \ud83d\udc4d ",
          "Awesome job!\r\nI agree with these changes!\r\n\r\n### Minor issues\r\n\r\nI don't think we are testing `asArray` here. Do we need to correct the name of the test?\r\n\r\nhttps://github.com/honojs/hono/pull/592/files#diff-69cfe3c04c26baba3e5078f8d04c7434c55883045ab8bb255a27f09383330f5fR406",
          "> I don't think we are testing asArray here. Do we need to correct the name of the test?\r\n\r\nI forgot to remove them! Thank you!\r\n\r\nAnd, this test fails on the CI, do you know the solution?\r\nhttps://github.com/honojs/hono/actions/runs/3216097795/jobs/5257654578#step:7:292\r\n\r\nIt does not fail on my environment. I think this is a problem related to copying objects, but I don't know how to fix it.",
          "> It does not fail on my environment. I think this is a problem related to copying objects, but I don't know how to fix it.\r\n\r\nI just tested it in a Docker container, it seems it may be an issue with Ubuntu or Linux in general. On my Mac, the tests do not fail. I will continue looking into it more, hopefully we can figure it out easily.",
          "I created a PR (#598) for this feature branch that should fix the CI issues, it introduces an immutable version of the `mergeObjects` function. ",
          "Hi @ThatOneBro !\r\n\r\nWow cooooool! Tests have been passed. Thank you very much!\r\n\r\nI'll merge this PR to the main branch later."
        ]
      },
      {
        "pr_number": 603,
        "title": "feat(validator): has the error message per rule",
        "body": "In this PR, the validator will have multiple result objects, so it will have an error message per rule.\r\n\r\nFor example, one error message will become more friendly.\r\n\r\n```\r\n'Invalid Value: the request body \"title\" is invalid - abcdefg'\r\n```\r\n\r\nwill be:\r\n\r\n```\r\n'Invalid Value [abcdef]: the request body \"title\" is invalid - isLength'\r\n```\r\n\r\nInternally, it has error objects as follows:\r\n\r\n```json\r\n[\r\n  {\r\n      \"isValid\": true,\r\n      \"target\": \"body\",\r\n      \"key\": \"title\",\r\n      \"value\": \"abcdefg\",\r\n      \"ruleName\": \"should be \\\"string\\\"\",\r\n      \"ruleType\": \"type\"\r\n  },\r\n  {\r\n      \"isValid\": false,\r\n      \"message\": \"Invalid Value [abcdefg]: the request body \\\"title\\\" is invalid - isLength\",\r\n      \"target\": \"body\",\r\n      \"key\": \"title\",\r\n      \"value\": \"abcdefg\",\r\n      \"ruleName\": \"isLength\",\r\n      \"ruleType\": \"value\"\r\n  }\r\n]\r\n```\r\n\r\nIf you want to do more complex error handling, you can refer to this result objects in the `done` option.\r\n\r\n```ts\r\nconst vHandler = validator(\r\n  (v) => ({\r\n    title: v.body('title').isLength({ max: 5 }),\r\n  }),\r\n  {\r\n    done: (res, c) => {\r\n      if (res.hasError) {\r\n        // ... do something\r\n        // console.log(res.results)\r\n      }\r\n    },\r\n  }\r\n)\r\n```\r\n\r\nThis PR is related to #561 ",
        "html_url": "https://github.com/honojs/hono/pull/603",
        "comments": [
          "Hi @ThatOneBro !\r\n\r\nCould you see this PR?",
          "Hi @yusukebe , sorry it took so long! I meant to already review this PR, I'll look at it right now! \ud83d\ude04 ",
          "I did some testing and I think this PR is good.\r\n\r\nI added a test in #609 in case you want to merge the test in too.",
          "@ThatOneBro Thank you!\r\n\r\nLet's go with this!"
        ]
      },
      {
        "pr_number": 608,
        "title": "fix(bearer-auth, basic-auth): handler should not be executed when unauthorized",
        "body": "This is a huge security concern. Imagine securing a nuclear launch handler with it :scream: \r\n\r\nI would suggest yanking all previous versions with this middleware",
        "html_url": "https://github.com/honojs/hono/pull/608",
        "comments": [
          "Hi @NOBLES5E !\nI'll do it soon. Thank you!!",
          "@NOBLES5E Thanks again!\r\n\r\nYou are right, this is bad. As your implementation, we must \"return\" the Response.\r\n\r\n>  // To Hono maintainers: I don't think we can support nested middleware when the middleware returns early\r\n>  // since `next()` is never called in this case. Feel free to correct me\r\n\r\nWe need to support \"nested\" middleware because there is a case only the context has \"username/password\". For example, Cloudflare Workers / Modules mode.\r\n\r\nI think the best way is to return `auth` as follows, what do you think? This is a breaking change, but it's  OK because it is a security fix.\r\n\r\n```ts\r\napp.use('/auth/*', async (c, next) => {\r\n  const auth = basicAuth({ username: c.env.USERNAME, password: c.env.PASSWORD })\r\n  return auth(c, next)\r\n})\r\n```\r\n\r\nHowever, this is an issue that should be resolved as quickly as possible, so I may merge or I may fix it without your response.\r\n",
          "@NOBLES5E \r\n\r\nI'll merge this PR now. If you have any ideas or some issues, please comment here or create an issue.\r\nThanks again again!",
          "Thank you for your prompt action : )"
        ]
      },
      {
        "pr_number": 610,
        "title": "fix(basic/bearer): support \"nested\" middleware",
        "body": "This is a continuation of #608 .",
        "html_url": "https://github.com/honojs/hono/pull/610",
        "comments": []
      },
      {
        "pr_number": 611,
        "title": "refactor(jwt): refactor code and add more tests",
        "body": "This is like #608 but just refactoring. It's not a security fix because it's already secured.",
        "html_url": "https://github.com/honojs/hono/pull/611",
        "comments": []
      }
    ],
    "v2.2.5": [
      {
        "pr_number": 583,
        "title": "fix(compose): fix for error handling with `async`",
        "body": "The following PR did not support `async`.\r\n\r\nhttps://github.com/honojs/hono/pull/576\r\n\r\nThis PR will support `async`. Will fix https://github.com/honojs/hono/issues/575",
        "html_url": "https://github.com/honojs/hono/pull/583",
        "comments": []
      }
    ],
    "v2.2.4": [
      {
        "pr_number": 563,
        "title": "feat(validator): add support for JSON array path validation",
        "body": "This PR adds support for JSON array paths in the JSONPath util, and also support for validating JSON array paths from a validator context.\r\n\r\nThe update doesn't break backwards compatibility with the current API (besides the previous less standard `.i` syntax, eg. `posts.4` instead of `posts[4]`) and provides the ability to validate arbitrary array paths, including complex paths of nested arrays and objects.\r\n\r\nFor example this:\r\n```ts\r\nconst jsonBody = {\r\n  posts: [\r\n    {\r\n       title: 'New Post 1',\r\n       tags: ['new-ish', false],\r\n    },\r\n    {\r\n       title: 'New Post 2',\r\n       tags: ['newest', true],\r\n    },\r\n  ],\r\n}\r\n```\r\nCan have arbitrary validations like this:\r\n```ts\r\nvalidator((v) => ({\r\n  title: v.json('posts[*].title').isRequired(),\r\n  secondTag: v.json('posts[*].tags[1]').asBoolean().isRequired(),\r\n}))\r\n```\r\n\r\nOne thing I would like to do in the future is to provide messages to the API consumer about which specific values in an array path failed validation, eg. `posts[2].title is required -- undefined`. I have a working version of this in a patch for the old middleware using `validator.js`, but it would need to be modified, as mentioned in #561. However, that is for another time. As of now, I think I am ready for comment on this PR.\r\n\r\nLet me know if there is anything that needs to be changed with this PR before merge, or if you think this is a good approach at all.",
        "html_url": "https://github.com/honojs/hono/pull/563",
        "comments": [
          "Hi @ThatOneBro !\r\n\r\nWow, great! This is one of the things I wanted to do. It seems to me that implementation is OK.\r\nI want to merge it.\r\n\r\n@usualoma \r\nWhat about do you think?\r\n\r\n> One thing I would like to do in the future is to provide messages to the API consumer about which specific values in an array path failed validation, eg. posts[2].title is required -- undefined.\r\n\r\nIt would be better if we could do this. You are right, we will do it later.\r\n\r\nBTW, as I commented in this PR #561 , I am in the progress of implementing a new way to handle error messages.",
          "> Wow, great! This is one of the things I wanted to do. It seems to me that implementation is OK. I want to merge it.\r\n\r\nGreat! Glad to hear it. I'm glad it's not too broken then \ud83d\ude06 \r\n\r\n> BTW, as I commented in this PR https://github.com/honojs/hono/issues/561 , I am in the progress of implementing a new way to handle error messages.\r\n\r\nOh yeah great! I'll wait for that change then! \ud83d\ude04 \r\n\r\nActually, about this PR, what do you think about these line where type is enforced? Are these checks too lax? Should it check the whole array, or will this be a problem?\r\n```ts\r\n@@ -147,26 +151,51 @@ export abstract class VBase {\r\n\r\n  private validateValue = (value: Type): boolean => {\r\n    // Check type\r\n    if (typeof value !== this.type) {\r\n      if (this._optional && typeof value === 'undefined') {\r\n        // Do nothing.\r\n        // The value is allowed to be `undefined` if it is `optional`\r\n      } else {\r\n        return false\r\n    if (Array.isArray(value)) {\r\n      if (!value[0] || typeof value[0] !== this.type) { // Is this too naive about other array elements?\r\n        if (this._optional && typeof value[0] === 'undefined') { // Is this too naive about other array elements?\r\n          // Do nothing.\r\n          // The value is allowed to be `undefined` if it is `optional`\r\n        } else {\r\n          return false\r\n        }\r\n      }\r\n    }\r\n```",
          "@ThatOneBro \r\n\r\n> Actually, about this PR, what do you think about these line where type is enforced? Are these checks too lax? Should it check the whole array, or will this be a problem?\r\n\r\nAh, I think we should check all the values in the whole array.",
          "Hi @ThatOneBro !\r\nI think this PR is a great idea and a great implementation!\r\nWould be nice if we could merge it!\r\n\r\n### We should be aware of whether the resulting value is an array or not\r\n\r\nThe request in the following code will be 400 in the main branch but 200 in this PR branch.\r\nThis is not the result the user expects, so we should be aware of whether the resulting value is an array or not.\r\n\r\n```ts\r\n  app.post(\r\n    '/post',\r\n    validator((v) => ({\r\n      post: {\r\n        title: v.json('post.title').isAlpha(),\r\n      }\r\n    })),\r\n    (c) => {\r\n      const post = c.req.valid().post\r\n      return c.json({post})\r\n    }\r\n  )\r\n\r\n  it('Should return 400 response', async () => {\r\n    const json = {\r\n      post: {\r\n        title: ['Hello'], // <- array\r\n      },\r\n    }\r\n    const req = new Request('http://localhost/post', {\r\n      method: 'POST',\r\n      body: JSON.stringify(json),\r\n    })\r\n    const res = await app.request(req)\r\n    expect(res.status).toBe(400)\r\n  })\r\n```",
          "@yusukebe \r\n> Ah, I think we should check all the values in the whole array.\r\n\r\nAdded some new commits to check all the types in an array, and also some more tests \ud83d\ude04 Let me know what you think!",
          "> ### We should be aware of whether the resulting value is an array or not\r\n> The request in the following code will be 400 in the main branch but 200 in this PR branch. This is not the result the user expects, so we should be aware of whether the resulting value is an array or not.\r\n\r\nGood point, so we should either make it explicit in the JSONPath like this:\r\n```ts\r\nvalidator((v) => ({\r\n  post: {\r\n    title: v.json('post.title[*]').isAlpha(),\r\n  }\r\n})),\r\n```\r\nOr as a a method like this:\r\n```ts\r\nvalidator((v) => ({\r\n  post: {\r\n    title: v.json('post.title').isArrayOf().isAlpha(),\r\n    published: v.json('post.published').isArrayOf().asBoolean().isAlpha(),\r\n  }\r\n})),\r\n```\r\nOr maybe, we need to just add a VArray class, which contains VBase subclasses?\r\n```ts\r\nvalidator((v) => ({\r\n  post: {\r\n    title: v.json('post.title').asArray('string').isAlpha(),\r\n  }\r\n})),\r\n```\r\n\r\nWhat do you think @yusukebe @usualoma ?",
          "@ThatOneBro @usualoma \r\n\r\nI think this is a matter of whether or not to allow \"Array\" in the validated result values. If it supports \"Array\" values and adds \"Array\" type, the test code will be like the below:\r\n\r\n```ts\r\n  app.post(\r\n    '/post',\r\n    validator((v) => ({\r\n      post: {\r\n        tags: v.json('post.title').asArray('string').isAlpha(),\r\n      },\r\n    })),\r\n    (c) => {\r\n      const res = c.req.valid()\r\n      const tags = res.post.tags // <== string[]\r\n      const tag1 = tags[0] // <== \"Workers\"\r\n      return c.json({ tag1: tag1 })\r\n    }\r\n  )\r\n\r\n  it('Should return 400 response', async () => {\r\n    const json = {\r\n      post: {\r\n        tags: ['Workers', 'Deno', 'Bun'],\r\n      },\r\n    }\r\n    const req = new Request('http://localhost/post', {\r\n      method: 'POST',\r\n      body: JSON.stringify(json),\r\n    })\r\n    const res = await app.request(req)\r\n    expect(res.status).toBe(200)\r\n    expect(await res.json()).toEqual({ tag1: 'Workers' })\r\n  })\r\n```\r\n\r\nAnd we should make \"VArray\".\r\n\r\nWe have to consider how well it will support the type, but yes, \"asArray\" is useful.",
          "I haven't confirm if it is possible, but it would be nice to be able to write like this.\r\n\r\n```ts\r\napp.post(\r\n  '/post',\r\n  validator((v) => ({\r\n    post: {\r\n      tags: v.json('post.title').asArray((v) => v.asString().isAlpha()),\r\n    },\r\n  })),\r\n  (c) => {\r\n    const res = c.req.valid()\r\n  }\r\n)\r\n\r\nit('Should return 200 response', async () => {\r\n  const json = {\r\n    post: {\r\n      tags: ['Workers', 'Deno', 'Bun'],\r\n    },\r\n  }\r\n  const req = new Request('http://localhost/post', {\r\n    method: 'POST',\r\n    body: JSON.stringify(json),\r\n  })\r\n  const res = await app.request(req)\r\n  expect(res.status).toBe(200)\r\n})\r\n```",
          "Ah,  \r\n\r\n```ts\r\nv.json('post.title').asArray((v) => v.asString().isAlpha())\r\n```\r\n\r\nI like that \"callback\" style, but it is used too much, so I think users may be confused. So it's good for me to be like below:\r\n\r\n```ts\r\nv.json('post.title').asArray('string').isAlpha()\r\n```\r\n\r\nI haven't thought about implementation, but it is not impossible.\r\n\r\nEDIT:\r\n\r\nOr just like this:\r\n\r\n```ts\r\nv.json('post.title').asArray().isAlpha()\r\nv.json('post.id').asNumber().asArray().isRequired()\r\n```",
          "In the meantime, I will note what I felt.\r\nHowever, if we decide to go with the `asArray('string')` style, I agree with that decision.\r\n\r\n\r\n### asArray('string')\r\n\r\nThis seemed inconsistent with `asNumber()` and `asBoolean()`.\r\nIf this writing style (`asArray('string')`) is adopted, it would be consistent if there is `as('string')` or `as('boolean')` and then `asArrayOf('string')`.\r\n\r\nYes, of course, I understand that `asNumber()` and `asBoolean()` are already released feature, so changing them is not desirable.\r\n\r\n\r\n### asNumber().asArray()\r\n\r\nThis makes me wonder if I should write `asNumber().asArray()` or `asArray().asNumber()`.\r\n\r\nIt might be possible to make a specification that either is acceptable.",
          "> It might be possible to make a specification that either is acceptable.\r\n\r\nYes. I think `asNumber().asArray()` and `asArray().asNumber()` should both behave the same.",
          "@ThatOneBro \r\n\r\nI think if we change it to something like the following PR, it would be more compatible with https://jsonpath.com/ and allow for a variety of specifications.\r\nhttps://github.com/ThatOneBro/hono/pull/1",
          "> @ThatOneBro\r\n> \r\n> I think if we change it to something like the following PR, it would be more compatible with https://jsonpath.com/ and allow for a variety of specifications. [ThatOneBro#1](https://github.com/ThatOneBro/hono/pull/1)\r\n\r\nGreat work! Yes I think this is better. I did notice two failing tests from the change, I will merge the PR and attempt to fix them. \r\nAfter that I'll propose my implementation of `VArray` and `asArray` .\r\n",
          "Hi!\r\n\r\nI've implemented what I think about `asArray`. This is a verbose code, but you can refer to it (I will make a PR to this branch if you want).\r\n\r\nhttps://github.com/yusukebe/hono/commit/e47f39509aa0bf5cb6607d2f07467f5b8733563a",
          "> I've implemented what I think about `asArray`. This is a verbose code, but you can refer to it.\r\n\r\nGreat! I think there are a few broken tests in the latest version, should I change them on this PR, or will you resolve them?\r\n\r\nCurrently there are two that are broken:\r\n```\r\n\u25cf Handle array paths \u203a Should provide error with invalid array paths\r\n\r\n    expect(received).toBe(expected) // Object.is equality\r\n\r\n    Expected: \"Invalid Value: the JSON body \\\"posts[*].rating[3]\\\" is invalid - [undefined, undefined, undefined]\"\r\n    Received: \"Invalid Value: the JSON body \\\"posts[*].rating[3]\\\" is invalid - undefined\"\r\n    \r\n\u25cf Handle array paths \u203a Should allow optional array paths\r\n\r\n    expect(received).toEqual(expected) // deep equality\r\n\r\n    - Expected  - 1\r\n    + Received  + 0\r\n\r\n      Array [\r\n        \"cool\",\r\n    -   undefined,\r\n        \"lame\",\r\n      ]\r\n```\r\n\r\nI think test one *could* be modified to pass, but test 2 probably *should* still pass with the new implementation.",
          "@ThatOneBro \r\n\r\nLet's do below:\r\n\r\n* I'll create PR to your branch: https://github.com/ThatOneBro/hono/tree/add-jsonpath-array\r\n* Please resolve the test problem above.\r\n* I think my PR lacks some tests. Please add more tests if needed.\r\n* Feel free to make changes if you are not satisfied with the implementation.\r\n\r\nEDIT:\r\n\r\nI made the PR: https://github.com/ThatOneBro/hono/pull/2",
          "@yusukebe Great, sounds like a plan! I'll fix the tests and add some more \ud83d\udc4d ",
          "@ThatOneBro \r\n\r\nThanks for merging my PR.\r\n\r\nSorry I didn't mention it in that PR. I think that in validator.test.ts the expected result should be modified.\r\n```diff\r\ndiff --git a/src/middleware/validator/validator.test.ts b/src/middleware/validator/validator.test.ts\r\nindex 60381ef..32673e4 100644\r\n--- a/src/middleware/validator/validator.test.ts\r\n+++ b/src/middleware/validator/validator.test.ts\r\n@@ -257,7 +257,7 @@ describe('Handle array paths', () => {\r\n     const res = await validator.validate(req)\r\n     expect(res.isValid).toBe(true)\r\n     expect(res.message).toBeUndefined()\r\n-    expect(res.value).toEqual(['cool', undefined, 'lame'])\r\n+    expect(res.value).toEqual(['cool', 'lame'])\r\n   })\r\n \r\n   it('Should provide error with invalid array paths', async () => {\r\n@@ -265,10 +265,10 @@ describe('Handle array paths', () => {\r\n     const res = await validator.validate(req)\r\n     expect(res.isValid).toBe(false)\r\n     const messages = [\r\n-      'Invalid Value: the JSON body \"posts[*].rating[3]\" is invalid - [undefined, undefined, undefined]',\r\n+      'Invalid Value: the JSON body \"posts[*].rating[3]\" is invalid - undefined',\r\n     ]\r\n     expect(res.message).toBe(messages.join('\\n'))\r\n-    expect(res.value).toEqual([undefined, undefined, undefined])\r\n+    expect(res.value).toEqual(undefined)\r\n   })\r\n \r\n   it('Should prevent invalid types within array', async () => {\r\n```\r\n\r\nThe reason is that the following results are obtained at https://jsonpath.com/, and I think it is better to have the same behavior at hono.\r\n\r\n<img width=\"1080\" alt=\"image\" src=\"https://user-images.githubusercontent.com/30598/193139470-579ca369-d224-4731-9aad-893c065b2d6a.png\">\r\n\r\n<img width=\"1082\" alt=\"image\" src=\"https://user-images.githubusercontent.com/30598/193139541-09f673ac-fb43-433e-a7ad-3e5430bc4163.png\">\r\n",
          "I think the added `asArray` implementation is a good one!\r\nI also think that the following additional modifications are needed in my opinion.\r\n\r\n```diff\r\ndiff --git a/src/middleware/validator/validator.ts b/src/middleware/validator/validator.ts\r\nindex c4372b8..e92f9bb 100644\r\n--- a/src/middleware/validator/validator.ts\r\n+++ b/src/middleware/validator/validator.ts\r\n@@ -35,6 +35,7 @@ export abstract class VBase {\r\n   key: string\r\n   rules: Rule[]\r\n   sanitizers: Sanitizer[]\r\n+  isArray: boolean = false\r\n   private _message: string | undefined\r\n   private _optional: boolean\r\n   constructor(options: VOptions) {\r\n@@ -154,7 +155,11 @@ export abstract class VBase {\r\n \r\n   private validateValue = (value: Type): boolean => {\r\n     // Check type\r\n-    if (Array.isArray(value)) {\r\n+    if (this.isArray) {\r\n+      if (!Array.isArray(value)) {\r\n+        return false\r\n+      }\r\n+\r\n       for (const val of value) {\r\n         if (typeof val !== this.type) {\r\n           // Value is of wrong type here\r\n```",
          "Hey @usualoma!\r\n> The reason is that the following results are obtained at https://jsonpath.com/, and I think it is better to have the same behavior at hono\r\n\r\nYes I agree we should keep the implementation in line with jsonpath. So the `undefined` instead of `[undefined, undefined, undefined]` makes a lot of since, and I don't think it affects validation. \r\n\r\nHowever, returning `[\"cool\", \"lame\"]` instead of `[\"cool\", undefined, \"lame\"]` will break the validation as implemented, right? You could check if all array lengths match the expected length, but you cannot easily know which indices are invalid without doing a diff I guess.\r\n\r\nHow should we handle this? I would like to be able to return some error message like this:\r\n`posts[1].rating[1] is invalid -- undefined`\r\nto the user -- one error message for each element in the array that is invalid, along with the index. How could we accomplish this?\r\n\r\n> I think the added asArray implementation is a good one!\r\nI also think that the following additional modifications are needed in my opinion.\r\n\r\nYou're right! I was just writing tests for this functionality. I'll add your change too!",
          "Actually there's still one question about arrays I have:\r\nShould an array type be differentiated from deeply nested values? For example:\r\n```ts\r\nconst req = {\r\n  posts: [\r\n    { \r\n       title: 'Post 1',\r\n       tags: ['post', 'long'],\r\n    },\r\n    { \r\n       title: 'Post 2',\r\n       tags: ['post', 'short'],\r\n    },\r\n  ],\r\n}\r\n```\r\n```ts\r\n\r\nv => { \r\n  // Should these two be treated the same? \r\n  title: v.json('posts[*].title').asArray(), // Should `asArray()` be required here?\r\n  tags: v.json('posts[*].tags').asArray(),\r\n}\r\n```\r\nIn the example, the first item `title` is not an array value being evaluated, just it happens that the path returns an array of these values which should be evaluated with the same validators. However, the second item `tags` is an actual array. Should these be treated the same or differently? Personally, I think the first one shouldn't require an `asArray()` call. What do you think?",
          "I think this requires `asArray()`:\r\n\r\n```ts\r\ntitle: v.json('posts[*].title').asArray()\r\n```\r\n\r\n`asSomeType` means \"expect SomeType and will cast to SomeType\". Since `VString` is the default in this Validator, if we expect an array, we should use `asArray()` to make it a `VStringArray`. And the \"actual value that is evaluated\" should be used. The actual value that the user uses is the evaluated value.\r\n\r\nIf it is a nested array, we can write it like this:\r\n\r\n```ts\r\ntags: v.json('post[*].tags[*]').asArray()\r\n```\r\n\r\nWhat do you think?",
          "Hmmm, sorry if I'm wrong. I thought about it, and I think what @ThatOneBro needs should be accomplished in this way. (Not a problem that should be solved with `*`, in my opinion.)\r\n\r\n```ts\r\ndescribe('validate nested structure by asArray', () => {\r\n  const app = new Hono()\r\n  app.post(\r\n    '/post',\r\n    validator((v) => ({\r\n      posts: v.json('posts').asArray((nest) => ({\r\n        title: nest.json('title').isAlpha(),\r\n        tags: nest.json('tags').asArray().isRequired(),\r\n        ids: nest.json('ids').asNumber().asArray(),\r\n      }))\r\n    })),\r\n    (c) => {\r\n      const res = c.req.valid()\r\n      return c.json({ tag1: res.posts[0].tags[0] })\r\n    }\r\n  )\r\n\r\n  it('Should return 200 response', async () => {\r\n    const json = {\r\n      post: {\r\n        title: 'foo',\r\n        tags: ['Workers', 'Deno', 'Bun'],\r\n        ids: [1, 3, 5],\r\n      },\r\n    }\r\n    const req = new Request('http://localhost/post', {\r\n      method: 'POST',\r\n      body: JSON.stringify(json),\r\n    })\r\n    const res = await app.request(req)\r\n    expect(res.status).toBe(200)\r\n    expect(await res.json()).toEqual({ tag1: 'Workers' })\r\n  })\r\n})\r\n```\r\n\r\nI think we can assign a type to this.\r\n\r\n<img width=\"558\" alt=\"image\" src=\"https://user-images.githubusercontent.com/30598/193165303-dbf14b39-1d97-429b-8874-07ccfb6e27eb.png\">\r\n\r\n<img width=\"625\" alt=\"image\" src=\"https://user-images.githubusercontent.com/30598/193165323-95a14dff-9e94-4c05-95ca-564d958ed1b3.png\">\r\n\r\n<img width=\"645\" alt=\"image\" src=\"https://user-images.githubusercontent.com/30598/193165344-924cba2b-1ed8-4e45-a69c-dbc0d1c9c968.png\">\r\n\r\nI think this would be a good way to return a thoughtful error message (if we try hard enough).",
          "@usualoma You know what, this makes a lot of sense. I thought about doing this in a similar way before, but because the original middleware used JSONPath syntax, I tried to make it work with that. This actually may be better for nested objects inside of arrays. I'll wait for @yusukebe to make a comment before we start work on this though.\r\n",
          "Ah, yes! It would be best if we could do the following that @usualoma mentioned:\r\n\r\n```ts\r\nvalidator((v) => ({\r\n  posts: v.json('posts').asArray((nest) => ({\r\n    title: nest.json('title').isAlpha(),\r\n    tags: nest.json('tags').asArray().isRequired(),\r\n    ids: nest.json('ids').asNumber().asArray(),\r\n  })),\r\n}))\r\n```\r\n\r\nIt's good!!\r\n\r\n@ThatOneBro \r\n\r\nCan you do it this way?",
          "I think the following\r\n\r\n### `props[*]` and `asArray()` work very well!\r\n\r\n```ts\r\ntitle: v.json('posts[*].title').asArray()\r\n```\r\n\r\n```ts\r\ntags: v.json('post[*].tags[*]').asArray()\r\n```\r\n\r\nthese are very nice features to be able to write in this way.\r\n\r\nIt would be a rather large change if we were to do nested validation, so I think it would be better to merge them once in this PR (sorry if you don't get the result you originally intended), which is the addition of these (`*` and asArray() ) features.\r\n\r\nI think it would be a good idea to have a separate PR for nested validation.",
          "> these are very nice features to be able to write in this way.\r\n\r\nTrue, I think this is good. I will edit some tests to make sure that they are testing the desired functionality.\r\n\r\n> I think it would be a good idea to have a separate PR for nested validation.\r\n\r\nOh yeah, you're probably right. We'll save it for another PR.\r\n\r\nEDIT: I realized there was a mistake in the test, I think it's not actually a problem \ud83d\ude05 \r\n\r\nEDIT2: Actually I did find the problem I thought there was \ud83d\ude13 \r\n\r\nHere is an example in a test:\r\n```ts\r\n  const v = new Validator()\r\n  const json = {\r\n    post: {\r\n      title: ['Hello'],\r\n      flags: [true, false],\r\n      published: [true],\r\n      comments: [\r\n        {\r\n          title: 'abc',\r\n          author: 'John',\r\n          flags: [true, false],\r\n        },\r\n        {\r\n          title: 'def',\r\n          author: 'Dave',\r\n          flags: [false, true],\r\n        },\r\n        {\r\n          author: 'Bob',\r\n          flags: [true],\r\n        },\r\n      ],\r\n    },\r\n  }\r\n  \r\n  const req = new Request('http://localhost/', {\r\n    method: 'POST',\r\n    body: JSON.stringify(json),\r\n  })\r\n  \r\n  it('Should fail validation if `isRequired` and missing entry for path', async () => {\r\n    const validator = v.json('post.comments[*].title').asArray().isRequired()\r\n    const res = await validator.validate(req)\r\n\r\n    console.log(res)\r\n    expect(res.isValid).toBe(false)\r\n  })\r\n  // Expected: false\r\n  // Received: true\r\n```\r\nWhat do we think about this? I think it's caused by the JSONPath skipping over the undefined, so the validator only knows about the valid array entries. How should we fix this?",
          "Is this the problem pointed out in this comment?\r\n\r\nhttps://github.com/honojs/hono/pull/563#issuecomment-1262822204\r\n\r\nI think it should be `[\"cool\", undefined, \"name\"]` rather than `[\"cool\", \"name\"]`. it is important to keep the `https://jsonpath.com` specification, but it is more important to be able to validate `undefined`.",
          "> Is this the problem pointed out in this comment?\r\n> \r\n> [#563 (comment)](https://github.com/honojs/hono/pull/563#issuecomment-1262822204)\r\n> \r\n> I think it should be `[\"cool\", undefined, \"name\"]` rather than `[\"cool\", \"name\"]`. it is important to keep the `https://jsonpath.com` specification, but it is more important to be able to validate `undefined`.\r\n\r\nYes that's right. I think that we may have to violate the spec in this case, as much as we don't want to do that. What do you think about this @usualoma ? Does it make sense in this case?",
          "OK.\r\n\r\n```ts\r\n[\"cool\", undefined, \"name\"].\r\n```\r\n\r\nIf we were to adopt this, I think the other problem should also be as follows.\r\n\r\n```ts\r\n[undefined, undefined, undefined]\r\n```\r\n\r\nIn that case, the code in json.ts could be simpler with the following changes.\r\n\r\n```diff\r\ndiff --git a/src/utils/json.test.ts b/src/utils/json.test.ts\r\nindex 03fc1e3..5586f6f 100644\r\n--- a/src/utils/json.test.ts\r\n+++ b/src/utils/json.test.ts\r\n@@ -109,7 +109,7 @@ describe('JSONPath', () => {\r\n   })\r\n \r\n   it('Should return undefined if there is no matching path.', () => {\r\n-    expect(JSONPath(data, 'releases[*].i386')).toBe(undefined)\r\n+    expect(JSONPath(data, 'releases[*].i386')).toEqual([undefined, undefined, undefined])\r\n   })\r\n \r\n   it('Should return value from nested array', () => {\r\ndiff --git a/src/utils/json.ts b/src/utils/json.ts\r\nindex f4d9613..cd79dfb 100644\r\n--- a/src/utils/json.ts\r\n+++ b/src/utils/json.ts\r\n@@ -3,8 +3,6 @@ export type JSONArray = (JSONPrimitive | JSONObject | JSONArray)[]\r\n export type JSONObject = { [key: string]: JSONPrimitive | JSONArray | JSONObject }\r\n export type JSONValue = JSONObject | JSONArray | JSONPrimitive\r\n \r\n-const noMatch = Symbol('no match')\r\n-\r\n const JSONPathInternal = (data: JSONValue, parts: string[]): JSONValue => {\r\n   const length = parts.length\r\n   for (let i = 0; i < length && data !== undefined; i++) {\r\n@@ -14,31 +12,15 @@ const JSONPathInternal = (data: JSONValue, parts: string[]): JSONValue => {\r\n     }\r\n \r\n     if (typeof data !== 'object' || data === null) {\r\n-      throw noMatch\r\n+      return undefined\r\n     }\r\n \r\n     if (p === '*') {\r\n       const restParts = parts.slice(i + 1)\r\n-      const values = Object.values<JSONValue>(data).map((v): JSONValue | typeof noMatch => {\r\n-        try {\r\n-          return JSONPathInternal(v, restParts)\r\n-        } catch (e) {\r\n-          if (e === noMatch) {\r\n-            return noMatch\r\n-          } else {\r\n-            throw e\r\n-          }\r\n-        }\r\n-      })\r\n-      if (values.every((v) => v === noMatch)) {\r\n-        throw noMatch\r\n-      }\r\n-      const matches = values.filter((v): v is JSONValue => v !== noMatch)\r\n-      return restParts.indexOf('*') === -1 ? matches : matches.flat()\r\n-    } else if (p in data) {\r\n-      data = (data as JSONObject)[p] // `data` may be an array, but accessing it as an object yields the same result.\r\n+      const values = Object.values(data).map((v) => JSONPathInternal(v, restParts))\r\n+      return restParts.indexOf('*') === -1 ? values : values.flat()\r\n     } else {\r\n-      throw noMatch\r\n+      data = (data as JSONObject)[p] // `data` may be an array, but accessing it as an object yields the same result.\r\n     }\r\n   }\r\n   return data\r\n\r\n```"
        ]
      },
      {
        "pr_number": 571,
        "title": "Fix Trie router multiple matching path parameters",
        "body": "Fixes #570 ",
        "html_url": "https://github.com/honojs/hono/pull/571",
        "comments": [
          "@gatesn \r\n\r\nThank you for your PR.\r\n\r\nOne request. Could you do `yarn denoify` ? The `denoify` command generates code for the Deno. And please commit & push them.",
          "Yup, done \ud83d\ude42",
          "Thank you! I'll merge it!"
        ]
      },
      {
        "pr_number": 572,
        "title": "refactor(bun/serve-static): don't check `c.res`",
        "body": "It does not check `c.res` so that `c.res` would not be initialized.\r\n\r\nThis PR related to #510 ",
        "html_url": "https://github.com/honojs/hono/pull/572",
        "comments": []
      },
      {
        "pr_number": 573,
        "title": "fix(cache): export cache middleware for Deno",
        "body": "We should export the Cache middleware for the Deno distribution so that we can use it in Deno 1.26+ now that it is available.",
        "html_url": "https://github.com/honojs/hono/pull/573",
        "comments": [
          "Hi @ThatOneBro !\r\n\r\nYou are right. I'm glad you noticed. Thank you!"
        ]
      },
      {
        "pr_number": 576,
        "title": "fix(compose): don't throw Error; set error response into `c.res`",
        "body": "**This PR has a small breaking change**\r\n\r\nCurrently, if an error occurred in the Handler, it would immediately throw an Error. Therefore, the Middleware process after `await next()` will not be executed. When handling errors in Middleware, it was necessary to wrap them in try-catch.\r\n\r\n```ts\r\napp.use('*', async (c, next) => {\r\n  try {\r\n    await next()\r\n  } catch (_) {\r\n    //...\r\n  }\r\n})\r\n```\r\n\r\nThis works well for Sentry Middleware, but has a bad effect on Logger Middleware and CORS. This is mentioned #575 \r\n\r\nThis way of error handling was introduced in #491.\r\n\r\nHowever, referring above, it is not so good, so in this PR, reverting back to the way and makinging it possible to handle Error objects in the Middleware.\r\n\r\nIf the Handler throws an error, there is no need to try-catch in the Middleware, and the error resopnse is passed into `c.res`.\r\n\r\n```ts\r\napp.use('*', async (c, next) => {\r\n  await next()\r\n  // c.res is error reponse\r\n})\r\n\r\napp.get('/error', () => {\r\n  throw new Error('Test error')\r\n})\r\n```\r\n\r\nIf you wanted to handle the original Error object in the Middleware, it would be in `c.error`.\r\n\r\n```ts\r\napp.use('*', async (c, next) => {\r\n  await next()\r\n  const originalMessage = c.error.message\r\n  //...\r\n})\r\n```\r\n\r\nFor example, for Sentry Middleware, the following:\r\n\r\nhttps://github.com/honojs/sentry/blob/ca742a2ea35808cf2b70a19407a93481b4fbe8a0/src/index.ts#L51-L56\r\n\r\nWrite like this:\r\n\r\n```ts\r\nawait next()\r\nif (c.error) {\r\n  sentry.captureException(c.error)\r\n  throw error\r\n}\r\n```",
        "html_url": "https://github.com/honojs/hono/pull/576",
        "comments": [
          "Looks good to me. I think this makes a lot of sense, allows for middleware to be aware of errors from other middleware before it \ud83d\udc4d ",
          "So with this change we don't need to call captureException inside app.onError when using sentry?",
          "Hi @Zerebokep !\r\n\r\nDo you use \"Sentry Middleware\" or not? If you are **not** using Middleware, it must continue to call `captureException` in onError.\r\n"
        ]
      },
      {
        "pr_number": 580,
        "title": "fix(reg-exp-router): Register path for all the methods if method === METHOD_NAME_ALL.",
        "body": "fixes #574\r\n\r\n@yusukebe I think this PR will fix #574!",
        "html_url": "https://github.com/honojs/hono/pull/580",
        "comments": [
          "Thank you! I'll check it and merge it later!",
          "Hi @usualoma !\r\n\r\nThank you! Looks good! I'll merge it."
        ]
      },
      {
        "pr_number": 579,
        "title": "fix(validator): return HTTP 400 on malformed JSON request",
        "body": "This PR should close #562. The Validator middleware will now return a HTTP 400 Bad Request response whenever JSON in the request body fails to parse, or if the body is empty.",
        "html_url": "https://github.com/honojs/hono/pull/579",
        "comments": [
          "Hi @ThatOneBro !\r\n\r\nThis is good! One request. Please do `denoify`?",
          "Hey @yusukebe!\r\nSorry about that, totally forgot! \ud83d\ude05 Should be good to go now!\r\n\r\n",
          "Thank you!!"
        ]
      }
    ],
    "v2.2.3": [
      {
        "pr_number": 568,
        "title": "fix(handleEvent): use `dispatch` instead of `fetch`",
        "body": "This PR fixes #564 ",
        "html_url": "https://github.com/honojs/hono/pull/568",
        "comments": []
      }
    ],
    "v2.2.2": [
      {
        "pr_number": 550,
        "title": "perf: remove `async` from dispatch; will be 16% faster",
        "body": "Remove `async` from `dispatch` function in `hono.ts`. A single handler that does not use `async` will be about 16% faster on Bun:\r\n\r\nv2.2.1:\r\n\r\n```\r\nReqs/sec    158951.18   43864.54  202188.36\r\nLatency        1.26ms     1.39ms    41.26ms\r\nHTTP codes:\r\n1xx - 0, 2xx - 1589211, 3xx - 0, 4xx - 0, 5xx - 0\r\nothers - 0\r\nThroughput:    21.67MB/s\r\n```\r\n\r\nThis PR:\r\n\r\n```\r\nReqs/sec    188225.08   24307.40  218436.45\r\nLatency        1.06ms   109.58us    12.83ms\r\nHTTP codes:\r\n1xx - 0, 2xx - 1880915, 3xx - 0, 4xx - 0, 5xx - 0\r\nothers - 0\r\nThroughput:    25.65MB/s\r\n```\r\n<img width=\"802\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/192086832-cde1bed7-6bf1-4b1e-be79-3eab4ad31cfc.png\">\r\n\r\n<img width=\"862\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/192086840-d5ecd000-c637-4d80-b003-2ac2e4955f09.png\">\r\n\r\nThis benchmark using: https://github.com/SaltyAom/bun-http-framework-benchmark",
        "html_url": "https://github.com/honojs/hono/pull/550",
        "comments": []
      },
      {
        "pr_number": 553,
        "title": "fix(types): enable types for `c.env` when using validator",
        "body": "Now, you can do like this:\r\n\r\n<img width=\"834\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/192151199-ee49d8fc-31bb-4eac-a929-9c265ac1ed26.png\">\r\n\r\nClose #551 #552 \r\n",
        "html_url": "https://github.com/honojs/hono/pull/553",
        "comments": []
      },
      {
        "pr_number": 556,
        "title": "use console.trace to improve error handler",
        "body": "Fixes: https://github.com/honojs/hono/issues/554",
        "html_url": "https://github.com/honojs/hono/pull/556",
        "comments": ["Thank you! I'll merge it!"]
      },
      {
        "pr_number": 555,
        "title": "fix(validator): make `isOptional` rule works correctly",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/555",
        "comments": [
          "Great! I was actually going to write an issue about this, I appreciate this change \ud83d\udc4d "
        ]
      },
      {
        "pr_number": 559,
        "title": "refactor(serve-static): use context/next instead of MiddlewareHandler",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/559",
        "comments": []
      }
    ],
    "v2.2.1": [
      {
        "pr_number": 549,
        "title": "fix: don't use `defaultNotFoundMessage` variable",
        "body": "This PR fixes the problem when initializing the Hono script on Bun.\r\n\r\nFix #548",
        "html_url": "https://github.com/honojs/hono/pull/549",
        "comments": []
      }
    ],
    "v2.2.0": [
      {
        "pr_number": 512,
        "title": "fix(types): correct types for `app.notFound` / `app.onError`",
        "body": "Fix #511",
        "html_url": "https://github.com/honojs/hono/pull/512",
        "comments": []
      },
      {
        "pr_number": 513,
        "title": "fix(middleware): support multiple middleware on bearer/basic auth middleware",
        "body": "\r\nFix #509",
        "html_url": "https://github.com/honojs/hono/pull/513",
        "comments": []
      },
      {
        "pr_number": 501,
        "title": "Introduce StaticRouter and SmartRouter",
        "body": "### Motivation\r\n\r\nI think it would be difficult for users to take advantage of the \"hono has two routers and the optional RegExpRouter is faster.\"\r\nThis PR changes this to \"By default, the best router is selected based on the routing of the application.\"\r\n\r\n\r\n### StaticRouter\r\n\r\nStaticRouter is a new alternative. Works fast when there is no path to receive parameters.\r\nI think that this is not a router for benchmarking purposes, and that it could be used in the real world as follows\r\n\r\n```ts\r\napp.use('*', logger(), cors())\r\napp.use(\r\n  '/graphql',\r\n  graphqlServer({\r\n    schema,\r\n    rootResolver,\r\n  })\r\n)\r\n```\r\n\r\nHowever, when benchmarked, there did not appear to be a significant difference with RegExpRouter in nodejs.\r\nIf it is a bun, there may be a little difference, but there may not be.\r\n\r\nI think this StaticRouter is a good example of the use of SmartRouter, but may not be necessary for hono.\r\n\r\n\r\n### SmartRouter\r\n\r\nThis is a router that finds the best one for routing from several possible routers and invoke it when `match` is called.\r\n\r\n\r\n### Side effects of merging this\r\n\r\n* All routers are bundled by default, which increases the bundle size.\r\n* Slightly longer spinup time.\r\n* Makes debugging routers more difficult.\r\n\r\n### Benchmark\r\n\r\n#### with path parameters\r\n\r\nhttps://gist.github.com/usualoma/6d8db87c9f40614073b0517dc3e8cee6\r\n\r\n```\r\nhono - smart x 267,322 ops/sec \u00b15.61% (77 runs sampled)\r\nhono - smart - trie-router x 230,474 ops/sec \u00b15.72% (81 runs sampled)\r\nhono - smart - regexp-router x 267,080 ops/sec \u00b15.65% (68 runs sampled)\r\nhono - trie-router x 223,486 ops/sec \u00b15.05% (84 runs sampled)\r\nhono - regexp-router x 262,344 ops/sec \u00b16.61% (77 runs sampled)\r\nFastest is hono - smart,hono - smart - regexp-router,hono - regexp-router\r\n```\r\n\r\n#### without path parameters\r\n\r\nhttps://gist.github.com/usualoma/0b86e02ee9f3a16dd8e5af77f479624c\r\n\r\n```\r\nhono - smart - trie-router x 276,017 ops/sec \u00b16.15% (77 runs sampled)\r\nhono - smart - regexp-router x 298,234 ops/sec \u00b16.67% (75 runs sampled)\r\nhono - smart - static-router x 296,272 ops/sec \u00b16.79% (63 runs sampled)\r\nhono - trie-router x 267,239 ops/sec \u00b16.06% (81 runs sampled)\r\nhono - regexp-router x 303,253 ops/sec \u00b15.80% (82 runs sampled)\r\nFastest is hono - regexp-router,hono - smart - regexp-router,hono - smart - static-router\r\n```\r\n\r\n#### bun - RegExpRouter\r\n\r\n```ts\r\nimport { Hono } from './src/index'\r\nimport { RegExpRouter } from './src/router/reg-exp-router'\r\n\r\nconst app = new Hono({ router: new RegExpRouter() })\r\n\r\napp.get('/posts', (c) => c.text('foo'))\r\n\r\nexport default app\r\n```\r\n\r\n```\r\n$ ./bombardier -c 200 -d 20s http://10.1.0.139:3000/posts\r\nBombarding http://10.1.0.139:3000/posts for 20s using 200 connection(s)\r\n[==========================================================================] 20s\r\nDone!\r\nStatistics        Avg      Stdev        Max\r\n  Reqs/sec     72705.89    1742.91   75809.44\r\n  Latency        2.75ms    86.69us    10.99ms\r\n  HTTP codes:\r\n    1xx - 0, 2xx - 1454123, 3xx - 0, 4xx - 0, 5xx - 0\r\n    others - 0\r\n  Throughput:    10.40MB/s\r\n```\r\n\r\n\r\n#### bun - SmartRouter - StaticRouter\r\n\r\n```ts\r\nimport { Hono } from './src/index'\r\nimport { SmartRouter } from './src/router/smart-router'\r\nimport { StaticRouter } from './src/router/static-router'\r\n\r\nconst app = new Hono({\r\n  router:\r\n    new SmartRouter({\r\n      routers: [new StaticRouter()],\r\n    })\r\n})\r\n\r\napp.get('/posts', (c) => c.text('foo'))\r\n\r\nexport default app\r\n```\r\n\r\n```\r\n$ ./bombardier -c 200 -d 20s http://10.1.0.139:3000/posts\r\nBombarding http://10.1.0.139:3000/posts for 20s using 200 connection(s)\r\n[==========================================================================] 20s\r\nDone!\r\nStatistics        Avg      Stdev        Max\r\n  Reqs/sec     74691.57    1911.30   80312.78\r\n  Latency        2.68ms    97.25us    10.77ms\r\n  HTTP codes:\r\n    1xx - 0, 2xx - 1493610, 3xx - 0, 4xx - 0, 5xx - 0\r\n    others - 0\r\n  Throughput:    10.68MB/s\r\n```",
        "html_url": "https://github.com/honojs/hono/pull/501",
        "comments": [
          "Wow, crazy!\r\n\r\nI'm going to look at the implementation and consider it well.\r\n\r\n> All routers are bundled by default, which increases the bundle size.\r\n\r\nThis is what I am concerned about.\r\n\r\nAgain!",
          "@yusukebe Thanks for the comment.\r\n\r\nI have force pushed with minor fixes, but the essence has not changed since the initial push.",
          "There are no more commits to be added.\r\n\r\nI think it's an interesting and useful idea, but I'm not sure I really want to merge this.",
          "Hi @usualoma !\r\n\r\nThis idea is ultra great! I like it! But as you are thinking, we have to consider well whether to merge or not. So, I don't make conclusions right away.\r\n\r\nI investigated \"bundle size\". `wrangler` command will bundle the scripts and shows the \"upload size\". Below are the sizes of \"Hello World\" program on each framework for Cloudflare Workers.\r\n\r\n```\r\nHono v2.1.4 / with default router\r\nTotal Upload: 27.04 KiB / gzip: 6.09 KiB\r\n\r\nHono this PR / with SmartRouter\r\nTotal Upload: 50.35 KiB / gzip: 10.32 KiB\r\n\r\nSunder\r\nTotal Upload: 47.21 KiB / gzip: 11.08 KiB\r\n\r\nWorktop\r\nTotal Upload: 7.02 KiB / gzip: 2.70 KiB\r\n```\r\n\r\nThis is just \"information\", and I would still like to think about it.",
          "In actuality, there is a way to reduce the bundle size.\r\n\r\nCurrently, we build the project as \"CommonJS\". If we make it ESM, the size will be smaller. I've tried to change the compiler option on `tscofing.json` and build it as \"`ES2022`\". Then, the bundle size built by `wrangler` has been smaller!\r\n\r\n```\r\nHono this PR / with SmartRouter\r\nTotal Upload: 36.10 KiB / gzip: 8.64 KiB\r\n```\r\n\r\nI will create another Issue on the matter of migrating from CommonJS to ESM. It's good news.",
          "@yusukebe Good news!\r\n\r\n```\r\nHono this PR / with SmartRouter\r\nTotal Upload: 36.10 KiB / gzip: 8.64 KiB\r\n```\r\n\r\nHmmm, but RegExpRouter is so huge.",
          "Hi @usualoma !\r\n\r\nI want to merge this Static Router and Smart Router! I love this feature.\r\n\r\n> I think it would be difficult for users to take advantage of the \"hono has two routers and the optional RegExpRouter is faster.\" This PR changes this to \"By default, the best router is selected based on the routing of the application.\"\r\n\r\nYou are right about this. Users have to use the fastest router without having to do anything else.\r\n\r\nI love it because this is **really \"smart\"**. It will be more difficult to debug, but it will be more \"fun\" with this way.\r\n\r\nI think the issue of the bundle size could be improved a little by migrating ComonJS to ESM. I don't know if it will work, but I would like to try it.\r\n\r\nHow about we go with this!",
          "@yusukebe \r\nSorry for the delay in answering.\r\n\r\nThanks! I agree with merging.\r\n\r\nI've been thinking the past few days that if we assume SmartRouter, we could create a lightweight version of RegExpRouter with some features removed from RegExpRouter. (I haven't gotten around to starting it, though.)\r\n\r\nI think we can represent RegExpRouter with less code by deciding not to support it in the lightweight version of RegExpRouter, since there are rarely routings that have different variable names in the same place, such as the following.\r\n\r\n```\r\napp.get('/path/:var1/path')\r\napp.get('/path/:var2/path')\r\n```\r\n\r\nI would like to try such a refactoring along with migrating ComonJS to ESM.\r\n\r\nShall we fix this branch so that the test is green and merge it into main?",
          "Hi @usualoma !\r\n\r\n> I think we can represent RegExpRouter with less code by deciding not to support it in the lightweight version of RegExpRouter, since there are rarely routings that have different variable names in the same place, such as the following.\r\n\r\nThis is a great idea! Just fall back to TrieRouter If it hits such rare cases.\r\n\r\n> Shall we fix this branch so that the test is green and merge it into main?\r\n\r\n~~I've created the `develop` branch <https://github.com/honojs/hono/tree/develop>~~\r\n\r\n~~Let's work on the `develop`\" branch for the new features such as migration to SmartRouter and ESM, will be included in v2.2.0 new version.  So, fix this branch and merge it into the `develop` branch.~~\r\n\r\nEDIT:\r\n\r\nLet's go with the \"main\" branch.",
          "@usualoma \r\n\r\nAh, we don't really need to use the \"develop\" branch anyway, so let's merge it into the \"main\" branch.",
          "OK!\r\nShall we proceed with 0b0e113?",
          "Yes, merged!"
        ]
      },
      {
        "pr_number": 505,
        "title": "feat(middleware): introduce \"built-in\" Validator Middleware",
        "body": "This PR introduces \"built-in\" validator middleware.\r\n\r\nThere is third-party validator middleware `@honojs/validator`. I like the API and think it is well thought out. And the middleware has many validation patterns, such as email addresses, IP addresses, etc. Instead, it's too fat because of using \"validator.js\" and  \"jsonpath-plus\".\r\n\r\nHowever, we want to have validator middleware; validation is often required when building web applications.\r\n\r\nThis middleware is the port of `@honojs/validator`, making it more simple, lightweight, and with zero dependencies. By reducing the rules for validation. Usage is compatible with `@honojs/validator`:\r\n\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { validation } from 'hono/validator'\r\n\r\nconst app = new Hono()\r\n\r\napp.post(\r\n  '/post',\r\n  validation((v, message) => ({\r\n    body: {\r\n      // Validation rules\r\n      title: [v.required, [v.isLength, { max: 100 }]],\r\n      // Custom error message\r\n      body: [v.required, message('Body is wrong!!')],\r\n      tags: v.optional,\r\n    },\r\n    additionalProperties: false,\r\n  }))\r\n)\r\n\r\napp.post('/post', async (c) => {\r\n  return c.text('Valid')\r\n})\r\n```\r\n\r\nAnd, this bundle size built by Wrangler is very smaller than third-party.\r\n\r\n```\r\n@honojs/validator:\r\nTotal Upload: 269.52 KiB / gzip: 52.51 KiB\r\n\r\nhono/validator:\r\nTotal Upload: 37.27 KiB / gzip: 7.96 KiB\r\n```\r\n\r\nThe use case is that the user uses this built-in middleware first and will use the third-party if the user wants to validate variable patterns.\r\n\r\nI think it's good this validator is distributed as built-in.",
        "html_url": "https://github.com/honojs/hono/pull/505",
        "comments": [
          "@yusukebe \r\n\r\nI think this is a good API!\r\n\r\nI have an idea about validator.\r\nYou may have a different opinion, but I would like you to take a look at the idea once you do.\r\nI will summarize later.",
          "## I would consider the following.\r\n\r\n### Validated and exactly the same value should be returned\r\n\r\nSince `0`, `null`, and `undefined` can have other meanings, especially in SQL, it should be avoided that their values are validated as empty strings and returned as `undefined` in c.req.json().\r\n\r\n### I think it would be better to make the additional properties not error-proof but not easily retrievable by the user\r\n\r\nI would prefer that additional properties not be obtained by default.\r\nHowever, it would be inconvenient for `query` or `header` to error out additional properties.\r\n\r\n## An idea\r\n\r\nSo I thought it would be better to use something like the following PR: \"perform validation and return the result\".\r\nhttps://github.com/honojs/hono/pull/508\r\n\r\nSince it overrides the `c.req.query` result, I am aware that this is a rather aggressive process and may be controversial.\r\nHowever, since it is to be built in as middleware, I think that this much is acceptable as long as it is safe with a concise API.\r\n",
          "Hi @usualoma !\r\n\r\nThank you for sharing and writing your idea! I think that's good!!\r\n\r\nHowever, let me think some more about whether to merge or not. I'll consider whether this is helpful or not from the user's point of view.",
          "EDIT: I realized this is probably not a good place to discuss my previous comments about the specific @honojs/validator package, because this is not a proposal to replace it. I misunderstood until now. I think this is a good idea to make a basic version in the core!\r\n\r\nI do think the comment about the 0 null and undefined values makes sense, but we should deal with this in a consistent way compared with the 3rd party validator library, so that the user doesn't have to change anything or learn two different APIs between the built-in and 3rd party libraries.",
          "Hi @usualoma @ThatOneBro !\r\n\r\nI have considered this matter and have concluded.\r\n\r\n## Summary\r\n\r\n* Accept the idea \"*Pass only validated properties*\" by @usualoma #508.\r\n* Add the option `additionalProperties`, default is `true`. If the user does not set this option explicitly, \"Pass all properties\".\r\n* Make `@honojs/validator` **obsolete**. If the user wants to use more rules, import the function from \"validator.js\".\r\n* Add some rules which are not been implemented yet. Such `duplication`, `in`.\r\n\r\n## Pass only validated properties\r\n\r\nI agree that you @usualoma said it is not a practical way to throw errors for all the additional properties of \"headers\" and \"query\". And if the target is JSON, it is difficult to decide which properties should be considered as additional properties. We don't have to think about avoiding these concerns by implementing this feature. Then, above all, it is secure.\r\n\r\nBut I think it's better that it does not work if the `additionalProperties` option is not explicitly set to `false`.\r\n\r\n```ts\r\napp.post(\r\n  '/post',\r\n  validation((v) => ({\r\n    json: {\r\n      title: v.required,\r\n      body: [v.isLength, { max: 400 }],\r\n      'author.name': v.required,\r\n    },\r\n    additionalProperties: false, // default is `true`\r\n  })),\r\n```\r\n\r\nOtherwise, it is difficult for users to understand \"why missing some properties\" when doing `c.req.json`. And @ThatOneBro  is right, it would be better for users who are used to 3rd party validators. If they does not want \"pass the additional properties\", just set the property as `false`.\r\n\r\n## About `@honojs/validator`\r\n\r\nAt first, I thought this middleware and \"@honojs/validator\" are two different products. But, I've noticed that the user can add the rule, just import the function from `validator.js`.\r\n\r\n```ts\r\nimport isEmail from 'validator/lib/isEmail'\r\nimport { Hono } from 'hono'\r\nimport { validation } from 'hono/validator'\r\n\r\n//...\r\n\r\napp.post(\r\n  '/post',\r\n  validation((v) => ({\r\n    json: {\r\n      title: v.required,\r\n      body: [v.isLength, { max: 400 }],\r\n      'author.name': v.required,\r\n      'author.email': isEmail,\r\n```\r\n\r\nSince there is no need for two middleware to exist, I think it is better to make \"@honojs/validator\" obsolete. This is big change, but we have to do it for the future.\r\n\r\n## Remaining things\r\n\r\nI want to add some rules such `duplication` or `in`, it's not implemented yet. In this PR or another PR after merged, will be implemented.\r\n\r\n## Shipping\r\n\r\nWe can include this feature in v2.2.0, which will be shipped soon.\r\n\r\n---\r\n\r\nIf there are no big different opinions, we would like to do this.",
          "I think this makes sense, and of course greatly simplifies the middleware.\r\n\r\nThere is one use case I am concerned about though, as it is one I am working with now.\r\n\r\nWill the custom json path support array notation too? I think this could be a common use case for bulk routes where users create an array of resources.\r\n\r\nFor example, using this:\r\n```js\r\n{\r\n  json: {\r\n    \"patients[*].firstName\": v.required,\r\n    \"patients[*].lastName\": v.required,\r\n    ...\r\n  },\r\n}\r\n```\r\nto validate an array of patient resources.\r\n\r\nDo you think this support is worth the complexity? I can help to add this feature if needed, just wanted to know your opinion first.",
          "@yusukebe \r\n\r\nSorry for the late response here as well.\r\nI have a different view on several points.\r\n\r\n\r\n### \"why missing some properties\"  issue\r\n\r\n> Otherwise, it is difficult for users to understand \"why missing some properties\" when doing c.req.json. \r\n\r\nOK, I understand this very well. I may waste a day of my time trying to solve \"why missing some properties\". I think this is very bad for DX.\r\n\r\n\r\n### Default value of additionalProperties\r\n\r\nI believe that in the #508 implementation, `additionalProperties` makes sense only because it is `false`.\r\nI'm wondering if the default for `additionalProperties` is `true`, we can leave the #505 implementation as is. I think that \"raise an error if there are additional properties\" is not a bad idea, but rather preferable, if the user opts in to enable the `additionalProperties` check.\r\n\r\n### 0 / null / undefined problem\r\n\r\nSince 0, `null`, and `undefined` are converted to empty strings, they will be validated as empty strings, but you will get 0, `null`, and `undefined` when you retrieve the value.\r\nhttps://github.com/honojs/hono/pull/505/files#diff-531c2433675cbaf70e386c1bd153061aab1e15575134abd5d65b79882f9c1424R72\r\n\r\nI think this is the only problem with #505, so if this can be fixed, we can do without #508 and leave the #505 implementation as it is.",
          "Hi @usualoma !\r\n\r\nThank you for the response!\r\n\r\nI think we have another thing to consider, that is about validating JSON.  It's related to the implementation.\r\n\r\nIn this #505 PR, treating only values in the same hierarchy are \"additional properties\".\r\n\r\nhttps://github.com/honojs/hono/blob/b7195ff4ea82d025415cd13ef21e5f4a195e2d50/src/middleware/validator/middleware.ts#L206-L219\r\n\r\nFor example, the following test will fail:\r\n\r\n```ts\r\napp.post(\r\n  '/json',\r\n  validation((v) => ({\r\n    json: {\r\n      'post.author.name': v.required,\r\n    },\r\n    additionalProperties: false,\r\n  })),\r\n  (c) => {\r\n    return c.text('Valid')\r\n  }\r\n)\r\n\r\nit('Should return 400 response - JSON', async () => {\r\n  const json = {\r\n    post: {\r\n      title: 'Hello', // this property is not treat as \"additional property\"\r\n      author: {\r\n        name: 'abcdef',\r\n      },\r\n    },\r\n  }\r\n  const req = new Request('http://localhost/json', {\r\n    method: 'POST',\r\n    body: JSON.stringify(json),\r\n  })\r\n  const res = await app.request(req)\r\n  expect(res.status).toBe(400) // will be 200\r\n})\r\n```\r\n\r\nIf we want to check for `post.title`, I think we have to check the whole JSON structure recursively. It's a lot of work.\r\n// Or do you know of a good implementation way?\r\n\r\nSo, \"checking additional properties is difficult\".\r\n\r\nIn comparison, with the #508 implementation, we only need to pass the validated values to  `c.req.query` or `c.req.json`, so we don't have to check for the additional properties to exist. Even though we have to change request.ts, #508 is simpler to implement. So I like #508. \r\n\r\nHowever, I think you are also right. So how about the following plan?\r\n\r\n* Going with #508 \r\n* If `removeAddtional` option is `false`, pass through all properties.\r\n* Default value of `removeAdditional` is `true`.\r\n\r\nI use `removeAdditional` instead of `additonalProperty`, I think it is easier to understand.\r\n\r\nWhat do you think about this plan?",
          "@yusukebe \r\nOkay, I understand more about the background of the issue.\r\nI vote for this plan!\r\n\r\n> * Going with [Feat/builtin validator middleware another idea\u00a0#508](https://github.com/honojs/hono/pull/508)\r\n> * If `removeAddtional` option is `false`, pass through all properties.\r\n> * Default value of `removeAdditional` is `true`.\r\n\r\n\r\n",
          "@usualoma \r\n\r\nThank you!! Is there anything left to do on #508 ? If not, I'll merge it into this `feat/builtin-validator-middleware` branch.\r\n\r\n\r\n@ThatOneBro \r\n\r\nCould you create the issue about \"*json path supporting array notation*\" later?\r\n",
          "@yusukebe \r\n\r\nThank you!\r\nI have no plans to add anything to #508.",
          "@yusukebe \r\n> Could you create the issue about \"_json path supporting array notation_\" later?\r\n\r\nYes of course, it should be a separate issue. I'll make it now.\r\n"
        ]
      },
      {
        "pr_number": 519,
        "title": "Lightweight RegExpRouter reborn",
        "body": "### What is this?\r\n\r\nI have attempted to reduce code size by removing some features from RegExpRouter.\r\n\r\nI would like to demonstrate the following with this PR.\r\n\r\n* Smaller bundle size.\r\n* No performance degradation.\r\n* Existing tests for supporting path patterns should be green\r\n\r\nAfter demonstrating, I would like to replace the old one by https://github.com/usualoma/hono/pull/2.\r\nWhile the old RegExpRouter implementation is a good one, it is expensive to maintain a large number of routers and should be removed.\r\n\r\n### Routing no longer supported\r\n\r\nThe RegExpLiteRouter does not handle routing that is even slightly complicated.\r\nThrow UnsupportedPathError with the following routing.\r\n\r\n```\r\napp.get('/app/static', handler1);\r\napp.get('/app/:label', handler2);\r\n```\r\n\r\n```\r\napp.get('/:type/:id', handler1)\r\napp.get('/:class/:id', handler2)\r\n```\r\n\r\n```\r\napp.get('/:id/:action{create|update}', handler1)\r\napp.get('/:id/:action{delete}', handler2)\r\n```\r\n\r\n### bundle size\r\n\r\nSize comparison of a small example project using the hono.\r\n\r\n\r\nbefore\r\n\r\n```\r\n> esbuild --bundle --sourcemap --minify --outdir=dist ./src/index.ts\r\n\r\n\r\n  dist/index.js      21.4kb\r\n  dist/index.js.map  85.1kb\r\n```\r\n\r\nIt is still large, but much smaller.\r\n\r\nafter\r\n\r\n```\r\n> esbuild --bundle --sourcemap --minify --outdir=dist ./src/index.ts\r\n\r\n\r\n  dist/index.js      18.5kb\r\n  dist/index.js.map  71.9kb\r\n```\r\n\r\n### banchmark\r\n\r\n```diff\r\ndiff --git a/benchmarks/handle-event/index.js b/benchmarks/handle-event/index.js\r\nindex 4ef367b..ab27ee4 100644\r\n--- a/benchmarks/handle-event/index.js\r\n+++ b/benchmarks/handle-event/index.js\r\n@@ -6,7 +6,9 @@ import { Request, Response } from 'node-fetch'\r\n import { Router as SunderRouter, Sunder } from 'sunder'\r\n import { Router as WorktopRouter } from 'worktop'\r\n import { Hono } from '../../dist/hono'\r\n+import { RegExpLiteRouter } from '../../dist/router/reg-exp-lite-router'\r\n import { RegExpRouter } from '../../dist/router/reg-exp-router'\r\n+import { TrieRouter } from '../../dist/router/trie-router'\r\n \r\n globalThis.Request = Request\r\n globalThis.Response = Response\r\n@@ -27,8 +29,9 @@ const initHono = (hono) => {\r\n   return hono\r\n }\r\n \r\n-const hono = initHono(new Hono())\r\n+const hono = initHono(new Hono({ router: new TrieRouter() }))\r\n const honoWithRegExpRouter = initHono(new Hono({ router: new RegExpRouter() }))\r\n+const honoWithRegExpLiteRouter = initHono(new Hono({ router: new RegExpLiteRouter() }))\r\n \r\n // itty-router\r\n const ittyRouter = IttyRouter()\r\n@@ -120,6 +123,8 @@ const fn = async () => {\r\n   console.log(await res.text())\r\n   res = await honoWithRegExpRouter.handleEvent(event)\r\n   console.log(await res.text())\r\n+  res = await honoWithRegExpLiteRouter.handleEvent(event)\r\n+  console.log(await res.text())\r\n   res = await ittyRouter.handle(event.request)\r\n   console.log(await res.text())\r\n   res = await sunderApp.handle(event)\r\n@@ -138,6 +143,9 @@ suite\r\n   .add('hono - regexp-router', async () => {\r\n     await honoWithRegExpRouter.handleEvent(event)\r\n   })\r\n+  .add('hono - regexp-lite-router', async () => {\r\n+    await honoWithRegExpLiteRouter.handleEvent(event)\r\n+  })\r\n   .add('itty-router', async () => {\r\n     await ittyRouter.handle(event.request)\r\n   })\r\n```\r\n\r\nThere is no performance degradation.\r\n\r\n```\r\nhono - trie-router(default) x 222,450 ops/sec \u00b15.45% (81 runs sampled)\r\nhono - regexp-router x 260,434 ops/sec \u00b16.22% (79 runs sampled)\r\nhono - regexp-lite-router x 266,024 ops/sec \u00b16.36% (79 runs sampled)\r\nitty-router x 83,505 ops/sec \u00b13.57% (85 runs sampled)\r\nsunder x 110,506 ops/sec \u00b14.74% (78 runs sampled)\r\nworktop x 68,916 ops/sec \u00b12.40% (85 runs sampled)\r\nFastest is hono - regexp-lite-router,hono - regexp-router\r\n```",
        "html_url": "https://github.com/honojs/hono/pull/519",
        "comments": [
          "Hi @usualoma !\r\n\r\nDiet is a good thing! I also checked the bundle sizes with `wrangler dev index.ts` command. `index.ts` is just \"Hello World\" program.\r\n\r\n```\r\nSmartRouter with RegExpRouter\r\nTotal Upload: 51.58 KiB / gzip: 10.49 KiB\r\n\r\nThis PR / SmartRouter with RegExpLiteRouter\r\nTotal Upload: 43.94 KiB / gzip: 9.00 KiB\r\n\r\nThis PR / built as \"ESNext\"\r\nTotal Upload: 31.37 KiB / gzip: 7.65 KiB\r\n```\r\n\r\n```\r\nHono v2.1.4 / with default router\r\nTotal Upload: 27.04 KiB / gzip: 6.09 KiB\r\n\r\nSunder\r\nTotal Upload: 47.21 KiB / gzip: 11.08 KiB\r\n\r\nWorktop\r\nTotal Upload: 7.02 KiB / gzip: 2.70 KiB\r\n```\r\n\r\nIt has become very smaller! \r\n\r\n> After demonstrating, I would like to replace the old one by https://github.com/usualoma/hono/pull/2.\r\n\r\nOkay, let's go!!",
          "@yusukebe \r\nMerged https://github.com/usualoma/hono/pull/2 and updated the benchmark script with 586711a!",
          "@usualoma \r\n\r\nThank you! It's so nice to have reduced codes.\r\n\r\nIs it OK to merge?",
          "@yusukebe Sorry, please merge!",
          "OK, I'll merge it!"
        ]
      },
      {
        "pr_number": 521,
        "title": "fix(types): add types to middleware correctly",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/521",
        "comments": []
      },
      {
        "pr_number": 523,
        "title": "feat(validator): add `isFalsy` and `isNotFalsy`",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/523",
        "comments": []
      },
      {
        "pr_number": 527,
        "title": "docs(readme): update discord invite url",
        "body": "The Discord invite url in the readme.md is invalid.\r\n\r\nvalid invite url: https://discord.gg/KMh2eNSdxV\r\ninvalid invite url in the readme.md: https://discord.gg/KVYKWmfD\r\n![image](https://user-images.githubusercontent.com/1294640/190174440-0cab20af-8ea3-478b-a588-4c566a06026e.png)\r\n\r\nI found the valid url from the comment [here](https://github.com/honojs/hono/issues/483#issuecomment-1227848565).\r\nhttps://github.com/honojs/hono/issues/483#issuecomment-1227848565",
        "html_url": "https://github.com/honojs/hono/pull/527",
        "comments": ["Thank you!\r\n"]
      },
      {
        "pr_number": 526,
        "title": "feat: support ES modules!!",
        "body": "Currently, only CommonJS has been distributed, but this PR will also support ES Modules.\r\n\r\nThis will reduce the bundle size when using Hono with the `import` keyword. The following is the result of bundling using Wrangler.\r\n\r\n\r\nBefore:\r\n```\r\nMacBook@yusuke $ wrangler dev src/worker.ts\r\n \u26c5\ufe0f wrangler 2.1.3\r\n-------------------\r\nRetrieving cached values for userId from node_modules/.cache/wrangler\r\n\u2b23 Listening at http://0.0.0.0:8787\r\nTotal Upload: 43.88 KiB / gzip: 9.06 KiB\r\n```\r\n\r\nThis PR:\r\n```\r\nMacBook@yusuke $ wrangler dev src/worker.ts\r\n \u26c5\ufe0f wrangler 2.1.3\r\n-------------------\r\nRetrieving cached values for userId from node_modules/.cache/wrangler\r\n\u2b23 Listening at http://0.0.0.0:8787\r\nTotal Upload: 30.23 KiB / gzip: 7.44 KiB\r\n```",
        "html_url": "https://github.com/honojs/hono/pull/526",
        "comments": []
      },
      {
        "pr_number": 530,
        "title": "feat(validator): add `isBoolean` and `isNumber`",
        "body": "Add new rules `isBoolean` and `isNumber` for validator middleware. It's useful to validate JSON values.",
        "html_url": "https://github.com/honojs/hono/pull/530",
        "comments": []
      },
      {
        "pr_number": 531,
        "title": "feat(cors): allow multiple origins",
        "body": "In this RP, it allows multiple origins on CORS middleware.\r\n\r\n```ts\r\napp.use(\r\n '*',\r\n cors({\r\n   origin: ['https://example.com', 'https://example.org'],\r\n   //...\r\n })\r\n)\r\n```\r\n\r\nThis middleware responds with the correct origin based on the `Referer` header. Falling back to origin[0] if it is empty or none.\r\n\r\nClose #503",
        "html_url": "https://github.com/honojs/hono/pull/531",
        "comments": []
      },
      {
        "pr_number": 532,
        "title": "Check in Origin header instead of Referer",
        "body": "I think we should check by the Origin header, not the Referer header.",
        "html_url": "https://github.com/honojs/hono/pull/532",
        "comments": [
          "You are right! Thank you.\r\n\r\nThis PR really Close #503 "
        ]
      },
      {
        "pr_number": 533,
        "title": "feat(cors): Enable to check origin header by a function.",
        "body": "I would also like to be able to dynamically check Origin by a function.",
        "html_url": "https://github.com/honojs/hono/pull/533",
        "comments": [
          "Hi @usualoma !\r\n\r\nGood feature! I'll merge it. Thank you!"
        ]
      },
      {
        "pr_number": 537,
        "title": "fix(deno): serve static middleware returns 404 correctly",
        "body": "Fix #516 ",
        "html_url": "https://github.com/honojs/hono/pull/537",
        "comments": []
      },
      {
        "pr_number": 538,
        "title": "fix(bun): serve static middleware returns 404 correctly",
        "body": "Fix #517 ",
        "html_url": "https://github.com/honojs/hono/pull/538",
        "comments": []
      },
      {
        "pr_number": 535,
        "title": "feat: another idea of Validator Middleware",
        "body": "I like the current validator middleware API:\r\n\r\n```ts\r\napp.post(\r\n  '/json',\r\n  validation((v) => ({\r\n    json: {\r\n      'post.author.name': v.isAlpha,\r\n    },\r\n  })),\r\n  (c) => {\r\n    return c.text('Valid')\r\n  }\r\n)\r\n```\r\n\r\nBut there are times when I want \"Types\":\r\n\r\n```ts\r\n  async (c) => {\r\n    const data = await c.req.json()\r\n    // How can I access `post.author.name` ?\r\n    return c.text('Valid')\r\n  }\r\n```\r\n\r\nSo I implemented the new idea of Validator Middleware that support \"Types\". This is the approach of \"declaring the keys of properties first\".\r\n\r\n```ts\r\napp.post(\r\n  '/posts',\r\n  validator((v) => ({\r\n    id: v.json('post.id').asNumber().isRequired(),\r\n    title: v.json('post.title').isRequired().isLength(400),\r\n    body: v.json('post.body').isOptional(),\r\n  })),\r\n  (c) => {\r\n    const data = c.req.valid()\r\n    return c.text(`ID is ${data.id}, Title is ${data.title}`)\r\n  }\r\n)\r\n```\r\n\r\n![SS](https://user-images.githubusercontent.com/10682/190910186-60efc2db-c1c8-426f-bab2-da038ddbb6d5.png)\r\n\r\nWow, we got \"Types\"!\r\n\r\nThere are other good points to this approach as well.\r\n\r\n* Easy to understand the result data because \"declaring property name first\".\r\n* Easy to writing rules. `v.isLength(400)` is better than `[v.isLength, 400]` .\r\n* Getting only \"declared properties\". Additional properties are always ignored. It's safe.\r\n\r\nI liked the current Validator Middleware, but I like this one even better.\r\n\r\nOne thing that bothers me is the implementation of `hono.ts` has become more complex.\r\n\r\nHow do you think about this?\r\n",
        "html_url": "https://github.com/honojs/hono/pull/535",
        "comments": [
          "@yusukebe \r\nThat's wonderful!\r\nThe following points are also very good\r\n\r\n> * Easy to understand the result data because \"declaring property name first\".\r\n> * Easy to writing rules. v.isLength(400) is better than [v.isLength, 400] .\r\n> * Getting only \"declared properties\". Additional properties are always ignored. It's safe.\r\n\r\nI think the implementation of this PR is good, but let me confirm one point.\r\n\r\n### Is it best to insert it as middleware?\r\n\r\nFor example, we could define it as a function like the following.\r\n* Define rules\r\n* Applying the rule\r\n\r\nI think this way can be implemented only in the middleware without complicating hono.ts.\r\n\r\nI also think this approach would allow multiple rules to be applied in a single request.\r\n\r\nHowever, I understand the opinion that \"inserting as middleware is more declarative to the request\".\r\n\r\n```typescript\r\nimport { validationRule, validate } from 'middleware/validator'\r\n\r\nconst rule = validationRule((v) => ({\r\n  id: v.json('post.id').asNumber().isRequired(),\r\n  title: v.json('post.title').isRequired().isLength(400),\r\n  body: v.json('post.body').isOptional(),\r\n}))\r\napp.post('/posts', (c) => {\r\n  const data = validate(c, rule)\r\n  return c.text(`ID is ${data.id}, Title is ${data.title}`)\r\n})\r\n```",
          "Hi @usualoma !\r\n\r\nThank you for the comment.\r\n\r\n> However, I understand the opinion that \"inserting as middleware is more declarative to the request\".\r\n\r\nYes. I think it's better to validate before dispatching the handler. Besides, the API is prettier if it's as Middleware.\r\n\r\nI would like to go with this if no one else has an opinion.",
          "I think we can go ahead with the PR as is!",
          "Hi @yusukebe!\r\nIs the merge result of this PR currently working correctly? I got the following results in my environment.\r\n\r\n<img width=\"594\" alt=\"image\" src=\"https://user-images.githubusercontent.com/30598/191243377-215121c9-a483-4fbe-95a5-d89350394f6f.png\">\r\n\r\nI made the following changes and it worked.\r\n\r\n```ts\r\ndiff --git a/src/middleware/validator/middleware.ts b/src/middleware/validator/middleware.ts\r\nindex 5e9d059..d168c47 100644\r\n--- a/src/middleware/validator/middleware.ts\r\n+++ b/src/middleware/validator/middleware.ts\r\n@@ -7,14 +7,12 @@ type ValidationFunction<T> = (v: Validator, c: Context) => T\r\n \r\n type Schema = Record<string, VString | VNumber | VBoolean | VObject>\r\n type SchemaToProp<T> = {\r\n-  [K in keyof T]: T[K] extends VBase\r\n-    ? T[K]['type'] extends 'number'\r\n-      ? number\r\n-      : T[K]['type'] extends 'boolean'\r\n-      ? boolean\r\n-      : T[K]['type'] extends 'string'\r\n-      ? string\r\n-      : never\r\n+  [K in keyof T]: T[K] extends VNumber\r\n+    ? number\r\n+    : T[K] extends VBoolean\r\n+    ? boolean\r\n+    : T[K] extends VString\r\n+    ? string\r\n     : never\r\n }\r\n \r\n```\r\n\r\nAlternatively, the following changes also worked.\r\n\r\n```ts\r\ndiff --git a/src/middleware/validator/validator.ts b/src/middleware/validator/validator.ts\r\nindex d12bba6..54ca8e9 100644\r\n--- a/src/middleware/validator/validator.ts\r\n+++ b/src/middleware/validator/validator.ts\r\n@@ -163,9 +163,10 @@ export abstract class VBase {\r\n }\r\n \r\n export class VString extends VBase {\r\n+  type: 'string' = 'string'\r\n+\r\n   constructor(options: VOptions) {\r\n     super(options)\r\n-    this.type = 'string'\r\n   }\r\n \r\n   isEmpty = (\r\n@@ -212,9 +213,10 @@ export class VString extends VBase {\r\n }\r\n \r\n export class VNumber extends VBase {\r\n+  type: 'number' = 'number'\r\n+\r\n   constructor(options: VOptions) {\r\n     super(options)\r\n-    this.type = 'number'\r\n   }\r\n \r\n   isGte = (min: number) => {\r\n@@ -227,9 +229,10 @@ export class VNumber extends VBase {\r\n }\r\n \r\n export class VBoolean extends VBase {\r\n+  type: 'boolean' = 'boolean'\r\n+\r\n   constructor(options: VOptions) {\r\n     super(options)\r\n-    this.type = 'boolean'\r\n   }\r\n \r\n   isTrue = () => {\r\n```",
          "@usualoma \r\n\r\nYou are right. I have fixed the problem with the following PR, please review it.\r\n\r\n#545 "
        ]
      },
      {
        "pr_number": 541,
        "title": "fix(redirect): don't have to make relative url to absolute one",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/541",
        "comments": []
      },
      {
        "pr_number": 539,
        "title": "feat: support appending values with `c.header`",
        "body": "This PR enables appending values into the header with `c.header` function and makes it easier to set multiple values.\r\n\r\n```ts\r\nc.header('x-custom', 'foo')\r\nc.header('x-custom', 'bar', { append: true })\r\n```\r\n\r\nAnd this PR proposes setting multiple cookies.\r\n\r\n```ts\r\nc.cookie('delicious_cookie', 'macha')\r\nc.cookie('delicious_cookie', 'choco')\r\n```\r\n\r\nClose #534 #536 \r\n",
        "html_url": "https://github.com/honojs/hono/pull/539",
        "comments": []
      },
      {
        "pr_number": 529,
        "title": "feat: `c.req.body` and `c.req.json` accept generics",
        "body": "In this PR, we can pass the generics to `c.req.json` or `c.req.body` for adding the types to returning objects.\r\n\r\n```ts\r\ntype Author = {\r\n  name: string\r\n  age: number\r\n}\r\n\r\nconst app = new Hono()\r\n\r\napp.put(\r\n  '/author',\r\n  validation((v) => ({\r\n    json: {\r\n      'author.name': v.required,\r\n      'author.age': [v.required, v.isNumber],\r\n    },\r\n  })),\r\n  async (c) => {\r\n    const data = await c.req.json<{ author: Author }>() // <--- add the types by passing generics\r\n    const author = data.author\r\n    return c.text(`${author.name} is ${author.age} old`)\r\n  }\r\n)\r\n```",
        "html_url": "https://github.com/honojs/hono/pull/529",
        "comments": []
      },
      {
        "pr_number": 545,
        "title": "fix(validator): make \"Types\" work well",
        "body": "Fixed the bug pointed here: <https://github.com/honojs/hono/pull/535#issuecomment-1252210438>",
        "html_url": "https://github.com/honojs/hono/pull/545",
        "comments": ["Thank you!\r\n"]
      },
      {
        "pr_number": 547,
        "title": "feat(validator): Enable verification results to be retrieved as structured data.",
        "body": "Same as #546 \r\n\r\nHow about this additional feature?",
        "html_url": "https://github.com/honojs/hono/pull/547",
        "comments": [
          "Hi @usualoma !\r\n\r\nGreat feature! I love it. I'd like to merge it into the main, is there anything else left to do?",
          "@yusukebe \r\nThank you. That's all I'm trying to do!"
        ]
      }
    ],
    "v2.1.4": [
      {
        "pr_number": 493,
        "title": "perf: do not `compose` if it has only one handler",
        "body": "Made it does not `compose` if it has only one handler. `await composed` is slow and could be speed up by avoiding `compose`. If you don't use the middleware, it will be faster.\r\n\r\n## Benchmark\r\n\r\n### handle-event\r\n\r\n17%  Faster!!\r\n\r\n```\r\nhono - trie-router(default) x 421,632 ops/sec \u00b14.36% (79 runs sampled)\r\nhono - regexp-router x 452,187 ops/sec \u00b15.90% (69 runs sampled)\r\nhono - trie-router(default) - New x 506,280 ops/sec \u00b13.92% (85 runs sampled)\r\nhono - regexp-router - New x 610,975 ops/sec \u00b14.52% (83 runs sampled)\r\n```\r\n\r\n### Deno - flash\r\n\r\nNot much has changed.\r\n\r\n```\r\nv2.1.3\r\nRequests/sec: 185881.3210\r\nNew\r\nRequests/sec: 188679.7531\r\n```\r\n\r\n### Bun\r\n\r\nWill be faster if it returns only \"Hello World\".\r\n\r\n11% Faster!!\r\n\r\n```\r\nv2.1.3\r\nRequests/sec: 133396.6236\r\nNew\r\nRequests/sec: 149045.7514\r\n```",
        "html_url": "https://github.com/honojs/hono/pull/493",
        "comments": [
          "@yusukebe \r\n\r\nAwesome! But I think the logger is called twice in the following cases.\r\n\r\n```ts\r\napp.use('*', logger())\r\napp.get('/', (c) => c.text('Hono!!'))\r\n```\r\n\r\n```\r\nGET /not-found\r\n```",
          "Hi @usualoma !\r\n\r\nThanks for pointing that out. It is indeed a bug. I have fixed it on this PR, can you review it?\r\n\r\n#494 "
        ]
      },
      {
        "pr_number": 494,
        "title": "fix: fixed the issue logger called twice",
        "body": "By this PR #493 , the logger is called twice if it's not found. And the first log shows \"200\". The following case:\r\n\r\n```ts\r\napp.use('*', logger())\r\napp.get('/', (c) => c.text('Hono!!'))\r\n```\r\n\r\n```\r\nGET /not-found\r\n```\r\n\r\n![SS](https://user-images.githubusercontent.com/10682/188030412-b8158620-e3a4-48a8-91e6-590b366bcb56.png)\r\n\r\nThis problem is caused by two reasons.\r\n\r\n1. It did not return 404 response immediately If the response is undefined. \r\n2. Default `c.res` is 200 response. It should be 404 response.\r\n\r\nThis PR fixed this problem.\r\n\r\nThis is the issue pointed out in the comments of this PR.\r\nhttps://github.com/honojs/hono/pull/493#issuecomment-1234769263\r\n",
        "html_url": "https://github.com/honojs/hono/pull/494",
        "comments": [
          "@yusukebe Thanks!\r\n\r\nI think I also need to apply errorHandler, but can we do without it?\r\n```diff\r\ndiff --git a/src/hono.ts b/src/hono.ts\r\nindex d1ba641..e804644 100644\r\n--- a/src/hono.ts\r\n+++ b/src/hono.ts\r\n@@ -217,8 +217,12 @@ export class Hono<\r\n           }\r\n         }\r\n         return this.notFoundHandler(c as Context)\r\n-        // Do nothing\r\n-      } catch {}\r\n+      } catch (err) {\r\n+        if (err instanceof Error) {\r\n+          return this.errorHandler(err, c as Context<string, Environment>)\r\n+        }\r\n+        throw err\r\n+      }\r\n     }\r\n \r\n     const handlers = result ? result.handlers : [this.notFoundHandler]\r\n```\r\n\r\nPS\r\n\r\nI understand that this PR approach is the fastest. What worries me a little is that it seems to sacrifice maintainability for the sake of optimizing to a benchmark.\r\n\r\nI am concerned that the inclusion of this code will reduce the motivation to \"optimize compose.ts\" and slow it down in the real world.\r\n\r\nHowever, I also understand the importance of the \"fastest framework on the benchmark\" identity. (It's only a benchmark, but it's a benchmark)\r\n\r\nIf we are going to go further with the \"optimization by removing await\", I would suggest the following in addition to what is in this PR. This branch also performs quite well (though not as well as this PR). This change would also optimize performance in cases where middleware is used.\r\nhttps://github.com/honojs/hono/compare/main...usualoma:hono:perf-remove-await-composed",
          "Hi @usualoma !\r\n\r\n> I think I also need to apply errorHandler, but can we do without it?\r\n\r\nThis is what I have been struggling with, and I have been skipping the steps.\r\n\r\nIt does not catch the error here:\r\n\r\nhttps://github.com/honojs/hono/blob/63c7e5ada1ee5a463b9ee0315217dd3fde934c4e/src/hono.ts#L221\r\n\r\nbut the error will be caught below:\r\n\r\nhttps://github.com/honojs/hono/blob/63c7e5ada1ee5a463b9ee0315217dd3fde934c4e/src/hono.ts#L235\r\n\r\nSo I decided that it is not necessary. I know this is not a good approach because the handler which occurs the error will be executed twice. However, to keep the code short, I wrote this.\r\n\r\nHmmm. Do you think it is bad?\r\n\r\n---\r\n\r\n> sacrifice maintainability for the sake of optimizing to a benchmark\r\n\r\nThis is a very difficult matter.\r\n\r\nWe have to keep the code simple to improve for evolution. But more than that, I'm still thinking the identity of Hono is to be fast and must be at the top of the benchmark. For example, Hono is used in official benchmarks on Deno, and it is expected to avoid `await` and speed up the process on Bun. Both maintainability and optimization are necessary, but in this case I would choose optimization.\r\n\r\n> If we are going to go further with the \"optimization by removing await\", I would suggest the following in addition to what is in this PR.\r\n> This change would also optimize performance in cases where middleware is used.\r\n\r\nThis is good!! I have also been concerned about the performance of middleware.\r\n\r\nIf this PR is merged, will you create a new PR for `perf-remove-await-composed` ?",
          "@yusukebe Thanks for the answer.\r\n\r\nUnderstood! I accept that choice favorably.\r\n\r\n> We have to keep the code simple to improve for evolution. But more than that, I'm still thinking the identity of Hono is to be fast and must be at the top of the benchmark. For example, Hono is used in official benchmarks on Deno, and it is expected to avoid await and speed up the process on Bun. Both maintainability and optimization are necessary, but in this case I would choose optimization.\r\n\r\nI think it should be avoided that the handler is executed twice.\r\n(Although most of the time it is not a problem if it is executed twice because of an error.) I think that unexpected problems can occur when a POST or PUT request is executed twice.\r\n\r\nI will create a PR for perf-remove-await-composed later!"
        ]
      },
      {
        "pr_number": 495,
        "title": "perf(compose): Remove `await composed()` from hono.ts.",
        "body": "### What is included?\r\n\r\n* Reduced use of `await`\r\n* Reduced use of `context instanceof HonoContext`\r\n    * I think this code did not limit the type of `context` for abstraction, but since it will always be `HonoContext` in production environment, we have limited the type of `context` so that we do not have to compare.\r\n\r\nThere are many changes to the test code, but no changes to Hono's API.\r\n\r\n### Benchmark\r\n\r\nThese are the results in my environment.\r\n#493 reflects the results of optimization.\r\n```\r\nhono - trie-router(default) x 220,343 ops/sec \u00b15.68% (83 runs sampled)\r\nhono - regexp-router x 261,953 ops/sec \u00b15.37% (82 runs sampled)\r\nitty-router x 82,331 ops/sec \u00b13.38% (85 runs sampled)\r\nsunder x 114,834 ops/sec \u00b12.25% (83 runs sampled)\r\nworktop x 66,525 ops/sec \u00b13.41% (87 runs sampled)\r\nFastest is hono - regexp-router\r\n```\r\n\r\nApply the following changes to this PR.\r\n\r\n```diff\r\ndiff --git a/src/hono.ts b/src/hono.ts\r\nindex c4c0810..4a2da5e 100644\r\n--- a/src/hono.ts\r\n+++ b/src/hono.ts\r\n@@ -203,24 +203,6 @@ export class Hono<\r\n \r\n     const c = new HonoContext<string, E>(request, env, eventOrExecutionCtx, this.notFoundHandler)\r\n \r\n-    // Do not `compose` if it has only one handler\r\n-    if (result && result.handlers.length === 1) {\r\n-      const handler = result.handlers[0]\r\n-      try {\r\n-        const res = handler(c, async () => {})\r\n-        if (res) {\r\n-          const awaited = res instanceof Promise ? await res : res\r\n-          if (awaited) return awaited\r\n-        }\r\n-        return this.notFoundHandler(c as Context)\r\n-      } catch (err) {\r\n-        if (err instanceof Error) {\r\n-          return this.errorHandler(err, c as Context)\r\n-        }\r\n-        throw err\r\n-      }\r\n-    }\r\n-\r\n     const handlers = result ? result.handlers : [this.notFoundHandler]\r\n \r\n     const composed = compose<HonoContext<string, E>>(handlers, this.notFoundHandler)\r\n```\r\n\r\nThis version is a bit slower, but this is doing quite well, too.\r\n\r\n```\r\nhono - trie-router(default) x 218,861 ops/sec \u00b16.06% (79 runs sampled)\r\nhono - regexp-router x 265,468 ops/sec \u00b16.16% (79 runs sampled)\r\nitty-router x 83,826 ops/sec \u00b13.77% (86 runs sampled)\r\nsunder x 120,162 ops/sec \u00b12.26% (85 runs sampled)\r\nworktop x 66,387 ops/sec \u00b15.05% (84 runs sampled)\r\nFastest is hono - regexp-router\r\n```",
        "html_url": "https://github.com/honojs/hono/pull/495",
        "comments": [
          "Hi @usualoma !\r\n\r\nThank you for the PR! I've taken the benchmark for the application just returning \"Hello World\" on Bun.\r\n\r\n![SS](https://user-images.githubusercontent.com/10682/188158194-2d6ab23e-f536-47a3-ae8a-8676a981c6ca.png)\r\n\r\nThe code with no #493 applied (the code you used in the second benchmark) will be much faster than v2.1.3! This will speed up handlers with some middleware. Nice! I'll merge it.",
          "Hi @usualoma !\r\n\r\nSorry to get back on topic. Once again, I benchmarked on Bun. This PR will be effective when multiple middleware is applied to the handler. So, I wrote the following script:\r\n\r\n\r\n```ts\r\nimport { RegExpRouter } from 'hono/router/reg-exp-router'\r\nimport { Hono } from '../../src/index'\r\n\r\nconst app = new Hono({ router: new RegExpRouter() })\r\n\r\nfor (let i = 0; i < 10; i++) {\r\n  app.use('/with-middleware', async (c, next) => {\r\n    c.set('count', i)\r\n    await next()\r\n    c.get('foo')\r\n  })\r\n}\r\napp.get('/with-middleware', (c) => c.text('GET(/with-middleware)'))\r\nexport default app\r\n```\r\n\r\nThen, run the scripts on Bun 0.1.11 latest canary build, with each versions:\r\n\r\n1. Current `main` branch\r\n2. [fix/logger-called-twice branch](https://github.com/honojs/hono/tree/fix/logger-called-twice/src), not applied this PR yet.\r\n3. v2.1.3\r\n\r\nResults are below:\r\n\r\n<img width=\"1040\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/188273072-f8d35205-6ed7-4435-96eb-04e0a9ab9468.png\">\r\n\r\n<img width=\"908\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/188273078-7d6843c9-799f-452d-8d89-67dc7017ea3a.png\">\r\n\r\nCurrent main branch is slower than the others. Maybe the changes in this PR are having a worse effect.\r\n\r\nAnd, I've notice that all handlers except main handler are `async`, because they are almost middlware. So they have to `await`, and perhaps what this PR is doing is not much different from the previous version. \r\n\r\nWhat do you think about this? Sorry if I am wrong.",
          "@yusukebe Thanks!\r\n\r\nYour point is spot on.\r\n\r\nI did not correctly consider in this PR that \"middleware is an `AsyncFunction` and `await` is used\".\r\n\r\nI think the following PR would solve this problem.\r\nhttps://github.com/honojs/hono/pull/496"
        ]
      },
      {
        "pr_number": 496,
        "title": "perf(compose): Always return a Promise without async.",
        "body": "This PR will improve the poor performance noted in the following comment.\r\nhttps://github.com/honojs/hono/pull/495#issuecomment-1236125012\r\n\r\nThis branch is the fastest in my environment.\r\n\r\n#### perf-reduce-async-compose branch\r\n\r\n```\r\n% bombardier -c 200 -d 20s http://127.0.0.1:3000/with-middleware\r\nBombarding http://127.0.0.1:3000/with-middleware for 20s using 200 connection(s)\r\n[==========================================================================================] 20s\r\nDone!\r\nStatistics        Avg      Stdev        Max\r\n  Reqs/sec     28673.49    2688.43   35743.89\r\n  Latency        6.97ms   306.34us    24.17ms\r\n  HTTP codes:\r\n    1xx - 0, 2xx - 573631, 3xx - 0, 4xx - 0, 5xx - 0\r\n    others - 0\r\n  Throughput:     4.87MB/s\r\n```\r\n\r\n#### main branch\r\n\r\n```\r\n% bombardier -c 200 -d 20s http://127.0.0.1:3000/with-middleware\r\nBombarding http://127.0.0.1:3000/with-middleware for 20s using 200 connection(s)\r\n[==========================================================================================] 20s\r\nDone!\r\nStatistics        Avg      Stdev        Max\r\n  Reqs/sec     27164.11    2934.39   32670.21\r\n  Latency        7.36ms   339.90us    22.79ms\r\n  HTTP codes:\r\n    1xx - 0, 2xx - 543455, 3xx - 0, 4xx - 0, 5xx - 0\r\n    others - 0\r\n  Throughput:     4.61MB/s\r\n```\r\n\r\n#### v2.1.3\r\n\r\n```\r\n% bombardier -c 200 -d 20s http://127.0.0.1:3000/with-middleware\r\nBombarding http://127.0.0.1:3000/with-middleware for 20s using 200 connection(s)\r\n[==========================================================================================] 20s\r\nDone!\r\nStatistics        Avg      Stdev        Max\r\n  Reqs/sec     27380.01    2801.29   32083.21\r\n  Latency        7.30ms   457.61us    28.43ms\r\n  HTTP codes:\r\n    1xx - 0, 2xx - 547572, 3xx - 0, 4xx - 0, 5xx - 0\r\n    others - 0\r\n  Throughput:     4.65MB/s\r\n```\r\n\r\n\r\n#### Less middleware\r\n\r\nThe comparison of the following conditions also showed little difference between v2.1.3 and v2.1.3, but still not worse than v2.1.3.\r\n\r\n```ts\r\nimport { RegExpRouter } from 'hono/router/reg-exp-router'\r\nimport { Hono } from '../../src/index'\r\n\r\nconst app = new Hono({ router: new RegExpRouter() })\r\n\r\nfor (let i = 0; i < 1; i++) {\r\n  app.use('/with-middleware', async (c, next) => {\r\n    c.set('count', i)\r\n    await next()\r\n    c.get('foo')\r\n  })\r\n}\r\napp.get('/with-middleware', (c) => c.text('GET(/with-middleware)'))\r\nexport default app\r\n```",
        "html_url": "https://github.com/honojs/hono/pull/496",
        "comments": [
          "Hi @usualoma !\r\n\r\nThank you for the quick fix. Great implementation. This is faster than others!"
        ]
      },
      {
        "pr_number": 498,
        "title": "perf(req): improve `c.req.query` performance",
        "body": "I've improved `c.req.query` performance. Currently, `c.req.query` uses `new URL` for parsing query parameters strings. It is inefficient. In this PR, `c.req.query` uses just `URLSearchParams`, it becomes to be faster.\r\n\r\n## Benchmarks\r\n\r\nScripts:\r\n\r\n```ts\r\nimport { run, bench } from 'mitata'\r\nimport { getQueryStringFromURL } from '../../src/utils/url'\r\n\r\nconst urlString = 'http://localhost?foo=bar&foo2=bar2&foo3=bar3'\r\n\r\n{\r\n  bench('URL', () => {\r\n    const url = new URL(urlString)\r\n    url.searchParams.get('foo')\r\n  })\r\n}\r\n\r\n{\r\n  bench('getQueryStringFromURL + URLSearchParams', () => {\r\n    const queryStirng = getQueryStringFromURL(urlString)\r\n    const searchParams = new URLSearchParams(queryStirng)\r\n    searchParams.get('foo')\r\n  })\r\n}\r\n\r\nawait run()\r\n```\r\n\r\nResults:\r\n\r\n```plain\r\nMacBook@yusuke $ bun run ./url-params.ts\r\ncpu: Apple M1 Pro\r\nruntime: bun 0.1.11 (arm64-darwin)\r\n\r\nbenchmark                                    time (avg)             (min \u2026 max)       p75       p99      p995\r\n------------------------------------------------------------------------------- -----------------------------\r\nURL                                        1.18 \u00b5s/iter   (933.55 ns \u2026 3.21 \u00b5s)   1.14 \u00b5s   3.21 \u00b5s   3.21 \u00b5s\r\ngetQueryStringFromURL + URLSearchParams  802.39 ns/iter   (696.65 ns \u2026 2.35 \u00b5s) 795.49 ns   2.35 \u00b5s   2.35 \u00b5s\r\n\r\n---\r\n\r\nMacBook@yusuke $ deno run -A ./deno.ts\r\ncpu: Apple M1 Pro\r\nruntime: deno 1.25.1 (aarch64-apple-darwin)\r\n\r\nbenchmark                                    time (avg)             (min \u2026 max)       p75       p99      p995\r\n------------------------------------------------------------------------------- -----------------------------\r\nURL                                        2.62 \u00b5s/iter     (2.53 \u00b5s \u2026 2.67 \u00b5s)   2.64 \u00b5s   2.67 \u00b5s   2.67 \u00b5s\r\ngetQueryStringFromURL + URLSearchParams    1.33 \u00b5s/iter      (1.3 \u00b5s \u2026 1.34 \u00b5s)   1.33 \u00b5s   1.34 \u00b5s   1.34 \u00b5s\r\n```\r\n\r\nIn the real world:\r\n\r\n```ts\r\nimport { Hono } from '../../src/hono'\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/', (c) => {\r\n  const q = c.req.query('q')\r\n  return c.text(q)\r\n})\r\n\r\nexport default app\r\n```\r\n\r\nResults:\r\n\r\nBun\r\n\r\n```plain\r\n---\r\nv2.1.3\r\n\r\nMacBook@yusuke $ bombardier -c 200 -d 10s 'http://localhost:3000/?q=search-query&foo=bar&foo2=bar2'\r\nBombarding http://localhost:3000/?q=search-query&foo=bar&foo2=bar2 for 10s using 200 connection(s)\r\n[=======================================================================================================================================================] 10s\r\nDone!\r\nStatistics        Avg      Stdev        Max\r\n  Reqs/sec     93868.04   25880.52  119351.49\r\n  Latency        2.13ms     1.26ms    26.70ms\r\n  HTTP codes:\r\n    1xx - 0, 2xx - 938298, 3xx - 0, 4xx - 0, 5xx - 0\r\n    others - 0\r\n  Throughput:    16.73MB/s\r\n\r\nAfter\r\n\r\nMacBook@yusuke $ bombardier -c 200 -d 10s 'http://localhost:3000/?q=search-query&foo=bar&foo2=bar2'\r\nBombarding http://localhost:3000/?q=search-query&foo=bar&foo2=bar2 for 10s using 200 connection(s)\r\n[=======================================================================================================================================================] 10s\r\nDone!\r\nStatistics        Avg      Stdev        Max\r\n  Reqs/sec    123577.17   30821.98  148889.77\r\n  Latency        1.62ms     1.45ms    44.68ms\r\n  HTTP codes:\r\n    1xx - 0, 2xx - 1235784, 3xx - 0, 4xx - 0, 5xx - 0\r\n    others - 0\r\n  Throughput:    22.04MB/s\r\n```\r\n\r\nDeno\r\n\r\n```plain\r\n---\r\nv2.1.3\r\n\r\nMacBook@yusuke $ bombardier -c 200 -d 10s 'http://localhost:9000/?q=search-query&foo=bar&foo2=bar2'\r\nBombarding http://localhost:9000/?q=search-query&foo=bar&foo2=bar2 for 10s using 200 connection(s)\r\n[=======================================================================================================================================================] 10s\r\nDone!\r\nStatistics        Avg      Stdev        Max\r\n  Reqs/sec    105378.02    8459.58  117360.28\r\n  Latency        1.90ms   229.71us    22.57ms\r\n  HTTP codes:\r\n    1xx - 0, 2xx - 1053922, 3xx - 0, 4xx - 0, 5xx - 0\r\n    others - 0\r\n  Throughput:    22.51MB/s\r\n  \r\n---\r\n  \r\nAfter\r\n\r\nMacBook@yusuke $ bombardier -c 200 -d 10s 'http://localhost:9000/?q=search-query&foo=bar&foo2=bar2'\r\nBombarding http://localhost:9000/?q=search-query&foo=bar&foo2=bar2 for 10s using 200 connection(s)\r\n[=======================================================================================================================================================] 10s\r\nDone!\r\nStatistics        Avg      Stdev        Max\r\n  Reqs/sec    136321.87   29600.10  168217.67\r\n  Latency        1.47ms   165.65us    21.77ms\r\n  HTTP codes:\r\n    1xx - 0, 2xx - 1363227, 3xx - 0, 4xx - 0, 5xx - 0\r\n    others - 0\r\n  Throughput:    29.12MB/s\r\n```",
        "html_url": "https://github.com/honojs/hono/pull/498",
        "comments": [
          "@usualoma !\r\n\r\nCould you review this? If the implementation is not wrong, this will be a good fix.",
          "@usualoma Thank you!\r\n\r\nI've made it allows the fragments as query strings. The code became more simple."
        ]
      },
      {
        "pr_number": 499,
        "title": "Fix regexp ambigous route",
        "body": "Fixes #497\r\n\r\nThe performance of this code is not that good, but it is a rare case and has little impact. Performance improvements will be considered later.",
        "html_url": "https://github.com/honojs/hono/pull/499",
        "comments": [
          "@usualoma Thank you!\r\n\r\nCould you do `denoify`?",
          "@yusukebe Fixed! c9ad185 ",
          "Looks Good! I'll merge it!"
        ]
      }
    ],
    "v2.1.3": [
      {
        "pr_number": 490,
        "title": "fix app.HTTP_METHOD type",
        "body": "Hi, Thank you for publishing such a good product!\r\n\r\nThis PR improve type of app.HTTP_METHOD.\r\n\r\nIf the return type of the handler function is wrong, as in the example below, an error is reported for \"path\".\r\n\r\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2022-08-29 17 34 04](https://user-images.githubusercontent.com/59350345/187159717-6762f2a7-6bef-45ff-a972-cb71733b4ee9.png)\r\n\r\nThis is not ideal. Because it should be the handler function that should report the error like below.\r\n\r\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2022-08-29 17 36 39](https://user-images.githubusercontent.com/59350345/187160251-673e04ad-b762-4fd6-82a0-b517df6523ce.png)\r\n\r\n\r\n\r\n",
        "html_url": "https://github.com/honojs/hono/pull/490",
        "comments": [
          "Hi @azukiazusa1 !\r\n\r\nThis is a good fix! It will be more user friendly than before. Thank you, I'll merge it."
        ]
      },
      {
        "pr_number": 491,
        "title": "fix(compose): do not handle the error in `compose`",
        "body": "This is fixing and refactoring things.\r\n\r\nWe refactored `compose` in v2.0.9. Since this version, it does not throw the Error in `compose`, just adding the 500 error response into `c.res`. But it should throw the error as it should. Otherwise, middleware can't catch the error. We want to do like below:\r\n\r\n\r\n```ts\r\napp.use('*', async (c, next) => {\r\n  try {\r\n    await next()\r\n  } catch (err) {\r\n    return c.text('Catch the Error in middleware!!', 500)\r\n  }\r\n})\r\n```\r\n\r\nSo we don't have to do error handling in `compose`, just handling in the outer `dispatch` method.\r\n\r\nhttps://github.com/honojs/hono/blob/543fdbaaa6cd489c671157641d3b49e25287eee3/src/hono.ts#L219-L222\r\n\r\nAnd this fix will make the code simpler and less.\r\n\r\nThis fix related to https://github.com/honojs/sentry/issues/3",
        "html_url": "https://github.com/honojs/hono/pull/491",
        "comments": []
      }
    ],
    "v2.1.2": [
      {
        "pr_number": 489,
        "title": "fix(context): fix type error",
        "body": "Fixed the type error below:\r\n\r\n![SS](https://user-images.githubusercontent.com/10682/187066768-9a0cc67c-e601-46bd-b5dc-5ab129f8b81a.png)\r\n",
        "html_url": "https://github.com/honojs/hono/pull/489",
        "comments": []
      }
    ],
    "v2.1.1": [
      {
        "pr_number": 488,
        "title": "fix(type): fix type errors for Bindings and Variables",
        "body": "`c.get('bar')`  and `c.env.Foo` types were not correct. Fixed it.\r\n",
        "html_url": "https://github.com/honojs/hono/pull/488",
        "comments": []
      }
    ],
    "v2.1.0": [
      {
        "pr_number": 473,
        "title": "perf(trie-router): fine tuning, 9~10% faster",
        "body": "I did some minor tweaking of the TrieRouter and made it 9-10% faster.\r\n\r\n```\r\nhono - trie-router(default) x 434,571 ops/sec \u00b14.82% (81 runs sampled)\r\nhono - [Optimized] trie-router(default) x 465,051 ops/sec \u00b13.45% (87 runs sampled)\r\nhono - regexp-router x 528,354 ops/sec \u00b14.34% (84 runs sampled)\r\nitty-router x 201,821 ops/sec \u00b14.02% (88 runs sampled)\r\nsunder x 320,189 ops/sec \u00b12.17% (88 runs sampled)\r\nworktop x 191,326 ops/sec \u00b12.88% (83 runs sampled)\r\nFastest is hono - regexp-router\r\n\u2728  Done in 44.36s.\r\n```",
        "html_url": "https://github.com/honojs/hono/pull/473",
        "comments": []
      },
      {
        "pr_number": 476,
        "title": "fix(context): export `ContextVariableMap` correctly",
        "body": "`ContextVariableMap` is not working in the npm package because it's not exported from 'dist/hono/index`. In this PR, I've made that export correctly.",
        "html_url": "https://github.com/honojs/hono/pull/476",
        "comments": []
      },
      {
        "pr_number": 478,
        "title": "feat(types): enable adding Types for variables used in `c.set`/`c.get`",
        "body": "This PR is for enabling adding Types for variables used in `c.set` and `c.get`. Related to #472 \r\n\r\n`c.set()` and `c.get()` are useful to store variables for middleware and handlers. For example, you can set the \"client\" object in middleware and use it later in a handler. But, these key-value do not have Types.\r\n\r\n![SS](https://user-images.githubusercontent.com/10682/186123114-1e8793cd-fcd8-4cef-8c68-40b18cf74d06.png)\r\n\r\nIn this PR, Types will be available for `c.set` and `c.get` by passing the Types as generics into Hono class.\r\n\r\n![SS](https://user-images.githubusercontent.com/10682/186121412-46ee880f-f6a4-4d00-b581-5d6de81c9af2.png)\r\n\r\n![SS](https://user-images.githubusercontent.com/10682/186123398-25f9e035-30e6-4e48-b542-4b7b9ea1bd2a.png)\r\n\r\nBefore this PR, the generics is used for \"bindings\" on Cloudflare Workers.\r\n\r\n```ts\r\ntype Bindings = {\r\n  KV: KVNamespace\r\n  Storage: R2Bucket\r\n}\r\n\r\nconst app = new Hono<Bindings>()\r\n```\r\n\r\nAfter this PR, the generics will be used for \"bindings\" and \"variables\":\r\n\r\n```ts\r\ntype Bindings = {\r\n  KV: KVNamespace\r\n  Storage: R2Bucket\r\n}\r\n\r\ntype WebClient = {\r\n  user: string\r\n  pass: string\r\n}\r\n\r\ntype Variables = {\r\n  client: WebClient\r\n}\r\n\r\nconst app = new Hono<{ Variables: Variables; Bindings: Bindings }>()\r\n\r\napp.get('/foo', (c) => {\r\n  const client = c.get('client') // client is WebClient\r\n  const kv = c.env.KV // kv is KVNamespace\r\n  //...\r\n})\r\n```\r\n\r\nI think this is a cool feature for fine DX, but it has a small breaking change that is should be told the user well.",
        "html_url": "https://github.com/honojs/hono/pull/478",
        "comments": ["Thank you for your review. I'll merge this!"]
      },
      {
        "pr_number": 481,
        "title": "fix: enable passing Generics to c.req.parseBody, default is any",
        "body": "Fix #479 #341 \r\n\r\nIn this PR, we can pass the Generics to `c.req.parseBody()`. If we do not it, type will be `any`.\r\n\r\n```ts\r\nconst body = await c.req.parseBody() // body is any\r\n\r\ntype Post = { message: string }\r\nconst postBody = await c.req.parseBody<Post>() // postBody is Post\r\n```",
        "html_url": "https://github.com/honojs/hono/pull/481",
        "comments": []
      },
      {
        "pr_number": 485,
        "title": "docs(readme): add discord and twitter links",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/485",
        "comments": []
      },
      {
        "pr_number": 487,
        "title": "[BREAKING] fix: make that `c.req.parseBody` parses only `FormData`",
        "body": "Make that `c.req.parseBody` parses only FormData and does not parse JSON, text, and arrayBuffer. This fix includes breaking changes.\r\n\r\nBefore this PR, this function returns the parsed body according to Content-Type, despite the type of body. And, it will be `any`:\r\n\r\n```ts\r\nparseBody<T = any>(r: Request | Response): Promise<T>\r\n```\r\n\r\nEven though the user was expecting a `Record<string, string>`, this may return `Object`. This behavior could potentially cause a security vulnerability. See #484 \r\n\r\nIn this PR, `c.req.parseBody` only parse `FormData`. If the user wants to parse others than FormData, then the user should explicitly use `json()`, `text()`, and `arrayBuffer()`.\r\n\r\n```ts\r\nconst data = c.req.json()\r\n```\r\n\r\n`parseBody` will only return `Record<string, string | File>`.\r\n\r\n```ts\r\nparseBody(r: Request | Response): Promise<Record<string, string | File>>\r\n```\r\n\r\nFix #484 ",
        "html_url": "https://github.com/honojs/hono/pull/487",
        "comments": ["This should probably be reflected in the docs."]
      }
    ],
    "v2.0.9": [
      {
        "pr_number": 465,
        "title": "fix(context): fixed `ContextVariableMap` is not enabled in built code",
        "body": "`ContextVariableMap` was not available on the built code for the npm library. We have to write the lines in this PR.",
        "html_url": "https://github.com/honojs/hono/pull/465",
        "comments": []
      },
      {
        "pr_number": 466,
        "title": "perf(compose): optimize `await`",
        "body": "Do not `await` if the handler is not Promise in `compose`.\r\n\r\n## Benchmark Results\r\n\r\nAlthough all routes are \"sync\", I could see a large improvement in performance.\r\n\r\n```\r\nhono - trie-router(default) x 393,919 ops/sec \u00b14.52% (86 runs sampled)\r\nhono - regexp-router x 478,140 ops/sec \u00b12.85% (83 runs sampled)\r\nhono optimized - trie-router(default) x 427,940 ops/sec \u00b14.32% (81 runs sampled)\r\nhono optimized - regexp-router x 512,488 ops/sec \u00b15.28% (75 runs sampled)\r\nFastest is hono optimized - regexp-router\r\n\u2728  Done in 28.36s.\r\n```\r\n\r\n## Deno\r\n\r\nNot so different on Deno.\r\n\r\n```\r\nBefore: Requests/sec: 50226.7374\r\nAfter: Requests/sec: 50296.9231\r\n```\r\n\r\n## Bun\r\n\r\nOn Bun, will be 15% faster.\r\n\r\n```\r\nBefore: Requests/sec: 57043.0018\r\nAfter:  Requests/sec: 65658.9860\r\n```\r\n\r\n## Note\r\n\r\nThe test on the bottom in `hono.test.ts` was wrong. So, I've rewritten, and all tests are passed.",
        "html_url": "https://github.com/honojs/hono/pull/466",
        "comments": []
      },
      {
        "pr_number": 467,
        "title": "docs(readme): update benchmark results",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/467",
        "comments": []
      },
      {
        "pr_number": 468,
        "title": "chore: add `FUNDING.yml`",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/468",
        "comments": []
      },
      {
        "pr_number": 469,
        "title": "fix(compose): Support a handler that non-async and returning a promise.",
        "body": "#466 is awesome!\r\n\r\nHowever, we should also support asynchronous functions that are not 'AsyncFunction'.",
        "html_url": "https://github.com/honojs/hono/pull/469",
        "comments": [
          "Hi @usualoma \r\n\r\nYou are right! Thank you!\r\n\r\nAnd, could you do `yarn denoify`? We have to generate the code for Deno into `deno_dist` manually.",
          " @yusukebe \r\nOh sorry, I ran `yarn denoify`.",
          "Thanks!"
        ]
      }
    ],
    "v2.0.8": [
      {
        "pr_number": 460,
        "title": "refactor(compose): cache length",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/460",
        "comments": []
      },
      {
        "pr_number": 461,
        "title": "fix(ETag): fixed an error when the file size is too large.",
        "body": "Made `utils/crypto` supports `ReadbleStream`.\r\n\r\nFix #458",
        "html_url": "https://github.com/honojs/hono/pull/461",
        "comments": []
      },
      {
        "pr_number": 462,
        "title": "refactor(mime): made `.ico` file's extension to `image/x-icon`",
        "body": "Close #459",
        "html_url": "https://github.com/honojs/hono/pull/462",
        "comments": []
      },
      {
        "pr_number": 463,
        "title": "fix(context): fix header values shifting",
        "body": "Header values in Context may sometimes be \"shifting\" This PR does:\r\n\r\n* Handle header values as lowercase.\r\n* Fix the order of setting headers.",
        "html_url": "https://github.com/honojs/hono/pull/463",
        "comments": []
      }
    ],
    "v2.0.7": [
      {
        "pr_number": 441,
        "title": "feat(jwt): enable token in cookie",
        "body": "Close https://github.com/honojs/hono/issues/437",
        "html_url": "https://github.com/honojs/hono/pull/441",
        "comments": ["Thank you for your quick response!"]
      },
      {
        "pr_number": 444,
        "title": "perf(jsx): JSX performance improvement",
        "body": "This PR fixes #439.\r\n\r\n### Changes\r\n\r\nThere are no changes to the external specification in this PR, and we can continue to stringify templates with `(<p>text</p>).toString()`. However, there are some changes in the internal structure.\r\n\r\n#### `jsx` returns `JSXNode` instead of `HtmlEscapedString`\r\n\r\nPreviously, upon calling `jsx`, basic stringification was completed and an `HtmlEscapedString` object was returned, but with this PR, a data-wrapped `JSXNode` is returned upon calling `jsx`. The stringification is done at `toString()` call.\r\n\r\n### Discussion\r\n\r\nWith this PR, `escape` defined in utils/html is no longer used inside the hono repository. (Only `escapeToBuffer` is used.)\r\n\r\nThe `escape` function is fast enough and convenient for hono users to use in their applications, but depending on policy, it could be removed as unnecessary.\r\n\r\n### Benchmark\r\n\r\n```\r\nHono x 173,197 ops/sec \u00b12.16% (93 runs sampled)\r\nReact x 84,569 ops/sec \u00b12.81% (91 runs sampled)\r\nPreact x 61,307 ops/sec \u00b13.21% (86 runs sampled)\r\nNano x 16,871 ops/sec \u00b15.46% (78 runs sampled)\r\nFastest is Hono\r\n```",
        "html_url": "https://github.com/honojs/hono/pull/444",
        "comments": [
          "Hi @usualoma !\r\n\r\nGreat! I confirmed that it also works on Bun.\r\n\r\n> The escape function is fast enough and convenient for hono users to use in their applications, but depending on policy, it could be removed as unnecessary.\r\n\r\nYes, I think it's better to remove `utils/html`. I'll do it another PR.\r\n\r\nI'll merge this PR!"
        ]
      },
      {
        "pr_number": 446,
        "title": "refactor(jsx): Support all the boolean attributes.",
        "body": "I think it is better to support all boolean attirbutes listed in the table below.\r\nhttps://html.spec.whatwg.org/#attributes-3\r\n\r\nAnd, supporting all of them will not affect performance.",
        "html_url": "https://github.com/honojs/hono/pull/446",
        "comments": [
          "I forgot to apply prettier, so I applied it and force pushed.",
          "Your right! Thank you."
        ]
      },
      {
        "pr_number": 448,
        "title": "refactor: make `parsedBody` type as `Body`",
        "body": "Close #447",
        "html_url": "https://github.com/honojs/hono/pull/448",
        "comments": []
      },
      {
        "pr_number": 449,
        "title": "refactor(`utils/html`): rename `Buffer` to `StringBuffer`",
        "body": "Ranamed `Buffer` to `StringBuffer` in `utils/html`.\r\n\r\nFixed namespace conflicts. denoify force polyfill the type named `Buffer` for [Buffer](https://nodejs.org/api/buffer.html) module.\r\n\r\n",
        "html_url": "https://github.com/honojs/hono/pull/449",
        "comments": []
      },
      {
        "pr_number": 452,
        "title": "fix(`utils/crypto`): stringify the parameter which is object in `createHash`",
        "body": "If an object type was passed as a parameter, the values would all be the same.\r\n\r\nI've fixed it by making the object a different value by JSON.stringiy.\r\n\r\nIf the output values from the \"object\" and the \"string\" value are the same, the hash value will be the same. This is a specification.\r\n\r\nFix #451",
        "html_url": "https://github.com/honojs/hono/pull/452",
        "comments": []
      },
      {
        "pr_number": 453,
        "title": "refactor: add `Json` type for JSON object",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/453",
        "comments": []
      },
      {
        "pr_number": 454,
        "title": "fix(utils/crypto): make Binary and JSON object crypto correct",
        "body": "JSON object and Binary such ArrayBuffer or Uint8Array are not cryptos correctly.\r\nIn this PR, make a crypto hash according to the type of parameters.\r\n\r\nFix #451",
        "html_url": "https://github.com/honojs/hono/pull/454",
        "comments": []
      }
    ],
    "v2.0.6": [
      {
        "pr_number": 430,
        "title": "fix(jsx): Fix for JSX checked and selected props",
        "body": "Fixes #427:\r\n- `checked` and `selected` will not be rendered when set to false\r\n- `checked=\"checked\"` and `selected=\"selected\"` will be rendered when no value set or set to `true`",
        "html_url": "https://github.com/honojs/hono/pull/430",
        "comments": [
          "Hi @digitalmio !\r\n\r\nThank you so much! I really want this!\r\nI've commented on some things. Please check out.",
          "Hi, @digitalmio, @yusukebe.\r\n\r\nThank you!\r\nI also commented on one point.\r\nBest regards!",
          "Hey, no worries, I'll add those 3 more to the list and can amend the value to empty string today lunchtime or after work. ",
          "Hey @usualoma  @yusukebe, thinking out loud here: shall we also add list for tags where this rule should be applied (`input`, `button`, `select`, `option` etc) where on `div` it should render 'as normal'?",
          "Hi, @digitalmio \r\n\r\nI understand that hono's JSX  implementation has the following policy\r\n\r\n* Keep it as simple as possible.\r\n* The output HTML will be React friendly.\r\n    * Better to have less confusion for developers than to have Hono's own colors when it comes to JSX.\r\n\r\nAnd...\r\n\r\n* React does not distinguish by the element name.\r\n    * `<div autoPlay={true}>text</div>` => `<div autoplay=\"\">text</div>`\r\n    * https://github.com/facebook/react/blob/2c7dea73659da283fa433f5fd657a5a29797fd67/packages/react-dom/src/shared/DOMProperty.js\r\n\r\nTherefore, I think it is better to treat an attribute whose \"Value\" is a \"Boolean attribute\" in the table on the following page as a boolean attribute without distinguishing the element name.\r\nhttps://html.spec.whatwg.org/#attributes-3",
          "Makes sense. Pushed code with more props added, but without distinction of the key.\r\n",
          "Yes, we can merge.\r\n\r\n@digitalmio \r\nThank you for doing what I wanted to do!"
        ]
      },
      {
        "pr_number": 429,
        "title": "feat(context): Introduce ContextVariableMap.",
        "body": "Allows the user to type the value of `ctx.set('variable', var)` or `ctx.get('variable')`.\r\n\r\nThis is one of the ideas to solve the #414 problem, but even if this were not used to solve #414, I think this would still be a useful feature.",
        "html_url": "https://github.com/honojs/hono/pull/429",
        "comments": ["Thank you! Looks good!"]
      },
      {
        "pr_number": 433,
        "title": "fix(`parseBody`): return blank object when JSON body is nothing",
        "body": "If incomming request content-header is `application/json`, but the body is nothing, it was throwing 500 internal server error. It's better to return bank object `{}` if this situation.\r\n\r\nFix #428",
        "html_url": "https://github.com/honojs/hono/pull/433",
        "comments": []
      },
      {
        "pr_number": 435,
        "title": "perf(jsx): Performance Tuning for JSX",
        "body": "### Benchmark script\r\n\r\nI have added a benchmark script, albeit a simplified one, to provide a clue for discussion.\r\n\r\n### Result\r\n\r\n#### before\r\n\r\n```\r\nrender x 55,038 ops/sec \u00b14.28% (94 runs sampled)\r\n```\r\n\r\n#### after\r\n\r\n```\r\nrender x 66,330 ops/sec \u00b13.28% (96 runs sampled)\r\n```\r\n",
        "html_url": "https://github.com/honojs/hono/pull/435",
        "comments": [
          "Hi @usualoma !\r\n\r\nIt's very good to add the benchmarks, and it really became faster.\r\n\r\nPerhaps, adding \"React\" app benchmarks using `renderToString()` in `react-dom/server` will be a good guide? But maybe the comparison is nonsense.\r\n\r\nI think all the rest is OK",
          "@yusukebe\r\n\r\nOh, indeed. I too think it is important to compare with other products. (Not necessarily to be the fastest, but to see where we are.)\r\n\r\nI added a comparison with React, Preact and Nano JSX in bc35351.\r\n\r\n```\r\nHono x 65,868 ops/sec \u00b11.04% (96 runs sampled)\r\nReact x 94,587 ops/sec \u00b11.40% (95 runs sampled)\r\nPreact x 78,812 ops/sec \u00b10.86% (91 runs sampled)\r\nNano x 20,701 ops/sec \u00b10.98% (96 runs sampled)\r\nFastest is React\r\n```\r\n\r\nIt was unexpected that React turned out to be the fastest. However, I think hono is also doing well with its small code.\r\nWe will need to do more research to determine if this is a benchmarking issue or an actual speed issue, as in #282, but for now we will accept these results as reality and hope to make further improvements in the future.\r\n",
          "@usualoma \r\n\r\nGreat work!\r\n\r\nI was surprised that React is the fastest.\r\n\r\n> but for now we will accept these results as reality and hope to make further improvements in the future.\r\n\r\nYes!\r\nThis time, I'll merge once. Thank you!"
        ]
      }
    ],
    "v2.0.5": [
      {
        "pr_number": 422,
        "title": "fix(jsx/bun): do not escape children",
        "body": "For JSX middleware on Bun.\r\nFix bug that JSX `children` will force escaped.",
        "html_url": "https://github.com/honojs/hono/pull/422",
        "comments": []
      }
    ],
    "v2.0.4": [
      {
        "pr_number": 421,
        "title": "fix(package.json): fix path for exporting `jsx/jsx-runtime` types",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/421",
        "comments": []
      }
    ],
    "v2.0.3": [
      {
        "pr_number": 409,
        "title": "fix(package.json): export compress middleware",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/409",
        "comments": []
      },
      {
        "pr_number": 415,
        "title": "docs: make a contribution guide",
        "body": "[skip ci]\r\n",
        "html_url": "https://github.com/honojs/hono/pull/415",
        "comments": []
      },
      {
        "pr_number": 417,
        "title": "feat(middleware): implement Cache Middleware",
        "body": "Cache middleware that uses Cache API: <https://developer.mozilla.org/en-US/docs/Web/API/Cache>\r\n\r\nUsage:\r\n\r\n```ts\r\napp.get('*', cache({ cacheName: 'my-app', cacheControl: 'max-age=3600' }))\r\n```\r\n\r\nCache API is supported only on Cloudflare Workers deployed on the custom domain. But, Deno will support it in the future: <https://deno.com/deploy/docs/runtime-api>\r\n\r\nClose #416 ",
        "html_url": "https://github.com/honojs/hono/pull/417",
        "comments": []
      },
      {
        "pr_number": 419,
        "title": "fix(trie-router): fix the rule for capturing named parameters",
        "body": "It should work:\r\n\r\n```ts\r\napp.get('/book/a', (c) => {\r\n  return c.text(c.req.param('slug') || 'no-slug')\r\n})\r\n\r\napp.get('/book/:slug', (c) => {\r\n  return c.text(c.req.param('slug') || 'no-slug-at-slug-endpoint')\r\n})\r\n```\r\n\r\n```\r\n$ curl http://localhost:8787/book/a\r\nno-slug\r\n$ curl http://localhost:8787/book/foo\r\nfoo\r\n```\r\n\r\nClose #418",
        "html_url": "https://github.com/honojs/hono/pull/419",
        "comments": []
      },
      {
        "pr_number": 420,
        "title": "feat(jsx): support `jsxImportSource`",
        "body": "Support `jsxImportSource`.\r\nYou can use this option on Bun and Deno (Wrangler does not support it).\r\nif you write tsconfig as below, JSX middleware will be enabled without `import { jsx } from 'hono/jsx'`.\r\n\r\n```json\r\n{\r\n  \"compilerOptions\": {\r\n    \"jsx\": \"react-jsx\",\r\n    \"jsxFragmentFactory\": \"Fragment\",\r\n    \"jsxImportSource\": \"hono/jsx\"\r\n  }\r\n}\r\n```",
        "html_url": "https://github.com/honojs/hono/pull/420",
        "comments": []
      }
    ],
    "v2.0.2": [
      {
        "pr_number": 400,
        "title": "Pass path to serve-static middleware when using cloudflare module workers",
        "body": "I had a problem using the `{path: \"...\"}` option with the serve-static middleware when using cloudflare module workers. This should hopefully fix it.",
        "html_url": "https://github.com/honojs/hono/pull/400",
        "comments": [
          "Hi @raytracer !\r\n\r\nAh, I forgot it. Thank you for your help!\r\nI'll release v2.0.2 including this fix later."
        ]
      },
      {
        "pr_number": 401,
        "title": "fix(logger): specify `console.log` for default print fn",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/401",
        "comments": []
      },
      {
        "pr_number": 402,
        "title": "Update context.ts",
        "body": "Allow typecast in context.get(), e.g.\r\n\r\n```ts\r\nconst user = context.get<User>('user');\r\n```",
        "html_url": "https://github.com/honojs/hono/pull/402",
        "comments": ["Nice! Thank you!"]
      },
      {
        "pr_number": 404,
        "title": "chore: add conf file to categorize the PRs on release note",
        "body": "Inspired by\r\nhttps://github.com/r7kamura/github-label-presets",
        "html_url": "https://github.com/honojs/hono/pull/404",
        "comments": []
      },
      {
        "pr_number": 405,
        "title": "docs: rename `master` to `main` and remove README from middlewre directories",
        "body": "If you want to read the document about the middleware,\r\nplease refer to the website <https://honojs.dev/>",
        "html_url": "https://github.com/honojs/hono/pull/405",
        "comments": []
      }
    ],
    "v2.0.1": [
      {
        "pr_number": 392,
        "title": "Add compress middleware",
        "body": "Hi, I forgot to add compress middleware to middleware.ts . This pull request solves my mistake. Thanks.",
        "html_url": "https://github.com/honojs/hono/pull/392",
        "comments": ["@tani \r\n\r\nThank you! I'll release v2.0.1 later."]
      },
      {
        "pr_number": 393,
        "title": "chore: fix typo in error class name",
        "body": "Noticed a small typo in error class name.\r\n\r\nExported original name for backward-compat.\r\n\r\nLet me know what you think.\r\nI'll update usages of the class everywhere else in the code if you are accepting this PR.",
        "html_url": "https://github.com/honojs/hono/pull/393",
        "comments": [
          "Hi @RomanHotsiy !\r\n\r\nI think it's good to fix typos with backward compatibility.\r\n\r\n> I'll update usages of the class everywhere else in the code if you are accepting this PR.\r\n\r\nYes, please.\r\n\r\nAfter you fix the lint error, I'll accept.",
          "@yusukebe updated everything.",
          "Thank you!"
        ]
      },
      {
        "pr_number": 394,
        "title": "refactor: the log middleware and its tests",
        "body": "Features to a better and eficient code\r\n- add **enum** to acess message types\r\n- it's not good to use mutations in code and i fix this\r\n- will define the variables with precious names\r\n- fix the time function that not calculate correctly\r\n- achieving coverage 100% :)\r\n\r\nThank you, guys!",
        "html_url": "https://github.com/honojs/hono/pull/394",
        "comments": [
          "Hi @migueloliveiraz !\r\n\r\nThank you, that's very helpful. I'll merge this."
        ]
      },
      {
        "pr_number": 396,
        "title": "fix(compress): add type for enconding name",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/396",
        "comments": []
      },
      {
        "pr_number": 397,
        "title": "refactor: remove useless `async` for a better performance on Bun",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/397",
        "comments": []
      },
      {
        "pr_number": 398,
        "title": "test(bun): use `bun:test`",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/398",
        "comments": []
      },
      {
        "pr_number": 399,
        "title": "refactor(context): executionCtx always returns ExecutionContext.",
        "body": "This PR fixes #385.\r\n\r\n### Summary\r\n\r\nThis PR will replace executionCtx() with a getter method to check the type to runtime.\r\n\r\n### Matters for consideration\r\n\r\n#### May executionCtx() return a FetchEvent?\r\n\r\nSince the FetchEvent object satisfies the ExecutionContext interface, how about returning a FetchEvent from executionCtx() even if we have a FetchEvent? I think users will be able to use executionCtx().waitUntil() without being aware of whether it is Service Worker syntax or new Module Worker format.\r\n\r\n#### Checking the type with instanceof\r\n\r\nIn this PR, I am checking the type in `this._executionCtx instanceof FetchEvent`.\r\nI am not familiar with the performance differences, but is there anything that makes it less desirable than `'respondWith' in this._executionCtx`?",
        "html_url": "https://github.com/honojs/hono/pull/399",
        "comments": [
          "Hi @usualoma !\r\n\r\nThank you for your implementation.\r\n\r\n> how about returning a FetchEvent from executionCtx() even if we have a FetchEvent?\r\n\r\nIt's good that the `executionCxt()` returns FetchEvent if it is not ExecutionContext.\r\n\r\n> I think users will be able to use executionCtx().waitUntil() without being aware of whether it is Service Worker syntax or new Module Worker format.\r\n\r\nI agree with you.\r\n\r\n> Checking the type with instanceof\r\n\r\nI think `this._executionCtx instanceof FetchEvent` is simpler and better than the previous implementation, it's OK.\r\n\r\nAll right, let's go this."
        ]
      }
    ],
    "v2.0.0": [
      {
        "pr_number": 378,
        "title": "Skip closing tag if it is an empty element",
        "body": "Hi. According to the web standard,\nwe should skip to render the closing tag if it is an empty tag. This pull request adds the validation for the empty element. Cheers.",
        "html_url": "https://github.com/honojs/hono/pull/378",
        "comments": [
          "Hi @tani ! cc: @usualoma \r\n\r\nThat's a good point! I want to merge this PR, but one thing concerns me.\r\n\r\nWe may need \"`single U+002F SOLIDUS character (/)`\" for self-closing.\r\n\r\n> Then, if the element is one of the [void elements](https://www.w3.org/TR/2010/WD-html5-20101019/syntax.html#void-elements), or if the element is a [foreign element](https://www.w3.org/TR/2010/WD-html5-20101019/syntax.html#foreign-elements), then there may be a single U+002F SOLIDUS character (/). This character has no effect on [void elements](https://www.w3.org/TR/2010/WD-html5-20101019/syntax.html#void-elements), but on [foreign elements](https://www.w3.org/TR/2010/WD-html5-20101019/syntax.html#foreign-elements) it marks the start tag as self-closing.\r\n> https://www.w3.org/TR/2010/WD-html5-20101019/syntax.html\r\n\r\nIn this PR, the `<br></br>` JSX tag will be rendered to:\r\n\r\n```html\r\n<br>\r\n```\r\n\r\nBut for compatibility with XHTML it should be with `/`:\r\n\r\n```html\r\n<br />\r\n```\r\n\r\nThere are some opinions on which is better like this:\r\n\r\n<https://github.com/prettier/prettier/issues/5246>\r\n\r\nI am not sure which is better. However, *React* will render `<br />`. So, I think it's good we follow *React* and add `/` for self-closing.\r\n\r\n```tsx\r\nimport { Hono } from 'hono'\r\nimport React from 'react'\r\nimport { renderToString } from 'react-dom/server'\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/', (c) => {\r\n  const hello = (\r\n    <p>\r\n      Hello\r\n      <br></br>\r\n    </p>\r\n  )\r\n  return c.text(renderToString(hello))\r\n})\r\n\r\nexport default app\r\n```\r\n\r\nThis code will render:\r\n\r\n```html\r\n<p>Hello<br/></p>\r\n```\r\n\r\n@usualoma , do you have an opinion?\r\n",
          "Hi @yusukebe . I updated my code to be XHTML compatible.",
          "@tani @yusukebe \r\nI think it's a good improvement!\r\nI don't have a specific opinion, but I too think it is a good way to follow React.",
          "@tani \r\n\r\nThank you for fixing it.\r\n\r\n@usualoma \r\n\r\nThank you for your comment.\r\n\r\nI'll merge it!"
        ]
      },
      {
        "pr_number": 390,
        "title": "update to v2.0.0",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/390",
        "comments": []
      },
      {
        "pr_number": 390,
        "title": "update to v2.0.0",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/390",
        "comments": []
      },
      {
        "pr_number": 390,
        "title": "update to v2.0.0",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/390",
        "comments": []
      },
      {
        "pr_number": 390,
        "title": "update to v2.0.0",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/390",
        "comments": []
      },
      {
        "pr_number": 390,
        "title": "update to v2.0.0",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/390",
        "comments": []
      },
      {
        "pr_number": 390,
        "title": "update to v2.0.0",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/390",
        "comments": []
      },
      {
        "pr_number": 390,
        "title": "update to v2.0.0",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/390",
        "comments": []
      },
      {
        "pr_number": 390,
        "title": "update to v2.0.0",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/390",
        "comments": []
      },
      {
        "pr_number": 390,
        "title": "update to v2.0.0",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/390",
        "comments": []
      },
      {
        "pr_number": 390,
        "title": "update to v2.0.0",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/390",
        "comments": []
      },
      {
        "pr_number": 390,
        "title": "update to v2.0.0",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/390",
        "comments": []
      },
      {
        "pr_number": 390,
        "title": "update to v2.0.0",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/390",
        "comments": []
      },
      {
        "pr_number": 390,
        "title": "update to v2.0.0",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/390",
        "comments": []
      },
      {
        "pr_number": 390,
        "title": "update to v2.0.0",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/390",
        "comments": []
      },
      {
        "pr_number": 387,
        "title": "feat(bun): support `basic-auth` middleware",
        "body": "For supporting Basic Auth middleware for Bun, do not check types.\r\n\r\nClose #380 \r\n",
        "html_url": "https://github.com/honojs/hono/pull/387",
        "comments": []
      },
      {
        "pr_number": 386,
        "title": "Add compress middleware",
        "body": "`compress` middleware solves the performance related to the transferring speed on the internet.\r\nThis pull request depends on the `CompressStream` [^1]. It might not work on the Bun because Safari cannot use no such a class. However, we can run it on Node and Deno. Please consider to employ this middleware in your project. Cheers.\r\n\r\n[^1]: https://developer.mozilla.org/en-US/docs/Web/API/CompressionStream/CompressionStream",
        "html_url": "https://github.com/honojs/hono/pull/386",
        "comments": [
          "Hi @tani !\r\n\r\nOn Cloudflare Workers, the response body is compressed automatically. So, we don't care about making *compress middleware*. But, thinking about Deno, indeed we need this middleware for better performance. Nice work.\r\n\r\nWhen the CI is passed, I'll merge this PR!\r\n\r\n",
          "@tani \r\n\r\nOn `jest-environment-miniflare`, CompressionStream is implemented at v@2.6.0.\r\n\r\nhttps://github.com/cloudflare/miniflare/issues/206\r\n\r\nSo, maybe we have to update `jest-environment-miniflare` by this command:\r\n\r\n```\r\nyarn add -D jest-environment-miniflare\r\n```",
          "@tani \r\n\r\nThank you for fixing them.\r\n\r\nI'll merge `next` branch for **v2.0.0**. It' will be released soon!",
          "Hi, I am really excited to hear that.\r\nI am looking forward to the new release. Cheers :beers:"
        ]
      },
      {
        "pr_number": 388,
        "title": "refactor(bun): throw error when using `jwt` middleware",
        "body": "`jwt` middleware is not supported on Bun, yet.\r\n\r\nClose #381",
        "html_url": "https://github.com/honojs/hono/pull/388",
        "comments": []
      },
      {
        "pr_number": 390,
        "title": "update to v2.0.0",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/390",
        "comments": []
      },
      {
        "pr_number": 390,
        "title": "update to v2.0.0",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/390",
        "comments": []
      },
      {
        "pr_number": 389,
        "title": "docs: update readme and create migration guide",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/389",
        "comments": []
      },
      {
        "pr_number": 390,
        "title": "update to v2.0.0",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/390",
        "comments": []
      }
    ],
    "v1.6.5-0": [],
    "v1.6.4": [
      {
        "pr_number": 352,
        "title": "refactor(context): do not use exported `Env`",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/352",
        "comments": []
      }
    ],
    "v1.6.3": [
      {
        "pr_number": 348,
        "title": "refactor: use arrow func for `app.fetch`",
        "body": "On Deno, you can write like below:\r\n\r\n```ts\r\nimport { serve } from 'https://deno.land/std/http/server.ts'\r\nimport { Hono } from 'https://deno.land/x/hono/mod.ts'\r\n\r\nconst app = new Hono()\r\n// ...\r\nserve(app.fetch) // <---\r\n```\r\n",
        "html_url": "https://github.com/honojs/hono/pull/348",
        "comments": []
      },
      {
        "pr_number": 349,
        "title": "feat(deno): export everythings from middlewares",
        "body": "You can import `memo` or `Fragment` defined in `jsx` on Deno app.\r\n\r\nClose #347 ",
        "html_url": "https://github.com/honojs/hono/pull/349",
        "comments": []
      }
    ],
    "v1.6.2": [
      {
        "pr_number": 343,
        "title": "refactor(deno): [BREAKING] obsolete `app.fire()`",
        "body": "Obsolete `app.fire()` for Deno. Instead of that, write this:\r\n\r\n```ts\r\nserve((req) => app.fetch(req))\r\n```",
        "html_url": "https://github.com/honojs/hono/pull/343",
        "comments": []
      }
    ],
    "v1.6.1": [
      {
        "pr_number": 338,
        "title": "chore: rm `*.ts.test` from deno_dist",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/338",
        "comments": []
      },
      {
        "pr_number": 339,
        "title": "feat: add `serve-static` middlware for deno",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/339",
        "comments": []
      }
    ],
    "v1.6.0": [
      {
        "pr_number": 337,
        "title": "chore: add benchmark scripts for deno",
        "body": null,
        "html_url": "https://github.com/honojs/hono/pull/337",
        "comments": []
      }
    ]
  }
}
