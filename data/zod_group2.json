{
  "repo_name": "zod",
  "release_pr_map": {
    "v3.23.8": [
      {
        "pr_number": 3470,
        "title": "Add Bronze logos",
        "body": "<!--\r\n\r\nDevelopment of the next major version of Zod (`v4`) is currently underway.\r\n\r\nIf your PR implements new functionality, it should target the `v4` branch, NOT the `master` branch. If it's a bugfix, the `master` branch is fine.\r\n\r\nThanks for your contribution!\r\n\r\n-->\r\n\r\nThank you for your contribution to our project! Before submitting your pull request, please ensure the following:\r\n\r\n- [ ] Your code changes are well-documented.\r\n- [ ] You have tested your changes.\r\n- [ ] You have updated any relevant documentation.\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/3470",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 39f4205291f91d39bb46188971b8b619955126f8 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/663a923be544d60008957238 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3470--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3470--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTM0NzAtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.jMlUBJmZzps_KGMlBV0Ru0pFAsfGLUvwCHmKrv33yWo)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 3471,
        "title": "Tweak",
        "body": "\r\n<!--\r\n\r\nDevelopment of the next major version of Zod (`v4`) is currently underway.\r\n\r\nIf your PR implements new functionality, it should target the `v4` branch, NOT the `master` branch. If it's a bugfix, the `master` branch is fine.\r\n\r\nThanks for your contribution!\r\n\r\n-->\r\n\r\n\r\n\r\nThank you for your contribution to our project! Before submitting your pull request, please ensure the following:\r\n\r\n- [ ] Your code changes are well-documented.\r\n- [ ] You have tested your changes.\r\n- [ ] You have updated any relevant documentation.\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/3471",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | a00bf870ec5c83ae71cf12c8ccc2111444d9db82 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/663a975bd6be0c000815bfc8 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3471--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3471--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTM0NzEtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.D_oLeJJrNHo3e0LE1YNr4AkbYfXjRgk9hOwiVQ5QLy0)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._"
        ]
      }
    ],
    "v3.23.7": [
      {
        "pr_number": 3463,
        "title": "Fix #3437: extendShape erases JSDoc property documentation",
        "body": "Fixes the issue described [here](https://github.com/colinhacks/zod/issues/3437), at least the minimal repro example provided.\r\n\r\nBenchmarking the change using [zod-ts-perftest](https://github.com/jussisaurio/zod-ts-perftest) it increases the number of type instantiations by 8.5%, which may be an acceptable compromise, but ofc not ideal\r\n\r\n[More discussion here](https://github.com/colinhacks/zod/pull/2845#issuecomment-2093772277)\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/3463",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 24d6ca41dd322bc99e3654d065eb688437ab3b08 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/6635e5d43c0aef00085d4e8a |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3463--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3463--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTM0NjMtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.idsVv5g4GK7mF0-8DYH18_2103NRu2dMiIpX96Q14eA)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._"
        ]
      }
    ],
    "v3.23.6": [
      {
        "pr_number": 3447,
        "title": "describe how one can protect from cyclical objects starting an infini\u2026",
        "body": "Document a way to protect against cyclical objects starting an infinite loop.\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/3447",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 569bf35777d9c8365733c2d9bc915caf8645657b |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/6631663d42d2160008a666bb |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3447--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3447--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTM0NDctLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.gHVEOl80XxWJrMJNvjjYqPd1wQTNDxcejtlRPt4HrWk)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "Clever pattern, and thanks for the PR! But this is obscure enough that I'd rather not make a significant addition to the docs - it makes the docs feel more complex for everyone. Perhaps you can put your code in a GitHub gist and link to it? Or use `details/summary` HTML?"
        ]
      },
      {
        "pr_number": 3454,
        "title": "Add Zod playground link",
        "body": "Happy to share the link to Zod Playground: [Zod Playground](https://zod-playground.vercel.app/). It's a tool designed for instant testing of Zod schemas. \r\nI hope you find it useful! Any feedback you have to improve it further would be greatly appreciated.",
        "html_url": "https://github.com/colinhacks/zod/pull/3454",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 04af5148405abbabe2517b9038b3011654bd013e |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/663208993d318e000843ed86 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3454--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3454--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTM0NTQtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.c_E_191bUv_X180rk4rxoDupnxASYGyw-8Nk3u3lTMY)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "Hey @m10rten thanks for checking out Zod Playground and sharing your thoughts! I get where you're coming from, but let me shed some light on what makes it valuable.\r\nZod Playground isn't just a tool for quick schema testing; it's a playground designed to simplify your experience experimenting with Zod. Picture yourself as a newcomer to Zod or someone eager to explore a new feature. Without Zod Playground, you'd have to go through the hassle of setting up a project, installing Zod, writing your schema, inputting values, adding console logs, and then finally running the project to see the results. It's a bit of a tedious process, especially when all you want is a quick peek at how something functions.\r\n\r\nBut with this tool you can instantly draft your schema, add some values, and observe how they're parsed. It's a streamlined path to grasping Zod's intricacies without the typical setup headaches.\r\n\r\nWhile Zod Playground may not reinvent the wheel, similar tools exist for other libraries precisely because they're so convenient. In fact, someone even expressed interest in such a tool for Zod check out this [GitHub issue:]( https://github.com/colinhacks/zod/issues/2710).\r\n",
          "Futhermore I've been contemplating some potential features to make it even more valuable. For example:\r\n- facilitating the sharing of Zod schemas among users\r\n- offering a selection of predefined schemas could allow users to explore various features more efficiently\r\n- data persistence, ensuring that inserted data is retained across sessions\r\n- enabling users to switch between different versions of Zod, including beta versions",
          "WOW this is so cool! Thanks Marco!"
        ]
      },
      {
        "pr_number": 3457,
        "title": "Fixed freezing async ZodReadonly results",
        "body": "Hello!\r\n\r\nI noticed that the parsed results of `readonly()` schemas are not really readonly after `parseAsync()`\r\nI added tests, then a fix. (and corrected a minor typo in the related docs)\r\n\r\n- [x] Your code changes are well-documented.\r\n- [x] You have tested your changes.\r\n- [x] You have updated any relevant documentation.\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/3457",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | d06b4d6a02f3301ab3c651373c4a0ed86beebfb4 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/6633b13b65dd940008e74b37 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3457--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3457--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTM0NTctLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.Bo6xh8-iB4GSpLUZuJZbONqY649pL9fzQ51xeNuHBNs)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "Good catch. Thanks!",
          "Landed in v3.23.6"
        ]
      },
      {
        "pr_number": 3453,
        "title": "Update sponsor tiers",
        "body": "Update sponsor tiers",
        "html_url": "https://github.com/colinhacks/zod/pull/3453",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 8802bbe13e67410c7bbc770554f2932d5f393b0d |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/66341d101f5c9c0008636839 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3453--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3453--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTM0NTMtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.buNG5cstgr-NvmHzBRQLAioD2riChRNQtOJ56CTxuuE)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 3460,
        "title": "Add copper tier",
        "body": "<!--\r\n\r\nDevelopment of the next major version of Zod (`v4`) is currently underway.\r\n\r\nIf your PR implements new functionality, it should target the `v4` branch, NOT the `master` branch. If it's a bugfix, the `master` branch is fine.\r\n\r\nThanks for your contribution!\r\n\r\n-->\r\n\r\n## Add copper tier\r\n\r\nThank you for your contribution to our project! Before submitting your pull request, please ensure the following:\r\n\r\n- [ ] Your code changes are well-documented.\r\n- [ ] You have tested your changes.\r\n- [ ] You have updated any relevant documentation.\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/3460",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | f5b25e29e126f1ff1bdcdd4c6132d307e850455f |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/663425b4b2e0260008cbb399 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3460--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3460--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTM0NjAtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.mEL-X3YD3nRdPCUvGaTdSwks-_k4EGboT6IbFXCbxCA)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._"
        ]
      }
    ],
    "v3.23.5": [
      {
        "pr_number": 3433,
        "title": "Update README_ZH.md",
        "body": "fix Demo -> Deno\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/3433",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 55132925c2aac6960b28fd53ce2453dc592e052b |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/66271f76a5c94c000813426d |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3433--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3433--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTM0MzMtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.5azF8LQYHjG62o553rXB_Cdzsr7yKBesfnvSBM7lm3Q)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "Thanks!!"
        ]
      },
      {
        "pr_number": 3444,
        "title": "Made ZodEnum take readonly string array",
        "body": "# Zod Pull Request\r\n\r\nEnables creating dynamic schemas from `as const` object definitions:\r\n\r\n```typescript\r\nconst question = {\r\n  questionId: \"unit_location\",\r\n  answers: [\"attic\", \"upstairs\", \"main_floor\", \"basement\", \"garage\", \"outside\", \"other\"],\r\n} as const;\r\n\r\nfunction questionToZodSchema<\r\n  Q extends string,\r\n  A extends readonly [string, ...string[]],\r\n>(question: QuestionSpec<Q, A>): z.ZodObject<{ [key in Q]: ZodEnum<A> }> {\r\n  return z.object({ [question.questionId]: z.enum(question.answers) }) as any;\r\n}\r\n\r\nconst schema = leafQuestionToZodSchema(test);\r\nconst value = schema.parse({ unit_location: \"attic\" });\r\n```\r\n\r\n## Overview\r\n\r\nThank you for your contribution to our project! Before submitting your pull request, please ensure the following:\r\n\r\n- [ ] Your code changes are well-documented.\r\n- [ ] You have tested your changes.\r\n- [ ] You have updated any relevant documentation.\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/3444",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | cd917ebcff1296b4a365468b1257e186628473ce |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/662aab416f70e10008e515c7 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3444--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3444--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTM0NDQtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.4zaQ-dsIM0kKcaZ0u61Cyk3SJg1qBHjV67y3_8R0Rsk)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "Thanks!"
        ]
      }
    ],
    "v3.23.4": [],
    "v3.23.3": [],
    "v3.23.2": [],
    "v3.23.1": [],
    "v3.23.0": [
      {
        "pr_number": 2845,
        "title": "TS compilation perf: faster objectUtil.addQuestionMarks",
        "body": "I'm not sure what the precise reasons for this being faster are, but consistently benchmarking in my project about 50% more type instantiations with the original version vs. the one proposed in this commit; plus the compilation time is 20% longer in the original.\r\n\r\nEDIT: check out [this issue comment](https://github.com/microsoft/TypeScript/issues/56017#issuecomment-1755995893) from a `tsc` maintainer\r\n\r\nBefore:\r\n```\r\nFiles:                        1251\r\nLines of Library:            39145\r\nLines of Definitions:       126004\r\nLines of TypeScript:         11878\r\nLines of JavaScript:             0\r\nLines of JSON:                   0\r\nLines of Other:                  0\r\nIdentifiers:                183217\r\nSymbols:                    285778\r\nTypes:                       99275\r\nInstantiations:            7734511\r\nMemory used:               340757K\r\nAssignability cache size:    34242\r\nIdentity cache size:          1483\r\nSubtype cache size:            724\r\nStrict subtype cache size:      99\r\nI/O Read time:               0.03s\r\nParse time:                  0.38s\r\nResolveModule time:          0.10s\r\nResolveTypeReference time:   0.01s\r\nResolveLibrary time:         0.01s\r\nProgram time:                0.61s\r\nBind time:                   0.16s\r\nCheck time:                  2.53s\r\nI/O Write time:              0.00s\r\nprintTime time:              0.02s\r\nEmit time:                   0.02s\r\nTotal time:                  3.32s\r\n```\r\n\r\nAfter:\r\n```\r\nFiles:                        1251\r\nLines of Library:            39145\r\nLines of Definitions:       126008\r\nLines of TypeScript:         11878\r\nLines of JavaScript:             0\r\nLines of JSON:                   0\r\nLines of Other:                  0\r\nIdentifiers:                183224\r\nSymbols:                    286106\r\nTypes:                       86715\r\nInstantiations:            5187916\r\nMemory used:               334963K\r\nAssignability cache size:    34946\r\nIdentity cache size:          1479\r\nSubtype cache size:            724\r\nStrict subtype cache size:      99\r\nI/O Read time:               0.03s\r\nParse time:                  0.38s\r\nResolveModule time:          0.11s\r\nResolveTypeReference time:   0.01s\r\nResolveLibrary time:         0.01s\r\nProgram time:                0.62s\r\nBind time:                   0.18s\r\nCheck time:                  2.04s\r\nI/O Write time:              0.00s\r\nprintTime time:              0.02s\r\nEmit time:                   0.02s\r\nTotal time:                  2.86s\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/2845",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 50dcc4517678b44fe28f3ac5f2f44e3f9e478912 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/66243bc507a4ce0008bad9a6 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2845--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2845--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI4NDUtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.8amJEWNLpkUWIcXJHDNoMRsBghj_BuNsM63Jro2O2Mk)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "interesting, how did you do this benchmark? how can I reproduce?",
          "> interesting, how did you do this benchmark? how can I reproduce?\r\n\r\nI'm basically just benchmarking it against one of the TS APIs at work that uses Zod quite heavily. Would probably be good to have some public `zod-kitchen-sink` type performance benchmark project though...\r\n\r\nI'm having trouble getting any perf difference between these two implementations on just a few ZodObjects, but in my real world project it's quite clear as you can tell from the numbers cited in the OP",
          "> interesting, how did you do this benchmark? how can I reproduce?\r\n\r\nScript to generate a bunch of zod object schemas and .omit() & .extend() modifications for each:\r\n\r\n```\r\nimport fs from \"fs\";\r\n\r\n// Step 1: Possible Zod types\r\nconst possibleZodTypes = [\"z.string()\", \"z.number()\", \"z.boolean()\"];\r\nconst possibleChainMethods = [\"\", \".optional()\", \".nullable()\", \".nullish()\"];\r\n\r\n// Step 2: Generate a random string for keys and variable names\r\nfunction generateRandomString(length) {\r\n  const charset = \"abcdefghijklmnopqrstuvwxyz\";\r\n  let result = \"\";\r\n  for (let i = 0; i < length; i++) {\r\n    const randomIndex = Math.floor(Math.random() * charset.length);\r\n    result += charset[randomIndex];\r\n  }\r\n  return result;\r\n}\r\n\r\n// Step 3: Generate a random Zod schema\r\nfunction generateRandomZodSchema() {\r\n  const numberOfKeys = Math.floor(Math.random() * 30) + 1; // 1-30 keys\r\n\r\n  let schema = `z.object({`;\r\n  const keys = [];\r\n  for (let i = 0; i < numberOfKeys; i++) {\r\n    const key = generateRandomString(8); // Key name of 8 chars\r\n    keys.push(key);\r\n    const randomTypeIndex = Math.floor(Math.random() * possibleZodTypes.length);\r\n    const randomChainMethodIndex = Math.floor(\r\n      Math.random() * possibleChainMethods.length\r\n    );\r\n    const randomType = possibleZodTypes[randomTypeIndex];\r\n    const randomChance = Math.random();\r\n    if (randomChance > 0.98) {\r\n      const { schema: nestedSchema } = generateRandomZodSchema();\r\n      schema += ` ${key}: ${nestedSchema},`;\r\n      continue;\r\n    }\r\n    const type = randomType + possibleChainMethods[randomChainMethodIndex];\r\n\r\n    schema += ` ${key}: ${type},`;\r\n  }\r\n\r\n  schema += \" })\";\r\n  return {\r\n    schema,\r\n    keys,\r\n  };\r\n}\r\n\r\n// Step 4: Write the generated schemas to a file\r\nfunction writeToFile(\r\n  filepath = \"randomZodSchemas.ts\",\r\n  numberOfSchemas = 100,\r\n  numberOfOmits = 10,\r\n  numberOfExtends = 10\r\n) {\r\n  let allSchemas = 'import * as z from \"zod\";\\n\\n';\r\n  for (let i = 0; i < numberOfSchemas; i++) {\r\n    const variableName = generateRandomString(7);\r\n    const { schema, keys } = generateRandomZodSchema();\r\n    allSchemas += `export const ${variableName} = ` + schema + \";\\n\";\r\n\r\n    for (let i = 0; i < numberOfOmits; i++) {\r\n      const omitSchemaVariableName = generateRandomString(7);\r\n      const omitKeys = keys\r\n        .slice(0, keys.length - 1)\r\n        .filter(() => Math.random() > 0.5);\r\n      allSchemas += `export const ${omitSchemaVariableName} = ${variableName}.omit({\r\n      ${omitKeys.map((key) => `\"${key}\": true`).join(\",\\n\")}\r\n    });\\n\\n`;\r\n    }\r\n    for (let i = 0; i < numberOfExtends; i++) {\r\n      const extendSchemaVariableName = generateRandomString(7);\r\n      const extendKeys = Array(3)\r\n        .fill(0)\r\n        .map(() => generateRandomString(7));\r\n      allSchemas += `export const ${extendSchemaVariableName} = ${variableName}.extend({\r\n      ${extendKeys.map((key) => `\"${key}\": z.string()`).join(\",\\n\")}\r\n    });\\n\\n`;\r\n    }\r\n  }\r\n\r\n  fs.writeFile(filepath, allSchemas, (err) => {\r\n    if (err) {\r\n      console.error(\"Error writing file:\", err);\r\n    }\r\n  });\r\n}\r\n\r\nwriteToFile(\"src/randomZodSchemas.ts\");\r\n```\r\n\r\nGenerate a file, then `import * as randomSchemas from './thatFile.ts'` and run `npx tsc --noEmit --extendedDiagnostics` on it. This reproduces the perf difference quite clearly. \r\n\r\nImportantly: a meaningful amount of perf degradation only occurs when using .omit() and .extend(), but when you do, the difference is stark.",
          "Turns out it was even possible to remove the `requiredKeys` helper with had yet a another small positive impact on performance; github user Andarist landed on this kind of solution earlier this year in #2620 !\r\n\r\nBeyond this PR, it might be a good idea to build a separate compilation performance regression test suite for Zod. Something like the type generation script above (albeit cleaned up) might serve as a starting point.",
          "I made a really braindead-simple benchmarking repo, some test runs here:\r\n\r\nhttps://github.com/colinhacks/zod/pull/2839#issuecomment-1756110256",
          "On zod 3.22.4, this patch breaks a ton of types.",
          "> On zod 3.22.4, this patch breaks a ton of types.\r\n\r\nCould you provide some example types so I can modify the PR accordingly?\r\n\r\nThose examples could be added as type level regression tests.",
          "> Could you provide some example types so I can modify the PR accordingly?\r\n> \r\n> Those examples could be added as type level regression tests.\r\n\r\nSure. The issues are in schemas composed of a `union` of nested, `extend`ed schemas. I'm sure there's a more compact schema that can reproduce the issue without needing to bring this ginormo thing in.",
          "I apologize, your PR works fine. I cherry-picked your commits onto upstream master and used that build successfully.\r\n\r\nMy problem was that I patched the build artefact directly with `pnpm patch`. That broke not only `zod` types, but also a ton of non-`zod` types with nested objects/records. I suppose there is a weird interaction with `pnpm patch` and TS. Spooky!",
          "Was able to reduce the # of type instantiations some more by baking in flattening to `addQuestionMarks`; that type was always wrapped with `flatten` so inlining it was possible",
          "Although apparently it fails on newer TS versions... the project version is 4.5.x\r\n\r\nEDIT: reverted.",
          "Thanks! I'd added some additional tests in `generics.test.ts` and it took some fiddling to get this to pass. The `zod-ts-perftest` repo is *so useful*! Thanks for putting that together. Got it down to ~3m instantiations from ~6m. \ud83d\ude80\r\n\r\nI also threw a simplified version of `extendShape` into this PR as well. \r\n\r\nAmazing stuff @jussisaurio!!!",
          "This has landed in Zod 3.23.\r\n\r\nhttps://github.com/colinhacks/zod/releases/tag/v3.23.0",
          "And...it broke JSDoc #3437 \r\n\r\nHere's where I'm at in my investigations:\r\n\r\n```ts\r\n// slow (60% more instantiations), but preserves JSDoc\r\ntype extendShape2<A extends object, B extends object> = Pick<\r\n  A,\r\n  Exclude<keyof A, keyof B>\r\n> & B;\r\n\r\n// fast, but JSDoc is lost\r\ntype extendShape1<A extends object, B extends object> = {\r\n  [K in keyof A | keyof B]: K extends keyof B\r\n    ? B[K]\r\n    : K extends keyof A\r\n    ? A[K]\r\n    : never;\r\n};\r\n\r\n// fast & preserves JSDoc! doesn't reduce object to simplest form\r\ntype extendShape3<A extends object, B extends object> = {\r\n  [K in Exclude<keyof A, keyof B>]: A[K];\r\n} & B;\r\n```",
          "**Iteration 1:**\r\n\r\n```ts\r\n  export type extendShape<A extends object, B extends object> = {\r\n    [K in keyof A]: K extends keyof B ? never : A[K];\r\n  } & {\r\n    [K in keyof B]: B[K];\r\n  };\r\n```\r\n\r\nThis seems to preserve the JSDocs at least with the example given in #3437, and also seems to create (slightly) less type instantiations as well.\r\n\r\nHowever, it fails a few existing tests, eg.\r\n\r\n```ts\r\ntest(\"test inferred merged type\", async () => {\r\n  const asdf = z.object({ a: z.string() }).merge(z.object({ a: z.number() }));\r\n  type asdf = z.infer<typeof asdf>;\r\n  util.assertEqual<asdf, { a: number }>(true); // fail\r\n});\r\n```\r\n\r\n**Iteration 2:**\r\n\r\n```ts\r\n  export type extendShape<A extends object, B extends object> = {\r\n    [K in keyof A as K extends keyof B ? never : K]: A[K];\r\n  } & {\r\n    [K in keyof B]: B[K];\r\n  };\r\n```\r\n\r\nThis passes all existing tests, however increases instantiations by 8.5% (380k vs 350k in my test-case using [zod-ts-perftest](https://github.com/jussisaurio/zod-ts-perftest)). This may be a tolerable compromise?"
        ]
      },
      {
        "pr_number": 3425,
        "title": "docs: correct typo",
        "body": "# Zod Pull Request\r\n\r\n**IMPORTANT:** Development of the next major version of Zod (`v4`) is currently ongoing. If your PR implements new functionality, it should target the `v4` branch, NOT the `master` branch. (If it's a bugfix, the `master` branch is fine.)\r\n\r\n## Overview\r\n\r\nThank you for your contribution to our project! Before submitting your pull request, please ensure the following:\r\n\r\n- [x] Your code changes are well-documented.\r\n- [ ] You have tested your changes.\r\n- [x] You have updated any relevant documentation.\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/3425",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 1bcbd174a91d136983d1cbe9ade319fec465385d |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/6624977ad955160008f787ea |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3425--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3425--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTM0MjUtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.UGz5pLeMyvQ9BxcxbD0qNwIUvmcJ8qIxotkV016WyAc)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 3426,
        "title": "Publish with Provenance",
        "body": "# Zod Pull Request\r\n\r\n**IMPORTANT:** Development of the next major version of Zod (`v4`) is currently ongoing. If your PR implements new functionality, it should target the `v4` branch, NOT the `master` branch. (If it's a bugfix, the `master` branch is fine.)\r\n\r\n## Overview\r\n\r\nhttps://docs.npmjs.com/generating-provenance-statements#example-github-actions-workflow\r\n\r\nhttps://github.com/marketplace/actions/npm-publish#github-action\r\n\r\nGotta get you the \u2705 on npm\r\n\r\n![Screenshot_20240421-182609](https://github.com/colinhacks/zod/assets/18017094/36cacafd-8a94-4d5d-abf7-ff6753556475)\r\n\r\nNot sure if contents needs to be write but I see in the CI that your pipeline pushes up to GitHub. Pull request read is for your change log step which appears to read pull requests.\r\n\r\n- [ ] Your code changes are well-documented.\r\n- [ ] You have tested your changes.\r\n- [ ] You have updated any relevant documentation.\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/3426",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | b02888a2132053c6f8d4d279ef2a65f4bd0f4308 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/66258b670066320008d630cc |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3426--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3426--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTM0MjYtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.UjudgqAx0EZxqfNY4gwxxxYBrMM1lVAiuv0F9aT07yA)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "Thanks! Tacked on some additional housekeeping - updating some actions to the latest versions."
        ]
      },
      {
        "pr_number": 3424,
        "title": "Zod v3.23",
        "body": "Publishes v3.23.0\r\n\r\n\r\ncc @dankochetov @samchungy @StefanTerdell @agalabov @anatine @ecyrbe",
        "html_url": "https://github.com/colinhacks/zod/pull/3424",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | ade1d7d3a3b7d378aa7bfcaca108b4e8cf3fdd97 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/662448f5263fd9000752625a |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3424--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3424--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTM0MjQtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.FyqXjhEmZmvR4M_tbNKNlWvDPWpse7954BK4V5-odhU)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "Not sure if you noticed but I think I spotted a little mistake in your change log by the way. \r\n\r\n```ts\r\nconst schema = z.discriminatedUnion(\"type\", [\r\n  z.object({ type: z.literal(\"A\").optional(), value: z.number() }),\r\n  z.object({ type: z.literal(\"B\").nullable(), value: z.string() }),\r\n  z.object({ type: z.literal(\"C\").readonly(), value: z.boolean() }),\r\n  z.object({ type: z.literal(\"D\").readonly(), value: z.boolean() }),\r\n  z.object({ type: z.literal(\"E\").catch(\"E\"), value: z.unknown() }),\r\n]);\r\n```\r\n\r\nI think D is meant to be a branded example?"
        ]
      }
    ],
    "v3.23.0-beta.0": [
      {
        "pr_number": 2949,
        "title": "chore: add pastel package to ecosystem",
        "body": "Closes https://github.com/colinhacks/zod/issues/2948",
        "html_url": "https://github.com/colinhacks/zod/pull/2949",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 99b64569896d2f3c8679c63f720f499296fa3c57 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/654c5c087fa51d00087aa016 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2949--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2949--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI5NDktLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.PRdzoVTorisUexRE5wK5ZJ-Ka7xspaN0FILid55NdRo)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 2955,
        "title": "added required styles. ",
        "body": "## Fixed Documentation Issue #2932\r\n\r\n### Changes Made\r\nAdded the necessary styles to address the issue reported in #2932. Extensive testing has been performed to ensure the changes work seamlessly.\r\n\r\n### Testing\r\nVerified the changes on various devices and screen sizes to confirm responsiveness. Ensured that the styles do not adversely affect other components or layouts.\r\n\r\n### Impact\r\nThese changes apply to the entire page body structure. The goal is to enhance the overall user experience and readability, especially on larger screens.\r\n\r\n### Additional Notes\r\nPlease review the modifications, and feel free to provide any feedback or suggest further improvements. I'm committed to addressing any concerns promptly.\r\n\r\nCloses #2932\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/2955",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 02c24c005b48f2dd0eb31dd45bded9b6f210c4d0 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/654fc1dce7f8e400096ad2b6 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2955--guileless-rolypoly-866f8a.netlify.app/](https://deploy-preview-2955--guileless-rolypoly-866f8a.netlify.app/) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI5NTUtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.tUpgPpIL-QZcjQQ3dTDdXzJx_8U4sQkhd2Eixz7B4LA)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 2988,
        "title": "Feature/better chinese translate",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/2988",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 5fac450d0bac06baddf78105b04936ca3c529c8d |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/65603b8289fa760008b73eee |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2988--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2988--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI5ODgtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.fdyMEIN3O-nea12DFikT6YbnPalr89GP3nJB6OKI9j4)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "cc @colinhacks ",
          "Thank you!!"
        ]
      },
      {
        "pr_number": 3003,
        "title": "Fix z.instanceof example",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/3003",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 66a3998c632bbc6f994f925d307eb89294ec89b6 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/65674bf9a8037f000845b4b3 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3003--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3003--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTMwMDMtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.HYQw6JT0aqT-GY9muFTQSs_DxzuteEqEBToW-WSVgow)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 3044,
        "title": "Add documentation to Zod enum exclude/extract functions",
        "body": "Fixes #3007 ",
        "html_url": "https://github.com/colinhacks/zod/pull/3044",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | ebabe3aad8f801e8cf68c5da06e29c957a5ea8a4 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/65bd852c0269280008033ffb |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3044--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3044--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTMwNDQtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.EHGYX2vCe4e05zMwN8KZ9jyLoIUvVJHSCJjHgrK_peg)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "@MichaelDeBoey Thanks for approving. When will it be merged to master? How often do you release a new version?",
          "Fantastic, thanks!"
        ]
      },
      {
        "pr_number": 3067,
        "title": "Add docs for coercing nullish values",
        "body": "While the `pipe()` documentation contains a section on how to fix issues with nullish values in `coerce()`. The `coerce()` documentation does not mention that there are issues. This was a pitfall for us. Thus, I'd like to have the nullish value edge cases covered in the `coerce()` section.\r\n\r\nUnfortunately, I do not have the language skills to update the Chinese documentation accordingly.",
        "html_url": "https://github.com/colinhacks/zod/pull/3067",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | b869f2cab4a5a3798e7e12014b99e75a2c05bd14 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/65bd89fa31afa90008a36974 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3067--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3067--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTMwNjctLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.k_9asCKyuvWxLB4PWsVeTztPLH7DwwT6SpQRvgwiJfA)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "Thanks, this is worth clarifying."
        ]
      },
      {
        "pr_number": 3113,
        "title": "Adds `zod-dev` utility to eco-system section",
        "body": "Kept alphabetical ordering.\r\n\r\n![image](https://github.com/colinhacks/zod/assets/14258328/24539c5b-5a89-4df6-b54a-19db0dfec575)\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/3113",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 3409cd985431b63234c184e254cc5ea727fd90ad |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/65bd8e09fbad170009324278 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3113--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3113--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTMxMTMtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.y0E_jtrlmpEy5ZVJg1ixdctE5B0a9yuR8li4amnCBro)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 3134,
        "title": "Add zhttp library to docs",
        "body": "Full disclamer: I'm the maintainer of `zhttp`.\r\n\r\nIt's a very flexible, typesafe OpenAPI compatible http library. It uses Zod for validation, and for endpoint input and response typing.",
        "html_url": "https://github.com/colinhacks/zod/pull/3134",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | b8d51cd51d3c21b28b8f30751d9d57ae1a313937 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/65a27661077ecd0008834c89 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3134--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3134--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTMxMzQtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.eo-DAwxyw9xBdATd1MvE2D4tG0OhOR1qkB-XEF8PBew)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 3181,
        "title": "fixed Readme typo in NaNs example",
        "body": "- ### was reading through docs and saw the typo in this example.\r\n\r\n    - see the \"invalid_type_error\" key-value pair below\r\n\r\n![Screenshot 2024-01-24 at 11 54 53](https://github.com/colinhacks/zod/assets/116172031/cf3ab886-66c7-4892-9d6e-97beff0c0516)\r\n\r\n- changed to :\r\n     - ### \"isNaN must be 'not a number'\"",
        "html_url": "https://github.com/colinhacks/zod/pull/3181",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 2577e71cd6854b15d2611f192bd9a31cfa4585ea |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/65b7fc333a0fea0008f35e8d |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3181--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3181--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTMxODEtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.HglUYSf0Z2hvSESKCTyUSDpySCoM3kCnrNzbAapCkqM)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "Well, I now understand what it meant.\r\nis Nan must be not a number.\r\nI see why I got confused.\r\nI'll fix that right a way.",
          "Can't remember why I used NaN as an example for these lol. Guess I was feeling troll-y that day. Your change makes it a bit clearer, thanks.",
          "thank you too"
        ]
      },
      {
        "pr_number": 3200,
        "title": "adds zod-config library to the ecosystem",
        "body": "\r\n\r\nIntroducing `zod-config`: load configuration variables from multiple sources with flexible adapters, ensuring type safety with Zod.\r\n\r\nLinks:\r\n- https://github.com/alexmarqs/zod-config \r\n- https://www.npmjs.com/package/zod-config\r\n\r\nMain features:\r\n- Tiny. Zod Config is a tiny library with no dependencies, tree-shaking friendly;\r\n- Flexible. Combine multiple adapters to load the configuration from different sources. We deeply merge the configuration from different sources, following the order of the adapters provided; Create your own adapters easily; Use the callback functions to handle errors and success due to the async nature of the adapters;\r\n- Easy to use. Zod Config is designed to be easy to use, with a simple API;\r\n\r\ncc @colinhacks \ud83d\ude4f \ud83d\ude80 ",
        "html_url": "https://github.com/colinhacks/zod/pull/3200",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | ac1ea88f518710e1e6ffaeb5aaa4feaac24c8421 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/65b8e9178300880008ac668c |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3200--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3200--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTMyMDAtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.SXNBsquLoAfa0IcKTgbhsQ9njYJl6bcQr8cign6iZC4)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 3214,
        "title": "Add Remotion as Bronze sponsor",
        "body": "We love Zod!\r\nIt powers the ability to define any schema and then visually edit the props in our sidebar ([example](https://watercolor-map.vercel.app)).\r\n\r\nWe barely have any other dependencies, but Zod is just perfect and think is gonna be useful forever, no matter how many hypecycles we go through. Thanks for making this!\r\n\r\n![image](https://github.com/colinhacks/zod/assets/1629785/d85fef34-849e-4827-93f0-174e06666270)\r\n\r\nIf you don't mind, we'll add ourselves to the list of sponsors, been one since April.\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/3214",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | c857d315316a7f4382ca651d2964706b9e3e9136 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/65c0e69f57022c0008f61de8 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3214--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3214--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTMyMTQtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.jM3OSqc2_Wlvb0a1zcLjsHvehUk8J3qYvpDAG8T3HFA)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "Oh no! Sorry Jonny, this slipped through the cracks. Thank you for your sponsorship \ud83d\ude4f",
          "Thanks a lot \ud83d\ude03 No worries, I know you've been busy making awesome stuff \ud83d\ude4c\ud83c\udffc"
        ]
      },
      {
        "pr_number": 3178,
        "title": "feature: allow falsy error message",
        "body": "Resolves #3101\r\n\r\nAllows setting falsy error messages on validation.\r\n\r\n```ts\r\n  const schema = z.string().max(1, { message: \"\" }).parse(\"aaaa\")\r\n  // returns error { message: \"\" }\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/3178",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 5407660e897a328cc546af13a369afee547e5bba |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/65b080afd25b870009ccafb7 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3178--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3178--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTMxNzgtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.3VNpHuy_uvUkzkWVNVXmkuxH1CW5O2MNSZGnAjzyU8A)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "Accidentally merged this with a `test.only` left in there...whoops. Keep an eye out for that in the future."
        ]
      },
      {
        "pr_number": 3240,
        "title": "Bugfix: Enum.extract/exclude should not remove error mapping",
        "body": "When calling .extract/exclude we should retain the original RawCreateParams passed to the enum definition. We also allow passing new RawCreateParams if that's necessary. This solves issue #3225.",
        "html_url": "https://github.com/colinhacks/zod/pull/3240",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 39655bee4857068c1c9f71756b916fd2f353c215 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/65cd14631e400b0008c80484 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3240--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3240--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTMyNDAtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.F-OIOAJ4ssye-EZTFosIw3nQ26O9aoXB7_Ily0SmFbk)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "Agreed, love this. Thanks!"
        ]
      },
      {
        "pr_number": 3238,
        "title": "docs: update link and description of conform integration",
        "body": "As I was browsing through the documentation I found that the conform link was out of date (404).",
        "html_url": "https://github.com/colinhacks/zod/pull/3238",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 293ca86180e4d30d8a8e07d80a3172707fb26b68 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/65cd5d5b6b495a00085c1e9e |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3238--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3238--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTMyMzgtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.DvC1m9XPBqFBgwuKTzwRr5D91Ia6GuWB7B_44xKq6Do)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "Thanks!"
        ]
      },
      {
        "pr_number": 3278,
        "title": "Added latest stable Node and TypeScript versions to test matrix for up-to-date testing.",
        "body": "Added Node 20 and TypeScript 5.3\r\n```yaml\r\n      matrix:\r\n        node: [\"18\", \"20\"]\r\n        typescript: [\"4.5\", \"4.6\", \"4.7\", \"4.8\", \"4.9\", \"5.0\", \"5.3\"]\r\n```\r\n\r\nCloses #3276 \r\nCloses #3277 ",
        "html_url": "https://github.com/colinhacks/zod/pull/3278",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 66c778c969c035de3c3e04eb2eadace13fce9e6f |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/65ddbb37df41a50008207b28 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3278--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3278--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTMyNzgtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.H9U764TUSBY3xahc3SeKNhJrkms_QEoiHZedJ1Kui6U)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 3247,
        "title": "Add types to `ZodFirstPartySchemaTypes`",
        "body": "Fixes #3246\r\n\r\nSome first party schema types were missing from the union. This pull-request adds them, along with a test that tries to keep the union and ambient type declaration in sync.",
        "html_url": "https://github.com/colinhacks/zod/pull/3247",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | d22f3422f81fad1d0c2819056827366717a7dad0 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/65cf5b46af5d9300089735c2 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3247--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3247--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTMyNDctLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.FZUJouHDXylFo5Tm81V0aqIjQA0WhOcOkhGVcUa_5n0)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "This has landed in Zod 3.23. \r\n\r\nhttps://github.com/colinhacks/zod/releases/tag/v3.23.0"
        ]
      },
      {
        "pr_number": 3317,
        "title": "Update README.md",
        "body": "when the string is empty it will return false \r\n\r\nz.coerce.boolean().parse(\"\"); // => false",
        "html_url": "https://github.com/colinhacks/zod/pull/3317",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 9728cb54e7dda72d975353891ef00392168589a3 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/65ec8749321fea0008f5179f |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3317--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3317--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTMzMTctLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.0TELQGgjidgKms9LdxRZprEFXHyRFhWzU1n1sVcpw4A)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 3301,
        "title": "fix: make `input` of `.required()` readonly",
        "body": "More info: https://github.com/trpc/trpc/issues/5538\r\n\r\nUnsure if this is a legit fix. I could see this working as designed.\r\n\r\ncc @tkdodo @PeterMK85 ",
        "html_url": "https://github.com/colinhacks/zod/pull/3301",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | c6cc6651f180a09f511d2d1b28396b519dffcdde |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/65e777829d78e80008853047 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3301--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3301--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTMzMDEtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.CyfK3wawtVBfculBxpXrLgf7xGNqB_IA1FyBKddkhm4)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "Yep fix confirmed, in the use case seems solved",
          "This has landed in Zod 3.23.\r\n\r\nhttps://github.com/colinhacks/zod/releases/tag/v3.23.0"
        ]
      },
      {
        "pr_number": 3321,
        "title": "feat: overhaul generics section of readme to include more details on z.ZodTypeAny usage",
        "body": "This pull request enhances the documentation for writing generic functions that accept Zod schemas as parameters. The changes address common pitfalls and provide best practices to ensure proper type inference and maintainability.\r\n\r\nKey changes:\r\n\r\n1. Elaborates the limitations of using `z.ZodType<T>` or `z.ZodSchema<T>` as the type of the input schema.\r\n2. Addresses the issue of parsed data being incorrectly inferred as `any` when using `z.ZodTypeAny`. Provides a solution by leveraging `z.infer<T>` to properly infer the parsed type based on the passed-in schema.\r\n3. Includes code examples to illustrate the limitations of the previous approach and showcases the benefits of using `z.ZodTypeAny`.\r\n\r\nPlease review the changes and provide any feedback or suggestions for further improvement.",
        "html_url": "https://github.com/colinhacks/zod/pull/3321",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 48b4f05b925d22eb12a336d9981175d327e31e52 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/65f37977c1837a000812665b |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3321--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3321--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTMzMjEtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.lYNvuZOmnw8_BlZZ6CydxNy9-BaUA8Y1VXmYQvsGDd8)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 3336,
        "title": "Fix small typos",
        "body": "Fix two small mistakes in README.md:\r\n\r\n* Grammar: Change \"it's\" to \"its\" in one place\r\n* Add some spaces before a \"^^^^\" to point to what it is supposed to point to",
        "html_url": "https://github.com/colinhacks/zod/pull/3336",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 43aac9589adc5a2e286bd10bb40b24db78717830 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/65f9f7ed725a050009c41634 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3336--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3336--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTMzMzYtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.HYYV7SIub3-pEFhFru6FEBu-bUaCBAHz5CrW-aCmfU4)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "Thank you!"
        ]
      },
      {
        "pr_number": 3295,
        "title": "add never props to safe parse return types",
        "body": "Possible improvement to safe parse return types as discussed in #3266.\r\n\r\nThe `?: never` properties added to the type involve no runtime overhead and support all existing patterns. However, as seen in the tests they avoid casting or intermediate variables when we attempt to access properties on the union `SafeParseReturnType`, since now both branches have the property we attempt to access. When accessing `SafeParseReturnType['data']`, we get `Output | undefined`, which is accurate to the runtime behavior. If we are in a context where we've already checked `success`, we get just `Output` as expected.",
        "html_url": "https://github.com/colinhacks/zod/pull/3295",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | d6074be2c1aaeab1b04669c483c21e62596e3c6f |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/65e34062f9690f0008bf86c1 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3295--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3295--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTMyOTUtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.4mK1i35cuOblPQ_Hcuj_dQBoudZonA9gPyuD9H1gpdo)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "@colinhacks does this seem like something we could add? Happy to make additional changes if necessary, but the basic functionality comes up fairly frequently when using zod in an environment where there needs to be a \"default\" flow (eg, react components handling network responses).",
          "> @colinhacks does this seem like something we could add? Happy to make additional changes if necessary, but the basic functionality comes up fairly frequently when using zod in an environment where there needs to be a \"default\" flow (eg, react components handling network responses).\r\n\r\n@JacobWeisenburger ",
          "Seems interesting, but I am not in a position to make any decisions about these types of things. @colinhacks is the owner and would be the person to approve or not.",
          "Thanks @schicks, this is an excellent idea.",
          "This has landed in Zod 3.23.\r\n\r\nhttps://github.com/colinhacks/zod/releases/tag/v3.23.0"
        ]
      },
      {
        "pr_number": 2912,
        "title": "Reporting errors of the preprocess that is the second property of object",
        "body": "Fix https://github.com/colinhacks/zod/issues/2904\r\n\r\nThis behavior was introduced in #2426. `ctx.common.issues` includes the errors of previous properties, so that they affects the status of preprocess.",
        "html_url": "https://github.com/colinhacks/zod/pull/2912",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 152bfdb796ff89594a0177bd4697785f19c3e817 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/65fc90d2ad067c0008589605 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2912--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2912--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI5MTItLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.UAeJbwc5rudJX6KVqYS2wG8CpIbHcFL0BE16NpMRMfM)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "I'm not confident in my understanding of the whole codebase and the change in #2426.\r\n\r\n@Pingviinituutti Could you take a look at this PR?",
          "Looks good to me, seems the simple fix is enough to :)\r\n\r\nAre the current test cases enough to ensure it works as intended?",
          "@Pingviinituutti Thanks!\r\n\r\n> Are the current test cases enough to ensure it works as intended?\r\n\r\nThe current test cases are fail on master branch, so I think it's minimum but enough.",
          "Is there any movement on this? This is causing major issues for us.",
          "@Austin-Love This is ready and waiting for getting review",
          "Great stuff @yukukotani and apologies to everyone who waited so long for this.\r\n\r\nI made some fairly major changes to `ctx.addIssue` in `preprocess`, so it behaved identically to `.superRefine` and `.transform`. Namely, all issues are considered *non-fatal* \u2014 validation will continue even if `.addIssue` was called during the `preprocess`. This behavior can be modified by indicating `fatal: true` in `ctx.addIssue`:\r\n\r\n```ts\r\n    const schema = z.preprocess((data, ctx) => {\r\n      ctx.addIssue({\r\n        code: \"custom\",\r\n        message: `bad thing happened`,\r\n        fatal: true\r\n      });\r\n      return data;\r\n    }, z.string())\r\n```"
        ]
      },
      {
        "pr_number": 3338,
        "title": "docs: update Chinese docs and correct some of the typos",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/3338",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 91f3059569f4a5dd9882c5fb456d4d1ec86755d0 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/65fa4b78f39a7c0007dea346 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3338--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3338--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTMzMzgtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.cWQtkuAcJgvNDOdLABRSd0Zzz8yHVngmlzFbrYDZ85k)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "Thank you!"
        ]
      },
      {
        "pr_number": 3346,
        "title": "Support more elements in DU",
        "body": "Supports the following as discriminator keys:\r\n\r\n- ZodOptional\r\n- ZodNullable\r\n- ZodReadonly\r\n- ZodBranded\r\n- ZodCatch\r\n\r\nAlso fixes a bug with `z.nativeEnum` as a discriminator key.",
        "html_url": "https://github.com/colinhacks/zod/pull/3346",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 854ff2a0aa992590a0bc29f4f387879ecf49ee6b |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/65fcb5ed13150c0008dabbea |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3346--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3346--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTMzNDYtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.tkS05AmrUlhH7TiQePCJxVnCDeP-mIaOCSu3Oef9jPU)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "This has landed in Zod 3.23.\r\n\r\nhttps://github.com/colinhacks/zod/releases/tag/v3.23.0"
        ]
      },
      {
        "pr_number": 3352,
        "title": "Improve `addQuestionMarks`, fix #2184",
        "body": "Okay, this is a long time coming. Getting the inferred types to work as expected in generic contexts is quite annoying (see `generics.test.ts` for examples). Some changes I made to that effect seem to interact unhappily with the very specific case described in #2184 - a `ZodObject` schema, with a key corresponding to a union, being cast to `ZodType`.\r\n\r\nThe change now makes all my tests happy, including assignability in generic contexts and the newly added XOR test.\r\n\r\nI'm going to ship this in the next minor since I haven't found a scenario where this breaks or even changes the inferred type signature in non-generic contexts. In generic contexts, it seems to strictly improve assignability characteristics without a big performance hit in the compiler.\r\n\r\ncc @chrishoermann",
        "html_url": "https://github.com/colinhacks/zod/pull/3352",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 14b2216429b38f3a8e918ef54988b3e2c37afdbd |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/65fe0ab85c8b580008feaec1 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3352--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3352--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTMzNTItLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.-tw5F68Nn0dPNdstys79OVL3mR7SqqpCZNa_M72iFFY)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "This has landed in Zod 3.23.\r\n\r\nhttps://github.com/colinhacks/zod/releases/tag/v3.23.0"
        ]
      },
      {
        "pr_number": 3371,
        "title": "docs: improve chinese readme",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/3371",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 9234dfb4d10d02f5c32d7434f89d00945fa3f27e |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/660d6b765e05400008a2b0bb |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3371--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3371--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTMzNzEtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.53_1LF7fgjsuAF_y6BNopG7__PTMkggvdBHPGdmf6F4)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "@colinhacks \r\nI found the Chinese document is a lot behind the English one, let me know if we need to catch up. I'm willing to take on that.",
          "Thank you!"
        ]
      },
      {
        "pr_number": 3063,
        "title": "fix for njs",
        "body": "This trivial fix will allow for transpilating to njs.\r\nAFAICS tests pass.\r\nPlease consider applying.\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/3063",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 98e5df69cf435bbeab74a54098dcdffa13da92a9 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/657ded0d2cf0a40008234e92 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3063--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3063--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTMwNjMtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.19po1Q0JfLEp7VPGqEXwMqc7UkMvDqfMAGld8u8TmD4)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 3038,
        "title": "only look in `src` for `bun test`",
        "body": "Previously, `yarn run test:bun` would fail if we already built for `deno`, since it does not respect the filter in `jest.config.json`, failing with errors like:\r\n```\r\ndeno/lib/__tests__/record.test.ts:\r\nerror: FileNotFound reading \"https://deno.land/x/expect@v0.2.6/mod.ts\"\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/3038",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 29557399bd714e23786b5b92453d96eb3273d81e |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/65751dab9664a3000886a629 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3038--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3038--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTMwMzgtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.HIR3KVvOflKgvYApoyb3Bb10Vw6cl8kSqwaDo__T6gA)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1766,
        "title": "add `ZodString.date()` & `ZodString.time()`.",
        "body": "Hey \ud83d\udc4b \r\n\r\nThis PR resolves #1676, as suggested by @colinhacks @ [comment](https://github.com/colinhacks/zod/issues/1676#issuecomment-1347144589).\r\n\r\n- [x] implement `ZodString.date()`.\r\n- [x] implement `ZodString.time()`.\r\n- [x] unit tests.\r\n- [x] documentation.",
        "html_url": "https://github.com/colinhacks/zod/pull/1766",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 5328a974f23ab24a2bf5e1eac7496a9c3399d5d7 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/65691e0ae916460008dbc2dd |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1766--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1766--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE3NjYtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.ON6pYydRxmPmLf8JnynxOsq4bQC3c1SpJsM9mmCY4ug)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "@maxArturo Thanks again for the thorough review and great feedback! \ud83d\udcaa ",
          "Hi @igalklebanov, there seems to be just a linting/prettier error preventing the merge :) Would be amazing if this could get in soon!",
          ">as suggested by @colinhacks\r\n\r\n\ud83d\ude22 \r\n\r\n(Although, I guess he did suggest it, I just created the issue about the general idea ) ",
          "> > as suggested by @colinhacks\r\n> \r\n> \ud83d\ude22\r\n> \r\n> (Although, I guess he did suggest it, I just created the issue about the general idea )\r\n\r\nDid I do anything wrong? \ud83e\udd37 ",
          "Any updates on when this will be merged?",
          "Would be awesome to have this!! ",
          "Hello, any updates on when this will be merged?",
          "This would be a huge win, anything blocking or that needs assistance? Happy to dive in and help get it merged",
          "@colinhacks, can this merge? We'd also like to use it as soon as it's available. \ud83d\ude04",
          "@colinhacks, anything we can do to help this merge?",
          "Thanks! Glorious PR.",
          "This has landed in Zod 3.23.\r\n\r\nhttps://github.com/colinhacks/zod/releases/tag/v3.23.0"
        ]
      },
      {
        "pr_number": 3255,
        "title": "Restrict .pick()/.omit() mask type to only known properties",
        "body": "### Current\r\n\r\nBoth the methods .pick and .omit accept properties that don't exist in the schema.\r\n``` \r\nconst schema = z.object({\r\n  existedProperty: z.string(),\r\n});\r\n\r\nconst pick = schema.pick({\r\n  existedProperty: true,\r\n  NOT_existed_property: true, // there is no TypeScript error\r\n});\r\n```\r\n\r\n### Fixed\r\n\r\nBoth the methods .pick and .omit now only accept known properties.\r\n``` \r\nconst schema = z.object({\r\n  existedProperty: z.string(),\r\n});\r\n\r\nconst pick = schema.pick({\r\n  existedProperty: true,\r\n  NOT_existed_property: true, // there is a TypeScript error\r\n});\r\n```\r\n\r\nresolves https://github.com/colinhacks/zod/issues/895",
        "html_url": "https://github.com/colinhacks/zod/pull/3255",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 8d364f029614dec32c1852d0bdabbebee8d4bb58 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/65d31b03a96a09000805d377 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3255--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3255--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTMyNTUtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.9Xiz7x0Bt9nK7FmtbDGvn8sg2dAcIeJs6GnujNKpoNM)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "Thank you! Fascinating that this works...",
          "This has landed in Zod 3.23.\r\n\r\nhttps://github.com/colinhacks/zod/releases/tag/v3.23.0"
        ]
      },
      {
        "pr_number": 2364,
        "title": "Adds support for Nano ID",
        "body": "This adds support for [Nano ID](https://www.npmjs.com/package/nanoid), a unique string/id standard. Nano ID is great because it's url friendly, a fixed length, and significantly shorter than UUIDs.\r\n\r\nNote: The Nano ID package does allow for a custom character dictionary and id length, however the regex in this PR only matches the default Nano ID specification.",
        "html_url": "https://github.com/colinhacks/zod/pull/2364",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | f75a9c405a6ec6a47883e25716efb87dc8bd088b |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/6614b55d2b868300080605fc |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2364--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2364--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTIzNjQtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.jvDXuUqAW-kUjuA2FtLLywKXgcyltDfJNoO_KDBsYBk)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n",
          "Hey @colinhacks,\r\nSorry to bother you but would you mind reviewing this PR? It adds support for a widely adopted ID standard and is full implemented with tests and everything. Totally understand if you don't believe support for nanoid is worth including in zod but either way it would be nice to close the PR, merged or not. Thank you for your time and hard work on this library!",
          "Would love to see this merged. Considering NanoId has now [even surpassed CUID in NPM usage](https://npmtrends.com/cuid-vs-nanoid-vs-uuid).",
          "This has landed in Zod 3.23.\r\n\r\nhttps://github.com/colinhacks/zod/releases/tag/v3.23.0"
        ]
      },
      {
        "pr_number": 2338,
        "title": "Make EnumValues generic",
        "body": "Allow statically validate enum values against external type. Fix #2280.",
        "html_url": "https://github.com/colinhacks/zod/pull/2338",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | cafa906d073bc82fc5dfe3934cfacb927bc72b1b |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/6614b6b9108afc0008b8b94c |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2338--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2338--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTIzMzgtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.ERMAOVbYUCv0nm7kXN7lCfw1w010jbIFWCwiUfzDGtg)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n",
          "\ud83d\ude44",
          "Please merge this, `readonly [string, ...string[]]` is an absurd way of typing",
          "can we move forward with this? are there any objections?"
        ]
      },
      {
        "pr_number": 3388,
        "title": "Add zod-accelerator to ecosystem utilities",
        "body": "https://github.com/duplojs/duplojs-zod-accelerator\r\n\r\n![image](https://github.com/colinhacks/zod/assets/2261077/f2d5aa3f-24ec-4a67-bc4f-5bdedd7c2819)\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/3388",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | cbce13f0dbec95df9a7b09b83b92d9b13759b55f |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/66132608312092000825071f |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3388--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3388--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTMzODgtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.gAiCFgCRxKJmkq5WNhEVkPy5hdRR2vrnccm57_bSn4k)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 2522,
        "title": "fix: support local time if no offset",
        "body": "See https://en.wikipedia.org/wiki/ISO_8601#Local_time_(unqualified)\r\n\r\nCloses #2385",
        "html_url": "https://github.com/colinhacks/zod/pull/2522",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 0d7b0fc5e552778629148f1359eb22e27550ba0b |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/66189d7be25e1400087ea5f4 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2522--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2522--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI1MjItLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.dERu2fegOXa544oYESQRjHuEdOg_4DNVjd5TP2EqwN0)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n",
          "@bchrobot Out of interest, why does the case where precision is 0 and offset is not required not make `Z` optional too?\r\n\r\nWhat is still outstanding to get this change reviewed?",
          "> @bchrobot Out of interest, why does the case where precision is 0 and offset is not required not make `Z` optional too?\n\nIs your question about `zod`'s current implementation? Or the ISO standard?\n\n> What is still outstanding to get this change reviewed?\n\nMy guess is difficulty getting tests to run/pass locally but it's been a little bit since I last worked on this. I can look later this week.",
          "> > @bchrobot Out of interest, why does the case where precision is 0 and offset is not required not make `Z` optional too?\r\n> \r\n> Is your question about `zod`'s current implementation? Or the ISO standard?\r\n\r\nSorry, I wanted to comment on the exact line but because it falls into a \"not changed\" area, I couldn't do that.\r\n\r\nI'm referring to [this code](https://github.com/colinhacks/zod/blob/5078c8ff72512788f44866c11a5862cb46f7fc37/src/types.ts#L586-L594). Which looks like it's part of the same case as `if (args.precision)` but just caters for a difference in the regex. I would have expected `Z` to be optional in this case too (at least when `args.offset` is false).\r\n\r\nI'm just curious if there is a reason it's not.\r\n\r\n> My guess is difficulty getting tests to run/pass locally but it's been a little bit since I last worked on this. I can look later this week.\r\n\r\nThat would be very much appreciated, thank you!",
          "This may be considered a breaking change in which case it could be hidden behind another configuration option ( `assumeLocal: true`, perhaps).",
          "I'd merge this if it was behind a `local: true` flag, in the same way that `offset: true` means \"allow offset\". \r\n\r\nIt's important that only `Z` datetimes are allowed unless otherwise specified. ",
          "This has landed in Zod 3.23.\r\n\r\nhttps://github.com/colinhacks/zod/releases/tag/v3.23.0",
          "Thank you for zod and this PR!\r\n\r\nThis should be documented, had to look into the source code to find this option. Short on time right now, but might find the opportunity soon\u2122"
        ]
      },
      {
        "pr_number": 3391,
        "title": "make `ZodString.date()`, `ZodString.time()`, and `ZodString.datetime()` only accept valid date and time",
        "body": "#1766 added `.date()` function but it uses a simple regex `\\d{4}-\\d{2}-\\d{2}`, which allows many invalid dates. similar behaviour happens for `.time()` and `.datetime()`.\r\n\r\nif we must use regex for date validation, then i propose a change that:\r\n- rejects invalid dates such as `2024-01-32` or `2024-13-01`\r\n- correctly handles 30th and 31st day based on the month\r\n- is still fairly readable, as far as regexes go\r\n\r\none caveat is that it always accepts 29 feb, but i think that's acceptable. it's an improvement over the existing code, where non-valid dates are accepted.\r\n\r\nyou can check some test cases here: https://regexr.com/7ulgo\r\n\r\ntodo: \r\n- [x] add test cases\r\n- [x] also validate time\r\n- [x] add test cases for time",
        "html_url": "https://github.com/colinhacks/zod/pull/3391",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 403535e4f2e74baae8ac5962e4963ed3a5bb69fb |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/6618a57031b37a0008886f0f |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3391--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3391--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTMzOTEtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.SiyCmedxg7dF81NLj8kiKqTtoncErK8FSPfB2QnnCBo)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "cc @igalklebanov @colinhacks since this hasn't been released yet, maybe we can do a quick patch before the release.",
          "I think this is a good idea, but it does introduce some inconsistency with `.datetime()`, which still doesn't enforce this. We should the datetime logic to do the same. Thoughts @igalklebanov? I'd be okay releasing that in a minor version, arguably it's a bugfix. \r\n\r\nAlso, your PR seems to have only updated the code in `deno/lib`? Just update `src` and `deno/lib` should get regenerated when you push. ",
          "Hey \ud83d\udc4b\r\n\r\nGood idea!\r\n\r\nAs @colinhacks said, all datelike stuff should be aligned.\r\n\r\n> This extra leap day occurs in each year that is a multiple of 4, except for years evenly divisible by 100 but not by 400\r\nhttps://en.wikipedia.org/wiki/Leap_year\r\n\r\nCould check `year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0)` for leap years when `xxxx-02-29`.",
          "`.datetime()` and `.date()` are using the same regex under the hood.\r\n\r\ni added a regex for valid time, moved the code to src dir, and updated the PR title to reflect all changes.",
          "Rebased onto the changes I made in #2522 ",
          "Thanks @szamanr! \ud83d\ude4c",
          "Why does it need to be a regex? Couldn't you check it easier with a Date instance or are there some problems in different runtimes? ",
          "> Why does it need to be a regex? Couldn't you check it easier with a Date instance or are there some problems in different runtimes?\r\n\r\n@Shumuu how would you achieve that? i've seen some implementations using a function that checked if `new Date(dateString).getTime()` is a number, but that doesn't work properly. for example:\r\n```\r\nnew Date(\"2000-02-31\").getTime() // should be invalid\r\n> 951955200000\r\n\r\nnew Date(\"2000-04-31\").getTime() // should be invalid\r\n> 957139200000\r\n```\r\n\r\nlet's say we used that - in that case, we would still have to use a regex first, to rule out all sorts of strings that `Date()` constructor accepts, e.g. \"123\".\r\n\r\neither way, i tend to not put trust in native Date, given that it has many issues. the best way to solve this would be to outsource the logic to a 3rd party library. e.g. date-fns has a function that would be perfect for this: `isMatch(dateString, \"yyyy-MM-dd\")`. but i noticed zod doesn't ship with any dependencies, so i assumed this is not accepted here.",
          "The way I solve it is creating a Date like this\r\n\r\n`new Date(\"2023-02-29\")` and then I check on the date instance if the day, the month and the year are equal to what I passed in. Creating an invalid Date like this will result in 2023-03-01. ",
          "There's a lot of other stuff to validate besides \"is this date valid\". Users can specify whether to allow timezone offsets, unqualified dates, sub-second precision, etc. So we're going to be doing regex validation regardless. We *could* use regex to check those things *then* instantiate a new `Date` to check date validity. I'll do some benchmarking to know which is faster.",
          "This has landed in Zod 3.23.\r\n\r\nhttps://github.com/colinhacks/zod/releases/tag/v3.23.0"
        ]
      },
      {
        "pr_number": 3385,
        "title": "Add java-to-zod in X to Zod section",
        "body": "New Maven plugin I have released",
        "html_url": "https://github.com/colinhacks/zod/pull/3385",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | b7032f1b5d2dff898aef50752ec93fa6283d4807 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/6611ea9dbeb1810008fcefb4 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3385--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3385--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTMzODUtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.PQJNtdyb7rWlHmk2i2df5HFA3y2K7kZFhswKqHBFF3E)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "Nice!\r\n\r\nI'll admit, I didn't know the \"J\" in POJO could stand for \"Java\" \ud83d\ude05"
        ]
      },
      {
        "pr_number": 2532,
        "title": "perf: avoid unnecessary error maps",
        "body": "Since `defaultErrorMap` and `getErrorMap()` may return the same one, leads to duplicate in `ZodErrorMap` array. And error mapping can be totally skipped if check message is provided.\r\n\r\nhttps://github.com/colinhacks/zod/blob/master/src/errors.ts#L4-L5\r\n```diff\r\nimport defaultErrorMap from \"./locales/en\";\r\nimport type { ZodErrorMap } from \"./ZodError\";\r\n\r\nlet overrideErrorMap = defaultErrorMap;\r\n+export { defaultErrorMap };\r\n\r\nexport function setErrorMap(map: ZodErrorMap) {\r\n  overrideErrorMap = map;\r\n}\r\n\r\n+export function getErrorMap() {\r\n  return overrideErrorMap;\r\n}\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/2532",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | d0e8a1324c744b0901d390190ffdd5b93b219233 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/6619dbb6ad5fb1000880bd67 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2532--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2532--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI1MzItLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.JOh7c3jac3WvFtlWVunnWLwcKlHzC3qsuYeQdCxAQmM)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "This solves my issue. Thank you! but it causes some other problems if there is no custom ErrorMap defined. Test examples:\r\n```typescript\r\ntest(\"too small error with custom error map and custom message\", () => {\r\n        try {\r\n            z.string().nonempty(\"nonempty\").parse(\"\", {\r\n                errorMap: () => {\r\n                    return {message: \"override\"}\r\n                }\r\n            })\r\n        } catch\r\n            (err) {\r\n            const zerr: z.ZodError = err as any;\r\n\r\n            expect(zerr.issues[0].code).toEqual(z.ZodIssueCode.too_small);\r\n            expect(zerr.issues[0].message).toEqual(`override`);\r\n        }\r\n    }\r\n);\r\n// this test fails\r\ntest(\"too small error with no custom error map and custom message\", () => {\r\n        try {\r\n            z.string().nonempty(\"nonempty\").parse(\"\")\r\n        } catch\r\n            (err) {\r\n            const zerr: z.ZodError = err as any;\r\n\r\n            expect(zerr.issues[0].code).toEqual(z.ZodIssueCode.too_small);\r\n            expect(zerr.issues[0].message).toEqual(`nonempty`);\r\n        }\r\n    }\r\n);\r\n``` \r\n\r\nIt also breaks some test in the error.test.ts file.",
          "@adamsujeta This PR is indent on performance only, it should be backward compatible.\r\n\r\nFor your test cases, they have different result on my local environment:\r\n> Nodejs v20.1.0\r\n  Zod 3.21.4\r\n```output\r\n \u276f src/zod-pr-2532.test.ts (2)\r\n   \u00d7 too small error with custom error map and custom message\r\n   \u2713 too small error with no custom error map and custom message\r\n\r\n\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af Failed Tests 1 \u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\r\n\r\n FAIL  src/zod-pr-2532.test.ts > too small error with custom error map and custom message\r\nAssertionError: expected 'nonempty' to deeply equal 'override'\r\n\r\n- Expected\r\n+ Received\r\n\r\n- nonempty\r\n+ override\r\n\r\n \u276f src/zod-pr-2532.test.ts:16:38\r\n     14| \r\n     15|       expect(zerr.issues[0].code).toEqual(z.ZodIssueCode.too_small)\r\n     16|       expect(zerr.issues[0].message).toEqual('override')\r\n       |                                      ^\r\n     17|   }\r\n     18| },\r\n\r\n\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af[1/1]\u23af\r\n\r\n Test Files  1 failed (1)\r\n      Tests  1 failed | 1 passed (2)\r\n```\r\n\r\nAnd the result is as expected. In your first test case, the provided error message `nonempty` has higher priority over any error maps. See https://github.com/colinhacks/zod/blob/master/src/helpers/parseUtil.ts#L31",
          "Yes you are right. I messed up in line 19 ` let errorMessage = issueData.message || \"\";` and on my machine initialized the variable with an empty string. Sorry for the confusion.\r\n\r\nEhhhh if this is the intended behavior, than for me it causes some issues because I wanted to translate everything in the error Map function and set only the keys to the translations in schema, but if it is so then I need to deal with it in another way. \r\n\r\nThank you for your help and sorry again.",
          "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n",
          "Thanks for the work on this @xuxucode! This is a great fix.\r\n\r\nZod's current approach to error maps is pretty dumb as you probably noticed. Big changes coming in Zod 4.",
          "This has landed in Zod 3.23.\r\n\r\nhttps://github.com/colinhacks/zod/releases/tag/v3.23.0"
        ]
      },
      {
        "pr_number": 3169,
        "title": "feature: add attribute message to enum validatiion",
        "body": "Resolves #3146\r\n\r\nMake it possible to call enum validation with a custom message using `message` attribute:\r\n\r\n```ts\r\n  z.enum(['aaa', 'bbb', 'ccc'], { message: 'custom error message' });\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/3169",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 1e29cea6580eed1c35e983fdd1978ccbc8bb91ab |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/65d443bf97921c0008ca5f4b |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3169--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3169--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTMxNjktLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.jI9ygv5eMFVdWQLNrP0E5Ias5HH5DPGCtYilaGfg59I)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "This has landed in Zod 3.23.\r\n\r\nhttps://github.com/colinhacks/zod/releases/tag/v3.23.0"
        ]
      },
      {
        "pr_number": 3251,
        "title": "Bugfix: z.record().parse should not filter out undefined values",
        "body": "When calling .parse on z.record( z.any() ) we should not filter out undefined values. Add the optional 'alwaysSet' to the z.record pairs before passing them to mergeObject to maintain undefined values.\r\n\r\nThis solves issue #3197",
        "html_url": "https://github.com/colinhacks/zod/pull/3251",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | ed9d10bf6b05c9d15d1f880a766425155fb1ecf8 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/65d01bad2e8906000824cd5e |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3251--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3251--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTMyNTEtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.7ogfm6twIM1teLc5ALuepGaJOrETh8BJDyZJQrzfqvU)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "Thanks! Great PR.\r\n",
          "This has landed in Zod 3.23.\r\n\r\nhttps://github.com/colinhacks/zod/releases/tag/v3.23.0"
        ]
      },
      {
        "pr_number": 2659,
        "title": "Use Set.has instead of Array.indexOf for enum comparison (perf improvement)",
        "body": "Improve zod's performance by using `Set.has` instead of `Array.indexOf` when checking for the presence of a value inside `ZodEnum` or `ZodNativeEnum`.\r\n\r\n`Array.indexOf` is especially problematic when passing multiple (e.g. 30+) values to an enum. This PR introduces a very simple change that turns an `O(n)` operation to `O(1)`.\r\n\r\n### Benchmarks\r\n\r\n#### Before this PR\r\n\r\n<img width=\"522\" alt=\"benchmark-results-latest-master\" src=\"https://github.com/colinhacks/zod/assets/1032064/974c8a44-53ce-4075-86db-b9c3a1caa0f7\">\r\n\r\n#### After this PR\r\n\r\n<img width=\"533\" alt=\"benchmark-results-using-set\" src=\"https://github.com/colinhacks/zod/assets/1032064/8557d80f-8f2a-43f0-a03c-c96adb940f2e\">\r\n\r\n### Conclusions\r\n\r\n- Using `Set.has` we were able to increase the performance of the `parse` method in `ZodEnum` and `ZodNativeEnum` by 20%.\r\n- The more the enum values the greater the benefit by using `Set` instead of `Array`.\r\n\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/2659",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | fd363f3960dd7ba977bc1fb88ce513d38543f80e |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/661ee2cb721c940008a08a04 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2659--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2659--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI2NTktLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.MuWnHmIIE-i0j7U61kReEUm-ZAesRf07e0UG6PktjIg)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "Thanks this is excellent! I switched to the `#cache` approach primarily to avoid including `valueSet` in the def. The def should be the minimum set of runtime information required to instantiate the schema, ideally with no redundancy. Thanks again!",
          "This has landed in Zod 3.23.\r\n\r\nhttps://github.com/colinhacks/zod/releases/tag/v3.23.0"
        ]
      },
      {
        "pr_number": 2889,
        "title": "[2888] fix emails with single quotes failing validation",
        "body": "Fixes #2888",
        "html_url": "https://github.com/colinhacks/zod/pull/2889",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 656d6f589f975a4f428e9742db7ff4fad4ce9be1 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/653261341227110008d32e40 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2889--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2889--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI4ODktLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.hgz7zm-k-T_EYP0IJ2ssDqqhw-jduINQvexOv99lZxU)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "@colinhacks Any thoughts on merging this?",
          "> Looks good. I copied this solution into my code that was failing on this problem, and it succeeded with your regex.\r\n\r\nThanks @kernwig. Any ideas on when we can expect this to be merged?",
          "No idea @Mansehej . I'm just a follow consumer of this library trying to bump this PR along so that the power(s) that be will notice it. :-) ",
          "it'll be great for this to be merged \ud83d\ude4f thanks for the good work!",
          "Thank you! Looking forward to this getting merged in",
          "Thanks, seems reasonable. ",
          "This has landed in Zod 3.23.\r\n\r\nhttps://github.com/colinhacks/zod/releases/tag/v3.23.0"
        ]
      },
      {
        "pr_number": 3286,
        "title": "Bugfix: Commas are incorrectly allowed in email regex.",
        "body": "In #2824, email regex changed, but it seems inadvertently allowed `,` which were previously not permitted in email. \r\n\r\n#### Email regex before #2824\r\n`/^([A-Z0-9_+-]+\\.?)*[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;`\r\n\r\n#### Email regex after #2824\r\n`/^(?!\\.)(?!.*\\.\\.)([A-Z0-9_+-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;`\r\n\r\nFor the latter part `[A-Z0-9_+-\\.]`, it probably wanted to add only `.` to `[A-Z0-9_+-]`.\r\nBut, the addition of `.` after the unescaped hyphen has caused it to be interpreted as a range from `+` to `.`.\r\nTherefore, `,` contained between `+` and `.` is now permitted.\r\n\r\nSo, fix this issue with escaping hyphens simply.",
        "html_url": "https://github.com/colinhacks/zod/pull/3286",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 40e72f9eaf576985f876d1afc2dbc22f73abc1ba |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/661f05dd2509bd0008bbcaef |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3286--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3286--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTMyODYtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.-JYwqP9Da6dXyzXNa5uuxROJox0BSYBmBGcRHTrATFs)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "Thank you! Fantastic PR, apologies for the delay on such a no-brainer PR. That accidental range issue could have been a lot worse lol.",
          "This has landed in Zod 3.23.\r\n\r\nhttps://github.com/colinhacks/zod/releases/tag/v3.23.0"
        ]
      },
      {
        "pr_number": 2961,
        "title": "Fix regex in cuid2 validation to be what cuid2 library expects",
        "body": "Closes #2960",
        "html_url": "https://github.com/colinhacks/zod/pull/2961",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | ea6977707960dd6e326504f725bf9029431a980f |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/65527a16f890600009ca5780 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2961--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2961--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI5NjEtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.Q-mQnL9XO9aa0l-kes8W4lkHm9lFq-jAupxy43GmlR0)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "This has landed in Zod 3.23.\r\n\r\nhttps://github.com/colinhacks/zod/releases/tag/v3.23.0"
        ]
      },
      {
        "pr_number": 3037,
        "title": "Make depcruise pass",
        "body": "Previously the sanity checks in `yarn run depcruise` would fail for two reasons:\r\n\r\n1. Benchmark scripts were mistakenly not marked as development-only and were using development dependencies\r\n2. Test code was referencing the `@jest/globals` package, which was an implicit requirement (via `jest`)\r\n\r\nNow this script should pass",
        "html_url": "https://github.com/colinhacks/zod/pull/3037",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | de7caabb544780665a69e4e3d993d35731ffeb93 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/657514bd8367880009be2e32 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3037--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3037--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTMwMzctLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.78U-qoRYhpnMfQraPIoifjFhUaujlB00l30HoUQT3GY)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 3047,
        "title": "Adds base64 string validation",
        "body": "Hello! This popped up in an [issue over at zod to json schema](https://github.com/StefanTerdell/zod-to-json-schema/issues/95). It feels pretty idiomatic and like something that could have been in Zod since day 1 IMHO, so here we are :)",
        "html_url": "https://github.com/colinhacks/zod/pull/3047",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 048d3ab2d7a9edaa84b3183d789f054af544bd25 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/661f118533685000081678aa |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3047--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3047--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTMwNDctLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.3f1uvzqWfsntlf0xVQEQYXRRa03qMYnk0URzq4yBNig)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "@colinhacks This is an issue for us at ThinkAlpha. Any chance this will be merged?",
          "Somebody?",
          "This has landed in Zod 3.23.\r\n\r\nhttps://github.com/colinhacks/zod/releases/tag/v3.23.0"
        ]
      },
      {
        "pr_number": 3265,
        "title": "feat: Add support for ISO-8601 Durations",
        "body": "https://en.wikipedia.org/wiki/ISO_8601#Durations\r\nAs an extension of the ISO standard, the format is also used in RFC 3339, XML Schema Part 2, TC39's Temporal proposal, and a format for JSON Schema strings since draft 2019-09.\r\n\r\n~~Does not allow for negative values.~~\r\n\r\nI believe this would close https://github.com/colinhacks/zod/issues/2725, however, it also referenced \"Periods\" which is how RFC 3339 (confusingly) refers to ISO 8601 Time Intervals and are not covered by this change. So I'll let @andoks decide if this covers their request fully.  ",
        "html_url": "https://github.com/colinhacks/zod/pull/3265",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 4d81e8c2e82a6498eb12903d5a5c2c33fbd9a101 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/6620600c88fa4300084fa3e0 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3265--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3265--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTMyNjUtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.D9oNh7bVBxZ62GZ-FUo_MmbYd7e5hIvhniWzHt5dsiU)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "Thanks for the feedback @andoks. I just pulled the regex used by Joi, and that was short-sighted. \r\nWith ISO 8601-2 on the books, it makes sense to add the full functionality.\r\nThe SO link you provided was a great resource. I've updated the regex and added more test cases. It now supports positive/negative prefixes for the whole input or individual components, and decimal values on the least significant component (allows full stop and commas per the spec). ",
          "> Thanks for the feedback @andoks. I just pulled the regex used by Joi, and that was short-sighted. With ISO 8601-2 on the books, it makes sense to add the full functionality. The SO link you provided was a great resource. I've updated the regex and added more test cases. It now supports positive/negative prefixes for the whole input or individual components, and decimal values on the least significant component (allows full stop and commas per the spec).\r\n\r\nThank you for implementing it!\r\n\r\nLooking at the test cases, everything I would need + more is now handled :smile: ",
          "As an additional thought:  can this end up conflicting with a possible future feature of supporting [js temporal](https://tc39.es/proposal-temporal/docs/duration.html) in the future in some way do you think?",
          "@andoks my understanding of the Temporal proposal for durations is that its string representations are based on ISO 8601 itself, not a variation e.i. the XML schema spec. Therefore if there is ever any conflict it would point to a bug in this regex."
        ]
      },
      {
        "pr_number": 3413,
        "title": "Faster ipv4 parsing",
        "body": "2x performance improvement\r\n\r\n![out](https://github.com/colinhacks/zod/assets/3084745/b70504d3-2707-4a36-adf9-290a6657c6fb)\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/3413",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | eaf9af0e5c081344639c9b5f4bca0cec131fa266 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/6620692e3f87620008f4a640 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3413--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3413--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTM0MTMtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ._EE9Wlfjqd3dKaqeRGgT1kj56F83yO6JHnelI85s19M)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "This has landed in Zod 3.23.\r\n\r\nhttps://github.com/colinhacks/zod/releases/tag/v3.23.0"
        ]
      },
      {
        "pr_number": 3397,
        "title": "docs: add `orval` to \"X to Zod\" ecosystems",
        "body": "First of all, thank you for creating and maintaining the library. I like this.\r\n\r\n`Orval` can automatically generate `zod` schema from `OpenAPI`\r\n\r\nhttps://orval.dev/guides/zod\r\n\r\nI am currently maintaining this library and would like to recommend it, so I added it to the ecosystem in `README` . If you like this PR, please incorporate it.",
        "html_url": "https://github.com/colinhacks/zod/pull/3397",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | c6967deb98c74fcfcadae9280ae70f7d414dc343 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/661bdf08b423c40008e80357 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-3397--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-3397--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTMzOTctLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.Zmk8B6xxFISHy7WwYVISsnvCYXJ6dQPOUgXR6zIcous)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._"
        ]
      }
    ],
    "v3.22.4": [
      {
        "pr_number": 2676,
        "title": "docs: remove obsolete text about readonly types",
        "body": "Readonly types were introduced in [Zod v3.22.0](https://github.com/colinhacks/zod/releases/tag/v3.22.0).",
        "html_url": "https://github.com/colinhacks/zod/pull/2676",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 372262f70c8b02e17cf01cf1a3ff5136d84bbeac |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/64e479139cdc120008921f4e |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2676--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2676--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI2NzYtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.7ppuq12rl2J5m-MdpPbq7F8qCOBYE_9GXTwtqXJ3uak)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 2673,
        "title": "clarify datetime format is ISO 8601",
        "body": "Small tweak to clarify docs for `string.datetime()`. current wording is\r\n\r\n> \"[defaults to UTC validation](https://github.com/colinhacks/zod/blob/1e23990bcdd33d1e81b31e40e77a031fcfd87ce1/README.md?plain=1#L763)\"\r\n\r\nhowever, zod actually isn't validating javascript UTC string format (the following will not succeed with `z.string().datetime()`) \u274c:\r\n```js\r\nconst utcDateTime = new Date().toUTCString(); // Mon, 21 Aug 2023 20:42:52 GMT\r\n```\r\n\r\nclarification to show that [it is expecting ISO 8601](https://github.com/colinhacks/zod/blob/1e23990bcdd33d1e81b31e40e77a031fcfd87ce1/deno/lib/types.ts#L581) with no UTC offset. ex \u2705:\r\n```js\r\nconst isoDateTime = new Date().toISOString(); // 2023-08-21T20:47:22.189Z\r\n```\r\n\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/2673",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 282004271410b33dee59ac6ae510558af856b8b2 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/64e3cdd3c531f50008ac4c75 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2673--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2673--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI2NzMtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.pFTTeAeE-TuNti_qXvvGLfgF951F5FDTTbBWnyxwR_Q)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "Thanks!"
        ]
      },
      {
        "pr_number": 2778,
        "title": "#2718 Updated Custom Schemas documentation example to use type narrowing",
        "body": "Hi,\r\n\r\nI'm interested in updating the Custom Schemas example in the documentation. The function type takes in an unknown, so the example casts the value to a string in order to operate on it with a RegExp\r\n\r\n```typescript\r\nconst px = z.custom<`${number}px`>((val) => {\r\n  return /^\\d+px$/.test(val as string);\r\n});\r\n```\r\n\r\nI want to propose using Type Narrowing. It's helped me catch errors from validating a non-expected type, and I believe it would help others as well as a good practice with interacting with the unknown type.\r\n\r\n```typescript\r\nconst px = z.custom<`${number}px`>((val) => {\r\n  return typeof val === \"string\" ? /^\\d+px$/.test(val) : false;\r\n});\r\n```\r\n\r\nThis is a PR for issue #2718 ",
        "html_url": "https://github.com/colinhacks/zod/pull/2778",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 5dc2b433c21a82afb8c79ecdbf559d805855bc14 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/650f333affe9460008b9ce94 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2778--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2778--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI3NzgtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.bAgQX8USp500CuR7z5xAHB-feRLA15-rJf9hAAzuQJk)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "Thanks @mitchgollub "
        ]
      },
      {
        "pr_number": 2485,
        "title": "docs: update ref to discriminated-unions",
        "body": "## Scope\r\nA developer girl should be able to follow the link in the readme to read about discriminated unions and be directed to the new improved documentation.\r\n\r\n## Work done\r\n- Followed original link which informed me of the new documentation. \r\n- Copy pasted new url\r\n- Opened this here PR\r\n\r\n## Steps to test\r\n- View old url (https://www.typescriptlang.org/docs/handbook/advanced-types.html#discriminated-unions) and notice the message.\r\n- Click the link and confirm new url is correct.\r\n\r\n\r\n## GIF tax\r\n![simsons](https://github.com/colinhacks/zod/assets/22392943/11f0de6f-6be6-41e8-9810-01599660f8fc)",
        "html_url": "https://github.com/colinhacks/zod/pull/2485",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | afe05bd3df709126204d2fc79f4bfadf8a397f21 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/647dd7436368dd0008f4c638 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2485--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2485--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI0ODUtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.jMCcQBSQOycMEwNOEMhvtkqAcvERPrs6ZSeeO-U3b74)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Is there something holding this back?",
          "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n",
          "what is the issue with this docs fix? "
        ]
      },
      {
        "pr_number": 2824,
        "title": "[2609] fix ReDoS vulnerability in email regex",
        "body": "Fixes #2609\r\n\r\nThe current regex used for email validation contains \"catastrophic backtracking\", specifically `([A-Z0-9_+-]+\\.?)*`. This gets evaluated inefficiently by JS, resulting in an exponential increase in execution time for *failed* matches.\r\n\r\nThis can be replicated easily - here's execution time against `^([A-Z0-9_+-]+\\.?)*[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$`\r\n\r\n| string | match | execution\r\n| ----- | ------ | ----------\r\n| aaaaaaaaaaaaaaaaaaaaaaa@test.c | false | 0.615s  |\r\n| aaaaaaaaaaaaaaaaaaaaaaaa@test.c | false | 1.165s  |\r\n| aaaaaaaaaaaaaaaaaaaaaaaaa@test.c | false | 2.280s  |\r\n| aaaaaaaaaaaaaaaaaaaaaaaaaa@test.c | false | 4.507s  |\r\n| aaaaaaaaaaaaaaaaaaaaaaaaaa@test.c | false | 8.964s  |\r\n| aaaaaaaaaaaaaaaaaaaaaaaaaaa@test.c | false | 18.018s  |\r\n| aaaaaaaaaaaaaaaaaaaaaaaaaaaa@test.c | false | \ud83d\udc80  |\r\n\r\nThis PR provides an alternative regex. Rather that matching on the `(aaaaa.)+` we instead do a negative lookahead for the presence of `..` or the email starting with a `.`. This approach isn't susceptible to ReDoS\r\n\r\nhere's execution time against `^(?!\\.)(?!.*\\.\\.)([A-Z0-9_+-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$`\r\n\r\n| regex | email | match | execution\r\n| ------ | ----- | ------ | ----------\r\n| aaaaaaaaaaaaaaaaaaaaaaa@test.c | false | 0.044s  |\r\n| aaaaaaaaaaaaaaaaaaaaaaaa@test.c | false | 0.046s  |\r\n| aaaaaaaaaaaaaaaaaaaaaaaaa@test.c | false | 0.044s  |\r\n| aaaaaaaaaaaaaaaaaaaaaaaaaa@test.c | false | 0.046s  |\r\n| aaaaaaaaaaaaaaaaaaaaaaaaaaa@test.c | false | 0.045s  |\r\n| aaaaaaaaaaaaaaaaaaaaaaaaaaaa@test.c | false | 0.045s  |\r\n| aaaaaaaaaaaaaaaaaaaaaaaaaaaaa@test.c | false | 0.044s  |",
        "html_url": "https://github.com/colinhacks/zod/pull/2824",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | b1f3cc0bddbd644ff3cc5d6b46575b0cde67d40d |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/6516e56b5e364f00087df9e1 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2824--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2824--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI4MjQtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.IX39a4xM6OksUorPjbjp8bebL6ZWKDZazJqTQf3xTeQ)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "I checked it on a popular ReDoS checker... it's completely safe!\r\n\r\n![Screenshot 2023-09-29 12 45 24 PM](https://github.com/colinhacks/zod/assets/95201376/c1599f5b-e16d-4596-91ae-3296958d0bda)\r\n",
          "Hey @colinhacks, could we please get a tiny patch release for this one \ud83d\ude47 \r\n\r\nhttps://security.snyk.io/vuln/SNYK-JS-ZOD-5925617",
          "Bump!",
          "Thanks @MacsDickinson this is massively appreciated\r\nLanded in Zod 3.22.3",
          "May I ask what speaks against using the HTML5 spec regex instead of a hand rolled one? \r\n\r\nAn old variant is even already in the source (commented out), and PR https://github.com/colinhacks/zod/pull/2157 even says:\r\n> Nice! I'd missed this. I think it makes sense and seems to be functionally equivalent to mine but with support for \"printable characters\" in the local part. I'm not convinced emails with those characters should be considered valid, **but I like the parity with browsers.**\r\n\r\nThe HTML5 spec regex is not vulnerable: https://stackoverflow.com/a/8829363.\r\n\r\nFrom the previous PR, I also want to mention someone mentioned emails like `O'Railey@domain.com` return `false` currently.",
          "Could you please backport it to 3.21.4?\r\nBecause currently our code does not work in 3.22.",
          "The email regex we plan to use for [Valibot](https://github.com/fabian-hiller/valibot/pull/180) is more accurate and twice as fast. If interested, I can provide more details.\r\n\r\n![screenshot](https://github.com/colinhacks/zod/assets/35291865/f59fa09b-101e-468d-8eb6-408183edaaad)\r\n\r\n1. Open this link: https://esbench.com/bench/6520e66d7ff73700a4deba40\r\n2. Navigate to `Results`\r\n3. Click `RUN BENCHMARK` button",
          "[Here](https://github.com/fabian-hiller/valibot/pull/180#issuecomment-1751630504) ist the final regex, we plan to use for Valibot.",
          "I opened https://github.com/colinhacks/zod/pull/2849 to add a redos check to eslint",
          "> Fixes #2609\r\n> \r\n> The current regex used for email validation contains \"catastrophic backtracking\", specifically `([A-Z0-9_+-]+\\.?)*`. This gets evaluated inefficiently by JS, resulting in an exponential increase in execution time for _failed_ matches.\r\n> \r\n> This can be replicated easily - here's execution time against `^([A-Z0-9_+-]+\\.?)*[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$`\r\n> \r\n> string\tmatch\texecution\r\n> [aaaaaaaaaaaaaaaaaaaaaaa@test.c](mailto:aaaaaaaaaaaaaaaaaaaaaaa@test.c)\tfalse\t0.615s\r\n> [aaaaaaaaaaaaaaaaaaaaaaaa@test.c](mailto:aaaaaaaaaaaaaaaaaaaaaaaa@test.c)\tfalse\t1.165s\r\n> [aaaaaaaaaaaaaaaaaaaaaaaaa@test.c](mailto:aaaaaaaaaaaaaaaaaaaaaaaaa@test.c)\tfalse\t2.280s\r\n> [aaaaaaaaaaaaaaaaaaaaaaaaaa@test.c](mailto:aaaaaaaaaaaaaaaaaaaaaaaaaa@test.c)\tfalse\t4.507s\r\n> [aaaaaaaaaaaaaaaaaaaaaaaaaa@test.c](mailto:aaaaaaaaaaaaaaaaaaaaaaaaaa@test.c)\tfalse\t8.964s\r\n> [aaaaaaaaaaaaaaaaaaaaaaaaaaa@test.c](mailto:aaaaaaaaaaaaaaaaaaaaaaaaaaa@test.c)\tfalse\t18.018s\r\n> [aaaaaaaaaaaaaaaaaaaaaaaaaaaa@test.c](mailto:aaaaaaaaaaaaaaaaaaaaaaaaaaaa@test.c)\tfalse\t\ud83d\udc80\r\n> This PR provides an alternative regex. Rather that matching on the `(aaaaa.)+` we instead do a negative lookahead for the presence of `..` or the email starting with a `.`. This approach isn't susceptible to ReDoS\r\n> \r\n> here's execution time against `^(?!\\.)(?!.*\\.\\.)([A-Z0-9_+-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$`\r\n> \r\n> regex\temail\tmatch\texecution\r\n> [aaaaaaaaaaaaaaaaaaaaaaa@test.c](mailto:aaaaaaaaaaaaaaaaaaaaaaa@test.c)\tfalse\t0.044s\t\r\n> [aaaaaaaaaaaaaaaaaaaaaaaa@test.c](mailto:aaaaaaaaaaaaaaaaaaaaaaaa@test.c)\tfalse\t0.046s\t\r\n> [aaaaaaaaaaaaaaaaaaaaaaaaa@test.c](mailto:aaaaaaaaaaaaaaaaaaaaaaaaa@test.c)\tfalse\t0.044s\t\r\n> [aaaaaaaaaaaaaaaaaaaaaaaaaa@test.c](mailto:aaaaaaaaaaaaaaaaaaaaaaaaaa@test.c)\tfalse\t0.046s\t\r\n> [aaaaaaaaaaaaaaaaaaaaaaaaaaa@test.c](mailto:aaaaaaaaaaaaaaaaaaaaaaaaaaa@test.c)\tfalse\t0.045s\t\r\n> [aaaaaaaaaaaaaaaaaaaaaaaaaaaa@test.c](mailto:aaaaaaaaaaaaaaaaaaaaaaaaaaaa@test.c)\tfalse\t0.045s\t\r\n> [aaaaaaaaaaaaaaaaaaaaaaaaaaaaa@test.c](mailto:aaaaaaaaaaaaaaaaaaaaaaaaaaaaa@test.c)\tfalse\t0.044s\r\n\r\nmay I ask, what environment did you use to test it? I'm trying to replicate the issue, but the vulnerable expression seems to perform well anywhere I test.",
          "It looks safe to me!\n\nI usually use [devina](devina.io) when checking for redos vulnerabilities. Anyway, here's what it says:\n![Screenshot of devina.io redos checker in use](https://github.com/colinhacks/zod/assets/95201376/5ea636a7-b46a-44d7-ab2c-b6ea505545d3)\n\n\nBtw, I've been looking for the perfect email regex for over 3 years, I'm honestly surprised that this works."
        ]
      },
      {
        "pr_number": 2731,
        "title": "add @sanity-typed/zod to ecosystem",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/2731",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | bf2324b42165694c414749711b9d4d5b93caa3af |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/6501551c96575600087d338b |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2731--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2731--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI3MzEtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.m-MyLDGEgl2D-rjshWni52dV3eaRrDYfZOGVikVQ9oc)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "Oh @colinhacks, the links are broken!",
          "Should be fixed by https://github.com/colinhacks/zod/pull/2840"
        ]
      },
      {
        "pr_number": 2707,
        "title": "docs: add `zod-sandbox` to README ecosystem links",
        "body": "I am developing a sandbox aplication for testing zod schemas: [`zod-sandbox`](https://zod-sandbox.vercel.app/).\r\nIt could be useful and I would like to add it to the ecosystem list.",
        "html_url": "https://github.com/colinhacks/zod/pull/2707",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | afa100c425cd47bb53e9bb6e26114e7d778e5cc9 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/64f5d3459143d10008289a40 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2707--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2707--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI3MDctLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.GNIctCDjEC7JXpCE6KpB7924bpkBc34zRGaihp2ZjZ8)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 2717,
        "title": "Export jsdoc with `@deprecated` when building",
        "body": "I didn't know for a long time that `z.string().nonempty()` was deprecated.\r\n\r\n- JSdoc was deleted in `build:cjs`, so prevented it.\r\n- JSdoc was output in the constructor when arrow functions were used in the class, so prevented it.\r\n- Fixed comment not in JSdoc format.\r\n\r\n## before\r\n<img width=\"511\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2023-09-07 11 44 55\" src=\"https://github.com/colinhacks/zod/assets/8909592/5bdcfc26-d3f8-487f-b068-feee609c4fa7\">\r\n\r\n## after\r\nwith strike\r\n<img width=\"473\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2023-09-07 11 46 12\" src=\"https://github.com/colinhacks/zod/assets/8909592/7ed331ab-d37f-47a9-997e-eb5d92242e33\">\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/2717",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 908e2e6c3c83ef26043a136c1fb5f2ae2a383503 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/64f93fd72edfae0008342687 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2717--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2717--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI3MTctLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.c3WCHbGtI6cQQGNbm0wnmznhnZR8gRjt-XcIVdT8tZk)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "Nice, thanks!"
        ]
      },
      {
        "pr_number": 2840,
        "title": "Fix sanity-typed links",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/2840",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 5c0f5ad1221f8671421a2359203ab6734d00e985 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/651dcc2ebf2828000884ee16 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2840--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2840--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI4NDAtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.0FfpTXCFytyv_vlaXgMiALnQI6iATRr7onigrJ5OKU8)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 2225,
        "title": "fix ulid regex",
        "body": "Ulid regex is not restrictive enough and can capture longer strings than expected.\r\n\r\n`[0-9A-HJKMNP-TV-Z]{26}`\r\n\r\nWith this regex, an ulid like`01ARZ3NDEKTSV4RRFFQ69G5FAVA` is considered valid.\r\nThis contains 27 chars, but at least 26 are validating the regex, so this returns true.\r\n\r\nAdding `^` at the start and `$` at the end ensures that the regex only validates exact matching strings.",
        "html_url": "https://github.com/colinhacks/zod/pull/2225",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 82f492621878d7944815f0b046d2cefd9a86a93e |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/64a5c9b7159d4e0008eeac39 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2225--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2225--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTIyMjUtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.ow7QZc_ATTGPj5UPBbHLSvZ0sZJDCBb2oA_cXPRChUE)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "@colinhacks able to merge this soon?",
          "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n",
          "https://github.com/colinhacks/zod/issues/2820 no joke \ud83e\udd74 "
        ]
      }
    ],
    "v3.22.2": [
      {
        "pr_number": 2626,
        "title": "docs: add typeschema to ecosystem",
        "body": "[`typeschema`](https://typeschema.com) offers an universal adapter for `zod` (and any major schema validation lib) that anyone can reuse",
        "html_url": "https://github.com/colinhacks/zod/pull/2626",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | a976dfc5a52437df28cc94668de1a36dea707b54 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/64ca80e0a886c3000775cb94 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2626--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2626--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI2MjYtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.qfrByoEqwiDsiWQBMV5PA963YexIoXbmR50YhrlHp3k)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "Love it, thanks!"
        ]
      },
      {
        "pr_number": 2668,
        "title": "README: X to Zod: add app.quicktype.io",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/2668",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 12d52ea0b0cb190e94d96e6d11b7b30bf24ad4bd |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/64dfc15508e735000860cfd8 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2668--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2668--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI2NjgtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.u0E8qA8ZqpHikhuQDuMOj6_UhBIi6uY-l7ZK7dVgoLQ)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "Very cool. Thanks!"
        ]
      }
    ],
    "v3.22.1": [
      {
        "pr_number": 2652,
        "title": "Initial prototype fix for issue #2651",
        "body": "Uses a non-arrow function to maintain `this`.\r\n\r\nCloses #2651 ",
        "html_url": "https://github.com/colinhacks/zod/pull/2652",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | dbf734780b5849ab617617b2ca53df2913c7028b |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/64dac3f8a5e5a30008403667 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2652--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2652--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI2NTItLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.DdCv-RTytxI1ZG9CVDFIc3DlHO9QbWl1eUPjblJ0HLI)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "Known problems:\r\n1) Only applies to sync functions (easy fix, just haven't done it)\r\n2) Not clear if there's a performance impact\r\n3) Not clear if this is better than a proxy-based approach\r\n4) Involves `this`-aliasing that eslint does not approve of\r\n5) Test might be considered anemic? Not sure if I should be adding other tests.\r\n\r\nWould love maintainer opinions or code suggestions on any of the above."
        ]
      }
    ],
    "v3.22.0": [
      {
        "pr_number": 2221,
        "title": "Testing on Typescript 5.0",
        "body": "Since TS 5.0 was recently released, I think it's worth it to confirm the general operation of `zod` running this version.\r\n\r\nhttps://devblogs.microsoft.com/typescript/announcing-typescript-5-0/",
        "html_url": "https://github.com/colinhacks/zod/pull/2221",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 04894fb80bb725006c0ccafd70ece97337e53b0b |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/6418cec21161d20008b7ec7a |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2221--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2221--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTIyMjEtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.Cya_rY8_9JBlid4ovgroF05Qnu58a8s_1kvCgPKdO00)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Thank you!"
        ]
      },
      {
        "pr_number": 2219,
        "title": "docs: update deprecated link",
        "body": "The old link https://www.typescriptlang.org/docs/handbook/literal-types.html brings us to a deprecated page. This PR update the link to the new page.\r\n\r\n![image](https://user-images.githubusercontent.com/20135478/226367359-4bcbba9e-fd2b-4f89-bfe8-35b65ac37121.png)\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/2219",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 28896def16c5fe251a2e91ca0bec9e02c6c71861 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/64186abedea4d900087a9e45 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2219--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2219--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTIyMTktLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.9QaYClU3pieMoTMiQsA4vPtHWQtkSS1g_Lln8sU8T-M)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Thanks!"
        ]
      },
      {
        "pr_number": 2299,
        "title": "docs: add mobx-zod-form to form integrations",
        "body": "I really like the idea of `zod` so I build my own form integration on it!\r\n\r\nCheckout https://mobx-zod-form.pages.dev/ for documentation.\r\n\r\nThis library takes a different approach to building forms. Zod is where people define everything about their form, as the source of truth, and the form will be built only upon zod.\r\n\r\nThe library is proved useful in our production and helps us managing huge forms. \r\n\r\nI hope this library will be seen by more people so that other developers and companies could be empowered.",
        "html_url": "https://github.com/colinhacks/zod/pull/2299",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 20cabb4022c851ef311d8458b969b69952a30221 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/642d85010152a40007804aaa |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2299--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2299--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTIyOTktLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.I-hrNjbpQkP8OuasFjozhdJ1ZTV_TroRfX0g0QxT-Lo)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 2416,
        "title": "docs: Add `zocker` to Ecosystem section",
        "body": "About a week ago I posted on the zod-discord about my project `Zocker`. It was then suggested I make a PR to add it to the added to the Ecosystem section, so here I am. \r\n\r\nZocker is a mock-data generation library that generates plausible mock-data from zod-schemas, similar to `@anatine/zod-mock`, but supports a wider subset of `zod`. It too uses `faker` under the hood for semantically meaningful data.\r\n\r\nA quick overview of what Zocker provides:\r\n- Generation for most zod types (unfortunately not all types are possible to support in a library like this)\r\n- Generation for Regex schemas on strings (thanks to the `randexp` package)\r\n- Cyclic schemas\r\n- Genration for `any` and `unknown` types\r\n- Generation for `map`, `set`, `tuple`, `union` and `record` types\r\n- An API for customising the generation process\r\n\r\nFor a full list of features & limitations check out the [docs](https://zocker.sigrist.dev)\r\n\r\nI'm still working on the library, but don't plan on making breaking changes soon. \r\n\r\nThank you for your consideration.",
        "html_url": "https://github.com/colinhacks/zod/pull/2416",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | ac1579e6d9e5ecf8260a764b6714cf085cb19993 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/645a46d02ff33d0008ca2a57 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2416--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2416--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI0MTYtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.aLUAJxbnJrQTapTvl9Y7ToKWyE9aB1_6RgcA_62GCIc)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 2274,
        "title": "Fix[#2267]: domain part in email regex",
        "body": "This PR is for correct the email regex. Now there aren't errors with subdomains or hyphen as separetor.\r\nAlso it solves issues #2154, #2193",
        "html_url": "https://github.com/colinhacks/zod/pull/2274",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | d13093f5986fbc89fb8851d5a632d796185c6230 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/64249d72e1ced000081cfbe4 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2274--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2274--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTIyNzQtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.8k9cuvFRu36RhUHoOjkMllYsLr6xMonL4ucBoT4nQyM)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "I ran into this issue last night with an e-mail domain with four components. For me, this change fixed it (and domains with more components as well). LGTM!",
          "@colinhacks anything I can help with to merge this PR?",
          "or @scotttrinh?"
        ]
      },
      {
        "pr_number": 2434,
        "title": "Add `zod-openapi` to ecosystem",
        "body": "Heya just a PR to add my library to the list \ud83d\ude04\r\n\r\nhttps://github.com/samchungy/zod-openapi\r\n\r\nFor those of you looking here, the main differences between this one and other ones is a much simpler API to create and register components. ",
        "html_url": "https://github.com/colinhacks/zod/pull/2434",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 3d34709becc9c269788939dcaf72120db190e69f |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/64634d1408a7dc0008662131 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2434--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2434--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI0MzQtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.xF38vaNvfIpPHZyrqi8tl-VAvDmRY1_Z2D9xp5AKfVw)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Much appreciated @scotttrinh \ud83d\udc9b"
        ]
      },
      {
        "pr_number": 2439,
        "title": "docs: fix minor typo",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/2439",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | d842683fcf5b0f11ba32dd8b60c696d8d378e174 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/64649e5c80cee30008cce1ea |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2439--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2439--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI0MzktLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.hNgkL2sQpup_K8-gZwrmlWscoqmBQzElh9LDNjaOfQs)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 2443,
        "title": "chore: move `exports.types` field to first spot @ package.json.",
        "body": "Hey \ud83d\udc4b \r\n\r\nThis PR re-arranges `package.json`'s `exports` object key order and sets `types` field to first.\r\n\r\nThis is recommended by TypeScript's official documentation.\r\n\r\n> The \"types\" condition should always come first in \"exports\".\r\nhttps://www.typescriptlang.org/docs/handbook/esm-node.html#packagejson-exports-imports-and-self-referencing\r\n\r\n> Ensure types condition to be the first. The [TypeScript docs](https://www.typescriptlang.org/docs/handbook/esm-node.html#packagejson-exports-imports-and-self-referencing) recommends so, but it's also because the exports field is order-based.\r\n> For example, a scenario where both the types and import condition could be active, types should be first so that it matches and returns a .d.ts file, rather than a .js file from the import condition.\r\nhttps://publint.dev/rules#exports_types_should_be_first",
        "html_url": "https://github.com/colinhacks/zod/pull/2443",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 96da74d96825dd45c34e428773a9c8dbb6d19f52 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/64667befb3757d0008542830 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2443--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2443--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI0NDMtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.p5P5qx1S3YmokJK-ZnHzyNZQb5JHAhC-wh0OzeG5Mp8)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Thanks!\r\n"
        ]
      },
      {
        "pr_number": 2432,
        "title": "docs: allow Zod to be used in dev tools at site",
        "body": "This change allows us to test Zod on the documentation site for a simple playground test!",
        "html_url": "https://github.com/colinhacks/zod/pull/2432",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | dea4e905bf9bf6dfed33282df62f7dab34ab36f6 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/6464e681605b6400085e6e9c |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2432--guileless-rolypoly-866f8a.netlify.app/](https://deploy-preview-2432--guileless-rolypoly-866f8a.netlify.app/) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI0MzItLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.Z2hJDKvM-K2ZHjvsuyU0iwNIQHDDcIevv0lSrojr4gs)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Great idea"
        ]
      },
      {
        "pr_number": 2428,
        "title": "Fix not working Deno doc link.",
        "body": "Added missing deno land link to crossOriginLinks list for docsify.",
        "html_url": "https://github.com/colinhacks/zod/pull/2428",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 4a7363a890d197cc22be07e8c355ed16e462417d |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/6461c187e8d6c7000888570a |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2428--guileless-rolypoly-866f8a.netlify.app/](https://deploy-preview-2428--guileless-rolypoly-866f8a.netlify.app/) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI0MjgtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.3ex_rojjsJJ0AprTcNV90UcKVgNibARKLwDAxG59ZEE)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 2426,
        "title": "adds ctx to preprocess",
        "body": "This PR would allow `context`/`ctx` to be used in `preprocess` in the same way it is currently usable in `transform`. \r\nThis let's the user, for example, add issues/errors already in the preprocessing state.\r\n\r\nRelated to https://github.com/colinhacks/zod/issues/696",
        "html_url": "https://github.com/colinhacks/zod/pull/2426",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 8fdad27a724c8ebaa32e55e3ee174d4160b2ecc6 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/646aa1fa3b30c600083cfd45 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2426--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2426--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI0MjYtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.T5WdBS0PznyBkDD_t74Jx5tXr6H53UxRFVxKUeVzmdE)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Made a couple tweaks but looks good.  Thanks!\r\n"
        ]
      },
      {
        "pr_number": 2420,
        "title": "fix: super refinement function types",
        "body": "Typescript was complaining about the `.superRefine` argument returning a `Promise` when it was expecting a `void` return.\r\n\r\nThis fixes it so it accepts `Promise<void>` as a valid return value\r\n\r\nAttachment of error:\r\n<img width=\"627\" alt=\"Screenshot 2023-05-11 at 11 36 09\" src=\"https://github.com/colinhacks/zod/assets/42137191/a4be5487-637d-43ba-bb82-73ea99baf5ab\">\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/2420",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | d54f4ec5784b1b703bc5775334119854bfc50271 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/646aa37fe3f4c1000881c271 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2420--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2420--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI0MjAtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.TI0CBpx_8sFnStDZfkJ8P8M1RHsSQXmfHkTZGQ-H_94)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "ccing @colinhacks for review \ud83d\ude4f ",
          "Awesome thanks! Guess there's not a lot of async super-refiners out there.\r\n",
          "Any chance this will be included in a release soon?",
          "Landed in 3.22"
        ]
      },
      {
        "pr_number": 2157,
        "title": "Make email regex reasonable",
        "body": "A lot of people think every *technically valid* email address must parse validation by `z.string().email()`. I [used to think this](https://github.com/colinhacks/zod/issues/639#issuecomment-917223045) too. Over the years I've merged several PRs to make the email regex more \"technically correct\". \r\n\r\nMost recently, I merged a PR that adds support for *IPv6 addresses* as the domain part of an email. They look like this:\r\n\r\n```\r\njonny@[ipv6:7e95:0559:10f2:21e9:9dab:7309:c116:ca3b]\r\n``` \r\n\r\nTurns out that PR [also broke](https://github.com/colinhacks/zod/issues/2154) plain old subdomains like `user@sub.domain.com`. That means my _mom's current email address_ would fail to parse, but jonny up there can get away with parsing his freakish IPv6 email.\r\n\r\nThis made me re-evaluate my whole stance on what `z.string().email()` should do. Zod's users are mostly engineers who are building apps. When you're building an app, you want to make sure your users provide normal-ass email addresses. So that's what `z.string().email()` should do, imo.\r\n\r\nSo I rewrote the regex from scratch to be simple and reasonable.\r\n\r\n```ts\r\n/^([A-Z0-9_+-]+\\.?)*[A-Z0-9_+-]@([A-Z0-9][A-Z0-9-]*\\.)+[A-Z]{2,}$/i;\r\n```\r\n\r\n- The username (\"local part\")\r\n  - can use these characters: `[a-zA-Z0-9-+._]`\r\n  - can't have two dots in a row\r\n  - can't end on a dot\r\n- The domain \r\n  - can use these characters: `[a-zA-Z0-9-]`\r\n  - must have one or more dots somewhere in the middle\r\n  - can't have two dots in a row\r\n  - can't start with a hyphen\r\n  - must end with a TLD that's 2+ letters, only `[a-zA-Z]` allowed\r\n\r\nIt is *not* trying to be [RFC 5322](https://datatracker.ietf.org/doc/html/rfc5322) compliant. It's not going to check if the TLD is real. And it's not going to implement any of this craziness:\r\n\r\n- \"Printable\" characters: `wtf-!#$%&'*/=?^_{|}~@mail.com`\r\n- Quoted first parts: `\"zod is cool\"@mail.com`\r\n- Comments: `regexiscool(kinda)@mail.com`\r\n- IPv4: `billie@[1.2.3.4]`\r\n- IPv6: `jonny@[ipv6:7e95:0559:10f2:21e9:9dab:7309:c116:ca3b]`\r\n- Emoji: `\ud83d\udc4e@mail.com`\r\n\r\nFor anything else, you can always use `.regex()` or `.superRefine()`.",
        "html_url": "https://github.com/colinhacks/zod/pull/2157",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 0ada2bc44430096485c5b4fd761b95ef3ad16f4f |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/646aaba10beb3f000876629f |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2157--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2157--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTIxNTctLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.s2ZcldB5x3p15zPBp8YL2Iu6MqLbPEGKk3rYXP0c57Y)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Agree!\r\n\r\nMaybe we should:\r\n\r\n- export ipv4/ipv6 regexes.\r\n- extract and export each part of the \"normy\" email regex.\r\n\r\nThis'll help people migrate to `ZodString.regex`, combine parts to build their own email regex.",
          "Not that you are asking for suggestions but what about:\r\n\r\n1. Leave `email()` as it is, but mark it deprecated.\r\n2. Call this new check `simpleEmail()` (or similar) to highlight the fact that it is not intended to be a complete email validator. ",
          "Also, what do you think about using the Regex that HTML `input type=email` elements use? It's both simple and will align with front-end validations. \r\n\r\nhttps://www.w3.org/TR/2012/WD-html-markup-20121025/input.email.html#form.data.emailaddress_xref2\r\n```\r\n/^[a-zA-Z0-9.!#$%&\u2019*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\r\n```",
          "Maybe add `+` to allowed chars?",
          "> Maybe add `+` to allowed chars?\r\n\r\nOops, that was already supported by the regex but missed it in my breakdown. Good catch.\r\n\r\n> export ipv4/ipv6 regexes.\r\n\r\nDefinitely. I think we should consider exporting a bunch of regexes from `zod/regex`. \r\n\r\nThe problem is that each additional \"special\" validator like `.email()` involves adding a new method & handling logic inside ZodError, which adds up over time. Exporting from `zod/regex` would be treeshakable so we could throw whatever we wanted in there.\r\n\r\nIt's also possible we should let people specify their own email regex which would let people customize the behavior and still get an `\"Invalid email\"` message in their `ZodIssue` without additional configuration.\r\n\r\n```ts\r\nz.string().email({ pattern: /asdf/ })\r\n```\r\n\r\n>  Regex that HTML input type=email\r\n\r\nNice! I'd missed this. I think it makes sense and seems to be functionally equivalent to mine but with support for \"printable characters\" in the local part. I'm not convinced emails with those characters should be considered valid, but I like the parity with browsers. \r\n\r\n> Leave email() as it is, but mark it deprecated...`simpleEmail`...\r\n\r\nI don't like camel-cased method names, and I don't want to burn `.email()` forever because of this. I'm not planning to do a rename or major version bump for this. It's an immediate usability win for the 98% of users who don't realize that `.email()`  currently lets through a bunch of garbage.",
          "I would love to be able to allow only emails with a top level domain in all my apps that I am writing.\r\nLike sure, if you're writing a corporate app running inside a corporate network na email like `john@localserver` might make sense, but I would wager 99 percent of people using zod are actually running their valiadtions in the open internet, where these email adresses are useless.\r\n\r\nIf I was making zod api, I would even make it forbid these adresses without a TLD by default.\r\nso `z.string().email()` would not parse `john@localserver`.\r\n\r\nIf you would want it to parse it, you would have to use `z.string().email({requireTld: false})`. \r\nObviously this would be a breaking change so it would have to go into a new major.\r\n",
          "I think this regular expression is still a little too permissive when it comes to `+` characters.\r\n\r\nAn email where the username is all `+` characters is still valid with the new regex: \r\n\r\n```\r\n++++++@foo.bar\r\n```\r\n\r\nWhen used for mail aliasing, the `+` is usually part of a suffix added to an existing username.\r\n\r\nAnd usually there is only a single plus character (or rarely they're sometimes used as separators `username+foo+bar@xxx.xxx`)\r\n\r\nSince `++++@foo.bar` is a pretty unexpected email address for most normal use cases, it might make sense to add these additional constraints to the regexp?\r\n\r\n* Require the username starts with some non-`+` character\r\n* Prevent repeating `+` characters",
          "The proposed email regex in this PR solves an issue for me \ud83d\udc4d \r\nAny idea when this will be released? Just wondering whether I should replace all z.string().email() with z.string().regex() or wait for this to be released",
          "Hi! I just opened #2224 to enable `tom@test.te-st.com` to pass. Please take domains and subdomains with dashes in them in consideration while designing a new regex! Thank you",
          "i also ran into this with mail-tester.com emails, would be great if this or the other one get merged in!",
          "`something@subdomain.domain-with-hyphens.tld` emails include pretty much any French student (or even professor) email address, as most email domains are composed of the `etu.` subdomain (short for _\u00e9tudiant_, which is French for \"student\"), followed by the school/university's domain (as an example, `@etu.inp-n7.fr`).\r\n\r\nYou should allow hyphens anywhere in the domain part, excluding all students of a particular country is not a great idea (I suspect that other countries also use those kinds of email addresses).\r\n\r\nNo offense of course, but as this is (at least indirectly) a matter of inclusivity, I figured that raising the issue before this gets merged is important, and it illustrates @TomasHubelbauer's comment.",
          "Is this regex safe? When I try to use it on my code eslint complains that it is not (I'm aware that the one before was worse though):\r\n![image](https://github.com/colinhacks/zod/assets/57573579/fe1219fb-8416-438d-8748-8e4c2af5e988)\r\n\r\nShould we care too much about this? I'm not sure how easy is to input a string to generate a regex DoS attack with this.\r\nDoes anyone have thoughts on this?",
          "I am still having the issue that `.email()` doesn't allow dashes in the domain when there is a subdomain. I am using the latest version of `zod`.\r\n\r\nIn the end I had to use `.refine()` with checking the regex myself, but I am wondering if this is expected to work now and if I am missing something?",
          "Thank you! Is there a planned release date for this fix?",
          "I ran into this error as well, and we didn't want to use an unstable (canary) Zod build, so I ended up just wrapping Zod and overriding `ZodString.email()` in a new `zodWrapper.ts` file.\r\n\r\n```ts\r\nimport { z, type ZodString } from \"zod\";\r\n\r\n// Replace this with whatever regex you need\r\nconst emailRegex =\r\n  /^([A-Z0-9_+-]+\\.?)*[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;\r\n\r\nz.ZodString.prototype.email = function (\r\n  message?:\r\n    | string\r\n    | {\r\n        message?: string | undefined;\r\n      },\r\n): ZodString {\r\n  return this._addCheck({\r\n    kind: \"regex\",\r\n    regex: emailRegex,\r\n    message: typeof message === \"string\" ? message : message?.message,\r\n  });\r\n};\r\n\r\nexport { z };\r\n```\r\n\r\nThen, instead of `import { z } from \"zod\"`, we just `import { z } from \"zodWrapper\"`.\r\n\r\nNot the cleanest solution, but it saved me from having to change every `z.string().email()` to a regex.",
          "Are you aware that this change excludes anyone with an apostrophe in their name? eg. `O'reilly`?"
        ]
      },
      {
        "pr_number": 2410,
        "title": "docs: add tapiduck to API libraries",
        "body": "Zod is brilliant. Thank you for creating and maintaining it.\r\n\r\ntRPC is amazing too. It gives you fullstack intellisense without the need for GraphQL (or codegen.) But it still uses GraphQL-like \"query\" and \"mutation\" terminology. And [it isn't natively compatible](https://github.com/trpc/trpc/issues/755) with OpenAPI.\r\n\r\nTapiduck is a simpler and RESTful alternative to tRPC. It uses Zod for inferring shape definitions, and for enforcing runtime type validations. It is OpenAPI compatible, built on Express, and should feel familiar to most Node devs.",
        "html_url": "https://github.com/colinhacks/zod/pull/2410",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 1c7e834ac06aa31cf4af355c03848f5f6779a2e4 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/6456a411876d670008cd4efc |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2410--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2410--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI0MTAtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.NTUFiN2NMlYITdRXu512dTWMz30kyEufNlxEjXLLtYI)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Love it, thanks!"
        ]
      },
      {
        "pr_number": 2412,
        "title": "docs: add ts as const example in zod enums",
        "body": "## What I do in this PR:\r\n- add space between English letters and Chinese characters for readability\r\n- add `as const` example (missing in zh doc) in `zod enums`",
        "html_url": "https://github.com/colinhacks/zod/pull/2412",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 77356bfa2df22678563cb68aee22c90540bcc1fb |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/646aacdb25a04b000837b337 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2412--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2412--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI0MTItLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.-6UTixOxmo56DggHho4WFPOaILuiDe8S-m7yHA9-_yE)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Thank you!"
        ]
      },
      {
        "pr_number": 2409,
        "title": "docs: add zod-fixture to mocking ecosystem",
        "body": "\ud83d\udc4b Hi, I like this library so I created the zod-fixture library based on Auto Fixure (from the .NET world).\r\nIt helps us with the generation of test data.\r\n\r\nGitHub link: https://github.com/timdeschryver/zod-fixture\r\nNPM link: https://www.npmjs.com/package/zod-fixture\r\n\r\nAn Example:\r\n\r\n```ts\r\nimport { z } from 'zod';\r\nimport { createFixture } from 'zod-fixture';\r\n\r\nconst PersonSchema = z.object({\r\n\tname: z.string(),\r\n\tbirthday: z.date(),\r\n\taddress: z.object({\r\n\t\tstreet: z.string(),\r\n\t\tcity: z.string(),\r\n\t\tstate: z.string(),\r\n\t}),\r\n\tpets: z.array(z.object({ name: z.string(), breed: z.string() })),\r\n\ttotalVisits: z.number(),\r\n});\r\n\r\nconst person = createFixture(PersonSchema);\r\n```\r\n\r\nGives you the following value for person:\r\n\r\n```json\r\n{\r\n\t\"name\": \"name-b1d5c46c-ec89-4fd5-abdf-b263ae808b84\",\r\n\t\"birthday\": \"2021-01-11T23:58:00.091Z\",\r\n\t\"address\": {\r\n\t\t\"street\": \"street-a088e991-896e-458c-bbbd-7045cd880879\",\r\n\t\t\"city\": \"city-0a3d2843-5b32-48f0-99e4-bdda3c6ed531\",\r\n\t\t\"state\": \"state-b5f857d4-ccad-46ad-94da-4524ecc672ae\"\r\n\t},\r\n\t\"pets\": [\r\n\t\t{\r\n\t\t\t\"name\": \"name-27bdfe2e-2408-4fbe-b984-c5043211ec70\",\r\n\t\t\t\"breed\": \"breed-addd4dcb-0fa3-4682-af78-af7a32e03890\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"name-bf785f1c-e989-4ea7-97ac-9e9a9d629b1f\",\r\n\t\t\t\"breed\": \"breed-2c177585-7a22-4bef-a50f-a00182bdfdce\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"name-7ac981b0-4cc8-4236-9d76-642121b9bac3\",\r\n\t\t\t\"breed\": \"breed-0e156d71-5d81-4ffd-ad51-87a2c6baeea0\"\r\n\t\t}\r\n\t],\r\n\t\"totalVisits\": 372\r\n}\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/2409",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | a88eac2edf2b45e5cd0e4451e081c805da357c51 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/646aad18c8484d000871ef63 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2409--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2409--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI0MDktLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.12YPOIcB2S1_xbt3vKTKlC_2DNZdmJ0-o9mUlEJ43Po)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Thanks!"
        ]
      },
      {
        "pr_number": 2394,
        "title": "docs: add `zodock` to mocking ecosystem",
        "body": "First of all, I want to thank you for this great library! \ud83d\ude80 \r\n\r\nI have implemented the following utility to generate dummy data based on Zod schemas. Unlike similar utilities already presented in the ecosystem, this utility covers most of the functionality of Zod schemes, for example, `transform`, `refine`, `preprocess`, recursive types and all complex combinations of these methods. \r\n\r\nI will be very happy if this library is useful to the community, and I will try to actively support it.\r\n\r\n---\r\nIn addition, I wanted to ask for help with the `z.never()` type. What data needs to be passed in order to successfully pass the check when parsing a schema with `z.never()`?",
        "html_url": "https://github.com/colinhacks/zod/pull/2394",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 1c9acbb086fa67b2ddc6c45ac8ed4ca6af09c90c |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/646aa5050e14f100089e8605 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2394--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2394--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTIzOTQtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.mdGZuWchsvtGENo0HcvrxD7AvelC6lbpvtNO9BENVnY)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Love it, thanks!"
        ]
      },
      {
        "pr_number": 2332,
        "title": "remove \"as any\" casts in createZodEnum",
        "body": "This removes a couple of redundant `as any` casts in `createZodEnum`.",
        "html_url": "https://github.com/colinhacks/zod/pull/2332",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 7daa81bed4af8d9f1bda6c6eb17fbac5ce58c4f3 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/643d9d326f8ede00080fe855 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2332--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2332--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTIzMzItLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.HQT7oujQH7UU1g1hapu31ZNfuT8hBASCc9y7bf9Lmgw)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 2239,
        "title": "Fix proto pollution vulnerability",
        "body": "Fixes the minor vulnerability described [here](https://github.com/colinhacks/zod/issues/2227)",
        "html_url": "https://github.com/colinhacks/zod/pull/2239",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | c377557cc9d482062805caf04e05261e1d79cbf3 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/641e12268aae5800081c2636 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2239--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2239--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTIyMzktLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.7m2KVka_EZGy77qbs3ylGo2u0kqC4ZxyJp1MZOgTPUA)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Thank you! Very interesting bug."
        ]
      },
      {
        "pr_number": 2356,
        "title": "Add getters to Map for key + value?",
        "body": "For Records we have access to `keySchema` and `valueSchema`, like this:\r\n\r\n```\r\nconst schema = z.record(z.string(), z.number());\r\nconsole.log({\r\n  key: schema.keySchema,\r\n  value: schema.valueSchema,\r\n});\r\n```\r\n\r\nI've added the same methods to Map so users don't have to use `_def.keyType` and `_def.valueType`.\r\n\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/2356",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | f5a0c0abd332bdd6380b4f20a09ecbcfc3d1cc4b |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/646ac24c7f935b0008ef2917 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2356--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2356--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTIzNTYtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.DSmmXnvXMVLD3OHfX8sIOQ4fNnovLqqBqCNx61DhHKM)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Beautiful, thanks!"
        ]
      },
      {
        "pr_number": 2346,
        "title": "Add koa-zod-router to README",
        "body": "This PR adds [koa-zod-router](https://github.com/JakeFenley/koa-zod-router) to the README.\r\n\r\nI created this library after using koa-joi-router quite frequently in projects, which works for I/O validation, but lacks type-safety. So I created koa-zod-router to address this and improve upon whats already out there. The library has been used in a few of my own projects in production and is pretty well tested at 99% coverage. For a full list of features please follow the link to the project's repository.\r\n\r\nWould just like to say thank you @colinhacks for creating this awesome library, zod has been a fantastic dev experience.",
        "html_url": "https://github.com/colinhacks/zod/pull/2346",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | d48d70c98068c96feb88a589fafe3562f0fd6dbe |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/646ac2afd7e5eb0008d3acd9 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2346--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2346--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTIzNDYtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.98Pk85tmISAVDc6fycE_zRwMCASXQ-a2IW8lzGSkiw4)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 2329,
        "title": "docs: fix typo in link fragment",
        "body": "This PR corrects the wrong `#partialt` fragment identifier to `#partialtype`.",
        "html_url": "https://github.com/colinhacks/zod/pull/2329",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | c32571fa3b0ea73ebe44ae9d497bb75ceb38919b |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/643d3140a54a790008f8220b |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2329--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2329--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTIzMjktLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.0_ZHChq9NxvPo27VXj2ZFpER6GH0Zr4feDX1T5NXbEk)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Thanks! "
        ]
      },
      {
        "pr_number": 2476,
        "title": "Add `*.md` pattern to prettier",
        "body": "Prettier can format code blocks within Markdown the same as the rest of the code. In a recent PR, I noticed that most of my feedback was about code formatting within the README, so I thought this would be helpful.",
        "html_url": "https://github.com/colinhacks/zod/pull/2476",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 17d7448f680d0761212675081800bb9a276ba8d0 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/647a12f5add5310008338b6f |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2476--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2476--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI0NzYtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.9-xV2ddC_1MJ75oXoPDmqEwP7wVlwwNTCbR9xp11P5Y)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 2603,
        "title": "docs(comparison-yup): Yup added partial() and deepPartial() in v1",
        "body": "So update Yup's section of the Zod comparison accordingly.\r\n\r\nSee: https://github.com/jquense/yup/issues/1906",
        "html_url": "https://github.com/colinhacks/zod/pull/2603",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 6e16d2e0546044305c7058bdd70155a349dc3e22 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/64bae638ed94150008b1e006 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2603--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2603--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI2MDMtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.33qcBP2E4Nj9D1t8yHNMp-J2-4wr1DXwf1EV59SjAmo)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 2578,
        "title": "docs: add VeeValidate form library for Vue.js",
        "body": "I add [VeeValidate](https://vee-validate.logaretm.com/v4/integrations/zod-schema-validation/) Zod Schema Validation to the list.",
        "html_url": "https://github.com/colinhacks/zod/pull/2578",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 6c8304ba36fc13e913e31c091d1056db1c890473 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/64b1050f1d8b080008e85a9a |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2578--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2578--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI1NzgtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.jIEt-gsYFUr4DmKOm-UE1XF1L1Fe4ZXQUahoBejNQvo)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 2570,
        "title": "docs: fix typo in z.object",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/2570",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 330dc3789b726d1e98394f98c5021dd49ca68283 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/64ad5108c9c30500093ceaef |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2570--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2570--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI1NzAtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.exPBeuZ9w0xj6DLCSVZ2twM5OSLto0Dj_WZLgc0fISw)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 2579,
        "title": "docs: fix incomplete Records example",
        "body": "I started to learn Zod and when I read the documentation, I couldn't understand the example for [Records](https://zod.dev/?id=records), and if it was incomplete. I then tried to find out if I was the only one who didn't understand ;-) I found a discussion here: https://github.com/colinhacks/zod/discussions/1651 \r\n\r\nHere's the PR with a more complete example proposed by @JacobWeisenburger \r\n\r\n\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/2579",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | c18428414ec32661a9eccf88773ab6b3e1141296 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/64b10a3feed8c2000809b1b8 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2579--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2579--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI1NzktLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.o1-n2VggXJxeP4XKxYUngqtZwbgZGBJCLGrT9S_gfvk)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 2577,
        "title": "docs: add conform form integration",
        "body": "This adds conform. It didn't look like there was much of an order so I put it at the top since that's where it'd go in alphabetical order anyway \ud83e\udd37\u200d\u2642\ufe0f",
        "html_url": "https://github.com/colinhacks/zod/pull/2577",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | e1ac5687269e6b047f6a770a4f8fab3a208692d5 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/64b08722b2d1c70008a0a871 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2577--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2577--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI1NzctLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.kvnGkyiJFO1U7lSW2RR0pXwed5DnjuOxex0MOQFvEos)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 2562,
        "title": "Add `fastify-zod-openapi` to ecosystem",
        "body": "Adding another plugin I maintain to the list.\r\n\r\nFor those of you \ud83d\udc40 in this PR:\r\n\r\n[fastify-zod-openapi](https://github.com/samchungy/fastify-zod-openapi) adds native Fastify type provider, validator, serializer and @fastify/swagger support for [zod-openapi](https://github.com/samchungy/zod-openapi).\r\n\r\nThe main difference between this library and `fastify-type-provider-zod` is that it enables support between zod-openapi and Fastify.",
        "html_url": "https://github.com/colinhacks/zod/pull/2562",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 3d2730b911c60f2bf4126361a7e3d5e1e647c4e1 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/64ab5aaed619500008a790eb |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2562--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2562--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI1NjItLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.taBgJFlGT9jZwnUrZfrSJ90wH3ZGAoguaEiGMTEQdW8)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._",
          "Thanks Sam!"
        ]
      },
      {
        "pr_number": 2542,
        "title": "fix typo test name",
        "body": "While going through the code, I discovered the word \"methd\", which I believe may be a typographical error for \"method\". I have proceeded to make the necessary corrections to rectify this typo.\r\n\r\nHere's a brief summary of the changes I made:\r\n\r\n* All instances of \"methd\" have been replaced with \"method\"",
        "html_url": "https://github.com/colinhacks/zod/pull/2542",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | c0ac11b62d77638960ef188315bcbc78736d0777 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/64a1894c93200b0008663bee |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2542--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2542--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI1NDItLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.G6YyKwj7QvHybYaV7V6d7pdJAjbfYNSTILlas9gq78c)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 2457,
        "title": "Update `nullish()` documentation to correct chaining order",
        "body": "This follows on from https://github.com/colinhacks/zod/pull/1702, to keep the docs in sync.",
        "html_url": "https://github.com/colinhacks/zod/pull/2457",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | ed2089ee95a2f3a9d9f7d26d0162ec06166b98f0 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/646de4baf084bb00085cf869 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2457--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2457--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI0NTctLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.QTvuqYiFVLuR4qzyhVSRN_xCeqSngF_SmEOEInwC1xo)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 2536,
        "title": "docs: update comparison with `runtypes`",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/2536",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | b40b115f709967208134961e7926597fef6b4de7 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/649deaa25715d300091e31db |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2536--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2536--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI1MzYtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.TohBN_vpDM-Rbq0CxMFVsp1qOfSccn7ZnOEMO39xtT4)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 2634,
        "title": "Add ZodReadonly",
        "body": "A stripped down version of some excellent earlier work by @santosmarco. Marco - at the moment I think it makes sense to always freeze until someone asks to disable it (I don't think they will). I'm also holding off on `.deep()` for the same reason - too much complexity overhead for a feature I'm not sure anyone needs.\r\n\r\ncc @tkdodo\r\n\r\n ",
        "html_url": "https://github.com/colinhacks/zod/pull/2634",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | daf771c6b7ff80baf082e58fc3d56c70896d9726 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/64da7e0dee4b500008dd2b4b |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2634--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2634--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTI2MzQtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.9i6NqDGCR-Sjo-tySj-mwYwFpZzl0Bfl50pRtLHOS8c)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site configuration](https://app.netlify.com/sites/guileless-rolypoly-866f8a/configuration/deploys#deploy-notifications)._"
        ]
      }
    ],
    "v3.21.4": [],
    "v3.21.3": [
      {
        "pr_number": 2148,
        "title": "Fix npm canary action paths pattern",
        "body": "I _think_ this is what we need?",
        "html_url": "https://github.com/colinhacks/zod/pull/2148",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 82204bf2b8f65d6761766a973a17c0e270ecbe9a |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/6406001019393e0008eaa192 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2148--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2148--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTIxNDgtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.PJ3kbmh1EzVZcwYRqo8HRJllCMpnxhUzr1HPFV-CrTI)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      }
    ],
    "v3.21.2": [],
    "v3.21.1": [
      {
        "pr_number": 2143,
        "title": "docs: improve cn readme",
        "body": "docs: improve part of `cn readme` and keep sync with `en readme`",
        "html_url": "https://github.com/colinhacks/zod/pull/2143",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 2c3fbd06513bc96fbecc5127afd215329a5a2345 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/64042a5a7454ac000871340c |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2143--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2143--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTIxNDMtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.0zz-fWjCZsbCv7iB_mZ-tmpkLwo1B1UdYkLkHVNEqCU)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Love this, thank you! This file has been languishing for a while and there's no easy way for me to keep it synchronized with the English readme. Here's hoping auto-translation gets good enough soon that this won't been necessary."
        ]
      },
      {
        "pr_number": 1887,
        "title": "add `.includes(value, options?)` @ `ZodString`.",
        "body": "Hey :wave:\n\nThis PR adds `.includes(...)` to `ZodString`.\n\n```ts\nz.string().includes('awesome'); // anywhere in the string.\nz.string().includes('awesome', { position: 5 }); // anywhere in the string, starting from position 5.\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/1887",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 59ae4505252ebe3648bc4b505515d8cfb73eced6 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63fd29775b38d90008a14eff |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1887--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1887--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE4ODctLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.n_VTV6wJkQRsq5GhRyPSdAiiApIfpbugrajJG2vZD3I)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 2137,
        "title": "Cache the evaluation of ParseInputLazyPath.path() for a moderate perf improvement",
        "body": "Hi, thanks for the great library, I adore the API :)\r\n\r\nI was looking for ways to make some unintrusive improvements to the performance, and noticed since a ParseInput's path may be evaluated multiple times, caching the evaluation result avoids some extra array allocations.\r\n\r\nAround a 10% speedup on 'realworld' on my computer.\r\n\r\nDunno what happened with the rest of the diff, I don't think I touched anything or had \"format on save\" on...",
        "html_url": "https://github.com/colinhacks/zod/pull/2137",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 0a873faf95f1248024d38639b770fbecc952ab0f |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/640464b7e2490d00084d24da |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2137--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2137--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTIxMzctLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.-2JnALyijddFMUhiSwePTB0molF1yyxldaljB_OyFbQ)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Thanks! Simplified the implementation a bit.",
          "Hi! The changed code is definitely simpler, but at least on my machine it wipes out the perf improvement almost completely. I am guessing that Array.prototype.concat is just fundamentally a lot slower than allocating an empty array and then pushing into it.",
          "Ah interesting. Guess getting rid of `.concat` matters more than the caching bit. Sorry, I should have re-run the benchmarks.  I'll revert."
        ]
      },
      {
        "pr_number": 2049,
        "title": "feat: z.string().ulid() - add support for ulids",
        "body": "# Overview\r\n\r\nAdds support for ulids https://github.com/ulid/spec. Shopify has really popularized these and have a lot of benefits https://news.ycombinator.com/item?id=34294693",
        "html_url": "https://github.com/colinhacks/zod/pull/2049",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 70b95abc7c5d079dd925cadcf54714ab61712750 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63fd6bb02873930008ccd97d |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2049--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2049--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTIwNDktLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.eNwhEWhhHzHOkmKHyeoY5t6S8OmiElnQ0RaPAlmQMxQ)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "cc @colinhacks @hugo-vrijswijk - not sure how to assign reviewers or if it's something only your team does"
        ]
      }
    ],
    "v3.21.0": [
      {
        "pr_number": 2019,
        "title": "fix typo in readme",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/2019",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 3c54461d7a649bf727aec59367eefb214ffe24fe |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63e52723ef9f920007a8797b |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2019--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2019--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTIwMTktLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.DKCdupoO54YO1A4DB1-idXtHKBg88iuhCjPvRpAyvjg)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 2045,
        "title": "feat: z.string().emoji()",
        "body": "For checking that string contains only emojis",
        "html_url": "https://github.com/colinhacks/zod/pull/2045",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 02ff61d395cf232526e683bfc7621d0e1863d764 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63edc6ab16a69f0008a0d12d |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2045--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2045--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTIwNDUtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.7-VNavcGZ8gaZe3qCN-PbtVxQSblWxrg0VaQuvkgZak)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "I would legitimately use this regularly",
          "I still need to write up the documentation in the README. If there's anything else I missed, I'm happy to tackle it when I'm back at my computer. ",
          "lgtm",
          "This is a dumb feature that provides minimal utility and will increase bundle size\r\n\r\nShould land in 3.21",
          "Does this actually validate every emoji character? I'm dubious.\r\n\r\nSince I manage [emojibase](https://emojibase.dev/), this is what a more thorough regex looks like: https://raw.githubusercontent.com/milesj/emojibase/master/packages/regex/index.js",
          "Maybe just found a weird bug? Numbers will actually bypass the validator and succeed the check"
        ]
      },
      {
        "pr_number": 2048,
        "title": "Improve variable name clarity",
        "body": "Thanks for Zod, great library!\r\n\r\nQuick PR to improve the clarity of the variable name `data`",
        "html_url": "https://github.com/colinhacks/zod/pull/2048",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 102948dd591b138e811318862a139f4d7e1214b2 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63ee7dce07861b0008ca29c3 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2048--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2048--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTIwNDgtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.ymOCSMdrwe1TY3g3t5sAfCarM4VCieot5cYEgDiF58I)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Thanks!",
          "Glad to help, thanks for the merge!"
        ]
      },
      {
        "pr_number": 2057,
        "title": "Add documentation for the param parameter of z.custom",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/2057",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 5cec1871ac21627608af6c07585d5e50ff30f281 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63f0d9bc99e6970008656db3 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2057--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2057--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTIwNTctLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.DpIt0wTsNbFU3AScyAquRpk3bxQK0bqEt50h6PMsxEg)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 2057,
        "title": "Add documentation for the param parameter of z.custom",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/2057",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 5cec1871ac21627608af6c07585d5e50ff30f281 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63f0d9bc99e6970008656db3 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2057--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2057--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTIwNTctLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.DpIt0wTsNbFU3AScyAquRpk3bxQK0bqEt50h6PMsxEg)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 2019,
        "title": "fix typo in readme",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/2019",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 3c54461d7a649bf727aec59367eefb214ffe24fe |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63e52723ef9f920007a8797b |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2019--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2019--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTIwMTktLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.DKCdupoO54YO1A4DB1-idXtHKBg88iuhCjPvRpAyvjg)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 2097,
        "title": "BRAND Record to Non Partial",
        "body": "This PR is an artifact of the discussion.\r\nhttps://github.com/colinhacks/zod/discussions/2069#discussioncomment-5091931\r\n\r\nA `Record` keyed by `string`, `number` or `symbol` is `Non Partial`, but `BRAND` (which should behave similarly) is `Partial`.\r\nThis PR ensures that a key with `BRAND` will also be `Non Partial`.",
        "html_url": "https://github.com/colinhacks/zod/pull/2097",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | e9298e26777f58bb2c95dc3fcebd80602a89bae2 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63f7e6ce12180800081a2781 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2097--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2097--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTIwOTctLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.9vtFB-j5HNQs7I8Y8-wtmOg7EdjL4YAgGANaYNC1iKs)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Looks good!",
          "It doesn't work:\r\n\r\n```ts\r\nconst zodKey = Z.string().brand('zodKey')\r\nconst zodRecord = Z.record(zodKey, Z.number())\r\ntype ZodRecord = Z.infer<typeof zodRecord>\r\n```\r\n\r\nstill infers as possibly undefined values. Is there maybe a regression @colinhacks? @Hiroshiba I don't see any tests in your PR, was it working with this example when you were submitting it?",
          "I am also observing this unexpected behaviour where using a branded type as the record key would result in a partial record \ud83e\udd14 "
        ]
      },
      {
        "pr_number": 2058,
        "title": "Fix email issues in pull request #1982",
        "body": "- [x] Invalidate emails with dot next other\r\n- [x] Invalidate IPv4 address whit numbers bigger than 255\r\n- [x] Add IPv6 domain",
        "html_url": "https://github.com/colinhacks/zod/pull/2058",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 2c5b4e39e14a534192e9b75d5216d01c59302caf |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63f4feace70a4200080e74d2 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2058--guileless-rolypoly-866f8a.netlify.app/](https://deploy-preview-2058--guileless-rolypoly-866f8a.netlify.app/) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTIwNTgtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.ilPf3P_SYJniuZL9ayNZie7a3e9kKqvFwHV5Bbl7-9I)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Looks good!"
        ]
      },
      {
        "pr_number": 2066,
        "title": "feat(#2059): z.string.ip() - add support for IP address",
        "body": "This pull request solves #2059 adding [IP Address](https://en.wikipedia.org/wiki/IP_address) validation in zod string\r\n\r\n- [x] Basic implementation\r\n- [x] Choose what type of ip \r\n- [x] Add IPv6 address\r\n- [x] Add ip to docs",
        "html_url": "https://github.com/colinhacks/zod/pull/2066",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 1808f47f3b7af5959339c808bf151b3bef05099a |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63fbcbdfe0c31d00085b7bcf |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2066--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2066--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTIwNjYtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.Iy98nUyS6nTtlvmUgDwhJfgRT6SP74G4qhFEk1KlzCE)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Immaculate."
        ]
      },
      {
        "pr_number": 2087,
        "title": "feat: add `.catch` error",
        "body": "# Introduction\r\n\r\nHey \ud83d\udc4b\ud83c\udffb\r\n\r\nThis PR introduces a way to collect a `ZodError` when using `.catch` method, which can be useful in many case when wanting to collect logs whenever default value is used.\r\n\r\n# Example\r\n```ts\r\nconst numberWithErrorCatch = z.number().catch((e) => {\r\n  console.error(e);\r\n\r\n  return 42;\r\n});\r\n\r\n// No error shown in console.\r\nnumberWithErrorCatch.parse(5); // => 5\r\n\r\n// Default value is returned, an error will be shown in console.\r\nnumberWithErrorCatch.parse(\"tuna\"); // => 42\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/2087",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | e7b1f89243144f5cedb10c5399621f1ae63e2b21 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63fbd268e30f640008975446 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2087--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2087--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTIwODctLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.229XuMbYdYfJeGSGvhFjhdVeXK2ZJerGLKCPb17JLMs)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Great stuff! Made a small tweak - passing a `ctx` object into the catch handler to leave room for future APIs and so we can avoid instantiating a ZodError instance if the validation passes. Creating Errors in JavaScript is slow/expensive."
        ]
      },
      {
        "pr_number": 2090,
        "title": "FIX: emoji regex and tests",
        "body": "so it was really late when Theo put the bounty up on the stupid emoji validation. It had some errors but got merged in while I was sleeping. This fixes some of the issues that were still on the PR. See #2045 \r\n\r\nIt also turns out the regex can be made much nicer using unicode codepoints in the Regex, see: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Unicode_Property_Escapes and https://unicode.org/reports/tr51/#Emoji_Properties",
        "html_url": "https://github.com/colinhacks/zod/pull/2090",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 8c1915b0819f8f576767e8b7ae453fbeea52763c |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63fbe882d1f25b0008433a5e |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2090--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2090--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTIwOTAtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.4MUAO1nFUwcsrqRCOmoDrl7bg0wjno2ilChYJzW1u0M)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "I'd fixed this with the somewhat hacky per-character validation, but this is definitely better. I was briefly worried that unicode property escapes might not be supported across all engines/runtimes (we've had issues with lookbehind assertions) but it seems to be. \ud83d\udc4d Thanks!"
        ]
      },
      {
        "pr_number": 2038,
        "title": "Add `.toLowerCase()` and `.toUpperCase()` to ZodString",
        "body": "This adds `lowerCase()` to `ZodString`.\r\n\r\n```ts\r\nz.string().lowerCase().parse('LOWERCASE') = 'lowercase'\r\n\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/2038",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 325edea8d0240f597e9e794ae1431609cb5c03ba |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63fbec5ec4cbd20008818c0d |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2038--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2038--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTIwMzgtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.RMQkiRDdZuaNhovEn4TspjU0X0jSJ6CADMPU-ijwmg0)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "This already works:\r\n```ts\r\nconsole.log( z.string().parse( 'LOWERCASE' ).toLowerCase() ) // 'lowercase'\r\n```\r\n\r\nSo why do we need another way of doing this?",
          "Than why is there this:\r\n\r\n```ts\r\nconsole.log(z.string().trim().parse(' trim ')) // 'trim'\r\n```\r\nIf you could just do this:\r\n\r\n```ts\r\nconsole.log(z.string().parse(' trim ').trim()) // 'trim'\r\n```",
          "Personally, I don't know why we need the trim method, because like you said, we can just do this:\r\n```ts\r\nconsole.log(z.string().parse(' trim ').trim()) // 'trim'\r\n```\r\n\r\nBut ultimately, it's not my call weather or not things like this make it in. I'm just trying to ask for your reasoning about why we need `lowerCase`. To me, adding `lowerCase` simply because we have `trim` is not a good enough reason. Because then where do we stop adding things like this? Seems like a lot of [scope creep](https://en.wikipedia.org/wiki/Scope_creep).",
          "Obviously you are right but `trim()` and `lowerCase()` could be used in scenarios where you have to parse the same zod schema several times.\r\nSo you dont have to call `toLowerCase()` everytime.\r\n\r\nI know it's not ideal but imagine something like this:\r\n\r\n```ts\r\nconst UserSchema = z.object({\r\n\tname: z.string().trim().lowerCase(),\r\n\temail: z.string().trim().lowerCase().email(),\r\n)}\r\n\r\nconst User = UserSchema.parse(userData)\r\n\r\n// or\r\n\r\nconst User = {\r\n\tname: userData.name.trim().toLowerCase(),\r\n\temail: userData.email.trim().toLowerCase(),\r\n}\r\n```\r\n\r\nWith zod you could reuse the Schema and don't have to pay attention to things like `trim()` or `toLowerCase()`.\r\n\r\n\r\n",
          "> So why do we need another way of doing this?\r\n\r\nThere's value in only needing to declare this transform once, instead of per-parse.\r\n\r\nI reluctantly added `.trim()` because I was resistant to modifying the input inside the parsing logic for `ZodString`. But ultimately it's a really clean API that's useful, so I decided to be less dogmatic about siloing all transformation logic in `ZodEffect`. We now have `.endsWith` and `.startsWith` too so it makes sense to add `.toLowerCase()` and `.toUpperCase()` too imo. \r\n\r\n"
        ]
      },
      {
        "pr_number": 1711,
        "title": "add checks @ `ZodBigInt`.",
        "body": "Hey \ud83d\udc4b \r\n\r\nThis PR adds `.gt`, `.gte`, `.lt`, `.lte`, `.positive`, `.negative`, `.nonpositive`, `.nonnegative` & `.multipleOf` to `ZodBigInt`.\r\n\r\ncloses #1592.",
        "html_url": "https://github.com/colinhacks/zod/pull/1711",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | c465cb4848802e7d6fe3ee33f1647d6eb1264fe8 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63d7034736fce70009f36b09 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1711--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1711--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE3MTEtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.K56nZRbDGyK1VjuDC_lkdMqJCfb1Za4Pelm3ZHgYy5s)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Thanks Igal! I like a lot of this but I made some changes. \r\n\r\nI consolidated `ZodBigIntTooSmallIssue` into `ZodTooSmallIssue` by converting `minimum: number` to `minimum: number | bigint`. I appreciate the effort to avoid breaking changes on the existing issue types, but I'd rather keep `too_big/too_small/etc` consolidated into a single issue type.\r\n\r\nI got rid of all the `.safe()/.unsafe()` stuff, since it doesn't apply to bigints - the point of using a bigint is to not worry about being inside the safe integer range. I'd accept a PR to add `.safe()` to `ZodNumber` where it'd have more utility. But `.gigantic/.unsafe` seem unnecessary to me. ",
          "Thanks Colin! \u26a1 \r\n\r\n> I got rid of all the .safe()/.unsafe() stuff, since it doesn't apply to bigints - the point of using a bigint is to not worry about being inside the safe integer range. I'd accept a PR to add .safe() to ZodNumber where it'd have more utility. But .gigantic/.unsafe seem unnecessary to me.\r\n\r\nThe use case I was thinking about was a 3rd party library, e.g. a database driver, returning `bigint` values, but zod consumer knows the underlying value should be in the safe integer range (`select count(*) as friends from people left join friendships group by people.id` - friends column might return as bigint, but although there's lots of people, most people don't have that many friends). So a helper such as `ZodBigInt.safe()` allows to describe this explictly and chain with `.transform(Number)` knowing the parsed underlying value is unchanged.\r\n\r\nI'll add a separate PR for `ZodNumber.safe()` as js behavior with anything beyond `Number.MAX_SAFE_INTEGER` behaves weirdly.\r\n\r\nDone #1753.",
          "> The use case I was thinking about was a 3rd party library, e.g. a database driver, returning `bigint` values, but zod consumer knows the underlying value should be in the safe integer range (`select count(*) as friends from people left join friendships group by people.id` - friends column might return as bigint, but although there's lots of people, most people don't have that many friends). So a helper such as `ZodBigInt.safe()` allows to describe this explictly and chain with `.transform(Number)` knowing the parsed underlying value is unchanged.\r\n\r\nThis makes a lot of sense, sorry."
        ]
      },
      {
        "pr_number": 2022,
        "title": "docs: Update ERROR_HANDLING.md - custom error map example",
        "body": "Makes the example more consistent with the provided explanations above as well as increasing the clarity of the example. Can for example be easy to miss that you need to name the error map variable exactly the same as the property field when passing it this way.",
        "html_url": "https://github.com/colinhacks/zod/pull/2022",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | ab281429b5ee3cce0259b8ceb24c86af4f4a6444 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63e65573ad6ff8000824148a |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2022--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2022--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTIwMjItLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.x3Em6vhJLUve9MLgBBpS8Ve6LmQmrExngyvRXLlbUh0)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 2107,
        "title": "Refactoring of ZodFormattedError type to improve tsc check time",
        "body": "This small refactoring of ZodFormattedError fix several  performance issues in some edge cases.\r\n\r\nI did some benchmarks with simple case with typescript compiler option **strict: false**   https://github.com/gydroperit/zod-test-regression\r\n\r\n\r\n\r\n1. Now amount of generated types three times less than before, while  building typescript project, thus almost halves **Check time**\r\n\r\nWithout fix\r\n\r\n```Files:              72\r\nLines:           30507\r\nIdentifiers:     49830\r\nSymbols:         47942\r\nTypes:           17794\r\nInstantiations:  29270\r\nMemory used:    77234K\r\nI/O read:        0.00s\r\nI/O write:       0.00s\r\nParse time:      0.31s\r\nBind time:       0.13s\r\nCheck time:      0.31s\r\nEmit time:       0.01s\r\nTotal time:      0.75s\r\n```\r\nwith this fix\r\n```\r\nFiles:              72\r\nLines:           30508\r\nIdentifiers:     49824\r\nSymbols:         44537\r\nTypes:            5659\r\nInstantiations:  17489\r\nMemory used:    70989K\r\nI/O read:        0.00s\r\nI/O write:       0.00s\r\nParse time:      0.31s\r\nBind time:       0.12s\r\nCheck time:      0.20s\r\nEmit time:       0.01s\r\nTotal time:      0.63s\r\n```\r\n\r\n2. Second issue is maybe more  important than 15 ms of build time. On some reason VS Code on latest  version of zod has very laggy intellisense autocompletion(about 1 to 3 seconds to show autocomplete list) and slow ESLint check time in source files with zod used(About 8 seconds in my case). Even this strict option set to true.\r\nAfter fix - it will run smooth like in previous version,\r\n\r\nThis problem also described in https://stackoverflow.com/questions/74881472/slow-typescript-autocompletion-in-vs-code-for-zod\r\nhttps://github.com/colinhacks/zod/issues/1741\r\nhttps://github.com/microsoft/TypeScript/issues/45824\r\n\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/2107",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 4972401ebd7212c66262b4519525d1d55ef88856 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63fca09c53190b00082d7e64 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2107--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2107--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTIxMDctLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.5_2Vd_WfW-6bGKiSiOp0el2zeeUFYW7Eg9ank4nvbdE)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Makes sense, looks good. Thanks!"
        ]
      },
      {
        "pr_number": 1985,
        "title": "Bump http-cache-semantics from 4.1.0 to 4.1.1",
        "body": "Bumps [http-cache-semantics](https://github.com/kornelski/http-cache-semantics) from 4.1.0 to 4.1.1.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/kornelski/http-cache-semantics/commit/24496504352199caf360d1b4d4a01efdc8a7249e\"><code>2449650</code></a> Update mocha</li>\n<li><a href=\"https://github.com/kornelski/http-cache-semantics/commit/560b2d8ef452bbba20ffed69dc155d63ac757b74\"><code>560b2d8</code></a> Don't use regex to trim whitespace</li>\n<li><a href=\"https://github.com/kornelski/http-cache-semantics/commit/b1bdb92638426fab978f31e1330b6833015cabf0\"><code>b1bdb92</code></a> Remove linting package zoo</li>\n<li><a href=\"https://github.com/kornelski/http-cache-semantics/commit/c20dc7eeca608339143857953ee7ed9343fe6d3d\"><code>c20dc7e</code></a> Cache 308</li>\n<li>See full diff in <a href=\"https://github.com/kornelski/http-cache-semantics/compare/v4.1.0...v4.1.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=http-cache-semantics&package-manager=npm_and_yarn&previous-version=4.1.0&new-version=4.1.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/colinhacks/zod/network/alerts).\n\n</details>",
        "html_url": "https://github.com/colinhacks/zod/pull/1985",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | bded268642f3fbbdb6608cd285fa4e8baf80b529 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63de0cb87ee4080009d15fb3 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1985--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1985--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE5ODUtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.JTmTvTX3ed4Pr1gAKojD1c-DjW6xoFwzIdu78OQIL6k)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 2139,
        "title": "readme-zh: add missing `)`",
        "body": "readme-zh: add missing `)`",
        "html_url": "https://github.com/colinhacks/zod/pull/2139",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 0db1fc284a8c54aeb5d6e2bbcc8e4d9b0fd4838b |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/6402cba056ff75000778e28e |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2139--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2139--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTIxMzktLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.-tQR8RW-bsk3J44pIX4bvWN02bXrF5T9gIlfT3hdc5E)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1753,
        "title": "add `ZodNumber.safe()` & `ZodNumber.isSafe`.",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1753",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|:-:|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 64f8e8ccc84ffe02b25eefb76eb74401b70eec22 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/640319066b6b050008870f49 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1753--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1753--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE3NTMtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.z-lrmhTKzjARN6KF8rPntZ9Gf8aACWts0FMJy-PlgHM)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      }
    ],
    "v3.20.5": [],
    "v3.20.4": [],
    "v3.20.3": [
      {
        "pr_number": 1617,
        "title": "Propagate custom error type to ZodFormattedError subfields",
        "body": "This PR should fix #1616.",
        "html_url": "https://github.com/colinhacks/zod/pull/1617",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 4e79763d5b2265c475769476b51f2bcecb9cc87a |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/6386f4ba38e7cd0008b177a4 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1617--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1617--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE2MTctLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.MNJr5l7obPQ_MuOhocKmf35YmJ1sZkLK9aDRZT3KveI)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1680,
        "title": "add more test cases for `z.coerce`.",
        "body": "Hey \ud83d\udc4b \r\n\r\nI always forget these js weird spots, and wanted to gain more confidence with the new method.\r\n\r\nBtw, some cases throw native errors and not `z.ZodError`s, should we catch and handle it the \"zod way\"?",
        "html_url": "https://github.com/colinhacks/zod/pull/1680",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 2aa12b5f9c97570c4c858bf7d2a33da5c166112e |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/639794bd22f63a000801f87b |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1680--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1680--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE2ODAtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.e_mZM1H2vHKiw_dMVs3H9ATfB98zT5745EwALZUuCy0)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Thanks! Love this!"
        ]
      },
      {
        "pr_number": 1695,
        "title": "Add Modular Forms to form integrations in README",
        "body": "Is it intended to add own projects to the ecosystem area? If no or the linking is not appropriate at this point, I understand if you close the PR.",
        "html_url": "https://github.com/colinhacks/zod/pull/1695",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | f95229c0fd061665f0694ac4d13962331cdd03ee |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/6399f76d32c73a0008f457fe |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1695--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1695--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE2OTUtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.v1j8Tn0B_oa3nGY0eLv4R5YZA6cyzXa9pe7d008qPj0)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Very much intended and encouraged! Thanks Fabian!"
        ]
      },
      {
        "pr_number": 1702,
        "title": "change the chaining order of nullish method",
        "body": "Solves https://github.com/colinhacks/zod/discussions/1565",
        "html_url": "https://github.com/colinhacks/zod/pull/1702",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 9f7dbae68a846cc9f81b05bf62479edca7ae5ee7 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63b054233cf0c8000884d81e |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1702--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1702--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE3MDItLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.m-7jQlxPfy84vbBI72v6S5jUJ570mKJnCe7NU_Xiuqs)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Hey \ud83d\udc4b\n\nThe underlying issue has been fixed @ #1542, no?"
        ]
      },
      {
        "pr_number": 1742,
        "title": "docs: Instruct users to return z.NEVER in .superRefine() when providing a type predicate",
        "body": "This resolves #1704.",
        "html_url": "https://github.com/colinhacks/zod/pull/1742",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | b33188126ecb4b9954be59094e46d3492cd91231 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63a46b9bf901be00089ac150 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1742--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1742--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE3NDItLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.im231K1kxeKXnPi7smIqrxiE84wc1EvXx2MvZtncp0I)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Thanks @zetaraku . Feel free to update the tests to demonstrate this best practice.",
          "I found that there is another `README.md` in `deno/lib`.\r\nWhy are there two `README.md`? I'm afraid it's out of sync."
        ]
      },
      {
        "pr_number": 1720,
        "title": "Fix small typo in ERROR_HANDLING.md",
        "body": "- `errorMap` \u2192 `myErrorMap`",
        "html_url": "https://github.com/colinhacks/zod/pull/1720",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 990392028d9e715810167e2282a58cf6270f85f2 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/639ed6c45e365a0009345cf6 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1720--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1720--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE3MjAtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.Od-89htUMJG6OYLHwCVI_rYai0P-yrTR2L-PmZz2nXA)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1719,
        "title": "Improve accuracy of the `isAsync` type guard",
        "body": "This PR updates the `isAsync` type guard to check the `typeof Promise` result against a string literal instead of the `undefined` data type. This change should improve the accuracy and reliability of the function when determining if a value is a Promise.",
        "html_url": "https://github.com/colinhacks/zod/pull/1719",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 89511b1487a55d7e05bf96b6fcd348b1c35f1d85 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/639eac32acea2e000809fc00 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1719--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1719--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE3MTktLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.56IsfnnNGYaD3ByC1gq4vCA58beA8JM7QL8ZcRllzmI)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "LGTM. Thanks for fixing this"
        ]
      },
      {
        "pr_number": 1733,
        "title": "fix: Fix `ZodCatch`",
        "body": "This PR fixes `ZodCatch`.\r\n\r\nIt looks like `ZodCatch` was a product of a quick copy-paste from `ZodDefault`, which introduced some bugs to it.\r\n\r\n1. The `output` of a `ZodCatch` was previously defined as `util.noUndefined<T[\"_output\"]>` (from `ZodDefault`) when it should actually be `T[\"_output\"] | <<catch value>>`.\r\n2. The `input` of a `ZodCatch` was previously defined as `T[\"_input\"] | undefined` (also from `ZodDefault`) when it should actually be the `T[\"_input\"]` unchanged.\r\n3. Renamed props and methods from `default` to `catch`.",
        "html_url": "https://github.com/colinhacks/zod/pull/1733",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | e4845e00dcf96e45218cd8f1479510763bad233f |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63a6a0634f3f6b000805f7ab |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1733--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1733--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE3MzMtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.srVuxKspxvu1oSRIPZFNv0PyollVBysnSIAQcIFQYuw)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Yikes, good catch. \r\n\r\nI pushed a commit to fix the tests, since those weren't updated. I also got rid of the second generic on `ZodCatch` - the value passed into `.catch()` should match `T['output']` exactly and there's no need for additional inference there. Good PR!",
          "Which release is this planned to be put into ? ",
          "Landed in `zod@3.20.3`"
        ]
      },
      {
        "pr_number": 1749,
        "title": "Fix datetime offset without comma",
        "body": "An ISO datetime with an offset without comma should be valid\r\n\r\nhttps://en.wikipedia.org/wiki/ISO_8601#Time_zone_designators",
        "html_url": "https://github.com/colinhacks/zod/pull/1749",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 02e4f935ad712c1b49096c669113a9b4c2a6f23b |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63a5e30f175d290008c870b9 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1749--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1749--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE3NDktLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.HCAJibawtx0EKYeWdCYOgT702ax6-dO-oqBeLUlvNT0)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Looks good! "
        ]
      },
      {
        "pr_number": 1714,
        "title": "add `ZodNumber.isFinite`, make `ZodNumber.isInt` true if `.multipleOf(int)`.",
        "body": "Hey \ud83d\udc4b \r\n\r\n- Forgot to add `.isFinite` @ #1546.\r\n\r\n- A multiple of an integer is an integer, so let's make `.isInt` truthy in that case. This might allow people to ditch `.int()` if all they need is `.multipleOf(int)` but had something that uses `isInt`.",
        "html_url": "https://github.com/colinhacks/zod/pull/1714",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 8af7f2510d1d76988cd65fc276abb06730c00bf1 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/639db3db8cf37d000910d04b |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1714--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1714--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE3MTQtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.4nn5WwJCe-VZRagb8i7TPZMUG_c1uXxa7pO-OgCR5zI)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "I dig it. Thanks!"
        ]
      },
      {
        "pr_number": 1713,
        "title": "Discriminated union example fails to parse",
        "body": "https://zod.dev/?id=discriminated-unions\r\n\r\n``` typescript\r\n\u2026\r\nmyUnion.parse({ type: \"success\", data: \"yippie ki yay\" });\r\n```\r\n\u2192 :x:\r\n``` json\r\n{\r\n\t\"ZodError\": [{\r\n\t\t\"code\": \"invalid_union_discriminator\",\r\n\t\t\"options\": [\r\n\t\t\t\"success\",\r\n\t\t\t\"failed\"\r\n\t\t],\r\n\t\t\"path\": [\r\n\t\t\t\"status\"\r\n\t\t],\r\n\t\t\"message\": \"Invalid discriminator value. Expected 'success' | 'failed'\"\r\n\t}]\r\n}\r\n```\r\n\u2026 because the key we want is `status`, not `type`.\r\n\r\nFix:\r\n``` typescript\r\nmyUnion.parse({ status: \"success\", data: \"yippie ki yay\" });\r\n```\r\n\u2192 :white_check_mark:",
        "html_url": "https://github.com/colinhacks/zod/pull/1713",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 90450df22fb94df8a1feecf2fcaf85d372be5a51 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/639d5239685061000914409f |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1713--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1713--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE3MTMtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.1Ici-AdWMxjXNzYqnQvqOuig5IFCc2avnk6EVqYKdKs)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Good catch, thanks!"
        ]
      },
      {
        "pr_number": 1712,
        "title": "fix: [#1693] Tuple with empty items",
        "body": "`map()` as referenced in [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) is is invoked only for array indexes which have assigned values. It is not invoked for empty slots in sparse arrays. \r\n\r\n\r\nIn some cases, these slots behave as `undefined` (that would be caught by existing implementation) but in others (e.g. array iteration methods), empty slots are skipped. More info [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#array_methods_and_empty_slots).\r\n\r\n\r\nDestructing will result in usage of property enumeration instead of iterator which should fix this issue.  \r\n\r\nScreenshot for reference.\r\n<img width=\"351\" alt=\"Screenshot 2022-12-17 at 00 19 40\" src=\"https://user-images.githubusercontent.com/21112021/208204131-59684de9-d423-4c13-aee5-3da6c05c37d8.png\">\r\n\r\nFixes both: `ZodTuple` and `ZodArray`. \r\nReported in #1693 ",
        "html_url": "https://github.com/colinhacks/zod/pull/1712",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 0aaebaae11b919323e633d5ecf2ab691507b8e11 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/639d14a4552e4e0009b36c55 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1712--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1712--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE3MTItLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.thmobubljr1X63qcNxOkc13Vcka261cuylkOSlWklkc)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Gotta love JavaScript. Thanks!"
        ]
      },
      {
        "pr_number": 1683,
        "title": "fix: #1668 email regex safari compat",
        "body": "Fixes #1668\r\n\r\nI've applied back the changes from #1648, and replaced the nagative lookbehind by a negated set (`[^-]`) and stripped the quantifier from `2` to `1` (`{1,}`) because the negated set is now part of the match.",
        "html_url": "https://github.com/colinhacks/zod/pull/1683",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 72d155325bfa1fc4dc2b3a7ba11ef0bf12b3322f |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63983846cb30020009fce062 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1683--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1683--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE2ODMtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.Q8mQfgvSfGB8ZTsiKz1-o7QvCbMyT_d4R-Ha1oS1vJA)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Forgot about special characters in the new negated set. I fixed it, and added a test for it."
        ]
      },
      {
        "pr_number": 1699,
        "title": "docs: fix typo",
        "body": "The original snippet created `stringSchema1` and `stringSchema2` variables but forgot to use the correct names after that.\r\n\r\nThis PR first fixes the names and realized that the example can be fixed by only using one `stringSchema` variable.",
        "html_url": "https://github.com/colinhacks/zod/pull/1699",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 853bc626d6d81c55b834df41aeca1bd8e20cdb79 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/639b1c3c0fcf4d00087274df |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1699--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1699--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE2OTktLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.dYCaRBmhp-93zg-zP7LRYtau72FMQw7nzMM34FhnB-c)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Thanks!"
        ]
      },
      {
        "pr_number": 1700,
        "title": "fix installation links in table of contents",
        "body": "i suggest removing the table of contents entirely, since it's so easy to accidentally break and github now has them built in anyway:\r\n\r\n![image](https://user-images.githubusercontent.com/57028336/207800766-d72e842b-31e6-4848-bdf1-d2437999478d.png)\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/1700",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 9fd55e8a1c7dad7196aeaf88a3bd231a3ff7d1ea |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/639acf184773de000986543a |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1700--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1700--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE3MDAtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.cMY0G5d_sBxEORG310HRBidqDDBjSyug5JlMO7ZK0oo)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1756,
        "title": "fix(#1743): Fix passing params in root class",
        "body": "This PR fixes the cascading of the `createParams` to other schemas when using the helper methods provided by `ZodType`.\r\n\r\nPreviously,\r\n\r\n```ts\r\nconst MySchema = z\r\n  .string({ description: \"this is a string schema\" })\r\n  .optional();\r\n// => No longer has the description associated with it\r\n```\r\n\r\nThe params would get lost if we called any of the helper methods (`.optional()`, `.nullable()` etc.).\r\n\r\nNow:\r\n\r\n<img width=\"482\" alt=\"Screenshot 2022-12-24 at 7 43 18 PM\" src=\"https://user-images.githubusercontent.com/98408205/209452613-c38717f3-7c91-4681-ad1b-9a80320df0c2.png\">\r\n\r\n<img width=\"130\" alt=\"Screenshot 2022-12-24 at 7 43 29 PM\" src=\"https://user-images.githubusercontent.com/98408205/209452615-9498c44c-1a55-44bc-92b2-8b7195209abd.png\">",
        "html_url": "https://github.com/colinhacks/zod/pull/1756",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | b02b6b18f9752f9a61c0a470c4aa54c9241c8314 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63b055aaaeee0d00084f3b64 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1756--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1756--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE3NTYtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.ZYkGNVCzIgoKboI376YJuxinahsxxf9jHV0f4XVoCz0)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "this looks good, except can you tell me why there are changes to `deno/lib/README.md`?"
        ]
      },
      {
        "pr_number": 1702,
        "title": "change the chaining order of nullish method",
        "body": "Solves https://github.com/colinhacks/zod/discussions/1565",
        "html_url": "https://github.com/colinhacks/zod/pull/1702",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 9f7dbae68a846cc9f81b05bf62479edca7ae5ee7 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63b054233cf0c8000884d81e |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1702--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1702--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE3MDItLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.m-7jQlxPfy84vbBI72v6S5jUJ570mKJnCe7NU_Xiuqs)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Hey \ud83d\udc4b\n\nThe underlying issue has been fixed @ #1542, no?"
        ]
      },
      {
        "pr_number": 1756,
        "title": "fix(#1743): Fix passing params in root class",
        "body": "This PR fixes the cascading of the `createParams` to other schemas when using the helper methods provided by `ZodType`.\r\n\r\nPreviously,\r\n\r\n```ts\r\nconst MySchema = z\r\n  .string({ description: \"this is a string schema\" })\r\n  .optional();\r\n// => No longer has the description associated with it\r\n```\r\n\r\nThe params would get lost if we called any of the helper methods (`.optional()`, `.nullable()` etc.).\r\n\r\nNow:\r\n\r\n<img width=\"482\" alt=\"Screenshot 2022-12-24 at 7 43 18 PM\" src=\"https://user-images.githubusercontent.com/98408205/209452613-c38717f3-7c91-4681-ad1b-9a80320df0c2.png\">\r\n\r\n<img width=\"130\" alt=\"Screenshot 2022-12-24 at 7 43 29 PM\" src=\"https://user-images.githubusercontent.com/98408205/209452615-9498c44c-1a55-44bc-92b2-8b7195209abd.png\">",
        "html_url": "https://github.com/colinhacks/zod/pull/1756",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | b02b6b18f9752f9a61c0a470c4aa54c9241c8314 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63b055aaaeee0d00084f3b64 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1756--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1756--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE3NTYtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.ZYkGNVCzIgoKboI376YJuxinahsxxf9jHV0f4XVoCz0)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "this looks good, except can you tell me why there are changes to `deno/lib/README.md`?"
        ]
      },
      {
        "pr_number": 1791,
        "title": "Updated `deno/lib/README.md` to match `zod/README.md`",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1791",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | b41489f2d6c2ce837ca3cdccbc350ba144a1e67c |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63b056a5e564f10009d055b2 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1791--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1791--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE3OTEtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.9xRbJZbEDYLbxz_buUtBchdeaQyDU7q-HmnxP6yX25U)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1791,
        "title": "Updated `deno/lib/README.md` to match `zod/README.md`",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1791",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | b41489f2d6c2ce837ca3cdccbc350ba144a1e67c |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63b056a5e564f10009d055b2 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1791--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1791--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE3OTEtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.9xRbJZbEDYLbxz_buUtBchdeaQyDU7q-HmnxP6yX25U)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1756,
        "title": "fix(#1743): Fix passing params in root class",
        "body": "This PR fixes the cascading of the `createParams` to other schemas when using the helper methods provided by `ZodType`.\r\n\r\nPreviously,\r\n\r\n```ts\r\nconst MySchema = z\r\n  .string({ description: \"this is a string schema\" })\r\n  .optional();\r\n// => No longer has the description associated with it\r\n```\r\n\r\nThe params would get lost if we called any of the helper methods (`.optional()`, `.nullable()` etc.).\r\n\r\nNow:\r\n\r\n<img width=\"482\" alt=\"Screenshot 2022-12-24 at 7 43 18 PM\" src=\"https://user-images.githubusercontent.com/98408205/209452613-c38717f3-7c91-4681-ad1b-9a80320df0c2.png\">\r\n\r\n<img width=\"130\" alt=\"Screenshot 2022-12-24 at 7 43 29 PM\" src=\"https://user-images.githubusercontent.com/98408205/209452615-9498c44c-1a55-44bc-92b2-8b7195209abd.png\">",
        "html_url": "https://github.com/colinhacks/zod/pull/1756",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | b02b6b18f9752f9a61c0a470c4aa54c9241c8314 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63b055aaaeee0d00084f3b64 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1756--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1756--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE3NTYtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.ZYkGNVCzIgoKboI376YJuxinahsxxf9jHV0f4XVoCz0)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "this looks good, except can you tell me why there are changes to `deno/lib/README.md`?"
        ]
      },
      {
        "pr_number": 1702,
        "title": "change the chaining order of nullish method",
        "body": "Solves https://github.com/colinhacks/zod/discussions/1565",
        "html_url": "https://github.com/colinhacks/zod/pull/1702",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 9f7dbae68a846cc9f81b05bf62479edca7ae5ee7 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63b054233cf0c8000884d81e |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1702--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1702--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE3MDItLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.m-7jQlxPfy84vbBI72v6S5jUJ570mKJnCe7NU_Xiuqs)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Hey \ud83d\udc4b\n\nThe underlying issue has been fixed @ #1542, no?"
        ]
      },
      {
        "pr_number": 1794,
        "title": "fix deno literal test.",
        "body": "It is currently throwing due to missing `expect` import.",
        "html_url": "https://github.com/colinhacks/zod/pull/1794",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 2aa0f9783301c97b1ba886aadc2d32e06ad81b42 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63b21b8a8689aa0008e62375 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1794--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1794--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE3OTQtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.IQZSZkb2kXk7iulSbqMQ1PDnwd8g8BFLrF5oJepaXYc)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1794,
        "title": "fix deno literal test.",
        "body": "It is currently throwing due to missing `expect` import.",
        "html_url": "https://github.com/colinhacks/zod/pull/1794",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 2aa0f9783301c97b1ba886aadc2d32e06ad81b42 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63b21b8a8689aa0008e62375 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1794--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1794--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE3OTQtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.IQZSZkb2kXk7iulSbqMQ1PDnwd8g8BFLrF5oJepaXYc)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1617,
        "title": "Propagate custom error type to ZodFormattedError subfields",
        "body": "This PR should fix #1616.",
        "html_url": "https://github.com/colinhacks/zod/pull/1617",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 4e79763d5b2265c475769476b51f2bcecb9cc87a |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/6386f4ba38e7cd0008b177a4 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1617--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1617--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE2MTctLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.MNJr5l7obPQ_MuOhocKmf35YmJ1sZkLK9aDRZT3KveI)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1794,
        "title": "fix deno literal test.",
        "body": "It is currently throwing due to missing `expect` import.",
        "html_url": "https://github.com/colinhacks/zod/pull/1794",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 2aa0f9783301c97b1ba886aadc2d32e06ad81b42 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63b21b8a8689aa0008e62375 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1794--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1794--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE3OTQtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.IQZSZkb2kXk7iulSbqMQ1PDnwd8g8BFLrF5oJepaXYc)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1819,
        "title": "Document `.describe()`",
        "body": "Fixes https://github.com/colinhacks/zod/issues/1443",
        "html_url": "https://github.com/colinhacks/zod/pull/1819",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 39ab7e2825030acd2c64ff14408a83e807c3b3b7 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63b8c2102506080008d4cc4f |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1819--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1819--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE4MTktLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.lDJxZr38mHPvy4hZTLNs5OWqHv7H8I9si5ov32jNoE0)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Great job.",
          "Thanks for the quick review & merge!"
        ]
      },
      {
        "pr_number": 1822,
        "title": "fix: compile error in sample code",
        "body": "- null check missing `props` prefix and optional check\r\n- ya i copy pasted it so what",
        "html_url": "https://github.com/colinhacks/zod/pull/1822",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | bdb05345f2fb2883cf2631d636437a2ee1be7d5f |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63b8ce68a46bfc0007000da8 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1822--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1822--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE4MjItLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.KrlUCaYje_bg2Z-5evzeLUqwOqeMh9wNELYQ6U4zGd8)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1830,
        "title": "update homepage link in package.json",
        "body": "This PR updates the `homepage` field in the `package.json` file. This way, it will show up on the NPM website. The GH repo link will still be available under \"Repository\".\r\n\r\n<img width=\"403\" alt=\"Screenshot 2023-01-06 at 09 46 50\" src=\"https://user-images.githubusercontent.com/767959/210965230-b2db9fdb-0950-4adb-9f87-6861e5f16450.png\">\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/1830",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 6a9dc0196f6badd33b8b3d2cf1526ef5ed56d98a |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63b7e025320e0d00088578cb |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1830--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1830--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE4MzAtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.1i8eRYV2Sg_tMTq7kCorU6dkzHgbgheY_mKm7hSK7mU)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1819,
        "title": "Document `.describe()`",
        "body": "Fixes https://github.com/colinhacks/zod/issues/1443",
        "html_url": "https://github.com/colinhacks/zod/pull/1819",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 39ab7e2825030acd2c64ff14408a83e807c3b3b7 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63b8c2102506080008d4cc4f |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1819--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1819--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE4MTktLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.lDJxZr38mHPvy4hZTLNs5OWqHv7H8I9si5ov32jNoE0)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Great job.",
          "Thanks for the quick review & merge!"
        ]
      },
      {
        "pr_number": 1819,
        "title": "Document `.describe()`",
        "body": "Fixes https://github.com/colinhacks/zod/issues/1443",
        "html_url": "https://github.com/colinhacks/zod/pull/1819",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 39ab7e2825030acd2c64ff14408a83e807c3b3b7 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63b8c2102506080008d4cc4f |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1819--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1819--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE4MTktLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.lDJxZr38mHPvy4hZTLNs5OWqHv7H8I9si5ov32jNoE0)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Great job.",
          "Thanks for the quick review & merge!"
        ]
      },
      {
        "pr_number": 1822,
        "title": "fix: compile error in sample code",
        "body": "- null check missing `props` prefix and optional check\r\n- ya i copy pasted it so what",
        "html_url": "https://github.com/colinhacks/zod/pull/1822",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | bdb05345f2fb2883cf2631d636437a2ee1be7d5f |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63b8ce68a46bfc0007000da8 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1822--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1822--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE4MjItLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.KrlUCaYje_bg2Z-5evzeLUqwOqeMh9wNELYQ6U4zGd8)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1830,
        "title": "update homepage link in package.json",
        "body": "This PR updates the `homepage` field in the `package.json` file. This way, it will show up on the NPM website. The GH repo link will still be available under \"Repository\".\r\n\r\n<img width=\"403\" alt=\"Screenshot 2023-01-06 at 09 46 50\" src=\"https://user-images.githubusercontent.com/767959/210965230-b2db9fdb-0950-4adb-9f87-6861e5f16450.png\">\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/1830",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 6a9dc0196f6badd33b8b3d2cf1526ef5ed56d98a |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63b7e025320e0d00088578cb |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1830--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1830--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE4MzAtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.1i8eRYV2Sg_tMTq7kCorU6dkzHgbgheY_mKm7hSK7mU)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1822,
        "title": "fix: compile error in sample code",
        "body": "- null check missing `props` prefix and optional check\r\n- ya i copy pasted it so what",
        "html_url": "https://github.com/colinhacks/zod/pull/1822",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | bdb05345f2fb2883cf2631d636437a2ee1be7d5f |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63b8ce68a46bfc0007000da8 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1822--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1822--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE4MjItLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.KrlUCaYje_bg2Z-5evzeLUqwOqeMh9wNELYQ6U4zGd8)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1842,
        "title": "Readme: Move  \"Coercion for primitives\" section",
        "body": "The \"Coercion for primitives\" section splits up the \"String\" section and \"Datetime validation\" subsection. Without this change, \"Datetime validation\" is a subsection of \"Coercion for primitives\". This moves the \"Coercion for primitives\" section right below the \"Primitives\" section.\r\n\r\n---\r\n\r\nI am new to zod, so maybe I am missing something, but the readme would make a lot more sense this way.\r\n\r\n\r\n<img width=\"329\" alt=\"image\" src=\"https://user-images.githubusercontent.com/111561/211476748-a3e36219-2560-4ae2-953d-b16b3ef64e74.png\">\r\n\r\n---\r\n\r\nFYI the section was introduced in https://github.com/colinhacks/zod/commit/90bd884bc5c7ebf33437e525cc60f6b7371ff226#diff-b335630551682c19a781afebcf4d07bf978fb1f8ac04c6bf87428ed5106870f5R563 and extended in https://github.com/colinhacks/zod/commit/d7d49e77ccd758ee874f7866862840f88f75cbb6#diff-b335630551682c19a781afebcf4d07bf978fb1f8ac04c6bf87428ed5106870f5R594",
        "html_url": "https://github.com/colinhacks/zod/pull/1842",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 9575cfecbabeb149a4991f931cf24f685ea8c55e |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63bd035e22981a0009e5de0d |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1842--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1842--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE4NDItLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.ZujLoboKcUrl3dDJsY2IdXdKPNLmN5jfVLqEdF3ftXw)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "great job"
        ]
      },
      {
        "pr_number": 1842,
        "title": "Readme: Move  \"Coercion for primitives\" section",
        "body": "The \"Coercion for primitives\" section splits up the \"String\" section and \"Datetime validation\" subsection. Without this change, \"Datetime validation\" is a subsection of \"Coercion for primitives\". This moves the \"Coercion for primitives\" section right below the \"Primitives\" section.\r\n\r\n---\r\n\r\nI am new to zod, so maybe I am missing something, but the readme would make a lot more sense this way.\r\n\r\n\r\n<img width=\"329\" alt=\"image\" src=\"https://user-images.githubusercontent.com/111561/211476748-a3e36219-2560-4ae2-953d-b16b3ef64e74.png\">\r\n\r\n---\r\n\r\nFYI the section was introduced in https://github.com/colinhacks/zod/commit/90bd884bc5c7ebf33437e525cc60f6b7371ff226#diff-b335630551682c19a781afebcf4d07bf978fb1f8ac04c6bf87428ed5106870f5R563 and extended in https://github.com/colinhacks/zod/commit/d7d49e77ccd758ee874f7866862840f88f75cbb6#diff-b335630551682c19a781afebcf4d07bf978fb1f8ac04c6bf87428ed5106870f5R594",
        "html_url": "https://github.com/colinhacks/zod/pull/1842",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 9575cfecbabeb149a4991f931cf24f685ea8c55e |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63bd035e22981a0009e5de0d |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1842--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1842--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE4NDItLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.ZujLoboKcUrl3dDJsY2IdXdKPNLmN5jfVLqEdF3ftXw)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "great job"
        ]
      },
      {
        "pr_number": 1846,
        "title": "Readme: Add internal links \"or\" <-> \"union\"",
        "body": "To make the docs easier to navigate.",
        "html_url": "https://github.com/colinhacks/zod/pull/1846",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 4126ee652f76ef21c4c469fdfe49fedd3db3767b |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63bd96855d03fa00082220c5 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1846--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1846--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE4NDYtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.2n8gftLRKaXntt-S6zSyVKELPinZQj05rZTBLZzn0h4)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1842,
        "title": "Readme: Move  \"Coercion for primitives\" section",
        "body": "The \"Coercion for primitives\" section splits up the \"String\" section and \"Datetime validation\" subsection. Without this change, \"Datetime validation\" is a subsection of \"Coercion for primitives\". This moves the \"Coercion for primitives\" section right below the \"Primitives\" section.\r\n\r\n---\r\n\r\nI am new to zod, so maybe I am missing something, but the readme would make a lot more sense this way.\r\n\r\n\r\n<img width=\"329\" alt=\"image\" src=\"https://user-images.githubusercontent.com/111561/211476748-a3e36219-2560-4ae2-953d-b16b3ef64e74.png\">\r\n\r\n---\r\n\r\nFYI the section was introduced in https://github.com/colinhacks/zod/commit/90bd884bc5c7ebf33437e525cc60f6b7371ff226#diff-b335630551682c19a781afebcf4d07bf978fb1f8ac04c6bf87428ed5106870f5R563 and extended in https://github.com/colinhacks/zod/commit/d7d49e77ccd758ee874f7866862840f88f75cbb6#diff-b335630551682c19a781afebcf4d07bf978fb1f8ac04c6bf87428ed5106870f5R594",
        "html_url": "https://github.com/colinhacks/zod/pull/1842",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 9575cfecbabeb149a4991f931cf24f685ea8c55e |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63bd035e22981a0009e5de0d |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1842--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1842--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE4NDItLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.ZujLoboKcUrl3dDJsY2IdXdKPNLmN5jfVLqEdF3ftXw)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "great job"
        ]
      },
      {
        "pr_number": 1846,
        "title": "Readme: Add internal links \"or\" <-> \"union\"",
        "body": "To make the docs easier to navigate.",
        "html_url": "https://github.com/colinhacks/zod/pull/1846",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 4126ee652f76ef21c4c469fdfe49fedd3db3767b |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63bd96855d03fa00082220c5 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1846--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1846--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE4NDYtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.2n8gftLRKaXntt-S6zSyVKELPinZQj05rZTBLZzn0h4)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1846,
        "title": "Readme: Add internal links \"or\" <-> \"union\"",
        "body": "To make the docs easier to navigate.",
        "html_url": "https://github.com/colinhacks/zod/pull/1846",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 4126ee652f76ef21c4c469fdfe49fedd3db3767b |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63bd96855d03fa00082220c5 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1846--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1846--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE4NDYtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.2n8gftLRKaXntt-S6zSyVKELPinZQj05rZTBLZzn0h4)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1849,
        "title": "Readme: Add example for string validation for an optional field to chapter \"Unions\"",
        "body": "This is based on https://github.com/colinhacks/zod/issues/798#issuecomment-991003983.\r\n\r\nI consider it a pretty useful addition which will like save some people some manual research. \r\n\r\nEspecially since the solution was not what I was expecting and testing first\u2026",
        "html_url": "https://github.com/colinhacks/zod/pull/1849",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 935c4b97baa1101c6d39f660dc76bd7a4a1feced |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63bdd6c0985c7500080845f4 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1849--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1849--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE4NDktLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.rJOdaWBJoCh9X8cqYmPh2VFfH3i-p2Pe5Ct73uVd7yQ)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "great work! keep it up."
        ]
      },
      {
        "pr_number": 1849,
        "title": "Readme: Add example for string validation for an optional field to chapter \"Unions\"",
        "body": "This is based on https://github.com/colinhacks/zod/issues/798#issuecomment-991003983.\r\n\r\nI consider it a pretty useful addition which will like save some people some manual research. \r\n\r\nEspecially since the solution was not what I was expecting and testing first\u2026",
        "html_url": "https://github.com/colinhacks/zod/pull/1849",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 935c4b97baa1101c6d39f660dc76bd7a4a1feced |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63bdd6c0985c7500080845f4 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1849--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1849--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE4NDktLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.rJOdaWBJoCh9X8cqYmPh2VFfH3i-p2Pe5Ct73uVd7yQ)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "great work! keep it up."
        ]
      },
      {
        "pr_number": 1849,
        "title": "Readme: Add example for string validation for an optional field to chapter \"Unions\"",
        "body": "This is based on https://github.com/colinhacks/zod/issues/798#issuecomment-991003983.\r\n\r\nI consider it a pretty useful addition which will like save some people some manual research. \r\n\r\nEspecially since the solution was not what I was expecting and testing first\u2026",
        "html_url": "https://github.com/colinhacks/zod/pull/1849",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 935c4b97baa1101c6d39f660dc76bd7a4a1feced |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63bdd6c0985c7500080845f4 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1849--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1849--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE4NDktLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.rJOdaWBJoCh9X8cqYmPh2VFfH3i-p2Pe5Ct73uVd7yQ)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "great work! keep it up."
        ]
      },
      {
        "pr_number": 1877,
        "title": "Readme: Add intro to chapter Literals",
        "body": "I was trying to understand what zod literals are. The docs could benefit from an intro sentence. This is a suggestion for such an intro. However, this can probably be more specific. For example, which differences are there to TS literal types? Eg. with Symbol and BigInt (which I both know nothing about\u2026).",
        "html_url": "https://github.com/colinhacks/zod/pull/1877",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 5a7f5776b74b4962859cd1f72efa6229fb145804 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63c1122e825ffc000a0836b4 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1877--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1877--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE4NzctLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.7ou8usR0Ul-TWlusGmeAQGx1IPAbRKdk_oTu1nD9kxg)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Great work"
        ]
      },
      {
        "pr_number": 1877,
        "title": "Readme: Add intro to chapter Literals",
        "body": "I was trying to understand what zod literals are. The docs could benefit from an intro sentence. This is a suggestion for such an intro. However, this can probably be more specific. For example, which differences are there to TS literal types? Eg. with Symbol and BigInt (which I both know nothing about\u2026).",
        "html_url": "https://github.com/colinhacks/zod/pull/1877",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 5a7f5776b74b4962859cd1f72efa6229fb145804 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63c1122e825ffc000a0836b4 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1877--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1877--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE4NzctLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.7ou8usR0Ul-TWlusGmeAQGx1IPAbRKdk_oTu1nD9kxg)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Great work"
        ]
      },
      {
        "pr_number": 1843,
        "title": "fix: faker.js link in readme",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1843",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | ba5da1e301ed48cb8074c2a5c661ae25c47b1ac4 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63bd38de5fcbe900089de380 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1843--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1843--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE4NDMtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.mm4voigNXbiMGoZpXmJXFy_uBevpE4_kE0FQXvYwTrU)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1945,
        "title": "Minor typo fix",
        "body": "Minor typo fix under Basic usage \"Literals\" section",
        "html_url": "https://github.com/colinhacks/zod/pull/1945",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | c8cb93698958465164455b58bf402ab4ab4bcb40 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63d3caa4b8a5d00008524adb |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1945--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1945--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE5NDUtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.0l1ixJTBh4kQCN0vb0uBpErNqDoDzSUNhqoooDEje68)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "> Actually I think it should be 'allow' because it's being used with a plural 'literals'.\r\n\r\nI had confusion between 'allow' or 'allows', as you suggested 'allow' makes sense.\r\nUpdating PR with the same.",
          "Thanks "
        ]
      },
      {
        "pr_number": 1945,
        "title": "Minor typo fix",
        "body": "Minor typo fix under Basic usage \"Literals\" section",
        "html_url": "https://github.com/colinhacks/zod/pull/1945",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | c8cb93698958465164455b58bf402ab4ab4bcb40 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63d3caa4b8a5d00008524adb |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1945--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1945--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE5NDUtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.0l1ixJTBh4kQCN0vb0uBpErNqDoDzSUNhqoooDEje68)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "> Actually I think it should be 'allow' because it's being used with a plural 'literals'.\r\n\r\nI had confusion between 'allow' or 'allows', as you suggested 'allow' makes sense.\r\nUpdating PR with the same.",
          "Thanks "
        ]
      },
      {
        "pr_number": 1945,
        "title": "Minor typo fix",
        "body": "Minor typo fix under Basic usage \"Literals\" section",
        "html_url": "https://github.com/colinhacks/zod/pull/1945",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | c8cb93698958465164455b58bf402ab4ab4bcb40 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63d3caa4b8a5d00008524adb |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1945--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1945--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE5NDUtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.0l1ixJTBh4kQCN0vb0uBpErNqDoDzSUNhqoooDEje68)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "> Actually I think it should be 'allow' because it's being used with a plural 'literals'.\r\n\r\nI had confusion between 'allow' or 'allows', as you suggested 'allow' makes sense.\r\nUpdating PR with the same.",
          "Thanks "
        ]
      },
      {
        "pr_number": 1936,
        "title": "chore(documentation): Update CHANGELOG to redirect to Github Releases",
        "body": "The CHANGELOG is significantly out of date, and it seems release notes are now stored in Github Releases only.  This change adds a brief message to redirect users to Github Releases.",
        "html_url": "https://github.com/colinhacks/zod/pull/1936",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 088a5f3d88b4bc441cdef6f7ce718a69f7115436 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63d205d43ac8e6000862bb7a |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1936--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1936--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE5MzYtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.pxf-vzcZ-9KupNZGqD_WGXospejOkx9sVoUBQDePNv0)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1926,
        "title": "fix: [#1839] remove caught errors from issues",
        "body": "Fixes #1839. Includes tests.",
        "html_url": "https://github.com/colinhacks/zod/pull/1926",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | eddd14abd8adcdffa85891ca97c618f670d9900c |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63d6f04ecacd190009ccfd55 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1926--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1926--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE5MjYtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.cAKlR3k9epjHzPLFakk8gjlSPc_xoebJnynTDsJ5Nj8)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Your original implementation didn't account for the possibility that multiple issues might be added by the ZodCatch instance's inner schema. Fixed. Other than that, looks good, thanks!"
        ]
      },
      {
        "pr_number": 1932,
        "title": "fix: [#1784] dark mode in the documentation",
        "body": "Fixe #1784",
        "html_url": "https://github.com/colinhacks/zod/pull/1932",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 550a8e5ed5919a34a91d25d19722bfd25835cee3 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63d6f92ded88c00009fecaa6 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1932--guileless-rolypoly-866f8a.netlify.app/](https://deploy-preview-1932--guileless-rolypoly-866f8a.netlify.app/) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE5MzItLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.c0zK5K00Z-wbCQM_se1rTBjnTygiihxiKvM-WtIAW2E)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Very nice, thanks! Made some small design tweaks."
        ]
      },
      {
        "pr_number": 1797,
        "title": "Allow also \"[+-]hh\" as datetime offset",
        "body": "It adds support for `[+-]hh` datetime offset, according to https://en.wikipedia.org/wiki/ISO_8601#Time_zone_designators.\r\n\r\nExample:\r\n```\r\ndatetime.parse(\"2020-10-14T17:42:29+03\");\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/1797",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | e9e1ed49ed7164b0265ad684376277d04dc7f307 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63b2d80e4ee8f5000825b7aa |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1797--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1797--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE3OTctLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.0M9dcCEYO-6iY6Byy8kVC4ix81dIK_X-QSD-ldQQ2mo)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Looks good, thanks!",
          "So I've rolled this back in 35f0a38 given that (as @samchungy pointed out) this format can't be parsed by the `Date` constructor in any of the major JS engines. ",
          "@colinhacks I was just now writing an issue regarding this because the documentation says that this format passes validation. While it is a valid ISO 8601 date string, we should perhaps update the documentation to reflect this problem, at least while the major JS engines still can't parse this format (that is if they ever will)."
        ]
      },
      {
        "pr_number": 1871,
        "title": "Feature/add resolves method to zod promise",
        "body": "## What it does\r\n* Add `resolves` method to `ZodPromise`. This returns the resolving schema the `ZodPromise` was created with. \r\n\r\n[Related issue](https://github.com/colinhacks/zod/issues/1838)",
        "html_url": "https://github.com/colinhacks/zod/pull/1871",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 67219fa17d52003a94b65a116015e1e3c3d26ee5 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63d7050adb49bf00093125c2 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1871--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1871--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE4NzEtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.5W59VD9ATn3yeGe31k7c1vwN8SXwMwzxOLCKSjdNcEI)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "I dig it, though I renamed to `unwrap` for consistency with other schema types. Thanks!"
        ]
      },
      {
        "pr_number": 1813,
        "title": "Add string cuid2() validation",
        "body": "[`cuid`](https://github.com/paralleldrive/cuid) has been deprecated in favour of [`cuid2`](https://github.com/paralleldrive/cuid2). Now it's not yet widely used but I believe it will catch up with `cuid` soon. This PR adds validation for `cuid2`.\r\n\r\nIt's my first time contributing here so please tell if I did something wrong. I did update the README with the additional method but feel free to revert the change there.",
        "html_url": "https://github.com/colinhacks/zod/pull/1813",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | d21756a663ba1f24b62db82aad5b6297f9084a96 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63b50757830c490008b5b48c |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1813--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1813--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE4MTMtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.K-ZOVSsC2uQIOmlp_UYK8YRIcJ_x4o27R_CBL-zXum0)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Looks great, thanks!",
          "Great news, I've been waiting for this! Is a npm release far away?",
          "@ciscoheat Of course I don't know when a new version will be released but if you need it immediately you can use the regex directly\r\n\r\n```ts\r\nconst cuid2Regex = /^[a-z][a-z0-9]*$/;\r\n```",
          "Yep, I'll do that in the meantime. It's kind of amusing that a one-char id is technically possible with this one...!"
        ]
      },
      {
        "pr_number": 1796,
        "title": "test: add benchmark tests for date and symbol",
        "body": "This PR will add benchmark tests for date and symbol, currently not covered.\r\n<details>\r\n<summary>yarn benchmark output, only new tests shown</summary>\r\n\r\n$ tsx src/benchmarks/index.ts\r\nz.date: valid x 3,007,337 ops/sec \u00b10.49% (91 runs sampled)\r\nz.date: invalid x 34,043 ops/sec \u00b13.08% (89 runs sampled)\r\nz.date: valid min and max x 2,141,123 ops/sec \u00b11.73% (88 runs sampled)\r\nz.date: invalid min x 29,310 ops/sec \u00b12.43% (87 runs sampled)\r\nz.date: invalid max x 26,036 ops/sec \u00b13.88% (77 runs sampled)\r\nz.symbol: valid x 5,416,457 ops/sec \u00b14.04% (79 runs sampled)\r\nz.symbol: invalid x 32,293 ops/sec \u00b11.95% (78 runs sampled)\r\n\r\n</details>",
        "html_url": "https://github.com/colinhacks/zod/pull/1796",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 2490730bea2d2ea993bd3de1273aa2c376ac8823 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63b2a6157a9c3c000872fcac |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1796--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1796--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE3OTYtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.BnSxFyuxqjuqsGEBV634WnGfhw_RswoObGxC_ZeKupo)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Thanks!"
        ]
      },
      {
        "pr_number": 1999,
        "title": "Add React form validation library to ecosystem",
        "body": "I wrote a form library similar to Formik that uses Zod as its primary field/form validation method called [HouseForm](https://houseform.dev/). I'm using it for production applications today and thought it would be helpful for others to public and document, so we've made it an open-source library that just hit 1.0 today.",
        "html_url": "https://github.com/colinhacks/zod/pull/1999",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 79e6d090144dc69a783e1297aae1f2595d9314a9 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63e1e9aa6bd04b00091575ce |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1999--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1999--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE5OTktLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.N1lwCSTgJlpxknGnqjcQrRUpjjjHzey-RXisK9I3RSM)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 2007,
        "title": "export the email regex",
        "body": "Issue: https://github.com/colinhacks/zod/issues/2003",
        "html_url": "https://github.com/colinhacks/zod/pull/2007",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | ccfbcf829330a65001435de585246b12b07498cd |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63e2b41ae380f1000898c7c2 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2007--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2007--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTIwMDctLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.YCNzeAmwemPnpoy0C0LBeAonPdDVicTiqSPdg4RmI3s)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Great work! Thanks!"
        ]
      },
      {
        "pr_number": 2007,
        "title": "export the email regex",
        "body": "Issue: https://github.com/colinhacks/zod/issues/2003",
        "html_url": "https://github.com/colinhacks/zod/pull/2007",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | ccfbcf829330a65001435de585246b12b07498cd |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63e2b41ae380f1000898c7c2 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-2007--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-2007--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTIwMDctLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.YCNzeAmwemPnpoy0C0LBeAonPdDVicTiqSPdg4RmI3s)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Great work! Thanks!"
        ]
      },
      {
        "pr_number": 1999,
        "title": "Add React form validation library to ecosystem",
        "body": "I wrote a form library similar to Formik that uses Zod as its primary field/form validation method called [HouseForm](https://houseform.dev/). I'm using it for production applications today and thought it would be helpful for others to public and document, so we've made it an open-source library that just hit 1.0 today.",
        "html_url": "https://github.com/colinhacks/zod/pull/1999",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 79e6d090144dc69a783e1297aae1f2595d9314a9 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63e1e9aa6bd04b00091575ce |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1999--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1999--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE5OTktLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.N1lwCSTgJlpxknGnqjcQrRUpjjjHzey-RXisK9I3RSM)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1875,
        "title": "fix: make sure only mask keys with truthy values are respected at runtime @ `.pick`, `.omit`, `.partial` & `.required`.",
        "body": "resolves #1854.",
        "html_url": "https://github.com/colinhacks/zod/pull/1875",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 4d810667915eb0a6607ba0470db988d2104cfba2 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63e2d9a78ed4740008345423 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1875--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1875--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE4NzUtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.mmASpz0fti51dEct1boZkpHrPdaCyUbg2BuWvcm8RYU)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "@igalklebanov Thanks for helping out my issue \ud83d\ude04 \r\n\r\nJust curious, should `Mask` also extends not just `true` but `boolean` ?",
          "> Just curious, should `Mask` also extends not just `true` but `boolean` ?\r\n\r\nI think this adds type complexity, and I can't see the benefits.. what are some benefits?",
          "> I think this adds type complexity, and I can't see the benefits.. what are some benefits?\r\n\r\nWell, since the PR fix the runtime issue, just trying to make code more easy to read.\r\n\r\nIf one use the method like this (the code under), typescript throw error since the argument of the type shouldn't have other type expect `true` or `undefined`.\r\n```typescript\r\nschema.pick({ name: true, age: false })\r\n//  error on here         ^^^\r\n``` \r\n\r\nCurrently, it can fix by comment @ts-ignore, @ts-expect-error, or add more logic:\r\n```typescript\r\nschema.pick({ name: true, ...(shouldPick && { age: true } })\r\n// this work\r\n```\r\nor this is acceptable?",
          "> > I think this adds type complexity, and I can't see the benefits.. what are some benefits?\r\n> \r\n> Well, since the PR fix the runtime issue, just trying to make code more easy to read.\r\n> \r\n> If one use the method like this (the code under), typescript throw error since the argument of the type shouldn't have other type expect `true` or `undefined`.\r\n> \r\n> ```ts\r\n> schema.pick({ name: true, age: false })\r\n> //  error on here         ^^^\r\n> ```\r\n\r\nThis works as intended. You don't pass things you don't want to affect schema with. Same as how typescript `Pick<O, K>` or lodash `pick(obj, keys)` work.\r\n\r\nMask objects were chosen since the alternative, key array, is a footgun (breaks inference quite easily, and users were having trouble with array arguments in other zod APIs) according to @colinhacks.\r\n\r\n> Currently, it can fix by comment @ts-ignore, @ts-expect-error, or add more logic:\r\n> \r\n> ```ts\r\n> schema.pick({ name: true, ...(shouldPick && { age: true } })\r\n> // this work\r\n> ```\r\n> \r\n> or this is acceptable?\r\n\r\nThe code example would work.\r\n\r\nYou can also:\r\n\r\n```ts\r\nconst subSchema = schema.pick({ name: true });\r\n\r\nif (!shouldPick) {\r\n  return subSchema;\r\n}\r\n\r\nreturn subSchema.addKey('age', schema.shape.age);\r\n```",
          "@igalklebanov Cool, then the current usage are good!\r\n\r\n> This works as intended. You don't pass things you don't want to affect schema with. Same as how typescript Pick<O, K> or lodash pick(obj, keys) work.\r\n> \r\n> Mask objects were chosen since the alternative, key array, is a footgun (breaks inference quite easily, and users were having trouble with array arguments in other zod APIs) according to @colinhacks.\r\n\r\nThis is really a good point, bad array!\r\nThanks for having a discuss with me. Appreciated! \ud83d\ude04 ",
          "@maxArturo Thank you once again! \ud83d\udcaa "
        ]
      },
      {
        "pr_number": 1969,
        "title": "fix: failing prettier checks on merge",
        "body": "Looks like `prettier` wasn't run on some deltas. This should resolve the failing checks [here](https://github.com/colinhacks/zod/actions/runs/4039277062/jobs/6943851558). ",
        "html_url": "https://github.com/colinhacks/zod/pull/1969",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 5c1d5446296bd99184b7fa7dc499260536e677f5 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63da76f8dca9530008ba929f |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1969--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1969--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE5NjktLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.Jo_xE5nfMG5h2BotHU1zMaS8iKdmNvV_spX72r8rTf8)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1564,
        "title": "deny unexpected keys @ `ZodObject`'s `.omit(mask)`,`.pick(mask)`,`.required(mask)` & `.partial(mask)` at compile time.",
        "body": "Hey \ud83d\udc4b \r\n\r\n`ZodObject` methods that receive a mask as input currently accept unexpected keys (keys that do not exist in object's shape) without any typescript errors. This can be safer.\r\n\r\nIssue is also mentioned @ #1563.\r\n\r\nThis PR limits `omit()`/`pick()`/`required()`/`partial()` mask object to `ZodObject`'s shape, introducing a welcome type-safety breaking change to `zod`.\r\n\r\nIt does so without affecting autocompletion.",
        "html_url": "https://github.com/colinhacks/zod/pull/1564",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 1102a5dd1b3e35fcd3fd04680908b1cb1f8a8046 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63e34f65edf8000008fd0bc7 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1564--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1564--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE1NjQtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.zc7iUUP0KKgvpYJashFJbcZ7lRqIpfexgSt9yAt4Fkc)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Love it, thanks!!!",
          "Love the helper name change!"
        ]
      },
      {
        "pr_number": 1973,
        "title": "docs: punctuation",
        "body": "Hopefully an easy PR to merge.",
        "html_url": "https://github.com/colinhacks/zod/pull/1973",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 1896f7eeb976325fcc431d1943c88e76ffd748fe |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63e34fc68cb8530008aa0d0b |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1973--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1973--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE5NzMtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.2QQit7lbn8DPGHXpAgwP4D7XrZTFvvlb6JErMaATsjY)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "I reverted the `static-type` and `string-validation` changes but thanks for the rest!"
        ]
      },
      {
        "pr_number": 1652,
        "title": "feat: Add `extract`/`exclude` methods to `ZodEnum`",
        "body": "This PR adds two methods to `ZodEnum`:\r\n\r\n1. `extract`\r\n2. `exclude`\r\n\r\nBoth work exactly like the TS utility types of the same name.\r\n\r\nYou call `.extract()` with values that exist in the enum, and it returns a new one with these values only. The same thing for `.exclude()` but it returns a new enum _without_ the values you passed in.\r\n\r\n## Example\r\n\r\n<img width=\"457\" alt=\"Screenshot 2022-12-08 at 5 52 30 AM\" src=\"https://user-images.githubusercontent.com/98408205/206401796-31301c95-8e84-4c1a-9b02-8d7754d193ec.png\">",
        "html_url": "https://github.com/colinhacks/zod/pull/1652",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 22038ae921ec3cc91c7acac03dc06016536dd36d |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63940026ecd696000abc1062 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1652--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1652--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE2NTItLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.zNaQYB6fdJ4D_z7bO7ugZogPJMkZpH8OsouBUAVX6LY)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "I dig it! Sorry I couldn't fit this into 3.20 - had to stop tinkering and just cut a release. The naming is of course perfect. This'll get merged soon.\r\n"
        ]
      },
      {
        "pr_number": 1982,
        "title": "fix[#1979]: Increment Email validation",
        "body": "solves issues #1979, #1515 and #1435",
        "html_url": "https://github.com/colinhacks/zod/pull/1982",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | d912c3ea41dfa8f5597d0858a78ec8540cdd80d2 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63e353d65d41c10007283c5c |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1982--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1982--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE5ODItLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.rUwaGZ2GcLz6zToGqFKeKrEnM2NCxiTmYpk7OZdHPVc)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Looks great, thanks!",
          "This only gets part of #1435 I think, since it still doesn't allow IP addresses without square brackets around the IP address, e.g. `someone@123.123.123.123`. Only `someone@[123.123.123.123]` is allowed by the new regex here.",
          "This also leaves some cases of emails that are valid but fail the validation, when the domain has a subdomain and a number on the domain name, for example:\r\n\r\ntest@any.th1ng.com (INVALID)\r\ntest@any.thing.com (valid)\r\n\r\n\r\n`/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+))$/.test('email@health.all4you.com')`",
          "@colinhacks @fvckDesa fyi",
          "@ggmartins091 Yes, the problem is here:\r\n``` ts\r\n([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+)\r\n```\r\nAs soon as I can I try to fix it"
        ]
      },
      {
        "pr_number": 1729,
        "title": "test: additional unit-tests for object",
        "body": "This PR will:\r\n\r\n1. Add explicit testing of shape() method\r\n2. Add explicit testing of extend() method, currently not covered\r\n3. Update readme.md for deno (due to ad4385439d7c0d7a584052dee5aa578fde5a6efd)",
        "html_url": "https://github.com/colinhacks/zod/pull/1729",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | e7b2228de721b347a8b5dc009c31fb484d4f156e |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63e3544f3a434e0008ca86fe |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1729--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1729--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE3MjktLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.CbPzb8z7GyqCQT-b9iWeqGEvjgDfVIOdgcV94WukYM4)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "@colinhacks let me know if this is redundant and I will close the PR."
        ]
      }
    ],
    "v3.20.2": [],
    "v3.20.1": [
      {
        "pr_number": 1674,
        "title": "Only call .catch() method when parsing fails",
        "body": "- Fixes #1673",
        "html_url": "https://github.com/colinhacks/zod/pull/1674",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 1e63942cc5fabae27be65db104ce0abb8bcdcd13 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63977d338cb8cf000987f76c |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1674--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1674--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE2NzQtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.L9ekVNf6rHRI9M26_fuC7xfe1lOpHsEL4LjFAjkq8U0)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1678,
        "title": "Issue 1677: Fixing ZodString::isDatetime",
        "body": "Closes #1677\r\n\r\nMaking `isDatetime` consistent with other getters of `ZodString`, fixing its binding.",
        "html_url": "https://github.com/colinhacks/zod/pull/1678",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 44b9c5dd866a8b0a8d017d2442798e397790126b |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/639788bc35ac6a000b39a992 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1678--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1678--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE2NzgtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.zd7GgCP1tJ321-XQ7QKm6IjD46sF9zYvNleaf5b3Zss)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "@colinhacks && @samchungy , please review",
          "Good catch! \ud83d\ude05"
        ]
      }
    ],
    "v3.20": [
      {
        "pr_number": 1662,
        "title": "Add formik-validator-zod to README ecosystem links",
        "body": "`formik-validator-zod` is a utility library that makes it much easier to use Zod in order to validate Formik form inputs.\r\n\r\nIt serves a similar purpose to `zod-formik-adapter` but has the added benefit of supporting a greater number of Zod features such as `z.enum`. [Ref](https://github.com/robertLichtnow/zod-formik-adapter/issues/2)",
        "html_url": "https://github.com/colinhacks/zod/pull/1662",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | e36be5deda22972bf1b2d4c67bfdff7fb96bf79a |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63946454ad34170008bd3bfc |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1662--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1662--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE2NjItLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.N5AK2RGDQkxi6AgXF035Y8_rvrEbhacxLeND0gxEIeg)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1629,
        "title": "chore: add eslintcache",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1629",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 4a0e2feb8044b5bd949a13035c672c21a0d3f036 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/638c51941b8ef7000900c37c |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1629--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1629--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE2MjktLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.KfqzWEGxPJJpivFsopcis48ZsvjEshA4dy0vbKI_9XY)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1615,
        "title": "feat: #1602 narrow superRefine() type",
        "body": "Closes #1602.  \r\n\r\nAdds TS overloads for `ZodType.superRefine()` such that, if provided with a type predicate function, the signature of the returning `ZodEffects` type will be narrowed. \r\n\r\nUsers are still expected to call `ctx.addIssue()` as per the current API. Tests and docs updated.",
        "html_url": "https://github.com/colinhacks/zod/pull/1615",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 36280172626a11d41f1359bedb60e56b0001ceae |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/638668e42564000008893c09 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1615--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1615--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE2MTUtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.Wf8CPzYfAm2eha1-Qt6oWom_IToIxtU__bwvWfIjcZo)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1620,
        "title": "Fix issue #1611",
        "body": "closes #1611 \r\n\r\nI quickly drafted a working solution so we could iterate and discuss its design.\r\n\r\nI also added the same proposed behavior to strings as well, since both strings and arrays share the `.length` function.\r\n\r\nLooking further into the codebase, I think it would be ideal to create a new check (something like \"exact_legth\") and a ZodIssueCode so we can share the same locale behavior between Arrays and Strings.\r\n\r\nWhats your take? How should I integrate those changes into Zod's current codebase?",
        "html_url": "https://github.com/colinhacks/zod/pull/1620",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 36396bb099d979b16d9dc686fb3e9ca442a459b0 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/6396782a29a13b0008c7327e |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1620--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1620--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE2MjAtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.Jdzf_cd-gOzEgnv_O_0YozopenLNTcyU1TO-rEPUJoY)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "> Whats your take? How should I integrate those changes into Zod's current codebase?\r\n\r\nIMO this seems very sensible - especially since there's no API changes and seems in line with the current way of organizing error messages. Just my $0.02 USD. Thanks for the pr @john-schmitz !",
          "Glad to help. The impact Zod had on my workflow is immense. \r\nAlways good to give back.",
          "Hmm... I'm not sure if I like this solution. (but correct me if I'm wrong)\r\n\r\nYou are setting the default message directly on the method, promoting it to the highest priority level when generating the final message.\r\n\r\nSay, for example, I've decided to define my error map on the `.parse()` call:\r\n\r\n```ts\r\nconst myArraySchema = z.array(z.string()).length(2).parse([\"foo\"], {\r\n  errorMap: (issue) => {\r\n    if (issue.code === \"too_small\") {\r\n      return { message: \"Hey yo, the array must have a length of 2.\" };\r\n    }\r\n    return { message: \"Nope\" };\r\n  },\r\n});\r\n```\r\n\r\nSince I'm not setting the `\"Hey yo, the array must have a length of 2.\"` message in the `.length(2)` call, it will be overwritten by your default message because messages set directly on the check (`'length'`) call have the highest priority (I'm not setting it there, but you are).\r\n\r\nDefault messages should **always** have the lowest priority.\r\n\r\nCan you please add a test of the above code and see the result?",
          "As @santosmarco-caribou says, the original approach does break Zod's error message hierarchy. I pushed a commit that uses a different approach, adding an optional `exact` flag (alongside `inclusive`) that we can use to customize the default error message here. Achieves the goal in a backwards compatible way."
        ]
      },
      {
        "pr_number": 1612,
        "title": "Fix typo in CHANGELOG.md",
        "body": "occured -> occurred",
        "html_url": "https://github.com/colinhacks/zod/pull/1612",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 4949fcb9e4f4f8b442a94c51348a617eb56551e2 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63856abcbc412f000802b3ba |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1612--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1612--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE2MTItLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.q6fOm3aRZSXFN8DnDkXPtiluV8Wvy__SvDkVrfOx8go)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1609,
        "title": "docs: fix typo in Writing generic functions",
        "body": "Typos:\r\n1. \"to write a functions that accepts a Zod schemas\" -> \"to write a function that accepts a Zod schema\"\r\n2. \"for the generate parameter\" -> \"for the generic parameter\"",
        "html_url": "https://github.com/colinhacks/zod/pull/1609",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 2fd8d9fe39a1dde754d667b0bcba29f150417c94 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/6383b8300c0bb20008395b46 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1609--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1609--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE2MDktLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.cvfUZpea_GINq1FGdvK0-sSu5twDs7QljuLBnUqMP-k)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Thanks!!"
        ]
      },
      {
        "pr_number": 1599,
        "title": "docs: likely a minor typo",
        "body": "_i.e._ means _that is_,\r\nwhereas\r\n_e.g._ means _for example_\r\n\r\nI'm assuming `.optional()` is just an example here",
        "html_url": "https://github.com/colinhacks/zod/pull/1599",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 4d51e0b8a83bba503c0302a872383a7d1533e712 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/6380153d6d2b770009e60a8c |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1599--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1599--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE1OTktLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.pohEf9sFxoyEYqHW6FxMsKViOdPg65VTBv1FlmQqMqM)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Good catch \ud83d\ude1b"
        ]
      },
      {
        "pr_number": 1591,
        "title": "Add znv to the Ecosystem",
        "body": "[znv](https://github.com/lostfictions/znv) is a library for parsing environment variables with zod.",
        "html_url": "https://github.com/colinhacks/zod/pull/1591",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | ec7bbf5671795e4a5f92be586b4490dbf0e77307 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/637e7dd94194130008dae5cf |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1591--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1591--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE1OTEtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.UrUl28dAezTkxNnSzbfvL6kVRtJ2xN1wUqd21rzgJQo)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1648,
        "title": "fix: #1638 and Redundant character escape '\\' in RegExp",
        "body": "[hyphen `-`, provided that it is not the first or last character.](https://en.wikipedia.org/wiki/Email_address#Domain)",
        "html_url": "https://github.com/colinhacks/zod/pull/1648",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 3b3f4dc15c41640adf432be878fc58d4d57f9dcf |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/639007d1760e440008a7e83c |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1648--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1648--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE2NDgtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.S_nrQEqNmePTOrMkHQFd5vFa34FTcGrw-jw2PIF6JNI)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1584,
        "title": "docs: update CONTRIBUTING.md links",
        "body": "Closes #1583 .",
        "html_url": "https://github.com/colinhacks/zod/pull/1584",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 5a4cfe8af72b84480cf3e2ccd2f6b6dd1739148f |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/637d3151a80c02000823f5c6 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1584--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1584--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE1ODQtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.NsyiogZtqOlfWSDN-ZkmHTCHkvPou3w5_dZOfPo7Mxg)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1579,
        "title": "Cleaned up some code snippets in docs",
        "body": "Tried to make them match the rest of the examples a bit better",
        "html_url": "https://github.com/colinhacks/zod/pull/1579",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 9d823b6279d3adfa15a014cb4a28bd0b9f04445d |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63906c2a455316000897eb13 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1579--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1579--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE1NzktLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.huehX-o1tGQh9A2NGhy53eZi5TGpw8jQji6ZbdqO6zs)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Thanks!"
        ]
      },
      {
        "pr_number": 1666,
        "title": "docs: add `zod-i18n-map` to README ecosystem links",
        "body": "I am developing a library to translate zod default error messages into multiple languages. [`zod-i18n-map`](https://github.com/aiji42/zod-i18n)\r\nIt is useful and I would like to add it to the ecosystem list.",
        "html_url": "https://github.com/colinhacks/zod/pull/1666",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | e36b5a34990e6f8346ac159e52681e755be7a71f |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/639674bc4ecd2e00092b8dd3 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1666--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1666--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE2NjYtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.zlf4lZmMrN7M9JTOcsw1o7khhLqz1dyM2qWWQGG5XpE)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "This is excellent! We'll have to chat about what Zod can do to support i18n better out of the box.",
          "Thank you very much. If there is anything I can do to help, I will cooperate."
        ]
      }
    ],
    "v3.20.0": [
      {
        "pr_number": 1315,
        "title": "Add `mask` parameter to `.required` method",
        "body": "This solves the #1176 by adding the `mask` parameter to the `.required()` method.\r\n\r\n* I have used as base the `.partial(mask)` method.\r\n* I have also added the `.required` to the README (it didn't exist before) with its new mask explanation.\r\n* Tests added and renamed the `with mask` test to `partial with mask` as we now have the `required with mask`.\r\n* Deno support",
        "html_url": "https://github.com/colinhacks/zod/pull/1315",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | b4eb7cd2b6c7bd43e1d4019f050961ec16376ade |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/633cd43b8cff910008d59180 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1315--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1315--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTEzMTUtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.49JI49-QCfeBoeuqAy-AR8B9uE9LPwH251cfWldsk58)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n",
          "Up ",
          "No noticeable changes in the benchmarks for the existing functionality, so I'd say this is ready to merge! Thanks @SrBrahma for the contribution.",
          "\ud83e\udd1d"
        ]
      },
      {
        "pr_number": 1450,
        "title": "Added Intersections to TOC",
        "body": "This PR adds `Intersections` to TOC.\r\n\r\nWas looking for how to do Intersections, couldn't find it in the TOC.\r\nHowever a quick search via `CTRL+F` revealed that indeed there's a section for `Intersections`, it's just missing from the TOC.\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/1450",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 308f9cc8e69f6989f13a0cfb5f8ec03ee379c11c |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63394cde0c7b080008be154a |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1450--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1450--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE0NTAtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.QRZJ0fAKY4A-RN56bTZdfmPyl_jfosf04nClnyAFi9w)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1469,
        "title": "[#1468] Fix zod.dev main page cross origin links.",
        "body": "Sets docsify [crossOriginLinks](https://docsify.js.org/#/configuration?id=crossoriginlinks) to fix #1468",
        "html_url": "https://github.com/colinhacks/zod/pull/1469",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 6aa2ebc8ae0468923f4dc0e91314dc4e91df07d8 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/633f3315c903030009c77e88 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1469--guileless-rolypoly-866f8a.netlify.app/](https://deploy-preview-1469--guileless-rolypoly-866f8a.netlify.app/) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE0NjktLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.mnxODdIv1tNnsYjpH4D0ZQn4kDHxhhSvJZF4sm8Ho9w)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1501,
        "title": "Updates remix-domains library name and description in README",
        "body": "Since we added the library we have changed it to be framework agnostic, also supporting [Deno](https://deno.land/x/domain_functions@v1.2.0) now. To reflect that shift the library is now called Domain Functions.",
        "html_url": "https://github.com/colinhacks/zod/pull/1501",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | c6e616c8bc4a2ba6455d5e3a054156eb1e5f09ac |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/634d6b26d49b2200096450b8 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1501--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1501--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE1MDEtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.7DXzLoCerQ6mkIg7tVJcsKhw_XJVJ0kL5se1lMW4RD4)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1492,
        "title": "Removed BRAND from ZodBrand Input definition",
        "body": "A type's brand should only be accessible in its output aka `z.infer` or `z.output` but it's also carried over to its input. This makes it difficult to create a typesafe parse function as the code doesn't compile\r\n\r\nFor example:\r\n```ts\r\nconst Age = z.number().min(18).brand<\"Age\">()\r\n\r\ntype AgeInput = z.input<typeof Age>\r\n```\r\nan input for `Age.parse(x)` aka `AgeInput` should just be `number` but it's `number & BRAND<\"Age\">` which doesn't make sense\r\n\r\n[Working typescript playground example](https://www.typescriptlang.org/play?ssl=3&ssc=46&pln=3&pc=1#code/JYWwDg9gTgLgBAbzgLzgXzgMyhEcDkyEAJvgFBkDGEAdgM7wCCA5gKZwC8KAdDQK4gARqygAKAJTcQwGqICMADkmCoAQxrEAPACIWrbQD4JFTHxqUYwWnBx8YI0TLB2AXHH5CR4xGThwwqlB0rI40zjDiZGgmZhZWNP6BwaKqbG7I3E52mjAAnmCsEJhwegbeCFFAA)",
        "html_url": "https://github.com/colinhacks/zod/pull/1492",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | c8e9cb59757fdf5f20504f032d1617e9ede92c09 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63498c9c5182c30008024a4f |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1492--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1492--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE0OTItLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.nqDLrlopVjN-PrnX3MC8m2cNgUhWFLeUWtXBOmcSu_4)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Great call. Thanks!",
          "I want the opposite behavior of this \ud83d\ude22 ",
          "opened #3380 where we could have both \ud83d\ude43 ",
          "The inferred input type is supposed to be the *set of inputs that will pass validation*. So actually, this inferred input type for this schema:\r\n\r\n```ts\r\nz.number().brand<\"USD\">();\r\n```\r\n\r\nshould be\r\n\r\n```\r\nnumber | (number & BRAND<\"USD\">)\r\n```\r\n\r\nZod should definitely allow a \"pre-branded\" value, but it also \"brands\" any plain `number` values that are passed in. I can't tell if this pleases everyone or no one...but I do think it's the most correct behavior.",
          "I'll add some context on what I'm doing.\r\n\r\nI'm building a query string builder for filtering data where one of the parts is a date range\r\n\r\nA date range is serializable to the URL and transformable into a real date range.\r\n\r\nSome examples of _input_ values:\r\n\r\n- this_week\r\n- past_week\r\n- 2023-04-01,2024-04-30\r\n\r\nfor the last one, I want to _brand_ it as `string & X`, otherwise all of them will be `string` in the union, which is annoying later on when building the UI since the data is too loose\r\n\r\nin my case I don't care about the brand on the output at all (but it doesn't hurt it either)\r\n\r\n### Code\r\nhttps://tsplay.dev/wgo4lw\r\n\r\n```tsx\r\nimport { Temporal } from '@js-temporal/polyfill';\r\nimport { z } from 'zod';\r\n\r\ntype DateRange = [Temporal.PlainDate, Temporal.PlainDate];\r\nfunction getWeekDateRange(date: Temporal.PlainDate): DateRange {\r\n  const start = date.subtract({ days: date.dayOfWeek });\r\n\r\n  const end = start.add({ days: 6 });\r\n\r\n  return [start, end];\r\n}\r\n\r\nexport const anyDateRange = z.literal('any').transform(() => null);\r\n\r\nexport const thisWeekDateRange = z\r\n  .literal('this_week')\r\n  .transform((): DateRange => {\r\n    const now = Temporal.Now.plainDate('iso8601');\r\n\r\n    return getWeekDateRange(now);\r\n  });\r\n\r\nexport const customDateRange = z\r\n  .string()\r\n  .regex(/^\\d{4}-\\d{2}-\\d{2},\\d{4}-\\d{2}-\\d{2}$/)\r\n  .transform((value): DateRange => {\r\n    const parts = value.split(',') as [string, string];\r\n    const start = Temporal.PlainDate.from(parts[0]);\r\n    const end = Temporal.PlainDate.from(parts[1]);\r\n\r\n    return [start, end];\r\n  })\r\n  .brand('custom_date_range');\r\n\r\nexport const filters = z.object({\r\n  dateRange: z\r\n    .union([\r\n      //\r\n      anyDateRange,\r\n      thisWeekDateRange,\r\n      customDateRange, // <- try commenting out this line\r\n    ])\r\n    .default('any'),\r\n});\r\n\r\ntype Input = z.input<typeof filters>;\r\ntype Output = z.output<typeof filters>;\r\n\r\ntype DateRangeInput = Input['dateRange'];\r\n//     ^?\r\n\r\n```",
          "Even if the brand was applied to the input type, it still seems pretty un-ergonomic for the end user to cast a string to the branded type. How do you see this working?\r\n\r\n```ts\r\ntype customDateRange = z.output<typeof customDateRange>;\r\nconst value = \"2021-01-01,2021-01-02\" as unknown as customDateRange;\r\n```\r\n\r\nHere's something that seems to work better:\r\n\r\n```ts\r\nconst dateRangeParser = z\r\n  .string()\r\n  .regex(/^\\d{4}-\\d{2}-\\d{2},\\d{4}-\\d{2}-\\d{2}$/)\r\n  .transform((value): DateRange => {\r\n    const parts = value.split(',') as [string, string];\r\n    const start = Temporal.PlainDate.from(parts[0]);\r\n    const end = Temporal.PlainDate.from(parts[1]);\r\n\r\n    return [start, end];\r\n  })\r\n  .brand('custom_date_range');\r\n\r\nconst customDataRange = z\r\n  .custom<`${number}-${number}-${number},${number}-${number}-${number}`>()\r\n  .pipe(dateRangeParser);\r\n\r\ntype customDataRange = z.input<typeof customDataRange2>; \r\n// `${number}-${number}-${number},${number}-${number}-${number}`\r\n```",
          "That's awesome. Thanks \u2665 "
        ]
      },
      {
        "pr_number": 1506,
        "title": "Add Zodix to readme ecosystem section",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1506",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 9dd5b1536c332d376c1558c886dcf6e84b1ea96d |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/635006ca7364310009536b14 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1506--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1506--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE1MDYtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.4emPVEHgN74XbkTZItWqg4ELLA81RhCT26cptub0qRQ)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1521,
        "title": "Fix small typos in README",
        "body": "This closes #1519 and #1520",
        "html_url": "https://github.com/colinhacks/zod/pull/1521",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 1e8d387306ebd3937a5d110b9ac4955bd05262ac |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63588b4d1c2050000949da51 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1521--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1521--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE1MjEtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.Sm2u5UXrSKXHaZ8CJ-kO_L3-fa7bJ0fr1R_jHJHHZQI)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1528,
        "title": "fix typo",
        "body": "This is just to fix a small typo I encountered :)\r\n\r\n`FormattedErros` \ud83e\udc52 `FormattedErrors`",
        "html_url": "https://github.com/colinhacks/zod/pull/1528",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 47dc7c4141e8c83eb851bfcfdceff768684ea25a |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/635afbbc9b501a00087c9937 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1528--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1528--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE1MjgtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.kTz3QkJ99f7v5htlnvBmoV-ZAoqtJYaLq7RNQRaRgZY)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1555,
        "title": "add `fatal` to `ZodIssue`.",
        "body": "Hey \ud83d\udc4b \r\n\r\ncloses #1406.",
        "html_url": "https://github.com/colinhacks/zod/pull/1555",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 8e934e5150be1d0510263f116ac3dfe429884f18 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/636f63ab5401f600080c3b3e |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1555--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1555--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE1NTUtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.b_HyJpE8XdRoLCg2rDmQ9gI6nL4M7EDaRKR0aiU9qSs)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Sounds good to me!"
        ]
      },
      {
        "pr_number": 1543,
        "title": "Fix typo in ERROR_HANDLING.md",
        "body": "In `ERROR_HANDLING.md`, I changed a code example to use `z.inferFormattedError` from `z.inferFormattedErrors` as the function is implemented as `z.inferFormattedError`\r\n\r\nhttps://github.com/colinhacks/zod/blob/c617ad3edbaf42971485f00042751771c335f9aa/src/ZodError.ts#L167-L170",
        "html_url": "https://github.com/colinhacks/zod/pull/1543",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | e92873b6231ec7a76b276f081c61d9a02d00546a |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/6366e9cf7789760008c0131d |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1543--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1543--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE1NDMtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.V_oELrs4eX8p0RvJM8ltgXnY4C5aMTOIZzEf8Vj0eQU)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1546,
        "title": "add `.finite()` @ `ZodNumber`.",
        "body": "closes #512.\r\n\r\n- [x] implement.\r\n- [x] unit test.",
        "html_url": "https://github.com/colinhacks/zod/pull/1546",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 18469c61501dbd124b9535c5c1a3c1c0b2af3a16 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/6368495044ddee0008f01233 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1546--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1546--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE1NDYtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.2bqyNM6fqpyG1F5av2Mdo1gO-8OShUHWz3ZbDpVrQ5g)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1545,
        "title": "Fix typing bug hiding errors of nullable composite fields",
        "body": "Fixes #1541\r\n\r\nIt looks like the repo's git hooks added some changes from #1521 that didn't make it into the Deno version. What would you like me to do with these changes? Should they be split into a separate commit, removed, or kept?",
        "html_url": "https://github.com/colinhacks/zod/pull/1545",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 287431bad6cb0a27f18e205a8262afc2afea484d |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/636837699a132200091988a4 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1545--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1545--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE1NDUtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.T8Fd2EIrt7KWJI5x4nrWfmFYs3fYlaVqKwsd1MiUF7I)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1537,
        "title": "#1227 Feature default on mismatch",
        "body": "# Feature\r\nBelow, I layout two real world use cases. Unfortunately, Zod does not have built way to support the two use cases. Maybe it can be done with preprocess, but for our use case, that defeats the purpose of zod if every object property needs a handwritten type check anyway.\r\n\r\nInstead, all zod needs is something like ZodDefault but that will use the default value not only when there is undefined but when there is a mismatch in types. Thus ZodDefaultOnMismatch.\r\n\r\nA new class ZodDefaultOnMismatch which will replace the data with the default value when the provided value is a mismatch in type with the expected value. When data is undefined, ZodDefaultOnMismatch acts like ZodDefault.\r\n\r\n```typescript\r\nconst deleteAllFiles = z.boolean().defaultOnMismatch(false).parse(\"monkeys\")  // deleteAllFiles = false\r\n```\r\n\r\n# Use Case\r\n\r\n## Use Case 1\r\n\r\nApplication is pulling data from a JSON file where both the data's type is not guaranteed to be correct or even defined. Our application wants to use zod to verify the parsed JSON, but we don't want to fail if there is a type mismatch, but instead default to a safe value.\r\n\r\n## Use Case 2\r\n\r\nOur application uses an FP technique of passing data around as objects. This data is passed to a function, the function will copy the data, modify the data, and potentially add more data. Due to JavaScript being dynamic typed and TypeScript not having sound typing, the types defined by TypeScript are not guaranteed 100% at compile time. This scenario means that as we pass these data objects around, we cannot be guaranteed 100% that the data object is exactly as we expect.\r\n\r\nTo defend against this, a type check must be made everytime. If there is a type mismatch, we don't want to cause an error, but instead default to a safe value with the correct type. Since these objects can be complex or contain extra data our current function does not care about, we need make sure the input and output is untouched accept for the specific properties we are interested in.\r\n\r\n# Notes\r\nAt first, I named this ZonDefaultAlways, but that implied it would always default to a value no matter what. ZodDefaultOnMismatch, while lengthy, is descriptive in what it does. However, I am not set on ZodDefaultOnMismatch. Maybe there is a better name?\r\n\r\nSee issue #1227 for alternative implementations.",
        "html_url": "https://github.com/colinhacks/zod/pull/1537",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | f6e14d26ec81e6df5d83c95ec2ca7af662315b2c |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/6371febc7bce1800095f5b8e |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1537--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1537--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE1MzctLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ._XrvZnsXkOMQIA20dLOeFwNrzhdT69dAq17fgr2yrGo)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Hi! I really like this but it's not quite the API or behavior I had in mind. I've updated the PR to reflect a general-purpose `.catch` method that will detect any parsing failure (not just `invalid_type`) and return a default \"catch value\". Note that this changes the behavior subtly from how your implementation works - look at the changes I made to the test file to see what I mean.",
          "@colinhacks Sorry for the late reply. I tried to start a convo #1227, as I assume you would have some opinions. However, we are all busy... so no worries. I was too busy to reply to the changes. Of course they make sense to the overall project.\r\n\r\nHappy this idea got merged. I will need to make a few changes for my production software to get align with these changes."
        ]
      },
      {
        "pr_number": 1542,
        "title": "fix #1046 `.required()` doesn't remove optional flag from the result of `.nullish()`.",
        "body": "Hey :wave:\r\n\r\nLove zod, we use it in production.. they used to call me the \"zod guy\" cause I'm the one who introduced it to the codebase. lol.\r\n\r\nFirst time contributing here, sorry If I didn't do things properly.\r\n\r\n\r\n\r\nfixes #1046.",
        "html_url": "https://github.com/colinhacks/zod/pull/1542",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | fbb0d5388098af46786f6cd3eed12042b5d334c2 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/6366d956249b6d0008d2bfe3 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1542--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1542--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE1NDItLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.9jdb7Q7QbJKZUn-Wx1NtG4q17V9_llayTOftijEX_A8)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Thanks! Everything looks great :)"
        ]
      },
      {
        "pr_number": 1494,
        "title": "add `datetime()` string formats",
        "body": "EDIT: SEE https://github.com/colinhacks/zod/pull/1494#issuecomment-1314569963 for actual implementation details \r\n\r\nAdds `.utc()` and `.iso8601()` from https://github.com/colinhacks/zod/issues/126.\r\n\r\nThrough this PR I learnt that dates can be very inconsistent but still valid \ud83e\udd2f eg. you can give any number of ms which to me is a little silly. Imagine having `2022-07-08T00:00:00.000Z` alongside `2022-07-08T00:00:00.0000000000000000Z` in your system.\r\n\r\nSo I've tried to come up with a solution which is flexible but can be customised to be more strict if users wish.\r\n\r\n`ms: true` and `ms: false` control whether users want to check for `ms` or not with the default being to accept both formats. I've also added the ability to specify the ms digit precision with `msLength` since technically any number of milliseconds is considered a \"valid\" timestamp \ud83d\ude44 .\r\n\r\n```ts\r\n// date formats\r\nz.string().utc();\r\nz.string().utc({ ms: true }); // ms only\r\nz.string().utc({ ms: true, msLength: 3 }); // ms only, 3 digit precision\r\nz.string().utc({ ms: false }); // no ms only\r\n\r\nz.string().iso8601(); // allows offset\r\nz.string().iso8601({ ms: true }); // ms only\r\nz.string().iso8601({ ms: true, msLength: 5 }); // ms only, 5 digit precision\r\nz.string().iso8601({ ms: false }); // no ms only\r\n```\r\n\r\nLastly I've added getters for both of these which take the same args so users can find ones which they have specifically created.\r\n\r\n```ts\r\n// date formats\r\nz.string().utc().isUTC(); // true\r\nz.string().utc({ ms: true }).isUTC({ ms: true }); // true\r\nz.string().utc({ ms: true, msLength: 3 }.isUTC({ ms: true, msLength: 3 }) // true\r\nz.string().utc({ ms: false}).isUTC({ ms: false }); // true\r\nz.string().utc().isUTC({ any: true }); // matches all the above\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/1494",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | b42ef8f81ef517067c43af199fb1b374f5f649bc |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/6372d71e81e8a00009b107c9 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1494--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1494--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE0OTQtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.XD95LkWJC3dYehOakPXOhs_dEOcMebrwRRxPDSHMQkU)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "This looks great, thanks! Any interest in adding the `.iso8601()` method to this PR too (which allows offsets)? \ud83d\ude1b\r\n\r\nI like this PR more than the other. ",
          "> This looks great, thanks! Any interest in adding the `.iso8601()` method to this PR too (which allows offsets)? \ud83d\ude1b\r\n> \r\n> I like this PR more than the other.\r\n\r\nOnly because you asked nicely \ud83d\ude1b ",
          "Sorry, after all this I had a change of heart and went a pretty different direction. I just pushed a couple commits to this PR to reflect my latest thinking on this API.\r\n\r\n```ts\r\nz.string().datetime();  // millis supported but optional, offsets not allowed\r\nz.string().datetime({ offset: true });  // millis supported but optional, offsets allowed\r\nz.string().datetime({ precision: 3 });  // millis required to 3 decimal places, offsets not allowed\r\nz.string().datetime({ precision: 0 });  // millis not allowed, offsets not allowed\r\nz.string().datetime({ precision: 3, offset: true });  // millis required to 3 decimal places, offsets allowed\r\n```\r\n\r\nThe main driver of this approach is that the result of `new Date().toISOString()` should pass validation against `z.string().datetime()` out of the box, so millis should be supported without additional configuration.",
          "> Sorry, after all this I had a change of heart and went a pretty different direction. I just pushed a couple commits to this PR to reflect my latest thinking on this API.\r\n> \r\n> ```ts\r\n> z.string().datetime();  // millis supported but optional, offsets not allowed\r\n> z.string().datetime({ offset: true });  // millis supported but optional, offsets allowed\r\n> z.string().datetime({ precision: 3 });  // millis required to 3 decimal places, offsets not allowed\r\n> z.string().datetime({ precision: 0 });  // millis not allowed, offsets not allowed\r\n> z.string().datetime({ precision: 3, offset: true });  // millis required to 3 decimal places, offsets allowed\r\n> ```\r\n> \r\n> The main driver of this approach is that the result of `new Date().toISOString()` should pass validation against `z.string().datetime()` out of the box, so millis should be supported without additional configuration.\r\n\r\nOooo I do like this approach. A few configs which are merged together like precision and offset. I like it. Let me know if you want me do anything :) ",
          "Awesome - thanks for your work on this Sam! This really needed someone to get the ball rolling. Hard to believe it's been two years since I first wrote out that mini-RFC for `.utc()/.iso8601()` \ud83e\udee0 Feels great to finally merge something here.",
          "Woah awesome, thanks a bunch for this Colin! Love this library, hope you have a wonderful week \ud83d\ude42",
          "Awesome addition to zod \ud83d\ude0d\r\n\r\n@colinhacks when will this feature be released on npm?",
          "@colinhacks any news about the release on npm? ",
          "> @colinhacks any news about the release on npm?\r\n\r\nIf you're super keen jump on the beta [3.20.0-beta.0](https://www.npmjs.com/package/zod/v/3.20.0-beta.0). Release notes are [here](\r\nhttps://github.com/colinhacks/zod/releases/tag/v3.20.0).\r\n\r\nOtherwise, we wait! \ud83d\ude04 Please remember Colin is just a solo person working on this.",
          "Nevermind it's officially in https://github.com/colinhacks/zod/releases/tag/v3.20 :) "
        ]
      },
      {
        "pr_number": 1558,
        "title": "Bump minimatch from 3.0.4 to 3.1.2",
        "body": "Bumps [minimatch](https://github.com/isaacs/minimatch) from 3.0.4 to 3.1.2.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/isaacs/minimatch/commit/699c459443a6bd98f5b28197978f76e7f71467ac\"><code>699c459</code></a> 3.1.2</li>\n<li><a href=\"https://github.com/isaacs/minimatch/commit/2f2b5ff1bb1b6a01f4404f7e475f0a2cba578ab7\"><code>2f2b5ff</code></a> fix: trim pattern</li>\n<li><a href=\"https://github.com/isaacs/minimatch/commit/25d7c0d09c47063c9b0d2ace17ef8e951d90eccc\"><code>25d7c0d</code></a> 3.1.1</li>\n<li><a href=\"https://github.com/isaacs/minimatch/commit/55dda291dfb595bd11b4edb19b45dd98eda76de0\"><code>55dda29</code></a> fix: treat nocase:true as always having magic</li>\n<li><a href=\"https://github.com/isaacs/minimatch/commit/5e1fb8dd2bb78c0ae22101b9229fac4c76ef039e\"><code>5e1fb8d</code></a> 3.1.0</li>\n<li><a href=\"https://github.com/isaacs/minimatch/commit/f8145c54f34075069f4a23cb214d871da4cd4006\"><code>f8145c5</code></a> Add 'allowWindowsEscape' option</li>\n<li><a href=\"https://github.com/isaacs/minimatch/commit/570e8b1aef6c9e823a824aa0b9be10db43857cd7\"><code>570e8b1</code></a> add publishConfig for v3 publishes</li>\n<li><a href=\"https://github.com/isaacs/minimatch/commit/5b7cd3372be253759fb4d865eb3f38f189a5fcdf\"><code>5b7cd33</code></a> 3.0.6</li>\n<li><a href=\"https://github.com/isaacs/minimatch/commit/20b4b562830680867feb75f9c635aca08e5c86ff\"><code>20b4b56</code></a> [fix] revert all breaking syntax changes</li>\n<li><a href=\"https://github.com/isaacs/minimatch/commit/2ff038852ec03e85e60e0eb333005c680ac8a543\"><code>2ff0388</code></a> document, expose, and test 'partial:true' option</li>\n<li>Additional commits viewable in <a href=\"https://github.com/isaacs/minimatch/compare/v3.0.4...v3.1.2\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=minimatch&package-manager=npm_and_yarn&previous-version=3.0.4&new-version=3.1.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/colinhacks/zod/network/alerts).\n\n</details>",
        "html_url": "https://github.com/colinhacks/zod/pull/1558",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | d2fc75ea2e13512fa2a583a0c0c391c18e78a173 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/637203c312c768000890bda6 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1558--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1558--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE1NTgtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.8PCc36l79XsXxDtvpfW-hQlT_o2Hl3ppydnDmSwNO-k)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1507,
        "title": "Bump minimist from 1.2.5 to 1.2.7",
        "body": "Bumps [minimist](https://github.com/minimistjs/minimist) from 1.2.5 to 1.2.7.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/minimistjs/minimist/blob/main/CHANGELOG.md\">minimist's changelog</a>.</em></p>\n<blockquote>\n<h2><a href=\"https://github.com/minimistjs/minimist/compare/v1.2.6...v1.2.7\">v1.2.7</a> - 2022-10-10</h2>\n<h3>Commits</h3>\n<ul>\n<li>[meta] add <code>auto-changelog</code> <a href=\"https://github.com/minimistjs/minimist/commit/0ebf4ebcd5f7787a5524d31a849ef41316b83c3c\"><code>0ebf4eb</code></a></li>\n<li>[actions] add reusable workflows <a href=\"https://github.com/minimistjs/minimist/commit/e115b63fa9d3909f33b00a2db647ff79068388de\"><code>e115b63</code></a></li>\n<li>[eslint] add eslint; rules to enable later are warnings <a href=\"https://github.com/minimistjs/minimist/commit/f58745b9bb84348e1be72af7dbba5840c7c13013\"><code>f58745b</code></a></li>\n<li>[Dev Deps] switch from <code>covert</code> to <code>nyc</code> <a href=\"https://github.com/minimistjs/minimist/commit/ab033567b9c8b31117cb026dc7f1e592ce455c65\"><code>ab03356</code></a></li>\n<li>[readme] rename and add badges <a href=\"https://github.com/minimistjs/minimist/commit/236f4a07e4ebe5ee44f1496ec6974991ab293ffd\"><code>236f4a0</code></a></li>\n<li>[meta] create FUNDING.yml; add <code>funding</code> in package.json <a href=\"https://github.com/minimistjs/minimist/commit/783a49bfd47e8335d3098a8cac75662cf71eb32a\"><code>783a49b</code></a></li>\n<li>[meta] use <code>npmignore</code> to autogenerate an npmignore file <a href=\"https://github.com/minimistjs/minimist/commit/f81ece6aaec2fa14e69ff4f1e0407a8c4e2635a2\"><code>f81ece6</code></a></li>\n<li>Only apps should have lockfiles <a href=\"https://github.com/minimistjs/minimist/commit/56cad44c7f879b9bb5ec18fcc349308024a89bfc\"><code>56cad44</code></a></li>\n<li>[Dev Deps] update <code>covert</code>, <code>tape</code>; remove unnecessary <code>tap</code> <a href=\"https://github.com/minimistjs/minimist/commit/49c5f9fb7e6a92db9eb340cc679de92fb3aacded\"><code>49c5f9f</code></a></li>\n<li>[Tests] add <code>aud</code> in <code>posttest</code> <a href=\"https://github.com/minimistjs/minimist/commit/228ae938f3cd9db9dfd8bd7458b076a7b2aef280\"><code>228ae93</code></a></li>\n<li>[meta] add <code>safe-publish-latest</code> <a href=\"https://github.com/minimistjs/minimist/commit/01fc23f5104f85c75059972e01dd33796ab529ff\"><code>01fc23f</code></a></li>\n<li>[meta] update repo URLs <a href=\"https://github.com/minimistjs/minimist/commit/6b164c7d68e0b6bf32f894699effdfb7c63041dd\"><code>6b164c7</code></a></li>\n</ul>\n<h2><a href=\"https://github.com/minimistjs/minimist/compare/v1.2.5...v1.2.6\">v1.2.6</a> - 2022-03-21</h2>\n<h3>Commits</h3>\n<ul>\n<li>test from prototype pollution PR <a href=\"https://github.com/minimistjs/minimist/commit/bc8ecee43875261f4f17eb20b1243d3ed15e70eb\"><code>bc8ecee</code></a></li>\n<li>isConstructorOrProto adapted from PR <a href=\"https://github.com/minimistjs/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d\"><code>c2b9819</code></a></li>\n<li>security notice for additional prototype pollution issue <a href=\"https://github.com/minimistjs/minimist/commit/ef88b9325f77b5ee643ccfc97e2ebda577e4c4e2\"><code>ef88b93</code></a></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/minimistjs/minimist/commit/c590d75b741a12b5423e2b299f38a7f7c7d25a18\"><code>c590d75</code></a> v1.2.7</li>\n<li><a href=\"https://github.com/minimistjs/minimist/commit/0ebf4ebcd5f7787a5524d31a849ef41316b83c3c\"><code>0ebf4eb</code></a> [meta] add <code>auto-changelog</code></li>\n<li><a href=\"https://github.com/minimistjs/minimist/commit/e115b63fa9d3909f33b00a2db647ff79068388de\"><code>e115b63</code></a> [actions] add reusable workflows</li>\n<li><a href=\"https://github.com/minimistjs/minimist/commit/01fc23f5104f85c75059972e01dd33796ab529ff\"><code>01fc23f</code></a> [meta] add <code>safe-publish-latest</code></li>\n<li><a href=\"https://github.com/minimistjs/minimist/commit/f58745b9bb84348e1be72af7dbba5840c7c13013\"><code>f58745b</code></a> [eslint] add eslint; rules to enable later are warnings</li>\n<li><a href=\"https://github.com/minimistjs/minimist/commit/228ae938f3cd9db9dfd8bd7458b076a7b2aef280\"><code>228ae93</code></a> [Tests] add <code>aud</code> in <code>posttest</code></li>\n<li><a href=\"https://github.com/minimistjs/minimist/commit/236f4a07e4ebe5ee44f1496ec6974991ab293ffd\"><code>236f4a0</code></a> [readme] rename and add badges</li>\n<li><a href=\"https://github.com/minimistjs/minimist/commit/ab033567b9c8b31117cb026dc7f1e592ce455c65\"><code>ab03356</code></a> [Dev Deps] switch from <code>covert</code> to <code>nyc</code></li>\n<li><a href=\"https://github.com/minimistjs/minimist/commit/49c5f9fb7e6a92db9eb340cc679de92fb3aacded\"><code>49c5f9f</code></a> [Dev Deps] update <code>covert</code>, <code>tape</code>; remove unnecessary <code>tap</code></li>\n<li><a href=\"https://github.com/minimistjs/minimist/commit/783a49bfd47e8335d3098a8cac75662cf71eb32a\"><code>783a49b</code></a> [meta] create FUNDING.yml; add <code>funding</code> in package.json</li>\n<li>Additional commits viewable in <a href=\"https://github.com/minimistjs/minimist/compare/v1.2.5...v1.2.7\">compare view</a></li>\n</ul>\n</details>\n<details>\n<summary>Maintainer changes</summary>\n<p>This version was pushed to npm by <a href=\"https://www.npmjs.com/~ljharb\">ljharb</a>, a new releaser for minimist since your current version.</p>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=minimist&package-manager=npm_and_yarn&previous-version=1.2.5&new-version=1.2.7)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/colinhacks/zod/network/alerts).\n\n</details>",
        "html_url": "https://github.com/colinhacks/zod/pull/1507",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | cf9542ff22a45477082836e2936a3779f665ad04 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/6350766b3f758a000883a289 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1507--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1507--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE1MDctLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.p8astyc6gHo_-6504xhVUTn-tHA3771QPQNaSh0szjQ)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1290,
        "title": "#1171 support for refine, superRefine, transform and lazy in discriminatedUnion",
        "body": "Fix #1171\r\n\r\nAlso add support for lazy, refine and superRefine in discriminatedUnions",
        "html_url": "https://github.com/colinhacks/zod/pull/1290",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | c39d1746f179d39290867566953bf76d54d83303 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63734fd48b336a00080d614f |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1290--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1290--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTEyOTAtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.WQy3zlBjpmwp6V46neII_zbH9eqzk-I4SiICm8qWqws)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "@roblabat Looking good! I'll try to take some time in the next day or two to look a little more deeply at the implementation here, but first quick pass looks promising, thanks for taking this on.",
          "Just ran into this problem, anything holding up this PR? ",
          "Unfortunately I don't think getting this clever with extraction of literal values is wise. I modified this PR to make `z.discriminatedUnion` moderately more robust, but all union options still have to be `ZodObject` instances. Technically your approach that unwraps `ZodEffects` isn't sound, since `ZodEffect` is the class that contains preprocess/transform logic. The discriminator key must be available on the input *at the outset* in order to determine which option to use. It must also exist in the `Output` type of the schema, otherwise the discriminated union has been broken. Supporting `ZodEffect` instances jeopardizes both of these and increases the odds someone shoots themselves in the foot here.\r\n\r\nI dislike a lot of things about `z.discriminatedUnion`, but mostly that it's implementation depends on the internals of a bunch of first-party Zod types. In theory, anyone could subclass `ZodType` to create their own Zod schema classes, but using all this internal logic breaks portability. Approaches like the one in this PR make that even more true, which is why I'm slightly allergic to it.\r\n\r\nIf you want complex unions with refine, transforms, lazy, etc, I'd recommend just using `z.union`. ZodDiscriminatedUnion is intended as an optimization for simple cases. ",
          "> Unfortunately I don't think getting this clever with extraction of literal values is wise. I modified this PR to make `z.discriminatedUnion` moderately more robust, but all union options still have to be `ZodObject` instances. Technically your approach that unwraps `ZodEffects` isn't sound, since `ZodEffect` is the class that contains preprocess/transform logic. The discriminator key must be available on the input _at the outset_ in order to determine which option to use. It must also exist in the `Output` type of the schema, otherwise the discriminated union has been broken. Supporting `ZodEffect` instances jeopardizes both of these and increases the odds someone shoots themselves in the foot here.\r\n> \r\n> I dislike a lot of things about `z.discriminatedUnion`, but mostly that it's implementation depends on the internals of a bunch of first-party Zod types. In theory, anyone could subclass `ZodType` to create their own Zod schema classes, but using all this internal logic breaks portability. Approaches like the one in this PR make that even more true, which is why I'm slightly allergic to it.\r\n> \r\n> If you want complex unions with refine, transforms, lazy, etc, I'd recommend just using `z.union`. ZodDiscriminatedUnion is intended as an optimization for simple cases.\r\n\r\n@colinhacks I don't understand why the discriminator key should be available in the output of the discriminated union. DiscriminatedUnion is just an optimisation of unions with this discriminator key helping the code to find the correct type apply quicker. But like in a union the output doesn't have to be one inputs but one of the outputs of all types of the union if no output type of the discriminated union have the discriminator key I don't see why it should in the output has it already made it's office selecting the correct type of the union.\r\n\r\nBy the way I'm not really happy with the implementation like you as it's much more a work around to make it work with ZodEffect and ZodLazy where it should be working by checking the key of the Input of the ZodType to really make it's office. But I currently don't have a solution to do that properly.\r\n\r\nBut To conclude for me the PR should be reopened as your commit revert all the implementation of the PR and related issues or no more solved by this merge and should then be reopened as this merge doesn't solve issues asking for a discriminatedUnion working with transform, refine, superRefine and lazy. \r\n\r\nps: Even if using unions could work I think discriminatedUnion is a good optimisation pattern that should be more than just a quick a dirty solution working on just objects. It can be really powerfull especially with transform.",
          "Release notes say \"There are no breaking API changes\", but there are at least 2 breaking changes in this pull request:\r\n\r\n1. The signature of `ZodDiscriminatedUnion` was changed from \r\n`class ZodDiscriminatedUnion< Discriminator extends string,  DiscriminatorValue extends Primitive,  Option extends ZodDiscriminatedUnionOption<Discriminator, DiscriminatorValue>>`\r\nto `class ZodDiscriminatedUnion< Discriminator extends string,  Options extends ZodDiscriminatedUnionOption<Discriminator>[]>`\r\n\r\n2. `options` property of `ZodDiscriminatedUnion` was renamed to `optionsMap` and new `options` property introduced, having different type."
        ]
      },
      {
        "pr_number": 1502,
        "title": "branded type as normal argument",
        "body": "I sometimes use zod in regular `.js`-files and would like to leverage branded types there.\r\n\r\nThis adds an overload to make these two the same:\r\n\r\n```ts\r\nz.string().brand<\"X\">()\r\nz.string().brand(\"X\")\r\n```\r\n\r\nCan clean up tests and recheck docs if you like the idea.",
        "html_url": "https://github.com/colinhacks/zod/pull/1502",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 74eb0d4923b6dc60c67b9e90877770b4bc892bb8 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63733211c58e0100088667e1 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1502--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1502--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE1MDItLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.p9Sw7wXI3D_wfq3MDMbAb2HkGhhunaSTXjHWXdgv89Q)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "I can't think of a reason to block this, but branding specifically is of little use in places where there is not a type checker. Is this to help with the pseudo checking that LSP provides through TypeScript or something?",
          "Supporting this syntax might imply that we do something with the runtime value passed in, which we don't. Branding is a static-only thing and I think the API should reflect that. Though perhaps I'm misunderstanding something - I'm also curious as to the answer to Scott's question",
          "For further context, I have an `env.js` file because it allows me to use it in my `next.config.js` without transpilation. Typing works fine even if I import a JS-file everywhere I want to use it.\r\n\r\nExample:\r\n\r\n- https://github.com/trpc/trpc/blob/next/examples/next-prisma-starter/next.config.js#L1-L3\r\n- https://github.com/trpc/trpc/blob/next/examples/next-prisma-starter/src/server/env.js\r\n\r\n\r\nThe alternative would be to do some babel-hack to make my `next.config.js` into TS. At the end of the day, this is because Next.js doesn't allow my config file to be TS out-of-the-box & this was the least painful way I've encountered to deal with this."
        ]
      },
      {
        "pr_number": 1513,
        "title": "Take `path` parameter into account within `.parseAsync()`",
        "body": "The `path` parameter is not taken into account when using `.parseAync()` method.\r\n`parseAsync()` calls `safeParseAsync()` with the same params.\r\nHowever, the line 258 is inconsistent with the similar line 227 of sync method.\r\n\r\n```\r\n// in safeParse():\r\nconst result = this._parseSync({ data, path: ctx.path, parent: ctx });\r\n// in safeParseAsync()\r\nconst maybeAsyncResult = this._parse({ data, path: [], parent: ctx });\r\n```\r\n\r\nTherefore, `path` param is ineffective and this PR should fix it.",
        "html_url": "https://github.com/colinhacks/zod/pull/1513",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | a7cbf75905bebf4834d453fefa26c6eb6c7f58d3 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/6353ba80707bb60009681dda |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1513--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1513--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE1MTMtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.LIXTve9mq0dd_0azkHC5y0ySsjrYUKl-Uuy-cbyh0Fg)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1463,
        "title": "Update README.md",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1463",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 2cf6666da63d5999616593d925440547ce488dc6 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/633d6561a86e4b0009fdd0d8 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1463--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1463--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE0NjMtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.Xy_peUw6-_9G7A8AJke_pqYy0gvq115FWU-ni7ayuTk)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1448,
        "title": "Add `ZodSymbol`",
        "body": "# Overview\r\n\r\nThis PR adds support for the `ZodSymbol` type, which parses the primitive JavaScript type `symbol`.\r\n\r\n`ZodSymbol.create()`/`z.symbol()` can be called with or without a defined symbol as the first argument.\r\n\r\nIf passed a **defined** symbol, inferring will reflect `typeof [name of const that defines the symbol]`\r\n\r\nExample:\r\n\r\n```ts\r\nconst definedSymbol = Symbol(\"symbol\");\r\nz.symbol(definedSymbol); // => infers `typeof definedSymbol`\r\n```\r\n\r\nIf called without a symbol as the first argument, then it will infer `symbol` and validate _any_ symbol.\r\n\r\n```ts\r\nz.symbol(); // => parses any symbol and infers `symbol`\r\n```\r\n\r\n### Preventing an impossible validation\r\n\r\n **Important:** For the compiler to correctly reflect the type of a `unique symbol` it [**must** be defined in a const declaration or as a readonly static property.](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol)\r\n \r\n So, `z.symbol(Symbol())` would pass type validation and return `ZodSymbol<symbol>` but we know that it would fail _every_ time because no value would ever be assignable to this symbol (since there is no way to access it).\r\n\r\n To prevent people from calling `z.symbol()` with a symbol that's not a `unique symbol` (e.g., `symbol(Symbol(\"unassigned\"))` accidentally and cause `zod` to **always** error out, we fail on compile time:\r\n\r\n ```ts\r\n <S extends symbol>(\r\n   symbol: S extends symbol ? (symbol extends S ? /* symbol is not unique */ never : /* OK */ S) : never,\r\n   params?: RawCreateParams\r\n): S extends symbol ? (symbol extends S ? never : ZodSymbol<S>) : never\r\n ```\r\n\r\n## Summary\r\n\r\n```ts\r\nz.symbol(); // => this one accepts any symbol and infers `symbol`\r\n\r\nz.symbol(Symbol(\"unassigned\")); // => this one will fail on compile time\r\n\r\nconst mySymbol = Symbol();\r\nz.symbol(mySymbol); // => this one will infer `typeof mySymbol` and validate only symbols that are equal to `mySymbol`\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/1448",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 27505f3202b557487169d87d53f835c77103cbf1 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63735cfc8b336a00080e6482 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1448--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1448--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE0NDgtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.QkDpEe5uybMw_dv4McC77uoSAslcdUzL0PAlFyoJ8EM)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Great PR, thanks for your work on this and sorry for the long delay.\r\n\r\nI propose a slightly different approach, namely that we use `z.literal()` for declaring a validator for a specific symbol. This is more analogous to how `z.string()` and `z.literal(\"tuna\")` works for strings. I pushed a commit to reflect this.\r\n\r\nUltimately I didn't want to clutter up the implementation of ZodLiteral too much, so unfortunately I ended up dropping your clever solution for preventing `z.symbol(Symbol('whatever'))` :( I figure anyone bothering with literal symbol schemas probably knows better than to create an anonymous symbol inside their schema definition...but we'll see.\r\n\r\nThanks again!"
        ]
      },
      {
        "pr_number": 1624,
        "title": "Fix Minor Typos",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1624",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | dc82d65e876aaa070485b4893b6146f41bc3172b |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/638a0672d854070009610c8a |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1624--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1624--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE2MjQtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.ex_AjJTakbTtjCk1BlHxu4b8labIQv_fuAHDinvi3OQ)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      }
    ],
    "v3.19.1": [
      {
        "pr_number": 1385,
        "title": "Fix typo in readme",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1385",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 7e6b6bcd6fdd3d1c1395c0c44ce4d679634b6f3d |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63170c451672cd00083d0a8f |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1385--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1385--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTEzODUtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.JBvji8w1u6E5S0PpcqjRuTdbDANO1YgTdTfJywxcY7E)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Cool, this also fixed link in TOC. Thanks"
        ]
      },
      {
        "pr_number": 1393,
        "title": "Optimize object strip case",
        "body": "Refs #205\r\n\r\nThis skips the check for extra keys in the default case of `strip` being the object parsing strategy, because we don't use the extra keys.\r\n\r\nThis yields a pretty modest performance bump - about 5% in the realworld case in my testing.",
        "html_url": "https://github.com/colinhacks/zod/pull/1393",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | e0bba43580dd4f9b48acbfd83f6c840d56757df5 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/6319f1f39586df0008b057e8 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1393--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1393--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTEzOTMtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.EoeOydGdTt1E_9jlXPTu1aD9RfJZ9J5nxtS5P1lfuXE)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1404,
        "title": "Fix refine with type guard signature",
        "body": "When using `.refine` with a type guard, the current type definitions are changing the parser's `Input` type. This is inconsistent and causing issues in tRPC where Zod Input types are inferred for client procedure signatures.\r\n\r\nThis just updates the generic parameter and adds a (previously failing) test for the `Input` type.",
        "html_url": "https://github.com/colinhacks/zod/pull/1404",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | b878546eb195f9d5761972c87f7c2bcc1e2eefb4 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/631e16bdd74d7d00083c7cc1 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1404--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1404--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTE0MDQtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.Ad0dbUTjBULXQo959arafn6uUT944OxRgmG2rOSuDj8)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      }
    ],
    "v3.19.0": [
      {
        "pr_number": 1363,
        "title": "docs: fix links to anatine plugins in README",
        "body": "Previous links were leading to 404",
        "html_url": "https://github.com/colinhacks/zod/pull/1363",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | bc1190c27a8d0e9362fa044f7164227786629cc1 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/630e152f83e09300086d7d2b |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1363--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1363--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTEzNjMtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.apZH_mGXoQf_EtMB8KS0DiV745Rtzqi61iTIcRgkmJA)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1330,
        "title": "Update readme keyof typo",
        "body": "Update: Use `.keyof` to create a `ZodEnum` schema from the keys of an object schema.\r\n\r\ncloses https://github.com/colinhacks/zod/issues/1326",
        "html_url": "https://github.com/colinhacks/zod/pull/1330",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 066b78797f8a9b6b905a868025417c4755ee878e |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/62f538473f26aa000adc0f07 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | https://deploy-preview-1330--guileless-rolypoly-866f8a.netlify.app |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTEzMzAtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.f5hLDtuDJlHRfU_RqDn2LLq4Em6PuSmY-IqzTT3Od9U)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1383,
        "title": "3.19.0",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1383",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 16fd91a5c52f5c83df34eb59b0ebbb04635cb0aa |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/63170140bf3c410009ee7f55 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | [https://deploy-preview-1383--guileless-rolypoly-866f8a.netlify.app](https://deploy-preview-1383--guileless-rolypoly-866f8a.netlify.app) |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTEzODMtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.LMwB7DQKJzSoolKCd7yHVt_Vx2gKzfG4EvVGyFDOZ54)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      }
    ],
    "v3.18.0": [
      {
        "pr_number": 1283,
        "title": "docs: add zodios to zod ecosystem",
        "body": "This adds zodios to zod ecosystem",
        "html_url": "https://github.com/colinhacks/zod/pull/1283",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 82b56bb8ea7ed4a7b01ef4c92fa4e7219cc1d8b8 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/62dc72906a248a0008aa426e |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | https://deploy-preview-1283--guileless-rolypoly-866f8a.netlify.app |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTEyODMtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.aSJ4iSaFpV78Nhe3g0fHMmu3qsZERSkuCM0VHK-wRCU)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1281,
        "title": "Added Avana Wallet as sponsor",
        "body": "Hi - we recently became a sponsor - thanks for making zod possible",
        "html_url": "https://github.com/colinhacks/zod/pull/1281",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 292b2dccf38e7c6624b93a08a0b1fe2ec54cddc7 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/62de34e376ba5400088dd10f |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | https://deploy-preview-1281--guileless-rolypoly-866f8a.netlify.app |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTEyODEtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.9tw8XpJEU-a0SAoCeEBYllsjGmlHMAlvhAJ9dTQbLLg)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1305,
        "title": "Add @runtyping/zod to ecosystem list",
        "body": "Many thanks for the awesome project. I added `zod` to `@runtyping`, which converts static types & JSON schema to `zod`.\r\n\r\nHere's a link if you'd like to add it to your \"ecosystem\" list.",
        "html_url": "https://github.com/colinhacks/zod/pull/1305",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 274140e1bbb99075d1a5b7010077fef209a20daf |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/62ea56010a876d000824afea |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | https://deploy-preview-1305--guileless-rolypoly-866f8a.netlify.app |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTEzMDUtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.zMtsK7jIMuAWaCxrhNhle5Ob9E2mB4u4gq2ekdc9LUc)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1280,
        "title": "Refactor type checks",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1280",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | e8de9c7a87cf6e33a3eab3cfdfe43cc7987a6281 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/62de4a3589c2bf0008d38963 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | https://deploy-preview-1280--guileless-rolypoly-866f8a.netlify.app |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTEyODAtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.qDJVocLsXGSbN09aYFChfBnr_8OcXvED0tU27VL-pfo)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "conditional type checks lib seems hacky and over complicated.\r\ncan't you just use this :  \r\n```typescript\r\ntype Assert<T, U> =\r\n    (<V>() => V extends T ? 1 : 2) extends\r\n    (<V>() => V extends U ? 1 : 2) ? true : \r\n    { error: \"Types are not equal\"; type1: T; type2: U };\r\n```\r\nIf you want to be a little less strict to handle intersections , see my comment [here](https://github.com/microsoft/TypeScript/issues/48100#issuecomment-1193206962)\r\n\r\ni use it for zodios and it seems to pass all my checks.  \r\ni made an article about it [here on dev.to](https://dev.to/ecyrbe/how-to-unit-test-your-typescript-utility-types-3cnm)\r\n",
          "Sure, sounds good! That's some dark type magic."
        ]
      },
      {
        "pr_number": 1319,
        "title": "docs: fix link to z.preprocess in Supporting date strings",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1319",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 8372d4fa01bcd0cace200295983c585e039c0a1c |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/62f2da75437f06000877130f |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | https://deploy-preview-1319--guileless-rolypoly-866f8a.netlify.app |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTEzMTktLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.opVXGpUh2Y-kwrc1WIs2P-_LNluWk5YWSICz_9fpqcM)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Thanks!!"
        ]
      },
      {
        "pr_number": 1312,
        "title": "docs: fix link to Node/npm",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1312",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | bb8386d0cd1240596186f7675200582fd27d6c43 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/62ecada29772e90009d2e686 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | https://deploy-preview-1312--guileless-rolypoly-866f8a.netlify.app |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTEzMTItLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.FalXcbh4FzCy_724kJ64FxcMQPAcdkKj82RdR8KRLyY)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1279,
        "title": "Add branded types",
        "body": "```ts\r\nconst mySchema = z\r\n  .object({\r\n    name: z.string(),\r\n  })\r\n  .brand<\"mySchema\">();\r\ntype MySchema = z.infer<typeof mySchema>;\r\n\r\nconst doStuff = (arg: MySchema) => {}\r\n\r\n// works\r\ndoStuff(mySchema.parse({ name: \"hello there\" }));\r\n// fails\r\ndoStuff({ name: \"hello there!\" });\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/1279",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | d34583a876b73fb61d13d8797962f9bb9086406a |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/62de3e37a0ee3c000940eff8 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | https://deploy-preview-1279--guileless-rolypoly-866f8a.netlify.app |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTEyNzktLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.01wPef5DfnHvJffPil16KUCDbtgmNtHIZ_mDzS4NDTU)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "I did not test it, so maybe i'm asking a dumb question.   \r\nCan this branded type be easily made unbranded ?   \r\n  \r\n```typescript\r\nconst mySchema = z\r\n  .object({\r\n    name: z.string(),\r\n  })\r\n  .brand<\"mySchema\">();\r\ntype MySchema = z.infer<typeof mySchema>;\r\ntype MyUbrandedSchema = z.input<typeof mySchema>; // does this return unbranded type ?\r\n\r\nconst doStuff = (arg: MySchema): MyUbrandedSchema => {\r\n  return arg; \r\n}\r\n\r\nconst myStuff: MyUbrandedSchema = doStuff(mySchema.parse({ name: \"hello there\" }));\r\n```",
          "I'll add an `unwrap` method to pull out the original schema \u2014 that's what I've done for ZodOptional and others.",
          "Are there any plans to release these changes any time soon? *no pressure* \ud83d\ude05 "
        ]
      },
      {
        "pr_number": 1323,
        "title": "3.18",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1323",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 0e9fd2e1fbb6179d17392ec2d593919547e1cd10 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/62f2ddb878622b000993fbda |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | https://deploy-preview-1323--guileless-rolypoly-866f8a.netlify.app |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTEzMjMtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.fAxOXGNlxK0tadM1DXojZGZVbtO7gca6j5igPD8X0ao)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      }
    ],
    "v3.17.10": [
      {
        "pr_number": 1267,
        "title": "Replace keyword boolean with date in the docs",
        "body": "Just noticed with ac2fb4a in #1222 `boolean` has been pasted but not replaced with `date` in the docs.",
        "html_url": "https://github.com/colinhacks/zod/pull/1267",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 3cd59bafc38a38d699fdf691a2b87856989aa953 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/62d505d132234e000851e78d |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | https://deploy-preview-1267--guileless-rolypoly-866f8a.netlify.app |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTEyNjctLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.kZhKuK5A7afNc1EMJndyGIp1CViaq96zFG00E_bmLWc)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Good catch!"
        ]
      },
      {
        "pr_number": 1276,
        "title": "Fix: transform example on README",
        "body": "Super quick fix for example on README.",
        "html_url": "https://github.com/colinhacks/zod/pull/1276",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 5d4f2b02811b30a955d6ef737fe4f98b72d7d50d |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/62d853013a09ac0008735be3 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | https://deploy-preview-1276--guileless-rolypoly-866f8a.netlify.app |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTEyNzYtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.t-By8CCUgJIyq3fhRrV_Azz4gSWuf9jkpmyydXg4onU)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Thanks!"
        ]
      },
      {
        "pr_number": 1273,
        "title": "Fix endsWith default message",
        "body": "The endsWith default message is \"Invalid input: must start with\" and should be \"Invalid input: must end with\"",
        "html_url": "https://github.com/colinhacks/zod/pull/1273",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | d3fcc128c80523ed49a4d0bf2dcf66154f7b7807 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/62d7c5fe9d0fe3000954d2d3 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | https://deploy-preview-1273--guileless-rolypoly-866f8a.netlify.app |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTEyNzMtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.ayC9ua7quLhgFtg8IU7V-AX-Cnkt31k3Z9Y2cWaQxI8)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Oops \ud83e\udd26\u200d\u2642\ufe0f"
        ]
      }
    ],
    "v3.17.9": [
      {
        "pr_number": 1222,
        "title": "Added native support for min and max date validations",
        "body": "This PR fixes #1089.\r\n\r\n`ZodDate` now can natively validate for `min` and `max` allowed dates.",
        "html_url": "https://github.com/colinhacks/zod/pull/1222",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 5d7d3bdfc90a2481eab66613ad055442dd411c7b |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/62d4f57cc9285800083471e0 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | https://deploy-preview-1222--guileless-rolypoly-866f8a.netlify.app |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTEyMjItLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.fe0Osr0yIpjNFOIqjVKHpnQ6YMYP2RzuvhqWUgdrDh4)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Thank you @Svish for the review! I'll be really happy to conform to the library standards :)\r\n\r\nI'm a bit confused, the checks are already inclusive by default.\r\n`if (input.data.getTime() > check.value) { throw error }` already means that if the submitted value equals the max, it is considered valid.\r\n\r\nThat's also why the hardcoded message - it's inclusive by default.\r\n\r\nI get the feedback of adding the `inclusive` field to show the error message as it might bet used by something else in the future, but the min/max check looks correct to me.\r\n\r\nI'll push asap the new changes :)",
          "> Thank you @Svish for the review! I'll be really happy to conform to the library standards :)\r\n> \r\n> I'm a bit confused, the checks are already inclusive by default. `if (input.data.getTime() > check.value) { throw error }` already means that if the submitted value equals the max, it is considered valid.\r\n> \r\n> That's also why the hardcoded message - it's inclusive by default.\r\n> \r\n> I get the feedback of adding the `inclusive` field to show the error message as it might bet used by something else in the future, but the min/max check looks correct to me.\r\n> \r\n> I'll push asap the new changes :)\r\n\r\nOh! Sorry, I must have read the checks backwards. I think I just expected to see an `<=` when you're message read \"or equal\". My bad! But yeah, more _inclusive_ error messages at least is great \ud83d\ude01",
          "Unless it already is possible and I've just missed it in the PR, could you please you add getters for the minimum and maximum date, so that it's possible to get those values \"back out\" of the schema? Equivalent to how `ZodString` has `minLength` and `maxLength`, so that you for example can do `z.string().min(1).minLength` and get `1`. Could be called `get minDate()` and `get maxDate()` for instance.\r\n\r\nThese getters makes it possible to set the correct max and min values of an input component from a schema directly, rather than having to pass those in manually. \r\n\r\nMight be possible to just copy them from `ZodString`?\r\n```ts\r\n  get minDate() {\r\n    let min: Date | null = null;\r\n    this._def.checks.map((ch) => {\r\n      if (ch.kind === \"min\") {\r\n        if (min === null || ch.value > min) {\r\n          min = ch.value;\r\n        }\r\n      }\r\n    });\r\n    return min;\r\n  }\r\n\r\n  get maxDate() {\r\n    let max: Date | null = null;\r\n    this._def.checks.map((ch) => {\r\n      if (ch.kind === \"max\") {\r\n        if (max === null || ch.value < max) {\r\n          max = ch.value;\r\n        }\r\n      }\r\n    });\r\n    return max;\r\n  }\r\n```\r\n",
          "That's indeed a valid suggestion, I'll add them :)",
          "An immaculate PR \u2014 thanks!! \ud83d\ude4c\r\n"
        ]
      },
      {
        "pr_number": 1216,
        "title": "feat(enum): return enum from object keys",
        "body": "This should close this issue: #1085 \r\n\r\nusage\r\n```typescript\r\nconst result: Z.ZodEnum< [ 'a', 'b' ] > = z.object({ a: z.string(), b: z.string().optional() }).enum();\r\n```  \r\n  \r\nit allows to extract the keys of a zob object schema as a zod enum.\r\n\r\nTell me if it's ok.",
        "html_url": "https://github.com/colinhacks/zod/pull/1216",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 4bdcd01909e3895e8a3edf14123bf8e2c1249bd9 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/62d4fe9b395be800087346c0 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | https://deploy-preview-1216--guileless-rolypoly-866f8a.netlify.app |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTEyMTYtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.CYRKjRsNKaBNXt7PGFke2KWgGIpMayTKVUHbwoyu62o)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "That conversion from a union to a tuple is some black magic. Love it.\r\n\r\nI renamed this method to `keyof` to stay in closer agreement with TypeScript terminology. \r\n\r\nGreat PR. \ud83d\ude4c ",
          "@colinhacks yeah, i became a typescript vodoo master recently. Don't ask me what it cost me \ud83e\udd23",
          "Really cool trick @ecyrbe, discovered half of it to make [tuple permutations](https://gist.github.com/betafcc/f9084dd9f42ffea59ad6f2ff366b864f) but didn't occur to me to use the function overload trick to get ordering, nice.\r\n\r\nDo beware of how [TS treats key order differently than JS engines](https://2ality.com/2015/10/property-traversal-order-es6.html#traversing-the-own-keys-of-an-object) though:\r\n\r\n```ts\r\nz.object({ a: z.string(), '1': z.string() }).keyof()._def.values\r\n// TS says it's ['a', '1']\r\n// JS runtime it's ['1', 'a']\r\n```\r\n\r\nSeems to not be an issue for internal use with zod enum, but thought pointing this out can be of some value since the test cases only have non numeral strings"
        ]
      },
      {
        "pr_number": 1175,
        "title": "Don't use invalid_type_error for `undefined` fields.",
        "body": "Fixes #1174",
        "html_url": "https://github.com/colinhacks/zod/pull/1175",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 362cff5d28a5091eb186023708fc2785f88059db |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/62d500b3cd1eb9000812067a |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | https://deploy-preview-1175--guileless-rolypoly-866f8a.netlify.app |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTExNzUtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.pmNqy8CZmHPKjgepXZ1O-pacIxGVSGApiVXOaJp74Dw)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "@colinhacks Hi, any chance you could give this a look? Thank you!"
        ]
      },
      {
        "pr_number": 1160,
        "title": "Fixed typing mistake in README.md",
        "body": "Removed an extra `from` at line 330.\r\n\r\n> You can also specify a particular version:\r\n> \r\n> ```ts\r\n> import { z } from from \"https://deno.land/x/zod@v3.16.1/mod.ts\"\r\n> ```",
        "html_url": "https://github.com/colinhacks/zod/pull/1160",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 352e4bebb3748e083723ffe6362f23d91d04bb20 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/62d501c6d2e65a00086a0792 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | https://deploy-preview-1160--guileless-rolypoly-866f8a.netlify.app |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTExNjAtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.GqL6vI1HbCBm-28j93xu6t-PlD836jAniOmz8RGo9kU)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1162,
        "title": "Convert \"an nullable\" to \"a nullable\"",
        "body": "Hi!",
        "html_url": "https://github.com/colinhacks/zod/pull/1162",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 27a83473801bc3f5a7501a10f136df8caf094a4a |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/628bc248407f95000926608a |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | https://deploy-preview-1162--guileless-rolypoly-866f8a.netlify.app |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTExNjItLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.WLUW3lfumxctjZNqOm2xTXeT8R_YnY8LLlMDi3-ZZUo)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      }
    ],
    "v3.17.7": [],
    "v3.17.6": [
      {
        "pr_number": 1233,
        "title": "Fix Typo",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1233",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 3ad9e8ef570b6f3bba6f05920080a6e07fa9da44 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/62bbcfc9a28f4d000889f2a5 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | https://deploy-preview-1233--guileless-rolypoly-866f8a.netlify.app |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTEyMzMtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.GTRVQeEuohOrxRjglYKj0SjWYd5MIinM3yOxV6XOcE0)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1231,
        "title": "fix link in docs",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1231",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 6ba77c31378b991ffde2346ba88812ee24627016 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/62d4c6261bfca80008548fe7 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | https://deploy-preview-1231--guileless-rolypoly-866f8a.netlify.app |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTEyMzEtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.kvuzy0uSNrbxrn0tSu_wuvxno4T9WdSJgAC23b1TKUM)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1203,
        "title": "Add `zod-xlsx` to the ecosystem section in README",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1203",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 5bb3748537164b30e14d934ed18e220fd89b744e |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/62d4d53f55d7650009bdb52b |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | https://deploy-preview-1203--guileless-rolypoly-866f8a.netlify.app |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTEyMDMtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.nZdrYkCjzPAymKJ6dK8MaXws3YRhc8ifN-3jOYNhYlQ)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1242,
        "title": "Add BigInt support for literals",
        "body": "This pull request adds support for BigInt literals as discussed here: #1108 ",
        "html_url": "https://github.com/colinhacks/zod/pull/1242",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 0d9fbfb86664af90e4e28851213136810591ea7c |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/62c2fb1b9eda6100071d9268 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | https://deploy-preview-1242--guileless-rolypoly-866f8a.netlify.app |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTEyNDItLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.SUm5z7tTsPqq0PVJ6x23WimtRuWhhJWYbEOZMi3P91g)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Beautiful PR. First time I've ever seen someone use the replacer function in `JSON.stringify` \ud83d\udc4f\ud83d\udc4f\ud83d\udc4f ",
          "@AustinShelby @colinhacks this pull request introduced a require cycle between `parseUtil` and `ZodError`"
        ]
      }
    ],
    "v3.17.5": [
      {
        "pr_number": 1235,
        "title": "Add string.startsWith and string.endsWith",
        "body": "This adds a startsWith and endsWith helper on the string like discussed here https://github.com/colinhacks/zod/issues/604\r\n\r\nsmall aside, the playground.ts is missing, which is mentioned in the contrib",
        "html_url": "https://github.com/colinhacks/zod/pull/1235",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 92725f68b9537d609bc43b2fea83df74f2785ccc |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/62d4be890f3af60008d8057b |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | https://deploy-preview-1235--guileless-rolypoly-866f8a.netlify.app |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTEyMzUtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.yY2DkNRLRlRAeA03R9sm78kZL72sbTaFEY8a-dhvLeY)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "CC @alii ",
          "ooh awesome :D thank you!",
          "@colinhacks anything else I can do for this PR, I cant assign you as a reviewer and the contribution file didnt mention anything around PR creation guidelines.",
          "Transforming the parameter users give to the `startsWith` function into a regex doesn't work in certain edge cases.\r\n\r\nConsider the following scenario;\r\n\r\n```ts\r\nconst x = z.string().startsWith(\"[a-g]\");\r\nx.parse(\"[a-g]\");\r\n```\r\n\r\nBy first look this should work as the string `[a-g]` starts with `[a-g]`.\r\n\r\nThe problem is that when you transform `[a-g]` into a regex using your implementation it checks if the string starts with any character from `a` to `g`, which it doesn't as it starts with the character `[`.\r\n\r\nI suggest using the native `String` functions [startsWith](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith) and [endsWith](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith).",
          "Rather than regular expressions, depending on what browser support this library aims for, these rules should probably just use the built-in [`startsWith`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith) and [`endsWith`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith) string functions, or alternatively the older `indexOf` of `lastIndexOf` functions?"
        ]
      }
    ],
    "v3.17.4": [
      {
        "pr_number": 1167,
        "title": "Add seasoned to sponsors",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1167",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 71655f0808d96f998530b6fc415f414ea8b9b6ce |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/628e494dc29a36000850c356 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | https://deploy-preview-1167--guileless-rolypoly-866f8a.netlify.app |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTExNjctLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.8BotwkS9h4Duc9NuQkJOTArdmzyHUXDG9hHDmRZivFQ)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1168,
        "title": "Update README for z.record key type schema",
        "body": "This documents the behaviour when passing two arguments to `z.record`.  \r\nI updated the adjacent sections to what I added to make it consistent.\r\n\r\nThis is open to suggestions.",
        "html_url": "https://github.com/colinhacks/zod/pull/1168",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 1b71f5c61ed9ccfba441aca1c93680a559a6f97f |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/628e98ec8dd6520009193c49 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | https://deploy-preview-1168--guileless-rolypoly-866f8a.netlify.app |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTExNjgtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.I-EaihiRg37KWgDzqxcSbIwLVtWfG8HqRJA3tUvryVw)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1202,
        "title": "Fix minor spelling and grammar issues in README",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1202",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 79a69259e4403cd899576fe8fb86fd66b8dc15bb |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/62a420f87962650009e42464 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | https://deploy-preview-1202--guileless-rolypoly-866f8a.netlify.app |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTEyMDItLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.02sSmyERKwPkgXjNcNnbbJa3b739f-V7wb2NpgmOelo)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1255,
        "title": "Fix link to node in readme",
        "body": "Link to node points to nothing in readme, changed the link.\r\nAlso made the table of content name consistent with the section title and made npm lowercase as it should.",
        "html_url": "https://github.com/colinhacks/zod/pull/1255",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 54646efa428367c6b74b5b803c7d6fce9119020f |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/62cd417c366dad0008347bbb |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | https://deploy-preview-1255--guileless-rolypoly-866f8a.netlify.app |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTEyNTUtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.EbY9mKzl1n5ZPOT1VuMYA47JG4qyULaWDRvO-c0DN9k)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1250,
        "title": "Update README to use headings for validation library names",
        "body": "## Why?\r\n\r\n- To fix the links to individual frameworks in the Table of Contents",
        "html_url": "https://github.com/colinhacks/zod/pull/1250",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | f61d6173331d072809c0ae115301f511b89539df |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/62c5ce449de55d00091d33d1 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | https://deploy-preview-1250--guileless-rolypoly-866f8a.netlify.app |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTEyNTAtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.fn0YfZq5OikGbftEvu95ZA_9MDqRDl1PW4bMGHhPZnc)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1248,
        "title": "ZodString.minLength defaults to null to be consistent with maxLength",
        "body": "This PR fixes #1246.\r\n\r\n`minLength` and `maxLength` are inconsistent in `ZodString`, this PR makes the behaviour more consistent by returning `null` if no max is defined (not changed) and if no min is defined (instead of `-Infinity`).\r\n\r\nThis PR also improves the syntax by removing the incorrect usage of `Array.map` that had side effects & no return).\r\n\r\nA couple tests are also added to make sure it works as intended.",
        "html_url": "https://github.com/colinhacks/zod/pull/1248",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 960edc47cec430cb8e434cb5740260e02b03192b |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/62c5c15d82e9c8000858c768 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | https://deploy-preview-1248--guileless-rolypoly-866f8a.netlify.app |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTEyNDgtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.BanjKyPATrxzOt8fI0dda2z_6K_04IC2gYkuPKPbeNk)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Looking at other types in the library, it seems to me that the most consistent API would be to return `number | null` for both min and max, rather than returning `number`. Some examples below:\r\n\r\n```typescript\r\n// ZodNumber\r\n    get minValue(): number | null;\r\n    get maxValue(): number | null;\r\n```\r\n\r\n```typescript\r\n// ZodArrayDef\r\n    minLength: {\r\n        value: number;\r\n        message?: string;\r\n    } | null;\r\n    maxLength: {\r\n        value: number;\r\n        message?: string;\r\n    } | null;\r\n```\r\n\r\n```typescript\r\n// ZodSetDef\r\n    minSize: {\r\n        value: number;\r\n        message?: string;\r\n    } | null;\r\n    maxSize: {\r\n        value: number;\r\n        message?: string;\r\n    } | null;\r\n```\r\n\r\nTherefore, I would suggest this instead:\r\n\r\n```typescript\r\n// ZodString\r\n    get minLength(): number | null;\r\n    get maxLength(): number | null;\r\n```",
          "Hey @ealmansi-uc, I guess you're right. I have updated the PR to reflect the same logic used in `ZodNumber` and use `number | null`. Should look better now. Thank you!",
          "@Balastrong LGTM now, although I'm not a contributor to this repo \ud83d\ude05  you'll probably want to update the PR's title\r\nkeep in mind this is a breaking change, I'm not sure how conservative this project is around breaking changes",
          "Thanks, good PR!"
        ]
      },
      {
        "pr_number": 1236,
        "title": "Adds remix-domains to the README under Ecosystem",
        "body": "We'd like to add remix-domains in the README (under ecosystem) as our library is only possible due to the existence of Zod <3 and we believe it improves a lot the DX of Remix.\r\n\r\nLMK if this PR is welcome or should I make any changes to it.",
        "html_url": "https://github.com/colinhacks/zod/pull/1236",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\nBuilt [without sensitive environment variables](https://docs.netlify.com/configure-builds/environment-variables/#sensitive-variable-policy)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 3adb786a480c55f8c02c73e4738f15b64e97dd6f |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/62bc69505f0bfa0008ce163f |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | https://deploy-preview-1236--guileless-rolypoly-866f8a.netlify.app |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTEyMzYtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.qkn4uecAYfZeWNDjmlS3U-hhXBDRKGZvVegT9PhF7Bg)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "An extremely welcome PR of course :)"
        ]
      },
      {
        "pr_number": 1265,
        "title": "Add deno",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1265",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 27c40f083e1f361c566ef532103839a4cedf7d24 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/62d49c1890f8430008eb40a6 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | https://deploy-preview-1265--guileless-rolypoly-866f8a.netlify.app |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTEyNjUtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.YO2Gd96e4WhuTaSgtZeIHRxNGRrvRh-rugSpfgwwBWo)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      }
    ],
    "v3.17.3": [],
    "v3.17.2": [],
    "v3.17.0": [
      {
        "pr_number": 1157,
        "title": "Added README for deno",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1157",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 8593e0987f937ef6f87a8b6a3246ac1b5d2bc30b |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/6289d8ef55864800087d5cfc |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | https://deploy-preview-1157--guileless-rolypoly-866f8a.netlify.app |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTExNTctLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.WzA5YdBk0SbhsoT8FLsLnUnfuv1sfwJdlQLGSVRnyUU)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "@colinhacks Github has a weird bug/feature; where if you fork a project more than once, the second fork goes under a different context. So anyway, I deleted it there, and made the changes you requested here!"
        ]
      },
      {
        "pr_number": 681,
        "title": "feat: trim method for ZodString",
        "body": "resolves #653",
        "html_url": "https://github.com/colinhacks/zod/pull/681",
        "comments": [
          "@colinhacks what do you think about this PR?",
          "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n",
          "ping",
          "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n",
          "ping",
          "Up. Found https://github.com/neuledge/computed-types and thought it is cool to have trim() integrated.",
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 920ba3d0cf139940ed5e7e844bdb71d45df4cb89 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/6289e3d37e2be50008ea7668 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | https://deploy-preview-681--guileless-rolypoly-866f8a.netlify.app |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTY4MS0tZ3VpbGVsZXNzLXJvbHlwb2x5LTg2NmY4YS5uZXRsaWZ5LmFwcCJ9.nZUOUDpII6XCJrxfhOCydAu1U98MrweyTugT8-Id3H0)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Many thanks, @colinhacks! I have many places to add it on my backend!"
        ]
      }
    ],
    "v3.16.1": [
      {
        "pr_number": 1130,
        "title": "doc: fix link",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1130",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 189824c6d315715d86cd799f7cca9ce80724799d |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/627cee32e5ef910008c92fc5 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | https://deploy-preview-1130--guileless-rolypoly-866f8a.netlify.app |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTExMzAtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.oA2mtMOMSXQ6CeZ21OMn3pVCjVvfHySuoEsp1hNQMqI)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Thanks!"
        ]
      },
      {
        "pr_number": 1133,
        "title": "Add docs link",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1133",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 991dc94c1ee98b3925cef3156ddcb230f78d506d |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/627ea8c951ae480008c7e21c |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | https://deploy-preview-1133--guileless-rolypoly-866f8a.netlify.app/ |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTExMzMtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.bb1c5kkCAzIOfrX1--FIfRHW5bNe6-JBaTToU5cA1hM)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      },
      {
        "pr_number": 1152,
        "title": "Improve JSDoc deprecation warning for nonempty",
        "body": "Pretty self-explanatory I guess. By using the `@deprecated` tag in JSDoc your IDE will automatically mark the method as deprecated when you use it in your code.",
        "html_url": "https://github.com/colinhacks/zod/pull/1152",
        "comments": [
          "### <span aria-hidden=\"true\">\ud83d\udc77</span> Deploy request for *guileless-rolypoly-866f8a* pending review.\n[Visit the deploys page to approve it](https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | d8b1852d321d3606c352b905bd56c1ef5f021fe5 |"
        ]
      },
      {
        "pr_number": 1131,
        "title": "Instanceof issue fatal",
        "body": "closes #1001 \r\n\r\nHere is a codesandbox to illustrates the problem encountered: https://codesandbox.io/s/youthful-sunset-6jn810?file=/src/index.test.ts\r\n\r\nAn issue with instanceof schema should be fatal in order to prevent running refinement on a value which might be incompatible with the provided instance type.\r\n\r\nThis PR introduces an additional optional parameter in the `custom` signature to specify wether the issue should be fatal.\r\n\r\n```ts\r\ndeclare const custom: <T>(\r\n  check?: (data: unknown) => any,\r\n  params?: Parameters<ZodTypeAny[\"refine\"]>[1],\r\n  fatal?: boolean\r\n) => ZodType<T>\r\n```\r\n\r\nHowever it would be better to specify it as an object to specify more options in the future.\r\n\r\n```ts\r\ninterface CustomOptions {\r\n  fatal: boolean\r\n}\r\n\r\ndeclare const custom: <T>(\r\n  check?: (data: unknown) => any,\r\n  params?: Parameters<ZodTypeAny[\"refine\"]>[1],\r\n  opts?: Partial<CustomOptions>\r\n) => ZodType<T>\r\n```\r\n\r\nLet me know if this PR needs improvements to meet the guidelines.",
        "html_url": "https://github.com/colinhacks/zod/pull/1131",
        "comments": [
          "### <span aria-hidden=\"true\">\ud83d\udc77</span> Deploy request for *guileless-rolypoly-866f8a* pending review.\n[Visit the deploys page to approve it](https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | e0661a4f3e062a9d35c66718ebbd5bd507626427 |",
          "Immaculate PR, thanks!"
        ]
      },
      {
        "pr_number": 1134,
        "title": "feat(doc): fix a wrong example at README",
        "body": "# Overview\r\nI found that the example code for `parseAsync` is wrong.\r\n`.refine` should be passed when the callback returns `true`. Thus, I would like to send a PR \ud83d\ude47\u200d\u2642\ufe0f",
        "html_url": "https://github.com/colinhacks/zod/pull/1134",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | f9fa3b3eedbfe92072d17d2d287c8849d168fc3d |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/627f5a338d9c53000882f3a1 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | https://deploy-preview-1134--guileless-rolypoly-866f8a.netlify.app |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTExMzQtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.sBSwzg50faelV2e-h9Wsjc3hWdbDXi-RBhn7jiCrcKc)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._",
          "Thanks!!"
        ]
      },
      {
        "pr_number": 1149,
        "title": "Added test for enums with defaults",
        "body": "I wasn't sure about how defaults worked with enums so I played around a bit. I thought they may be worth adding to the test suite :)",
        "html_url": "https://github.com/colinhacks/zod/pull/1149",
        "comments": [
          "### <span aria-hidden=\"true\">\ud83d\udc77</span> Deploy request for *guileless-rolypoly-866f8a* pending review.\n[Visit the deploys page to approve it](https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys)\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 8b428db602c9b75bcc9c484bad434c5efdbc3478 |",
          "Perfect thanks!"
        ]
      },
      {
        "pr_number": 1148,
        "title": "Add Test for Union Recursive Type",
        "body": "Recursive implementations frequently utilize union types to represent general and base cases. This PR adds a test case for this, by using a linked list as an illustrative example. ",
        "html_url": "https://github.com/colinhacks/zod/pull/1148",
        "comments": [
          "### <span aria-hidden=\"true\">\u2705</span> Deploy Preview for *guileless-rolypoly-866f8a* ready!\n\n\n|  Name | Link |\n|---------------------------------|------------------------|\n|<span aria-hidden=\"true\">\ud83d\udd28</span> Latest commit | 70e9adda86060ee35111dfba3e0a71d53b084698 |\n|<span aria-hidden=\"true\">\ud83d\udd0d</span> Latest deploy log | https://app.netlify.com/sites/guileless-rolypoly-866f8a/deploys/6284795b640f720008dac017 |\n|<span aria-hidden=\"true\">\ud83d\ude0e</span> Deploy Preview | https://deploy-preview-1148--guileless-rolypoly-866f8a.netlify.app |\n|<span aria-hidden=\"true\">\ud83d\udcf1</span> Preview on mobile | <details><summary> Toggle QR Code... </summary><br /><br />![QR Code](https://app.netlify.com/qr-code/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2RlcGxveS1wcmV2aWV3LTExNDgtLWd1aWxlbGVzcy1yb2x5cG9seS04NjZmOGEubmV0bGlmeS5hcHAifQ.Al9PUku74wnB5S8orOhDNSpPwDghzp-rxuWL6Jpn1Jk)<br /><br />_Use your smartphone camera to open QR code link._</details> |\n---\n\n_To edit notification comments on pull requests, go to your [Netlify site settings](https://app.netlify.com/sites/guileless-rolypoly-866f8a/settings/deploys#deploy-notifications)._"
        ]
      }
    ],
    "v3.16.0": [
      {
        "pr_number": 1125,
        "title": "Update README.md",
        "body": "Added to ecosystem list:\r\n\r\n- Prisma Zod Generator\r\n- Prisma tRPC Generator",
        "html_url": "https://github.com/colinhacks/zod/pull/1125",
        "comments": []
      },
      {
        "pr_number": 1126,
        "title": "Add `nestjs-graphql-zod` to ecosystem links",
        "body": "Added `nestjs-graphql-zod` library to the Ecosystem.",
        "html_url": "https://github.com/colinhacks/zod/pull/1126",
        "comments": []
      },
      {
        "pr_number": 1129,
        "title": "Fix ctx.addIssue in transform to work correctly with parseAsync",
        "body": "A recent PR added `ctx.addIssue` to `transform`: https://github.com/colinhacks/zod/pull/1056\r\n\r\nThis is fantastic! \r\n\r\nThere appears to be a small bug - calling `ctx.addIssue` in `transform` does not work correctly when using `parseAsync`. This results in a confusing behaviour where `parseAsync` and `parse` return different results.\r\n\r\n### Reproduction\r\n\r\n```TypeScript\r\nz\r\n  .string()\r\n  .transform((val, ctx) => {\r\n    const parsed = parseInt(val);\r\n    if (isNaN(parsed)) {\r\n      ctx.addIssue({\r\n        code: z.ZodIssueCode.custom,\r\n        message: \"Not a number\",\r\n      });\r\n    }\r\n    return parsed;\r\n  })\r\n  .parse(\"Not a number\");\r\n````\r\n\r\n__Expected__: Zod error\r\n__Actual__: Success\r\n\r\nI've added a test to confirm it is now working correctly. I also took the chance to update the README to reflect this new feature.",
        "html_url": "https://github.com/colinhacks/zod/pull/1129",
        "comments": ["Looks solid, and good catch!"]
      },
      {
        "pr_number": 1127,
        "title": "Use enum in ZodError.ts",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1127",
        "comments": ["Thanks :)"]
      },
      {
        "pr_number": 1122,
        "title": "Restore existing type inference behaviour of z.ZodObject",
        "body": "Fixes the issue documented here: https://github.com/colinhacks/zod/issues/1121\r\n\r\nI'm pretty sure my PR introduced this issue: https://github.com/colinhacks/zod/pull/1117\r\n\r\nIn almost all cases `z.flatten<{ property: (T | undefined) & T }>` flattens to `{ property: T }`. However, this does not appear to be the case for some very specific types like this one:\r\n\r\n```TypeScript\r\ntype Opaque<Type, Token = unknown> = Type & { tag: Token };\r\n\r\n  enum FACE {\r\n    QUEEN = \"QUEEN\",\r\n    KING = \"KING\",\r\n  }\r\n\r\n  enum SUIT {\r\n    HEARTS = \"HEARTS\",\r\n    DIAMONDS = \"DIAMONDS\",\r\n  }\r\n\r\n  type FaceCard<Face extends FACE> = Opaque<`${Face}_${SUIT}`, \"FaceCard\">;\r\n\r\n  type Hand = z.objectUtil.flatten<\r\n    z.ZodObject<{\r\n      card: z.ZodType<FaceCard<FACE.QUEEN>, z.ZodTypeDef, string>;\r\n    }>[\"_output\"]\r\n  >;\r\n  ```\r\n\r\nIn this case `Hand` is flattening to:\r\n```TypeScript\r\ntype Hand = {\r\n    card: (FaceCard<FACE.QUEEN> | undefined) & FaceCard<FACE.QUEEN>;\r\n}\r\n```\r\n\r\n\r\nFortunately, I now better understand the problem I was trying to fix in my PR, and it is actually possible to write `z.ZodObject` in a way that preserves both behaviours. \r\n\r\nIt also has the benefit of being easier to understand:\r\n\r\n```TypeScript\r\n  type optionalKeys<T extends object> = {\r\n    [k in keyof T]: undefined extends T[k] ? k : never;\r\n  }[keyof T];\r\n\r\n  type requiredKeys<T extends object> = {\r\n    [k in keyof T]: undefined extends T[k] ? never : k;\r\n  }[keyof T];\r\n\r\n  export type addQuestionMarks<T extends object> = Partial<\r\n    Pick<T, optionalKeys<T>>\r\n  > &\r\n    Pick<T, requiredKeys<T>>;\r\n```\r\n\r\nUnfortunately I couldn't see a way to write a test for this, as:\r\n\r\n```TypeScript\r\ntype Hand = {\r\n    card: (FaceCard<FACE.QUEEN> | undefined) & FaceCard<FACE.QUEEN>;\r\n}\r\n```\r\n\r\nand \r\n\r\n```TypeScript\r\ntype Hand = {\r\n    card: FaceCard<FACE.QUEEN>\r\n}\r\n```\r\n\r\nare equal as far as `util.AssertEqual` is concerned.",
        "html_url": "https://github.com/colinhacks/zod/pull/1122",
        "comments": [
          "Sounds good to me. That test may be possible if we switched to using something like https://github.com/dsherret/conditional-type-checks which is a little smarter than the current `util.AssertEqual` trick, but I've been procrastinating on that. Not vital at the moment."
        ]
      },
      {
        "pr_number": 1123,
        "title": "Added expected and received properties to enum and native enum",
        "body": "Fixes #1042\r\n\r\nSmall note, I typed the `received` property in `ZodInvalidEnumValueIssue` as `any` since we are returning what was inputed originally, instead of it's `ParsedType`. I think this is right but will wait for confirmation :)\r\n\r\nAlso added an small util to reduce the code duplication around quoting and joining arrays of strings.\r\n\r\nTL;DR;\r\n\r\nGiven\r\n```ts\r\nenum Fish {\r\n  Tuna = \"Tuna\",\r\n  Trout = \"Trout\"\r\n}\r\n\r\nz.nativeEnum(Fish).parse(\"Salmon\");\r\n```\r\n\r\n```diff\r\n- \"Invalid enum value. Expected 'Tuna' | 'Trout'\"\r\n+ \"Invalid enum value. Expected 'Tuna' | 'Trout' received 'Salmon'\"\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/1123",
        "comments": [
          "~What about deno? Should I run the `build.mjs` file?~\r\n\r\nNVM the changes were indeed commited. Ready for review then",
          "Thanks for this. It's a tricky problem. Zod has a policy against logging schema input to the console, but arguably the invalid enum value itself is a type in this situation. I decided the root of the problem is that `ZodInvalidEnumValueIssue` should be limited to the scenario where a string/number is provided as input. Everything else should be a `ZodInvalidTypeIssue`. \r\n\r\nI made this change directly to your PR. This is now the behavior:\r\n\r\n```ts\r\nz.enum([\"Tuna\", \"Trout\"]).parse(12);\r\n// ZodIssueCode.invalid_type\r\n// \"Expected 'Tuna' | 'Trout', received number\"\r\n\r\nz.enum([\"Tuna\", \"Trout\"]).parse(\"Salmon\");\r\n// ZodIssueCode.invalid_enum_value\r\n// \"Invalid enum value. Expected 'Tuna' | 'Trout', received 'Salmon'\"\r\n```\r\n\r\nI also removed `expected` from ZodInvalidEnumIssue because it seemed redundant with `options` and wasn't used in the error map."
        ]
      }
    ],
    "v3.15.1": [],
    "v3.15.0": [
      {
        "pr_number": 1056,
        "title": "feat: allow ctx.addIssue from transform",
        "body": "Closes out part of #696 . Except only on transforms!\r\n\r\n```\r\nz\r\n    .string()\r\n    .transform((data, ctx) => {\r\n      const i = strs.indexOf(data)\r\n      if (i === -1) {\r\n        ctx.addIssue({\r\n          code: 'custom',\r\n          message: `${data} is not one of our allowed strings`,\r\n        })\r\n      }\r\n      return data.length\r\n    })\r\n    .parse(\"asdf\");\r\n```\r\nWill throw. `ctx` works just like in superRefine()",
        "html_url": "https://github.com/colinhacks/zod/pull/1056",
        "comments": [
          "@FlorianWendelborn whaddya think? This a break from anyone's philosophy on zod? I'd love to wax zod philosophy",
          "Well, I'm in favor of this. I don't have the power to merge anything here though, just a `zod` user who likes to contribute a bit with suggestions",
          "![insertgif.com](https://media1.giphy.com/media/39u4cdrGn47m4hbmhZ/200.gif)",
          "Sorry for the delay on this. Fantastic PR. Landed in 3.15.0."
        ]
      }
    ],
    "v3.14.5": [
      {
        "pr_number": 1054,
        "title": "fix(readme): Use Correct Test Link",
        "body": "Also added a filter for the master branch, so only relevant tests are shown",
        "html_url": "https://github.com/colinhacks/zod/pull/1054",
        "comments": ["whoops, copy/paste fail.."]
      },
      {
        "pr_number": 1054,
        "title": "fix(readme): Use Correct Test Link",
        "body": "Also added a filter for the master branch, so only relevant tests are shown",
        "html_url": "https://github.com/colinhacks/zod/pull/1054",
        "comments": ["whoops, copy/paste fail.."]
      },
      {
        "pr_number": 1073,
        "title": "Remove hanging string expressions",
        "body": "Apologies for not opening an issue first but this felt like low hanging fruit :)\r\n\r\nIt seems like there was some testing done on the repo's husky hooks (https://github.com/colinhacks/zod/commit/0dbd4ec8154d3390e23bdd2b1238fd20276893bf) and these no-op string expressions were accidentally pushed.",
        "html_url": "https://github.com/colinhacks/zod/pull/1073",
        "comments": []
      },
      {
        "pr_number": 1067,
        "title": "Add UMD build",
        "body": "Add UMD build to zod.\r\n\r\n## Example\r\n\r\nwith UMD build, you can use zod on web browser without bundler/ESM support, like this:\r\n\r\n```html\r\n<script src=\"https://some.cdn.example/npm/zod/lib/index.umd.js\"></script>\r\n<script>\r\n// @ts-check\r\nconst { z } = Zod\r\n\r\nz.object({hello: z.literal(\"world\")})\r\n</script>\r\n```\r\n\r\n## Background\r\n\r\nI want to use zod in UserScript, but I have some issues:\r\n\r\n- Zod is pretty big to bundle it to UserScript (>2000 lines if you wont minify it)\r\n  - some hosting sites are restricting file size, like [Greasy Fork](https://greasyfork.org/en/help/code-rules)\r\n- If bundle libraries to UserScript, makes hard to:\r\n  - read/audit source codes (because lines of source code will increase)\r\n  - determine this source code comes from which version of libraries\r\n\r\nso I added a UMD build to Zod, which allows UserScript to use `@require` to load zod, like `// @require  https://some.cdn.like.jsdelivr.example/npm/zod@x.x.x/lib/index.umd.js`.",
        "html_url": "https://github.com/colinhacks/zod/pull/1067",
        "comments": [
          "@rinsuki I'd rather the name of the global namespace be `z` as this is the recommended way to consume Zod's API. Is there a reason this wouldn't work?",
          "1. `z` are too short and might be overwritten by other scripts (some dumbs script writes temporary variables to global)\n2. if we uses `z` for UMD name, and if users `.ts` file doesn't using import, `z` will be automatically available on global. then users may forget to import, and causes runtime error. it would be good to force user to write `const { z } = Zod`, i think."
        ]
      },
      {
        "pr_number": 1076,
        "title": "Add Astro",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1076",
        "comments": []
      },
      {
        "pr_number": 1081,
        "title": "Update sponsors",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1081",
        "comments": []
      },
      {
        "pr_number": 1083,
        "title": "docs: infer `Literal` from the schema in JSON type example",
        "body": "I was using this great recommendation for JSON type and saw this small improvement to reduce duplication.",
        "html_url": "https://github.com/colinhacks/zod/pull/1083",
        "comments": []
      },
      {
        "pr_number": 1096,
        "title": "Small typo in readme (contraining => constraining)",
        "body": "While reading the docs I noticed a small typo. \r\n\r\nMicro pull request to correct! \ud83d\udc4d",
        "html_url": "https://github.com/colinhacks/zod/pull/1096",
        "comments": []
      },
      {
        "pr_number": 1109,
        "title": "Add zod-to-openapi to Ecosystem in the Readme",
        "body": "Adding the [zod-to-openapi](https://github.com/asteasolutions/zod-to-openapi) library to the ecosystem links.\r\n\r\nRelevant dicsussion: https://github.com/colinhacks/zod/discussions/1107 ",
        "html_url": "https://github.com/colinhacks/zod/pull/1109",
        "comments": []
      },
      {
        "pr_number": 1111,
        "title": "docs: fix typo on the error handling guide",
        "body": "Noticed a typo while reading the error handling guide.",
        "html_url": "https://github.com/colinhacks/zod/pull/1111",
        "comments": []
      },
      {
        "pr_number": 1117,
        "title": "Improve IDE integration for inferred object properties to support Go To Definition, Rename Symbol, etc.",
        "body": "This PR fixes the issue I raised here: https://github.com/colinhacks/zod/issues/1115\r\n\r\nTo summarise, the properties of types declared using `z.infer` on `z.object({ ... })` do not support IDE language server features such as Find All References, Rename Symbol or Go To Definition.\r\n\r\nTo take a concrete example using the latest version of Zod in VS Code, the language server features `Find All References`, `Rename Symbol` and `Go To Definition` do not work when you select the property `prop` in the code below:\r\n\r\n```TypeScript\r\nconst Example = z.object({ prop: z.string() });\r\n\r\ntype Example = z.infer<typeof Example>;\r\n\r\nconst instance: Example = { prop: \"value\" };\r\n```\r\n\r\nAs you no doubt know, these features are incredibly useful for working on TypeScript projects, particularly as they grow in size.\r\n\r\nThese features are broken because `z.object({ ... })` uses a mapped type, `addQuestionMarks`, that transforms its keys using `requiredKeys` and `optionalKeys`. Unfortunately, due to a limitation in the TypeScript compiler (https://github.com/microsoft/TypeScript/issues/47813), transforming keys in a mapped type prevents the compiler from linking the mapped type properties to their definition.\r\n\r\nFortunately, it is possible to preserve the behaviour of `addQuestionMarks` without mapping the keys on one side of the intersection (by taking advantage of the fact that `(T | undefined) & T` equals `T`):\r\n\r\n```TypeScript\r\nexport type addQuestionMarks<T extends object> = {\r\n    [k in keyof T]?: T[k];\r\n  } & { [k in requiredKeys<T>]: T[k] };\r\n```\r\nIt appears that the built-in type helpers `Omit` and `Pick` are also special cased to preserve the linkage between mapped keys, so I was able to use those for `object({}).extend()`, `object({}).pick()` and `object({}).omit()`:\r\n\r\n```TypeScript\r\nexport type extendShape<A, B> = Omit<A, keyof B> & B;\r\n```\r\n\r\nThese changes preserve the existing behaviour while enabling the IDE features for `z.object({ ... })` as well as when using `z.object({ ... }).merge(z.object({ ... }))`, `z.object({ ... }).partial()`, `z.union()`, `z.object().pick` and `z.object().omit`.\r\n\r\nI have added a number of tests that use the TypeScript language server (via the library `ts-morph`) to verify that Go To Definition (and by extension the other features) work correctly. I have also added additional tests around the types inferred from `z.object` to ensure I have not broken existing behaviour.\r\n\r\nWhat do you think? Happy to make any changes. Thanks!",
        "html_url": "https://github.com/colinhacks/zod/pull/1117",
        "comments": []
      }
    ],
    "v3.14.4": [
      {
        "pr_number": 1052,
        "title": "Add invalid_literal",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1052",
        "comments": []
      },
      {
        "pr_number": 1052,
        "title": "Add invalid_literal",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1052",
        "comments": []
      },
      {
        "pr_number": 1058,
        "title": "Fully remove typecache",
        "body": "The typecache was no longer used as of #1023 but we never fully removed it. So, an unnecessary `Map` was still being created per call to `parse` or `safeParse`. This removes that call.\r\n\r\nBenchmarks: https://observablehq.com/d/b4b367792308cedb \r\n\r\nSince this is a performance bump that just affects the top-level method, the impact on microtests is dramatic - like 20%+. For example, this code benefits dramatically:\r\n\r\n```js\r\nconst str = z.string();\r\nstr.parse('foo');\r\n```\r\n\r\nThere probably aren't that many people who have such small zod schemas in prod, but nevertheless\u2026\u00a0it was wasted memory and time and now it isn't.\r\n\r\nThere's still a very large gap between zod & myzod for primitives which I've having a tough time bridging, still working on that.",
        "html_url": "https://github.com/colinhacks/zod/pull/1058",
        "comments": []
      },
      {
        "pr_number": 1058,
        "title": "Fully remove typecache",
        "body": "The typecache was no longer used as of #1023 but we never fully removed it. So, an unnecessary `Map` was still being created per call to `parse` or `safeParse`. This removes that call.\r\n\r\nBenchmarks: https://observablehq.com/d/b4b367792308cedb \r\n\r\nSince this is a performance bump that just affects the top-level method, the impact on microtests is dramatic - like 20%+. For example, this code benefits dramatically:\r\n\r\n```js\r\nconst str = z.string();\r\nstr.parse('foo');\r\n```\r\n\r\nThere probably aren't that many people who have such small zod schemas in prod, but nevertheless\u2026\u00a0it was wasted memory and time and now it isn't.\r\n\r\nThere's still a very large gap between zod & myzod for primitives which I've having a tough time bridging, still working on that.",
        "html_url": "https://github.com/colinhacks/zod/pull/1058",
        "comments": []
      },
      {
        "pr_number": 1058,
        "title": "Fully remove typecache",
        "body": "The typecache was no longer used as of #1023 but we never fully removed it. So, an unnecessary `Map` was still being created per call to `parse` or `safeParse`. This removes that call.\r\n\r\nBenchmarks: https://observablehq.com/d/b4b367792308cedb \r\n\r\nSince this is a performance bump that just affects the top-level method, the impact on microtests is dramatic - like 20%+. For example, this code benefits dramatically:\r\n\r\n```js\r\nconst str = z.string();\r\nstr.parse('foo');\r\n```\r\n\r\nThere probably aren't that many people who have such small zod schemas in prod, but nevertheless\u2026\u00a0it was wasted memory and time and now it isn't.\r\n\r\nThere's still a very large gap between zod & myzod for primitives which I've having a tough time bridging, still working on that.",
        "html_url": "https://github.com/colinhacks/zod/pull/1058",
        "comments": []
      },
      {
        "pr_number": 1057,
        "title": "Faster extra keys detection",
        "body": "This increases object parsing performance by about 8-10% by skipping a call to Object.keys and instead using `in`. I know it's odd, but this seemingly insignificant few lines of code really seems to be a hotspot.\r\n\r\nBenchmark results: https://observablehq.com/d/8978a77c49a9c6ef - there's a lot of test jitter in mainly unrelated benchmarks - no reason to think this'll change string parsing performance.",
        "html_url": "https://github.com/colinhacks/zod/pull/1057",
        "comments": []
      },
      {
        "pr_number": 1057,
        "title": "Faster extra keys detection",
        "body": "This increases object parsing performance by about 8-10% by skipping a call to Object.keys and instead using `in`. I know it's odd, but this seemingly insignificant few lines of code really seems to be a hotspot.\r\n\r\nBenchmark results: https://observablehq.com/d/8978a77c49a9c6ef - there's a lot of test jitter in mainly unrelated benchmarks - no reason to think this'll change string parsing performance.",
        "html_url": "https://github.com/colinhacks/zod/pull/1057",
        "comments": []
      }
    ],
    "v3.14.3": [
      {
        "pr_number": 1034,
        "title": "Improve precommit and prepush hooks",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1034",
        "comments": []
      },
      {
        "pr_number": 1034,
        "title": "Improve precommit and prepush hooks",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1034",
        "comments": []
      },
      {
        "pr_number": 1034,
        "title": "Improve precommit and prepush hooks",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1034",
        "comments": []
      },
      {
        "pr_number": 1034,
        "title": "Improve precommit and prepush hooks",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1034",
        "comments": []
      },
      {
        "pr_number": 1034,
        "title": "Improve precommit and prepush hooks",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1034",
        "comments": []
      },
      {
        "pr_number": 1034,
        "title": "Improve precommit and prepush hooks",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1034",
        "comments": []
      },
      {
        "pr_number": 1034,
        "title": "Improve precommit and prepush hooks",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1034",
        "comments": []
      },
      {
        "pr_number": 1034,
        "title": "Improve precommit and prepush hooks",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1034",
        "comments": []
      },
      {
        "pr_number": 1035,
        "title": "Code coverage",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1035",
        "comments": [
          "# [Codecov](https://codecov.io/gh/colinhacks/zod/pull/1035?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Colin+McDonnell) Report\n> :exclamation: No coverage uploaded for pull request base (`master@b6006f3`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Colin+McDonnell#section-missing-base-commit).\n> The diff coverage is `n/a`.\n\n```diff\n@@            Coverage Diff            @@\n##             master    #1035   +/-   ##\n=========================================\n  Coverage          ?   92.75%           \n=========================================\n  Files             ?        9           \n  Lines             ?     1298           \n  Branches          ?      234           \n=========================================\n  Hits              ?     1204           \n  Misses            ?       68           \n  Partials          ?       26           \n```\n\n\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/colinhacks/zod/pull/1035?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Colin+McDonnell).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Colin+McDonnell)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/colinhacks/zod/pull/1035?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Colin+McDonnell). Last update [b6006f3...1974cfb](https://codecov.io/gh/colinhacks/zod/pull/1035?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Colin+McDonnell). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Colin+McDonnell).\n"
        ]
      },
      {
        "pr_number": 1035,
        "title": "Code coverage",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1035",
        "comments": [
          "# [Codecov](https://codecov.io/gh/colinhacks/zod/pull/1035?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Colin+McDonnell) Report\n> :exclamation: No coverage uploaded for pull request base (`master@b6006f3`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Colin+McDonnell#section-missing-base-commit).\n> The diff coverage is `n/a`.\n\n```diff\n@@            Coverage Diff            @@\n##             master    #1035   +/-   ##\n=========================================\n  Coverage          ?   92.75%           \n=========================================\n  Files             ?        9           \n  Lines             ?     1298           \n  Branches          ?      234           \n=========================================\n  Hits              ?     1204           \n  Misses            ?       68           \n  Partials          ?       26           \n```\n\n\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/colinhacks/zod/pull/1035?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Colin+McDonnell).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Colin+McDonnell)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/colinhacks/zod/pull/1035?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Colin+McDonnell). Last update [b6006f3...1974cfb](https://codecov.io/gh/colinhacks/zod/pull/1035?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Colin+McDonnell). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Colin+McDonnell).\n"
        ]
      },
      {
        "pr_number": 1035,
        "title": "Code coverage",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1035",
        "comments": [
          "# [Codecov](https://codecov.io/gh/colinhacks/zod/pull/1035?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Colin+McDonnell) Report\n> :exclamation: No coverage uploaded for pull request base (`master@b6006f3`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Colin+McDonnell#section-missing-base-commit).\n> The diff coverage is `n/a`.\n\n```diff\n@@            Coverage Diff            @@\n##             master    #1035   +/-   ##\n=========================================\n  Coverage          ?   92.75%           \n=========================================\n  Files             ?        9           \n  Lines             ?     1298           \n  Branches          ?      234           \n=========================================\n  Hits              ?     1204           \n  Misses            ?       68           \n  Partials          ?       26           \n```\n\n\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/colinhacks/zod/pull/1035?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Colin+McDonnell).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Colin+McDonnell)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/colinhacks/zod/pull/1035?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Colin+McDonnell). Last update [b6006f3...1974cfb](https://codecov.io/gh/colinhacks/zod/pull/1035?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Colin+McDonnell). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Colin+McDonnell).\n"
        ]
      },
      {
        "pr_number": 1035,
        "title": "Code coverage",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1035",
        "comments": [
          "# [Codecov](https://codecov.io/gh/colinhacks/zod/pull/1035?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Colin+McDonnell) Report\n> :exclamation: No coverage uploaded for pull request base (`master@b6006f3`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Colin+McDonnell#section-missing-base-commit).\n> The diff coverage is `n/a`.\n\n```diff\n@@            Coverage Diff            @@\n##             master    #1035   +/-   ##\n=========================================\n  Coverage          ?   92.75%           \n=========================================\n  Files             ?        9           \n  Lines             ?     1298           \n  Branches          ?      234           \n=========================================\n  Hits              ?     1204           \n  Misses            ?       68           \n  Partials          ?       26           \n```\n\n\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/colinhacks/zod/pull/1035?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Colin+McDonnell).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Colin+McDonnell)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/colinhacks/zod/pull/1035?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Colin+McDonnell). Last update [b6006f3...1974cfb](https://codecov.io/gh/colinhacks/zod/pull/1035?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Colin+McDonnell). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Colin+McDonnell).\n"
        ]
      },
      {
        "pr_number": 1036,
        "title": "Faster paths for nested parsers",
        "body": "Okay! Got another. Paths, specifically the pattern `[...ctx.path, key]` is a performance hotspot. This PR replaces that pattern with an object, `ParseInputLazyPath`, which is `ParseInput`, but instead of concatenating the path immediately, only creates the new array if it's needed (if there is an error). This yields a 20-30% performance boost on inputs like the realworld benchmark and the object benchmarks, and I can't easily profile it, but should reduce memory overhead a bit too.\r\n\r\n- Refs #205\r\n\r\n---\r\n\r\nBefore\r\n\r\n```\r\n% y benchmark\r\nyarn run v1.22.4\r\n$ ts-node src/benchmarks/index.ts\r\nrealworld: valid x 3,819 ops/sec \u00b10.97% (92 runs sampled)\r\nz.enum: valid x 12,049,817 ops/sec \u00b10.72% (87 runs sampled)\r\nz.enum: invalid x 65,717 ops/sec \u00b14.31% (88 runs sampled)\r\nz.undefined: valid x 10,393,122 ops/sec \u00b10.98% (88 runs sampled)\r\nz.undefined: invalid x 65,767 ops/sec \u00b13.98% (89 runs sampled)\r\nz.literal: valid x 22,997,780 ops/sec \u00b10.59% (93 runs sampled)\r\nz.literal: invalid x 69,284 ops/sec \u00b10.93% (89 runs sampled)\r\nz.number: valid x 9,296,436 ops/sec \u00b11.02% (89 runs sampled)\r\nz.number: invalid type x 66,951 ops/sec \u00b14.44% (88 runs sampled)\r\nz.number: invalid number x 69,723 ops/sec \u00b11.09% (89 runs sampled)\r\nz.string: empty string x 9,793,495 ops/sec \u00b10.82% (89 runs sampled)\r\nz.string: short string x 9,464,260 ops/sec \u00b10.98% (88 runs sampled)\r\nz.string: long string x 9,578,131 ops/sec \u00b10.99% (86 runs sampled)\r\nz.string: optional string x 7,780,586 ops/sec \u00b11.08% (83 runs sampled)\r\nz.string: nullable string x 6,718,051 ops/sec \u00b10.83% (88 runs sampled)\r\nz.string: nullable (null) string x 9,268,075 ops/sec \u00b10.71% (88 runs sampled)\r\nz.string: invalid: null x 65,552 ops/sec \u00b14.41% (88 runs sampled)\r\nz.string: manual parser: long x 917,656,518 ops/sec \u00b11.39% (90 runs sampled)\r\nz.object: empty: valid x 4,709,549 ops/sec \u00b11.17% (83 runs sampled)\r\nz.object: empty: valid: extra keys x 4,065,901 ops/sec \u00b10.76% (90 runs sampled)\r\nz.object: empty: invalid: null x 67,518 ops/sec \u00b10.84% (91 runs sampled)\r\nz.object: short: valid x 2,259,276 ops/sec \u00b10.87% (88 runs sampled)\r\nz.object: short: valid: extra keys x 2,019,209 ops/sec \u00b11.03% (86 runs sampled)\r\nz.object: short: invalid: null x 62,770 ops/sec \u00b14.48% (86 runs sampled)\r\nz.object: long: valid x 1,185,061 ops/sec \u00b11.02% (89 runs sampled)\r\nz.object: long: valid: extra keys x 1,149,035 ops/sec \u00b11.12% (90 runs sampled)\r\nz.object: long: invalid: null x 66,780 ops/sec \u00b10.78% (91 runs sampled)\r\nz.union: double: valid: a x 1,765,709 ops/sec \u00b10.95% (88 runs sampled)\r\nz.union: double: valid: b x 216,561 ops/sec \u00b17.73% (88 runs sampled)\r\nz.union: double: invalid: null x 24,409 ops/sec \u00b11.17% (91 runs sampled)\r\nz.union: double: invalid: wrong shape x 22,772 ops/sec \u00b14.70% (87 runs sampled)\r\nz.union: many: valid: a x 1,792,144 ops/sec \u00b11.06% (86 runs sampled)\r\nz.union: many: valid: c x 123,370 ops/sec \u00b16.10% (84 runs sampled)\r\nz.union: many: invalid: null x 14,940 ops/sec \u00b14.33% (87 runs sampled)\r\nz.union: many: invalid: wrong shape x 14,601 ops/sec \u00b11.10% (90 runs sampled)\r\nz.discriminatedUnion: double: valid: a x 1,794,083 ops/sec \u00b10.97% (88 runs sampled)\r\nz.discriminatedUnion: double: valid: b x 1,901,624 ops/sec \u00b10.94% (85 runs sampled)\r\nz.discriminatedUnion: double: invalid: null x 62,635 ops/sec \u00b14.22% (83 runs sampled)\r\nz.discriminatedUnion: double: invalid: wrong shape x 79,999 ops/sec \u00b10.99% (95 runs sampled)\r\nz.discriminatedUnion: many: valid: a x 1,942,452 ops/sec \u00b11.02% (88 runs sampled)\r\nz.discriminatedUnion: many: valid: c x 1,962,238 ops/sec \u00b10.96% (92 runs sampled)\r\nz.discriminatedUnion: many: invalid: null x 84,518 ops/sec \u00b10.56% (92 runs sampled)\r\nz.discriminatedUnion: many: invalid: wrong shape x 77,013 ops/sec \u00b10.82% (93 runs sampled)\r\n\u2728  Done in 237.98s.\r\n```\r\n\r\n\r\nAfter\r\n\r\n```\r\n% y benchmark\r\nyarn run v1.22.4\r\n$ ts-node src/benchmarks/index.ts\r\nrealworld: valid x 4,934 ops/sec \u00b11.18% (88 runs sampled)\r\nz.enum: valid x 12,020,432 ops/sec \u00b10.97% (89 runs sampled)\r\nz.enum: invalid x 66,359 ops/sec \u00b14.15% (89 runs sampled)\r\nz.undefined: valid x 10,118,294 ops/sec \u00b11.00% (88 runs sampled)\r\nz.undefined: invalid x 64,990 ops/sec \u00b14.09% (88 runs sampled)\r\nz.literal: valid x 22,881,671 ops/sec \u00b10.71% (95 runs sampled)\r\nz.literal: invalid x 64,326 ops/sec \u00b11.02% (89 runs sampled)\r\nz.number: valid x 7,213,872 ops/sec \u00b11.12% (87 runs sampled)\r\nz.number: invalid type x 62,500 ops/sec \u00b14.11% (81 runs sampled)\r\nz.number: invalid number x 66,110 ops/sec \u00b10.97% (91 runs sampled)\r\nz.string: empty string x 7,727,690 ops/sec \u00b10.98% (89 runs sampled)\r\nz.string: short string x 7,533,898 ops/sec \u00b11.01% (87 runs sampled)\r\nz.string: long string x 7,424,665 ops/sec \u00b11.11% (90 runs sampled)\r\nz.string: optional string x 6,298,061 ops/sec \u00b11.06% (88 runs sampled)\r\nz.string: nullable string x 5,351,823 ops/sec \u00b11.27% (86 runs sampled)\r\nz.string: nullable (null) string x 9,295,395 ops/sec \u00b11.00% (90 runs sampled)\r\nz.string: invalid: null x 64,821 ops/sec \u00b14.40% (87 runs sampled)\r\nz.string: manual parser: long x 898,213,431 ops/sec \u00b11.36% (87 runs sampled)\r\nz.object: empty: valid x 4,163,427 ops/sec \u00b12.03% (89 runs sampled)\r\nz.object: empty: valid: extra keys x 3,750,210 ops/sec \u00b11.11% (89 runs sampled)\r\nz.object: empty: invalid: null x 67,258 ops/sec \u00b10.92% (91 runs sampled)\r\nz.object: short: valid x 2,395,853 ops/sec \u00b11.11% (88 runs sampled)\r\nz.object: short: valid: extra keys x 2,118,128 ops/sec \u00b10.99% (87 runs sampled)\r\nz.object: short: invalid: null x 63,278 ops/sec \u00b14.17% (86 runs sampled)\r\nz.object: long: valid x 1,436,958 ops/sec \u00b11.09% (89 runs sampled)\r\nz.object: long: valid: extra keys x 1,330,563 ops/sec \u00b11.34% (90 runs sampled)\r\nz.object: long: invalid: null x 65,808 ops/sec \u00b11.07% (89 runs sampled)\r\nz.union: double: valid: a x 1,858,340 ops/sec \u00b10.98% (87 runs sampled)\r\nz.union: double: valid: b x 214,908 ops/sec \u00b16.27% (91 runs sampled)\r\nz.union: double: invalid: null x 23,372 ops/sec \u00b14.25% (87 runs sampled)\r\nz.union: double: invalid: wrong shape x 23,212 ops/sec \u00b11.26% (90 runs sampled)\r\nz.union: many: valid: a x 1,755,110 ops/sec \u00b11.17% (87 runs sampled)\r\nz.union: many: valid: c x 117,378 ops/sec \u00b18.97% (86 runs sampled)\r\nz.union: many: invalid: null x 15,048 ops/sec \u00b10.91% (91 runs sampled)\r\nz.union: many: invalid: wrong shape x 14,277 ops/sec \u00b14.43% (88 runs sampled)\r\nz.discriminatedUnion: double: valid: a x 1,952,220 ops/sec \u00b11.06% (88 runs sampled)\r\nz.discriminatedUnion: double: valid: b x 1,975,703 ops/sec \u00b11.10% (89 runs sampled)\r\nz.discriminatedUnion: double: invalid: null x 65,141 ops/sec \u00b10.94% (94 runs sampled)\r\nz.discriminatedUnion: double: invalid: wrong shape x 78,921 ops/sec \u00b11.12% (90 runs sampled)\r\nz.discriminatedUnion: many: valid: a x 1,931,200 ops/sec \u00b10.99% (86 runs sampled)\r\nz.discriminatedUnion: many: valid: c x 1,922,676 ops/sec \u00b10.89% (86 runs sampled)\r\nz.discriminatedUnion: many: invalid: null x 82,803 ops/sec \u00b11.04% (92 runs sampled)\r\nz.discriminatedUnion: many: invalid: wrong shape x 76,801 ops/sec \u00b10.71% (90 runs sampled)\r\n\u2728  Done in 238.26s.\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/1036",
        "comments": [
          "I wonder why `number` and `string` got slower in the benchmarks? Maybe the overhead of instantiating the `ParseInputLazyPath` class?",
          "Jitter :/. Running the benchmarks again yields this:\r\n\r\n```\r\n% y benchmark\r\nyarn run v1.22.4\r\n$ ts-node src/benchmarks/index.ts\r\nrealworld: valid x 5,450 ops/sec \u00b10.64% (95 runs sampled)\r\nz.enum: valid x 14,557,054 ops/sec \u00b11.11% (90 runs sampled)\r\nz.enum: invalid x 73,955 ops/sec \u00b13.90% (90 runs sampled)\r\nz.undefined: valid x 11,573,460 ops/sec \u00b10.60% (96 runs sampled)\r\nz.undefined: invalid x 71,706 ops/sec \u00b13.31% (93 runs sampled)\r\nz.literal: valid x 27,433,991 ops/sec \u00b11.05% (94 runs sampled)\r\nz.literal: invalid x 75,724 ops/sec \u00b10.62% (94 runs sampled)\r\nz.number: valid x 11,273,030 ops/sec \u00b11.24% (90 runs sampled)\r\nz.number: invalid type x 74,871 ops/sec \u00b14.17% (89 runs sampled)\r\nz.number: invalid number x 75,297 ops/sec \u00b10.93% (94 runs sampled)\r\nz.string: empty string x 11,148,330 ops/sec \u00b11.26% (90 runs sampled)\r\nz.string: short string x 10,670,739 ops/sec \u00b11.80% (90 runs sampled)\r\nz.string: long string x 11,017,787 ops/sec \u00b11.30% (88 runs sampled)\r\nz.string: optional string x 9,269,393 ops/sec \u00b11.36% (91 runs sampled)\r\nz.string: nullable string x 7,795,757 ops/sec \u00b10.74% (93 runs sampled)\r\nz.string: nullable (null) string x 11,455,814 ops/sec \u00b10.96% (91 runs sampled)\r\nz.string: invalid: null x 73,813 ops/sec \u00b14.15% (91 runs sampled)\r\nz.string: manual parser: long x 872,885,496 ops/sec \u00b10.87% (87 runs sampled)\r\nz.object: empty: valid x 4,643,618 ops/sec \u00b10.99% (94 runs sampled)\r\nz.object: empty: valid: extra keys x 4,892,417 ops/sec \u00b10.58% (95 runs sampled)\r\nz.object: empty: invalid: null x 72,944 ops/sec \u00b14.08% (91 runs sampled)\r\nz.object: short: valid x 2,941,298 ops/sec \u00b10.56% (96 runs sampled)\r\nz.object: short: valid: extra keys x 2,606,273 ops/sec \u00b10.92% (90 runs sampled)\r\nz.object: short: invalid: null x 73,221 ops/sec \u00b11.08% (91 runs sampled)\r\nz.object: long: valid x 1,643,766 ops/sec \u00b10.73% (91 runs sampled)\r\nz.object: long: valid: extra keys x 1,589,414 ops/sec \u00b10.41% (95 runs sampled)\r\nz.object: long: invalid: null x 71,422 ops/sec \u00b13.90% (92 runs sampled)\r\nz.union: double: valid: a x 2,372,352 ops/sec \u00b10.91% (94 runs sampled)\r\nz.union: double: valid: b x 268,907 ops/sec \u00b16.43% (86 runs sampled)\r\nz.union: double: invalid: null x 26,471 ops/sec \u00b13.61% (91 runs sampled)\r\nz.union: double: invalid: wrong shape x 26,852 ops/sec \u00b10.38% (92 runs sampled)\r\nz.union: many: valid: a x 2,292,813 ops/sec \u00b10.54% (94 runs sampled)\r\nz.union: many: valid: c x 144,190 ops/sec \u00b17.37% (88 runs sampled)\r\nz.union: many: invalid: null x 16,547 ops/sec \u00b14.01% (91 runs sampled)\r\nz.union: many: invalid: wrong shape x 16,374 ops/sec \u00b10.89% (94 runs sampled)\r\nz.discriminatedUnion: double: valid: a x 2,482,874 ops/sec \u00b10.54% (95 runs sampled)\r\nz.discriminatedUnion: double: valid: b x 2,418,194 ops/sec \u00b16.35% (86 runs sampled)\r\nz.discriminatedUnion: double: invalid: null x 71,396 ops/sec \u00b13.65% (93 runs sampled)\r\nz.discriminatedUnion: double: invalid: wrong shape x 83,699 ops/sec \u00b11.25% (96 runs sampled)\r\nz.discriminatedUnion: many: valid: a x 2,448,872 ops/sec \u00b10.63% (91 runs sampled)\r\nz.discriminatedUnion: many: valid: c x 2,464,820 ops/sec \u00b10.99% (93 runs sampled)\r\nz.discriminatedUnion: many: invalid: null x 91,411 ops/sec \u00b10.52% (96 runs sampled)\r\nz.discriminatedUnion: many: invalid: wrong shape x 82,014 ops/sec \u00b10.58% (90 runs sampled)\r\n\u2728  Done in 236.96s.\r\n```\r\n\r\nWhich has numbers a little faster than before. I suspect that these micro-benchmarks have more jitter than the others, but none of this compensates for variations in whatever else my macOS is doing a the same time as the bench.",
          "Yeah, I came away with similar results. I was hoping the benchmarking library itself doing a bunch of sampling runs would help alleviate this somewhat, but \ud83e\udd37 I know it's common to disregard \"microbenchmarks\", but I have a lot of use cases that use single primitive Zod schemas, so I still personally care about the primitive performance apart from how they are composed into something like `realworld`.\r\n\r\nAs an aside: my dream here is to run benchmarks in CI and show diffs rather than the raw data. That would at least alleviate some of the issues with having other processes interfering with results.\r\n\r\nThanks for all of your great performance work @tmcw!"
        ]
      },
      {
        "pr_number": 1036,
        "title": "Faster paths for nested parsers",
        "body": "Okay! Got another. Paths, specifically the pattern `[...ctx.path, key]` is a performance hotspot. This PR replaces that pattern with an object, `ParseInputLazyPath`, which is `ParseInput`, but instead of concatenating the path immediately, only creates the new array if it's needed (if there is an error). This yields a 20-30% performance boost on inputs like the realworld benchmark and the object benchmarks, and I can't easily profile it, but should reduce memory overhead a bit too.\r\n\r\n- Refs #205\r\n\r\n---\r\n\r\nBefore\r\n\r\n```\r\n% y benchmark\r\nyarn run v1.22.4\r\n$ ts-node src/benchmarks/index.ts\r\nrealworld: valid x 3,819 ops/sec \u00b10.97% (92 runs sampled)\r\nz.enum: valid x 12,049,817 ops/sec \u00b10.72% (87 runs sampled)\r\nz.enum: invalid x 65,717 ops/sec \u00b14.31% (88 runs sampled)\r\nz.undefined: valid x 10,393,122 ops/sec \u00b10.98% (88 runs sampled)\r\nz.undefined: invalid x 65,767 ops/sec \u00b13.98% (89 runs sampled)\r\nz.literal: valid x 22,997,780 ops/sec \u00b10.59% (93 runs sampled)\r\nz.literal: invalid x 69,284 ops/sec \u00b10.93% (89 runs sampled)\r\nz.number: valid x 9,296,436 ops/sec \u00b11.02% (89 runs sampled)\r\nz.number: invalid type x 66,951 ops/sec \u00b14.44% (88 runs sampled)\r\nz.number: invalid number x 69,723 ops/sec \u00b11.09% (89 runs sampled)\r\nz.string: empty string x 9,793,495 ops/sec \u00b10.82% (89 runs sampled)\r\nz.string: short string x 9,464,260 ops/sec \u00b10.98% (88 runs sampled)\r\nz.string: long string x 9,578,131 ops/sec \u00b10.99% (86 runs sampled)\r\nz.string: optional string x 7,780,586 ops/sec \u00b11.08% (83 runs sampled)\r\nz.string: nullable string x 6,718,051 ops/sec \u00b10.83% (88 runs sampled)\r\nz.string: nullable (null) string x 9,268,075 ops/sec \u00b10.71% (88 runs sampled)\r\nz.string: invalid: null x 65,552 ops/sec \u00b14.41% (88 runs sampled)\r\nz.string: manual parser: long x 917,656,518 ops/sec \u00b11.39% (90 runs sampled)\r\nz.object: empty: valid x 4,709,549 ops/sec \u00b11.17% (83 runs sampled)\r\nz.object: empty: valid: extra keys x 4,065,901 ops/sec \u00b10.76% (90 runs sampled)\r\nz.object: empty: invalid: null x 67,518 ops/sec \u00b10.84% (91 runs sampled)\r\nz.object: short: valid x 2,259,276 ops/sec \u00b10.87% (88 runs sampled)\r\nz.object: short: valid: extra keys x 2,019,209 ops/sec \u00b11.03% (86 runs sampled)\r\nz.object: short: invalid: null x 62,770 ops/sec \u00b14.48% (86 runs sampled)\r\nz.object: long: valid x 1,185,061 ops/sec \u00b11.02% (89 runs sampled)\r\nz.object: long: valid: extra keys x 1,149,035 ops/sec \u00b11.12% (90 runs sampled)\r\nz.object: long: invalid: null x 66,780 ops/sec \u00b10.78% (91 runs sampled)\r\nz.union: double: valid: a x 1,765,709 ops/sec \u00b10.95% (88 runs sampled)\r\nz.union: double: valid: b x 216,561 ops/sec \u00b17.73% (88 runs sampled)\r\nz.union: double: invalid: null x 24,409 ops/sec \u00b11.17% (91 runs sampled)\r\nz.union: double: invalid: wrong shape x 22,772 ops/sec \u00b14.70% (87 runs sampled)\r\nz.union: many: valid: a x 1,792,144 ops/sec \u00b11.06% (86 runs sampled)\r\nz.union: many: valid: c x 123,370 ops/sec \u00b16.10% (84 runs sampled)\r\nz.union: many: invalid: null x 14,940 ops/sec \u00b14.33% (87 runs sampled)\r\nz.union: many: invalid: wrong shape x 14,601 ops/sec \u00b11.10% (90 runs sampled)\r\nz.discriminatedUnion: double: valid: a x 1,794,083 ops/sec \u00b10.97% (88 runs sampled)\r\nz.discriminatedUnion: double: valid: b x 1,901,624 ops/sec \u00b10.94% (85 runs sampled)\r\nz.discriminatedUnion: double: invalid: null x 62,635 ops/sec \u00b14.22% (83 runs sampled)\r\nz.discriminatedUnion: double: invalid: wrong shape x 79,999 ops/sec \u00b10.99% (95 runs sampled)\r\nz.discriminatedUnion: many: valid: a x 1,942,452 ops/sec \u00b11.02% (88 runs sampled)\r\nz.discriminatedUnion: many: valid: c x 1,962,238 ops/sec \u00b10.96% (92 runs sampled)\r\nz.discriminatedUnion: many: invalid: null x 84,518 ops/sec \u00b10.56% (92 runs sampled)\r\nz.discriminatedUnion: many: invalid: wrong shape x 77,013 ops/sec \u00b10.82% (93 runs sampled)\r\n\u2728  Done in 237.98s.\r\n```\r\n\r\n\r\nAfter\r\n\r\n```\r\n% y benchmark\r\nyarn run v1.22.4\r\n$ ts-node src/benchmarks/index.ts\r\nrealworld: valid x 4,934 ops/sec \u00b11.18% (88 runs sampled)\r\nz.enum: valid x 12,020,432 ops/sec \u00b10.97% (89 runs sampled)\r\nz.enum: invalid x 66,359 ops/sec \u00b14.15% (89 runs sampled)\r\nz.undefined: valid x 10,118,294 ops/sec \u00b11.00% (88 runs sampled)\r\nz.undefined: invalid x 64,990 ops/sec \u00b14.09% (88 runs sampled)\r\nz.literal: valid x 22,881,671 ops/sec \u00b10.71% (95 runs sampled)\r\nz.literal: invalid x 64,326 ops/sec \u00b11.02% (89 runs sampled)\r\nz.number: valid x 7,213,872 ops/sec \u00b11.12% (87 runs sampled)\r\nz.number: invalid type x 62,500 ops/sec \u00b14.11% (81 runs sampled)\r\nz.number: invalid number x 66,110 ops/sec \u00b10.97% (91 runs sampled)\r\nz.string: empty string x 7,727,690 ops/sec \u00b10.98% (89 runs sampled)\r\nz.string: short string x 7,533,898 ops/sec \u00b11.01% (87 runs sampled)\r\nz.string: long string x 7,424,665 ops/sec \u00b11.11% (90 runs sampled)\r\nz.string: optional string x 6,298,061 ops/sec \u00b11.06% (88 runs sampled)\r\nz.string: nullable string x 5,351,823 ops/sec \u00b11.27% (86 runs sampled)\r\nz.string: nullable (null) string x 9,295,395 ops/sec \u00b11.00% (90 runs sampled)\r\nz.string: invalid: null x 64,821 ops/sec \u00b14.40% (87 runs sampled)\r\nz.string: manual parser: long x 898,213,431 ops/sec \u00b11.36% (87 runs sampled)\r\nz.object: empty: valid x 4,163,427 ops/sec \u00b12.03% (89 runs sampled)\r\nz.object: empty: valid: extra keys x 3,750,210 ops/sec \u00b11.11% (89 runs sampled)\r\nz.object: empty: invalid: null x 67,258 ops/sec \u00b10.92% (91 runs sampled)\r\nz.object: short: valid x 2,395,853 ops/sec \u00b11.11% (88 runs sampled)\r\nz.object: short: valid: extra keys x 2,118,128 ops/sec \u00b10.99% (87 runs sampled)\r\nz.object: short: invalid: null x 63,278 ops/sec \u00b14.17% (86 runs sampled)\r\nz.object: long: valid x 1,436,958 ops/sec \u00b11.09% (89 runs sampled)\r\nz.object: long: valid: extra keys x 1,330,563 ops/sec \u00b11.34% (90 runs sampled)\r\nz.object: long: invalid: null x 65,808 ops/sec \u00b11.07% (89 runs sampled)\r\nz.union: double: valid: a x 1,858,340 ops/sec \u00b10.98% (87 runs sampled)\r\nz.union: double: valid: b x 214,908 ops/sec \u00b16.27% (91 runs sampled)\r\nz.union: double: invalid: null x 23,372 ops/sec \u00b14.25% (87 runs sampled)\r\nz.union: double: invalid: wrong shape x 23,212 ops/sec \u00b11.26% (90 runs sampled)\r\nz.union: many: valid: a x 1,755,110 ops/sec \u00b11.17% (87 runs sampled)\r\nz.union: many: valid: c x 117,378 ops/sec \u00b18.97% (86 runs sampled)\r\nz.union: many: invalid: null x 15,048 ops/sec \u00b10.91% (91 runs sampled)\r\nz.union: many: invalid: wrong shape x 14,277 ops/sec \u00b14.43% (88 runs sampled)\r\nz.discriminatedUnion: double: valid: a x 1,952,220 ops/sec \u00b11.06% (88 runs sampled)\r\nz.discriminatedUnion: double: valid: b x 1,975,703 ops/sec \u00b11.10% (89 runs sampled)\r\nz.discriminatedUnion: double: invalid: null x 65,141 ops/sec \u00b10.94% (94 runs sampled)\r\nz.discriminatedUnion: double: invalid: wrong shape x 78,921 ops/sec \u00b11.12% (90 runs sampled)\r\nz.discriminatedUnion: many: valid: a x 1,931,200 ops/sec \u00b10.99% (86 runs sampled)\r\nz.discriminatedUnion: many: valid: c x 1,922,676 ops/sec \u00b10.89% (86 runs sampled)\r\nz.discriminatedUnion: many: invalid: null x 82,803 ops/sec \u00b11.04% (92 runs sampled)\r\nz.discriminatedUnion: many: invalid: wrong shape x 76,801 ops/sec \u00b10.71% (90 runs sampled)\r\n\u2728  Done in 238.26s.\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/1036",
        "comments": [
          "I wonder why `number` and `string` got slower in the benchmarks? Maybe the overhead of instantiating the `ParseInputLazyPath` class?",
          "Jitter :/. Running the benchmarks again yields this:\r\n\r\n```\r\n% y benchmark\r\nyarn run v1.22.4\r\n$ ts-node src/benchmarks/index.ts\r\nrealworld: valid x 5,450 ops/sec \u00b10.64% (95 runs sampled)\r\nz.enum: valid x 14,557,054 ops/sec \u00b11.11% (90 runs sampled)\r\nz.enum: invalid x 73,955 ops/sec \u00b13.90% (90 runs sampled)\r\nz.undefined: valid x 11,573,460 ops/sec \u00b10.60% (96 runs sampled)\r\nz.undefined: invalid x 71,706 ops/sec \u00b13.31% (93 runs sampled)\r\nz.literal: valid x 27,433,991 ops/sec \u00b11.05% (94 runs sampled)\r\nz.literal: invalid x 75,724 ops/sec \u00b10.62% (94 runs sampled)\r\nz.number: valid x 11,273,030 ops/sec \u00b11.24% (90 runs sampled)\r\nz.number: invalid type x 74,871 ops/sec \u00b14.17% (89 runs sampled)\r\nz.number: invalid number x 75,297 ops/sec \u00b10.93% (94 runs sampled)\r\nz.string: empty string x 11,148,330 ops/sec \u00b11.26% (90 runs sampled)\r\nz.string: short string x 10,670,739 ops/sec \u00b11.80% (90 runs sampled)\r\nz.string: long string x 11,017,787 ops/sec \u00b11.30% (88 runs sampled)\r\nz.string: optional string x 9,269,393 ops/sec \u00b11.36% (91 runs sampled)\r\nz.string: nullable string x 7,795,757 ops/sec \u00b10.74% (93 runs sampled)\r\nz.string: nullable (null) string x 11,455,814 ops/sec \u00b10.96% (91 runs sampled)\r\nz.string: invalid: null x 73,813 ops/sec \u00b14.15% (91 runs sampled)\r\nz.string: manual parser: long x 872,885,496 ops/sec \u00b10.87% (87 runs sampled)\r\nz.object: empty: valid x 4,643,618 ops/sec \u00b10.99% (94 runs sampled)\r\nz.object: empty: valid: extra keys x 4,892,417 ops/sec \u00b10.58% (95 runs sampled)\r\nz.object: empty: invalid: null x 72,944 ops/sec \u00b14.08% (91 runs sampled)\r\nz.object: short: valid x 2,941,298 ops/sec \u00b10.56% (96 runs sampled)\r\nz.object: short: valid: extra keys x 2,606,273 ops/sec \u00b10.92% (90 runs sampled)\r\nz.object: short: invalid: null x 73,221 ops/sec \u00b11.08% (91 runs sampled)\r\nz.object: long: valid x 1,643,766 ops/sec \u00b10.73% (91 runs sampled)\r\nz.object: long: valid: extra keys x 1,589,414 ops/sec \u00b10.41% (95 runs sampled)\r\nz.object: long: invalid: null x 71,422 ops/sec \u00b13.90% (92 runs sampled)\r\nz.union: double: valid: a x 2,372,352 ops/sec \u00b10.91% (94 runs sampled)\r\nz.union: double: valid: b x 268,907 ops/sec \u00b16.43% (86 runs sampled)\r\nz.union: double: invalid: null x 26,471 ops/sec \u00b13.61% (91 runs sampled)\r\nz.union: double: invalid: wrong shape x 26,852 ops/sec \u00b10.38% (92 runs sampled)\r\nz.union: many: valid: a x 2,292,813 ops/sec \u00b10.54% (94 runs sampled)\r\nz.union: many: valid: c x 144,190 ops/sec \u00b17.37% (88 runs sampled)\r\nz.union: many: invalid: null x 16,547 ops/sec \u00b14.01% (91 runs sampled)\r\nz.union: many: invalid: wrong shape x 16,374 ops/sec \u00b10.89% (94 runs sampled)\r\nz.discriminatedUnion: double: valid: a x 2,482,874 ops/sec \u00b10.54% (95 runs sampled)\r\nz.discriminatedUnion: double: valid: b x 2,418,194 ops/sec \u00b16.35% (86 runs sampled)\r\nz.discriminatedUnion: double: invalid: null x 71,396 ops/sec \u00b13.65% (93 runs sampled)\r\nz.discriminatedUnion: double: invalid: wrong shape x 83,699 ops/sec \u00b11.25% (96 runs sampled)\r\nz.discriminatedUnion: many: valid: a x 2,448,872 ops/sec \u00b10.63% (91 runs sampled)\r\nz.discriminatedUnion: many: valid: c x 2,464,820 ops/sec \u00b10.99% (93 runs sampled)\r\nz.discriminatedUnion: many: invalid: null x 91,411 ops/sec \u00b10.52% (96 runs sampled)\r\nz.discriminatedUnion: many: invalid: wrong shape x 82,014 ops/sec \u00b10.58% (90 runs sampled)\r\n\u2728  Done in 236.96s.\r\n```\r\n\r\nWhich has numbers a little faster than before. I suspect that these micro-benchmarks have more jitter than the others, but none of this compensates for variations in whatever else my macOS is doing a the same time as the bench.",
          "Yeah, I came away with similar results. I was hoping the benchmarking library itself doing a bunch of sampling runs would help alleviate this somewhat, but \ud83e\udd37 I know it's common to disregard \"microbenchmarks\", but I have a lot of use cases that use single primitive Zod schemas, so I still personally care about the primitive performance apart from how they are composed into something like `realworld`.\r\n\r\nAs an aside: my dream here is to run benchmarks in CI and show diffs rather than the raw data. That would at least alleviate some of the issues with having other processes interfering with results.\r\n\r\nThanks for all of your great performance work @tmcw!"
        ]
      },
      {
        "pr_number": 1036,
        "title": "Faster paths for nested parsers",
        "body": "Okay! Got another. Paths, specifically the pattern `[...ctx.path, key]` is a performance hotspot. This PR replaces that pattern with an object, `ParseInputLazyPath`, which is `ParseInput`, but instead of concatenating the path immediately, only creates the new array if it's needed (if there is an error). This yields a 20-30% performance boost on inputs like the realworld benchmark and the object benchmarks, and I can't easily profile it, but should reduce memory overhead a bit too.\r\n\r\n- Refs #205\r\n\r\n---\r\n\r\nBefore\r\n\r\n```\r\n% y benchmark\r\nyarn run v1.22.4\r\n$ ts-node src/benchmarks/index.ts\r\nrealworld: valid x 3,819 ops/sec \u00b10.97% (92 runs sampled)\r\nz.enum: valid x 12,049,817 ops/sec \u00b10.72% (87 runs sampled)\r\nz.enum: invalid x 65,717 ops/sec \u00b14.31% (88 runs sampled)\r\nz.undefined: valid x 10,393,122 ops/sec \u00b10.98% (88 runs sampled)\r\nz.undefined: invalid x 65,767 ops/sec \u00b13.98% (89 runs sampled)\r\nz.literal: valid x 22,997,780 ops/sec \u00b10.59% (93 runs sampled)\r\nz.literal: invalid x 69,284 ops/sec \u00b10.93% (89 runs sampled)\r\nz.number: valid x 9,296,436 ops/sec \u00b11.02% (89 runs sampled)\r\nz.number: invalid type x 66,951 ops/sec \u00b14.44% (88 runs sampled)\r\nz.number: invalid number x 69,723 ops/sec \u00b11.09% (89 runs sampled)\r\nz.string: empty string x 9,793,495 ops/sec \u00b10.82% (89 runs sampled)\r\nz.string: short string x 9,464,260 ops/sec \u00b10.98% (88 runs sampled)\r\nz.string: long string x 9,578,131 ops/sec \u00b10.99% (86 runs sampled)\r\nz.string: optional string x 7,780,586 ops/sec \u00b11.08% (83 runs sampled)\r\nz.string: nullable string x 6,718,051 ops/sec \u00b10.83% (88 runs sampled)\r\nz.string: nullable (null) string x 9,268,075 ops/sec \u00b10.71% (88 runs sampled)\r\nz.string: invalid: null x 65,552 ops/sec \u00b14.41% (88 runs sampled)\r\nz.string: manual parser: long x 917,656,518 ops/sec \u00b11.39% (90 runs sampled)\r\nz.object: empty: valid x 4,709,549 ops/sec \u00b11.17% (83 runs sampled)\r\nz.object: empty: valid: extra keys x 4,065,901 ops/sec \u00b10.76% (90 runs sampled)\r\nz.object: empty: invalid: null x 67,518 ops/sec \u00b10.84% (91 runs sampled)\r\nz.object: short: valid x 2,259,276 ops/sec \u00b10.87% (88 runs sampled)\r\nz.object: short: valid: extra keys x 2,019,209 ops/sec \u00b11.03% (86 runs sampled)\r\nz.object: short: invalid: null x 62,770 ops/sec \u00b14.48% (86 runs sampled)\r\nz.object: long: valid x 1,185,061 ops/sec \u00b11.02% (89 runs sampled)\r\nz.object: long: valid: extra keys x 1,149,035 ops/sec \u00b11.12% (90 runs sampled)\r\nz.object: long: invalid: null x 66,780 ops/sec \u00b10.78% (91 runs sampled)\r\nz.union: double: valid: a x 1,765,709 ops/sec \u00b10.95% (88 runs sampled)\r\nz.union: double: valid: b x 216,561 ops/sec \u00b17.73% (88 runs sampled)\r\nz.union: double: invalid: null x 24,409 ops/sec \u00b11.17% (91 runs sampled)\r\nz.union: double: invalid: wrong shape x 22,772 ops/sec \u00b14.70% (87 runs sampled)\r\nz.union: many: valid: a x 1,792,144 ops/sec \u00b11.06% (86 runs sampled)\r\nz.union: many: valid: c x 123,370 ops/sec \u00b16.10% (84 runs sampled)\r\nz.union: many: invalid: null x 14,940 ops/sec \u00b14.33% (87 runs sampled)\r\nz.union: many: invalid: wrong shape x 14,601 ops/sec \u00b11.10% (90 runs sampled)\r\nz.discriminatedUnion: double: valid: a x 1,794,083 ops/sec \u00b10.97% (88 runs sampled)\r\nz.discriminatedUnion: double: valid: b x 1,901,624 ops/sec \u00b10.94% (85 runs sampled)\r\nz.discriminatedUnion: double: invalid: null x 62,635 ops/sec \u00b14.22% (83 runs sampled)\r\nz.discriminatedUnion: double: invalid: wrong shape x 79,999 ops/sec \u00b10.99% (95 runs sampled)\r\nz.discriminatedUnion: many: valid: a x 1,942,452 ops/sec \u00b11.02% (88 runs sampled)\r\nz.discriminatedUnion: many: valid: c x 1,962,238 ops/sec \u00b10.96% (92 runs sampled)\r\nz.discriminatedUnion: many: invalid: null x 84,518 ops/sec \u00b10.56% (92 runs sampled)\r\nz.discriminatedUnion: many: invalid: wrong shape x 77,013 ops/sec \u00b10.82% (93 runs sampled)\r\n\u2728  Done in 237.98s.\r\n```\r\n\r\n\r\nAfter\r\n\r\n```\r\n% y benchmark\r\nyarn run v1.22.4\r\n$ ts-node src/benchmarks/index.ts\r\nrealworld: valid x 4,934 ops/sec \u00b11.18% (88 runs sampled)\r\nz.enum: valid x 12,020,432 ops/sec \u00b10.97% (89 runs sampled)\r\nz.enum: invalid x 66,359 ops/sec \u00b14.15% (89 runs sampled)\r\nz.undefined: valid x 10,118,294 ops/sec \u00b11.00% (88 runs sampled)\r\nz.undefined: invalid x 64,990 ops/sec \u00b14.09% (88 runs sampled)\r\nz.literal: valid x 22,881,671 ops/sec \u00b10.71% (95 runs sampled)\r\nz.literal: invalid x 64,326 ops/sec \u00b11.02% (89 runs sampled)\r\nz.number: valid x 7,213,872 ops/sec \u00b11.12% (87 runs sampled)\r\nz.number: invalid type x 62,500 ops/sec \u00b14.11% (81 runs sampled)\r\nz.number: invalid number x 66,110 ops/sec \u00b10.97% (91 runs sampled)\r\nz.string: empty string x 7,727,690 ops/sec \u00b10.98% (89 runs sampled)\r\nz.string: short string x 7,533,898 ops/sec \u00b11.01% (87 runs sampled)\r\nz.string: long string x 7,424,665 ops/sec \u00b11.11% (90 runs sampled)\r\nz.string: optional string x 6,298,061 ops/sec \u00b11.06% (88 runs sampled)\r\nz.string: nullable string x 5,351,823 ops/sec \u00b11.27% (86 runs sampled)\r\nz.string: nullable (null) string x 9,295,395 ops/sec \u00b11.00% (90 runs sampled)\r\nz.string: invalid: null x 64,821 ops/sec \u00b14.40% (87 runs sampled)\r\nz.string: manual parser: long x 898,213,431 ops/sec \u00b11.36% (87 runs sampled)\r\nz.object: empty: valid x 4,163,427 ops/sec \u00b12.03% (89 runs sampled)\r\nz.object: empty: valid: extra keys x 3,750,210 ops/sec \u00b11.11% (89 runs sampled)\r\nz.object: empty: invalid: null x 67,258 ops/sec \u00b10.92% (91 runs sampled)\r\nz.object: short: valid x 2,395,853 ops/sec \u00b11.11% (88 runs sampled)\r\nz.object: short: valid: extra keys x 2,118,128 ops/sec \u00b10.99% (87 runs sampled)\r\nz.object: short: invalid: null x 63,278 ops/sec \u00b14.17% (86 runs sampled)\r\nz.object: long: valid x 1,436,958 ops/sec \u00b11.09% (89 runs sampled)\r\nz.object: long: valid: extra keys x 1,330,563 ops/sec \u00b11.34% (90 runs sampled)\r\nz.object: long: invalid: null x 65,808 ops/sec \u00b11.07% (89 runs sampled)\r\nz.union: double: valid: a x 1,858,340 ops/sec \u00b10.98% (87 runs sampled)\r\nz.union: double: valid: b x 214,908 ops/sec \u00b16.27% (91 runs sampled)\r\nz.union: double: invalid: null x 23,372 ops/sec \u00b14.25% (87 runs sampled)\r\nz.union: double: invalid: wrong shape x 23,212 ops/sec \u00b11.26% (90 runs sampled)\r\nz.union: many: valid: a x 1,755,110 ops/sec \u00b11.17% (87 runs sampled)\r\nz.union: many: valid: c x 117,378 ops/sec \u00b18.97% (86 runs sampled)\r\nz.union: many: invalid: null x 15,048 ops/sec \u00b10.91% (91 runs sampled)\r\nz.union: many: invalid: wrong shape x 14,277 ops/sec \u00b14.43% (88 runs sampled)\r\nz.discriminatedUnion: double: valid: a x 1,952,220 ops/sec \u00b11.06% (88 runs sampled)\r\nz.discriminatedUnion: double: valid: b x 1,975,703 ops/sec \u00b11.10% (89 runs sampled)\r\nz.discriminatedUnion: double: invalid: null x 65,141 ops/sec \u00b10.94% (94 runs sampled)\r\nz.discriminatedUnion: double: invalid: wrong shape x 78,921 ops/sec \u00b11.12% (90 runs sampled)\r\nz.discriminatedUnion: many: valid: a x 1,931,200 ops/sec \u00b10.99% (86 runs sampled)\r\nz.discriminatedUnion: many: valid: c x 1,922,676 ops/sec \u00b10.89% (86 runs sampled)\r\nz.discriminatedUnion: many: invalid: null x 82,803 ops/sec \u00b11.04% (92 runs sampled)\r\nz.discriminatedUnion: many: invalid: wrong shape x 76,801 ops/sec \u00b10.71% (90 runs sampled)\r\n\u2728  Done in 238.26s.\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/1036",
        "comments": [
          "I wonder why `number` and `string` got slower in the benchmarks? Maybe the overhead of instantiating the `ParseInputLazyPath` class?",
          "Jitter :/. Running the benchmarks again yields this:\r\n\r\n```\r\n% y benchmark\r\nyarn run v1.22.4\r\n$ ts-node src/benchmarks/index.ts\r\nrealworld: valid x 5,450 ops/sec \u00b10.64% (95 runs sampled)\r\nz.enum: valid x 14,557,054 ops/sec \u00b11.11% (90 runs sampled)\r\nz.enum: invalid x 73,955 ops/sec \u00b13.90% (90 runs sampled)\r\nz.undefined: valid x 11,573,460 ops/sec \u00b10.60% (96 runs sampled)\r\nz.undefined: invalid x 71,706 ops/sec \u00b13.31% (93 runs sampled)\r\nz.literal: valid x 27,433,991 ops/sec \u00b11.05% (94 runs sampled)\r\nz.literal: invalid x 75,724 ops/sec \u00b10.62% (94 runs sampled)\r\nz.number: valid x 11,273,030 ops/sec \u00b11.24% (90 runs sampled)\r\nz.number: invalid type x 74,871 ops/sec \u00b14.17% (89 runs sampled)\r\nz.number: invalid number x 75,297 ops/sec \u00b10.93% (94 runs sampled)\r\nz.string: empty string x 11,148,330 ops/sec \u00b11.26% (90 runs sampled)\r\nz.string: short string x 10,670,739 ops/sec \u00b11.80% (90 runs sampled)\r\nz.string: long string x 11,017,787 ops/sec \u00b11.30% (88 runs sampled)\r\nz.string: optional string x 9,269,393 ops/sec \u00b11.36% (91 runs sampled)\r\nz.string: nullable string x 7,795,757 ops/sec \u00b10.74% (93 runs sampled)\r\nz.string: nullable (null) string x 11,455,814 ops/sec \u00b10.96% (91 runs sampled)\r\nz.string: invalid: null x 73,813 ops/sec \u00b14.15% (91 runs sampled)\r\nz.string: manual parser: long x 872,885,496 ops/sec \u00b10.87% (87 runs sampled)\r\nz.object: empty: valid x 4,643,618 ops/sec \u00b10.99% (94 runs sampled)\r\nz.object: empty: valid: extra keys x 4,892,417 ops/sec \u00b10.58% (95 runs sampled)\r\nz.object: empty: invalid: null x 72,944 ops/sec \u00b14.08% (91 runs sampled)\r\nz.object: short: valid x 2,941,298 ops/sec \u00b10.56% (96 runs sampled)\r\nz.object: short: valid: extra keys x 2,606,273 ops/sec \u00b10.92% (90 runs sampled)\r\nz.object: short: invalid: null x 73,221 ops/sec \u00b11.08% (91 runs sampled)\r\nz.object: long: valid x 1,643,766 ops/sec \u00b10.73% (91 runs sampled)\r\nz.object: long: valid: extra keys x 1,589,414 ops/sec \u00b10.41% (95 runs sampled)\r\nz.object: long: invalid: null x 71,422 ops/sec \u00b13.90% (92 runs sampled)\r\nz.union: double: valid: a x 2,372,352 ops/sec \u00b10.91% (94 runs sampled)\r\nz.union: double: valid: b x 268,907 ops/sec \u00b16.43% (86 runs sampled)\r\nz.union: double: invalid: null x 26,471 ops/sec \u00b13.61% (91 runs sampled)\r\nz.union: double: invalid: wrong shape x 26,852 ops/sec \u00b10.38% (92 runs sampled)\r\nz.union: many: valid: a x 2,292,813 ops/sec \u00b10.54% (94 runs sampled)\r\nz.union: many: valid: c x 144,190 ops/sec \u00b17.37% (88 runs sampled)\r\nz.union: many: invalid: null x 16,547 ops/sec \u00b14.01% (91 runs sampled)\r\nz.union: many: invalid: wrong shape x 16,374 ops/sec \u00b10.89% (94 runs sampled)\r\nz.discriminatedUnion: double: valid: a x 2,482,874 ops/sec \u00b10.54% (95 runs sampled)\r\nz.discriminatedUnion: double: valid: b x 2,418,194 ops/sec \u00b16.35% (86 runs sampled)\r\nz.discriminatedUnion: double: invalid: null x 71,396 ops/sec \u00b13.65% (93 runs sampled)\r\nz.discriminatedUnion: double: invalid: wrong shape x 83,699 ops/sec \u00b11.25% (96 runs sampled)\r\nz.discriminatedUnion: many: valid: a x 2,448,872 ops/sec \u00b10.63% (91 runs sampled)\r\nz.discriminatedUnion: many: valid: c x 2,464,820 ops/sec \u00b10.99% (93 runs sampled)\r\nz.discriminatedUnion: many: invalid: null x 91,411 ops/sec \u00b10.52% (96 runs sampled)\r\nz.discriminatedUnion: many: invalid: wrong shape x 82,014 ops/sec \u00b10.58% (90 runs sampled)\r\n\u2728  Done in 236.96s.\r\n```\r\n\r\nWhich has numbers a little faster than before. I suspect that these micro-benchmarks have more jitter than the others, but none of this compensates for variations in whatever else my macOS is doing a the same time as the bench.",
          "Yeah, I came away with similar results. I was hoping the benchmarking library itself doing a bunch of sampling runs would help alleviate this somewhat, but \ud83e\udd37 I know it's common to disregard \"microbenchmarks\", but I have a lot of use cases that use single primitive Zod schemas, so I still personally care about the primitive performance apart from how they are composed into something like `realworld`.\r\n\r\nAs an aside: my dream here is to run benchmarks in CI and show diffs rather than the raw data. That would at least alleviate some of the issues with having other processes interfering with results.\r\n\r\nThanks for all of your great performance work @tmcw!"
        ]
      },
      {
        "pr_number": 1036,
        "title": "Faster paths for nested parsers",
        "body": "Okay! Got another. Paths, specifically the pattern `[...ctx.path, key]` is a performance hotspot. This PR replaces that pattern with an object, `ParseInputLazyPath`, which is `ParseInput`, but instead of concatenating the path immediately, only creates the new array if it's needed (if there is an error). This yields a 20-30% performance boost on inputs like the realworld benchmark and the object benchmarks, and I can't easily profile it, but should reduce memory overhead a bit too.\r\n\r\n- Refs #205\r\n\r\n---\r\n\r\nBefore\r\n\r\n```\r\n% y benchmark\r\nyarn run v1.22.4\r\n$ ts-node src/benchmarks/index.ts\r\nrealworld: valid x 3,819 ops/sec \u00b10.97% (92 runs sampled)\r\nz.enum: valid x 12,049,817 ops/sec \u00b10.72% (87 runs sampled)\r\nz.enum: invalid x 65,717 ops/sec \u00b14.31% (88 runs sampled)\r\nz.undefined: valid x 10,393,122 ops/sec \u00b10.98% (88 runs sampled)\r\nz.undefined: invalid x 65,767 ops/sec \u00b13.98% (89 runs sampled)\r\nz.literal: valid x 22,997,780 ops/sec \u00b10.59% (93 runs sampled)\r\nz.literal: invalid x 69,284 ops/sec \u00b10.93% (89 runs sampled)\r\nz.number: valid x 9,296,436 ops/sec \u00b11.02% (89 runs sampled)\r\nz.number: invalid type x 66,951 ops/sec \u00b14.44% (88 runs sampled)\r\nz.number: invalid number x 69,723 ops/sec \u00b11.09% (89 runs sampled)\r\nz.string: empty string x 9,793,495 ops/sec \u00b10.82% (89 runs sampled)\r\nz.string: short string x 9,464,260 ops/sec \u00b10.98% (88 runs sampled)\r\nz.string: long string x 9,578,131 ops/sec \u00b10.99% (86 runs sampled)\r\nz.string: optional string x 7,780,586 ops/sec \u00b11.08% (83 runs sampled)\r\nz.string: nullable string x 6,718,051 ops/sec \u00b10.83% (88 runs sampled)\r\nz.string: nullable (null) string x 9,268,075 ops/sec \u00b10.71% (88 runs sampled)\r\nz.string: invalid: null x 65,552 ops/sec \u00b14.41% (88 runs sampled)\r\nz.string: manual parser: long x 917,656,518 ops/sec \u00b11.39% (90 runs sampled)\r\nz.object: empty: valid x 4,709,549 ops/sec \u00b11.17% (83 runs sampled)\r\nz.object: empty: valid: extra keys x 4,065,901 ops/sec \u00b10.76% (90 runs sampled)\r\nz.object: empty: invalid: null x 67,518 ops/sec \u00b10.84% (91 runs sampled)\r\nz.object: short: valid x 2,259,276 ops/sec \u00b10.87% (88 runs sampled)\r\nz.object: short: valid: extra keys x 2,019,209 ops/sec \u00b11.03% (86 runs sampled)\r\nz.object: short: invalid: null x 62,770 ops/sec \u00b14.48% (86 runs sampled)\r\nz.object: long: valid x 1,185,061 ops/sec \u00b11.02% (89 runs sampled)\r\nz.object: long: valid: extra keys x 1,149,035 ops/sec \u00b11.12% (90 runs sampled)\r\nz.object: long: invalid: null x 66,780 ops/sec \u00b10.78% (91 runs sampled)\r\nz.union: double: valid: a x 1,765,709 ops/sec \u00b10.95% (88 runs sampled)\r\nz.union: double: valid: b x 216,561 ops/sec \u00b17.73% (88 runs sampled)\r\nz.union: double: invalid: null x 24,409 ops/sec \u00b11.17% (91 runs sampled)\r\nz.union: double: invalid: wrong shape x 22,772 ops/sec \u00b14.70% (87 runs sampled)\r\nz.union: many: valid: a x 1,792,144 ops/sec \u00b11.06% (86 runs sampled)\r\nz.union: many: valid: c x 123,370 ops/sec \u00b16.10% (84 runs sampled)\r\nz.union: many: invalid: null x 14,940 ops/sec \u00b14.33% (87 runs sampled)\r\nz.union: many: invalid: wrong shape x 14,601 ops/sec \u00b11.10% (90 runs sampled)\r\nz.discriminatedUnion: double: valid: a x 1,794,083 ops/sec \u00b10.97% (88 runs sampled)\r\nz.discriminatedUnion: double: valid: b x 1,901,624 ops/sec \u00b10.94% (85 runs sampled)\r\nz.discriminatedUnion: double: invalid: null x 62,635 ops/sec \u00b14.22% (83 runs sampled)\r\nz.discriminatedUnion: double: invalid: wrong shape x 79,999 ops/sec \u00b10.99% (95 runs sampled)\r\nz.discriminatedUnion: many: valid: a x 1,942,452 ops/sec \u00b11.02% (88 runs sampled)\r\nz.discriminatedUnion: many: valid: c x 1,962,238 ops/sec \u00b10.96% (92 runs sampled)\r\nz.discriminatedUnion: many: invalid: null x 84,518 ops/sec \u00b10.56% (92 runs sampled)\r\nz.discriminatedUnion: many: invalid: wrong shape x 77,013 ops/sec \u00b10.82% (93 runs sampled)\r\n\u2728  Done in 237.98s.\r\n```\r\n\r\n\r\nAfter\r\n\r\n```\r\n% y benchmark\r\nyarn run v1.22.4\r\n$ ts-node src/benchmarks/index.ts\r\nrealworld: valid x 4,934 ops/sec \u00b11.18% (88 runs sampled)\r\nz.enum: valid x 12,020,432 ops/sec \u00b10.97% (89 runs sampled)\r\nz.enum: invalid x 66,359 ops/sec \u00b14.15% (89 runs sampled)\r\nz.undefined: valid x 10,118,294 ops/sec \u00b11.00% (88 runs sampled)\r\nz.undefined: invalid x 64,990 ops/sec \u00b14.09% (88 runs sampled)\r\nz.literal: valid x 22,881,671 ops/sec \u00b10.71% (95 runs sampled)\r\nz.literal: invalid x 64,326 ops/sec \u00b11.02% (89 runs sampled)\r\nz.number: valid x 7,213,872 ops/sec \u00b11.12% (87 runs sampled)\r\nz.number: invalid type x 62,500 ops/sec \u00b14.11% (81 runs sampled)\r\nz.number: invalid number x 66,110 ops/sec \u00b10.97% (91 runs sampled)\r\nz.string: empty string x 7,727,690 ops/sec \u00b10.98% (89 runs sampled)\r\nz.string: short string x 7,533,898 ops/sec \u00b11.01% (87 runs sampled)\r\nz.string: long string x 7,424,665 ops/sec \u00b11.11% (90 runs sampled)\r\nz.string: optional string x 6,298,061 ops/sec \u00b11.06% (88 runs sampled)\r\nz.string: nullable string x 5,351,823 ops/sec \u00b11.27% (86 runs sampled)\r\nz.string: nullable (null) string x 9,295,395 ops/sec \u00b11.00% (90 runs sampled)\r\nz.string: invalid: null x 64,821 ops/sec \u00b14.40% (87 runs sampled)\r\nz.string: manual parser: long x 898,213,431 ops/sec \u00b11.36% (87 runs sampled)\r\nz.object: empty: valid x 4,163,427 ops/sec \u00b12.03% (89 runs sampled)\r\nz.object: empty: valid: extra keys x 3,750,210 ops/sec \u00b11.11% (89 runs sampled)\r\nz.object: empty: invalid: null x 67,258 ops/sec \u00b10.92% (91 runs sampled)\r\nz.object: short: valid x 2,395,853 ops/sec \u00b11.11% (88 runs sampled)\r\nz.object: short: valid: extra keys x 2,118,128 ops/sec \u00b10.99% (87 runs sampled)\r\nz.object: short: invalid: null x 63,278 ops/sec \u00b14.17% (86 runs sampled)\r\nz.object: long: valid x 1,436,958 ops/sec \u00b11.09% (89 runs sampled)\r\nz.object: long: valid: extra keys x 1,330,563 ops/sec \u00b11.34% (90 runs sampled)\r\nz.object: long: invalid: null x 65,808 ops/sec \u00b11.07% (89 runs sampled)\r\nz.union: double: valid: a x 1,858,340 ops/sec \u00b10.98% (87 runs sampled)\r\nz.union: double: valid: b x 214,908 ops/sec \u00b16.27% (91 runs sampled)\r\nz.union: double: invalid: null x 23,372 ops/sec \u00b14.25% (87 runs sampled)\r\nz.union: double: invalid: wrong shape x 23,212 ops/sec \u00b11.26% (90 runs sampled)\r\nz.union: many: valid: a x 1,755,110 ops/sec \u00b11.17% (87 runs sampled)\r\nz.union: many: valid: c x 117,378 ops/sec \u00b18.97% (86 runs sampled)\r\nz.union: many: invalid: null x 15,048 ops/sec \u00b10.91% (91 runs sampled)\r\nz.union: many: invalid: wrong shape x 14,277 ops/sec \u00b14.43% (88 runs sampled)\r\nz.discriminatedUnion: double: valid: a x 1,952,220 ops/sec \u00b11.06% (88 runs sampled)\r\nz.discriminatedUnion: double: valid: b x 1,975,703 ops/sec \u00b11.10% (89 runs sampled)\r\nz.discriminatedUnion: double: invalid: null x 65,141 ops/sec \u00b10.94% (94 runs sampled)\r\nz.discriminatedUnion: double: invalid: wrong shape x 78,921 ops/sec \u00b11.12% (90 runs sampled)\r\nz.discriminatedUnion: many: valid: a x 1,931,200 ops/sec \u00b10.99% (86 runs sampled)\r\nz.discriminatedUnion: many: valid: c x 1,922,676 ops/sec \u00b10.89% (86 runs sampled)\r\nz.discriminatedUnion: many: invalid: null x 82,803 ops/sec \u00b11.04% (92 runs sampled)\r\nz.discriminatedUnion: many: invalid: wrong shape x 76,801 ops/sec \u00b10.71% (90 runs sampled)\r\n\u2728  Done in 238.26s.\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/1036",
        "comments": [
          "I wonder why `number` and `string` got slower in the benchmarks? Maybe the overhead of instantiating the `ParseInputLazyPath` class?",
          "Jitter :/. Running the benchmarks again yields this:\r\n\r\n```\r\n% y benchmark\r\nyarn run v1.22.4\r\n$ ts-node src/benchmarks/index.ts\r\nrealworld: valid x 5,450 ops/sec \u00b10.64% (95 runs sampled)\r\nz.enum: valid x 14,557,054 ops/sec \u00b11.11% (90 runs sampled)\r\nz.enum: invalid x 73,955 ops/sec \u00b13.90% (90 runs sampled)\r\nz.undefined: valid x 11,573,460 ops/sec \u00b10.60% (96 runs sampled)\r\nz.undefined: invalid x 71,706 ops/sec \u00b13.31% (93 runs sampled)\r\nz.literal: valid x 27,433,991 ops/sec \u00b11.05% (94 runs sampled)\r\nz.literal: invalid x 75,724 ops/sec \u00b10.62% (94 runs sampled)\r\nz.number: valid x 11,273,030 ops/sec \u00b11.24% (90 runs sampled)\r\nz.number: invalid type x 74,871 ops/sec \u00b14.17% (89 runs sampled)\r\nz.number: invalid number x 75,297 ops/sec \u00b10.93% (94 runs sampled)\r\nz.string: empty string x 11,148,330 ops/sec \u00b11.26% (90 runs sampled)\r\nz.string: short string x 10,670,739 ops/sec \u00b11.80% (90 runs sampled)\r\nz.string: long string x 11,017,787 ops/sec \u00b11.30% (88 runs sampled)\r\nz.string: optional string x 9,269,393 ops/sec \u00b11.36% (91 runs sampled)\r\nz.string: nullable string x 7,795,757 ops/sec \u00b10.74% (93 runs sampled)\r\nz.string: nullable (null) string x 11,455,814 ops/sec \u00b10.96% (91 runs sampled)\r\nz.string: invalid: null x 73,813 ops/sec \u00b14.15% (91 runs sampled)\r\nz.string: manual parser: long x 872,885,496 ops/sec \u00b10.87% (87 runs sampled)\r\nz.object: empty: valid x 4,643,618 ops/sec \u00b10.99% (94 runs sampled)\r\nz.object: empty: valid: extra keys x 4,892,417 ops/sec \u00b10.58% (95 runs sampled)\r\nz.object: empty: invalid: null x 72,944 ops/sec \u00b14.08% (91 runs sampled)\r\nz.object: short: valid x 2,941,298 ops/sec \u00b10.56% (96 runs sampled)\r\nz.object: short: valid: extra keys x 2,606,273 ops/sec \u00b10.92% (90 runs sampled)\r\nz.object: short: invalid: null x 73,221 ops/sec \u00b11.08% (91 runs sampled)\r\nz.object: long: valid x 1,643,766 ops/sec \u00b10.73% (91 runs sampled)\r\nz.object: long: valid: extra keys x 1,589,414 ops/sec \u00b10.41% (95 runs sampled)\r\nz.object: long: invalid: null x 71,422 ops/sec \u00b13.90% (92 runs sampled)\r\nz.union: double: valid: a x 2,372,352 ops/sec \u00b10.91% (94 runs sampled)\r\nz.union: double: valid: b x 268,907 ops/sec \u00b16.43% (86 runs sampled)\r\nz.union: double: invalid: null x 26,471 ops/sec \u00b13.61% (91 runs sampled)\r\nz.union: double: invalid: wrong shape x 26,852 ops/sec \u00b10.38% (92 runs sampled)\r\nz.union: many: valid: a x 2,292,813 ops/sec \u00b10.54% (94 runs sampled)\r\nz.union: many: valid: c x 144,190 ops/sec \u00b17.37% (88 runs sampled)\r\nz.union: many: invalid: null x 16,547 ops/sec \u00b14.01% (91 runs sampled)\r\nz.union: many: invalid: wrong shape x 16,374 ops/sec \u00b10.89% (94 runs sampled)\r\nz.discriminatedUnion: double: valid: a x 2,482,874 ops/sec \u00b10.54% (95 runs sampled)\r\nz.discriminatedUnion: double: valid: b x 2,418,194 ops/sec \u00b16.35% (86 runs sampled)\r\nz.discriminatedUnion: double: invalid: null x 71,396 ops/sec \u00b13.65% (93 runs sampled)\r\nz.discriminatedUnion: double: invalid: wrong shape x 83,699 ops/sec \u00b11.25% (96 runs sampled)\r\nz.discriminatedUnion: many: valid: a x 2,448,872 ops/sec \u00b10.63% (91 runs sampled)\r\nz.discriminatedUnion: many: valid: c x 2,464,820 ops/sec \u00b10.99% (93 runs sampled)\r\nz.discriminatedUnion: many: invalid: null x 91,411 ops/sec \u00b10.52% (96 runs sampled)\r\nz.discriminatedUnion: many: invalid: wrong shape x 82,014 ops/sec \u00b10.58% (90 runs sampled)\r\n\u2728  Done in 236.96s.\r\n```\r\n\r\nWhich has numbers a little faster than before. I suspect that these micro-benchmarks have more jitter than the others, but none of this compensates for variations in whatever else my macOS is doing a the same time as the bench.",
          "Yeah, I came away with similar results. I was hoping the benchmarking library itself doing a bunch of sampling runs would help alleviate this somewhat, but \ud83e\udd37 I know it's common to disregard \"microbenchmarks\", but I have a lot of use cases that use single primitive Zod schemas, so I still personally care about the primitive performance apart from how they are composed into something like `realworld`.\r\n\r\nAs an aside: my dream here is to run benchmarks in CI and show diffs rather than the raw data. That would at least alleviate some of the issues with having other processes interfering with results.\r\n\r\nThanks for all of your great performance work @tmcw!"
        ]
      },
      {
        "pr_number": 1047,
        "title": "Add Supervillain to Ecosystem section",
        "body": "Mentioned in https://github.com/colinhacks/zod/discussions/952 \r\n\r\nI use this tool actively in a [few](https://github.com/openmultiplayer/web) [projects](https://github.com/novaura/storyden) that are open source as well as my company's Go+TypeScript codebase so it should remain maintained for the foreseeable future.\r\n\r\nWe use this for validating responses from APIs to double check all the types are correct - just a bit safer than a simple `as` TypeCast on a `fetch` response body.",
        "html_url": "https://github.com/colinhacks/zod/pull/1047",
        "comments": []
      },
      {
        "pr_number": 1047,
        "title": "Add Supervillain to Ecosystem section",
        "body": "Mentioned in https://github.com/colinhacks/zod/discussions/952 \r\n\r\nI use this tool actively in a [few](https://github.com/openmultiplayer/web) [projects](https://github.com/novaura/storyden) that are open source as well as my company's Go+TypeScript codebase so it should remain maintained for the foreseeable future.\r\n\r\nWe use this for validating responses from APIs to double check all the types are correct - just a bit safer than a simple `as` TypeCast on a `fetch` response body.",
        "html_url": "https://github.com/colinhacks/zod/pull/1047",
        "comments": []
      }
    ],
    "v3.14.2": [
      {
        "pr_number": 1028,
        "title": "Faster optional & nullable values",
        "body": "I think somewhere in the commit flow the `deno/` tree keeps getting updated in these PRs? I'm not sure if that's intended or not.\r\n\r\nChecking out issues, it seems like people use `.optional().nullable()` a lot in their Zod types. There's definitely a performance cost to that, because for that case you run ZodOptional, ZodNullable, and then the underlying type. This eliminates the creation of an intermediate `ctx` in the process, which boosts performance by ~10% in this case.\r\n\r\nBefore:\r\n\r\n```\r\nz.string: optional string x 8,206,017 ops/sec \u00b10.75% (91 runs sampled)\r\nz.string: nullable string x 5,680,332 ops/sec \u00b11.01% (93 runs sampled)\r\nz.string: nullable (null) string x 11,105,555 ops/sec \u00b10.75% (93 runs sampled)\r\n```\r\n\r\nAfter:\r\n\r\n```\r\nz.string: optional string x 9,065,250 ops/sec \u00b10.95% (95 runs sampled)\r\nz.string: nullable string x 7,490,333 ops/sec \u00b10.49% (96 runs sampled)\r\nz.string: nullable (null) string x 11,164,238 ops/sec \u00b10.69% (93 runs sampled)\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/1028",
        "comments": [
          "@tmcw shouldn\u2019t this same optimization also be possible for [`.nullish()`](https://github.com/colinhacks/zod#nullish)?",
          "`nullish()` is a shortcut for `.optional().nullable()`, so this PR will increase performance somewhat for nullish as well - without changing how nullish works it isn't possible to optimize it much further.",
          "Looks great yet again \ud83e\udd19\r\n\r\nThe Deno thing is intentional - it gets built during a precommit hook into the `deno` subdir because I was too lazy to set up a separate repo and proper CI for it. I'll look into doing that in a `push` hook instead, I'm planning to overhaul the CI over the weekend."
        ]
      },
      {
        "pr_number": 1028,
        "title": "Faster optional & nullable values",
        "body": "I think somewhere in the commit flow the `deno/` tree keeps getting updated in these PRs? I'm not sure if that's intended or not.\r\n\r\nChecking out issues, it seems like people use `.optional().nullable()` a lot in their Zod types. There's definitely a performance cost to that, because for that case you run ZodOptional, ZodNullable, and then the underlying type. This eliminates the creation of an intermediate `ctx` in the process, which boosts performance by ~10% in this case.\r\n\r\nBefore:\r\n\r\n```\r\nz.string: optional string x 8,206,017 ops/sec \u00b10.75% (91 runs sampled)\r\nz.string: nullable string x 5,680,332 ops/sec \u00b11.01% (93 runs sampled)\r\nz.string: nullable (null) string x 11,105,555 ops/sec \u00b10.75% (93 runs sampled)\r\n```\r\n\r\nAfter:\r\n\r\n```\r\nz.string: optional string x 9,065,250 ops/sec \u00b10.95% (95 runs sampled)\r\nz.string: nullable string x 7,490,333 ops/sec \u00b10.49% (96 runs sampled)\r\nz.string: nullable (null) string x 11,164,238 ops/sec \u00b10.69% (93 runs sampled)\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/1028",
        "comments": [
          "@tmcw shouldn\u2019t this same optimization also be possible for [`.nullish()`](https://github.com/colinhacks/zod#nullish)?",
          "`nullish()` is a shortcut for `.optional().nullable()`, so this PR will increase performance somewhat for nullish as well - without changing how nullish works it isn't possible to optimize it much further.",
          "Looks great yet again \ud83e\udd19\r\n\r\nThe Deno thing is intentional - it gets built during a precommit hook into the `deno` subdir because I was too lazy to set up a separate repo and proper CI for it. I'll look into doing that in a `push` hook instead, I'm planning to overhaul the CI over the weekend."
        ]
      },
      {
        "pr_number": 1030,
        "title": "Implement release CI",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1030",
        "comments": []
      },
      {
        "pr_number": 1030,
        "title": "Implement release CI",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1030",
        "comments": []
      },
      {
        "pr_number": 1030,
        "title": "Implement release CI",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1030",
        "comments": []
      },
      {
        "pr_number": 1030,
        "title": "Implement release CI",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1030",
        "comments": []
      },
      {
        "pr_number": 1030,
        "title": "Implement release CI",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1030",
        "comments": []
      },
      {
        "pr_number": 1030,
        "title": "Implement release CI",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1030",
        "comments": []
      },
      {
        "pr_number": 1030,
        "title": "Implement release CI",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1030",
        "comments": []
      },
      {
        "pr_number": 1030,
        "title": "Implement release CI",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1030",
        "comments": []
      },
      {
        "pr_number": 1030,
        "title": "Implement release CI",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1030",
        "comments": []
      },
      {
        "pr_number": 1030,
        "title": "Implement release CI",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1030",
        "comments": []
      },
      {
        "pr_number": 1030,
        "title": "Implement release CI",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1030",
        "comments": []
      },
      {
        "pr_number": 1030,
        "title": "Implement release CI",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1030",
        "comments": []
      },
      {
        "pr_number": 1030,
        "title": "Implement release CI",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1030",
        "comments": []
      },
      {
        "pr_number": 1030,
        "title": "Implement release CI",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1030",
        "comments": []
      },
      {
        "pr_number": 1030,
        "title": "Implement release CI",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1030",
        "comments": []
      },
      {
        "pr_number": 1030,
        "title": "Implement release CI",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1030",
        "comments": []
      },
      {
        "pr_number": 1030,
        "title": "Implement release CI",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/1030",
        "comments": []
      }
    ],
    "v3.14.1": [
      {
        "pr_number": 1025,
        "title": "Reduce memory churn, avoid generating ctx when not necessary, much faster valid primitives",
        "body": "Okay, last one of these, hope they aren't annoying \ud83d\ude06 \r\n\r\nSo, `._processInputParams` is called pretty uniformly throughout `types.ts`, but in many cases the `ctx` and `status` values it produces are never used, so they only contribute to overhead and memory churn. This PR defers calling processInputParams: in cases like numbers in which ctx is useful, it's generated lazily, only when necessary.\r\n\r\nCtx is totally still useful for collection types - unions, objects, arrays - so it is still used there. But at the leaf values like strings & numbers, deferring or avoiding creating context and parserstate objects adds up to very respectable gains \ud83d\udcaa\r\n\r\n- Strings: 2,572,767 ops/sec to 8,020,277 ops/sec\r\n- Literals: 2,764,958 ops/sec to 13,257,671 ops/sec\r\n- Enums: 3,023,900 to 25,570,525 ops/sec\r\n- Numbers: 2,151,291 to 6,242,437\r\n\r\nThese are just for the \"valid\" cases. Invalid results have stayed the same - we still generate a ctx when it's necessary.\r\n\r\n<details>\r\n<summary>Before</summary>\r\n<pre>\r\nyarn run v1.22.4\r\n$ ts-node src/benchmarks/index.ts\r\nz.enum: valid x 3,023,900 ops/sec \u00b10.50% (95 runs sampled)\r\nz.enum: invalid x 88,480 ops/sec \u00b11.33% (95 runs sampled)\r\nz.undefined: valid x 2,763,887 ops/sec \u00b10.67% (94 runs sampled)\r\nz.undefined: invalid x 92,613 ops/sec \u00b10.78% (95 runs sampled)\r\nz.literal: valid x 2,764,958 ops/sec \u00b10.65% (97 runs sampled)\r\nz.literal: invalid x 92,877 ops/sec \u00b10.62% (94 runs sampled)\r\nz.number: valid x 2,151,291 ops/sec \u00b119.28% (92 runs sampled)\r\nz.number: invalid type x 93,060 ops/sec \u00b10.71% (91 runs sampled)\r\nz.number: invalid number x 90,584 ops/sec \u00b10.62% (94 runs sampled)\r\nz.string: empty string x 2,298,812 ops/sec \u00b15.68% (91 runs sampled)\r\nz.string: short string x 2,350,511 ops/sec \u00b10.43% (94 runs sampled)\r\nz.string: long string x 2,338,882 ops/sec \u00b10.43% (95 runs sampled)\r\nz.string: invalid: null x 90,197 ops/sec \u00b14.11% (90 runs sampled)\r\nz.string: manual parser: long x 879,926,450 ops/sec \u00b11.59% (86 runs sampled)\r\nz.object: empty: valid x 1,689,127 ops/sec \u00b11.00% (94 runs sampled)\r\nz.object: empty: valid: extra keys x 1,603,788 ops/sec \u00b10.51% (94 runs sampled)\r\nz.object: empty: invalid: null x 90,512 ops/sec \u00b14.32% (91 runs sampled)\r\nz.object: short: valid x 829,616 ops/sec \u00b10.95% (95 runs sampled)\r\nz.object: short: valid: extra keys x 796,218 ops/sec \u00b10.48% (95 runs sampled)\r\nz.object: short: invalid: null x 90,538 ops/sec \u00b13.58% (94 runs sampled)\r\nz.object: long: valid x 416,655 ops/sec \u00b10.42% (95 runs sampled)\r\nz.object: long: valid: extra keys x 409,889 ops/sec \u00b10.33% (94 runs sampled)\r\nz.object: long: invalid: null x 92,829 ops/sec \u00b10.63% (94 runs sampled)\r\nz.union: double: valid: a x 258,928 ops/sec \u00b16.25% (89 runs sampled)\r\nz.union: double: valid: b x 266,564 ops/sec \u00b10.88% (93 runs sampled)\r\nz.union: double: invalid: null x 34,444 ops/sec \u00b10.55% (92 runs sampled)\r\nz.union: double: invalid: wrong shape x 31,241 ops/sec \u00b10.72% (96 runs sampled)\r\nz.union: many: valid: a x 125,748 ops/sec \u00b16.13% (89 runs sampled)\r\nz.union: many: valid: c x 130,767 ops/sec \u00b10.87% (96 runs sampled)\r\nz.union: many: invalid: null x 21,682 ops/sec \u00b10.54% (95 runs sampled)\r\nz.union: many: invalid: wrong shape x 19,372 ops/sec \u00b10.72% (93 runs sampled)\r\nz.discriminatedUnion: double: valid: a x 628,211 ops/sec \u00b14.38% (93 runs sampled)\r\nz.discriminatedUnion: double: valid: b x 649,602 ops/sec \u00b10.62% (93 runs sampled)\r\nz.discriminatedUnion: double: invalid: null x 88,935 ops/sec \u00b10.44% (97 runs sampled)\r\nz.discriminatedUnion: double: invalid: wrong shape x 79,578 ops/sec \u00b14.03% (90 runs sampled)\r\nz.discriminatedUnion: many: valid: a x 647,738 ops/sec \u00b10.57% (95 runs sampled)\r\nz.discriminatedUnion: many: valid: c x 635,873 ops/sec \u00b10.60% (94 runs sampled)\r\nz.discriminatedUnion: many: invalid: null x 89,762 ops/sec \u00b10.40% (95 runs sampled)\r\nz.discriminatedUnion: many: invalid: wrong shape x 77,317 ops/sec \u00b13.93% (91 runs sampled)\r\n\u2728  Done in 213.99s.\r\n</pre>\r\n</details>\r\n\r\n<details>\r\n<summary>After</summary>\r\n<pre>\r\nyarn run v1.22.4\r\n$ ts-node src/benchmarks/index.ts\r\nz.enum: valid x 25,570,525 ops/sec \u00b10.58% (96 runs sampled)\r\nz.enum: invalid x 88,718 ops/sec \u00b10.79% (95 runs sampled)\r\nz.undefined: valid x 9,202,311 ops/sec \u00b10.78% (95 runs sampled)\r\nz.undefined: invalid x 91,320 ops/sec \u00b10.77% (93 runs sampled)\r\nz.literal: valid x 13,257,671 ops/sec \u00b10.97% (92 runs sampled)\r\nz.literal: invalid x 91,489 ops/sec \u00b14.37% (91 runs sampled)\r\nz.number: valid x 6,242,437 ops/sec \u00b10.44% (93 runs sampled)\r\nz.number: invalid type x 91,081 ops/sec \u00b10.82% (94 runs sampled)\r\nz.number: invalid number x 89,370 ops/sec \u00b10.94% (94 runs sampled)\r\nz.string: empty string x 7,118,336 ops/sec \u00b15.52% (89 runs sampled)\r\nz.string: short string x 7,601,530 ops/sec \u00b11.06% (94 runs sampled)\r\nz.string: long string x 7,644,857 ops/sec \u00b10.45% (93 runs sampled)\r\nz.string: invalid: null x 91,542 ops/sec \u00b13.58% (90 runs sampled)\r\nz.string: manual parser: long x 885,283,907 ops/sec \u00b11.77% (87 runs sampled)\r\nz.object: empty: valid x 1,650,805 ops/sec \u00b10.63% (95 runs sampled)\r\nz.object: empty: valid: extra keys x 1,525,619 ops/sec \u00b10.62% (94 runs sampled)\r\nz.object: empty: invalid: null x 90,888 ops/sec \u00b14.49% (90 runs sampled)\r\nz.object: short: valid x 1,107,392 ops/sec \u00b10.64% (92 runs sampled)\r\nz.object: short: valid: extra keys x 1,094,233 ops/sec \u00b10.49% (95 runs sampled)\r\nz.object: short: invalid: null x 96,996 ops/sec \u00b11.03% (94 runs sampled)\r\nz.object: long: valid x 507,361 ops/sec \u00b120.42% (94 runs sampled)\r\nz.object: long: valid: extra keys x 554,007 ops/sec \u00b10.54% (93 runs sampled)\r\nz.object: long: invalid: null x 96,142 ops/sec \u00b10.89% (94 runs sampled)\r\nz.union: double: valid: a x 280,189 ops/sec \u00b15.72% (93 runs sampled)\r\nz.union: double: valid: b x 284,643 ops/sec \u00b10.84% (92 runs sampled)\r\nz.union: double: invalid: null x 33,330 ops/sec \u00b11.10% (93 runs sampled)\r\nz.union: double: invalid: wrong shape x 30,885 ops/sec \u00b10.73% (93 runs sampled)\r\nz.union: many: valid: a x 132,640 ops/sec \u00b15.59% (94 runs sampled)\r\nz.union: many: valid: c x 136,428 ops/sec \u00b10.39% (94 runs sampled)\r\nz.union: many: invalid: null x 20,957 ops/sec \u00b10.61% (92 runs sampled)\r\nz.union: many: invalid: wrong shape x 18,856 ops/sec \u00b11.07% (91 runs sampled)\r\nz.discriminatedUnion: double: valid: a x 793,625 ops/sec \u00b15.48% (91 runs sampled)\r\nz.discriminatedUnion: double: valid: b x 819,445 ops/sec \u00b10.57% (94 runs sampled)\r\nz.discriminatedUnion: double: invalid: null x 90,611 ops/sec \u00b10.76% (94 runs sampled)\r\nz.discriminatedUnion: double: invalid: wrong shape x 82,642 ops/sec \u00b13.94% (90 runs sampled)\r\nz.discriminatedUnion: many: valid: a x 804,635 ops/sec \u00b10.83% (94 runs sampled)\r\nz.discriminatedUnion: many: valid: c x 810,716 ops/sec \u00b10.80% (94 runs sampled)\r\nz.discriminatedUnion: many: invalid: null x 89,417 ops/sec \u00b10.84% (94 runs sampled)\r\nz.discriminatedUnion: many: invalid: wrong shape x 79,459 ops/sec \u00b13.90% (93 runs sampled)\r\n\u2728  Done in 214.84s\r\n</pre>\r\n</details>",
        "html_url": "https://github.com/colinhacks/zod/pull/1025",
        "comments": [
          "Beautiful, looks great. While poking around this PR I saw a couple other easy wins that should help with the memory issue so tacked those on here.\r\n\r\n"
        ]
      },
      {
        "pr_number": 1025,
        "title": "Reduce memory churn, avoid generating ctx when not necessary, much faster valid primitives",
        "body": "Okay, last one of these, hope they aren't annoying \ud83d\ude06 \r\n\r\nSo, `._processInputParams` is called pretty uniformly throughout `types.ts`, but in many cases the `ctx` and `status` values it produces are never used, so they only contribute to overhead and memory churn. This PR defers calling processInputParams: in cases like numbers in which ctx is useful, it's generated lazily, only when necessary.\r\n\r\nCtx is totally still useful for collection types - unions, objects, arrays - so it is still used there. But at the leaf values like strings & numbers, deferring or avoiding creating context and parserstate objects adds up to very respectable gains \ud83d\udcaa\r\n\r\n- Strings: 2,572,767 ops/sec to 8,020,277 ops/sec\r\n- Literals: 2,764,958 ops/sec to 13,257,671 ops/sec\r\n- Enums: 3,023,900 to 25,570,525 ops/sec\r\n- Numbers: 2,151,291 to 6,242,437\r\n\r\nThese are just for the \"valid\" cases. Invalid results have stayed the same - we still generate a ctx when it's necessary.\r\n\r\n<details>\r\n<summary>Before</summary>\r\n<pre>\r\nyarn run v1.22.4\r\n$ ts-node src/benchmarks/index.ts\r\nz.enum: valid x 3,023,900 ops/sec \u00b10.50% (95 runs sampled)\r\nz.enum: invalid x 88,480 ops/sec \u00b11.33% (95 runs sampled)\r\nz.undefined: valid x 2,763,887 ops/sec \u00b10.67% (94 runs sampled)\r\nz.undefined: invalid x 92,613 ops/sec \u00b10.78% (95 runs sampled)\r\nz.literal: valid x 2,764,958 ops/sec \u00b10.65% (97 runs sampled)\r\nz.literal: invalid x 92,877 ops/sec \u00b10.62% (94 runs sampled)\r\nz.number: valid x 2,151,291 ops/sec \u00b119.28% (92 runs sampled)\r\nz.number: invalid type x 93,060 ops/sec \u00b10.71% (91 runs sampled)\r\nz.number: invalid number x 90,584 ops/sec \u00b10.62% (94 runs sampled)\r\nz.string: empty string x 2,298,812 ops/sec \u00b15.68% (91 runs sampled)\r\nz.string: short string x 2,350,511 ops/sec \u00b10.43% (94 runs sampled)\r\nz.string: long string x 2,338,882 ops/sec \u00b10.43% (95 runs sampled)\r\nz.string: invalid: null x 90,197 ops/sec \u00b14.11% (90 runs sampled)\r\nz.string: manual parser: long x 879,926,450 ops/sec \u00b11.59% (86 runs sampled)\r\nz.object: empty: valid x 1,689,127 ops/sec \u00b11.00% (94 runs sampled)\r\nz.object: empty: valid: extra keys x 1,603,788 ops/sec \u00b10.51% (94 runs sampled)\r\nz.object: empty: invalid: null x 90,512 ops/sec \u00b14.32% (91 runs sampled)\r\nz.object: short: valid x 829,616 ops/sec \u00b10.95% (95 runs sampled)\r\nz.object: short: valid: extra keys x 796,218 ops/sec \u00b10.48% (95 runs sampled)\r\nz.object: short: invalid: null x 90,538 ops/sec \u00b13.58% (94 runs sampled)\r\nz.object: long: valid x 416,655 ops/sec \u00b10.42% (95 runs sampled)\r\nz.object: long: valid: extra keys x 409,889 ops/sec \u00b10.33% (94 runs sampled)\r\nz.object: long: invalid: null x 92,829 ops/sec \u00b10.63% (94 runs sampled)\r\nz.union: double: valid: a x 258,928 ops/sec \u00b16.25% (89 runs sampled)\r\nz.union: double: valid: b x 266,564 ops/sec \u00b10.88% (93 runs sampled)\r\nz.union: double: invalid: null x 34,444 ops/sec \u00b10.55% (92 runs sampled)\r\nz.union: double: invalid: wrong shape x 31,241 ops/sec \u00b10.72% (96 runs sampled)\r\nz.union: many: valid: a x 125,748 ops/sec \u00b16.13% (89 runs sampled)\r\nz.union: many: valid: c x 130,767 ops/sec \u00b10.87% (96 runs sampled)\r\nz.union: many: invalid: null x 21,682 ops/sec \u00b10.54% (95 runs sampled)\r\nz.union: many: invalid: wrong shape x 19,372 ops/sec \u00b10.72% (93 runs sampled)\r\nz.discriminatedUnion: double: valid: a x 628,211 ops/sec \u00b14.38% (93 runs sampled)\r\nz.discriminatedUnion: double: valid: b x 649,602 ops/sec \u00b10.62% (93 runs sampled)\r\nz.discriminatedUnion: double: invalid: null x 88,935 ops/sec \u00b10.44% (97 runs sampled)\r\nz.discriminatedUnion: double: invalid: wrong shape x 79,578 ops/sec \u00b14.03% (90 runs sampled)\r\nz.discriminatedUnion: many: valid: a x 647,738 ops/sec \u00b10.57% (95 runs sampled)\r\nz.discriminatedUnion: many: valid: c x 635,873 ops/sec \u00b10.60% (94 runs sampled)\r\nz.discriminatedUnion: many: invalid: null x 89,762 ops/sec \u00b10.40% (95 runs sampled)\r\nz.discriminatedUnion: many: invalid: wrong shape x 77,317 ops/sec \u00b13.93% (91 runs sampled)\r\n\u2728  Done in 213.99s.\r\n</pre>\r\n</details>\r\n\r\n<details>\r\n<summary>After</summary>\r\n<pre>\r\nyarn run v1.22.4\r\n$ ts-node src/benchmarks/index.ts\r\nz.enum: valid x 25,570,525 ops/sec \u00b10.58% (96 runs sampled)\r\nz.enum: invalid x 88,718 ops/sec \u00b10.79% (95 runs sampled)\r\nz.undefined: valid x 9,202,311 ops/sec \u00b10.78% (95 runs sampled)\r\nz.undefined: invalid x 91,320 ops/sec \u00b10.77% (93 runs sampled)\r\nz.literal: valid x 13,257,671 ops/sec \u00b10.97% (92 runs sampled)\r\nz.literal: invalid x 91,489 ops/sec \u00b14.37% (91 runs sampled)\r\nz.number: valid x 6,242,437 ops/sec \u00b10.44% (93 runs sampled)\r\nz.number: invalid type x 91,081 ops/sec \u00b10.82% (94 runs sampled)\r\nz.number: invalid number x 89,370 ops/sec \u00b10.94% (94 runs sampled)\r\nz.string: empty string x 7,118,336 ops/sec \u00b15.52% (89 runs sampled)\r\nz.string: short string x 7,601,530 ops/sec \u00b11.06% (94 runs sampled)\r\nz.string: long string x 7,644,857 ops/sec \u00b10.45% (93 runs sampled)\r\nz.string: invalid: null x 91,542 ops/sec \u00b13.58% (90 runs sampled)\r\nz.string: manual parser: long x 885,283,907 ops/sec \u00b11.77% (87 runs sampled)\r\nz.object: empty: valid x 1,650,805 ops/sec \u00b10.63% (95 runs sampled)\r\nz.object: empty: valid: extra keys x 1,525,619 ops/sec \u00b10.62% (94 runs sampled)\r\nz.object: empty: invalid: null x 90,888 ops/sec \u00b14.49% (90 runs sampled)\r\nz.object: short: valid x 1,107,392 ops/sec \u00b10.64% (92 runs sampled)\r\nz.object: short: valid: extra keys x 1,094,233 ops/sec \u00b10.49% (95 runs sampled)\r\nz.object: short: invalid: null x 96,996 ops/sec \u00b11.03% (94 runs sampled)\r\nz.object: long: valid x 507,361 ops/sec \u00b120.42% (94 runs sampled)\r\nz.object: long: valid: extra keys x 554,007 ops/sec \u00b10.54% (93 runs sampled)\r\nz.object: long: invalid: null x 96,142 ops/sec \u00b10.89% (94 runs sampled)\r\nz.union: double: valid: a x 280,189 ops/sec \u00b15.72% (93 runs sampled)\r\nz.union: double: valid: b x 284,643 ops/sec \u00b10.84% (92 runs sampled)\r\nz.union: double: invalid: null x 33,330 ops/sec \u00b11.10% (93 runs sampled)\r\nz.union: double: invalid: wrong shape x 30,885 ops/sec \u00b10.73% (93 runs sampled)\r\nz.union: many: valid: a x 132,640 ops/sec \u00b15.59% (94 runs sampled)\r\nz.union: many: valid: c x 136,428 ops/sec \u00b10.39% (94 runs sampled)\r\nz.union: many: invalid: null x 20,957 ops/sec \u00b10.61% (92 runs sampled)\r\nz.union: many: invalid: wrong shape x 18,856 ops/sec \u00b11.07% (91 runs sampled)\r\nz.discriminatedUnion: double: valid: a x 793,625 ops/sec \u00b15.48% (91 runs sampled)\r\nz.discriminatedUnion: double: valid: b x 819,445 ops/sec \u00b10.57% (94 runs sampled)\r\nz.discriminatedUnion: double: invalid: null x 90,611 ops/sec \u00b10.76% (94 runs sampled)\r\nz.discriminatedUnion: double: invalid: wrong shape x 82,642 ops/sec \u00b13.94% (90 runs sampled)\r\nz.discriminatedUnion: many: valid: a x 804,635 ops/sec \u00b10.83% (94 runs sampled)\r\nz.discriminatedUnion: many: valid: c x 810,716 ops/sec \u00b10.80% (94 runs sampled)\r\nz.discriminatedUnion: many: invalid: null x 89,417 ops/sec \u00b10.84% (94 runs sampled)\r\nz.discriminatedUnion: many: invalid: wrong shape x 79,459 ops/sec \u00b13.90% (93 runs sampled)\r\n\u2728  Done in 214.84s\r\n</pre>\r\n</details>",
        "html_url": "https://github.com/colinhacks/zod/pull/1025",
        "comments": [
          "Beautiful, looks great. While poking around this PR I saw a couple other easy wins that should help with the memory issue so tacked those on here.\r\n\r\n"
        ]
      },
      {
        "pr_number": 1025,
        "title": "Reduce memory churn, avoid generating ctx when not necessary, much faster valid primitives",
        "body": "Okay, last one of these, hope they aren't annoying \ud83d\ude06 \r\n\r\nSo, `._processInputParams` is called pretty uniformly throughout `types.ts`, but in many cases the `ctx` and `status` values it produces are never used, so they only contribute to overhead and memory churn. This PR defers calling processInputParams: in cases like numbers in which ctx is useful, it's generated lazily, only when necessary.\r\n\r\nCtx is totally still useful for collection types - unions, objects, arrays - so it is still used there. But at the leaf values like strings & numbers, deferring or avoiding creating context and parserstate objects adds up to very respectable gains \ud83d\udcaa\r\n\r\n- Strings: 2,572,767 ops/sec to 8,020,277 ops/sec\r\n- Literals: 2,764,958 ops/sec to 13,257,671 ops/sec\r\n- Enums: 3,023,900 to 25,570,525 ops/sec\r\n- Numbers: 2,151,291 to 6,242,437\r\n\r\nThese are just for the \"valid\" cases. Invalid results have stayed the same - we still generate a ctx when it's necessary.\r\n\r\n<details>\r\n<summary>Before</summary>\r\n<pre>\r\nyarn run v1.22.4\r\n$ ts-node src/benchmarks/index.ts\r\nz.enum: valid x 3,023,900 ops/sec \u00b10.50% (95 runs sampled)\r\nz.enum: invalid x 88,480 ops/sec \u00b11.33% (95 runs sampled)\r\nz.undefined: valid x 2,763,887 ops/sec \u00b10.67% (94 runs sampled)\r\nz.undefined: invalid x 92,613 ops/sec \u00b10.78% (95 runs sampled)\r\nz.literal: valid x 2,764,958 ops/sec \u00b10.65% (97 runs sampled)\r\nz.literal: invalid x 92,877 ops/sec \u00b10.62% (94 runs sampled)\r\nz.number: valid x 2,151,291 ops/sec \u00b119.28% (92 runs sampled)\r\nz.number: invalid type x 93,060 ops/sec \u00b10.71% (91 runs sampled)\r\nz.number: invalid number x 90,584 ops/sec \u00b10.62% (94 runs sampled)\r\nz.string: empty string x 2,298,812 ops/sec \u00b15.68% (91 runs sampled)\r\nz.string: short string x 2,350,511 ops/sec \u00b10.43% (94 runs sampled)\r\nz.string: long string x 2,338,882 ops/sec \u00b10.43% (95 runs sampled)\r\nz.string: invalid: null x 90,197 ops/sec \u00b14.11% (90 runs sampled)\r\nz.string: manual parser: long x 879,926,450 ops/sec \u00b11.59% (86 runs sampled)\r\nz.object: empty: valid x 1,689,127 ops/sec \u00b11.00% (94 runs sampled)\r\nz.object: empty: valid: extra keys x 1,603,788 ops/sec \u00b10.51% (94 runs sampled)\r\nz.object: empty: invalid: null x 90,512 ops/sec \u00b14.32% (91 runs sampled)\r\nz.object: short: valid x 829,616 ops/sec \u00b10.95% (95 runs sampled)\r\nz.object: short: valid: extra keys x 796,218 ops/sec \u00b10.48% (95 runs sampled)\r\nz.object: short: invalid: null x 90,538 ops/sec \u00b13.58% (94 runs sampled)\r\nz.object: long: valid x 416,655 ops/sec \u00b10.42% (95 runs sampled)\r\nz.object: long: valid: extra keys x 409,889 ops/sec \u00b10.33% (94 runs sampled)\r\nz.object: long: invalid: null x 92,829 ops/sec \u00b10.63% (94 runs sampled)\r\nz.union: double: valid: a x 258,928 ops/sec \u00b16.25% (89 runs sampled)\r\nz.union: double: valid: b x 266,564 ops/sec \u00b10.88% (93 runs sampled)\r\nz.union: double: invalid: null x 34,444 ops/sec \u00b10.55% (92 runs sampled)\r\nz.union: double: invalid: wrong shape x 31,241 ops/sec \u00b10.72% (96 runs sampled)\r\nz.union: many: valid: a x 125,748 ops/sec \u00b16.13% (89 runs sampled)\r\nz.union: many: valid: c x 130,767 ops/sec \u00b10.87% (96 runs sampled)\r\nz.union: many: invalid: null x 21,682 ops/sec \u00b10.54% (95 runs sampled)\r\nz.union: many: invalid: wrong shape x 19,372 ops/sec \u00b10.72% (93 runs sampled)\r\nz.discriminatedUnion: double: valid: a x 628,211 ops/sec \u00b14.38% (93 runs sampled)\r\nz.discriminatedUnion: double: valid: b x 649,602 ops/sec \u00b10.62% (93 runs sampled)\r\nz.discriminatedUnion: double: invalid: null x 88,935 ops/sec \u00b10.44% (97 runs sampled)\r\nz.discriminatedUnion: double: invalid: wrong shape x 79,578 ops/sec \u00b14.03% (90 runs sampled)\r\nz.discriminatedUnion: many: valid: a x 647,738 ops/sec \u00b10.57% (95 runs sampled)\r\nz.discriminatedUnion: many: valid: c x 635,873 ops/sec \u00b10.60% (94 runs sampled)\r\nz.discriminatedUnion: many: invalid: null x 89,762 ops/sec \u00b10.40% (95 runs sampled)\r\nz.discriminatedUnion: many: invalid: wrong shape x 77,317 ops/sec \u00b13.93% (91 runs sampled)\r\n\u2728  Done in 213.99s.\r\n</pre>\r\n</details>\r\n\r\n<details>\r\n<summary>After</summary>\r\n<pre>\r\nyarn run v1.22.4\r\n$ ts-node src/benchmarks/index.ts\r\nz.enum: valid x 25,570,525 ops/sec \u00b10.58% (96 runs sampled)\r\nz.enum: invalid x 88,718 ops/sec \u00b10.79% (95 runs sampled)\r\nz.undefined: valid x 9,202,311 ops/sec \u00b10.78% (95 runs sampled)\r\nz.undefined: invalid x 91,320 ops/sec \u00b10.77% (93 runs sampled)\r\nz.literal: valid x 13,257,671 ops/sec \u00b10.97% (92 runs sampled)\r\nz.literal: invalid x 91,489 ops/sec \u00b14.37% (91 runs sampled)\r\nz.number: valid x 6,242,437 ops/sec \u00b10.44% (93 runs sampled)\r\nz.number: invalid type x 91,081 ops/sec \u00b10.82% (94 runs sampled)\r\nz.number: invalid number x 89,370 ops/sec \u00b10.94% (94 runs sampled)\r\nz.string: empty string x 7,118,336 ops/sec \u00b15.52% (89 runs sampled)\r\nz.string: short string x 7,601,530 ops/sec \u00b11.06% (94 runs sampled)\r\nz.string: long string x 7,644,857 ops/sec \u00b10.45% (93 runs sampled)\r\nz.string: invalid: null x 91,542 ops/sec \u00b13.58% (90 runs sampled)\r\nz.string: manual parser: long x 885,283,907 ops/sec \u00b11.77% (87 runs sampled)\r\nz.object: empty: valid x 1,650,805 ops/sec \u00b10.63% (95 runs sampled)\r\nz.object: empty: valid: extra keys x 1,525,619 ops/sec \u00b10.62% (94 runs sampled)\r\nz.object: empty: invalid: null x 90,888 ops/sec \u00b14.49% (90 runs sampled)\r\nz.object: short: valid x 1,107,392 ops/sec \u00b10.64% (92 runs sampled)\r\nz.object: short: valid: extra keys x 1,094,233 ops/sec \u00b10.49% (95 runs sampled)\r\nz.object: short: invalid: null x 96,996 ops/sec \u00b11.03% (94 runs sampled)\r\nz.object: long: valid x 507,361 ops/sec \u00b120.42% (94 runs sampled)\r\nz.object: long: valid: extra keys x 554,007 ops/sec \u00b10.54% (93 runs sampled)\r\nz.object: long: invalid: null x 96,142 ops/sec \u00b10.89% (94 runs sampled)\r\nz.union: double: valid: a x 280,189 ops/sec \u00b15.72% (93 runs sampled)\r\nz.union: double: valid: b x 284,643 ops/sec \u00b10.84% (92 runs sampled)\r\nz.union: double: invalid: null x 33,330 ops/sec \u00b11.10% (93 runs sampled)\r\nz.union: double: invalid: wrong shape x 30,885 ops/sec \u00b10.73% (93 runs sampled)\r\nz.union: many: valid: a x 132,640 ops/sec \u00b15.59% (94 runs sampled)\r\nz.union: many: valid: c x 136,428 ops/sec \u00b10.39% (94 runs sampled)\r\nz.union: many: invalid: null x 20,957 ops/sec \u00b10.61% (92 runs sampled)\r\nz.union: many: invalid: wrong shape x 18,856 ops/sec \u00b11.07% (91 runs sampled)\r\nz.discriminatedUnion: double: valid: a x 793,625 ops/sec \u00b15.48% (91 runs sampled)\r\nz.discriminatedUnion: double: valid: b x 819,445 ops/sec \u00b10.57% (94 runs sampled)\r\nz.discriminatedUnion: double: invalid: null x 90,611 ops/sec \u00b10.76% (94 runs sampled)\r\nz.discriminatedUnion: double: invalid: wrong shape x 82,642 ops/sec \u00b13.94% (90 runs sampled)\r\nz.discriminatedUnion: many: valid: a x 804,635 ops/sec \u00b10.83% (94 runs sampled)\r\nz.discriminatedUnion: many: valid: c x 810,716 ops/sec \u00b10.80% (94 runs sampled)\r\nz.discriminatedUnion: many: invalid: null x 89,417 ops/sec \u00b10.84% (94 runs sampled)\r\nz.discriminatedUnion: many: invalid: wrong shape x 79,459 ops/sec \u00b13.90% (93 runs sampled)\r\n\u2728  Done in 214.84s\r\n</pre>\r\n</details>",
        "html_url": "https://github.com/colinhacks/zod/pull/1025",
        "comments": [
          "Beautiful, looks great. While poking around this PR I saw a couple other easy wins that should help with the memory issue so tacked those on here.\r\n\r\n"
        ]
      }
    ],
    "v3.14.0": [
      {
        "pr_number": 1002,
        "title": "Add ZodDiscriminatedUnion to ZodFirstPartySchemaTypes",
        "body": "Is there a reason why `ZodDiscriminatedUnion`, which is a `ZodFirstPartyTypeKind`, isn't in the `ZodFirstPartySchemaTypes` union type? It seems like an oversight?",
        "html_url": "https://github.com/colinhacks/zod/pull/1002",
        "comments": ["Indeed. Thanks for the PR!"]
      },
      {
        "pr_number": 1003,
        "title": "Add react-zorm to \"Form integrations\" section",
        "body": "It would be really cool have this mentioned here \ud83d\ude4f ",
        "html_url": "https://github.com/colinhacks/zod/pull/1003",
        "comments": [
          "Happy to add! Great work with `react-zorm`, it's phenomenal \ud83e\udd19"
        ]
      },
      {
        "pr_number": 1011,
        "title": "Removed _coverpage.md",
        "body": "Removed Doc against issue [#1008](https://github.com/colinhacks/zod/issues/1008)\r\n\r\n**ISSUE**: Unnecessary Documentation in zod/docs. All links inside the documentation ( [_coverpage.md](https://github.com/colinhacks/zod/blob/master/docs/_coverpage.md)) have expired or lead to 404 not found page leaving it useless and occupy free space.\r\n\r\n**PROPOSED**: Removal of _coverpage.md documentation from the repository.",
        "html_url": "https://github.com/colinhacks/zod/pull/1011",
        "comments": []
      },
      {
        "pr_number": 1011,
        "title": "Removed _coverpage.md",
        "body": "Removed Doc against issue [#1008](https://github.com/colinhacks/zod/issues/1008)\r\n\r\n**ISSUE**: Unnecessary Documentation in zod/docs. All links inside the documentation ( [_coverpage.md](https://github.com/colinhacks/zod/blob/master/docs/_coverpage.md)) have expired or lead to 404 not found page leaving it useless and occupy free space.\r\n\r\n**PROPOSED**: Removal of _coverpage.md documentation from the repository.",
        "html_url": "https://github.com/colinhacks/zod/pull/1011",
        "comments": []
      },
      {
        "pr_number": 1012,
        "title": "Removed _navbar.md",
        "body": "Removed Doc against issue #1009\r\n\r\n**ISSUE**: Unnecessary Documentation in zod/docs. All links inside the documentation ( [_navbar.md](https://github.com/colinhacks/zod/blob/master/docs/_navbar.md)) have expired or lead to 404 not found page leaving it useless and occupy free space.\r\n\r\n**PROPOSED**: Removal of _navbar.md documentation from the repository.",
        "html_url": "https://github.com/colinhacks/zod/pull/1012",
        "comments": []
      },
      {
        "pr_number": 1013,
        "title": "Removed screencasts.md",
        "body": "Removed Doc against issue #1010\r\n\r\n**ISSUE**: Unnecessary Documentation in zod/docs. Documentation ( [screencasts.md](https://github.com/colinhacks/zod/blob/master/docs/screencasts.md)) contains random strings making no sense of its purpose.\r\n\r\n**PROPOSED**: Removal of screencasts.md documentation from the repository.",
        "html_url": "https://github.com/colinhacks/zod/pull/1013",
        "comments": []
      },
      {
        "pr_number": 1022,
        "title": "Performance - target es2018",
        "body": "So the current setup is that `zod` has a compile target of es5, which applies to both its ES Module and CJS distributions. Zod's internals use quite a lot of modern features. TypeScript is polyfilling all of those features in the distributed code. TypeScript's polyfills are very good and probably as fast as they can be, but they're not as fast as the native code. For example, every array or object spread and every generator gets compiled to something with a bit more indirection.\r\n\r\nThat indirection looks like it's costing a real slowdown for some Zod functions.\r\n\r\nSo, bumping the target to ES2018 would cost IE11 support if it was done uniformly. Assuming that IE11 support is still critical (that's for the maintainers to decide, not me), a possibility might be targeting es2018 in the module entrypoint and keeping es5 in the main.\r\n\r\nOkay, so before:\r\n\r\n```\r\n~/p/zod on es2018 [$!]\r\n130 % y benchmark\r\nyarn run v1.22.4\r\n$ ts-node src/benchmarks/index.ts\r\nz.string: empty string x 2,451,532 ops/sec \u00b10.87% (94 runs sampled)\r\nz.string: short string x 2,482,775 ops/sec \u00b10.45% (95 runs sampled)\r\nz.string: long string x 2,404,051 ops/sec \u00b11.38% (91 runs sampled)\r\nz.string: invalid: null x 89,502 ops/sec \u00b10.97% (89 runs sampled)\r\nz.string: manual parser: long x 874,138,478 ops/sec \u00b11.56% (87 runs sampled)\r\nz.object: empty: valid x 1,646,418 ops/sec \u00b15.48% (91 runs sampled)\r\nz.object: empty: valid: extra keys x 1,559,284 ops/sec \u00b10.80% (91 runs sampled)\r\nz.object: empty: invalid: null x 90,326 ops/sec \u00b10.92% (95 runs sampled)\r\nz.object: short: valid x 790,794 ops/sec \u00b10.94% (94 runs sampled)\r\nz.object: short: valid: extra keys x 763,664 ops/sec \u00b16.08% (90 runs sampled)\r\nz.object: short: invalid: null x 90,299 ops/sec \u00b10.63% (93 runs sampled)\r\nz.object: long: valid x 412,393 ops/sec \u00b10.45% (97 runs sampled)\r\nz.object: long: valid: extra keys x 391,355 ops/sec \u00b15.61% (92 runs sampled)\r\nz.object: long: invalid: null x 88,410 ops/sec \u00b10.95% (93 runs sampled)\r\nz.union: double: valid: a x 256,918 ops/sec \u00b10.60% (96 runs sampled)\r\nz.union: double: valid: b x 256,784 ops/sec \u00b10.39% (96 runs sampled)\r\nz.union: double: invalid: null x 28,961 ops/sec \u00b16.36% (84 runs sampled)\r\nz.union: double: invalid: wrong shape x 24,945 ops/sec \u00b16.41% (87 runs sampled)\r\nz.union: many: valid: a x 126,783 ops/sec \u00b10.55% (93 runs sampled)\r\nz.union: many: valid: c x 124,881 ops/sec \u00b11.09% (92 runs sampled)\r\nz.union: many: invalid: null x 16,535 ops/sec \u00b15.17% (86 runs sampled)\r\nz.union: many: invalid: wrong shape x 14,627 ops/sec \u00b16.94% (86 runs sampled)\r\nz.discriminatedUnion: double: valid: a x 667,578 ops/sec \u00b10.44% (96 runs sampled)\r\nz.discriminatedUnion: double: valid: b x 663,500 ops/sec \u00b10.54% (96 runs sampled)\r\nz.discriminatedUnion: double: invalid: null x 88,595 ops/sec \u00b10.85% (95 runs sampled)\r\nz.discriminatedUnion: double: invalid: wrong shape x 84,477 ops/sec \u00b10.62% (94 runs sampled)\r\nz.discriminatedUnion: many: valid: a x 660,361 ops/sec \u00b10.39% (92 runs sampled)\r\nz.discriminatedUnion: many: valid: c x 665,620 ops/sec \u00b10.84% (93 runs sampled)\r\nz.discriminatedUnion: many: invalid: null x 91,685 ops/sec \u00b10.70% (92 runs sampled)\r\nz.discriminatedUnion: many: invalid: wrong shape x 83,539 ops/sec \u00b10.67% (90 runs sampled)\r\n\u2728  Done in 164.98s.\r\n```\r\n\r\nAfter:\r\n\r\n```\r\n% y benchmark\r\nyarn run v1.22.4\r\n$ ts-node src/benchmarks/index.ts\r\nz.string: empty string x 7,456,311 ops/sec \u00b10.50% (94 runs sampled)\r\nz.string: short string x 7,294,686 ops/sec \u00b10.63% (94 runs sampled)\r\nz.string: long string x 7,267,118 ops/sec \u00b10.74% (92 runs sampled)\r\nz.string: invalid: null x 68,995 ops/sec \u00b13.45% (90 runs sampled)\r\nz.string: manual parser: long x 873,026,560 ops/sec \u00b11.81% (86 runs sampled)\r\nz.object: empty: valid x 3,947,137 ops/sec \u00b10.54% (95 runs sampled)\r\nz.object: empty: valid: extra keys x 3,381,157 ops/sec \u00b10.55% (93 runs sampled)\r\nz.object: empty: invalid: null x 68,712 ops/sec \u00b10.78% (95 runs sampled)\r\nz.object: short: valid x 1,699,620 ops/sec \u00b130.55% (93 runs sampled)\r\nz.object: short: valid: extra keys x 1,940,140 ops/sec \u00b10.82% (94 runs sampled)\r\nz.object: short: invalid: null x 69,124 ops/sec \u00b10.47% (94 runs sampled)\r\nz.object: long: valid x 899,629 ops/sec \u00b10.53% (94 runs sampled)\r\nz.object: long: valid: extra keys x 839,770 ops/sec \u00b10.77% (95 runs sampled)\r\nz.object: long: invalid: null x 67,109 ops/sec \u00b13.32% (92 runs sampled)\r\nz.union: double: valid: a x 177,326 ops/sec \u00b16.18% (90 runs sampled)\r\nz.union: double: valid: b x 175,326 ops/sec \u00b15.59% (86 runs sampled)\r\nz.union: double: invalid: null x 23,836 ops/sec \u00b13.96% (89 runs sampled)\r\nz.union: double: invalid: wrong shape x 23,462 ops/sec \u00b10.86% (92 runs sampled)\r\nz.union: many: valid: a x 72,148 ops/sec \u00b16.87% (86 runs sampled)\r\nz.union: many: valid: c x 75,365 ops/sec \u00b14.36% (92 runs sampled)\r\nz.union: many: invalid: null x 14,744 ops/sec \u00b13.83% (89 runs sampled)\r\nz.union: many: invalid: wrong shape x 14,380 ops/sec \u00b10.62% (93 runs sampled)\r\nz.discriminatedUnion: double: valid: a x 730,682 ops/sec \u00b10.42% (96 runs sampled)\r\nz.discriminatedUnion: double: valid: b x 723,743 ops/sec \u00b10.39% (95 runs sampled)\r\nz.discriminatedUnion: double: invalid: null x 61,431 ops/sec \u00b13.81% (90 runs sampled)\r\nz.discriminatedUnion: double: invalid: wrong shape x 69,464 ops/sec \u00b10.82% (93 runs sampled)\r\nz.discriminatedUnion: many: valid: a x 730,148 ops/sec \u00b10.74% (96 runs sampled)\r\nz.discriminatedUnion: many: valid: c x 732,561 ops/sec \u00b10.55% (94 runs sampled)\r\nz.discriminatedUnion: many: invalid: null x 65,482 ops/sec \u00b10.64% (94 runs sampled)\r\nz.discriminatedUnion: many: invalid: wrong shape x 69,293 ops/sec \u00b10.47% (93 runs sampled)\r\n\u2728  Done in 165.41s.\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/1022",
        "comments": [
          "I ran a diff and basically the only difference is that `es2018` no longer transpiles the spread operator to `Object.assign`s under the hood. Guess the spread can be faster in some cases...kinda surprising. \r\n\r\nIE11 support isn't a priority and a 2x speed improvement is hard to turn down. Merging.",
          "So no ie11 anymore? ",
          "@syabro you can either use an older version, or transpile it down to es5. Not a big deal"
        ]
      },
      {
        "pr_number": 1023,
        "title": "Remove typeCache",
        "body": "So, zod has a `typeCache` internally that looks at every single value it passes and stores it in a map with its derived type. My assertion is that this method is mostly overhead and in the majority of cases makes things slower, not faster.\r\n\r\n- In real-world data, you'll see a lot of unique values. For example, in my application, I'm running zod on data with coordinate values. So every single floating point coordinate gets pushed into this Map, it gets bigger, and becomes more of an issue.\r\n- In tiny datasets, you never benefit from the cache, hence the benchmarks below.\r\n- The work saved by this cache is often _tiny_: you're making a bet that running `Map#get` and `Map#set` is _faster_ than running `typeof`. I think in most JavaScript engines, typeof is actually faster than a Map lookup & set.\r\n\r\nI would like to try and make a better 'real world' benchmark because the current benchmarks are so 'micro' and use the same data - I think that the bench improvement here is demonstrating how typeCache makes zod slower on first pass, but there's more to be said about how these features interact when you're dealing with an array of objects of strings, in which case you have a lot of `._parse` calls.\r\n\r\nOkay, so before & after:\r\n\r\n```\r\n% y benchmark\r\nyarn run v1.22.4\r\n$ ts-node src/benchmarks/index.ts\r\nz.string: empty string x 2,497,402 ops/sec \u00b10.46% (95 runs sampled)\r\nz.string: short string x 2,485,095 ops/sec \u00b10.63% (93 runs sampled)\r\nz.string: long string x 2,489,445 ops/sec \u00b10.60% (93 runs sampled)\r\nz.string: invalid: null x 89,193 ops/sec \u00b10.86% (95 runs sampled)\r\nz.string: manual parser: long x 863,177,981 ops/sec \u00b11.72% (84 runs sampled)\r\nz.object: empty: valid x 1,637,222 ops/sec \u00b16.03% (89 runs sampled)\r\nz.object: empty: valid: extra keys x 1,496,710 ops/sec \u00b10.54% (92 runs sampled)\r\nz.object: empty: invalid: null x 90,253 ops/sec \u00b10.65% (96 runs sampled)\r\nz.object: short: valid x 802,009 ops/sec \u00b10.47% (93 runs sampled)\r\nz.object: short: valid: extra keys x 763,453 ops/sec \u00b16.04% (91 runs sampled)\r\nz.object: short: invalid: null x 89,108 ops/sec \u00b11.44% (90 runs sampled)\r\nz.object: long: valid x 412,287 ops/sec \u00b11.97% (91 runs sampled)\r\nz.object: long: valid: extra keys x 400,272 ops/sec \u00b15.71% (89 runs sampled)\r\nz.object: long: invalid: null x 89,423 ops/sec \u00b10.47% (95 runs sampled)\r\nz.union: double: valid: a x 270,721 ops/sec \u00b10.42% (93 runs sampled)\r\nz.union: double: valid: b x 266,943 ops/sec \u00b10.85% (96 runs sampled)\r\nz.union: double: invalid: null x 28,386 ops/sec \u00b16.73% (79 runs sampled)\r\nz.union: double: invalid: wrong shape x 25,265 ops/sec \u00b15.17% (84 runs sampled)\r\nz.union: many: valid: a x 131,675 ops/sec \u00b10.42% (92 runs sampled)\r\nz.union: many: valid: c x 130,832 ops/sec \u00b10.58% (94 runs sampled)\r\nz.union: many: invalid: null x 16,373 ops/sec \u00b17.35% (83 runs sampled)\r\nz.union: many: invalid: wrong shape x 15,525 ops/sec \u00b15.16% (86 runs sampled)\r\nz.discriminatedUnion: double: valid: a x 708,001 ops/sec \u00b10.63% (96 runs sampled)\r\nz.discriminatedUnion: double: valid: b x 699,173 ops/sec \u00b10.59% (92 runs sampled)\r\nz.discriminatedUnion: double: invalid: null x 94,834 ops/sec \u00b10.85% (89 runs sampled)\r\nz.discriminatedUnion: double: invalid: wrong shape x 89,306 ops/sec \u00b11.06% (90 runs sampled)\r\nz.discriminatedUnion: many: valid: a x 695,504 ops/sec \u00b11.11% (92 runs sampled)\r\nz.discriminatedUnion: many: valid: c x 703,268 ops/sec \u00b10.64% (95 runs sampled)\r\nz.discriminatedUnion: many: invalid: null x 95,817 ops/sec \u00b10.58% (91 runs sampled)\r\nz.discriminatedUnion: many: invalid: wrong shape x 86,274 ops/sec \u00b10.45% (91 runs sampled)\r\n\u2728  Done in 165.58s.\r\n```\r\n\r\nAfter:\r\n\r\n```\r\nyarn run v1.22.4\r\n$ ts-node src/benchmarks/index.ts\r\nz.string: empty string x 3,260,177 ops/sec \u00b10.46% (96 runs sampled)\r\nz.string: short string x 3,270,906 ops/sec \u00b10.57% (97 runs sampled)\r\nz.string: long string x 3,284,191 ops/sec \u00b10.74% (95 runs sampled)\r\nz.string: invalid: null x 96,424 ops/sec \u00b10.54% (95 runs sampled)\r\nz.string: manual parser: long x 865,293,767 ops/sec \u00b11.04% (83 runs sampled)\r\nz.object: empty: valid x 2,339,908 ops/sec \u00b10.50% (93 runs sampled)\r\nz.object: empty: valid: extra keys x 2,084,512 ops/sec \u00b10.48% (92 runs sampled)\r\nz.object: empty: invalid: null x 96,100 ops/sec \u00b10.67% (96 runs sampled)\r\nz.object: short: valid x 1,041,623 ops/sec \u00b10.89% (93 runs sampled)\r\nz.object: short: valid: extra keys x 1,024,063 ops/sec \u00b10.69% (93 runs sampled)\r\nz.object: short: invalid: null x 93,605 ops/sec \u00b13.06% (92 runs sampled)\r\nz.object: long: valid x 435,189 ops/sec \u00b10.64% (93 runs sampled)\r\nz.object: long: valid: extra keys x 431,583 ops/sec \u00b10.60% (91 runs sampled)\r\nz.object: long: invalid: null x 95,660 ops/sec \u00b13.05% (89 runs sampled)\r\nz.union: double: valid: a x 286,175 ops/sec \u00b10.51% (96 runs sampled)\r\nz.union: double: valid: b x 282,846 ops/sec \u00b10.51% (96 runs sampled)\r\nz.union: double: invalid: null x 34,700 ops/sec \u00b10.67% (95 runs sampled)\r\nz.union: double: invalid: wrong shape x 26,512 ops/sec \u00b15.37% (80 runs sampled)\r\nz.union: many: valid: a x 141,332 ops/sec \u00b10.57% (95 runs sampled)\r\nz.union: many: valid: c x 137,993 ops/sec \u00b11.11% (92 runs sampled)\r\nz.union: many: invalid: null x 16,728 ops/sec \u00b15.38% (87 runs sampled)\r\nz.union: many: invalid: wrong shape x 15,319 ops/sec \u00b15.55% (88 runs sampled)\r\nz.discriminatedUnion: double: valid: a x 760,234 ops/sec \u00b10.42% (97 runs sampled)\r\nz.discriminatedUnion: double: valid: b x 765,007 ops/sec \u00b10.36% (97 runs sampled)\r\nz.discriminatedUnion: double: invalid: null x 92,345 ops/sec \u00b10.92% (93 runs sampled)\r\nz.discriminatedUnion: double: invalid: wrong shape x 87,265 ops/sec \u00b11.59% (91 runs sampled)\r\nz.discriminatedUnion: many: valid: a x 715,942 ops/sec \u00b10.56% (95 runs sampled)\r\nz.discriminatedUnion: many: valid: c x 714,360 ops/sec \u00b10.74% (95 runs sampled)\r\nz.discriminatedUnion: many: invalid: null x 94,706 ops/sec \u00b11.36% (93 runs sampled)\r\nz.discriminatedUnion: many: invalid: wrong shape x 85,427 ops/sec \u00b11.42% (92 runs sampled)\r\n\u2728  Done in 164.53s.\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/1023",
        "comments": [
          "So my cache made everything slower. Well done self. \r\n\r\nI'm convinced, PR looks great, merging."
        ]
      },
      {
        "pr_number": 1024,
        "title": "Add realworld benchmark",
        "body": "This PR exists to complement / gut-check the work in #1023 - the `typeCache` would make the realworld benchmark faster if it was a net win, because it would replace some `typeof` checks with a map lookup. This benchmark confirms that removing typeCache is about 10% faster in my testing, even if there are repeated values in the dataset.",
        "html_url": "https://github.com/colinhacks/zod/pull/1024",
        "comments": []
      },
      {
        "pr_number": 1024,
        "title": "Add realworld benchmark",
        "body": "This PR exists to complement / gut-check the work in #1023 - the `typeCache` would make the realworld benchmark faster if it was a net win, because it would replace some `typeof` checks with a map lookup. This benchmark confirms that removing typeCache is about 10% faster in my testing, even if there are repeated values in the dataset.",
        "html_url": "https://github.com/colinhacks/zod/pull/1024",
        "comments": []
      },
      {
        "pr_number": 1013,
        "title": "Removed screencasts.md",
        "body": "Removed Doc against issue #1010\r\n\r\n**ISSUE**: Unnecessary Documentation in zod/docs. Documentation ( [screencasts.md](https://github.com/colinhacks/zod/blob/master/docs/screencasts.md)) contains random strings making no sense of its purpose.\r\n\r\n**PROPOSED**: Removal of screencasts.md documentation from the repository.",
        "html_url": "https://github.com/colinhacks/zod/pull/1013",
        "comments": []
      },
      {
        "pr_number": 1012,
        "title": "Removed _navbar.md",
        "body": "Removed Doc against issue #1009\r\n\r\n**ISSUE**: Unnecessary Documentation in zod/docs. All links inside the documentation ( [_navbar.md](https://github.com/colinhacks/zod/blob/master/docs/_navbar.md)) have expired or lead to 404 not found page leaving it useless and occupy free space.\r\n\r\n**PROPOSED**: Removal of _navbar.md documentation from the repository.",
        "html_url": "https://github.com/colinhacks/zod/pull/1012",
        "comments": []
      },
      {
        "pr_number": 1011,
        "title": "Removed _coverpage.md",
        "body": "Removed Doc against issue [#1008](https://github.com/colinhacks/zod/issues/1008)\r\n\r\n**ISSUE**: Unnecessary Documentation in zod/docs. All links inside the documentation ( [_coverpage.md](https://github.com/colinhacks/zod/blob/master/docs/_coverpage.md)) have expired or lead to 404 not found page leaving it useless and occupy free space.\r\n\r\n**PROPOSED**: Removal of _coverpage.md documentation from the repository.",
        "html_url": "https://github.com/colinhacks/zod/pull/1011",
        "comments": []
      },
      {
        "pr_number": 1003,
        "title": "Add react-zorm to \"Form integrations\" section",
        "body": "It would be really cool have this mentioned here \ud83d\ude4f ",
        "html_url": "https://github.com/colinhacks/zod/pull/1003",
        "comments": [
          "Happy to add! Great work with `react-zorm`, it's phenomenal \ud83e\udd19"
        ]
      },
      {
        "pr_number": 1003,
        "title": "Add react-zorm to \"Form integrations\" section",
        "body": "It would be really cool have this mentioned here \ud83d\ude4f ",
        "html_url": "https://github.com/colinhacks/zod/pull/1003",
        "comments": [
          "Happy to add! Great work with `react-zorm`, it's phenomenal \ud83e\udd19"
        ]
      },
      {
        "pr_number": 1002,
        "title": "Add ZodDiscriminatedUnion to ZodFirstPartySchemaTypes",
        "body": "Is there a reason why `ZodDiscriminatedUnion`, which is a `ZodFirstPartyTypeKind`, isn't in the `ZodFirstPartySchemaTypes` union type? It seems like an oversight?",
        "html_url": "https://github.com/colinhacks/zod/pull/1002",
        "comments": ["Indeed. Thanks for the PR!"]
      },
      {
        "pr_number": 1023,
        "title": "Remove typeCache",
        "body": "So, zod has a `typeCache` internally that looks at every single value it passes and stores it in a map with its derived type. My assertion is that this method is mostly overhead and in the majority of cases makes things slower, not faster.\r\n\r\n- In real-world data, you'll see a lot of unique values. For example, in my application, I'm running zod on data with coordinate values. So every single floating point coordinate gets pushed into this Map, it gets bigger, and becomes more of an issue.\r\n- In tiny datasets, you never benefit from the cache, hence the benchmarks below.\r\n- The work saved by this cache is often _tiny_: you're making a bet that running `Map#get` and `Map#set` is _faster_ than running `typeof`. I think in most JavaScript engines, typeof is actually faster than a Map lookup & set.\r\n\r\nI would like to try and make a better 'real world' benchmark because the current benchmarks are so 'micro' and use the same data - I think that the bench improvement here is demonstrating how typeCache makes zod slower on first pass, but there's more to be said about how these features interact when you're dealing with an array of objects of strings, in which case you have a lot of `._parse` calls.\r\n\r\nOkay, so before & after:\r\n\r\n```\r\n% y benchmark\r\nyarn run v1.22.4\r\n$ ts-node src/benchmarks/index.ts\r\nz.string: empty string x 2,497,402 ops/sec \u00b10.46% (95 runs sampled)\r\nz.string: short string x 2,485,095 ops/sec \u00b10.63% (93 runs sampled)\r\nz.string: long string x 2,489,445 ops/sec \u00b10.60% (93 runs sampled)\r\nz.string: invalid: null x 89,193 ops/sec \u00b10.86% (95 runs sampled)\r\nz.string: manual parser: long x 863,177,981 ops/sec \u00b11.72% (84 runs sampled)\r\nz.object: empty: valid x 1,637,222 ops/sec \u00b16.03% (89 runs sampled)\r\nz.object: empty: valid: extra keys x 1,496,710 ops/sec \u00b10.54% (92 runs sampled)\r\nz.object: empty: invalid: null x 90,253 ops/sec \u00b10.65% (96 runs sampled)\r\nz.object: short: valid x 802,009 ops/sec \u00b10.47% (93 runs sampled)\r\nz.object: short: valid: extra keys x 763,453 ops/sec \u00b16.04% (91 runs sampled)\r\nz.object: short: invalid: null x 89,108 ops/sec \u00b11.44% (90 runs sampled)\r\nz.object: long: valid x 412,287 ops/sec \u00b11.97% (91 runs sampled)\r\nz.object: long: valid: extra keys x 400,272 ops/sec \u00b15.71% (89 runs sampled)\r\nz.object: long: invalid: null x 89,423 ops/sec \u00b10.47% (95 runs sampled)\r\nz.union: double: valid: a x 270,721 ops/sec \u00b10.42% (93 runs sampled)\r\nz.union: double: valid: b x 266,943 ops/sec \u00b10.85% (96 runs sampled)\r\nz.union: double: invalid: null x 28,386 ops/sec \u00b16.73% (79 runs sampled)\r\nz.union: double: invalid: wrong shape x 25,265 ops/sec \u00b15.17% (84 runs sampled)\r\nz.union: many: valid: a x 131,675 ops/sec \u00b10.42% (92 runs sampled)\r\nz.union: many: valid: c x 130,832 ops/sec \u00b10.58% (94 runs sampled)\r\nz.union: many: invalid: null x 16,373 ops/sec \u00b17.35% (83 runs sampled)\r\nz.union: many: invalid: wrong shape x 15,525 ops/sec \u00b15.16% (86 runs sampled)\r\nz.discriminatedUnion: double: valid: a x 708,001 ops/sec \u00b10.63% (96 runs sampled)\r\nz.discriminatedUnion: double: valid: b x 699,173 ops/sec \u00b10.59% (92 runs sampled)\r\nz.discriminatedUnion: double: invalid: null x 94,834 ops/sec \u00b10.85% (89 runs sampled)\r\nz.discriminatedUnion: double: invalid: wrong shape x 89,306 ops/sec \u00b11.06% (90 runs sampled)\r\nz.discriminatedUnion: many: valid: a x 695,504 ops/sec \u00b11.11% (92 runs sampled)\r\nz.discriminatedUnion: many: valid: c x 703,268 ops/sec \u00b10.64% (95 runs sampled)\r\nz.discriminatedUnion: many: invalid: null x 95,817 ops/sec \u00b10.58% (91 runs sampled)\r\nz.discriminatedUnion: many: invalid: wrong shape x 86,274 ops/sec \u00b10.45% (91 runs sampled)\r\n\u2728  Done in 165.58s.\r\n```\r\n\r\nAfter:\r\n\r\n```\r\nyarn run v1.22.4\r\n$ ts-node src/benchmarks/index.ts\r\nz.string: empty string x 3,260,177 ops/sec \u00b10.46% (96 runs sampled)\r\nz.string: short string x 3,270,906 ops/sec \u00b10.57% (97 runs sampled)\r\nz.string: long string x 3,284,191 ops/sec \u00b10.74% (95 runs sampled)\r\nz.string: invalid: null x 96,424 ops/sec \u00b10.54% (95 runs sampled)\r\nz.string: manual parser: long x 865,293,767 ops/sec \u00b11.04% (83 runs sampled)\r\nz.object: empty: valid x 2,339,908 ops/sec \u00b10.50% (93 runs sampled)\r\nz.object: empty: valid: extra keys x 2,084,512 ops/sec \u00b10.48% (92 runs sampled)\r\nz.object: empty: invalid: null x 96,100 ops/sec \u00b10.67% (96 runs sampled)\r\nz.object: short: valid x 1,041,623 ops/sec \u00b10.89% (93 runs sampled)\r\nz.object: short: valid: extra keys x 1,024,063 ops/sec \u00b10.69% (93 runs sampled)\r\nz.object: short: invalid: null x 93,605 ops/sec \u00b13.06% (92 runs sampled)\r\nz.object: long: valid x 435,189 ops/sec \u00b10.64% (93 runs sampled)\r\nz.object: long: valid: extra keys x 431,583 ops/sec \u00b10.60% (91 runs sampled)\r\nz.object: long: invalid: null x 95,660 ops/sec \u00b13.05% (89 runs sampled)\r\nz.union: double: valid: a x 286,175 ops/sec \u00b10.51% (96 runs sampled)\r\nz.union: double: valid: b x 282,846 ops/sec \u00b10.51% (96 runs sampled)\r\nz.union: double: invalid: null x 34,700 ops/sec \u00b10.67% (95 runs sampled)\r\nz.union: double: invalid: wrong shape x 26,512 ops/sec \u00b15.37% (80 runs sampled)\r\nz.union: many: valid: a x 141,332 ops/sec \u00b10.57% (95 runs sampled)\r\nz.union: many: valid: c x 137,993 ops/sec \u00b11.11% (92 runs sampled)\r\nz.union: many: invalid: null x 16,728 ops/sec \u00b15.38% (87 runs sampled)\r\nz.union: many: invalid: wrong shape x 15,319 ops/sec \u00b15.55% (88 runs sampled)\r\nz.discriminatedUnion: double: valid: a x 760,234 ops/sec \u00b10.42% (97 runs sampled)\r\nz.discriminatedUnion: double: valid: b x 765,007 ops/sec \u00b10.36% (97 runs sampled)\r\nz.discriminatedUnion: double: invalid: null x 92,345 ops/sec \u00b10.92% (93 runs sampled)\r\nz.discriminatedUnion: double: invalid: wrong shape x 87,265 ops/sec \u00b11.59% (91 runs sampled)\r\nz.discriminatedUnion: many: valid: a x 715,942 ops/sec \u00b10.56% (95 runs sampled)\r\nz.discriminatedUnion: many: valid: c x 714,360 ops/sec \u00b10.74% (95 runs sampled)\r\nz.discriminatedUnion: many: invalid: null x 94,706 ops/sec \u00b11.36% (93 runs sampled)\r\nz.discriminatedUnion: many: invalid: wrong shape x 85,427 ops/sec \u00b11.42% (92 runs sampled)\r\n\u2728  Done in 164.53s.\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/1023",
        "comments": [
          "So my cache made everything slower. Well done self. \r\n\r\nI'm convinced, PR looks great, merging."
        ]
      },
      {
        "pr_number": 1022,
        "title": "Performance - target es2018",
        "body": "So the current setup is that `zod` has a compile target of es5, which applies to both its ES Module and CJS distributions. Zod's internals use quite a lot of modern features. TypeScript is polyfilling all of those features in the distributed code. TypeScript's polyfills are very good and probably as fast as they can be, but they're not as fast as the native code. For example, every array or object spread and every generator gets compiled to something with a bit more indirection.\r\n\r\nThat indirection looks like it's costing a real slowdown for some Zod functions.\r\n\r\nSo, bumping the target to ES2018 would cost IE11 support if it was done uniformly. Assuming that IE11 support is still critical (that's for the maintainers to decide, not me), a possibility might be targeting es2018 in the module entrypoint and keeping es5 in the main.\r\n\r\nOkay, so before:\r\n\r\n```\r\n~/p/zod on es2018 [$!]\r\n130 % y benchmark\r\nyarn run v1.22.4\r\n$ ts-node src/benchmarks/index.ts\r\nz.string: empty string x 2,451,532 ops/sec \u00b10.87% (94 runs sampled)\r\nz.string: short string x 2,482,775 ops/sec \u00b10.45% (95 runs sampled)\r\nz.string: long string x 2,404,051 ops/sec \u00b11.38% (91 runs sampled)\r\nz.string: invalid: null x 89,502 ops/sec \u00b10.97% (89 runs sampled)\r\nz.string: manual parser: long x 874,138,478 ops/sec \u00b11.56% (87 runs sampled)\r\nz.object: empty: valid x 1,646,418 ops/sec \u00b15.48% (91 runs sampled)\r\nz.object: empty: valid: extra keys x 1,559,284 ops/sec \u00b10.80% (91 runs sampled)\r\nz.object: empty: invalid: null x 90,326 ops/sec \u00b10.92% (95 runs sampled)\r\nz.object: short: valid x 790,794 ops/sec \u00b10.94% (94 runs sampled)\r\nz.object: short: valid: extra keys x 763,664 ops/sec \u00b16.08% (90 runs sampled)\r\nz.object: short: invalid: null x 90,299 ops/sec \u00b10.63% (93 runs sampled)\r\nz.object: long: valid x 412,393 ops/sec \u00b10.45% (97 runs sampled)\r\nz.object: long: valid: extra keys x 391,355 ops/sec \u00b15.61% (92 runs sampled)\r\nz.object: long: invalid: null x 88,410 ops/sec \u00b10.95% (93 runs sampled)\r\nz.union: double: valid: a x 256,918 ops/sec \u00b10.60% (96 runs sampled)\r\nz.union: double: valid: b x 256,784 ops/sec \u00b10.39% (96 runs sampled)\r\nz.union: double: invalid: null x 28,961 ops/sec \u00b16.36% (84 runs sampled)\r\nz.union: double: invalid: wrong shape x 24,945 ops/sec \u00b16.41% (87 runs sampled)\r\nz.union: many: valid: a x 126,783 ops/sec \u00b10.55% (93 runs sampled)\r\nz.union: many: valid: c x 124,881 ops/sec \u00b11.09% (92 runs sampled)\r\nz.union: many: invalid: null x 16,535 ops/sec \u00b15.17% (86 runs sampled)\r\nz.union: many: invalid: wrong shape x 14,627 ops/sec \u00b16.94% (86 runs sampled)\r\nz.discriminatedUnion: double: valid: a x 667,578 ops/sec \u00b10.44% (96 runs sampled)\r\nz.discriminatedUnion: double: valid: b x 663,500 ops/sec \u00b10.54% (96 runs sampled)\r\nz.discriminatedUnion: double: invalid: null x 88,595 ops/sec \u00b10.85% (95 runs sampled)\r\nz.discriminatedUnion: double: invalid: wrong shape x 84,477 ops/sec \u00b10.62% (94 runs sampled)\r\nz.discriminatedUnion: many: valid: a x 660,361 ops/sec \u00b10.39% (92 runs sampled)\r\nz.discriminatedUnion: many: valid: c x 665,620 ops/sec \u00b10.84% (93 runs sampled)\r\nz.discriminatedUnion: many: invalid: null x 91,685 ops/sec \u00b10.70% (92 runs sampled)\r\nz.discriminatedUnion: many: invalid: wrong shape x 83,539 ops/sec \u00b10.67% (90 runs sampled)\r\n\u2728  Done in 164.98s.\r\n```\r\n\r\nAfter:\r\n\r\n```\r\n% y benchmark\r\nyarn run v1.22.4\r\n$ ts-node src/benchmarks/index.ts\r\nz.string: empty string x 7,456,311 ops/sec \u00b10.50% (94 runs sampled)\r\nz.string: short string x 7,294,686 ops/sec \u00b10.63% (94 runs sampled)\r\nz.string: long string x 7,267,118 ops/sec \u00b10.74% (92 runs sampled)\r\nz.string: invalid: null x 68,995 ops/sec \u00b13.45% (90 runs sampled)\r\nz.string: manual parser: long x 873,026,560 ops/sec \u00b11.81% (86 runs sampled)\r\nz.object: empty: valid x 3,947,137 ops/sec \u00b10.54% (95 runs sampled)\r\nz.object: empty: valid: extra keys x 3,381,157 ops/sec \u00b10.55% (93 runs sampled)\r\nz.object: empty: invalid: null x 68,712 ops/sec \u00b10.78% (95 runs sampled)\r\nz.object: short: valid x 1,699,620 ops/sec \u00b130.55% (93 runs sampled)\r\nz.object: short: valid: extra keys x 1,940,140 ops/sec \u00b10.82% (94 runs sampled)\r\nz.object: short: invalid: null x 69,124 ops/sec \u00b10.47% (94 runs sampled)\r\nz.object: long: valid x 899,629 ops/sec \u00b10.53% (94 runs sampled)\r\nz.object: long: valid: extra keys x 839,770 ops/sec \u00b10.77% (95 runs sampled)\r\nz.object: long: invalid: null x 67,109 ops/sec \u00b13.32% (92 runs sampled)\r\nz.union: double: valid: a x 177,326 ops/sec \u00b16.18% (90 runs sampled)\r\nz.union: double: valid: b x 175,326 ops/sec \u00b15.59% (86 runs sampled)\r\nz.union: double: invalid: null x 23,836 ops/sec \u00b13.96% (89 runs sampled)\r\nz.union: double: invalid: wrong shape x 23,462 ops/sec \u00b10.86% (92 runs sampled)\r\nz.union: many: valid: a x 72,148 ops/sec \u00b16.87% (86 runs sampled)\r\nz.union: many: valid: c x 75,365 ops/sec \u00b14.36% (92 runs sampled)\r\nz.union: many: invalid: null x 14,744 ops/sec \u00b13.83% (89 runs sampled)\r\nz.union: many: invalid: wrong shape x 14,380 ops/sec \u00b10.62% (93 runs sampled)\r\nz.discriminatedUnion: double: valid: a x 730,682 ops/sec \u00b10.42% (96 runs sampled)\r\nz.discriminatedUnion: double: valid: b x 723,743 ops/sec \u00b10.39% (95 runs sampled)\r\nz.discriminatedUnion: double: invalid: null x 61,431 ops/sec \u00b13.81% (90 runs sampled)\r\nz.discriminatedUnion: double: invalid: wrong shape x 69,464 ops/sec \u00b10.82% (93 runs sampled)\r\nz.discriminatedUnion: many: valid: a x 730,148 ops/sec \u00b10.74% (96 runs sampled)\r\nz.discriminatedUnion: many: valid: c x 732,561 ops/sec \u00b10.55% (94 runs sampled)\r\nz.discriminatedUnion: many: invalid: null x 65,482 ops/sec \u00b10.64% (94 runs sampled)\r\nz.discriminatedUnion: many: invalid: wrong shape x 69,293 ops/sec \u00b10.47% (93 runs sampled)\r\n\u2728  Done in 165.41s.\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/1022",
        "comments": [
          "I ran a diff and basically the only difference is that `es2018` no longer transpiles the spread operator to `Object.assign`s under the hood. Guess the spread can be faster in some cases...kinda surprising. \r\n\r\nIE11 support isn't a priority and a 2x speed improvement is hard to turn down. Merging.",
          "So no ie11 anymore? ",
          "@syabro you can either use an older version, or transpile it down to es5. Not a big deal"
        ]
      },
      {
        "pr_number": 1022,
        "title": "Performance - target es2018",
        "body": "So the current setup is that `zod` has a compile target of es5, which applies to both its ES Module and CJS distributions. Zod's internals use quite a lot of modern features. TypeScript is polyfilling all of those features in the distributed code. TypeScript's polyfills are very good and probably as fast as they can be, but they're not as fast as the native code. For example, every array or object spread and every generator gets compiled to something with a bit more indirection.\r\n\r\nThat indirection looks like it's costing a real slowdown for some Zod functions.\r\n\r\nSo, bumping the target to ES2018 would cost IE11 support if it was done uniformly. Assuming that IE11 support is still critical (that's for the maintainers to decide, not me), a possibility might be targeting es2018 in the module entrypoint and keeping es5 in the main.\r\n\r\nOkay, so before:\r\n\r\n```\r\n~/p/zod on es2018 [$!]\r\n130 % y benchmark\r\nyarn run v1.22.4\r\n$ ts-node src/benchmarks/index.ts\r\nz.string: empty string x 2,451,532 ops/sec \u00b10.87% (94 runs sampled)\r\nz.string: short string x 2,482,775 ops/sec \u00b10.45% (95 runs sampled)\r\nz.string: long string x 2,404,051 ops/sec \u00b11.38% (91 runs sampled)\r\nz.string: invalid: null x 89,502 ops/sec \u00b10.97% (89 runs sampled)\r\nz.string: manual parser: long x 874,138,478 ops/sec \u00b11.56% (87 runs sampled)\r\nz.object: empty: valid x 1,646,418 ops/sec \u00b15.48% (91 runs sampled)\r\nz.object: empty: valid: extra keys x 1,559,284 ops/sec \u00b10.80% (91 runs sampled)\r\nz.object: empty: invalid: null x 90,326 ops/sec \u00b10.92% (95 runs sampled)\r\nz.object: short: valid x 790,794 ops/sec \u00b10.94% (94 runs sampled)\r\nz.object: short: valid: extra keys x 763,664 ops/sec \u00b16.08% (90 runs sampled)\r\nz.object: short: invalid: null x 90,299 ops/sec \u00b10.63% (93 runs sampled)\r\nz.object: long: valid x 412,393 ops/sec \u00b10.45% (97 runs sampled)\r\nz.object: long: valid: extra keys x 391,355 ops/sec \u00b15.61% (92 runs sampled)\r\nz.object: long: invalid: null x 88,410 ops/sec \u00b10.95% (93 runs sampled)\r\nz.union: double: valid: a x 256,918 ops/sec \u00b10.60% (96 runs sampled)\r\nz.union: double: valid: b x 256,784 ops/sec \u00b10.39% (96 runs sampled)\r\nz.union: double: invalid: null x 28,961 ops/sec \u00b16.36% (84 runs sampled)\r\nz.union: double: invalid: wrong shape x 24,945 ops/sec \u00b16.41% (87 runs sampled)\r\nz.union: many: valid: a x 126,783 ops/sec \u00b10.55% (93 runs sampled)\r\nz.union: many: valid: c x 124,881 ops/sec \u00b11.09% (92 runs sampled)\r\nz.union: many: invalid: null x 16,535 ops/sec \u00b15.17% (86 runs sampled)\r\nz.union: many: invalid: wrong shape x 14,627 ops/sec \u00b16.94% (86 runs sampled)\r\nz.discriminatedUnion: double: valid: a x 667,578 ops/sec \u00b10.44% (96 runs sampled)\r\nz.discriminatedUnion: double: valid: b x 663,500 ops/sec \u00b10.54% (96 runs sampled)\r\nz.discriminatedUnion: double: invalid: null x 88,595 ops/sec \u00b10.85% (95 runs sampled)\r\nz.discriminatedUnion: double: invalid: wrong shape x 84,477 ops/sec \u00b10.62% (94 runs sampled)\r\nz.discriminatedUnion: many: valid: a x 660,361 ops/sec \u00b10.39% (92 runs sampled)\r\nz.discriminatedUnion: many: valid: c x 665,620 ops/sec \u00b10.84% (93 runs sampled)\r\nz.discriminatedUnion: many: invalid: null x 91,685 ops/sec \u00b10.70% (92 runs sampled)\r\nz.discriminatedUnion: many: invalid: wrong shape x 83,539 ops/sec \u00b10.67% (90 runs sampled)\r\n\u2728  Done in 164.98s.\r\n```\r\n\r\nAfter:\r\n\r\n```\r\n% y benchmark\r\nyarn run v1.22.4\r\n$ ts-node src/benchmarks/index.ts\r\nz.string: empty string x 7,456,311 ops/sec \u00b10.50% (94 runs sampled)\r\nz.string: short string x 7,294,686 ops/sec \u00b10.63% (94 runs sampled)\r\nz.string: long string x 7,267,118 ops/sec \u00b10.74% (92 runs sampled)\r\nz.string: invalid: null x 68,995 ops/sec \u00b13.45% (90 runs sampled)\r\nz.string: manual parser: long x 873,026,560 ops/sec \u00b11.81% (86 runs sampled)\r\nz.object: empty: valid x 3,947,137 ops/sec \u00b10.54% (95 runs sampled)\r\nz.object: empty: valid: extra keys x 3,381,157 ops/sec \u00b10.55% (93 runs sampled)\r\nz.object: empty: invalid: null x 68,712 ops/sec \u00b10.78% (95 runs sampled)\r\nz.object: short: valid x 1,699,620 ops/sec \u00b130.55% (93 runs sampled)\r\nz.object: short: valid: extra keys x 1,940,140 ops/sec \u00b10.82% (94 runs sampled)\r\nz.object: short: invalid: null x 69,124 ops/sec \u00b10.47% (94 runs sampled)\r\nz.object: long: valid x 899,629 ops/sec \u00b10.53% (94 runs sampled)\r\nz.object: long: valid: extra keys x 839,770 ops/sec \u00b10.77% (95 runs sampled)\r\nz.object: long: invalid: null x 67,109 ops/sec \u00b13.32% (92 runs sampled)\r\nz.union: double: valid: a x 177,326 ops/sec \u00b16.18% (90 runs sampled)\r\nz.union: double: valid: b x 175,326 ops/sec \u00b15.59% (86 runs sampled)\r\nz.union: double: invalid: null x 23,836 ops/sec \u00b13.96% (89 runs sampled)\r\nz.union: double: invalid: wrong shape x 23,462 ops/sec \u00b10.86% (92 runs sampled)\r\nz.union: many: valid: a x 72,148 ops/sec \u00b16.87% (86 runs sampled)\r\nz.union: many: valid: c x 75,365 ops/sec \u00b14.36% (92 runs sampled)\r\nz.union: many: invalid: null x 14,744 ops/sec \u00b13.83% (89 runs sampled)\r\nz.union: many: invalid: wrong shape x 14,380 ops/sec \u00b10.62% (93 runs sampled)\r\nz.discriminatedUnion: double: valid: a x 730,682 ops/sec \u00b10.42% (96 runs sampled)\r\nz.discriminatedUnion: double: valid: b x 723,743 ops/sec \u00b10.39% (95 runs sampled)\r\nz.discriminatedUnion: double: invalid: null x 61,431 ops/sec \u00b13.81% (90 runs sampled)\r\nz.discriminatedUnion: double: invalid: wrong shape x 69,464 ops/sec \u00b10.82% (93 runs sampled)\r\nz.discriminatedUnion: many: valid: a x 730,148 ops/sec \u00b10.74% (96 runs sampled)\r\nz.discriminatedUnion: many: valid: c x 732,561 ops/sec \u00b10.55% (94 runs sampled)\r\nz.discriminatedUnion: many: invalid: null x 65,482 ops/sec \u00b10.64% (94 runs sampled)\r\nz.discriminatedUnion: many: invalid: wrong shape x 69,293 ops/sec \u00b10.47% (93 runs sampled)\r\n\u2728  Done in 165.41s.\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/1022",
        "comments": [
          "I ran a diff and basically the only difference is that `es2018` no longer transpiles the spread operator to `Object.assign`s under the hood. Guess the spread can be faster in some cases...kinda surprising. \r\n\r\nIE11 support isn't a priority and a 2x speed improvement is hard to turn down. Merging.",
          "So no ie11 anymore? ",
          "@syabro you can either use an older version, or transpile it down to es5. Not a big deal"
        ]
      },
      {
        "pr_number": 1027,
        "title": "Fix ERROR_HANDLING.md typo",
        "body": "Fixed `inclusive` description on `too_big` .",
        "html_url": "https://github.com/colinhacks/zod/pull/1027",
        "comments": ["Thanks!"]
      },
      {
        "pr_number": 1027,
        "title": "Fix ERROR_HANDLING.md typo",
        "body": "Fixed `inclusive` description on `too_big` .",
        "html_url": "https://github.com/colinhacks/zod/pull/1027",
        "comments": ["Thanks!"]
      },
      {
        "pr_number": 1026,
        "title": "Fast unions",
        "body": "Okay, one more for fun I guess.\r\n\r\nRight now Zod's unions work by evaluating all options and returning the first valid result, the first dirty result, or an error. So, the performance of a union check is strictly related to the possible options.\r\n\r\nThis changes the (sync) union mechanism to instead succeed fast. If the first option works, then it returns immediately. In the success case, this means that `z.union` can be faster than evaluating all the options. That's basically it. Also, it's a little more stingy with how it uses memory, by retaining less of results.",
        "html_url": "https://github.com/colinhacks/zod/pull/1026",
        "comments": [
          "This looks great! I'll take a better look tomorrow and try to think of possible unintended implications."
        ]
      },
      {
        "pr_number": 1026,
        "title": "Fast unions",
        "body": "Okay, one more for fun I guess.\r\n\r\nRight now Zod's unions work by evaluating all options and returning the first valid result, the first dirty result, or an error. So, the performance of a union check is strictly related to the possible options.\r\n\r\nThis changes the (sync) union mechanism to instead succeed fast. If the first option works, then it returns immediately. In the success case, this means that `z.union` can be faster than evaluating all the options. That's basically it. Also, it's a little more stingy with how it uses memory, by retaining less of results.",
        "html_url": "https://github.com/colinhacks/zod/pull/1026",
        "comments": [
          "This looks great! I'll take a better look tomorrow and try to think of possible unintended implications."
        ]
      },
      {
        "pr_number": 1026,
        "title": "Fast unions",
        "body": "Okay, one more for fun I guess.\r\n\r\nRight now Zod's unions work by evaluating all options and returning the first valid result, the first dirty result, or an error. So, the performance of a union check is strictly related to the possible options.\r\n\r\nThis changes the (sync) union mechanism to instead succeed fast. If the first option works, then it returns immediately. In the success case, this means that `z.union` can be faster than evaluating all the options. That's basically it. Also, it's a little more stingy with how it uses memory, by retaining less of results.",
        "html_url": "https://github.com/colinhacks/zod/pull/1026",
        "comments": [
          "This looks great! I'll take a better look tomorrow and try to think of possible unintended implications."
        ]
      }
    ],
    "v3.13.4": [],
    "v3.13.2": [
      {
        "pr_number": 752,
        "title": "Records should be partial so we're not required to use all keys",
        "body": "resolves #751",
        "html_url": "https://github.com/colinhacks/zod/pull/752",
        "comments": [
          "I\u2019m also in need of this change. It would be great if we can get this in. Thanks!"
        ]
      },
      {
        "pr_number": 898,
        "title": "NaN type",
        "body": "added NaN type",
        "html_url": "https://github.com/colinhacks/zod/pull/898",
        "comments": ["This PR addresses #885"]
      },
      {
        "pr_number": 898,
        "title": "NaN type",
        "body": "added NaN type",
        "html_url": "https://github.com/colinhacks/zod/pull/898",
        "comments": ["This PR addresses #885"]
      },
      {
        "pr_number": 898,
        "title": "NaN type",
        "body": "added NaN type",
        "html_url": "https://github.com/colinhacks/zod/pull/898",
        "comments": ["This PR addresses #885"]
      },
      {
        "pr_number": 898,
        "title": "NaN type",
        "body": "added NaN type",
        "html_url": "https://github.com/colinhacks/zod/pull/898",
        "comments": ["This PR addresses #885"]
      },
      {
        "pr_number": 906,
        "title": "Add `types` field to `exports` in `package.json`",
        "body": "Closes #805",
        "html_url": "https://github.com/colinhacks/zod/pull/906",
        "comments": []
      },
      {
        "pr_number": 912,
        "title": "Add Contributor's Convenant as Code of Conduct",
        "body": "As the community continues to grow and more people are involved in both contributing code, reviewing PRs, and address issues and questions, I believe we should establish a Code of Conduct to foster a healthy community. I've chosen a very popular one used in many open source projects big and small: [The Contributor's Covenant](https://www.contributor-covenant.org) but I'm open to others.\r\n\r\nAdditionally, I would like to grow the (very lonely) [Discord server](https://discord.gg/EuFJWgP2TG) I started for Zod a while back, but want there to be a consistent set of rules around interaction there and here.",
        "html_url": "https://github.com/colinhacks/zod/pull/912",
        "comments": []
      },
      {
        "pr_number": 987,
        "title": "exporting ZodDiscriminatedUnionOption",
        "body": "I think that zod should export `ZodDiscriminatedUnionOption`. Please let me know if there is a good reason not to do this.",
        "html_url": "https://github.com/colinhacks/zod/pull/987",
        "comments": []
      },
      {
        "pr_number": 987,
        "title": "exporting ZodDiscriminatedUnionOption",
        "body": "I think that zod should export `ZodDiscriminatedUnionOption`. Please let me know if there is a good reason not to do this.",
        "html_url": "https://github.com/colinhacks/zod/pull/987",
        "comments": []
      },
      {
        "pr_number": 987,
        "title": "exporting ZodDiscriminatedUnionOption",
        "body": "I think that zod should export `ZodDiscriminatedUnionOption`. Please let me know if there is a good reason not to do this.",
        "html_url": "https://github.com/colinhacks/zod/pull/987",
        "comments": []
      },
      {
        "pr_number": 906,
        "title": "Add `types` field to `exports` in `package.json`",
        "body": "Closes #805",
        "html_url": "https://github.com/colinhacks/zod/pull/906",
        "comments": []
      },
      {
        "pr_number": 898,
        "title": "NaN type",
        "body": "added NaN type",
        "html_url": "https://github.com/colinhacks/zod/pull/898",
        "comments": ["This PR addresses #885"]
      },
      {
        "pr_number": 898,
        "title": "NaN type",
        "body": "added NaN type",
        "html_url": "https://github.com/colinhacks/zod/pull/898",
        "comments": ["This PR addresses #885"]
      },
      {
        "pr_number": 912,
        "title": "Add Contributor's Convenant as Code of Conduct",
        "body": "As the community continues to grow and more people are involved in both contributing code, reviewing PRs, and address issues and questions, I believe we should establish a Code of Conduct to foster a healthy community. I've chosen a very popular one used in many open source projects big and small: [The Contributor's Covenant](https://www.contributor-covenant.org) but I'm open to others.\r\n\r\nAdditionally, I would like to grow the (very lonely) [Discord server](https://discord.gg/EuFJWgP2TG) I started for Zod a while back, but want there to be a consistent set of rules around interaction there and here.",
        "html_url": "https://github.com/colinhacks/zod/pull/912",
        "comments": []
      },
      {
        "pr_number": 752,
        "title": "Records should be partial so we're not required to use all keys",
        "body": "resolves #751",
        "html_url": "https://github.com/colinhacks/zod/pull/752",
        "comments": [
          "I\u2019m also in need of this change. It would be great if we can get this in. Thanks!"
        ]
      }
    ],
    "v3.12.0": [
      {
        "pr_number": 745,
        "title": "Fix documentation for ZodArray .element (issue #744)",
        "body": "Add documentation for `ZodArray.element` (fixes #744), using the same format as the documentation for `ZodObject.shape`.",
        "html_url": "https://github.com/colinhacks/zod/pull/745",
        "comments": []
      },
      {
        "pr_number": 745,
        "title": "Fix documentation for ZodArray .element (issue #744)",
        "body": "Add documentation for `ZodArray.element` (fixes #744), using the same format as the documentation for `ZodObject.shape`.",
        "html_url": "https://github.com/colinhacks/zod/pull/745",
        "comments": []
      },
      {
        "pr_number": 756,
        "title": "Added json-schema-to-zod to ecosystem",
        "body": "Hey,\r\n\r\nI accidentaly another converter; this time from Json schemas to Zod. It's still early but it works well enough for my use cases so I thought I'd add it to the list. \u270c\ufe0f",
        "html_url": "https://github.com/colinhacks/zod/pull/756",
        "comments": []
      },
      {
        "pr_number": 756,
        "title": "Added json-schema-to-zod to ecosystem",
        "body": "Hey,\r\n\r\nI accidentaly another converter; this time from Json schemas to Zod. It's still early but it works well enough for my use cases so I thought I'd add it to the list. \u270c\ufe0f",
        "html_url": "https://github.com/colinhacks/zod/pull/756",
        "comments": []
      },
      {
        "pr_number": 758,
        "title": "Remove duplicated block on custom error messages",
        "body": "Almost the same block on custom error messages can be found in lines 336\u2013345.\r\n\r\n```js\r\nconst name = z.string({\r\n  required_error: \"Name is required\",\r\n  invalid_type_error: \"Name must be a string\",\r\n});\r\n```\r\n\r\nLeaves the question whether the properties in that object can be both => \r\n`required`/`required_error` and `invalid`/`invalid_type_error`",
        "html_url": "https://github.com/colinhacks/zod/pull/758",
        "comments": [
          "Wow good catch. `invalid` and `required` aren't actually supported at all...only `required_error` and `invalid_type_error`."
        ]
      },
      {
        "pr_number": 766,
        "title": "Remove duplicated `processCreateParams` in `ZodNumber`",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/766",
        "comments": []
      },
      {
        "pr_number": 767,
        "title": "fix: Add `description` to `ProcessedCreateParams`",
        "body": "c.c. #764 ",
        "html_url": "https://github.com/colinhacks/zod/pull/767",
        "comments": ["Yep, seems to be an oversight. Thanks!"]
      },
      {
        "pr_number": 773,
        "title": "fix: intersection with date fields",
        "body": "resolves [#772](https://github.com/colinhacks/zod/issues/772)",
        "html_url": "https://github.com/colinhacks/zod/pull/773",
        "comments": ["Love it, thanks!"]
      },
      {
        "pr_number": 777,
        "title": "Don't include received value in enum/literal error messages (fixes #461)",
        "body": "See #461 \r\n\r\nAlso the error produced by `ZodLiteral` did not actually match the `ZodInvalidTypeIssue` interface or `ERROR_HANDLING.md` documentation (`expected` and `received` were not actually `ZodParsedType`s)",
        "html_url": "https://github.com/colinhacks/zod/pull/777",
        "comments": [
          "LGTM - Changes to error language don't merit a major version bump imo so let's merge\r\n\r\nI'll publish a minor release with this and some other changes this weekend."
        ]
      },
      {
        "pr_number": 777,
        "title": "Don't include received value in enum/literal error messages (fixes #461)",
        "body": "See #461 \r\n\r\nAlso the error produced by `ZodLiteral` did not actually match the `ZodInvalidTypeIssue` interface or `ERROR_HANDLING.md` documentation (`expected` and `received` were not actually `ZodParsedType`s)",
        "html_url": "https://github.com/colinhacks/zod/pull/777",
        "comments": [
          "LGTM - Changes to error language don't merit a major version bump imo so let's merge\r\n\r\nI'll publish a minor release with this and some other changes this weekend."
        ]
      },
      {
        "pr_number": 793,
        "title": "Fix typo in Sets section of README",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/793",
        "comments": []
      },
      {
        "pr_number": 795,
        "title": "Update README.md",
        "body": "Added closing parentheses",
        "html_url": "https://github.com/colinhacks/zod/pull/795",
        "comments": []
      },
      {
        "pr_number": 811,
        "title": "chore: add soly package to ecosystem",
        "body": "#789 ",
        "html_url": "https://github.com/colinhacks/zod/pull/811",
        "comments": []
      },
      {
        "pr_number": 811,
        "title": "chore: add soly package to ecosystem",
        "body": "#789 ",
        "html_url": "https://github.com/colinhacks/zod/pull/811",
        "comments": []
      },
      {
        "pr_number": 795,
        "title": "Update README.md",
        "body": "Added closing parentheses",
        "html_url": "https://github.com/colinhacks/zod/pull/795",
        "comments": []
      },
      {
        "pr_number": 818,
        "title": "Fix typing typo in documentation",
        "body": "I believe the intention was to use `z.number()` instead of `z.string()`",
        "html_url": "https://github.com/colinhacks/zod/pull/818",
        "comments": []
      },
      {
        "pr_number": 818,
        "title": "Fix typing typo in documentation",
        "body": "I believe the intention was to use `z.number()` instead of `z.string()`",
        "html_url": "https://github.com/colinhacks/zod/pull/818",
        "comments": []
      },
      {
        "pr_number": 793,
        "title": "Fix typo in Sets section of README",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/793",
        "comments": []
      },
      {
        "pr_number": 819,
        "title": "README grammarz",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/819",
        "comments": []
      },
      {
        "pr_number": 823,
        "title": "Add min(), max(), size() and nonempty() to ZodSet schema",
        "body": "Closes #740, among other things",
        "html_url": "https://github.com/colinhacks/zod/pull/823",
        "comments": [
          "Truly an immaculate PR, sorry it took me so long to get around to it."
        ]
      },
      {
        "pr_number": 823,
        "title": "Add min(), max(), size() and nonempty() to ZodSet schema",
        "body": "Closes #740, among other things",
        "html_url": "https://github.com/colinhacks/zod/pull/823",
        "comments": [
          "Truly an immaculate PR, sorry it took me so long to get around to it."
        ]
      },
      {
        "pr_number": 823,
        "title": "Add min(), max(), size() and nonempty() to ZodSet schema",
        "body": "Closes #740, among other things",
        "html_url": "https://github.com/colinhacks/zod/pull/823",
        "comments": [
          "Truly an immaculate PR, sorry it took me so long to get around to it."
        ]
      },
      {
        "pr_number": 823,
        "title": "Add min(), max(), size() and nonempty() to ZodSet schema",
        "body": "Closes #740, among other things",
        "html_url": "https://github.com/colinhacks/zod/pull/823",
        "comments": [
          "Truly an immaculate PR, sorry it took me so long to get around to it."
        ]
      },
      {
        "pr_number": 823,
        "title": "Add min(), max(), size() and nonempty() to ZodSet schema",
        "body": "Closes #740, among other things",
        "html_url": "https://github.com/colinhacks/zod/pull/823",
        "comments": [
          "Truly an immaculate PR, sorry it took me so long to get around to it."
        ]
      },
      {
        "pr_number": 824,
        "title": "add zod-to-ts to ecosystem",
        "body": "https://github.com/sachinraja/zod-to-ts",
        "html_url": "https://github.com/colinhacks/zod/pull/824",
        "comments": []
      },
      {
        "pr_number": 825,
        "title": "Fix grammar mistake in README for \"Cyclical objects\"",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/825",
        "comments": []
      },
      {
        "pr_number": 824,
        "title": "add zod-to-ts to ecosystem",
        "body": "https://github.com/sachinraja/zod-to-ts",
        "html_url": "https://github.com/colinhacks/zod/pull/824",
        "comments": []
      },
      {
        "pr_number": 825,
        "title": "Fix grammar mistake in README for \"Cyclical objects\"",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/825",
        "comments": []
      },
      {
        "pr_number": 827,
        "title": "Fix broken twitter link",
        "body": "The Twitter link was using Markdown inside of HTML and thus was broken because it's being centered in a `<p>` tag. I changed it to just a regular ol' `<a>` tag.",
        "html_url": "https://github.com/colinhacks/zod/pull/827",
        "comments": [
          "@ajcwebdev The link seems to work fine in the README as-is? This doesn't seem like a big deal, but could you maybe provide a screenshot of what you're seeing?",
          "Oh, I was actually looking at the wrong one. \ud83e\udd26 \r\n"
        ]
      },
      {
        "pr_number": 827,
        "title": "Fix broken twitter link",
        "body": "The Twitter link was using Markdown inside of HTML and thus was broken because it's being centered in a `<p>` tag. I changed it to just a regular ol' `<a>` tag.",
        "html_url": "https://github.com/colinhacks/zod/pull/827",
        "comments": [
          "@ajcwebdev The link seems to work fine in the README as-is? This doesn't seem like a big deal, but could you maybe provide a screenshot of what you're seeing?",
          "Oh, I was actually looking at the wrong one. \ud83e\udd26 \r\n"
        ]
      },
      {
        "pr_number": 832,
        "title": "Add Readonly to ZodUnionOptions",
        "body": "Addresses issues where `as const` needs to be used in definitions to allow further type inference.\r\n\r\nCurrently `as const` values are prevented from being used since the existing signature requires writeable arrays and tuples \r\n\r\nUsing `as const` to declare actual readonly tuples instead of populating writeable arrays enables strong type inference and ensures arity is detectable for calls to union constructors (which need a tuple of at least 2 members).\r\n\r\nFixes https://github.com/colinhacks/zod/issues/831",
        "html_url": "https://github.com/colinhacks/zod/pull/832",
        "comments": [
          "This is less of a blocker for me now, since I fixed it by remapping my types to be (unnecessarily) writeable in https://github.com/colinhacks/zod/issues/831#issuecomment-997444465  In general `readonly` is a better signature but I'll just leave this here.",
          "Great stuff, I agree this is the best solution. And yeah, `z.enum` is for string literals only. I don't think it's worth introducing something akin to `createUnionSchema` into core...creating unions of non-string primitive literals is pretty obscure use case IMO. But I'm glad you posted your solution for future reference. ",
          "Hey, thanks also for looking into `createUnionSchema`! \r\n\r\nI was pleased with how the implementation fell in place in the end and its generality to any const literal array. \r\n\r\nIt did occur to me that it could be an alternative implementation of `z.enum` (in that it handles a superset of cases), but I don't have a good handle on the consequences in terms of e.g. potential branching complexity in the typescript compilation process or other issues that my implementation might introduce across the zod core as a whole.\r\n\r\nAs you say, there's a reference implementation now for those who need it. Glad of your expertise and continued maintenance!",
          "Will tack on that I'd like to see this, I'm sure it's not the most common form of validation but having to validate against a set of say numeric literals certainly is a use case, at least with numbers.\r\n\r\nI would imagine as of today most people are putting the numbers as strings (and transforming) to get around this but I'm surprised a validation library itself isn't able to validate against a list of codes itself.",
          "I agree, unions of integer literals are not an obscure use case to validate integer codes. Would love to have it included in core",
          "> Will tack on that I'd like to see this, I'm sure it's not the most common form of validation but having to validate against a set of say numeric literals certainly is a use case, at least with numbers.\r\n> \r\n> I would imagine as of today most people are putting the numbers as strings (and transforming) to get around this but I'm surprised a validation library itself isn't able to validate against a list of codes itself.\r\n\r\nFor those arriving at this thread, an example implementation which is general to const arrays of literals (not limited to strings) and which might be considered to merge as a core feature is at... https://github.com/colinhacks/zod/issues/831#issuecomment-997444465\r\n"
        ]
      },
      {
        "pr_number": 835,
        "title": "Fix mistake in example (README.md)",
        "body": "Fix mistake in example.",
        "html_url": "https://github.com/colinhacks/zod/pull/835",
        "comments": []
      },
      {
        "pr_number": 836,
        "title": "Fix mistake in example (README_ZH.md)",
        "body": "The same as https://github.com/colinhacks/zod/pull/835 but I'm too lazy to join them.",
        "html_url": "https://github.com/colinhacks/zod/pull/836",
        "comments": []
      },
      {
        "pr_number": 837,
        "title": "Further translate untranslated English parts",
        "body": "In this pull request, I have translated multiple headers and contents that have not been translated fully into Chinese. ",
        "html_url": "https://github.com/colinhacks/zod/pull/837",
        "comments": ["Thanks!!\r\n"]
      },
      {
        "pr_number": 840,
        "title": "Fix instanceof map and set",
        "body": "There are some cases then zod is running in es5 env.\r\n\r\nIn such cases zod throws an error like \"Map is not defined\".\r\nThis commit adds `typeof X` check before all `instanceof X`. It allows skip `instanceof` checks in case of missed `X`.\r\n\r\nThere is one more issue in case of `#safeParse()` with missed `Map`.\r\nTo prevent this issue `ParseContext#typeCache` becomes nullable. So, when something calls `#safeParse()`, zod checks if `Map` present and creates `#typeCache` in this case. If `Map` is missed, zod sets `#typeCache` to `undefined` and check runs slower.\r\n\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/840",
        "comments": ["Looks fantastic, good solution!"]
      },
      {
        "pr_number": 840,
        "title": "Fix instanceof map and set",
        "body": "There are some cases then zod is running in es5 env.\r\n\r\nIn such cases zod throws an error like \"Map is not defined\".\r\nThis commit adds `typeof X` check before all `instanceof X`. It allows skip `instanceof` checks in case of missed `X`.\r\n\r\nThere is one more issue in case of `#safeParse()` with missed `Map`.\r\nTo prevent this issue `ParseContext#typeCache` becomes nullable. So, when something calls `#safeParse()`, zod checks if `Map` present and creates `#typeCache` in this case. If `Map` is missed, zod sets `#typeCache` to `undefined` and check runs slower.\r\n\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/840",
        "comments": ["Looks fantastic, good solution!"]
      },
      {
        "pr_number": 840,
        "title": "Fix instanceof map and set",
        "body": "There are some cases then zod is running in es5 env.\r\n\r\nIn such cases zod throws an error like \"Map is not defined\".\r\nThis commit adds `typeof X` check before all `instanceof X`. It allows skip `instanceof` checks in case of missed `X`.\r\n\r\nThere is one more issue in case of `#safeParse()` with missed `Map`.\r\nTo prevent this issue `ParseContext#typeCache` becomes nullable. So, when something calls `#safeParse()`, zod checks if `Map` present and creates `#typeCache` in this case. If `Map` is missed, zod sets `#typeCache` to `undefined` and check runs slower.\r\n\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/840",
        "comments": ["Looks fantastic, good solution!"]
      },
      {
        "pr_number": 840,
        "title": "Fix instanceof map and set",
        "body": "There are some cases then zod is running in es5 env.\r\n\r\nIn such cases zod throws an error like \"Map is not defined\".\r\nThis commit adds `typeof X` check before all `instanceof X`. It allows skip `instanceof` checks in case of missed `X`.\r\n\r\nThere is one more issue in case of `#safeParse()` with missed `Map`.\r\nTo prevent this issue `ParseContext#typeCache` becomes nullable. So, when something calls `#safeParse()`, zod checks if `Map` present and creates `#typeCache` in this case. If `Map` is missed, zod sets `#typeCache` to `undefined` and check runs slower.\r\n\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/840",
        "comments": ["Looks fantastic, good solution!"]
      },
      {
        "pr_number": 837,
        "title": "Further translate untranslated English parts",
        "body": "In this pull request, I have translated multiple headers and contents that have not been translated fully into Chinese. ",
        "html_url": "https://github.com/colinhacks/zod/pull/837",
        "comments": ["Thanks!!\r\n"]
      },
      {
        "pr_number": 836,
        "title": "Fix mistake in example (README_ZH.md)",
        "body": "The same as https://github.com/colinhacks/zod/pull/835 but I'm too lazy to join them.",
        "html_url": "https://github.com/colinhacks/zod/pull/836",
        "comments": []
      },
      {
        "pr_number": 835,
        "title": "Fix mistake in example (README.md)",
        "body": "Fix mistake in example.",
        "html_url": "https://github.com/colinhacks/zod/pull/835",
        "comments": []
      },
      {
        "pr_number": 832,
        "title": "Add Readonly to ZodUnionOptions",
        "body": "Addresses issues where `as const` needs to be used in definitions to allow further type inference.\r\n\r\nCurrently `as const` values are prevented from being used since the existing signature requires writeable arrays and tuples \r\n\r\nUsing `as const` to declare actual readonly tuples instead of populating writeable arrays enables strong type inference and ensures arity is detectable for calls to union constructors (which need a tuple of at least 2 members).\r\n\r\nFixes https://github.com/colinhacks/zod/issues/831",
        "html_url": "https://github.com/colinhacks/zod/pull/832",
        "comments": [
          "This is less of a blocker for me now, since I fixed it by remapping my types to be (unnecessarily) writeable in https://github.com/colinhacks/zod/issues/831#issuecomment-997444465  In general `readonly` is a better signature but I'll just leave this here.",
          "Great stuff, I agree this is the best solution. And yeah, `z.enum` is for string literals only. I don't think it's worth introducing something akin to `createUnionSchema` into core...creating unions of non-string primitive literals is pretty obscure use case IMO. But I'm glad you posted your solution for future reference. ",
          "Hey, thanks also for looking into `createUnionSchema`! \r\n\r\nI was pleased with how the implementation fell in place in the end and its generality to any const literal array. \r\n\r\nIt did occur to me that it could be an alternative implementation of `z.enum` (in that it handles a superset of cases), but I don't have a good handle on the consequences in terms of e.g. potential branching complexity in the typescript compilation process or other issues that my implementation might introduce across the zod core as a whole.\r\n\r\nAs you say, there's a reference implementation now for those who need it. Glad of your expertise and continued maintenance!",
          "Will tack on that I'd like to see this, I'm sure it's not the most common form of validation but having to validate against a set of say numeric literals certainly is a use case, at least with numbers.\r\n\r\nI would imagine as of today most people are putting the numbers as strings (and transforming) to get around this but I'm surprised a validation library itself isn't able to validate against a list of codes itself.",
          "I agree, unions of integer literals are not an obscure use case to validate integer codes. Would love to have it included in core",
          "> Will tack on that I'd like to see this, I'm sure it's not the most common form of validation but having to validate against a set of say numeric literals certainly is a use case, at least with numbers.\r\n> \r\n> I would imagine as of today most people are putting the numbers as strings (and transforming) to get around this but I'm surprised a validation library itself isn't able to validate against a list of codes itself.\r\n\r\nFor those arriving at this thread, an example implementation which is general to const arrays of literals (not limited to strings) and which might be considered to merge as a core feature is at... https://github.com/colinhacks/zod/issues/831#issuecomment-997444465\r\n"
        ]
      },
      {
        "pr_number": 823,
        "title": "Add min(), max(), size() and nonempty() to ZodSet schema",
        "body": "Closes #740, among other things",
        "html_url": "https://github.com/colinhacks/zod/pull/823",
        "comments": [
          "Truly an immaculate PR, sorry it took me so long to get around to it."
        ]
      },
      {
        "pr_number": 823,
        "title": "Add min(), max(), size() and nonempty() to ZodSet schema",
        "body": "Closes #740, among other things",
        "html_url": "https://github.com/colinhacks/zod/pull/823",
        "comments": [
          "Truly an immaculate PR, sorry it took me so long to get around to it."
        ]
      },
      {
        "pr_number": 819,
        "title": "README grammarz",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/819",
        "comments": []
      },
      {
        "pr_number": 777,
        "title": "Don't include received value in enum/literal error messages (fixes #461)",
        "body": "See #461 \r\n\r\nAlso the error produced by `ZodLiteral` did not actually match the `ZodInvalidTypeIssue` interface or `ERROR_HANDLING.md` documentation (`expected` and `received` were not actually `ZodParsedType`s)",
        "html_url": "https://github.com/colinhacks/zod/pull/777",
        "comments": [
          "LGTM - Changes to error language don't merit a major version bump imo so let's merge\r\n\r\nI'll publish a minor release with this and some other changes this weekend."
        ]
      },
      {
        "pr_number": 773,
        "title": "fix: intersection with date fields",
        "body": "resolves [#772](https://github.com/colinhacks/zod/issues/772)",
        "html_url": "https://github.com/colinhacks/zod/pull/773",
        "comments": ["Love it, thanks!"]
      },
      {
        "pr_number": 767,
        "title": "fix: Add `description` to `ProcessedCreateParams`",
        "body": "c.c. #764 ",
        "html_url": "https://github.com/colinhacks/zod/pull/767",
        "comments": ["Yep, seems to be an oversight. Thanks!"]
      },
      {
        "pr_number": 773,
        "title": "fix: intersection with date fields",
        "body": "resolves [#772](https://github.com/colinhacks/zod/issues/772)",
        "html_url": "https://github.com/colinhacks/zod/pull/773",
        "comments": ["Love it, thanks!"]
      },
      {
        "pr_number": 758,
        "title": "Remove duplicated block on custom error messages",
        "body": "Almost the same block on custom error messages can be found in lines 336\u2013345.\r\n\r\n```js\r\nconst name = z.string({\r\n  required_error: \"Name is required\",\r\n  invalid_type_error: \"Name must be a string\",\r\n});\r\n```\r\n\r\nLeaves the question whether the properties in that object can be both => \r\n`required`/`required_error` and `invalid`/`invalid_type_error`",
        "html_url": "https://github.com/colinhacks/zod/pull/758",
        "comments": [
          "Wow good catch. `invalid` and `required` aren't actually supported at all...only `required_error` and `invalid_type_error`."
        ]
      },
      {
        "pr_number": 856,
        "title": "Add types to extract error results from schema",
        "body": "- Adds two types `z.inferFlattenedErrors` and alias type `z.inferFormErrors` to [infer error result types for `flatten()` from a schema](https://github.com/colinhacks/zod/pull/856/files#diff-ae3ae59764197d1e97d44cb8d123d849b078e60d66aa6d8332851e7b51fb24abR377).\r\n- Adds additional overloading for `flatten` to [support type-safety with the new types](https://github.com/colinhacks/zod/pull/856/files#diff-ae3ae59764197d1e97d44cb8d123d849b078e60d66aa6d8332851e7b51fb24abR413-R417).\r\n\r\nFixes #855",
        "html_url": "https://github.com/colinhacks/zod/pull/856",
        "comments": [
          "This would be quite helpful! I would like to use this in the example project for integrating Remix with zod.",
          "> Are there any type-level tests that we can add, maybe some [`AssertEquals`](https://github.com/colinhacks/zod/blob/73a9a628e8e3f512908b5f2b4116a87197f43407/src/helpers/util.ts#L2-L6) to the [errors test suite](https://github.com/colinhacks/zod/blob/master/src/__tests__/error.test.ts)?\r\n\r\nI was thinking the same. There's a few libraries to do so; [dtslint](https://github.com/microsoft/dtslint) and [tsd](https://github.com/SamVerschueren/tsd) are the two most prominent. The latter has some [differences with dtslint](https://github.com/SamVerschueren/tsd/issues/10).",
          "> I was thinking the same.\r\n\r\nI just meant literally using the existing `AssertEqual` type in a test case in the errors test suite. We have a few examples around: https://github.com/colinhacks/zod/search?q=AssertEqual\r\n",
          "> > I was thinking the same.\r\n> \r\n> I just meant literally using the existing `AssertEqual` type in a test case in the errors test suite. We have a few examples around: https://github.com/colinhacks/zod/search?q=AssertEqual\r\n\r\nOh, sorry I totally misunderstood. I'll add some tests for this :)",
          "@scotttrinh I added tests for type inference and type assertion with `flatten()` as well as additional checks.\r\n\r\nI don't know if  `all-errors.test.ts` is the right place as `safeparse.test.ts` also seemed like a good location for this, but let me know :)",
          "Wonderful! Thank you!",
          "When can we expect a release of this?"
        ]
      },
      {
        "pr_number": 860,
        "title": "change UUID regex to support different UUID variants",
        "body": "PR for issue #854 - UUID regex only validate Variant 1 UUIDs \r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/860",
        "comments": [
          "@narrowei \r\n\r\nDo you mind adding a few tests for the various UUID versions to the string tests?\r\n\r\nhttps://github.com/colinhacks/zod/blob/73a9a628e8e3f512908b5f2b4116a87197f43407/src/__tests__/string.test.ts#L80-L89",
          "@scotttrinh  No problem! will add unit tests for different various",
          "@scotttrinh have added tests to cover variants 0 and 2. Other files were automatically changed by the pre-commit lint fix.",
          "Thanks for the test cases, this is looking good! I'll spend some time in the next day or two to get it ready for merging. Not sure what the release schedule is going to be, but I don't think there is anything blocking this from going out in the next release. Thanks for getting this together!\r\n\r\n> Other files were automatically changed by the pre-commit lint fix.\r\n\r\nI think this might be due to some issue with prettier picking up your own configuration or using some global config? I can't see why it would've changed code that has ostensibly been sitting in the upstream branch all this time and wasn't changed. We can probably sort this out during the merge, but if you have time to remove any of the extraneous changes sooner than we do, feel free to push another commit.",
          "Hey @scotttrinh, thanks for reviewing my code and quick response! I have removed extraneous changes and pulled the code from the master branch.",
          "Hey @scotttrinh, any luck about the merge?"
        ]
      },
      {
        "pr_number": 860,
        "title": "change UUID regex to support different UUID variants",
        "body": "PR for issue #854 - UUID regex only validate Variant 1 UUIDs \r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/860",
        "comments": [
          "@narrowei \r\n\r\nDo you mind adding a few tests for the various UUID versions to the string tests?\r\n\r\nhttps://github.com/colinhacks/zod/blob/73a9a628e8e3f512908b5f2b4116a87197f43407/src/__tests__/string.test.ts#L80-L89",
          "@scotttrinh  No problem! will add unit tests for different various",
          "@scotttrinh have added tests to cover variants 0 and 2. Other files were automatically changed by the pre-commit lint fix.",
          "Thanks for the test cases, this is looking good! I'll spend some time in the next day or two to get it ready for merging. Not sure what the release schedule is going to be, but I don't think there is anything blocking this from going out in the next release. Thanks for getting this together!\r\n\r\n> Other files were automatically changed by the pre-commit lint fix.\r\n\r\nI think this might be due to some issue with prettier picking up your own configuration or using some global config? I can't see why it would've changed code that has ostensibly been sitting in the upstream branch all this time and wasn't changed. We can probably sort this out during the merge, but if you have time to remove any of the extraneous changes sooner than we do, feel free to push another commit.",
          "Hey @scotttrinh, thanks for reviewing my code and quick response! I have removed extraneous changes and pulled the code from the master branch.",
          "Hey @scotttrinh, any luck about the merge?"
        ]
      },
      {
        "pr_number": 856,
        "title": "Add types to extract error results from schema",
        "body": "- Adds two types `z.inferFlattenedErrors` and alias type `z.inferFormErrors` to [infer error result types for `flatten()` from a schema](https://github.com/colinhacks/zod/pull/856/files#diff-ae3ae59764197d1e97d44cb8d123d849b078e60d66aa6d8332851e7b51fb24abR377).\r\n- Adds additional overloading for `flatten` to [support type-safety with the new types](https://github.com/colinhacks/zod/pull/856/files#diff-ae3ae59764197d1e97d44cb8d123d849b078e60d66aa6d8332851e7b51fb24abR413-R417).\r\n\r\nFixes #855",
        "html_url": "https://github.com/colinhacks/zod/pull/856",
        "comments": [
          "This would be quite helpful! I would like to use this in the example project for integrating Remix with zod.",
          "> Are there any type-level tests that we can add, maybe some [`AssertEquals`](https://github.com/colinhacks/zod/blob/73a9a628e8e3f512908b5f2b4116a87197f43407/src/helpers/util.ts#L2-L6) to the [errors test suite](https://github.com/colinhacks/zod/blob/master/src/__tests__/error.test.ts)?\r\n\r\nI was thinking the same. There's a few libraries to do so; [dtslint](https://github.com/microsoft/dtslint) and [tsd](https://github.com/SamVerschueren/tsd) are the two most prominent. The latter has some [differences with dtslint](https://github.com/SamVerschueren/tsd/issues/10).",
          "> I was thinking the same.\r\n\r\nI just meant literally using the existing `AssertEqual` type in a test case in the errors test suite. We have a few examples around: https://github.com/colinhacks/zod/search?q=AssertEqual\r\n",
          "> > I was thinking the same.\r\n> \r\n> I just meant literally using the existing `AssertEqual` type in a test case in the errors test suite. We have a few examples around: https://github.com/colinhacks/zod/search?q=AssertEqual\r\n\r\nOh, sorry I totally misunderstood. I'll add some tests for this :)",
          "@scotttrinh I added tests for type inference and type assertion with `flatten()` as well as additional checks.\r\n\r\nI don't know if  `all-errors.test.ts` is the right place as `safeparse.test.ts` also seemed like a good location for this, but let me know :)",
          "Wonderful! Thank you!",
          "When can we expect a release of this?"
        ]
      },
      {
        "pr_number": 856,
        "title": "Add types to extract error results from schema",
        "body": "- Adds two types `z.inferFlattenedErrors` and alias type `z.inferFormErrors` to [infer error result types for `flatten()` from a schema](https://github.com/colinhacks/zod/pull/856/files#diff-ae3ae59764197d1e97d44cb8d123d849b078e60d66aa6d8332851e7b51fb24abR377).\r\n- Adds additional overloading for `flatten` to [support type-safety with the new types](https://github.com/colinhacks/zod/pull/856/files#diff-ae3ae59764197d1e97d44cb8d123d849b078e60d66aa6d8332851e7b51fb24abR413-R417).\r\n\r\nFixes #855",
        "html_url": "https://github.com/colinhacks/zod/pull/856",
        "comments": [
          "This would be quite helpful! I would like to use this in the example project for integrating Remix with zod.",
          "> Are there any type-level tests that we can add, maybe some [`AssertEquals`](https://github.com/colinhacks/zod/blob/73a9a628e8e3f512908b5f2b4116a87197f43407/src/helpers/util.ts#L2-L6) to the [errors test suite](https://github.com/colinhacks/zod/blob/master/src/__tests__/error.test.ts)?\r\n\r\nI was thinking the same. There's a few libraries to do so; [dtslint](https://github.com/microsoft/dtslint) and [tsd](https://github.com/SamVerschueren/tsd) are the two most prominent. The latter has some [differences with dtslint](https://github.com/SamVerschueren/tsd/issues/10).",
          "> I was thinking the same.\r\n\r\nI just meant literally using the existing `AssertEqual` type in a test case in the errors test suite. We have a few examples around: https://github.com/colinhacks/zod/search?q=AssertEqual\r\n",
          "> > I was thinking the same.\r\n> \r\n> I just meant literally using the existing `AssertEqual` type in a test case in the errors test suite. We have a few examples around: https://github.com/colinhacks/zod/search?q=AssertEqual\r\n\r\nOh, sorry I totally misunderstood. I'll add some tests for this :)",
          "@scotttrinh I added tests for type inference and type assertion with `flatten()` as well as additional checks.\r\n\r\nI don't know if  `all-errors.test.ts` is the right place as `safeparse.test.ts` also seemed like a good location for this, but let me know :)",
          "Wonderful! Thank you!",
          "When can we expect a release of this?"
        ]
      },
      {
        "pr_number": 860,
        "title": "change UUID regex to support different UUID variants",
        "body": "PR for issue #854 - UUID regex only validate Variant 1 UUIDs \r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/860",
        "comments": [
          "@narrowei \r\n\r\nDo you mind adding a few tests for the various UUID versions to the string tests?\r\n\r\nhttps://github.com/colinhacks/zod/blob/73a9a628e8e3f512908b5f2b4116a87197f43407/src/__tests__/string.test.ts#L80-L89",
          "@scotttrinh  No problem! will add unit tests for different various",
          "@scotttrinh have added tests to cover variants 0 and 2. Other files were automatically changed by the pre-commit lint fix.",
          "Thanks for the test cases, this is looking good! I'll spend some time in the next day or two to get it ready for merging. Not sure what the release schedule is going to be, but I don't think there is anything blocking this from going out in the next release. Thanks for getting this together!\r\n\r\n> Other files were automatically changed by the pre-commit lint fix.\r\n\r\nI think this might be due to some issue with prettier picking up your own configuration or using some global config? I can't see why it would've changed code that has ostensibly been sitting in the upstream branch all this time and wasn't changed. We can probably sort this out during the merge, but if you have time to remove any of the extraneous changes sooner than we do, feel free to push another commit.",
          "Hey @scotttrinh, thanks for reviewing my code and quick response! I have removed extraneous changes and pulled the code from the master branch.",
          "Hey @scotttrinh, any luck about the merge?"
        ]
      },
      {
        "pr_number": 860,
        "title": "change UUID regex to support different UUID variants",
        "body": "PR for issue #854 - UUID regex only validate Variant 1 UUIDs \r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/860",
        "comments": [
          "@narrowei \r\n\r\nDo you mind adding a few tests for the various UUID versions to the string tests?\r\n\r\nhttps://github.com/colinhacks/zod/blob/73a9a628e8e3f512908b5f2b4116a87197f43407/src/__tests__/string.test.ts#L80-L89",
          "@scotttrinh  No problem! will add unit tests for different various",
          "@scotttrinh have added tests to cover variants 0 and 2. Other files were automatically changed by the pre-commit lint fix.",
          "Thanks for the test cases, this is looking good! I'll spend some time in the next day or two to get it ready for merging. Not sure what the release schedule is going to be, but I don't think there is anything blocking this from going out in the next release. Thanks for getting this together!\r\n\r\n> Other files were automatically changed by the pre-commit lint fix.\r\n\r\nI think this might be due to some issue with prettier picking up your own configuration or using some global config? I can't see why it would've changed code that has ostensibly been sitting in the upstream branch all this time and wasn't changed. We can probably sort this out during the merge, but if you have time to remove any of the extraneous changes sooner than we do, feel free to push another commit.",
          "Hey @scotttrinh, thanks for reviewing my code and quick response! I have removed extraneous changes and pulled the code from the master branch.",
          "Hey @scotttrinh, any luck about the merge?"
        ]
      },
      {
        "pr_number": 860,
        "title": "change UUID regex to support different UUID variants",
        "body": "PR for issue #854 - UUID regex only validate Variant 1 UUIDs \r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/860",
        "comments": [
          "@narrowei \r\n\r\nDo you mind adding a few tests for the various UUID versions to the string tests?\r\n\r\nhttps://github.com/colinhacks/zod/blob/73a9a628e8e3f512908b5f2b4116a87197f43407/src/__tests__/string.test.ts#L80-L89",
          "@scotttrinh  No problem! will add unit tests for different various",
          "@scotttrinh have added tests to cover variants 0 and 2. Other files were automatically changed by the pre-commit lint fix.",
          "Thanks for the test cases, this is looking good! I'll spend some time in the next day or two to get it ready for merging. Not sure what the release schedule is going to be, but I don't think there is anything blocking this from going out in the next release. Thanks for getting this together!\r\n\r\n> Other files were automatically changed by the pre-commit lint fix.\r\n\r\nI think this might be due to some issue with prettier picking up your own configuration or using some global config? I can't see why it would've changed code that has ostensibly been sitting in the upstream branch all this time and wasn't changed. We can probably sort this out during the merge, but if you have time to remove any of the extraneous changes sooner than we do, feel free to push another commit.",
          "Hey @scotttrinh, thanks for reviewing my code and quick response! I have removed extraneous changes and pulled the code from the master branch.",
          "Hey @scotttrinh, any luck about the merge?"
        ]
      },
      {
        "pr_number": 876,
        "title": "README consistency fixes ",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/876",
        "comments": []
      },
      {
        "pr_number": 881,
        "title": "added z.date documentation to README.md. fixes #880",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/881",
        "comments": []
      },
      {
        "pr_number": 881,
        "title": "added z.date documentation to README.md. fixes #880",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/881",
        "comments": []
      },
      {
        "pr_number": 899,
        "title": "Discriminated union",
        "body": "Resolves #894.\r\n\r\nI implemented the `z.discriminatedUnion(discriminator, options)` method. I also added tests and benchmarks.\r\n\r\nHere are the results of the benchmarks to demonstrate the speed improvements introduced by the new `z.discriminatedUnion` method:\r\n```\r\nz.union: double: valid: a x 310,690 ops/sec \u00b13.68% (98 runs sampled)\r\nz.union: double: valid: b x 317,585 ops/sec \u00b10.13% (99 runs sampled)\r\nz.union: double: invalid: null x 52,452 ops/sec \u00b10.69% (94 runs sampled)\r\nz.union: double: invalid: wrong shape x 46,605 ops/sec \u00b10.43% (94 runs sampled)\r\nz.union: many: valid: a x 151,210 ops/sec \u00b13.75% (95 runs sampled)\r\nz.union: many: valid: c x 155,035 ops/sec \u00b10.21% (97 runs sampled)\r\nz.union: many: invalid: null x 31,971 ops/sec \u00b10.53% (93 runs sampled)\r\nz.union: many: invalid: wrong shape x 28,777 ops/sec \u00b10.42% (95 runs sampled)\r\n\r\nz.discriminatedUnion: double: valid: a x 857,014 ops/sec \u00b13.61% (99 runs sampled)\r\nz.discriminatedUnion: double: valid: b x 876,301 ops/sec \u00b10.15% (95 runs sampled)\r\nz.discriminatedUnion: double: invalid: null x 130,574 ops/sec \u00b10.55% (98 runs sampled)\r\nz.discriminatedUnion: double: invalid: wrong shape x 124,104 ops/sec \u00b13.36% (98 runs sampled)\r\nz.discriminatedUnion: many: valid: a x 859,193 ops/sec \u00b10.28% (94 runs sampled)\r\nz.discriminatedUnion: many: valid: c x 858,599 ops/sec \u00b10.30% (94 runs sampled)\r\nz.discriminatedUnion: many: invalid: null x 124,720 ops/sec \u00b10.36% (96 runs sampled)\r\nz.discriminatedUnion: many: invalid: wrong shape x 117,588 ops/sec \u00b13.44% (93 runs sampled)\r\n\r\nz.string: empty string x 3,263,033 ops/sec \u00b11.31% (94 runs sampled)\r\nz.string: short string x 3,254,089 ops/sec \u00b10.82% (93 runs sampled)\r\nz.string: long string x 3,249,335 ops/sec \u00b10.73% (93 runs sampled)\r\nz.string: invalid: null x 138,359 ops/sec \u00b10.58% (95 runs sampled)\r\nz.string: manual parser: long x 883,218,417 ops/sec \u00b10.31% (92 runs sampled)\r\nz.object: empty: valid x 2,477,603 ops/sec \u00b10.18% (97 runs sampled)\r\nz.object: empty: valid: extra keys x 2,291,072 ops/sec \u00b10.12% (95 runs sampled)\r\nz.object: empty: invalid: null x 142,172 ops/sec \u00b10.54% (97 runs sampled)\r\nz.object: short: valid x 1,139,297 ops/sec \u00b13.54% (99 runs sampled)\r\nz.object: short: valid: extra keys x 1,086,536 ops/sec \u00b10.30% (99 runs sampled)\r\nz.object: short: invalid: null x 141,700 ops/sec \u00b10.56% (96 runs sampled)\r\nz.object: long: valid x 481,833 ops/sec \u00b13.78% (91 runs sampled)\r\nz.object: long: valid: extra keys x 469,050 ops/sec \u00b10.24% (100 runs sampled)\r\nz.object: long: invalid: null x 145,378 ops/sec \u00b10.57% (97 runs sampled)\r\nDone in 165.07s.\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/899",
        "comments": [
          "Thanks @alexxander for this PR. The team I work with would have an immediate use for this as the current errors for unions can leave something to be desired. I am not sure what the current approval process for this project is but I would be happy to do an initial review before @colinhacks.",
          "Hi @EdsterG, firstly, thanks for the compliments on my work, I am glad you find this useful.\r\n\r\nHowever, I did try to handle that case you mentioned and I am failing to reproduce the incorrect error. Though it might be that something slipped through my fingers. I actually even created a new zod issue type for this particular purpose. See the test case bellow:\r\n\r\n```ts\r\ntest(\"invalid discriminator value\", () => {\r\n    expect.assertions(1);\r\n    try {\r\n      z.discriminatedUnion(\"type\", [\r\n        z.object({ type: z.literal(\"a\"), a: z.string() }),\r\n        z.object({ type: z.literal(\"b\"), b: z.string() }),\r\n      ]).parse({ type: \"x\", a: \"abc\" });\r\n    } catch (e: any) {\r\n      expect(JSON.parse(e.message)).toEqual([\r\n        {\r\n          code: z.ZodIssueCode.invalid_union_discriminator,\r\n          expectedOneOf: [\"a\", \"b\"],\r\n          received: \"x\",\r\n          message:\r\n            \"Invalid discriminator value. Expected one of: a, b. Received x.\",\r\n          path: [\"type\"],\r\n        },\r\n      ]);\r\n    }\r\n  });\r\n```\r\n\r\nI tried to pass other values in the `type` property - such as `null`, an object, `undefined`. I even tried leaving the property out. And in all the cases it seemed to work. Is there anything I am missing?",
          "Hi @CantelopePeel, before this PR, I also implemented a self-standing function to handle discriminated unions with zod. I guess you might be interested in that as well: https://github.com/colinhacks/zod/issues/792#issuecomment-1023251415.",
          "@alexxander yes that was my mistake. I was getting a very confusing error message and accidentally thought it was related to incorrect discriminator value. Your code correctly reports when an invalid discriminator is passed in. On that same note, there seems to be a previous issue to remove input values from the error messages. Might make sense to follow the same pattern and avoid having the input value as part of the error message. https://github.com/colinhacks/zod/issues/461",
          "> On that same note, there seems to be a previous issue to remove input values from the error messages. Might make sense to follow the same pattern and avoid having the input value as part of the error message\r\n\r\nYeah, it has been our practice to _not_ leak input or schema data in error messaging to avoid logging sensitive or personally-identifying information to logs/etc. Applications _should_ have the context at the call-site to report that sort of data themselves if they find it useful.",
          "Previously, the only supported discriminator value type was `string`. In the last commit, I added support for other primitive types supported by the `z.literal` function. The drawback is that I needed to use the `Map` data type. Should this be a problem, I can implement it using a separate object for each type:\r\n```js\r\nconst map = {\r\n  'string': {},\r\n  'number': {},\r\n  'bigint': {},\r\n  'boolean': {},\r\n  'object': {},\r\n  'undefined': {}\r\n};\r\nmap[typeof discriminatorValue][discriminatorValue] = schema;\r\n```\r\n\r\nWhat do you think @scotttrinh?",
          "Also, there are the failing _deno_ tests. I guess I have to modify the tests to be compatible with both _jest_ and _deno_? Any hints @scotttrinh?\r\n\r\nHow about using something like https://github.com/gcaptn/tincan? (Though this might be for a different issue.)",
          "> The drawback is that I needed to use the Map data type.\r\n\r\nGlad you called that out. Hmm. We don't have a strong platform support story, but if it's easy enough to implement in the nested way you've outlined then that's probably the safest bet here without wanting a major version bump and a line-in-the-sand policy about platform support.\r\n\r\n> Also, there are the failing deno tests. I guess I have to modify the tests to be compatible with both jest and deno?\r\n\r\nYeah, we are trying to be friendly to the Deno community as much as is feasible. I can take a look at the failing tests, but I have 0 experience with Deno so won't be too much specific help.",
          "Would it be possible to make this support lazy schemas? Otherwise it's not possible to use with discriminated recursive schemas.",
          "> Would it be possible to make this support lazy schemas?\r\n\r\n@EdsterG I will try to look into this :wink: \r\n\r\n",
          "@alexxander that would be super helpful, I know there's also a `z.late.object` methods that's implemented but undocumented. It's referenced here https://github.com/colinhacks/tozod but I'm not familiar with the inner workings of Zod so am having trouble getting it to work.",
          "Just would like to say I'm also looking forward to this PR, more human errors will be a very good improvement.",
          "> I know there's also a z.late.object methods that's implemented but undocumented.\r\n\r\nI believe that is a 2.0 construct. As far as I can tell in the source code, there is not `late` class.\r\n\r\nI'm actually wondering if we should put off supporting `lazy` here? @alexxander if you dig in a bit and run into any roadblocks, I think we should consider shipping what you have here and breaking off the further work into a separate PR.",
          "> Would it be possible to make this support lazy schemas?\r\n\r\n@EdsterG I tried some simple tests with `z.lazy`, and it seemed to work well. Did you find any particular issues?",
          "@alexxander here's a toy example where I get type errors:\r\n```\r\nimport {z} from 'zod';\r\n\r\ntype Category1 = {\r\n  type: 'Category1';\r\n  subcategories1: Array<Category>;\r\n};\r\n\r\ntype Category2 = {\r\n  type: 'Category2';\r\n  subcategories2: Array<Category>;\r\n};\r\n\r\nconst Category1Schema: z.ZodSchema<Category1> = z.object({\r\n  type: z.literal('Category1'),\r\n  subcategories1: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst Category2Schema: z.ZodSchema<Category2> = z.object({\r\n  type: z.literal('Category2'),\r\n  subcategories2: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst CategorySchema = z.discriminatedUnion('type', [Category1Schema, Category2Schema]);\r\ntype Category = z.infer<typeof CategorySchema>;\r\n```\r\nI get the following type error:\r\n```\r\nerror TS2740: Type 'ZodType<Category1, ZodTypeDef, Category1>' is missing the following properties from type 'ZodObject<{ type: ZodLiteral<Primitive>; } & ZodRawShape, any, any, { [x: string]: any; [x: number]: any; }, { [x: string]: any; [x: number]: any; }>': _shape, _unknownKeys, _catchall, _cached, and 16 more.\r\n\r\nconst CategorySchema = z.discriminatedUnion('type', [Category1Schema, Category2Schema]);\r\n```",
          "@EdsterG This fails because `z.discriminatedUnion` expects instances of `ZodObject`. You, however, typed `Category1Schema` and `Category2Schema`  as `ZodSchema`, which is an alias of `ZodType`.\r\n\r\nNonetheless, it is still possible to achieve what you want by slightly reorganizing the types.\r\n\r\n```ts\r\ntype Category1 = {\r\n  type: \"Category1\";\r\n  subcategories1: Array<Category>;\r\n};\r\n\r\ntype Category2 = {\r\n  type: \"Category2\";\r\n  subcategories2: Array<Category>;\r\n};\r\n\r\ntype Category = Category1 | Category2;\r\n\r\nconst Category1Schema = z.object({\r\n  type: z.literal(\"Category1\"),\r\n  subcategories1: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst Category2Schema = z.object({\r\n  type: z.literal(\"Category2\"),\r\n  subcategories2: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst CategorySchema: z.ZodSchema<Category> = z.discriminatedUnion(\"type\", [\r\n  Category1Schema,\r\n  Category2Schema,\r\n]);\r\n```\r\nOr even more compactly:\r\n```ts\r\ntype Category1 = {\r\n  type: \"Category1\";\r\n  subcategories1: Array<Category>;\r\n};\r\ntype Category2 = {\r\n  type: \"Category2\";\r\n  subcategories2: Array<Category>;\r\n};\r\ntype Category = Category1 | Category2;\r\n\r\nconst CategorySchema: z.ZodSchema<Category> = z.lazy(() =>\r\n  z.discriminatedUnion(\"type\", [\r\n    z.object({\r\n      type: z.literal(\"Category1\"),\r\n      subcategories1: z.array(CategorySchema),\r\n    }),\r\n    z.object({\r\n      type: z.literal(\"Category2\"),\r\n      subcategories2: z.array(CategorySchema),\r\n    }),\r\n  ])\r\n);\r\n```\r\n\r\nTherefore, I do not really think this is a big issue. But I guess I could try to make the discriminated union accept anything object-like. Though I would prefer to put it in a separate PR (if at all).\r\n\r\nAny views on this @scotttrinh?",
          "Ah, I see. The idea was that many types of categories would be defined through out the lifetime of the project so I wanted to avoid maintaining two sources of truth:\r\n```\r\ntype Category = Category1 | Category2;\r\n```\r\nand\r\n```\r\nconst CategorySchema: z.ZodSchema<Category> = z.discriminatedUnion(\"type\", [\r\n  Category1Schema,\r\n  Category2Schema,\r\n]);\r\n```\r\n\r\nHowever, I would agree that this change should go into a separate PR. In my opinion, this PR should be merged as is because its impact is too great to wait any longer.",
          "> ```ts\r\n> import {z} from 'zod';\r\n> \r\n> type Category1 = {\r\n>   type: 'Category1';\r\n>   subcategories1: Array<Category>;\r\n> };\r\n> \r\n> type Category2 = {\r\n>   type: 'Category2';\r\n>   subcategories2: Array<Category>;\r\n> };\r\n> \r\n> const Category1Schema: z.ZodSchema<Category1> = z.object({\r\n>   type: z.literal('Category1'),\r\n>   subcategories1: z.array(z.lazy(() => CategorySchema)),\r\n> });\r\n> \r\n> const Category2Schema: z.ZodSchema<Category2> = z.object({\r\n>   type: z.literal('Category2'),\r\n>   subcategories2: z.array(z.lazy(() => CategorySchema)),\r\n> });\r\n> \r\n> const CategorySchema = z.discriminatedUnion('type', [Category1Schema, Category2Schema]);\r\n> type Category = z.infer<typeof CategorySchema>;\r\n> ```\r\n\r\n@EdsterG, actually, even if `z.discriminatedUnion` accepted anything object-like, typescript would still throw recursion-related errors with your solution quoted above. The thing is that `Category` is inferred from `CategorySchema`, which refers to `Category1Schema` of type `Category1`. However, `Category1` refers to `Category`.\r\n\r\n",
          "@scotttrinh I added the simplified implementation of the map data structure as it was outlined in one of my previous comments (`util.SimpleMap`). It implements `get(key)`, `set(key, value)`, `has(key)`, `keys()` and the `size` property. Though I am not completely happy about the additional complexity it introduces (I mean, `Map` is well documented in the standards, while this one is custom and does not fully adhere to the `Map` interface). But it might be a good trade-off between a full `Map` polyfill and relying on `Map` being present in the environment.",
          "@alexxander \r\n\r\nLooking at https://caniuse.com/mdn-javascript_builtins_map I'm personally fine with IE11+ here, so `Map` still seems like a reasonable choice. We use `const`/`let` which has even worse support than `Map` (TIL!).\r\n\r\n@EdsterG \r\n\r\nRE: The type errors related to `ZodSchema`/`ZodType`\r\n\r\nWe shouldn't do too much work to support explicit types like the examples given here. Zod takes a pretty opinionated and strong stance that it should be the source of truth for types and does a best-effort job of supporting defining the types in TypeScript first. The big place of friction with this is external types that you do not control, so it's definitely ideal for it to work well if possible, but we should not spend too much development effort trying to get it to work. If `z.infer`/`z.input`/`z.output` is able to infer the correct type, that's our primary concern.",
          "@scotttrinh So I should revert it to the state in which `Map` is used, right?\r\nIs there anything else that has to be done (or that has to be changed) before this can be merged?",
          "> @scotttrinh So I should revert it to the state in which Map is used, right?\r\n> Is there anything else that has to be done (or that has to be changed) before this can be merged?\r\n\r\nJust went back through the code, and it looks very good to me, thank you for all of your hard work here! Once you get it back to using a `Map`, do you mind just running the benchmarks again and updating the description if they're different at all from the first time you ran it?",
          "@scotttrinh I reverted it. So now it uses `Map` again. I also ran the benchmarks and updated the pull request description.",
          "Whoa, amazing! This is just what we needed today. But looks like this isn't published to npm yet? Any way we can get a beta published?",
          "I published the latest master branch for anyone else who needs it.\r\n\r\nSet this in your package.json\r\n```json\r\n\"zod\": \"npm:@flybayer/zod@3.11.7-discriminatedUnion\"\r\n```"
        ]
      },
      {
        "pr_number": 899,
        "title": "Discriminated union",
        "body": "Resolves #894.\r\n\r\nI implemented the `z.discriminatedUnion(discriminator, options)` method. I also added tests and benchmarks.\r\n\r\nHere are the results of the benchmarks to demonstrate the speed improvements introduced by the new `z.discriminatedUnion` method:\r\n```\r\nz.union: double: valid: a x 310,690 ops/sec \u00b13.68% (98 runs sampled)\r\nz.union: double: valid: b x 317,585 ops/sec \u00b10.13% (99 runs sampled)\r\nz.union: double: invalid: null x 52,452 ops/sec \u00b10.69% (94 runs sampled)\r\nz.union: double: invalid: wrong shape x 46,605 ops/sec \u00b10.43% (94 runs sampled)\r\nz.union: many: valid: a x 151,210 ops/sec \u00b13.75% (95 runs sampled)\r\nz.union: many: valid: c x 155,035 ops/sec \u00b10.21% (97 runs sampled)\r\nz.union: many: invalid: null x 31,971 ops/sec \u00b10.53% (93 runs sampled)\r\nz.union: many: invalid: wrong shape x 28,777 ops/sec \u00b10.42% (95 runs sampled)\r\n\r\nz.discriminatedUnion: double: valid: a x 857,014 ops/sec \u00b13.61% (99 runs sampled)\r\nz.discriminatedUnion: double: valid: b x 876,301 ops/sec \u00b10.15% (95 runs sampled)\r\nz.discriminatedUnion: double: invalid: null x 130,574 ops/sec \u00b10.55% (98 runs sampled)\r\nz.discriminatedUnion: double: invalid: wrong shape x 124,104 ops/sec \u00b13.36% (98 runs sampled)\r\nz.discriminatedUnion: many: valid: a x 859,193 ops/sec \u00b10.28% (94 runs sampled)\r\nz.discriminatedUnion: many: valid: c x 858,599 ops/sec \u00b10.30% (94 runs sampled)\r\nz.discriminatedUnion: many: invalid: null x 124,720 ops/sec \u00b10.36% (96 runs sampled)\r\nz.discriminatedUnion: many: invalid: wrong shape x 117,588 ops/sec \u00b13.44% (93 runs sampled)\r\n\r\nz.string: empty string x 3,263,033 ops/sec \u00b11.31% (94 runs sampled)\r\nz.string: short string x 3,254,089 ops/sec \u00b10.82% (93 runs sampled)\r\nz.string: long string x 3,249,335 ops/sec \u00b10.73% (93 runs sampled)\r\nz.string: invalid: null x 138,359 ops/sec \u00b10.58% (95 runs sampled)\r\nz.string: manual parser: long x 883,218,417 ops/sec \u00b10.31% (92 runs sampled)\r\nz.object: empty: valid x 2,477,603 ops/sec \u00b10.18% (97 runs sampled)\r\nz.object: empty: valid: extra keys x 2,291,072 ops/sec \u00b10.12% (95 runs sampled)\r\nz.object: empty: invalid: null x 142,172 ops/sec \u00b10.54% (97 runs sampled)\r\nz.object: short: valid x 1,139,297 ops/sec \u00b13.54% (99 runs sampled)\r\nz.object: short: valid: extra keys x 1,086,536 ops/sec \u00b10.30% (99 runs sampled)\r\nz.object: short: invalid: null x 141,700 ops/sec \u00b10.56% (96 runs sampled)\r\nz.object: long: valid x 481,833 ops/sec \u00b13.78% (91 runs sampled)\r\nz.object: long: valid: extra keys x 469,050 ops/sec \u00b10.24% (100 runs sampled)\r\nz.object: long: invalid: null x 145,378 ops/sec \u00b10.57% (97 runs sampled)\r\nDone in 165.07s.\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/899",
        "comments": [
          "Thanks @alexxander for this PR. The team I work with would have an immediate use for this as the current errors for unions can leave something to be desired. I am not sure what the current approval process for this project is but I would be happy to do an initial review before @colinhacks.",
          "Hi @EdsterG, firstly, thanks for the compliments on my work, I am glad you find this useful.\r\n\r\nHowever, I did try to handle that case you mentioned and I am failing to reproduce the incorrect error. Though it might be that something slipped through my fingers. I actually even created a new zod issue type for this particular purpose. See the test case bellow:\r\n\r\n```ts\r\ntest(\"invalid discriminator value\", () => {\r\n    expect.assertions(1);\r\n    try {\r\n      z.discriminatedUnion(\"type\", [\r\n        z.object({ type: z.literal(\"a\"), a: z.string() }),\r\n        z.object({ type: z.literal(\"b\"), b: z.string() }),\r\n      ]).parse({ type: \"x\", a: \"abc\" });\r\n    } catch (e: any) {\r\n      expect(JSON.parse(e.message)).toEqual([\r\n        {\r\n          code: z.ZodIssueCode.invalid_union_discriminator,\r\n          expectedOneOf: [\"a\", \"b\"],\r\n          received: \"x\",\r\n          message:\r\n            \"Invalid discriminator value. Expected one of: a, b. Received x.\",\r\n          path: [\"type\"],\r\n        },\r\n      ]);\r\n    }\r\n  });\r\n```\r\n\r\nI tried to pass other values in the `type` property - such as `null`, an object, `undefined`. I even tried leaving the property out. And in all the cases it seemed to work. Is there anything I am missing?",
          "Hi @CantelopePeel, before this PR, I also implemented a self-standing function to handle discriminated unions with zod. I guess you might be interested in that as well: https://github.com/colinhacks/zod/issues/792#issuecomment-1023251415.",
          "@alexxander yes that was my mistake. I was getting a very confusing error message and accidentally thought it was related to incorrect discriminator value. Your code correctly reports when an invalid discriminator is passed in. On that same note, there seems to be a previous issue to remove input values from the error messages. Might make sense to follow the same pattern and avoid having the input value as part of the error message. https://github.com/colinhacks/zod/issues/461",
          "> On that same note, there seems to be a previous issue to remove input values from the error messages. Might make sense to follow the same pattern and avoid having the input value as part of the error message\r\n\r\nYeah, it has been our practice to _not_ leak input or schema data in error messaging to avoid logging sensitive or personally-identifying information to logs/etc. Applications _should_ have the context at the call-site to report that sort of data themselves if they find it useful.",
          "Previously, the only supported discriminator value type was `string`. In the last commit, I added support for other primitive types supported by the `z.literal` function. The drawback is that I needed to use the `Map` data type. Should this be a problem, I can implement it using a separate object for each type:\r\n```js\r\nconst map = {\r\n  'string': {},\r\n  'number': {},\r\n  'bigint': {},\r\n  'boolean': {},\r\n  'object': {},\r\n  'undefined': {}\r\n};\r\nmap[typeof discriminatorValue][discriminatorValue] = schema;\r\n```\r\n\r\nWhat do you think @scotttrinh?",
          "Also, there are the failing _deno_ tests. I guess I have to modify the tests to be compatible with both _jest_ and _deno_? Any hints @scotttrinh?\r\n\r\nHow about using something like https://github.com/gcaptn/tincan? (Though this might be for a different issue.)",
          "> The drawback is that I needed to use the Map data type.\r\n\r\nGlad you called that out. Hmm. We don't have a strong platform support story, but if it's easy enough to implement in the nested way you've outlined then that's probably the safest bet here without wanting a major version bump and a line-in-the-sand policy about platform support.\r\n\r\n> Also, there are the failing deno tests. I guess I have to modify the tests to be compatible with both jest and deno?\r\n\r\nYeah, we are trying to be friendly to the Deno community as much as is feasible. I can take a look at the failing tests, but I have 0 experience with Deno so won't be too much specific help.",
          "Would it be possible to make this support lazy schemas? Otherwise it's not possible to use with discriminated recursive schemas.",
          "> Would it be possible to make this support lazy schemas?\r\n\r\n@EdsterG I will try to look into this :wink: \r\n\r\n",
          "@alexxander that would be super helpful, I know there's also a `z.late.object` methods that's implemented but undocumented. It's referenced here https://github.com/colinhacks/tozod but I'm not familiar with the inner workings of Zod so am having trouble getting it to work.",
          "Just would like to say I'm also looking forward to this PR, more human errors will be a very good improvement.",
          "> I know there's also a z.late.object methods that's implemented but undocumented.\r\n\r\nI believe that is a 2.0 construct. As far as I can tell in the source code, there is not `late` class.\r\n\r\nI'm actually wondering if we should put off supporting `lazy` here? @alexxander if you dig in a bit and run into any roadblocks, I think we should consider shipping what you have here and breaking off the further work into a separate PR.",
          "> Would it be possible to make this support lazy schemas?\r\n\r\n@EdsterG I tried some simple tests with `z.lazy`, and it seemed to work well. Did you find any particular issues?",
          "@alexxander here's a toy example where I get type errors:\r\n```\r\nimport {z} from 'zod';\r\n\r\ntype Category1 = {\r\n  type: 'Category1';\r\n  subcategories1: Array<Category>;\r\n};\r\n\r\ntype Category2 = {\r\n  type: 'Category2';\r\n  subcategories2: Array<Category>;\r\n};\r\n\r\nconst Category1Schema: z.ZodSchema<Category1> = z.object({\r\n  type: z.literal('Category1'),\r\n  subcategories1: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst Category2Schema: z.ZodSchema<Category2> = z.object({\r\n  type: z.literal('Category2'),\r\n  subcategories2: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst CategorySchema = z.discriminatedUnion('type', [Category1Schema, Category2Schema]);\r\ntype Category = z.infer<typeof CategorySchema>;\r\n```\r\nI get the following type error:\r\n```\r\nerror TS2740: Type 'ZodType<Category1, ZodTypeDef, Category1>' is missing the following properties from type 'ZodObject<{ type: ZodLiteral<Primitive>; } & ZodRawShape, any, any, { [x: string]: any; [x: number]: any; }, { [x: string]: any; [x: number]: any; }>': _shape, _unknownKeys, _catchall, _cached, and 16 more.\r\n\r\nconst CategorySchema = z.discriminatedUnion('type', [Category1Schema, Category2Schema]);\r\n```",
          "@EdsterG This fails because `z.discriminatedUnion` expects instances of `ZodObject`. You, however, typed `Category1Schema` and `Category2Schema`  as `ZodSchema`, which is an alias of `ZodType`.\r\n\r\nNonetheless, it is still possible to achieve what you want by slightly reorganizing the types.\r\n\r\n```ts\r\ntype Category1 = {\r\n  type: \"Category1\";\r\n  subcategories1: Array<Category>;\r\n};\r\n\r\ntype Category2 = {\r\n  type: \"Category2\";\r\n  subcategories2: Array<Category>;\r\n};\r\n\r\ntype Category = Category1 | Category2;\r\n\r\nconst Category1Schema = z.object({\r\n  type: z.literal(\"Category1\"),\r\n  subcategories1: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst Category2Schema = z.object({\r\n  type: z.literal(\"Category2\"),\r\n  subcategories2: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst CategorySchema: z.ZodSchema<Category> = z.discriminatedUnion(\"type\", [\r\n  Category1Schema,\r\n  Category2Schema,\r\n]);\r\n```\r\nOr even more compactly:\r\n```ts\r\ntype Category1 = {\r\n  type: \"Category1\";\r\n  subcategories1: Array<Category>;\r\n};\r\ntype Category2 = {\r\n  type: \"Category2\";\r\n  subcategories2: Array<Category>;\r\n};\r\ntype Category = Category1 | Category2;\r\n\r\nconst CategorySchema: z.ZodSchema<Category> = z.lazy(() =>\r\n  z.discriminatedUnion(\"type\", [\r\n    z.object({\r\n      type: z.literal(\"Category1\"),\r\n      subcategories1: z.array(CategorySchema),\r\n    }),\r\n    z.object({\r\n      type: z.literal(\"Category2\"),\r\n      subcategories2: z.array(CategorySchema),\r\n    }),\r\n  ])\r\n);\r\n```\r\n\r\nTherefore, I do not really think this is a big issue. But I guess I could try to make the discriminated union accept anything object-like. Though I would prefer to put it in a separate PR (if at all).\r\n\r\nAny views on this @scotttrinh?",
          "Ah, I see. The idea was that many types of categories would be defined through out the lifetime of the project so I wanted to avoid maintaining two sources of truth:\r\n```\r\ntype Category = Category1 | Category2;\r\n```\r\nand\r\n```\r\nconst CategorySchema: z.ZodSchema<Category> = z.discriminatedUnion(\"type\", [\r\n  Category1Schema,\r\n  Category2Schema,\r\n]);\r\n```\r\n\r\nHowever, I would agree that this change should go into a separate PR. In my opinion, this PR should be merged as is because its impact is too great to wait any longer.",
          "> ```ts\r\n> import {z} from 'zod';\r\n> \r\n> type Category1 = {\r\n>   type: 'Category1';\r\n>   subcategories1: Array<Category>;\r\n> };\r\n> \r\n> type Category2 = {\r\n>   type: 'Category2';\r\n>   subcategories2: Array<Category>;\r\n> };\r\n> \r\n> const Category1Schema: z.ZodSchema<Category1> = z.object({\r\n>   type: z.literal('Category1'),\r\n>   subcategories1: z.array(z.lazy(() => CategorySchema)),\r\n> });\r\n> \r\n> const Category2Schema: z.ZodSchema<Category2> = z.object({\r\n>   type: z.literal('Category2'),\r\n>   subcategories2: z.array(z.lazy(() => CategorySchema)),\r\n> });\r\n> \r\n> const CategorySchema = z.discriminatedUnion('type', [Category1Schema, Category2Schema]);\r\n> type Category = z.infer<typeof CategorySchema>;\r\n> ```\r\n\r\n@EdsterG, actually, even if `z.discriminatedUnion` accepted anything object-like, typescript would still throw recursion-related errors with your solution quoted above. The thing is that `Category` is inferred from `CategorySchema`, which refers to `Category1Schema` of type `Category1`. However, `Category1` refers to `Category`.\r\n\r\n",
          "@scotttrinh I added the simplified implementation of the map data structure as it was outlined in one of my previous comments (`util.SimpleMap`). It implements `get(key)`, `set(key, value)`, `has(key)`, `keys()` and the `size` property. Though I am not completely happy about the additional complexity it introduces (I mean, `Map` is well documented in the standards, while this one is custom and does not fully adhere to the `Map` interface). But it might be a good trade-off between a full `Map` polyfill and relying on `Map` being present in the environment.",
          "@alexxander \r\n\r\nLooking at https://caniuse.com/mdn-javascript_builtins_map I'm personally fine with IE11+ here, so `Map` still seems like a reasonable choice. We use `const`/`let` which has even worse support than `Map` (TIL!).\r\n\r\n@EdsterG \r\n\r\nRE: The type errors related to `ZodSchema`/`ZodType`\r\n\r\nWe shouldn't do too much work to support explicit types like the examples given here. Zod takes a pretty opinionated and strong stance that it should be the source of truth for types and does a best-effort job of supporting defining the types in TypeScript first. The big place of friction with this is external types that you do not control, so it's definitely ideal for it to work well if possible, but we should not spend too much development effort trying to get it to work. If `z.infer`/`z.input`/`z.output` is able to infer the correct type, that's our primary concern.",
          "@scotttrinh So I should revert it to the state in which `Map` is used, right?\r\nIs there anything else that has to be done (or that has to be changed) before this can be merged?",
          "> @scotttrinh So I should revert it to the state in which Map is used, right?\r\n> Is there anything else that has to be done (or that has to be changed) before this can be merged?\r\n\r\nJust went back through the code, and it looks very good to me, thank you for all of your hard work here! Once you get it back to using a `Map`, do you mind just running the benchmarks again and updating the description if they're different at all from the first time you ran it?",
          "@scotttrinh I reverted it. So now it uses `Map` again. I also ran the benchmarks and updated the pull request description.",
          "Whoa, amazing! This is just what we needed today. But looks like this isn't published to npm yet? Any way we can get a beta published?",
          "I published the latest master branch for anyone else who needs it.\r\n\r\nSet this in your package.json\r\n```json\r\n\"zod\": \"npm:@flybayer/zod@3.11.7-discriminatedUnion\"\r\n```"
        ]
      },
      {
        "pr_number": 899,
        "title": "Discriminated union",
        "body": "Resolves #894.\r\n\r\nI implemented the `z.discriminatedUnion(discriminator, options)` method. I also added tests and benchmarks.\r\n\r\nHere are the results of the benchmarks to demonstrate the speed improvements introduced by the new `z.discriminatedUnion` method:\r\n```\r\nz.union: double: valid: a x 310,690 ops/sec \u00b13.68% (98 runs sampled)\r\nz.union: double: valid: b x 317,585 ops/sec \u00b10.13% (99 runs sampled)\r\nz.union: double: invalid: null x 52,452 ops/sec \u00b10.69% (94 runs sampled)\r\nz.union: double: invalid: wrong shape x 46,605 ops/sec \u00b10.43% (94 runs sampled)\r\nz.union: many: valid: a x 151,210 ops/sec \u00b13.75% (95 runs sampled)\r\nz.union: many: valid: c x 155,035 ops/sec \u00b10.21% (97 runs sampled)\r\nz.union: many: invalid: null x 31,971 ops/sec \u00b10.53% (93 runs sampled)\r\nz.union: many: invalid: wrong shape x 28,777 ops/sec \u00b10.42% (95 runs sampled)\r\n\r\nz.discriminatedUnion: double: valid: a x 857,014 ops/sec \u00b13.61% (99 runs sampled)\r\nz.discriminatedUnion: double: valid: b x 876,301 ops/sec \u00b10.15% (95 runs sampled)\r\nz.discriminatedUnion: double: invalid: null x 130,574 ops/sec \u00b10.55% (98 runs sampled)\r\nz.discriminatedUnion: double: invalid: wrong shape x 124,104 ops/sec \u00b13.36% (98 runs sampled)\r\nz.discriminatedUnion: many: valid: a x 859,193 ops/sec \u00b10.28% (94 runs sampled)\r\nz.discriminatedUnion: many: valid: c x 858,599 ops/sec \u00b10.30% (94 runs sampled)\r\nz.discriminatedUnion: many: invalid: null x 124,720 ops/sec \u00b10.36% (96 runs sampled)\r\nz.discriminatedUnion: many: invalid: wrong shape x 117,588 ops/sec \u00b13.44% (93 runs sampled)\r\n\r\nz.string: empty string x 3,263,033 ops/sec \u00b11.31% (94 runs sampled)\r\nz.string: short string x 3,254,089 ops/sec \u00b10.82% (93 runs sampled)\r\nz.string: long string x 3,249,335 ops/sec \u00b10.73% (93 runs sampled)\r\nz.string: invalid: null x 138,359 ops/sec \u00b10.58% (95 runs sampled)\r\nz.string: manual parser: long x 883,218,417 ops/sec \u00b10.31% (92 runs sampled)\r\nz.object: empty: valid x 2,477,603 ops/sec \u00b10.18% (97 runs sampled)\r\nz.object: empty: valid: extra keys x 2,291,072 ops/sec \u00b10.12% (95 runs sampled)\r\nz.object: empty: invalid: null x 142,172 ops/sec \u00b10.54% (97 runs sampled)\r\nz.object: short: valid x 1,139,297 ops/sec \u00b13.54% (99 runs sampled)\r\nz.object: short: valid: extra keys x 1,086,536 ops/sec \u00b10.30% (99 runs sampled)\r\nz.object: short: invalid: null x 141,700 ops/sec \u00b10.56% (96 runs sampled)\r\nz.object: long: valid x 481,833 ops/sec \u00b13.78% (91 runs sampled)\r\nz.object: long: valid: extra keys x 469,050 ops/sec \u00b10.24% (100 runs sampled)\r\nz.object: long: invalid: null x 145,378 ops/sec \u00b10.57% (97 runs sampled)\r\nDone in 165.07s.\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/899",
        "comments": [
          "Thanks @alexxander for this PR. The team I work with would have an immediate use for this as the current errors for unions can leave something to be desired. I am not sure what the current approval process for this project is but I would be happy to do an initial review before @colinhacks.",
          "Hi @EdsterG, firstly, thanks for the compliments on my work, I am glad you find this useful.\r\n\r\nHowever, I did try to handle that case you mentioned and I am failing to reproduce the incorrect error. Though it might be that something slipped through my fingers. I actually even created a new zod issue type for this particular purpose. See the test case bellow:\r\n\r\n```ts\r\ntest(\"invalid discriminator value\", () => {\r\n    expect.assertions(1);\r\n    try {\r\n      z.discriminatedUnion(\"type\", [\r\n        z.object({ type: z.literal(\"a\"), a: z.string() }),\r\n        z.object({ type: z.literal(\"b\"), b: z.string() }),\r\n      ]).parse({ type: \"x\", a: \"abc\" });\r\n    } catch (e: any) {\r\n      expect(JSON.parse(e.message)).toEqual([\r\n        {\r\n          code: z.ZodIssueCode.invalid_union_discriminator,\r\n          expectedOneOf: [\"a\", \"b\"],\r\n          received: \"x\",\r\n          message:\r\n            \"Invalid discriminator value. Expected one of: a, b. Received x.\",\r\n          path: [\"type\"],\r\n        },\r\n      ]);\r\n    }\r\n  });\r\n```\r\n\r\nI tried to pass other values in the `type` property - such as `null`, an object, `undefined`. I even tried leaving the property out. And in all the cases it seemed to work. Is there anything I am missing?",
          "Hi @CantelopePeel, before this PR, I also implemented a self-standing function to handle discriminated unions with zod. I guess you might be interested in that as well: https://github.com/colinhacks/zod/issues/792#issuecomment-1023251415.",
          "@alexxander yes that was my mistake. I was getting a very confusing error message and accidentally thought it was related to incorrect discriminator value. Your code correctly reports when an invalid discriminator is passed in. On that same note, there seems to be a previous issue to remove input values from the error messages. Might make sense to follow the same pattern and avoid having the input value as part of the error message. https://github.com/colinhacks/zod/issues/461",
          "> On that same note, there seems to be a previous issue to remove input values from the error messages. Might make sense to follow the same pattern and avoid having the input value as part of the error message\r\n\r\nYeah, it has been our practice to _not_ leak input or schema data in error messaging to avoid logging sensitive or personally-identifying information to logs/etc. Applications _should_ have the context at the call-site to report that sort of data themselves if they find it useful.",
          "Previously, the only supported discriminator value type was `string`. In the last commit, I added support for other primitive types supported by the `z.literal` function. The drawback is that I needed to use the `Map` data type. Should this be a problem, I can implement it using a separate object for each type:\r\n```js\r\nconst map = {\r\n  'string': {},\r\n  'number': {},\r\n  'bigint': {},\r\n  'boolean': {},\r\n  'object': {},\r\n  'undefined': {}\r\n};\r\nmap[typeof discriminatorValue][discriminatorValue] = schema;\r\n```\r\n\r\nWhat do you think @scotttrinh?",
          "Also, there are the failing _deno_ tests. I guess I have to modify the tests to be compatible with both _jest_ and _deno_? Any hints @scotttrinh?\r\n\r\nHow about using something like https://github.com/gcaptn/tincan? (Though this might be for a different issue.)",
          "> The drawback is that I needed to use the Map data type.\r\n\r\nGlad you called that out. Hmm. We don't have a strong platform support story, but if it's easy enough to implement in the nested way you've outlined then that's probably the safest bet here without wanting a major version bump and a line-in-the-sand policy about platform support.\r\n\r\n> Also, there are the failing deno tests. I guess I have to modify the tests to be compatible with both jest and deno?\r\n\r\nYeah, we are trying to be friendly to the Deno community as much as is feasible. I can take a look at the failing tests, but I have 0 experience with Deno so won't be too much specific help.",
          "Would it be possible to make this support lazy schemas? Otherwise it's not possible to use with discriminated recursive schemas.",
          "> Would it be possible to make this support lazy schemas?\r\n\r\n@EdsterG I will try to look into this :wink: \r\n\r\n",
          "@alexxander that would be super helpful, I know there's also a `z.late.object` methods that's implemented but undocumented. It's referenced here https://github.com/colinhacks/tozod but I'm not familiar with the inner workings of Zod so am having trouble getting it to work.",
          "Just would like to say I'm also looking forward to this PR, more human errors will be a very good improvement.",
          "> I know there's also a z.late.object methods that's implemented but undocumented.\r\n\r\nI believe that is a 2.0 construct. As far as I can tell in the source code, there is not `late` class.\r\n\r\nI'm actually wondering if we should put off supporting `lazy` here? @alexxander if you dig in a bit and run into any roadblocks, I think we should consider shipping what you have here and breaking off the further work into a separate PR.",
          "> Would it be possible to make this support lazy schemas?\r\n\r\n@EdsterG I tried some simple tests with `z.lazy`, and it seemed to work well. Did you find any particular issues?",
          "@alexxander here's a toy example where I get type errors:\r\n```\r\nimport {z} from 'zod';\r\n\r\ntype Category1 = {\r\n  type: 'Category1';\r\n  subcategories1: Array<Category>;\r\n};\r\n\r\ntype Category2 = {\r\n  type: 'Category2';\r\n  subcategories2: Array<Category>;\r\n};\r\n\r\nconst Category1Schema: z.ZodSchema<Category1> = z.object({\r\n  type: z.literal('Category1'),\r\n  subcategories1: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst Category2Schema: z.ZodSchema<Category2> = z.object({\r\n  type: z.literal('Category2'),\r\n  subcategories2: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst CategorySchema = z.discriminatedUnion('type', [Category1Schema, Category2Schema]);\r\ntype Category = z.infer<typeof CategorySchema>;\r\n```\r\nI get the following type error:\r\n```\r\nerror TS2740: Type 'ZodType<Category1, ZodTypeDef, Category1>' is missing the following properties from type 'ZodObject<{ type: ZodLiteral<Primitive>; } & ZodRawShape, any, any, { [x: string]: any; [x: number]: any; }, { [x: string]: any; [x: number]: any; }>': _shape, _unknownKeys, _catchall, _cached, and 16 more.\r\n\r\nconst CategorySchema = z.discriminatedUnion('type', [Category1Schema, Category2Schema]);\r\n```",
          "@EdsterG This fails because `z.discriminatedUnion` expects instances of `ZodObject`. You, however, typed `Category1Schema` and `Category2Schema`  as `ZodSchema`, which is an alias of `ZodType`.\r\n\r\nNonetheless, it is still possible to achieve what you want by slightly reorganizing the types.\r\n\r\n```ts\r\ntype Category1 = {\r\n  type: \"Category1\";\r\n  subcategories1: Array<Category>;\r\n};\r\n\r\ntype Category2 = {\r\n  type: \"Category2\";\r\n  subcategories2: Array<Category>;\r\n};\r\n\r\ntype Category = Category1 | Category2;\r\n\r\nconst Category1Schema = z.object({\r\n  type: z.literal(\"Category1\"),\r\n  subcategories1: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst Category2Schema = z.object({\r\n  type: z.literal(\"Category2\"),\r\n  subcategories2: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst CategorySchema: z.ZodSchema<Category> = z.discriminatedUnion(\"type\", [\r\n  Category1Schema,\r\n  Category2Schema,\r\n]);\r\n```\r\nOr even more compactly:\r\n```ts\r\ntype Category1 = {\r\n  type: \"Category1\";\r\n  subcategories1: Array<Category>;\r\n};\r\ntype Category2 = {\r\n  type: \"Category2\";\r\n  subcategories2: Array<Category>;\r\n};\r\ntype Category = Category1 | Category2;\r\n\r\nconst CategorySchema: z.ZodSchema<Category> = z.lazy(() =>\r\n  z.discriminatedUnion(\"type\", [\r\n    z.object({\r\n      type: z.literal(\"Category1\"),\r\n      subcategories1: z.array(CategorySchema),\r\n    }),\r\n    z.object({\r\n      type: z.literal(\"Category2\"),\r\n      subcategories2: z.array(CategorySchema),\r\n    }),\r\n  ])\r\n);\r\n```\r\n\r\nTherefore, I do not really think this is a big issue. But I guess I could try to make the discriminated union accept anything object-like. Though I would prefer to put it in a separate PR (if at all).\r\n\r\nAny views on this @scotttrinh?",
          "Ah, I see. The idea was that many types of categories would be defined through out the lifetime of the project so I wanted to avoid maintaining two sources of truth:\r\n```\r\ntype Category = Category1 | Category2;\r\n```\r\nand\r\n```\r\nconst CategorySchema: z.ZodSchema<Category> = z.discriminatedUnion(\"type\", [\r\n  Category1Schema,\r\n  Category2Schema,\r\n]);\r\n```\r\n\r\nHowever, I would agree that this change should go into a separate PR. In my opinion, this PR should be merged as is because its impact is too great to wait any longer.",
          "> ```ts\r\n> import {z} from 'zod';\r\n> \r\n> type Category1 = {\r\n>   type: 'Category1';\r\n>   subcategories1: Array<Category>;\r\n> };\r\n> \r\n> type Category2 = {\r\n>   type: 'Category2';\r\n>   subcategories2: Array<Category>;\r\n> };\r\n> \r\n> const Category1Schema: z.ZodSchema<Category1> = z.object({\r\n>   type: z.literal('Category1'),\r\n>   subcategories1: z.array(z.lazy(() => CategorySchema)),\r\n> });\r\n> \r\n> const Category2Schema: z.ZodSchema<Category2> = z.object({\r\n>   type: z.literal('Category2'),\r\n>   subcategories2: z.array(z.lazy(() => CategorySchema)),\r\n> });\r\n> \r\n> const CategorySchema = z.discriminatedUnion('type', [Category1Schema, Category2Schema]);\r\n> type Category = z.infer<typeof CategorySchema>;\r\n> ```\r\n\r\n@EdsterG, actually, even if `z.discriminatedUnion` accepted anything object-like, typescript would still throw recursion-related errors with your solution quoted above. The thing is that `Category` is inferred from `CategorySchema`, which refers to `Category1Schema` of type `Category1`. However, `Category1` refers to `Category`.\r\n\r\n",
          "@scotttrinh I added the simplified implementation of the map data structure as it was outlined in one of my previous comments (`util.SimpleMap`). It implements `get(key)`, `set(key, value)`, `has(key)`, `keys()` and the `size` property. Though I am not completely happy about the additional complexity it introduces (I mean, `Map` is well documented in the standards, while this one is custom and does not fully adhere to the `Map` interface). But it might be a good trade-off between a full `Map` polyfill and relying on `Map` being present in the environment.",
          "@alexxander \r\n\r\nLooking at https://caniuse.com/mdn-javascript_builtins_map I'm personally fine with IE11+ here, so `Map` still seems like a reasonable choice. We use `const`/`let` which has even worse support than `Map` (TIL!).\r\n\r\n@EdsterG \r\n\r\nRE: The type errors related to `ZodSchema`/`ZodType`\r\n\r\nWe shouldn't do too much work to support explicit types like the examples given here. Zod takes a pretty opinionated and strong stance that it should be the source of truth for types and does a best-effort job of supporting defining the types in TypeScript first. The big place of friction with this is external types that you do not control, so it's definitely ideal for it to work well if possible, but we should not spend too much development effort trying to get it to work. If `z.infer`/`z.input`/`z.output` is able to infer the correct type, that's our primary concern.",
          "@scotttrinh So I should revert it to the state in which `Map` is used, right?\r\nIs there anything else that has to be done (or that has to be changed) before this can be merged?",
          "> @scotttrinh So I should revert it to the state in which Map is used, right?\r\n> Is there anything else that has to be done (or that has to be changed) before this can be merged?\r\n\r\nJust went back through the code, and it looks very good to me, thank you for all of your hard work here! Once you get it back to using a `Map`, do you mind just running the benchmarks again and updating the description if they're different at all from the first time you ran it?",
          "@scotttrinh I reverted it. So now it uses `Map` again. I also ran the benchmarks and updated the pull request description.",
          "Whoa, amazing! This is just what we needed today. But looks like this isn't published to npm yet? Any way we can get a beta published?",
          "I published the latest master branch for anyone else who needs it.\r\n\r\nSet this in your package.json\r\n```json\r\n\"zod\": \"npm:@flybayer/zod@3.11.7-discriminatedUnion\"\r\n```"
        ]
      },
      {
        "pr_number": 899,
        "title": "Discriminated union",
        "body": "Resolves #894.\r\n\r\nI implemented the `z.discriminatedUnion(discriminator, options)` method. I also added tests and benchmarks.\r\n\r\nHere are the results of the benchmarks to demonstrate the speed improvements introduced by the new `z.discriminatedUnion` method:\r\n```\r\nz.union: double: valid: a x 310,690 ops/sec \u00b13.68% (98 runs sampled)\r\nz.union: double: valid: b x 317,585 ops/sec \u00b10.13% (99 runs sampled)\r\nz.union: double: invalid: null x 52,452 ops/sec \u00b10.69% (94 runs sampled)\r\nz.union: double: invalid: wrong shape x 46,605 ops/sec \u00b10.43% (94 runs sampled)\r\nz.union: many: valid: a x 151,210 ops/sec \u00b13.75% (95 runs sampled)\r\nz.union: many: valid: c x 155,035 ops/sec \u00b10.21% (97 runs sampled)\r\nz.union: many: invalid: null x 31,971 ops/sec \u00b10.53% (93 runs sampled)\r\nz.union: many: invalid: wrong shape x 28,777 ops/sec \u00b10.42% (95 runs sampled)\r\n\r\nz.discriminatedUnion: double: valid: a x 857,014 ops/sec \u00b13.61% (99 runs sampled)\r\nz.discriminatedUnion: double: valid: b x 876,301 ops/sec \u00b10.15% (95 runs sampled)\r\nz.discriminatedUnion: double: invalid: null x 130,574 ops/sec \u00b10.55% (98 runs sampled)\r\nz.discriminatedUnion: double: invalid: wrong shape x 124,104 ops/sec \u00b13.36% (98 runs sampled)\r\nz.discriminatedUnion: many: valid: a x 859,193 ops/sec \u00b10.28% (94 runs sampled)\r\nz.discriminatedUnion: many: valid: c x 858,599 ops/sec \u00b10.30% (94 runs sampled)\r\nz.discriminatedUnion: many: invalid: null x 124,720 ops/sec \u00b10.36% (96 runs sampled)\r\nz.discriminatedUnion: many: invalid: wrong shape x 117,588 ops/sec \u00b13.44% (93 runs sampled)\r\n\r\nz.string: empty string x 3,263,033 ops/sec \u00b11.31% (94 runs sampled)\r\nz.string: short string x 3,254,089 ops/sec \u00b10.82% (93 runs sampled)\r\nz.string: long string x 3,249,335 ops/sec \u00b10.73% (93 runs sampled)\r\nz.string: invalid: null x 138,359 ops/sec \u00b10.58% (95 runs sampled)\r\nz.string: manual parser: long x 883,218,417 ops/sec \u00b10.31% (92 runs sampled)\r\nz.object: empty: valid x 2,477,603 ops/sec \u00b10.18% (97 runs sampled)\r\nz.object: empty: valid: extra keys x 2,291,072 ops/sec \u00b10.12% (95 runs sampled)\r\nz.object: empty: invalid: null x 142,172 ops/sec \u00b10.54% (97 runs sampled)\r\nz.object: short: valid x 1,139,297 ops/sec \u00b13.54% (99 runs sampled)\r\nz.object: short: valid: extra keys x 1,086,536 ops/sec \u00b10.30% (99 runs sampled)\r\nz.object: short: invalid: null x 141,700 ops/sec \u00b10.56% (96 runs sampled)\r\nz.object: long: valid x 481,833 ops/sec \u00b13.78% (91 runs sampled)\r\nz.object: long: valid: extra keys x 469,050 ops/sec \u00b10.24% (100 runs sampled)\r\nz.object: long: invalid: null x 145,378 ops/sec \u00b10.57% (97 runs sampled)\r\nDone in 165.07s.\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/899",
        "comments": [
          "Thanks @alexxander for this PR. The team I work with would have an immediate use for this as the current errors for unions can leave something to be desired. I am not sure what the current approval process for this project is but I would be happy to do an initial review before @colinhacks.",
          "Hi @EdsterG, firstly, thanks for the compliments on my work, I am glad you find this useful.\r\n\r\nHowever, I did try to handle that case you mentioned and I am failing to reproduce the incorrect error. Though it might be that something slipped through my fingers. I actually even created a new zod issue type for this particular purpose. See the test case bellow:\r\n\r\n```ts\r\ntest(\"invalid discriminator value\", () => {\r\n    expect.assertions(1);\r\n    try {\r\n      z.discriminatedUnion(\"type\", [\r\n        z.object({ type: z.literal(\"a\"), a: z.string() }),\r\n        z.object({ type: z.literal(\"b\"), b: z.string() }),\r\n      ]).parse({ type: \"x\", a: \"abc\" });\r\n    } catch (e: any) {\r\n      expect(JSON.parse(e.message)).toEqual([\r\n        {\r\n          code: z.ZodIssueCode.invalid_union_discriminator,\r\n          expectedOneOf: [\"a\", \"b\"],\r\n          received: \"x\",\r\n          message:\r\n            \"Invalid discriminator value. Expected one of: a, b. Received x.\",\r\n          path: [\"type\"],\r\n        },\r\n      ]);\r\n    }\r\n  });\r\n```\r\n\r\nI tried to pass other values in the `type` property - such as `null`, an object, `undefined`. I even tried leaving the property out. And in all the cases it seemed to work. Is there anything I am missing?",
          "Hi @CantelopePeel, before this PR, I also implemented a self-standing function to handle discriminated unions with zod. I guess you might be interested in that as well: https://github.com/colinhacks/zod/issues/792#issuecomment-1023251415.",
          "@alexxander yes that was my mistake. I was getting a very confusing error message and accidentally thought it was related to incorrect discriminator value. Your code correctly reports when an invalid discriminator is passed in. On that same note, there seems to be a previous issue to remove input values from the error messages. Might make sense to follow the same pattern and avoid having the input value as part of the error message. https://github.com/colinhacks/zod/issues/461",
          "> On that same note, there seems to be a previous issue to remove input values from the error messages. Might make sense to follow the same pattern and avoid having the input value as part of the error message\r\n\r\nYeah, it has been our practice to _not_ leak input or schema data in error messaging to avoid logging sensitive or personally-identifying information to logs/etc. Applications _should_ have the context at the call-site to report that sort of data themselves if they find it useful.",
          "Previously, the only supported discriminator value type was `string`. In the last commit, I added support for other primitive types supported by the `z.literal` function. The drawback is that I needed to use the `Map` data type. Should this be a problem, I can implement it using a separate object for each type:\r\n```js\r\nconst map = {\r\n  'string': {},\r\n  'number': {},\r\n  'bigint': {},\r\n  'boolean': {},\r\n  'object': {},\r\n  'undefined': {}\r\n};\r\nmap[typeof discriminatorValue][discriminatorValue] = schema;\r\n```\r\n\r\nWhat do you think @scotttrinh?",
          "Also, there are the failing _deno_ tests. I guess I have to modify the tests to be compatible with both _jest_ and _deno_? Any hints @scotttrinh?\r\n\r\nHow about using something like https://github.com/gcaptn/tincan? (Though this might be for a different issue.)",
          "> The drawback is that I needed to use the Map data type.\r\n\r\nGlad you called that out. Hmm. We don't have a strong platform support story, but if it's easy enough to implement in the nested way you've outlined then that's probably the safest bet here without wanting a major version bump and a line-in-the-sand policy about platform support.\r\n\r\n> Also, there are the failing deno tests. I guess I have to modify the tests to be compatible with both jest and deno?\r\n\r\nYeah, we are trying to be friendly to the Deno community as much as is feasible. I can take a look at the failing tests, but I have 0 experience with Deno so won't be too much specific help.",
          "Would it be possible to make this support lazy schemas? Otherwise it's not possible to use with discriminated recursive schemas.",
          "> Would it be possible to make this support lazy schemas?\r\n\r\n@EdsterG I will try to look into this :wink: \r\n\r\n",
          "@alexxander that would be super helpful, I know there's also a `z.late.object` methods that's implemented but undocumented. It's referenced here https://github.com/colinhacks/tozod but I'm not familiar with the inner workings of Zod so am having trouble getting it to work.",
          "Just would like to say I'm also looking forward to this PR, more human errors will be a very good improvement.",
          "> I know there's also a z.late.object methods that's implemented but undocumented.\r\n\r\nI believe that is a 2.0 construct. As far as I can tell in the source code, there is not `late` class.\r\n\r\nI'm actually wondering if we should put off supporting `lazy` here? @alexxander if you dig in a bit and run into any roadblocks, I think we should consider shipping what you have here and breaking off the further work into a separate PR.",
          "> Would it be possible to make this support lazy schemas?\r\n\r\n@EdsterG I tried some simple tests with `z.lazy`, and it seemed to work well. Did you find any particular issues?",
          "@alexxander here's a toy example where I get type errors:\r\n```\r\nimport {z} from 'zod';\r\n\r\ntype Category1 = {\r\n  type: 'Category1';\r\n  subcategories1: Array<Category>;\r\n};\r\n\r\ntype Category2 = {\r\n  type: 'Category2';\r\n  subcategories2: Array<Category>;\r\n};\r\n\r\nconst Category1Schema: z.ZodSchema<Category1> = z.object({\r\n  type: z.literal('Category1'),\r\n  subcategories1: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst Category2Schema: z.ZodSchema<Category2> = z.object({\r\n  type: z.literal('Category2'),\r\n  subcategories2: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst CategorySchema = z.discriminatedUnion('type', [Category1Schema, Category2Schema]);\r\ntype Category = z.infer<typeof CategorySchema>;\r\n```\r\nI get the following type error:\r\n```\r\nerror TS2740: Type 'ZodType<Category1, ZodTypeDef, Category1>' is missing the following properties from type 'ZodObject<{ type: ZodLiteral<Primitive>; } & ZodRawShape, any, any, { [x: string]: any; [x: number]: any; }, { [x: string]: any; [x: number]: any; }>': _shape, _unknownKeys, _catchall, _cached, and 16 more.\r\n\r\nconst CategorySchema = z.discriminatedUnion('type', [Category1Schema, Category2Schema]);\r\n```",
          "@EdsterG This fails because `z.discriminatedUnion` expects instances of `ZodObject`. You, however, typed `Category1Schema` and `Category2Schema`  as `ZodSchema`, which is an alias of `ZodType`.\r\n\r\nNonetheless, it is still possible to achieve what you want by slightly reorganizing the types.\r\n\r\n```ts\r\ntype Category1 = {\r\n  type: \"Category1\";\r\n  subcategories1: Array<Category>;\r\n};\r\n\r\ntype Category2 = {\r\n  type: \"Category2\";\r\n  subcategories2: Array<Category>;\r\n};\r\n\r\ntype Category = Category1 | Category2;\r\n\r\nconst Category1Schema = z.object({\r\n  type: z.literal(\"Category1\"),\r\n  subcategories1: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst Category2Schema = z.object({\r\n  type: z.literal(\"Category2\"),\r\n  subcategories2: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst CategorySchema: z.ZodSchema<Category> = z.discriminatedUnion(\"type\", [\r\n  Category1Schema,\r\n  Category2Schema,\r\n]);\r\n```\r\nOr even more compactly:\r\n```ts\r\ntype Category1 = {\r\n  type: \"Category1\";\r\n  subcategories1: Array<Category>;\r\n};\r\ntype Category2 = {\r\n  type: \"Category2\";\r\n  subcategories2: Array<Category>;\r\n};\r\ntype Category = Category1 | Category2;\r\n\r\nconst CategorySchema: z.ZodSchema<Category> = z.lazy(() =>\r\n  z.discriminatedUnion(\"type\", [\r\n    z.object({\r\n      type: z.literal(\"Category1\"),\r\n      subcategories1: z.array(CategorySchema),\r\n    }),\r\n    z.object({\r\n      type: z.literal(\"Category2\"),\r\n      subcategories2: z.array(CategorySchema),\r\n    }),\r\n  ])\r\n);\r\n```\r\n\r\nTherefore, I do not really think this is a big issue. But I guess I could try to make the discriminated union accept anything object-like. Though I would prefer to put it in a separate PR (if at all).\r\n\r\nAny views on this @scotttrinh?",
          "Ah, I see. The idea was that many types of categories would be defined through out the lifetime of the project so I wanted to avoid maintaining two sources of truth:\r\n```\r\ntype Category = Category1 | Category2;\r\n```\r\nand\r\n```\r\nconst CategorySchema: z.ZodSchema<Category> = z.discriminatedUnion(\"type\", [\r\n  Category1Schema,\r\n  Category2Schema,\r\n]);\r\n```\r\n\r\nHowever, I would agree that this change should go into a separate PR. In my opinion, this PR should be merged as is because its impact is too great to wait any longer.",
          "> ```ts\r\n> import {z} from 'zod';\r\n> \r\n> type Category1 = {\r\n>   type: 'Category1';\r\n>   subcategories1: Array<Category>;\r\n> };\r\n> \r\n> type Category2 = {\r\n>   type: 'Category2';\r\n>   subcategories2: Array<Category>;\r\n> };\r\n> \r\n> const Category1Schema: z.ZodSchema<Category1> = z.object({\r\n>   type: z.literal('Category1'),\r\n>   subcategories1: z.array(z.lazy(() => CategorySchema)),\r\n> });\r\n> \r\n> const Category2Schema: z.ZodSchema<Category2> = z.object({\r\n>   type: z.literal('Category2'),\r\n>   subcategories2: z.array(z.lazy(() => CategorySchema)),\r\n> });\r\n> \r\n> const CategorySchema = z.discriminatedUnion('type', [Category1Schema, Category2Schema]);\r\n> type Category = z.infer<typeof CategorySchema>;\r\n> ```\r\n\r\n@EdsterG, actually, even if `z.discriminatedUnion` accepted anything object-like, typescript would still throw recursion-related errors with your solution quoted above. The thing is that `Category` is inferred from `CategorySchema`, which refers to `Category1Schema` of type `Category1`. However, `Category1` refers to `Category`.\r\n\r\n",
          "@scotttrinh I added the simplified implementation of the map data structure as it was outlined in one of my previous comments (`util.SimpleMap`). It implements `get(key)`, `set(key, value)`, `has(key)`, `keys()` and the `size` property. Though I am not completely happy about the additional complexity it introduces (I mean, `Map` is well documented in the standards, while this one is custom and does not fully adhere to the `Map` interface). But it might be a good trade-off between a full `Map` polyfill and relying on `Map` being present in the environment.",
          "@alexxander \r\n\r\nLooking at https://caniuse.com/mdn-javascript_builtins_map I'm personally fine with IE11+ here, so `Map` still seems like a reasonable choice. We use `const`/`let` which has even worse support than `Map` (TIL!).\r\n\r\n@EdsterG \r\n\r\nRE: The type errors related to `ZodSchema`/`ZodType`\r\n\r\nWe shouldn't do too much work to support explicit types like the examples given here. Zod takes a pretty opinionated and strong stance that it should be the source of truth for types and does a best-effort job of supporting defining the types in TypeScript first. The big place of friction with this is external types that you do not control, so it's definitely ideal for it to work well if possible, but we should not spend too much development effort trying to get it to work. If `z.infer`/`z.input`/`z.output` is able to infer the correct type, that's our primary concern.",
          "@scotttrinh So I should revert it to the state in which `Map` is used, right?\r\nIs there anything else that has to be done (or that has to be changed) before this can be merged?",
          "> @scotttrinh So I should revert it to the state in which Map is used, right?\r\n> Is there anything else that has to be done (or that has to be changed) before this can be merged?\r\n\r\nJust went back through the code, and it looks very good to me, thank you for all of your hard work here! Once you get it back to using a `Map`, do you mind just running the benchmarks again and updating the description if they're different at all from the first time you ran it?",
          "@scotttrinh I reverted it. So now it uses `Map` again. I also ran the benchmarks and updated the pull request description.",
          "Whoa, amazing! This is just what we needed today. But looks like this isn't published to npm yet? Any way we can get a beta published?",
          "I published the latest master branch for anyone else who needs it.\r\n\r\nSet this in your package.json\r\n```json\r\n\"zod\": \"npm:@flybayer/zod@3.11.7-discriminatedUnion\"\r\n```"
        ]
      },
      {
        "pr_number": 899,
        "title": "Discriminated union",
        "body": "Resolves #894.\r\n\r\nI implemented the `z.discriminatedUnion(discriminator, options)` method. I also added tests and benchmarks.\r\n\r\nHere are the results of the benchmarks to demonstrate the speed improvements introduced by the new `z.discriminatedUnion` method:\r\n```\r\nz.union: double: valid: a x 310,690 ops/sec \u00b13.68% (98 runs sampled)\r\nz.union: double: valid: b x 317,585 ops/sec \u00b10.13% (99 runs sampled)\r\nz.union: double: invalid: null x 52,452 ops/sec \u00b10.69% (94 runs sampled)\r\nz.union: double: invalid: wrong shape x 46,605 ops/sec \u00b10.43% (94 runs sampled)\r\nz.union: many: valid: a x 151,210 ops/sec \u00b13.75% (95 runs sampled)\r\nz.union: many: valid: c x 155,035 ops/sec \u00b10.21% (97 runs sampled)\r\nz.union: many: invalid: null x 31,971 ops/sec \u00b10.53% (93 runs sampled)\r\nz.union: many: invalid: wrong shape x 28,777 ops/sec \u00b10.42% (95 runs sampled)\r\n\r\nz.discriminatedUnion: double: valid: a x 857,014 ops/sec \u00b13.61% (99 runs sampled)\r\nz.discriminatedUnion: double: valid: b x 876,301 ops/sec \u00b10.15% (95 runs sampled)\r\nz.discriminatedUnion: double: invalid: null x 130,574 ops/sec \u00b10.55% (98 runs sampled)\r\nz.discriminatedUnion: double: invalid: wrong shape x 124,104 ops/sec \u00b13.36% (98 runs sampled)\r\nz.discriminatedUnion: many: valid: a x 859,193 ops/sec \u00b10.28% (94 runs sampled)\r\nz.discriminatedUnion: many: valid: c x 858,599 ops/sec \u00b10.30% (94 runs sampled)\r\nz.discriminatedUnion: many: invalid: null x 124,720 ops/sec \u00b10.36% (96 runs sampled)\r\nz.discriminatedUnion: many: invalid: wrong shape x 117,588 ops/sec \u00b13.44% (93 runs sampled)\r\n\r\nz.string: empty string x 3,263,033 ops/sec \u00b11.31% (94 runs sampled)\r\nz.string: short string x 3,254,089 ops/sec \u00b10.82% (93 runs sampled)\r\nz.string: long string x 3,249,335 ops/sec \u00b10.73% (93 runs sampled)\r\nz.string: invalid: null x 138,359 ops/sec \u00b10.58% (95 runs sampled)\r\nz.string: manual parser: long x 883,218,417 ops/sec \u00b10.31% (92 runs sampled)\r\nz.object: empty: valid x 2,477,603 ops/sec \u00b10.18% (97 runs sampled)\r\nz.object: empty: valid: extra keys x 2,291,072 ops/sec \u00b10.12% (95 runs sampled)\r\nz.object: empty: invalid: null x 142,172 ops/sec \u00b10.54% (97 runs sampled)\r\nz.object: short: valid x 1,139,297 ops/sec \u00b13.54% (99 runs sampled)\r\nz.object: short: valid: extra keys x 1,086,536 ops/sec \u00b10.30% (99 runs sampled)\r\nz.object: short: invalid: null x 141,700 ops/sec \u00b10.56% (96 runs sampled)\r\nz.object: long: valid x 481,833 ops/sec \u00b13.78% (91 runs sampled)\r\nz.object: long: valid: extra keys x 469,050 ops/sec \u00b10.24% (100 runs sampled)\r\nz.object: long: invalid: null x 145,378 ops/sec \u00b10.57% (97 runs sampled)\r\nDone in 165.07s.\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/899",
        "comments": [
          "Thanks @alexxander for this PR. The team I work with would have an immediate use for this as the current errors for unions can leave something to be desired. I am not sure what the current approval process for this project is but I would be happy to do an initial review before @colinhacks.",
          "Hi @EdsterG, firstly, thanks for the compliments on my work, I am glad you find this useful.\r\n\r\nHowever, I did try to handle that case you mentioned and I am failing to reproduce the incorrect error. Though it might be that something slipped through my fingers. I actually even created a new zod issue type for this particular purpose. See the test case bellow:\r\n\r\n```ts\r\ntest(\"invalid discriminator value\", () => {\r\n    expect.assertions(1);\r\n    try {\r\n      z.discriminatedUnion(\"type\", [\r\n        z.object({ type: z.literal(\"a\"), a: z.string() }),\r\n        z.object({ type: z.literal(\"b\"), b: z.string() }),\r\n      ]).parse({ type: \"x\", a: \"abc\" });\r\n    } catch (e: any) {\r\n      expect(JSON.parse(e.message)).toEqual([\r\n        {\r\n          code: z.ZodIssueCode.invalid_union_discriminator,\r\n          expectedOneOf: [\"a\", \"b\"],\r\n          received: \"x\",\r\n          message:\r\n            \"Invalid discriminator value. Expected one of: a, b. Received x.\",\r\n          path: [\"type\"],\r\n        },\r\n      ]);\r\n    }\r\n  });\r\n```\r\n\r\nI tried to pass other values in the `type` property - such as `null`, an object, `undefined`. I even tried leaving the property out. And in all the cases it seemed to work. Is there anything I am missing?",
          "Hi @CantelopePeel, before this PR, I also implemented a self-standing function to handle discriminated unions with zod. I guess you might be interested in that as well: https://github.com/colinhacks/zod/issues/792#issuecomment-1023251415.",
          "@alexxander yes that was my mistake. I was getting a very confusing error message and accidentally thought it was related to incorrect discriminator value. Your code correctly reports when an invalid discriminator is passed in. On that same note, there seems to be a previous issue to remove input values from the error messages. Might make sense to follow the same pattern and avoid having the input value as part of the error message. https://github.com/colinhacks/zod/issues/461",
          "> On that same note, there seems to be a previous issue to remove input values from the error messages. Might make sense to follow the same pattern and avoid having the input value as part of the error message\r\n\r\nYeah, it has been our practice to _not_ leak input or schema data in error messaging to avoid logging sensitive or personally-identifying information to logs/etc. Applications _should_ have the context at the call-site to report that sort of data themselves if they find it useful.",
          "Previously, the only supported discriminator value type was `string`. In the last commit, I added support for other primitive types supported by the `z.literal` function. The drawback is that I needed to use the `Map` data type. Should this be a problem, I can implement it using a separate object for each type:\r\n```js\r\nconst map = {\r\n  'string': {},\r\n  'number': {},\r\n  'bigint': {},\r\n  'boolean': {},\r\n  'object': {},\r\n  'undefined': {}\r\n};\r\nmap[typeof discriminatorValue][discriminatorValue] = schema;\r\n```\r\n\r\nWhat do you think @scotttrinh?",
          "Also, there are the failing _deno_ tests. I guess I have to modify the tests to be compatible with both _jest_ and _deno_? Any hints @scotttrinh?\r\n\r\nHow about using something like https://github.com/gcaptn/tincan? (Though this might be for a different issue.)",
          "> The drawback is that I needed to use the Map data type.\r\n\r\nGlad you called that out. Hmm. We don't have a strong platform support story, but if it's easy enough to implement in the nested way you've outlined then that's probably the safest bet here without wanting a major version bump and a line-in-the-sand policy about platform support.\r\n\r\n> Also, there are the failing deno tests. I guess I have to modify the tests to be compatible with both jest and deno?\r\n\r\nYeah, we are trying to be friendly to the Deno community as much as is feasible. I can take a look at the failing tests, but I have 0 experience with Deno so won't be too much specific help.",
          "Would it be possible to make this support lazy schemas? Otherwise it's not possible to use with discriminated recursive schemas.",
          "> Would it be possible to make this support lazy schemas?\r\n\r\n@EdsterG I will try to look into this :wink: \r\n\r\n",
          "@alexxander that would be super helpful, I know there's also a `z.late.object` methods that's implemented but undocumented. It's referenced here https://github.com/colinhacks/tozod but I'm not familiar with the inner workings of Zod so am having trouble getting it to work.",
          "Just would like to say I'm also looking forward to this PR, more human errors will be a very good improvement.",
          "> I know there's also a z.late.object methods that's implemented but undocumented.\r\n\r\nI believe that is a 2.0 construct. As far as I can tell in the source code, there is not `late` class.\r\n\r\nI'm actually wondering if we should put off supporting `lazy` here? @alexxander if you dig in a bit and run into any roadblocks, I think we should consider shipping what you have here and breaking off the further work into a separate PR.",
          "> Would it be possible to make this support lazy schemas?\r\n\r\n@EdsterG I tried some simple tests with `z.lazy`, and it seemed to work well. Did you find any particular issues?",
          "@alexxander here's a toy example where I get type errors:\r\n```\r\nimport {z} from 'zod';\r\n\r\ntype Category1 = {\r\n  type: 'Category1';\r\n  subcategories1: Array<Category>;\r\n};\r\n\r\ntype Category2 = {\r\n  type: 'Category2';\r\n  subcategories2: Array<Category>;\r\n};\r\n\r\nconst Category1Schema: z.ZodSchema<Category1> = z.object({\r\n  type: z.literal('Category1'),\r\n  subcategories1: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst Category2Schema: z.ZodSchema<Category2> = z.object({\r\n  type: z.literal('Category2'),\r\n  subcategories2: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst CategorySchema = z.discriminatedUnion('type', [Category1Schema, Category2Schema]);\r\ntype Category = z.infer<typeof CategorySchema>;\r\n```\r\nI get the following type error:\r\n```\r\nerror TS2740: Type 'ZodType<Category1, ZodTypeDef, Category1>' is missing the following properties from type 'ZodObject<{ type: ZodLiteral<Primitive>; } & ZodRawShape, any, any, { [x: string]: any; [x: number]: any; }, { [x: string]: any; [x: number]: any; }>': _shape, _unknownKeys, _catchall, _cached, and 16 more.\r\n\r\nconst CategorySchema = z.discriminatedUnion('type', [Category1Schema, Category2Schema]);\r\n```",
          "@EdsterG This fails because `z.discriminatedUnion` expects instances of `ZodObject`. You, however, typed `Category1Schema` and `Category2Schema`  as `ZodSchema`, which is an alias of `ZodType`.\r\n\r\nNonetheless, it is still possible to achieve what you want by slightly reorganizing the types.\r\n\r\n```ts\r\ntype Category1 = {\r\n  type: \"Category1\";\r\n  subcategories1: Array<Category>;\r\n};\r\n\r\ntype Category2 = {\r\n  type: \"Category2\";\r\n  subcategories2: Array<Category>;\r\n};\r\n\r\ntype Category = Category1 | Category2;\r\n\r\nconst Category1Schema = z.object({\r\n  type: z.literal(\"Category1\"),\r\n  subcategories1: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst Category2Schema = z.object({\r\n  type: z.literal(\"Category2\"),\r\n  subcategories2: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst CategorySchema: z.ZodSchema<Category> = z.discriminatedUnion(\"type\", [\r\n  Category1Schema,\r\n  Category2Schema,\r\n]);\r\n```\r\nOr even more compactly:\r\n```ts\r\ntype Category1 = {\r\n  type: \"Category1\";\r\n  subcategories1: Array<Category>;\r\n};\r\ntype Category2 = {\r\n  type: \"Category2\";\r\n  subcategories2: Array<Category>;\r\n};\r\ntype Category = Category1 | Category2;\r\n\r\nconst CategorySchema: z.ZodSchema<Category> = z.lazy(() =>\r\n  z.discriminatedUnion(\"type\", [\r\n    z.object({\r\n      type: z.literal(\"Category1\"),\r\n      subcategories1: z.array(CategorySchema),\r\n    }),\r\n    z.object({\r\n      type: z.literal(\"Category2\"),\r\n      subcategories2: z.array(CategorySchema),\r\n    }),\r\n  ])\r\n);\r\n```\r\n\r\nTherefore, I do not really think this is a big issue. But I guess I could try to make the discriminated union accept anything object-like. Though I would prefer to put it in a separate PR (if at all).\r\n\r\nAny views on this @scotttrinh?",
          "Ah, I see. The idea was that many types of categories would be defined through out the lifetime of the project so I wanted to avoid maintaining two sources of truth:\r\n```\r\ntype Category = Category1 | Category2;\r\n```\r\nand\r\n```\r\nconst CategorySchema: z.ZodSchema<Category> = z.discriminatedUnion(\"type\", [\r\n  Category1Schema,\r\n  Category2Schema,\r\n]);\r\n```\r\n\r\nHowever, I would agree that this change should go into a separate PR. In my opinion, this PR should be merged as is because its impact is too great to wait any longer.",
          "> ```ts\r\n> import {z} from 'zod';\r\n> \r\n> type Category1 = {\r\n>   type: 'Category1';\r\n>   subcategories1: Array<Category>;\r\n> };\r\n> \r\n> type Category2 = {\r\n>   type: 'Category2';\r\n>   subcategories2: Array<Category>;\r\n> };\r\n> \r\n> const Category1Schema: z.ZodSchema<Category1> = z.object({\r\n>   type: z.literal('Category1'),\r\n>   subcategories1: z.array(z.lazy(() => CategorySchema)),\r\n> });\r\n> \r\n> const Category2Schema: z.ZodSchema<Category2> = z.object({\r\n>   type: z.literal('Category2'),\r\n>   subcategories2: z.array(z.lazy(() => CategorySchema)),\r\n> });\r\n> \r\n> const CategorySchema = z.discriminatedUnion('type', [Category1Schema, Category2Schema]);\r\n> type Category = z.infer<typeof CategorySchema>;\r\n> ```\r\n\r\n@EdsterG, actually, even if `z.discriminatedUnion` accepted anything object-like, typescript would still throw recursion-related errors with your solution quoted above. The thing is that `Category` is inferred from `CategorySchema`, which refers to `Category1Schema` of type `Category1`. However, `Category1` refers to `Category`.\r\n\r\n",
          "@scotttrinh I added the simplified implementation of the map data structure as it was outlined in one of my previous comments (`util.SimpleMap`). It implements `get(key)`, `set(key, value)`, `has(key)`, `keys()` and the `size` property. Though I am not completely happy about the additional complexity it introduces (I mean, `Map` is well documented in the standards, while this one is custom and does not fully adhere to the `Map` interface). But it might be a good trade-off between a full `Map` polyfill and relying on `Map` being present in the environment.",
          "@alexxander \r\n\r\nLooking at https://caniuse.com/mdn-javascript_builtins_map I'm personally fine with IE11+ here, so `Map` still seems like a reasonable choice. We use `const`/`let` which has even worse support than `Map` (TIL!).\r\n\r\n@EdsterG \r\n\r\nRE: The type errors related to `ZodSchema`/`ZodType`\r\n\r\nWe shouldn't do too much work to support explicit types like the examples given here. Zod takes a pretty opinionated and strong stance that it should be the source of truth for types and does a best-effort job of supporting defining the types in TypeScript first. The big place of friction with this is external types that you do not control, so it's definitely ideal for it to work well if possible, but we should not spend too much development effort trying to get it to work. If `z.infer`/`z.input`/`z.output` is able to infer the correct type, that's our primary concern.",
          "@scotttrinh So I should revert it to the state in which `Map` is used, right?\r\nIs there anything else that has to be done (or that has to be changed) before this can be merged?",
          "> @scotttrinh So I should revert it to the state in which Map is used, right?\r\n> Is there anything else that has to be done (or that has to be changed) before this can be merged?\r\n\r\nJust went back through the code, and it looks very good to me, thank you for all of your hard work here! Once you get it back to using a `Map`, do you mind just running the benchmarks again and updating the description if they're different at all from the first time you ran it?",
          "@scotttrinh I reverted it. So now it uses `Map` again. I also ran the benchmarks and updated the pull request description.",
          "Whoa, amazing! This is just what we needed today. But looks like this isn't published to npm yet? Any way we can get a beta published?",
          "I published the latest master branch for anyone else who needs it.\r\n\r\nSet this in your package.json\r\n```json\r\n\"zod\": \"npm:@flybayer/zod@3.11.7-discriminatedUnion\"\r\n```"
        ]
      },
      {
        "pr_number": 899,
        "title": "Discriminated union",
        "body": "Resolves #894.\r\n\r\nI implemented the `z.discriminatedUnion(discriminator, options)` method. I also added tests and benchmarks.\r\n\r\nHere are the results of the benchmarks to demonstrate the speed improvements introduced by the new `z.discriminatedUnion` method:\r\n```\r\nz.union: double: valid: a x 310,690 ops/sec \u00b13.68% (98 runs sampled)\r\nz.union: double: valid: b x 317,585 ops/sec \u00b10.13% (99 runs sampled)\r\nz.union: double: invalid: null x 52,452 ops/sec \u00b10.69% (94 runs sampled)\r\nz.union: double: invalid: wrong shape x 46,605 ops/sec \u00b10.43% (94 runs sampled)\r\nz.union: many: valid: a x 151,210 ops/sec \u00b13.75% (95 runs sampled)\r\nz.union: many: valid: c x 155,035 ops/sec \u00b10.21% (97 runs sampled)\r\nz.union: many: invalid: null x 31,971 ops/sec \u00b10.53% (93 runs sampled)\r\nz.union: many: invalid: wrong shape x 28,777 ops/sec \u00b10.42% (95 runs sampled)\r\n\r\nz.discriminatedUnion: double: valid: a x 857,014 ops/sec \u00b13.61% (99 runs sampled)\r\nz.discriminatedUnion: double: valid: b x 876,301 ops/sec \u00b10.15% (95 runs sampled)\r\nz.discriminatedUnion: double: invalid: null x 130,574 ops/sec \u00b10.55% (98 runs sampled)\r\nz.discriminatedUnion: double: invalid: wrong shape x 124,104 ops/sec \u00b13.36% (98 runs sampled)\r\nz.discriminatedUnion: many: valid: a x 859,193 ops/sec \u00b10.28% (94 runs sampled)\r\nz.discriminatedUnion: many: valid: c x 858,599 ops/sec \u00b10.30% (94 runs sampled)\r\nz.discriminatedUnion: many: invalid: null x 124,720 ops/sec \u00b10.36% (96 runs sampled)\r\nz.discriminatedUnion: many: invalid: wrong shape x 117,588 ops/sec \u00b13.44% (93 runs sampled)\r\n\r\nz.string: empty string x 3,263,033 ops/sec \u00b11.31% (94 runs sampled)\r\nz.string: short string x 3,254,089 ops/sec \u00b10.82% (93 runs sampled)\r\nz.string: long string x 3,249,335 ops/sec \u00b10.73% (93 runs sampled)\r\nz.string: invalid: null x 138,359 ops/sec \u00b10.58% (95 runs sampled)\r\nz.string: manual parser: long x 883,218,417 ops/sec \u00b10.31% (92 runs sampled)\r\nz.object: empty: valid x 2,477,603 ops/sec \u00b10.18% (97 runs sampled)\r\nz.object: empty: valid: extra keys x 2,291,072 ops/sec \u00b10.12% (95 runs sampled)\r\nz.object: empty: invalid: null x 142,172 ops/sec \u00b10.54% (97 runs sampled)\r\nz.object: short: valid x 1,139,297 ops/sec \u00b13.54% (99 runs sampled)\r\nz.object: short: valid: extra keys x 1,086,536 ops/sec \u00b10.30% (99 runs sampled)\r\nz.object: short: invalid: null x 141,700 ops/sec \u00b10.56% (96 runs sampled)\r\nz.object: long: valid x 481,833 ops/sec \u00b13.78% (91 runs sampled)\r\nz.object: long: valid: extra keys x 469,050 ops/sec \u00b10.24% (100 runs sampled)\r\nz.object: long: invalid: null x 145,378 ops/sec \u00b10.57% (97 runs sampled)\r\nDone in 165.07s.\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/899",
        "comments": [
          "Thanks @alexxander for this PR. The team I work with would have an immediate use for this as the current errors for unions can leave something to be desired. I am not sure what the current approval process for this project is but I would be happy to do an initial review before @colinhacks.",
          "Hi @EdsterG, firstly, thanks for the compliments on my work, I am glad you find this useful.\r\n\r\nHowever, I did try to handle that case you mentioned and I am failing to reproduce the incorrect error. Though it might be that something slipped through my fingers. I actually even created a new zod issue type for this particular purpose. See the test case bellow:\r\n\r\n```ts\r\ntest(\"invalid discriminator value\", () => {\r\n    expect.assertions(1);\r\n    try {\r\n      z.discriminatedUnion(\"type\", [\r\n        z.object({ type: z.literal(\"a\"), a: z.string() }),\r\n        z.object({ type: z.literal(\"b\"), b: z.string() }),\r\n      ]).parse({ type: \"x\", a: \"abc\" });\r\n    } catch (e: any) {\r\n      expect(JSON.parse(e.message)).toEqual([\r\n        {\r\n          code: z.ZodIssueCode.invalid_union_discriminator,\r\n          expectedOneOf: [\"a\", \"b\"],\r\n          received: \"x\",\r\n          message:\r\n            \"Invalid discriminator value. Expected one of: a, b. Received x.\",\r\n          path: [\"type\"],\r\n        },\r\n      ]);\r\n    }\r\n  });\r\n```\r\n\r\nI tried to pass other values in the `type` property - such as `null`, an object, `undefined`. I even tried leaving the property out. And in all the cases it seemed to work. Is there anything I am missing?",
          "Hi @CantelopePeel, before this PR, I also implemented a self-standing function to handle discriminated unions with zod. I guess you might be interested in that as well: https://github.com/colinhacks/zod/issues/792#issuecomment-1023251415.",
          "@alexxander yes that was my mistake. I was getting a very confusing error message and accidentally thought it was related to incorrect discriminator value. Your code correctly reports when an invalid discriminator is passed in. On that same note, there seems to be a previous issue to remove input values from the error messages. Might make sense to follow the same pattern and avoid having the input value as part of the error message. https://github.com/colinhacks/zod/issues/461",
          "> On that same note, there seems to be a previous issue to remove input values from the error messages. Might make sense to follow the same pattern and avoid having the input value as part of the error message\r\n\r\nYeah, it has been our practice to _not_ leak input or schema data in error messaging to avoid logging sensitive or personally-identifying information to logs/etc. Applications _should_ have the context at the call-site to report that sort of data themselves if they find it useful.",
          "Previously, the only supported discriminator value type was `string`. In the last commit, I added support for other primitive types supported by the `z.literal` function. The drawback is that I needed to use the `Map` data type. Should this be a problem, I can implement it using a separate object for each type:\r\n```js\r\nconst map = {\r\n  'string': {},\r\n  'number': {},\r\n  'bigint': {},\r\n  'boolean': {},\r\n  'object': {},\r\n  'undefined': {}\r\n};\r\nmap[typeof discriminatorValue][discriminatorValue] = schema;\r\n```\r\n\r\nWhat do you think @scotttrinh?",
          "Also, there are the failing _deno_ tests. I guess I have to modify the tests to be compatible with both _jest_ and _deno_? Any hints @scotttrinh?\r\n\r\nHow about using something like https://github.com/gcaptn/tincan? (Though this might be for a different issue.)",
          "> The drawback is that I needed to use the Map data type.\r\n\r\nGlad you called that out. Hmm. We don't have a strong platform support story, but if it's easy enough to implement in the nested way you've outlined then that's probably the safest bet here without wanting a major version bump and a line-in-the-sand policy about platform support.\r\n\r\n> Also, there are the failing deno tests. I guess I have to modify the tests to be compatible with both jest and deno?\r\n\r\nYeah, we are trying to be friendly to the Deno community as much as is feasible. I can take a look at the failing tests, but I have 0 experience with Deno so won't be too much specific help.",
          "Would it be possible to make this support lazy schemas? Otherwise it's not possible to use with discriminated recursive schemas.",
          "> Would it be possible to make this support lazy schemas?\r\n\r\n@EdsterG I will try to look into this :wink: \r\n\r\n",
          "@alexxander that would be super helpful, I know there's also a `z.late.object` methods that's implemented but undocumented. It's referenced here https://github.com/colinhacks/tozod but I'm not familiar with the inner workings of Zod so am having trouble getting it to work.",
          "Just would like to say I'm also looking forward to this PR, more human errors will be a very good improvement.",
          "> I know there's also a z.late.object methods that's implemented but undocumented.\r\n\r\nI believe that is a 2.0 construct. As far as I can tell in the source code, there is not `late` class.\r\n\r\nI'm actually wondering if we should put off supporting `lazy` here? @alexxander if you dig in a bit and run into any roadblocks, I think we should consider shipping what you have here and breaking off the further work into a separate PR.",
          "> Would it be possible to make this support lazy schemas?\r\n\r\n@EdsterG I tried some simple tests with `z.lazy`, and it seemed to work well. Did you find any particular issues?",
          "@alexxander here's a toy example where I get type errors:\r\n```\r\nimport {z} from 'zod';\r\n\r\ntype Category1 = {\r\n  type: 'Category1';\r\n  subcategories1: Array<Category>;\r\n};\r\n\r\ntype Category2 = {\r\n  type: 'Category2';\r\n  subcategories2: Array<Category>;\r\n};\r\n\r\nconst Category1Schema: z.ZodSchema<Category1> = z.object({\r\n  type: z.literal('Category1'),\r\n  subcategories1: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst Category2Schema: z.ZodSchema<Category2> = z.object({\r\n  type: z.literal('Category2'),\r\n  subcategories2: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst CategorySchema = z.discriminatedUnion('type', [Category1Schema, Category2Schema]);\r\ntype Category = z.infer<typeof CategorySchema>;\r\n```\r\nI get the following type error:\r\n```\r\nerror TS2740: Type 'ZodType<Category1, ZodTypeDef, Category1>' is missing the following properties from type 'ZodObject<{ type: ZodLiteral<Primitive>; } & ZodRawShape, any, any, { [x: string]: any; [x: number]: any; }, { [x: string]: any; [x: number]: any; }>': _shape, _unknownKeys, _catchall, _cached, and 16 more.\r\n\r\nconst CategorySchema = z.discriminatedUnion('type', [Category1Schema, Category2Schema]);\r\n```",
          "@EdsterG This fails because `z.discriminatedUnion` expects instances of `ZodObject`. You, however, typed `Category1Schema` and `Category2Schema`  as `ZodSchema`, which is an alias of `ZodType`.\r\n\r\nNonetheless, it is still possible to achieve what you want by slightly reorganizing the types.\r\n\r\n```ts\r\ntype Category1 = {\r\n  type: \"Category1\";\r\n  subcategories1: Array<Category>;\r\n};\r\n\r\ntype Category2 = {\r\n  type: \"Category2\";\r\n  subcategories2: Array<Category>;\r\n};\r\n\r\ntype Category = Category1 | Category2;\r\n\r\nconst Category1Schema = z.object({\r\n  type: z.literal(\"Category1\"),\r\n  subcategories1: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst Category2Schema = z.object({\r\n  type: z.literal(\"Category2\"),\r\n  subcategories2: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst CategorySchema: z.ZodSchema<Category> = z.discriminatedUnion(\"type\", [\r\n  Category1Schema,\r\n  Category2Schema,\r\n]);\r\n```\r\nOr even more compactly:\r\n```ts\r\ntype Category1 = {\r\n  type: \"Category1\";\r\n  subcategories1: Array<Category>;\r\n};\r\ntype Category2 = {\r\n  type: \"Category2\";\r\n  subcategories2: Array<Category>;\r\n};\r\ntype Category = Category1 | Category2;\r\n\r\nconst CategorySchema: z.ZodSchema<Category> = z.lazy(() =>\r\n  z.discriminatedUnion(\"type\", [\r\n    z.object({\r\n      type: z.literal(\"Category1\"),\r\n      subcategories1: z.array(CategorySchema),\r\n    }),\r\n    z.object({\r\n      type: z.literal(\"Category2\"),\r\n      subcategories2: z.array(CategorySchema),\r\n    }),\r\n  ])\r\n);\r\n```\r\n\r\nTherefore, I do not really think this is a big issue. But I guess I could try to make the discriminated union accept anything object-like. Though I would prefer to put it in a separate PR (if at all).\r\n\r\nAny views on this @scotttrinh?",
          "Ah, I see. The idea was that many types of categories would be defined through out the lifetime of the project so I wanted to avoid maintaining two sources of truth:\r\n```\r\ntype Category = Category1 | Category2;\r\n```\r\nand\r\n```\r\nconst CategorySchema: z.ZodSchema<Category> = z.discriminatedUnion(\"type\", [\r\n  Category1Schema,\r\n  Category2Schema,\r\n]);\r\n```\r\n\r\nHowever, I would agree that this change should go into a separate PR. In my opinion, this PR should be merged as is because its impact is too great to wait any longer.",
          "> ```ts\r\n> import {z} from 'zod';\r\n> \r\n> type Category1 = {\r\n>   type: 'Category1';\r\n>   subcategories1: Array<Category>;\r\n> };\r\n> \r\n> type Category2 = {\r\n>   type: 'Category2';\r\n>   subcategories2: Array<Category>;\r\n> };\r\n> \r\n> const Category1Schema: z.ZodSchema<Category1> = z.object({\r\n>   type: z.literal('Category1'),\r\n>   subcategories1: z.array(z.lazy(() => CategorySchema)),\r\n> });\r\n> \r\n> const Category2Schema: z.ZodSchema<Category2> = z.object({\r\n>   type: z.literal('Category2'),\r\n>   subcategories2: z.array(z.lazy(() => CategorySchema)),\r\n> });\r\n> \r\n> const CategorySchema = z.discriminatedUnion('type', [Category1Schema, Category2Schema]);\r\n> type Category = z.infer<typeof CategorySchema>;\r\n> ```\r\n\r\n@EdsterG, actually, even if `z.discriminatedUnion` accepted anything object-like, typescript would still throw recursion-related errors with your solution quoted above. The thing is that `Category` is inferred from `CategorySchema`, which refers to `Category1Schema` of type `Category1`. However, `Category1` refers to `Category`.\r\n\r\n",
          "@scotttrinh I added the simplified implementation of the map data structure as it was outlined in one of my previous comments (`util.SimpleMap`). It implements `get(key)`, `set(key, value)`, `has(key)`, `keys()` and the `size` property. Though I am not completely happy about the additional complexity it introduces (I mean, `Map` is well documented in the standards, while this one is custom and does not fully adhere to the `Map` interface). But it might be a good trade-off between a full `Map` polyfill and relying on `Map` being present in the environment.",
          "@alexxander \r\n\r\nLooking at https://caniuse.com/mdn-javascript_builtins_map I'm personally fine with IE11+ here, so `Map` still seems like a reasonable choice. We use `const`/`let` which has even worse support than `Map` (TIL!).\r\n\r\n@EdsterG \r\n\r\nRE: The type errors related to `ZodSchema`/`ZodType`\r\n\r\nWe shouldn't do too much work to support explicit types like the examples given here. Zod takes a pretty opinionated and strong stance that it should be the source of truth for types and does a best-effort job of supporting defining the types in TypeScript first. The big place of friction with this is external types that you do not control, so it's definitely ideal for it to work well if possible, but we should not spend too much development effort trying to get it to work. If `z.infer`/`z.input`/`z.output` is able to infer the correct type, that's our primary concern.",
          "@scotttrinh So I should revert it to the state in which `Map` is used, right?\r\nIs there anything else that has to be done (or that has to be changed) before this can be merged?",
          "> @scotttrinh So I should revert it to the state in which Map is used, right?\r\n> Is there anything else that has to be done (or that has to be changed) before this can be merged?\r\n\r\nJust went back through the code, and it looks very good to me, thank you for all of your hard work here! Once you get it back to using a `Map`, do you mind just running the benchmarks again and updating the description if they're different at all from the first time you ran it?",
          "@scotttrinh I reverted it. So now it uses `Map` again. I also ran the benchmarks and updated the pull request description.",
          "Whoa, amazing! This is just what we needed today. But looks like this isn't published to npm yet? Any way we can get a beta published?",
          "I published the latest master branch for anyone else who needs it.\r\n\r\nSet this in your package.json\r\n```json\r\n\"zod\": \"npm:@flybayer/zod@3.11.7-discriminatedUnion\"\r\n```"
        ]
      },
      {
        "pr_number": 902,
        "title": "added graphql-codegen-typescript-validation-schema (README.md) ",
        "body": "I added graphql-codegen-typescript-validation-schema in README.md\r\nsee: https://github.com/Code-Hex/graphql-codegen-typescript-validation-schema",
        "html_url": "https://github.com/colinhacks/zod/pull/902",
        "comments": []
      },
      {
        "pr_number": 860,
        "title": "change UUID regex to support different UUID variants",
        "body": "PR for issue #854 - UUID regex only validate Variant 1 UUIDs \r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/860",
        "comments": [
          "@narrowei \r\n\r\nDo you mind adding a few tests for the various UUID versions to the string tests?\r\n\r\nhttps://github.com/colinhacks/zod/blob/73a9a628e8e3f512908b5f2b4116a87197f43407/src/__tests__/string.test.ts#L80-L89",
          "@scotttrinh  No problem! will add unit tests for different various",
          "@scotttrinh have added tests to cover variants 0 and 2. Other files were automatically changed by the pre-commit lint fix.",
          "Thanks for the test cases, this is looking good! I'll spend some time in the next day or two to get it ready for merging. Not sure what the release schedule is going to be, but I don't think there is anything blocking this from going out in the next release. Thanks for getting this together!\r\n\r\n> Other files were automatically changed by the pre-commit lint fix.\r\n\r\nI think this might be due to some issue with prettier picking up your own configuration or using some global config? I can't see why it would've changed code that has ostensibly been sitting in the upstream branch all this time and wasn't changed. We can probably sort this out during the merge, but if you have time to remove any of the extraneous changes sooner than we do, feel free to push another commit.",
          "Hey @scotttrinh, thanks for reviewing my code and quick response! I have removed extraneous changes and pulled the code from the master branch.",
          "Hey @scotttrinh, any luck about the merge?"
        ]
      },
      {
        "pr_number": 902,
        "title": "added graphql-codegen-typescript-validation-schema (README.md) ",
        "body": "I added graphql-codegen-typescript-validation-schema in README.md\r\nsee: https://github.com/Code-Hex/graphql-codegen-typescript-validation-schema",
        "html_url": "https://github.com/colinhacks/zod/pull/902",
        "comments": []
      },
      {
        "pr_number": 899,
        "title": "Discriminated union",
        "body": "Resolves #894.\r\n\r\nI implemented the `z.discriminatedUnion(discriminator, options)` method. I also added tests and benchmarks.\r\n\r\nHere are the results of the benchmarks to demonstrate the speed improvements introduced by the new `z.discriminatedUnion` method:\r\n```\r\nz.union: double: valid: a x 310,690 ops/sec \u00b13.68% (98 runs sampled)\r\nz.union: double: valid: b x 317,585 ops/sec \u00b10.13% (99 runs sampled)\r\nz.union: double: invalid: null x 52,452 ops/sec \u00b10.69% (94 runs sampled)\r\nz.union: double: invalid: wrong shape x 46,605 ops/sec \u00b10.43% (94 runs sampled)\r\nz.union: many: valid: a x 151,210 ops/sec \u00b13.75% (95 runs sampled)\r\nz.union: many: valid: c x 155,035 ops/sec \u00b10.21% (97 runs sampled)\r\nz.union: many: invalid: null x 31,971 ops/sec \u00b10.53% (93 runs sampled)\r\nz.union: many: invalid: wrong shape x 28,777 ops/sec \u00b10.42% (95 runs sampled)\r\n\r\nz.discriminatedUnion: double: valid: a x 857,014 ops/sec \u00b13.61% (99 runs sampled)\r\nz.discriminatedUnion: double: valid: b x 876,301 ops/sec \u00b10.15% (95 runs sampled)\r\nz.discriminatedUnion: double: invalid: null x 130,574 ops/sec \u00b10.55% (98 runs sampled)\r\nz.discriminatedUnion: double: invalid: wrong shape x 124,104 ops/sec \u00b13.36% (98 runs sampled)\r\nz.discriminatedUnion: many: valid: a x 859,193 ops/sec \u00b10.28% (94 runs sampled)\r\nz.discriminatedUnion: many: valid: c x 858,599 ops/sec \u00b10.30% (94 runs sampled)\r\nz.discriminatedUnion: many: invalid: null x 124,720 ops/sec \u00b10.36% (96 runs sampled)\r\nz.discriminatedUnion: many: invalid: wrong shape x 117,588 ops/sec \u00b13.44% (93 runs sampled)\r\n\r\nz.string: empty string x 3,263,033 ops/sec \u00b11.31% (94 runs sampled)\r\nz.string: short string x 3,254,089 ops/sec \u00b10.82% (93 runs sampled)\r\nz.string: long string x 3,249,335 ops/sec \u00b10.73% (93 runs sampled)\r\nz.string: invalid: null x 138,359 ops/sec \u00b10.58% (95 runs sampled)\r\nz.string: manual parser: long x 883,218,417 ops/sec \u00b10.31% (92 runs sampled)\r\nz.object: empty: valid x 2,477,603 ops/sec \u00b10.18% (97 runs sampled)\r\nz.object: empty: valid: extra keys x 2,291,072 ops/sec \u00b10.12% (95 runs sampled)\r\nz.object: empty: invalid: null x 142,172 ops/sec \u00b10.54% (97 runs sampled)\r\nz.object: short: valid x 1,139,297 ops/sec \u00b13.54% (99 runs sampled)\r\nz.object: short: valid: extra keys x 1,086,536 ops/sec \u00b10.30% (99 runs sampled)\r\nz.object: short: invalid: null x 141,700 ops/sec \u00b10.56% (96 runs sampled)\r\nz.object: long: valid x 481,833 ops/sec \u00b13.78% (91 runs sampled)\r\nz.object: long: valid: extra keys x 469,050 ops/sec \u00b10.24% (100 runs sampled)\r\nz.object: long: invalid: null x 145,378 ops/sec \u00b10.57% (97 runs sampled)\r\nDone in 165.07s.\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/899",
        "comments": [
          "Thanks @alexxander for this PR. The team I work with would have an immediate use for this as the current errors for unions can leave something to be desired. I am not sure what the current approval process for this project is but I would be happy to do an initial review before @colinhacks.",
          "Hi @EdsterG, firstly, thanks for the compliments on my work, I am glad you find this useful.\r\n\r\nHowever, I did try to handle that case you mentioned and I am failing to reproduce the incorrect error. Though it might be that something slipped through my fingers. I actually even created a new zod issue type for this particular purpose. See the test case bellow:\r\n\r\n```ts\r\ntest(\"invalid discriminator value\", () => {\r\n    expect.assertions(1);\r\n    try {\r\n      z.discriminatedUnion(\"type\", [\r\n        z.object({ type: z.literal(\"a\"), a: z.string() }),\r\n        z.object({ type: z.literal(\"b\"), b: z.string() }),\r\n      ]).parse({ type: \"x\", a: \"abc\" });\r\n    } catch (e: any) {\r\n      expect(JSON.parse(e.message)).toEqual([\r\n        {\r\n          code: z.ZodIssueCode.invalid_union_discriminator,\r\n          expectedOneOf: [\"a\", \"b\"],\r\n          received: \"x\",\r\n          message:\r\n            \"Invalid discriminator value. Expected one of: a, b. Received x.\",\r\n          path: [\"type\"],\r\n        },\r\n      ]);\r\n    }\r\n  });\r\n```\r\n\r\nI tried to pass other values in the `type` property - such as `null`, an object, `undefined`. I even tried leaving the property out. And in all the cases it seemed to work. Is there anything I am missing?",
          "Hi @CantelopePeel, before this PR, I also implemented a self-standing function to handle discriminated unions with zod. I guess you might be interested in that as well: https://github.com/colinhacks/zod/issues/792#issuecomment-1023251415.",
          "@alexxander yes that was my mistake. I was getting a very confusing error message and accidentally thought it was related to incorrect discriminator value. Your code correctly reports when an invalid discriminator is passed in. On that same note, there seems to be a previous issue to remove input values from the error messages. Might make sense to follow the same pattern and avoid having the input value as part of the error message. https://github.com/colinhacks/zod/issues/461",
          "> On that same note, there seems to be a previous issue to remove input values from the error messages. Might make sense to follow the same pattern and avoid having the input value as part of the error message\r\n\r\nYeah, it has been our practice to _not_ leak input or schema data in error messaging to avoid logging sensitive or personally-identifying information to logs/etc. Applications _should_ have the context at the call-site to report that sort of data themselves if they find it useful.",
          "Previously, the only supported discriminator value type was `string`. In the last commit, I added support for other primitive types supported by the `z.literal` function. The drawback is that I needed to use the `Map` data type. Should this be a problem, I can implement it using a separate object for each type:\r\n```js\r\nconst map = {\r\n  'string': {},\r\n  'number': {},\r\n  'bigint': {},\r\n  'boolean': {},\r\n  'object': {},\r\n  'undefined': {}\r\n};\r\nmap[typeof discriminatorValue][discriminatorValue] = schema;\r\n```\r\n\r\nWhat do you think @scotttrinh?",
          "Also, there are the failing _deno_ tests. I guess I have to modify the tests to be compatible with both _jest_ and _deno_? Any hints @scotttrinh?\r\n\r\nHow about using something like https://github.com/gcaptn/tincan? (Though this might be for a different issue.)",
          "> The drawback is that I needed to use the Map data type.\r\n\r\nGlad you called that out. Hmm. We don't have a strong platform support story, but if it's easy enough to implement in the nested way you've outlined then that's probably the safest bet here without wanting a major version bump and a line-in-the-sand policy about platform support.\r\n\r\n> Also, there are the failing deno tests. I guess I have to modify the tests to be compatible with both jest and deno?\r\n\r\nYeah, we are trying to be friendly to the Deno community as much as is feasible. I can take a look at the failing tests, but I have 0 experience with Deno so won't be too much specific help.",
          "Would it be possible to make this support lazy schemas? Otherwise it's not possible to use with discriminated recursive schemas.",
          "> Would it be possible to make this support lazy schemas?\r\n\r\n@EdsterG I will try to look into this :wink: \r\n\r\n",
          "@alexxander that would be super helpful, I know there's also a `z.late.object` methods that's implemented but undocumented. It's referenced here https://github.com/colinhacks/tozod but I'm not familiar with the inner workings of Zod so am having trouble getting it to work.",
          "Just would like to say I'm also looking forward to this PR, more human errors will be a very good improvement.",
          "> I know there's also a z.late.object methods that's implemented but undocumented.\r\n\r\nI believe that is a 2.0 construct. As far as I can tell in the source code, there is not `late` class.\r\n\r\nI'm actually wondering if we should put off supporting `lazy` here? @alexxander if you dig in a bit and run into any roadblocks, I think we should consider shipping what you have here and breaking off the further work into a separate PR.",
          "> Would it be possible to make this support lazy schemas?\r\n\r\n@EdsterG I tried some simple tests with `z.lazy`, and it seemed to work well. Did you find any particular issues?",
          "@alexxander here's a toy example where I get type errors:\r\n```\r\nimport {z} from 'zod';\r\n\r\ntype Category1 = {\r\n  type: 'Category1';\r\n  subcategories1: Array<Category>;\r\n};\r\n\r\ntype Category2 = {\r\n  type: 'Category2';\r\n  subcategories2: Array<Category>;\r\n};\r\n\r\nconst Category1Schema: z.ZodSchema<Category1> = z.object({\r\n  type: z.literal('Category1'),\r\n  subcategories1: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst Category2Schema: z.ZodSchema<Category2> = z.object({\r\n  type: z.literal('Category2'),\r\n  subcategories2: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst CategorySchema = z.discriminatedUnion('type', [Category1Schema, Category2Schema]);\r\ntype Category = z.infer<typeof CategorySchema>;\r\n```\r\nI get the following type error:\r\n```\r\nerror TS2740: Type 'ZodType<Category1, ZodTypeDef, Category1>' is missing the following properties from type 'ZodObject<{ type: ZodLiteral<Primitive>; } & ZodRawShape, any, any, { [x: string]: any; [x: number]: any; }, { [x: string]: any; [x: number]: any; }>': _shape, _unknownKeys, _catchall, _cached, and 16 more.\r\n\r\nconst CategorySchema = z.discriminatedUnion('type', [Category1Schema, Category2Schema]);\r\n```",
          "@EdsterG This fails because `z.discriminatedUnion` expects instances of `ZodObject`. You, however, typed `Category1Schema` and `Category2Schema`  as `ZodSchema`, which is an alias of `ZodType`.\r\n\r\nNonetheless, it is still possible to achieve what you want by slightly reorganizing the types.\r\n\r\n```ts\r\ntype Category1 = {\r\n  type: \"Category1\";\r\n  subcategories1: Array<Category>;\r\n};\r\n\r\ntype Category2 = {\r\n  type: \"Category2\";\r\n  subcategories2: Array<Category>;\r\n};\r\n\r\ntype Category = Category1 | Category2;\r\n\r\nconst Category1Schema = z.object({\r\n  type: z.literal(\"Category1\"),\r\n  subcategories1: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst Category2Schema = z.object({\r\n  type: z.literal(\"Category2\"),\r\n  subcategories2: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst CategorySchema: z.ZodSchema<Category> = z.discriminatedUnion(\"type\", [\r\n  Category1Schema,\r\n  Category2Schema,\r\n]);\r\n```\r\nOr even more compactly:\r\n```ts\r\ntype Category1 = {\r\n  type: \"Category1\";\r\n  subcategories1: Array<Category>;\r\n};\r\ntype Category2 = {\r\n  type: \"Category2\";\r\n  subcategories2: Array<Category>;\r\n};\r\ntype Category = Category1 | Category2;\r\n\r\nconst CategorySchema: z.ZodSchema<Category> = z.lazy(() =>\r\n  z.discriminatedUnion(\"type\", [\r\n    z.object({\r\n      type: z.literal(\"Category1\"),\r\n      subcategories1: z.array(CategorySchema),\r\n    }),\r\n    z.object({\r\n      type: z.literal(\"Category2\"),\r\n      subcategories2: z.array(CategorySchema),\r\n    }),\r\n  ])\r\n);\r\n```\r\n\r\nTherefore, I do not really think this is a big issue. But I guess I could try to make the discriminated union accept anything object-like. Though I would prefer to put it in a separate PR (if at all).\r\n\r\nAny views on this @scotttrinh?",
          "Ah, I see. The idea was that many types of categories would be defined through out the lifetime of the project so I wanted to avoid maintaining two sources of truth:\r\n```\r\ntype Category = Category1 | Category2;\r\n```\r\nand\r\n```\r\nconst CategorySchema: z.ZodSchema<Category> = z.discriminatedUnion(\"type\", [\r\n  Category1Schema,\r\n  Category2Schema,\r\n]);\r\n```\r\n\r\nHowever, I would agree that this change should go into a separate PR. In my opinion, this PR should be merged as is because its impact is too great to wait any longer.",
          "> ```ts\r\n> import {z} from 'zod';\r\n> \r\n> type Category1 = {\r\n>   type: 'Category1';\r\n>   subcategories1: Array<Category>;\r\n> };\r\n> \r\n> type Category2 = {\r\n>   type: 'Category2';\r\n>   subcategories2: Array<Category>;\r\n> };\r\n> \r\n> const Category1Schema: z.ZodSchema<Category1> = z.object({\r\n>   type: z.literal('Category1'),\r\n>   subcategories1: z.array(z.lazy(() => CategorySchema)),\r\n> });\r\n> \r\n> const Category2Schema: z.ZodSchema<Category2> = z.object({\r\n>   type: z.literal('Category2'),\r\n>   subcategories2: z.array(z.lazy(() => CategorySchema)),\r\n> });\r\n> \r\n> const CategorySchema = z.discriminatedUnion('type', [Category1Schema, Category2Schema]);\r\n> type Category = z.infer<typeof CategorySchema>;\r\n> ```\r\n\r\n@EdsterG, actually, even if `z.discriminatedUnion` accepted anything object-like, typescript would still throw recursion-related errors with your solution quoted above. The thing is that `Category` is inferred from `CategorySchema`, which refers to `Category1Schema` of type `Category1`. However, `Category1` refers to `Category`.\r\n\r\n",
          "@scotttrinh I added the simplified implementation of the map data structure as it was outlined in one of my previous comments (`util.SimpleMap`). It implements `get(key)`, `set(key, value)`, `has(key)`, `keys()` and the `size` property. Though I am not completely happy about the additional complexity it introduces (I mean, `Map` is well documented in the standards, while this one is custom and does not fully adhere to the `Map` interface). But it might be a good trade-off between a full `Map` polyfill and relying on `Map` being present in the environment.",
          "@alexxander \r\n\r\nLooking at https://caniuse.com/mdn-javascript_builtins_map I'm personally fine with IE11+ here, so `Map` still seems like a reasonable choice. We use `const`/`let` which has even worse support than `Map` (TIL!).\r\n\r\n@EdsterG \r\n\r\nRE: The type errors related to `ZodSchema`/`ZodType`\r\n\r\nWe shouldn't do too much work to support explicit types like the examples given here. Zod takes a pretty opinionated and strong stance that it should be the source of truth for types and does a best-effort job of supporting defining the types in TypeScript first. The big place of friction with this is external types that you do not control, so it's definitely ideal for it to work well if possible, but we should not spend too much development effort trying to get it to work. If `z.infer`/`z.input`/`z.output` is able to infer the correct type, that's our primary concern.",
          "@scotttrinh So I should revert it to the state in which `Map` is used, right?\r\nIs there anything else that has to be done (or that has to be changed) before this can be merged?",
          "> @scotttrinh So I should revert it to the state in which Map is used, right?\r\n> Is there anything else that has to be done (or that has to be changed) before this can be merged?\r\n\r\nJust went back through the code, and it looks very good to me, thank you for all of your hard work here! Once you get it back to using a `Map`, do you mind just running the benchmarks again and updating the description if they're different at all from the first time you ran it?",
          "@scotttrinh I reverted it. So now it uses `Map` again. I also ran the benchmarks and updated the pull request description.",
          "Whoa, amazing! This is just what we needed today. But looks like this isn't published to npm yet? Any way we can get a beta published?",
          "I published the latest master branch for anyone else who needs it.\r\n\r\nSet this in your package.json\r\n```json\r\n\"zod\": \"npm:@flybayer/zod@3.11.7-discriminatedUnion\"\r\n```"
        ]
      },
      {
        "pr_number": 899,
        "title": "Discriminated union",
        "body": "Resolves #894.\r\n\r\nI implemented the `z.discriminatedUnion(discriminator, options)` method. I also added tests and benchmarks.\r\n\r\nHere are the results of the benchmarks to demonstrate the speed improvements introduced by the new `z.discriminatedUnion` method:\r\n```\r\nz.union: double: valid: a x 310,690 ops/sec \u00b13.68% (98 runs sampled)\r\nz.union: double: valid: b x 317,585 ops/sec \u00b10.13% (99 runs sampled)\r\nz.union: double: invalid: null x 52,452 ops/sec \u00b10.69% (94 runs sampled)\r\nz.union: double: invalid: wrong shape x 46,605 ops/sec \u00b10.43% (94 runs sampled)\r\nz.union: many: valid: a x 151,210 ops/sec \u00b13.75% (95 runs sampled)\r\nz.union: many: valid: c x 155,035 ops/sec \u00b10.21% (97 runs sampled)\r\nz.union: many: invalid: null x 31,971 ops/sec \u00b10.53% (93 runs sampled)\r\nz.union: many: invalid: wrong shape x 28,777 ops/sec \u00b10.42% (95 runs sampled)\r\n\r\nz.discriminatedUnion: double: valid: a x 857,014 ops/sec \u00b13.61% (99 runs sampled)\r\nz.discriminatedUnion: double: valid: b x 876,301 ops/sec \u00b10.15% (95 runs sampled)\r\nz.discriminatedUnion: double: invalid: null x 130,574 ops/sec \u00b10.55% (98 runs sampled)\r\nz.discriminatedUnion: double: invalid: wrong shape x 124,104 ops/sec \u00b13.36% (98 runs sampled)\r\nz.discriminatedUnion: many: valid: a x 859,193 ops/sec \u00b10.28% (94 runs sampled)\r\nz.discriminatedUnion: many: valid: c x 858,599 ops/sec \u00b10.30% (94 runs sampled)\r\nz.discriminatedUnion: many: invalid: null x 124,720 ops/sec \u00b10.36% (96 runs sampled)\r\nz.discriminatedUnion: many: invalid: wrong shape x 117,588 ops/sec \u00b13.44% (93 runs sampled)\r\n\r\nz.string: empty string x 3,263,033 ops/sec \u00b11.31% (94 runs sampled)\r\nz.string: short string x 3,254,089 ops/sec \u00b10.82% (93 runs sampled)\r\nz.string: long string x 3,249,335 ops/sec \u00b10.73% (93 runs sampled)\r\nz.string: invalid: null x 138,359 ops/sec \u00b10.58% (95 runs sampled)\r\nz.string: manual parser: long x 883,218,417 ops/sec \u00b10.31% (92 runs sampled)\r\nz.object: empty: valid x 2,477,603 ops/sec \u00b10.18% (97 runs sampled)\r\nz.object: empty: valid: extra keys x 2,291,072 ops/sec \u00b10.12% (95 runs sampled)\r\nz.object: empty: invalid: null x 142,172 ops/sec \u00b10.54% (97 runs sampled)\r\nz.object: short: valid x 1,139,297 ops/sec \u00b13.54% (99 runs sampled)\r\nz.object: short: valid: extra keys x 1,086,536 ops/sec \u00b10.30% (99 runs sampled)\r\nz.object: short: invalid: null x 141,700 ops/sec \u00b10.56% (96 runs sampled)\r\nz.object: long: valid x 481,833 ops/sec \u00b13.78% (91 runs sampled)\r\nz.object: long: valid: extra keys x 469,050 ops/sec \u00b10.24% (100 runs sampled)\r\nz.object: long: invalid: null x 145,378 ops/sec \u00b10.57% (97 runs sampled)\r\nDone in 165.07s.\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/899",
        "comments": [
          "Thanks @alexxander for this PR. The team I work with would have an immediate use for this as the current errors for unions can leave something to be desired. I am not sure what the current approval process for this project is but I would be happy to do an initial review before @colinhacks.",
          "Hi @EdsterG, firstly, thanks for the compliments on my work, I am glad you find this useful.\r\n\r\nHowever, I did try to handle that case you mentioned and I am failing to reproduce the incorrect error. Though it might be that something slipped through my fingers. I actually even created a new zod issue type for this particular purpose. See the test case bellow:\r\n\r\n```ts\r\ntest(\"invalid discriminator value\", () => {\r\n    expect.assertions(1);\r\n    try {\r\n      z.discriminatedUnion(\"type\", [\r\n        z.object({ type: z.literal(\"a\"), a: z.string() }),\r\n        z.object({ type: z.literal(\"b\"), b: z.string() }),\r\n      ]).parse({ type: \"x\", a: \"abc\" });\r\n    } catch (e: any) {\r\n      expect(JSON.parse(e.message)).toEqual([\r\n        {\r\n          code: z.ZodIssueCode.invalid_union_discriminator,\r\n          expectedOneOf: [\"a\", \"b\"],\r\n          received: \"x\",\r\n          message:\r\n            \"Invalid discriminator value. Expected one of: a, b. Received x.\",\r\n          path: [\"type\"],\r\n        },\r\n      ]);\r\n    }\r\n  });\r\n```\r\n\r\nI tried to pass other values in the `type` property - such as `null`, an object, `undefined`. I even tried leaving the property out. And in all the cases it seemed to work. Is there anything I am missing?",
          "Hi @CantelopePeel, before this PR, I also implemented a self-standing function to handle discriminated unions with zod. I guess you might be interested in that as well: https://github.com/colinhacks/zod/issues/792#issuecomment-1023251415.",
          "@alexxander yes that was my mistake. I was getting a very confusing error message and accidentally thought it was related to incorrect discriminator value. Your code correctly reports when an invalid discriminator is passed in. On that same note, there seems to be a previous issue to remove input values from the error messages. Might make sense to follow the same pattern and avoid having the input value as part of the error message. https://github.com/colinhacks/zod/issues/461",
          "> On that same note, there seems to be a previous issue to remove input values from the error messages. Might make sense to follow the same pattern and avoid having the input value as part of the error message\r\n\r\nYeah, it has been our practice to _not_ leak input or schema data in error messaging to avoid logging sensitive or personally-identifying information to logs/etc. Applications _should_ have the context at the call-site to report that sort of data themselves if they find it useful.",
          "Previously, the only supported discriminator value type was `string`. In the last commit, I added support for other primitive types supported by the `z.literal` function. The drawback is that I needed to use the `Map` data type. Should this be a problem, I can implement it using a separate object for each type:\r\n```js\r\nconst map = {\r\n  'string': {},\r\n  'number': {},\r\n  'bigint': {},\r\n  'boolean': {},\r\n  'object': {},\r\n  'undefined': {}\r\n};\r\nmap[typeof discriminatorValue][discriminatorValue] = schema;\r\n```\r\n\r\nWhat do you think @scotttrinh?",
          "Also, there are the failing _deno_ tests. I guess I have to modify the tests to be compatible with both _jest_ and _deno_? Any hints @scotttrinh?\r\n\r\nHow about using something like https://github.com/gcaptn/tincan? (Though this might be for a different issue.)",
          "> The drawback is that I needed to use the Map data type.\r\n\r\nGlad you called that out. Hmm. We don't have a strong platform support story, but if it's easy enough to implement in the nested way you've outlined then that's probably the safest bet here without wanting a major version bump and a line-in-the-sand policy about platform support.\r\n\r\n> Also, there are the failing deno tests. I guess I have to modify the tests to be compatible with both jest and deno?\r\n\r\nYeah, we are trying to be friendly to the Deno community as much as is feasible. I can take a look at the failing tests, but I have 0 experience with Deno so won't be too much specific help.",
          "Would it be possible to make this support lazy schemas? Otherwise it's not possible to use with discriminated recursive schemas.",
          "> Would it be possible to make this support lazy schemas?\r\n\r\n@EdsterG I will try to look into this :wink: \r\n\r\n",
          "@alexxander that would be super helpful, I know there's also a `z.late.object` methods that's implemented but undocumented. It's referenced here https://github.com/colinhacks/tozod but I'm not familiar with the inner workings of Zod so am having trouble getting it to work.",
          "Just would like to say I'm also looking forward to this PR, more human errors will be a very good improvement.",
          "> I know there's also a z.late.object methods that's implemented but undocumented.\r\n\r\nI believe that is a 2.0 construct. As far as I can tell in the source code, there is not `late` class.\r\n\r\nI'm actually wondering if we should put off supporting `lazy` here? @alexxander if you dig in a bit and run into any roadblocks, I think we should consider shipping what you have here and breaking off the further work into a separate PR.",
          "> Would it be possible to make this support lazy schemas?\r\n\r\n@EdsterG I tried some simple tests with `z.lazy`, and it seemed to work well. Did you find any particular issues?",
          "@alexxander here's a toy example where I get type errors:\r\n```\r\nimport {z} from 'zod';\r\n\r\ntype Category1 = {\r\n  type: 'Category1';\r\n  subcategories1: Array<Category>;\r\n};\r\n\r\ntype Category2 = {\r\n  type: 'Category2';\r\n  subcategories2: Array<Category>;\r\n};\r\n\r\nconst Category1Schema: z.ZodSchema<Category1> = z.object({\r\n  type: z.literal('Category1'),\r\n  subcategories1: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst Category2Schema: z.ZodSchema<Category2> = z.object({\r\n  type: z.literal('Category2'),\r\n  subcategories2: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst CategorySchema = z.discriminatedUnion('type', [Category1Schema, Category2Schema]);\r\ntype Category = z.infer<typeof CategorySchema>;\r\n```\r\nI get the following type error:\r\n```\r\nerror TS2740: Type 'ZodType<Category1, ZodTypeDef, Category1>' is missing the following properties from type 'ZodObject<{ type: ZodLiteral<Primitive>; } & ZodRawShape, any, any, { [x: string]: any; [x: number]: any; }, { [x: string]: any; [x: number]: any; }>': _shape, _unknownKeys, _catchall, _cached, and 16 more.\r\n\r\nconst CategorySchema = z.discriminatedUnion('type', [Category1Schema, Category2Schema]);\r\n```",
          "@EdsterG This fails because `z.discriminatedUnion` expects instances of `ZodObject`. You, however, typed `Category1Schema` and `Category2Schema`  as `ZodSchema`, which is an alias of `ZodType`.\r\n\r\nNonetheless, it is still possible to achieve what you want by slightly reorganizing the types.\r\n\r\n```ts\r\ntype Category1 = {\r\n  type: \"Category1\";\r\n  subcategories1: Array<Category>;\r\n};\r\n\r\ntype Category2 = {\r\n  type: \"Category2\";\r\n  subcategories2: Array<Category>;\r\n};\r\n\r\ntype Category = Category1 | Category2;\r\n\r\nconst Category1Schema = z.object({\r\n  type: z.literal(\"Category1\"),\r\n  subcategories1: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst Category2Schema = z.object({\r\n  type: z.literal(\"Category2\"),\r\n  subcategories2: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst CategorySchema: z.ZodSchema<Category> = z.discriminatedUnion(\"type\", [\r\n  Category1Schema,\r\n  Category2Schema,\r\n]);\r\n```\r\nOr even more compactly:\r\n```ts\r\ntype Category1 = {\r\n  type: \"Category1\";\r\n  subcategories1: Array<Category>;\r\n};\r\ntype Category2 = {\r\n  type: \"Category2\";\r\n  subcategories2: Array<Category>;\r\n};\r\ntype Category = Category1 | Category2;\r\n\r\nconst CategorySchema: z.ZodSchema<Category> = z.lazy(() =>\r\n  z.discriminatedUnion(\"type\", [\r\n    z.object({\r\n      type: z.literal(\"Category1\"),\r\n      subcategories1: z.array(CategorySchema),\r\n    }),\r\n    z.object({\r\n      type: z.literal(\"Category2\"),\r\n      subcategories2: z.array(CategorySchema),\r\n    }),\r\n  ])\r\n);\r\n```\r\n\r\nTherefore, I do not really think this is a big issue. But I guess I could try to make the discriminated union accept anything object-like. Though I would prefer to put it in a separate PR (if at all).\r\n\r\nAny views on this @scotttrinh?",
          "Ah, I see. The idea was that many types of categories would be defined through out the lifetime of the project so I wanted to avoid maintaining two sources of truth:\r\n```\r\ntype Category = Category1 | Category2;\r\n```\r\nand\r\n```\r\nconst CategorySchema: z.ZodSchema<Category> = z.discriminatedUnion(\"type\", [\r\n  Category1Schema,\r\n  Category2Schema,\r\n]);\r\n```\r\n\r\nHowever, I would agree that this change should go into a separate PR. In my opinion, this PR should be merged as is because its impact is too great to wait any longer.",
          "> ```ts\r\n> import {z} from 'zod';\r\n> \r\n> type Category1 = {\r\n>   type: 'Category1';\r\n>   subcategories1: Array<Category>;\r\n> };\r\n> \r\n> type Category2 = {\r\n>   type: 'Category2';\r\n>   subcategories2: Array<Category>;\r\n> };\r\n> \r\n> const Category1Schema: z.ZodSchema<Category1> = z.object({\r\n>   type: z.literal('Category1'),\r\n>   subcategories1: z.array(z.lazy(() => CategorySchema)),\r\n> });\r\n> \r\n> const Category2Schema: z.ZodSchema<Category2> = z.object({\r\n>   type: z.literal('Category2'),\r\n>   subcategories2: z.array(z.lazy(() => CategorySchema)),\r\n> });\r\n> \r\n> const CategorySchema = z.discriminatedUnion('type', [Category1Schema, Category2Schema]);\r\n> type Category = z.infer<typeof CategorySchema>;\r\n> ```\r\n\r\n@EdsterG, actually, even if `z.discriminatedUnion` accepted anything object-like, typescript would still throw recursion-related errors with your solution quoted above. The thing is that `Category` is inferred from `CategorySchema`, which refers to `Category1Schema` of type `Category1`. However, `Category1` refers to `Category`.\r\n\r\n",
          "@scotttrinh I added the simplified implementation of the map data structure as it was outlined in one of my previous comments (`util.SimpleMap`). It implements `get(key)`, `set(key, value)`, `has(key)`, `keys()` and the `size` property. Though I am not completely happy about the additional complexity it introduces (I mean, `Map` is well documented in the standards, while this one is custom and does not fully adhere to the `Map` interface). But it might be a good trade-off between a full `Map` polyfill and relying on `Map` being present in the environment.",
          "@alexxander \r\n\r\nLooking at https://caniuse.com/mdn-javascript_builtins_map I'm personally fine with IE11+ here, so `Map` still seems like a reasonable choice. We use `const`/`let` which has even worse support than `Map` (TIL!).\r\n\r\n@EdsterG \r\n\r\nRE: The type errors related to `ZodSchema`/`ZodType`\r\n\r\nWe shouldn't do too much work to support explicit types like the examples given here. Zod takes a pretty opinionated and strong stance that it should be the source of truth for types and does a best-effort job of supporting defining the types in TypeScript first. The big place of friction with this is external types that you do not control, so it's definitely ideal for it to work well if possible, but we should not spend too much development effort trying to get it to work. If `z.infer`/`z.input`/`z.output` is able to infer the correct type, that's our primary concern.",
          "@scotttrinh So I should revert it to the state in which `Map` is used, right?\r\nIs there anything else that has to be done (or that has to be changed) before this can be merged?",
          "> @scotttrinh So I should revert it to the state in which Map is used, right?\r\n> Is there anything else that has to be done (or that has to be changed) before this can be merged?\r\n\r\nJust went back through the code, and it looks very good to me, thank you for all of your hard work here! Once you get it back to using a `Map`, do you mind just running the benchmarks again and updating the description if they're different at all from the first time you ran it?",
          "@scotttrinh I reverted it. So now it uses `Map` again. I also ran the benchmarks and updated the pull request description.",
          "Whoa, amazing! This is just what we needed today. But looks like this isn't published to npm yet? Any way we can get a beta published?",
          "I published the latest master branch for anyone else who needs it.\r\n\r\nSet this in your package.json\r\n```json\r\n\"zod\": \"npm:@flybayer/zod@3.11.7-discriminatedUnion\"\r\n```"
        ]
      },
      {
        "pr_number": 899,
        "title": "Discriminated union",
        "body": "Resolves #894.\r\n\r\nI implemented the `z.discriminatedUnion(discriminator, options)` method. I also added tests and benchmarks.\r\n\r\nHere are the results of the benchmarks to demonstrate the speed improvements introduced by the new `z.discriminatedUnion` method:\r\n```\r\nz.union: double: valid: a x 310,690 ops/sec \u00b13.68% (98 runs sampled)\r\nz.union: double: valid: b x 317,585 ops/sec \u00b10.13% (99 runs sampled)\r\nz.union: double: invalid: null x 52,452 ops/sec \u00b10.69% (94 runs sampled)\r\nz.union: double: invalid: wrong shape x 46,605 ops/sec \u00b10.43% (94 runs sampled)\r\nz.union: many: valid: a x 151,210 ops/sec \u00b13.75% (95 runs sampled)\r\nz.union: many: valid: c x 155,035 ops/sec \u00b10.21% (97 runs sampled)\r\nz.union: many: invalid: null x 31,971 ops/sec \u00b10.53% (93 runs sampled)\r\nz.union: many: invalid: wrong shape x 28,777 ops/sec \u00b10.42% (95 runs sampled)\r\n\r\nz.discriminatedUnion: double: valid: a x 857,014 ops/sec \u00b13.61% (99 runs sampled)\r\nz.discriminatedUnion: double: valid: b x 876,301 ops/sec \u00b10.15% (95 runs sampled)\r\nz.discriminatedUnion: double: invalid: null x 130,574 ops/sec \u00b10.55% (98 runs sampled)\r\nz.discriminatedUnion: double: invalid: wrong shape x 124,104 ops/sec \u00b13.36% (98 runs sampled)\r\nz.discriminatedUnion: many: valid: a x 859,193 ops/sec \u00b10.28% (94 runs sampled)\r\nz.discriminatedUnion: many: valid: c x 858,599 ops/sec \u00b10.30% (94 runs sampled)\r\nz.discriminatedUnion: many: invalid: null x 124,720 ops/sec \u00b10.36% (96 runs sampled)\r\nz.discriminatedUnion: many: invalid: wrong shape x 117,588 ops/sec \u00b13.44% (93 runs sampled)\r\n\r\nz.string: empty string x 3,263,033 ops/sec \u00b11.31% (94 runs sampled)\r\nz.string: short string x 3,254,089 ops/sec \u00b10.82% (93 runs sampled)\r\nz.string: long string x 3,249,335 ops/sec \u00b10.73% (93 runs sampled)\r\nz.string: invalid: null x 138,359 ops/sec \u00b10.58% (95 runs sampled)\r\nz.string: manual parser: long x 883,218,417 ops/sec \u00b10.31% (92 runs sampled)\r\nz.object: empty: valid x 2,477,603 ops/sec \u00b10.18% (97 runs sampled)\r\nz.object: empty: valid: extra keys x 2,291,072 ops/sec \u00b10.12% (95 runs sampled)\r\nz.object: empty: invalid: null x 142,172 ops/sec \u00b10.54% (97 runs sampled)\r\nz.object: short: valid x 1,139,297 ops/sec \u00b13.54% (99 runs sampled)\r\nz.object: short: valid: extra keys x 1,086,536 ops/sec \u00b10.30% (99 runs sampled)\r\nz.object: short: invalid: null x 141,700 ops/sec \u00b10.56% (96 runs sampled)\r\nz.object: long: valid x 481,833 ops/sec \u00b13.78% (91 runs sampled)\r\nz.object: long: valid: extra keys x 469,050 ops/sec \u00b10.24% (100 runs sampled)\r\nz.object: long: invalid: null x 145,378 ops/sec \u00b10.57% (97 runs sampled)\r\nDone in 165.07s.\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/899",
        "comments": [
          "Thanks @alexxander for this PR. The team I work with would have an immediate use for this as the current errors for unions can leave something to be desired. I am not sure what the current approval process for this project is but I would be happy to do an initial review before @colinhacks.",
          "Hi @EdsterG, firstly, thanks for the compliments on my work, I am glad you find this useful.\r\n\r\nHowever, I did try to handle that case you mentioned and I am failing to reproduce the incorrect error. Though it might be that something slipped through my fingers. I actually even created a new zod issue type for this particular purpose. See the test case bellow:\r\n\r\n```ts\r\ntest(\"invalid discriminator value\", () => {\r\n    expect.assertions(1);\r\n    try {\r\n      z.discriminatedUnion(\"type\", [\r\n        z.object({ type: z.literal(\"a\"), a: z.string() }),\r\n        z.object({ type: z.literal(\"b\"), b: z.string() }),\r\n      ]).parse({ type: \"x\", a: \"abc\" });\r\n    } catch (e: any) {\r\n      expect(JSON.parse(e.message)).toEqual([\r\n        {\r\n          code: z.ZodIssueCode.invalid_union_discriminator,\r\n          expectedOneOf: [\"a\", \"b\"],\r\n          received: \"x\",\r\n          message:\r\n            \"Invalid discriminator value. Expected one of: a, b. Received x.\",\r\n          path: [\"type\"],\r\n        },\r\n      ]);\r\n    }\r\n  });\r\n```\r\n\r\nI tried to pass other values in the `type` property - such as `null`, an object, `undefined`. I even tried leaving the property out. And in all the cases it seemed to work. Is there anything I am missing?",
          "Hi @CantelopePeel, before this PR, I also implemented a self-standing function to handle discriminated unions with zod. I guess you might be interested in that as well: https://github.com/colinhacks/zod/issues/792#issuecomment-1023251415.",
          "@alexxander yes that was my mistake. I was getting a very confusing error message and accidentally thought it was related to incorrect discriminator value. Your code correctly reports when an invalid discriminator is passed in. On that same note, there seems to be a previous issue to remove input values from the error messages. Might make sense to follow the same pattern and avoid having the input value as part of the error message. https://github.com/colinhacks/zod/issues/461",
          "> On that same note, there seems to be a previous issue to remove input values from the error messages. Might make sense to follow the same pattern and avoid having the input value as part of the error message\r\n\r\nYeah, it has been our practice to _not_ leak input or schema data in error messaging to avoid logging sensitive or personally-identifying information to logs/etc. Applications _should_ have the context at the call-site to report that sort of data themselves if they find it useful.",
          "Previously, the only supported discriminator value type was `string`. In the last commit, I added support for other primitive types supported by the `z.literal` function. The drawback is that I needed to use the `Map` data type. Should this be a problem, I can implement it using a separate object for each type:\r\n```js\r\nconst map = {\r\n  'string': {},\r\n  'number': {},\r\n  'bigint': {},\r\n  'boolean': {},\r\n  'object': {},\r\n  'undefined': {}\r\n};\r\nmap[typeof discriminatorValue][discriminatorValue] = schema;\r\n```\r\n\r\nWhat do you think @scotttrinh?",
          "Also, there are the failing _deno_ tests. I guess I have to modify the tests to be compatible with both _jest_ and _deno_? Any hints @scotttrinh?\r\n\r\nHow about using something like https://github.com/gcaptn/tincan? (Though this might be for a different issue.)",
          "> The drawback is that I needed to use the Map data type.\r\n\r\nGlad you called that out. Hmm. We don't have a strong platform support story, but if it's easy enough to implement in the nested way you've outlined then that's probably the safest bet here without wanting a major version bump and a line-in-the-sand policy about platform support.\r\n\r\n> Also, there are the failing deno tests. I guess I have to modify the tests to be compatible with both jest and deno?\r\n\r\nYeah, we are trying to be friendly to the Deno community as much as is feasible. I can take a look at the failing tests, but I have 0 experience with Deno so won't be too much specific help.",
          "Would it be possible to make this support lazy schemas? Otherwise it's not possible to use with discriminated recursive schemas.",
          "> Would it be possible to make this support lazy schemas?\r\n\r\n@EdsterG I will try to look into this :wink: \r\n\r\n",
          "@alexxander that would be super helpful, I know there's also a `z.late.object` methods that's implemented but undocumented. It's referenced here https://github.com/colinhacks/tozod but I'm not familiar with the inner workings of Zod so am having trouble getting it to work.",
          "Just would like to say I'm also looking forward to this PR, more human errors will be a very good improvement.",
          "> I know there's also a z.late.object methods that's implemented but undocumented.\r\n\r\nI believe that is a 2.0 construct. As far as I can tell in the source code, there is not `late` class.\r\n\r\nI'm actually wondering if we should put off supporting `lazy` here? @alexxander if you dig in a bit and run into any roadblocks, I think we should consider shipping what you have here and breaking off the further work into a separate PR.",
          "> Would it be possible to make this support lazy schemas?\r\n\r\n@EdsterG I tried some simple tests with `z.lazy`, and it seemed to work well. Did you find any particular issues?",
          "@alexxander here's a toy example where I get type errors:\r\n```\r\nimport {z} from 'zod';\r\n\r\ntype Category1 = {\r\n  type: 'Category1';\r\n  subcategories1: Array<Category>;\r\n};\r\n\r\ntype Category2 = {\r\n  type: 'Category2';\r\n  subcategories2: Array<Category>;\r\n};\r\n\r\nconst Category1Schema: z.ZodSchema<Category1> = z.object({\r\n  type: z.literal('Category1'),\r\n  subcategories1: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst Category2Schema: z.ZodSchema<Category2> = z.object({\r\n  type: z.literal('Category2'),\r\n  subcategories2: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst CategorySchema = z.discriminatedUnion('type', [Category1Schema, Category2Schema]);\r\ntype Category = z.infer<typeof CategorySchema>;\r\n```\r\nI get the following type error:\r\n```\r\nerror TS2740: Type 'ZodType<Category1, ZodTypeDef, Category1>' is missing the following properties from type 'ZodObject<{ type: ZodLiteral<Primitive>; } & ZodRawShape, any, any, { [x: string]: any; [x: number]: any; }, { [x: string]: any; [x: number]: any; }>': _shape, _unknownKeys, _catchall, _cached, and 16 more.\r\n\r\nconst CategorySchema = z.discriminatedUnion('type', [Category1Schema, Category2Schema]);\r\n```",
          "@EdsterG This fails because `z.discriminatedUnion` expects instances of `ZodObject`. You, however, typed `Category1Schema` and `Category2Schema`  as `ZodSchema`, which is an alias of `ZodType`.\r\n\r\nNonetheless, it is still possible to achieve what you want by slightly reorganizing the types.\r\n\r\n```ts\r\ntype Category1 = {\r\n  type: \"Category1\";\r\n  subcategories1: Array<Category>;\r\n};\r\n\r\ntype Category2 = {\r\n  type: \"Category2\";\r\n  subcategories2: Array<Category>;\r\n};\r\n\r\ntype Category = Category1 | Category2;\r\n\r\nconst Category1Schema = z.object({\r\n  type: z.literal(\"Category1\"),\r\n  subcategories1: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst Category2Schema = z.object({\r\n  type: z.literal(\"Category2\"),\r\n  subcategories2: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst CategorySchema: z.ZodSchema<Category> = z.discriminatedUnion(\"type\", [\r\n  Category1Schema,\r\n  Category2Schema,\r\n]);\r\n```\r\nOr even more compactly:\r\n```ts\r\ntype Category1 = {\r\n  type: \"Category1\";\r\n  subcategories1: Array<Category>;\r\n};\r\ntype Category2 = {\r\n  type: \"Category2\";\r\n  subcategories2: Array<Category>;\r\n};\r\ntype Category = Category1 | Category2;\r\n\r\nconst CategorySchema: z.ZodSchema<Category> = z.lazy(() =>\r\n  z.discriminatedUnion(\"type\", [\r\n    z.object({\r\n      type: z.literal(\"Category1\"),\r\n      subcategories1: z.array(CategorySchema),\r\n    }),\r\n    z.object({\r\n      type: z.literal(\"Category2\"),\r\n      subcategories2: z.array(CategorySchema),\r\n    }),\r\n  ])\r\n);\r\n```\r\n\r\nTherefore, I do not really think this is a big issue. But I guess I could try to make the discriminated union accept anything object-like. Though I would prefer to put it in a separate PR (if at all).\r\n\r\nAny views on this @scotttrinh?",
          "Ah, I see. The idea was that many types of categories would be defined through out the lifetime of the project so I wanted to avoid maintaining two sources of truth:\r\n```\r\ntype Category = Category1 | Category2;\r\n```\r\nand\r\n```\r\nconst CategorySchema: z.ZodSchema<Category> = z.discriminatedUnion(\"type\", [\r\n  Category1Schema,\r\n  Category2Schema,\r\n]);\r\n```\r\n\r\nHowever, I would agree that this change should go into a separate PR. In my opinion, this PR should be merged as is because its impact is too great to wait any longer.",
          "> ```ts\r\n> import {z} from 'zod';\r\n> \r\n> type Category1 = {\r\n>   type: 'Category1';\r\n>   subcategories1: Array<Category>;\r\n> };\r\n> \r\n> type Category2 = {\r\n>   type: 'Category2';\r\n>   subcategories2: Array<Category>;\r\n> };\r\n> \r\n> const Category1Schema: z.ZodSchema<Category1> = z.object({\r\n>   type: z.literal('Category1'),\r\n>   subcategories1: z.array(z.lazy(() => CategorySchema)),\r\n> });\r\n> \r\n> const Category2Schema: z.ZodSchema<Category2> = z.object({\r\n>   type: z.literal('Category2'),\r\n>   subcategories2: z.array(z.lazy(() => CategorySchema)),\r\n> });\r\n> \r\n> const CategorySchema = z.discriminatedUnion('type', [Category1Schema, Category2Schema]);\r\n> type Category = z.infer<typeof CategorySchema>;\r\n> ```\r\n\r\n@EdsterG, actually, even if `z.discriminatedUnion` accepted anything object-like, typescript would still throw recursion-related errors with your solution quoted above. The thing is that `Category` is inferred from `CategorySchema`, which refers to `Category1Schema` of type `Category1`. However, `Category1` refers to `Category`.\r\n\r\n",
          "@scotttrinh I added the simplified implementation of the map data structure as it was outlined in one of my previous comments (`util.SimpleMap`). It implements `get(key)`, `set(key, value)`, `has(key)`, `keys()` and the `size` property. Though I am not completely happy about the additional complexity it introduces (I mean, `Map` is well documented in the standards, while this one is custom and does not fully adhere to the `Map` interface). But it might be a good trade-off between a full `Map` polyfill and relying on `Map` being present in the environment.",
          "@alexxander \r\n\r\nLooking at https://caniuse.com/mdn-javascript_builtins_map I'm personally fine with IE11+ here, so `Map` still seems like a reasonable choice. We use `const`/`let` which has even worse support than `Map` (TIL!).\r\n\r\n@EdsterG \r\n\r\nRE: The type errors related to `ZodSchema`/`ZodType`\r\n\r\nWe shouldn't do too much work to support explicit types like the examples given here. Zod takes a pretty opinionated and strong stance that it should be the source of truth for types and does a best-effort job of supporting defining the types in TypeScript first. The big place of friction with this is external types that you do not control, so it's definitely ideal for it to work well if possible, but we should not spend too much development effort trying to get it to work. If `z.infer`/`z.input`/`z.output` is able to infer the correct type, that's our primary concern.",
          "@scotttrinh So I should revert it to the state in which `Map` is used, right?\r\nIs there anything else that has to be done (or that has to be changed) before this can be merged?",
          "> @scotttrinh So I should revert it to the state in which Map is used, right?\r\n> Is there anything else that has to be done (or that has to be changed) before this can be merged?\r\n\r\nJust went back through the code, and it looks very good to me, thank you for all of your hard work here! Once you get it back to using a `Map`, do you mind just running the benchmarks again and updating the description if they're different at all from the first time you ran it?",
          "@scotttrinh I reverted it. So now it uses `Map` again. I also ran the benchmarks and updated the pull request description.",
          "Whoa, amazing! This is just what we needed today. But looks like this isn't published to npm yet? Any way we can get a beta published?",
          "I published the latest master branch for anyone else who needs it.\r\n\r\nSet this in your package.json\r\n```json\r\n\"zod\": \"npm:@flybayer/zod@3.11.7-discriminatedUnion\"\r\n```"
        ]
      },
      {
        "pr_number": 899,
        "title": "Discriminated union",
        "body": "Resolves #894.\r\n\r\nI implemented the `z.discriminatedUnion(discriminator, options)` method. I also added tests and benchmarks.\r\n\r\nHere are the results of the benchmarks to demonstrate the speed improvements introduced by the new `z.discriminatedUnion` method:\r\n```\r\nz.union: double: valid: a x 310,690 ops/sec \u00b13.68% (98 runs sampled)\r\nz.union: double: valid: b x 317,585 ops/sec \u00b10.13% (99 runs sampled)\r\nz.union: double: invalid: null x 52,452 ops/sec \u00b10.69% (94 runs sampled)\r\nz.union: double: invalid: wrong shape x 46,605 ops/sec \u00b10.43% (94 runs sampled)\r\nz.union: many: valid: a x 151,210 ops/sec \u00b13.75% (95 runs sampled)\r\nz.union: many: valid: c x 155,035 ops/sec \u00b10.21% (97 runs sampled)\r\nz.union: many: invalid: null x 31,971 ops/sec \u00b10.53% (93 runs sampled)\r\nz.union: many: invalid: wrong shape x 28,777 ops/sec \u00b10.42% (95 runs sampled)\r\n\r\nz.discriminatedUnion: double: valid: a x 857,014 ops/sec \u00b13.61% (99 runs sampled)\r\nz.discriminatedUnion: double: valid: b x 876,301 ops/sec \u00b10.15% (95 runs sampled)\r\nz.discriminatedUnion: double: invalid: null x 130,574 ops/sec \u00b10.55% (98 runs sampled)\r\nz.discriminatedUnion: double: invalid: wrong shape x 124,104 ops/sec \u00b13.36% (98 runs sampled)\r\nz.discriminatedUnion: many: valid: a x 859,193 ops/sec \u00b10.28% (94 runs sampled)\r\nz.discriminatedUnion: many: valid: c x 858,599 ops/sec \u00b10.30% (94 runs sampled)\r\nz.discriminatedUnion: many: invalid: null x 124,720 ops/sec \u00b10.36% (96 runs sampled)\r\nz.discriminatedUnion: many: invalid: wrong shape x 117,588 ops/sec \u00b13.44% (93 runs sampled)\r\n\r\nz.string: empty string x 3,263,033 ops/sec \u00b11.31% (94 runs sampled)\r\nz.string: short string x 3,254,089 ops/sec \u00b10.82% (93 runs sampled)\r\nz.string: long string x 3,249,335 ops/sec \u00b10.73% (93 runs sampled)\r\nz.string: invalid: null x 138,359 ops/sec \u00b10.58% (95 runs sampled)\r\nz.string: manual parser: long x 883,218,417 ops/sec \u00b10.31% (92 runs sampled)\r\nz.object: empty: valid x 2,477,603 ops/sec \u00b10.18% (97 runs sampled)\r\nz.object: empty: valid: extra keys x 2,291,072 ops/sec \u00b10.12% (95 runs sampled)\r\nz.object: empty: invalid: null x 142,172 ops/sec \u00b10.54% (97 runs sampled)\r\nz.object: short: valid x 1,139,297 ops/sec \u00b13.54% (99 runs sampled)\r\nz.object: short: valid: extra keys x 1,086,536 ops/sec \u00b10.30% (99 runs sampled)\r\nz.object: short: invalid: null x 141,700 ops/sec \u00b10.56% (96 runs sampled)\r\nz.object: long: valid x 481,833 ops/sec \u00b13.78% (91 runs sampled)\r\nz.object: long: valid: extra keys x 469,050 ops/sec \u00b10.24% (100 runs sampled)\r\nz.object: long: invalid: null x 145,378 ops/sec \u00b10.57% (97 runs sampled)\r\nDone in 165.07s.\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/899",
        "comments": [
          "Thanks @alexxander for this PR. The team I work with would have an immediate use for this as the current errors for unions can leave something to be desired. I am not sure what the current approval process for this project is but I would be happy to do an initial review before @colinhacks.",
          "Hi @EdsterG, firstly, thanks for the compliments on my work, I am glad you find this useful.\r\n\r\nHowever, I did try to handle that case you mentioned and I am failing to reproduce the incorrect error. Though it might be that something slipped through my fingers. I actually even created a new zod issue type for this particular purpose. See the test case bellow:\r\n\r\n```ts\r\ntest(\"invalid discriminator value\", () => {\r\n    expect.assertions(1);\r\n    try {\r\n      z.discriminatedUnion(\"type\", [\r\n        z.object({ type: z.literal(\"a\"), a: z.string() }),\r\n        z.object({ type: z.literal(\"b\"), b: z.string() }),\r\n      ]).parse({ type: \"x\", a: \"abc\" });\r\n    } catch (e: any) {\r\n      expect(JSON.parse(e.message)).toEqual([\r\n        {\r\n          code: z.ZodIssueCode.invalid_union_discriminator,\r\n          expectedOneOf: [\"a\", \"b\"],\r\n          received: \"x\",\r\n          message:\r\n            \"Invalid discriminator value. Expected one of: a, b. Received x.\",\r\n          path: [\"type\"],\r\n        },\r\n      ]);\r\n    }\r\n  });\r\n```\r\n\r\nI tried to pass other values in the `type` property - such as `null`, an object, `undefined`. I even tried leaving the property out. And in all the cases it seemed to work. Is there anything I am missing?",
          "Hi @CantelopePeel, before this PR, I also implemented a self-standing function to handle discriminated unions with zod. I guess you might be interested in that as well: https://github.com/colinhacks/zod/issues/792#issuecomment-1023251415.",
          "@alexxander yes that was my mistake. I was getting a very confusing error message and accidentally thought it was related to incorrect discriminator value. Your code correctly reports when an invalid discriminator is passed in. On that same note, there seems to be a previous issue to remove input values from the error messages. Might make sense to follow the same pattern and avoid having the input value as part of the error message. https://github.com/colinhacks/zod/issues/461",
          "> On that same note, there seems to be a previous issue to remove input values from the error messages. Might make sense to follow the same pattern and avoid having the input value as part of the error message\r\n\r\nYeah, it has been our practice to _not_ leak input or schema data in error messaging to avoid logging sensitive or personally-identifying information to logs/etc. Applications _should_ have the context at the call-site to report that sort of data themselves if they find it useful.",
          "Previously, the only supported discriminator value type was `string`. In the last commit, I added support for other primitive types supported by the `z.literal` function. The drawback is that I needed to use the `Map` data type. Should this be a problem, I can implement it using a separate object for each type:\r\n```js\r\nconst map = {\r\n  'string': {},\r\n  'number': {},\r\n  'bigint': {},\r\n  'boolean': {},\r\n  'object': {},\r\n  'undefined': {}\r\n};\r\nmap[typeof discriminatorValue][discriminatorValue] = schema;\r\n```\r\n\r\nWhat do you think @scotttrinh?",
          "Also, there are the failing _deno_ tests. I guess I have to modify the tests to be compatible with both _jest_ and _deno_? Any hints @scotttrinh?\r\n\r\nHow about using something like https://github.com/gcaptn/tincan? (Though this might be for a different issue.)",
          "> The drawback is that I needed to use the Map data type.\r\n\r\nGlad you called that out. Hmm. We don't have a strong platform support story, but if it's easy enough to implement in the nested way you've outlined then that's probably the safest bet here without wanting a major version bump and a line-in-the-sand policy about platform support.\r\n\r\n> Also, there are the failing deno tests. I guess I have to modify the tests to be compatible with both jest and deno?\r\n\r\nYeah, we are trying to be friendly to the Deno community as much as is feasible. I can take a look at the failing tests, but I have 0 experience with Deno so won't be too much specific help.",
          "Would it be possible to make this support lazy schemas? Otherwise it's not possible to use with discriminated recursive schemas.",
          "> Would it be possible to make this support lazy schemas?\r\n\r\n@EdsterG I will try to look into this :wink: \r\n\r\n",
          "@alexxander that would be super helpful, I know there's also a `z.late.object` methods that's implemented but undocumented. It's referenced here https://github.com/colinhacks/tozod but I'm not familiar with the inner workings of Zod so am having trouble getting it to work.",
          "Just would like to say I'm also looking forward to this PR, more human errors will be a very good improvement.",
          "> I know there's also a z.late.object methods that's implemented but undocumented.\r\n\r\nI believe that is a 2.0 construct. As far as I can tell in the source code, there is not `late` class.\r\n\r\nI'm actually wondering if we should put off supporting `lazy` here? @alexxander if you dig in a bit and run into any roadblocks, I think we should consider shipping what you have here and breaking off the further work into a separate PR.",
          "> Would it be possible to make this support lazy schemas?\r\n\r\n@EdsterG I tried some simple tests with `z.lazy`, and it seemed to work well. Did you find any particular issues?",
          "@alexxander here's a toy example where I get type errors:\r\n```\r\nimport {z} from 'zod';\r\n\r\ntype Category1 = {\r\n  type: 'Category1';\r\n  subcategories1: Array<Category>;\r\n};\r\n\r\ntype Category2 = {\r\n  type: 'Category2';\r\n  subcategories2: Array<Category>;\r\n};\r\n\r\nconst Category1Schema: z.ZodSchema<Category1> = z.object({\r\n  type: z.literal('Category1'),\r\n  subcategories1: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst Category2Schema: z.ZodSchema<Category2> = z.object({\r\n  type: z.literal('Category2'),\r\n  subcategories2: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst CategorySchema = z.discriminatedUnion('type', [Category1Schema, Category2Schema]);\r\ntype Category = z.infer<typeof CategorySchema>;\r\n```\r\nI get the following type error:\r\n```\r\nerror TS2740: Type 'ZodType<Category1, ZodTypeDef, Category1>' is missing the following properties from type 'ZodObject<{ type: ZodLiteral<Primitive>; } & ZodRawShape, any, any, { [x: string]: any; [x: number]: any; }, { [x: string]: any; [x: number]: any; }>': _shape, _unknownKeys, _catchall, _cached, and 16 more.\r\n\r\nconst CategorySchema = z.discriminatedUnion('type', [Category1Schema, Category2Schema]);\r\n```",
          "@EdsterG This fails because `z.discriminatedUnion` expects instances of `ZodObject`. You, however, typed `Category1Schema` and `Category2Schema`  as `ZodSchema`, which is an alias of `ZodType`.\r\n\r\nNonetheless, it is still possible to achieve what you want by slightly reorganizing the types.\r\n\r\n```ts\r\ntype Category1 = {\r\n  type: \"Category1\";\r\n  subcategories1: Array<Category>;\r\n};\r\n\r\ntype Category2 = {\r\n  type: \"Category2\";\r\n  subcategories2: Array<Category>;\r\n};\r\n\r\ntype Category = Category1 | Category2;\r\n\r\nconst Category1Schema = z.object({\r\n  type: z.literal(\"Category1\"),\r\n  subcategories1: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst Category2Schema = z.object({\r\n  type: z.literal(\"Category2\"),\r\n  subcategories2: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst CategorySchema: z.ZodSchema<Category> = z.discriminatedUnion(\"type\", [\r\n  Category1Schema,\r\n  Category2Schema,\r\n]);\r\n```\r\nOr even more compactly:\r\n```ts\r\ntype Category1 = {\r\n  type: \"Category1\";\r\n  subcategories1: Array<Category>;\r\n};\r\ntype Category2 = {\r\n  type: \"Category2\";\r\n  subcategories2: Array<Category>;\r\n};\r\ntype Category = Category1 | Category2;\r\n\r\nconst CategorySchema: z.ZodSchema<Category> = z.lazy(() =>\r\n  z.discriminatedUnion(\"type\", [\r\n    z.object({\r\n      type: z.literal(\"Category1\"),\r\n      subcategories1: z.array(CategorySchema),\r\n    }),\r\n    z.object({\r\n      type: z.literal(\"Category2\"),\r\n      subcategories2: z.array(CategorySchema),\r\n    }),\r\n  ])\r\n);\r\n```\r\n\r\nTherefore, I do not really think this is a big issue. But I guess I could try to make the discriminated union accept anything object-like. Though I would prefer to put it in a separate PR (if at all).\r\n\r\nAny views on this @scotttrinh?",
          "Ah, I see. The idea was that many types of categories would be defined through out the lifetime of the project so I wanted to avoid maintaining two sources of truth:\r\n```\r\ntype Category = Category1 | Category2;\r\n```\r\nand\r\n```\r\nconst CategorySchema: z.ZodSchema<Category> = z.discriminatedUnion(\"type\", [\r\n  Category1Schema,\r\n  Category2Schema,\r\n]);\r\n```\r\n\r\nHowever, I would agree that this change should go into a separate PR. In my opinion, this PR should be merged as is because its impact is too great to wait any longer.",
          "> ```ts\r\n> import {z} from 'zod';\r\n> \r\n> type Category1 = {\r\n>   type: 'Category1';\r\n>   subcategories1: Array<Category>;\r\n> };\r\n> \r\n> type Category2 = {\r\n>   type: 'Category2';\r\n>   subcategories2: Array<Category>;\r\n> };\r\n> \r\n> const Category1Schema: z.ZodSchema<Category1> = z.object({\r\n>   type: z.literal('Category1'),\r\n>   subcategories1: z.array(z.lazy(() => CategorySchema)),\r\n> });\r\n> \r\n> const Category2Schema: z.ZodSchema<Category2> = z.object({\r\n>   type: z.literal('Category2'),\r\n>   subcategories2: z.array(z.lazy(() => CategorySchema)),\r\n> });\r\n> \r\n> const CategorySchema = z.discriminatedUnion('type', [Category1Schema, Category2Schema]);\r\n> type Category = z.infer<typeof CategorySchema>;\r\n> ```\r\n\r\n@EdsterG, actually, even if `z.discriminatedUnion` accepted anything object-like, typescript would still throw recursion-related errors with your solution quoted above. The thing is that `Category` is inferred from `CategorySchema`, which refers to `Category1Schema` of type `Category1`. However, `Category1` refers to `Category`.\r\n\r\n",
          "@scotttrinh I added the simplified implementation of the map data structure as it was outlined in one of my previous comments (`util.SimpleMap`). It implements `get(key)`, `set(key, value)`, `has(key)`, `keys()` and the `size` property. Though I am not completely happy about the additional complexity it introduces (I mean, `Map` is well documented in the standards, while this one is custom and does not fully adhere to the `Map` interface). But it might be a good trade-off between a full `Map` polyfill and relying on `Map` being present in the environment.",
          "@alexxander \r\n\r\nLooking at https://caniuse.com/mdn-javascript_builtins_map I'm personally fine with IE11+ here, so `Map` still seems like a reasonable choice. We use `const`/`let` which has even worse support than `Map` (TIL!).\r\n\r\n@EdsterG \r\n\r\nRE: The type errors related to `ZodSchema`/`ZodType`\r\n\r\nWe shouldn't do too much work to support explicit types like the examples given here. Zod takes a pretty opinionated and strong stance that it should be the source of truth for types and does a best-effort job of supporting defining the types in TypeScript first. The big place of friction with this is external types that you do not control, so it's definitely ideal for it to work well if possible, but we should not spend too much development effort trying to get it to work. If `z.infer`/`z.input`/`z.output` is able to infer the correct type, that's our primary concern.",
          "@scotttrinh So I should revert it to the state in which `Map` is used, right?\r\nIs there anything else that has to be done (or that has to be changed) before this can be merged?",
          "> @scotttrinh So I should revert it to the state in which Map is used, right?\r\n> Is there anything else that has to be done (or that has to be changed) before this can be merged?\r\n\r\nJust went back through the code, and it looks very good to me, thank you for all of your hard work here! Once you get it back to using a `Map`, do you mind just running the benchmarks again and updating the description if they're different at all from the first time you ran it?",
          "@scotttrinh I reverted it. So now it uses `Map` again. I also ran the benchmarks and updated the pull request description.",
          "Whoa, amazing! This is just what we needed today. But looks like this isn't published to npm yet? Any way we can get a beta published?",
          "I published the latest master branch for anyone else who needs it.\r\n\r\nSet this in your package.json\r\n```json\r\n\"zod\": \"npm:@flybayer/zod@3.11.7-discriminatedUnion\"\r\n```"
        ]
      },
      {
        "pr_number": 899,
        "title": "Discriminated union",
        "body": "Resolves #894.\r\n\r\nI implemented the `z.discriminatedUnion(discriminator, options)` method. I also added tests and benchmarks.\r\n\r\nHere are the results of the benchmarks to demonstrate the speed improvements introduced by the new `z.discriminatedUnion` method:\r\n```\r\nz.union: double: valid: a x 310,690 ops/sec \u00b13.68% (98 runs sampled)\r\nz.union: double: valid: b x 317,585 ops/sec \u00b10.13% (99 runs sampled)\r\nz.union: double: invalid: null x 52,452 ops/sec \u00b10.69% (94 runs sampled)\r\nz.union: double: invalid: wrong shape x 46,605 ops/sec \u00b10.43% (94 runs sampled)\r\nz.union: many: valid: a x 151,210 ops/sec \u00b13.75% (95 runs sampled)\r\nz.union: many: valid: c x 155,035 ops/sec \u00b10.21% (97 runs sampled)\r\nz.union: many: invalid: null x 31,971 ops/sec \u00b10.53% (93 runs sampled)\r\nz.union: many: invalid: wrong shape x 28,777 ops/sec \u00b10.42% (95 runs sampled)\r\n\r\nz.discriminatedUnion: double: valid: a x 857,014 ops/sec \u00b13.61% (99 runs sampled)\r\nz.discriminatedUnion: double: valid: b x 876,301 ops/sec \u00b10.15% (95 runs sampled)\r\nz.discriminatedUnion: double: invalid: null x 130,574 ops/sec \u00b10.55% (98 runs sampled)\r\nz.discriminatedUnion: double: invalid: wrong shape x 124,104 ops/sec \u00b13.36% (98 runs sampled)\r\nz.discriminatedUnion: many: valid: a x 859,193 ops/sec \u00b10.28% (94 runs sampled)\r\nz.discriminatedUnion: many: valid: c x 858,599 ops/sec \u00b10.30% (94 runs sampled)\r\nz.discriminatedUnion: many: invalid: null x 124,720 ops/sec \u00b10.36% (96 runs sampled)\r\nz.discriminatedUnion: many: invalid: wrong shape x 117,588 ops/sec \u00b13.44% (93 runs sampled)\r\n\r\nz.string: empty string x 3,263,033 ops/sec \u00b11.31% (94 runs sampled)\r\nz.string: short string x 3,254,089 ops/sec \u00b10.82% (93 runs sampled)\r\nz.string: long string x 3,249,335 ops/sec \u00b10.73% (93 runs sampled)\r\nz.string: invalid: null x 138,359 ops/sec \u00b10.58% (95 runs sampled)\r\nz.string: manual parser: long x 883,218,417 ops/sec \u00b10.31% (92 runs sampled)\r\nz.object: empty: valid x 2,477,603 ops/sec \u00b10.18% (97 runs sampled)\r\nz.object: empty: valid: extra keys x 2,291,072 ops/sec \u00b10.12% (95 runs sampled)\r\nz.object: empty: invalid: null x 142,172 ops/sec \u00b10.54% (97 runs sampled)\r\nz.object: short: valid x 1,139,297 ops/sec \u00b13.54% (99 runs sampled)\r\nz.object: short: valid: extra keys x 1,086,536 ops/sec \u00b10.30% (99 runs sampled)\r\nz.object: short: invalid: null x 141,700 ops/sec \u00b10.56% (96 runs sampled)\r\nz.object: long: valid x 481,833 ops/sec \u00b13.78% (91 runs sampled)\r\nz.object: long: valid: extra keys x 469,050 ops/sec \u00b10.24% (100 runs sampled)\r\nz.object: long: invalid: null x 145,378 ops/sec \u00b10.57% (97 runs sampled)\r\nDone in 165.07s.\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/899",
        "comments": [
          "Thanks @alexxander for this PR. The team I work with would have an immediate use for this as the current errors for unions can leave something to be desired. I am not sure what the current approval process for this project is but I would be happy to do an initial review before @colinhacks.",
          "Hi @EdsterG, firstly, thanks for the compliments on my work, I am glad you find this useful.\r\n\r\nHowever, I did try to handle that case you mentioned and I am failing to reproduce the incorrect error. Though it might be that something slipped through my fingers. I actually even created a new zod issue type for this particular purpose. See the test case bellow:\r\n\r\n```ts\r\ntest(\"invalid discriminator value\", () => {\r\n    expect.assertions(1);\r\n    try {\r\n      z.discriminatedUnion(\"type\", [\r\n        z.object({ type: z.literal(\"a\"), a: z.string() }),\r\n        z.object({ type: z.literal(\"b\"), b: z.string() }),\r\n      ]).parse({ type: \"x\", a: \"abc\" });\r\n    } catch (e: any) {\r\n      expect(JSON.parse(e.message)).toEqual([\r\n        {\r\n          code: z.ZodIssueCode.invalid_union_discriminator,\r\n          expectedOneOf: [\"a\", \"b\"],\r\n          received: \"x\",\r\n          message:\r\n            \"Invalid discriminator value. Expected one of: a, b. Received x.\",\r\n          path: [\"type\"],\r\n        },\r\n      ]);\r\n    }\r\n  });\r\n```\r\n\r\nI tried to pass other values in the `type` property - such as `null`, an object, `undefined`. I even tried leaving the property out. And in all the cases it seemed to work. Is there anything I am missing?",
          "Hi @CantelopePeel, before this PR, I also implemented a self-standing function to handle discriminated unions with zod. I guess you might be interested in that as well: https://github.com/colinhacks/zod/issues/792#issuecomment-1023251415.",
          "@alexxander yes that was my mistake. I was getting a very confusing error message and accidentally thought it was related to incorrect discriminator value. Your code correctly reports when an invalid discriminator is passed in. On that same note, there seems to be a previous issue to remove input values from the error messages. Might make sense to follow the same pattern and avoid having the input value as part of the error message. https://github.com/colinhacks/zod/issues/461",
          "> On that same note, there seems to be a previous issue to remove input values from the error messages. Might make sense to follow the same pattern and avoid having the input value as part of the error message\r\n\r\nYeah, it has been our practice to _not_ leak input or schema data in error messaging to avoid logging sensitive or personally-identifying information to logs/etc. Applications _should_ have the context at the call-site to report that sort of data themselves if they find it useful.",
          "Previously, the only supported discriminator value type was `string`. In the last commit, I added support for other primitive types supported by the `z.literal` function. The drawback is that I needed to use the `Map` data type. Should this be a problem, I can implement it using a separate object for each type:\r\n```js\r\nconst map = {\r\n  'string': {},\r\n  'number': {},\r\n  'bigint': {},\r\n  'boolean': {},\r\n  'object': {},\r\n  'undefined': {}\r\n};\r\nmap[typeof discriminatorValue][discriminatorValue] = schema;\r\n```\r\n\r\nWhat do you think @scotttrinh?",
          "Also, there are the failing _deno_ tests. I guess I have to modify the tests to be compatible with both _jest_ and _deno_? Any hints @scotttrinh?\r\n\r\nHow about using something like https://github.com/gcaptn/tincan? (Though this might be for a different issue.)",
          "> The drawback is that I needed to use the Map data type.\r\n\r\nGlad you called that out. Hmm. We don't have a strong platform support story, but if it's easy enough to implement in the nested way you've outlined then that's probably the safest bet here without wanting a major version bump and a line-in-the-sand policy about platform support.\r\n\r\n> Also, there are the failing deno tests. I guess I have to modify the tests to be compatible with both jest and deno?\r\n\r\nYeah, we are trying to be friendly to the Deno community as much as is feasible. I can take a look at the failing tests, but I have 0 experience with Deno so won't be too much specific help.",
          "Would it be possible to make this support lazy schemas? Otherwise it's not possible to use with discriminated recursive schemas.",
          "> Would it be possible to make this support lazy schemas?\r\n\r\n@EdsterG I will try to look into this :wink: \r\n\r\n",
          "@alexxander that would be super helpful, I know there's also a `z.late.object` methods that's implemented but undocumented. It's referenced here https://github.com/colinhacks/tozod but I'm not familiar with the inner workings of Zod so am having trouble getting it to work.",
          "Just would like to say I'm also looking forward to this PR, more human errors will be a very good improvement.",
          "> I know there's also a z.late.object methods that's implemented but undocumented.\r\n\r\nI believe that is a 2.0 construct. As far as I can tell in the source code, there is not `late` class.\r\n\r\nI'm actually wondering if we should put off supporting `lazy` here? @alexxander if you dig in a bit and run into any roadblocks, I think we should consider shipping what you have here and breaking off the further work into a separate PR.",
          "> Would it be possible to make this support lazy schemas?\r\n\r\n@EdsterG I tried some simple tests with `z.lazy`, and it seemed to work well. Did you find any particular issues?",
          "@alexxander here's a toy example where I get type errors:\r\n```\r\nimport {z} from 'zod';\r\n\r\ntype Category1 = {\r\n  type: 'Category1';\r\n  subcategories1: Array<Category>;\r\n};\r\n\r\ntype Category2 = {\r\n  type: 'Category2';\r\n  subcategories2: Array<Category>;\r\n};\r\n\r\nconst Category1Schema: z.ZodSchema<Category1> = z.object({\r\n  type: z.literal('Category1'),\r\n  subcategories1: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst Category2Schema: z.ZodSchema<Category2> = z.object({\r\n  type: z.literal('Category2'),\r\n  subcategories2: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst CategorySchema = z.discriminatedUnion('type', [Category1Schema, Category2Schema]);\r\ntype Category = z.infer<typeof CategorySchema>;\r\n```\r\nI get the following type error:\r\n```\r\nerror TS2740: Type 'ZodType<Category1, ZodTypeDef, Category1>' is missing the following properties from type 'ZodObject<{ type: ZodLiteral<Primitive>; } & ZodRawShape, any, any, { [x: string]: any; [x: number]: any; }, { [x: string]: any; [x: number]: any; }>': _shape, _unknownKeys, _catchall, _cached, and 16 more.\r\n\r\nconst CategorySchema = z.discriminatedUnion('type', [Category1Schema, Category2Schema]);\r\n```",
          "@EdsterG This fails because `z.discriminatedUnion` expects instances of `ZodObject`. You, however, typed `Category1Schema` and `Category2Schema`  as `ZodSchema`, which is an alias of `ZodType`.\r\n\r\nNonetheless, it is still possible to achieve what you want by slightly reorganizing the types.\r\n\r\n```ts\r\ntype Category1 = {\r\n  type: \"Category1\";\r\n  subcategories1: Array<Category>;\r\n};\r\n\r\ntype Category2 = {\r\n  type: \"Category2\";\r\n  subcategories2: Array<Category>;\r\n};\r\n\r\ntype Category = Category1 | Category2;\r\n\r\nconst Category1Schema = z.object({\r\n  type: z.literal(\"Category1\"),\r\n  subcategories1: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst Category2Schema = z.object({\r\n  type: z.literal(\"Category2\"),\r\n  subcategories2: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst CategorySchema: z.ZodSchema<Category> = z.discriminatedUnion(\"type\", [\r\n  Category1Schema,\r\n  Category2Schema,\r\n]);\r\n```\r\nOr even more compactly:\r\n```ts\r\ntype Category1 = {\r\n  type: \"Category1\";\r\n  subcategories1: Array<Category>;\r\n};\r\ntype Category2 = {\r\n  type: \"Category2\";\r\n  subcategories2: Array<Category>;\r\n};\r\ntype Category = Category1 | Category2;\r\n\r\nconst CategorySchema: z.ZodSchema<Category> = z.lazy(() =>\r\n  z.discriminatedUnion(\"type\", [\r\n    z.object({\r\n      type: z.literal(\"Category1\"),\r\n      subcategories1: z.array(CategorySchema),\r\n    }),\r\n    z.object({\r\n      type: z.literal(\"Category2\"),\r\n      subcategories2: z.array(CategorySchema),\r\n    }),\r\n  ])\r\n);\r\n```\r\n\r\nTherefore, I do not really think this is a big issue. But I guess I could try to make the discriminated union accept anything object-like. Though I would prefer to put it in a separate PR (if at all).\r\n\r\nAny views on this @scotttrinh?",
          "Ah, I see. The idea was that many types of categories would be defined through out the lifetime of the project so I wanted to avoid maintaining two sources of truth:\r\n```\r\ntype Category = Category1 | Category2;\r\n```\r\nand\r\n```\r\nconst CategorySchema: z.ZodSchema<Category> = z.discriminatedUnion(\"type\", [\r\n  Category1Schema,\r\n  Category2Schema,\r\n]);\r\n```\r\n\r\nHowever, I would agree that this change should go into a separate PR. In my opinion, this PR should be merged as is because its impact is too great to wait any longer.",
          "> ```ts\r\n> import {z} from 'zod';\r\n> \r\n> type Category1 = {\r\n>   type: 'Category1';\r\n>   subcategories1: Array<Category>;\r\n> };\r\n> \r\n> type Category2 = {\r\n>   type: 'Category2';\r\n>   subcategories2: Array<Category>;\r\n> };\r\n> \r\n> const Category1Schema: z.ZodSchema<Category1> = z.object({\r\n>   type: z.literal('Category1'),\r\n>   subcategories1: z.array(z.lazy(() => CategorySchema)),\r\n> });\r\n> \r\n> const Category2Schema: z.ZodSchema<Category2> = z.object({\r\n>   type: z.literal('Category2'),\r\n>   subcategories2: z.array(z.lazy(() => CategorySchema)),\r\n> });\r\n> \r\n> const CategorySchema = z.discriminatedUnion('type', [Category1Schema, Category2Schema]);\r\n> type Category = z.infer<typeof CategorySchema>;\r\n> ```\r\n\r\n@EdsterG, actually, even if `z.discriminatedUnion` accepted anything object-like, typescript would still throw recursion-related errors with your solution quoted above. The thing is that `Category` is inferred from `CategorySchema`, which refers to `Category1Schema` of type `Category1`. However, `Category1` refers to `Category`.\r\n\r\n",
          "@scotttrinh I added the simplified implementation of the map data structure as it was outlined in one of my previous comments (`util.SimpleMap`). It implements `get(key)`, `set(key, value)`, `has(key)`, `keys()` and the `size` property. Though I am not completely happy about the additional complexity it introduces (I mean, `Map` is well documented in the standards, while this one is custom and does not fully adhere to the `Map` interface). But it might be a good trade-off between a full `Map` polyfill and relying on `Map` being present in the environment.",
          "@alexxander \r\n\r\nLooking at https://caniuse.com/mdn-javascript_builtins_map I'm personally fine with IE11+ here, so `Map` still seems like a reasonable choice. We use `const`/`let` which has even worse support than `Map` (TIL!).\r\n\r\n@EdsterG \r\n\r\nRE: The type errors related to `ZodSchema`/`ZodType`\r\n\r\nWe shouldn't do too much work to support explicit types like the examples given here. Zod takes a pretty opinionated and strong stance that it should be the source of truth for types and does a best-effort job of supporting defining the types in TypeScript first. The big place of friction with this is external types that you do not control, so it's definitely ideal for it to work well if possible, but we should not spend too much development effort trying to get it to work. If `z.infer`/`z.input`/`z.output` is able to infer the correct type, that's our primary concern.",
          "@scotttrinh So I should revert it to the state in which `Map` is used, right?\r\nIs there anything else that has to be done (or that has to be changed) before this can be merged?",
          "> @scotttrinh So I should revert it to the state in which Map is used, right?\r\n> Is there anything else that has to be done (or that has to be changed) before this can be merged?\r\n\r\nJust went back through the code, and it looks very good to me, thank you for all of your hard work here! Once you get it back to using a `Map`, do you mind just running the benchmarks again and updating the description if they're different at all from the first time you ran it?",
          "@scotttrinh I reverted it. So now it uses `Map` again. I also ran the benchmarks and updated the pull request description.",
          "Whoa, amazing! This is just what we needed today. But looks like this isn't published to npm yet? Any way we can get a beta published?",
          "I published the latest master branch for anyone else who needs it.\r\n\r\nSet this in your package.json\r\n```json\r\n\"zod\": \"npm:@flybayer/zod@3.11.7-discriminatedUnion\"\r\n```"
        ]
      },
      {
        "pr_number": 899,
        "title": "Discriminated union",
        "body": "Resolves #894.\r\n\r\nI implemented the `z.discriminatedUnion(discriminator, options)` method. I also added tests and benchmarks.\r\n\r\nHere are the results of the benchmarks to demonstrate the speed improvements introduced by the new `z.discriminatedUnion` method:\r\n```\r\nz.union: double: valid: a x 310,690 ops/sec \u00b13.68% (98 runs sampled)\r\nz.union: double: valid: b x 317,585 ops/sec \u00b10.13% (99 runs sampled)\r\nz.union: double: invalid: null x 52,452 ops/sec \u00b10.69% (94 runs sampled)\r\nz.union: double: invalid: wrong shape x 46,605 ops/sec \u00b10.43% (94 runs sampled)\r\nz.union: many: valid: a x 151,210 ops/sec \u00b13.75% (95 runs sampled)\r\nz.union: many: valid: c x 155,035 ops/sec \u00b10.21% (97 runs sampled)\r\nz.union: many: invalid: null x 31,971 ops/sec \u00b10.53% (93 runs sampled)\r\nz.union: many: invalid: wrong shape x 28,777 ops/sec \u00b10.42% (95 runs sampled)\r\n\r\nz.discriminatedUnion: double: valid: a x 857,014 ops/sec \u00b13.61% (99 runs sampled)\r\nz.discriminatedUnion: double: valid: b x 876,301 ops/sec \u00b10.15% (95 runs sampled)\r\nz.discriminatedUnion: double: invalid: null x 130,574 ops/sec \u00b10.55% (98 runs sampled)\r\nz.discriminatedUnion: double: invalid: wrong shape x 124,104 ops/sec \u00b13.36% (98 runs sampled)\r\nz.discriminatedUnion: many: valid: a x 859,193 ops/sec \u00b10.28% (94 runs sampled)\r\nz.discriminatedUnion: many: valid: c x 858,599 ops/sec \u00b10.30% (94 runs sampled)\r\nz.discriminatedUnion: many: invalid: null x 124,720 ops/sec \u00b10.36% (96 runs sampled)\r\nz.discriminatedUnion: many: invalid: wrong shape x 117,588 ops/sec \u00b13.44% (93 runs sampled)\r\n\r\nz.string: empty string x 3,263,033 ops/sec \u00b11.31% (94 runs sampled)\r\nz.string: short string x 3,254,089 ops/sec \u00b10.82% (93 runs sampled)\r\nz.string: long string x 3,249,335 ops/sec \u00b10.73% (93 runs sampled)\r\nz.string: invalid: null x 138,359 ops/sec \u00b10.58% (95 runs sampled)\r\nz.string: manual parser: long x 883,218,417 ops/sec \u00b10.31% (92 runs sampled)\r\nz.object: empty: valid x 2,477,603 ops/sec \u00b10.18% (97 runs sampled)\r\nz.object: empty: valid: extra keys x 2,291,072 ops/sec \u00b10.12% (95 runs sampled)\r\nz.object: empty: invalid: null x 142,172 ops/sec \u00b10.54% (97 runs sampled)\r\nz.object: short: valid x 1,139,297 ops/sec \u00b13.54% (99 runs sampled)\r\nz.object: short: valid: extra keys x 1,086,536 ops/sec \u00b10.30% (99 runs sampled)\r\nz.object: short: invalid: null x 141,700 ops/sec \u00b10.56% (96 runs sampled)\r\nz.object: long: valid x 481,833 ops/sec \u00b13.78% (91 runs sampled)\r\nz.object: long: valid: extra keys x 469,050 ops/sec \u00b10.24% (100 runs sampled)\r\nz.object: long: invalid: null x 145,378 ops/sec \u00b10.57% (97 runs sampled)\r\nDone in 165.07s.\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/899",
        "comments": [
          "Thanks @alexxander for this PR. The team I work with would have an immediate use for this as the current errors for unions can leave something to be desired. I am not sure what the current approval process for this project is but I would be happy to do an initial review before @colinhacks.",
          "Hi @EdsterG, firstly, thanks for the compliments on my work, I am glad you find this useful.\r\n\r\nHowever, I did try to handle that case you mentioned and I am failing to reproduce the incorrect error. Though it might be that something slipped through my fingers. I actually even created a new zod issue type for this particular purpose. See the test case bellow:\r\n\r\n```ts\r\ntest(\"invalid discriminator value\", () => {\r\n    expect.assertions(1);\r\n    try {\r\n      z.discriminatedUnion(\"type\", [\r\n        z.object({ type: z.literal(\"a\"), a: z.string() }),\r\n        z.object({ type: z.literal(\"b\"), b: z.string() }),\r\n      ]).parse({ type: \"x\", a: \"abc\" });\r\n    } catch (e: any) {\r\n      expect(JSON.parse(e.message)).toEqual([\r\n        {\r\n          code: z.ZodIssueCode.invalid_union_discriminator,\r\n          expectedOneOf: [\"a\", \"b\"],\r\n          received: \"x\",\r\n          message:\r\n            \"Invalid discriminator value. Expected one of: a, b. Received x.\",\r\n          path: [\"type\"],\r\n        },\r\n      ]);\r\n    }\r\n  });\r\n```\r\n\r\nI tried to pass other values in the `type` property - such as `null`, an object, `undefined`. I even tried leaving the property out. And in all the cases it seemed to work. Is there anything I am missing?",
          "Hi @CantelopePeel, before this PR, I also implemented a self-standing function to handle discriminated unions with zod. I guess you might be interested in that as well: https://github.com/colinhacks/zod/issues/792#issuecomment-1023251415.",
          "@alexxander yes that was my mistake. I was getting a very confusing error message and accidentally thought it was related to incorrect discriminator value. Your code correctly reports when an invalid discriminator is passed in. On that same note, there seems to be a previous issue to remove input values from the error messages. Might make sense to follow the same pattern and avoid having the input value as part of the error message. https://github.com/colinhacks/zod/issues/461",
          "> On that same note, there seems to be a previous issue to remove input values from the error messages. Might make sense to follow the same pattern and avoid having the input value as part of the error message\r\n\r\nYeah, it has been our practice to _not_ leak input or schema data in error messaging to avoid logging sensitive or personally-identifying information to logs/etc. Applications _should_ have the context at the call-site to report that sort of data themselves if they find it useful.",
          "Previously, the only supported discriminator value type was `string`. In the last commit, I added support for other primitive types supported by the `z.literal` function. The drawback is that I needed to use the `Map` data type. Should this be a problem, I can implement it using a separate object for each type:\r\n```js\r\nconst map = {\r\n  'string': {},\r\n  'number': {},\r\n  'bigint': {},\r\n  'boolean': {},\r\n  'object': {},\r\n  'undefined': {}\r\n};\r\nmap[typeof discriminatorValue][discriminatorValue] = schema;\r\n```\r\n\r\nWhat do you think @scotttrinh?",
          "Also, there are the failing _deno_ tests. I guess I have to modify the tests to be compatible with both _jest_ and _deno_? Any hints @scotttrinh?\r\n\r\nHow about using something like https://github.com/gcaptn/tincan? (Though this might be for a different issue.)",
          "> The drawback is that I needed to use the Map data type.\r\n\r\nGlad you called that out. Hmm. We don't have a strong platform support story, but if it's easy enough to implement in the nested way you've outlined then that's probably the safest bet here without wanting a major version bump and a line-in-the-sand policy about platform support.\r\n\r\n> Also, there are the failing deno tests. I guess I have to modify the tests to be compatible with both jest and deno?\r\n\r\nYeah, we are trying to be friendly to the Deno community as much as is feasible. I can take a look at the failing tests, but I have 0 experience with Deno so won't be too much specific help.",
          "Would it be possible to make this support lazy schemas? Otherwise it's not possible to use with discriminated recursive schemas.",
          "> Would it be possible to make this support lazy schemas?\r\n\r\n@EdsterG I will try to look into this :wink: \r\n\r\n",
          "@alexxander that would be super helpful, I know there's also a `z.late.object` methods that's implemented but undocumented. It's referenced here https://github.com/colinhacks/tozod but I'm not familiar with the inner workings of Zod so am having trouble getting it to work.",
          "Just would like to say I'm also looking forward to this PR, more human errors will be a very good improvement.",
          "> I know there's also a z.late.object methods that's implemented but undocumented.\r\n\r\nI believe that is a 2.0 construct. As far as I can tell in the source code, there is not `late` class.\r\n\r\nI'm actually wondering if we should put off supporting `lazy` here? @alexxander if you dig in a bit and run into any roadblocks, I think we should consider shipping what you have here and breaking off the further work into a separate PR.",
          "> Would it be possible to make this support lazy schemas?\r\n\r\n@EdsterG I tried some simple tests with `z.lazy`, and it seemed to work well. Did you find any particular issues?",
          "@alexxander here's a toy example where I get type errors:\r\n```\r\nimport {z} from 'zod';\r\n\r\ntype Category1 = {\r\n  type: 'Category1';\r\n  subcategories1: Array<Category>;\r\n};\r\n\r\ntype Category2 = {\r\n  type: 'Category2';\r\n  subcategories2: Array<Category>;\r\n};\r\n\r\nconst Category1Schema: z.ZodSchema<Category1> = z.object({\r\n  type: z.literal('Category1'),\r\n  subcategories1: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst Category2Schema: z.ZodSchema<Category2> = z.object({\r\n  type: z.literal('Category2'),\r\n  subcategories2: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst CategorySchema = z.discriminatedUnion('type', [Category1Schema, Category2Schema]);\r\ntype Category = z.infer<typeof CategorySchema>;\r\n```\r\nI get the following type error:\r\n```\r\nerror TS2740: Type 'ZodType<Category1, ZodTypeDef, Category1>' is missing the following properties from type 'ZodObject<{ type: ZodLiteral<Primitive>; } & ZodRawShape, any, any, { [x: string]: any; [x: number]: any; }, { [x: string]: any; [x: number]: any; }>': _shape, _unknownKeys, _catchall, _cached, and 16 more.\r\n\r\nconst CategorySchema = z.discriminatedUnion('type', [Category1Schema, Category2Schema]);\r\n```",
          "@EdsterG This fails because `z.discriminatedUnion` expects instances of `ZodObject`. You, however, typed `Category1Schema` and `Category2Schema`  as `ZodSchema`, which is an alias of `ZodType`.\r\n\r\nNonetheless, it is still possible to achieve what you want by slightly reorganizing the types.\r\n\r\n```ts\r\ntype Category1 = {\r\n  type: \"Category1\";\r\n  subcategories1: Array<Category>;\r\n};\r\n\r\ntype Category2 = {\r\n  type: \"Category2\";\r\n  subcategories2: Array<Category>;\r\n};\r\n\r\ntype Category = Category1 | Category2;\r\n\r\nconst Category1Schema = z.object({\r\n  type: z.literal(\"Category1\"),\r\n  subcategories1: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst Category2Schema = z.object({\r\n  type: z.literal(\"Category2\"),\r\n  subcategories2: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst CategorySchema: z.ZodSchema<Category> = z.discriminatedUnion(\"type\", [\r\n  Category1Schema,\r\n  Category2Schema,\r\n]);\r\n```\r\nOr even more compactly:\r\n```ts\r\ntype Category1 = {\r\n  type: \"Category1\";\r\n  subcategories1: Array<Category>;\r\n};\r\ntype Category2 = {\r\n  type: \"Category2\";\r\n  subcategories2: Array<Category>;\r\n};\r\ntype Category = Category1 | Category2;\r\n\r\nconst CategorySchema: z.ZodSchema<Category> = z.lazy(() =>\r\n  z.discriminatedUnion(\"type\", [\r\n    z.object({\r\n      type: z.literal(\"Category1\"),\r\n      subcategories1: z.array(CategorySchema),\r\n    }),\r\n    z.object({\r\n      type: z.literal(\"Category2\"),\r\n      subcategories2: z.array(CategorySchema),\r\n    }),\r\n  ])\r\n);\r\n```\r\n\r\nTherefore, I do not really think this is a big issue. But I guess I could try to make the discriminated union accept anything object-like. Though I would prefer to put it in a separate PR (if at all).\r\n\r\nAny views on this @scotttrinh?",
          "Ah, I see. The idea was that many types of categories would be defined through out the lifetime of the project so I wanted to avoid maintaining two sources of truth:\r\n```\r\ntype Category = Category1 | Category2;\r\n```\r\nand\r\n```\r\nconst CategorySchema: z.ZodSchema<Category> = z.discriminatedUnion(\"type\", [\r\n  Category1Schema,\r\n  Category2Schema,\r\n]);\r\n```\r\n\r\nHowever, I would agree that this change should go into a separate PR. In my opinion, this PR should be merged as is because its impact is too great to wait any longer.",
          "> ```ts\r\n> import {z} from 'zod';\r\n> \r\n> type Category1 = {\r\n>   type: 'Category1';\r\n>   subcategories1: Array<Category>;\r\n> };\r\n> \r\n> type Category2 = {\r\n>   type: 'Category2';\r\n>   subcategories2: Array<Category>;\r\n> };\r\n> \r\n> const Category1Schema: z.ZodSchema<Category1> = z.object({\r\n>   type: z.literal('Category1'),\r\n>   subcategories1: z.array(z.lazy(() => CategorySchema)),\r\n> });\r\n> \r\n> const Category2Schema: z.ZodSchema<Category2> = z.object({\r\n>   type: z.literal('Category2'),\r\n>   subcategories2: z.array(z.lazy(() => CategorySchema)),\r\n> });\r\n> \r\n> const CategorySchema = z.discriminatedUnion('type', [Category1Schema, Category2Schema]);\r\n> type Category = z.infer<typeof CategorySchema>;\r\n> ```\r\n\r\n@EdsterG, actually, even if `z.discriminatedUnion` accepted anything object-like, typescript would still throw recursion-related errors with your solution quoted above. The thing is that `Category` is inferred from `CategorySchema`, which refers to `Category1Schema` of type `Category1`. However, `Category1` refers to `Category`.\r\n\r\n",
          "@scotttrinh I added the simplified implementation of the map data structure as it was outlined in one of my previous comments (`util.SimpleMap`). It implements `get(key)`, `set(key, value)`, `has(key)`, `keys()` and the `size` property. Though I am not completely happy about the additional complexity it introduces (I mean, `Map` is well documented in the standards, while this one is custom and does not fully adhere to the `Map` interface). But it might be a good trade-off between a full `Map` polyfill and relying on `Map` being present in the environment.",
          "@alexxander \r\n\r\nLooking at https://caniuse.com/mdn-javascript_builtins_map I'm personally fine with IE11+ here, so `Map` still seems like a reasonable choice. We use `const`/`let` which has even worse support than `Map` (TIL!).\r\n\r\n@EdsterG \r\n\r\nRE: The type errors related to `ZodSchema`/`ZodType`\r\n\r\nWe shouldn't do too much work to support explicit types like the examples given here. Zod takes a pretty opinionated and strong stance that it should be the source of truth for types and does a best-effort job of supporting defining the types in TypeScript first. The big place of friction with this is external types that you do not control, so it's definitely ideal for it to work well if possible, but we should not spend too much development effort trying to get it to work. If `z.infer`/`z.input`/`z.output` is able to infer the correct type, that's our primary concern.",
          "@scotttrinh So I should revert it to the state in which `Map` is used, right?\r\nIs there anything else that has to be done (or that has to be changed) before this can be merged?",
          "> @scotttrinh So I should revert it to the state in which Map is used, right?\r\n> Is there anything else that has to be done (or that has to be changed) before this can be merged?\r\n\r\nJust went back through the code, and it looks very good to me, thank you for all of your hard work here! Once you get it back to using a `Map`, do you mind just running the benchmarks again and updating the description if they're different at all from the first time you ran it?",
          "@scotttrinh I reverted it. So now it uses `Map` again. I also ran the benchmarks and updated the pull request description.",
          "Whoa, amazing! This is just what we needed today. But looks like this isn't published to npm yet? Any way we can get a beta published?",
          "I published the latest master branch for anyone else who needs it.\r\n\r\nSet this in your package.json\r\n```json\r\n\"zod\": \"npm:@flybayer/zod@3.11.7-discriminatedUnion\"\r\n```"
        ]
      },
      {
        "pr_number": 899,
        "title": "Discriminated union",
        "body": "Resolves #894.\r\n\r\nI implemented the `z.discriminatedUnion(discriminator, options)` method. I also added tests and benchmarks.\r\n\r\nHere are the results of the benchmarks to demonstrate the speed improvements introduced by the new `z.discriminatedUnion` method:\r\n```\r\nz.union: double: valid: a x 310,690 ops/sec \u00b13.68% (98 runs sampled)\r\nz.union: double: valid: b x 317,585 ops/sec \u00b10.13% (99 runs sampled)\r\nz.union: double: invalid: null x 52,452 ops/sec \u00b10.69% (94 runs sampled)\r\nz.union: double: invalid: wrong shape x 46,605 ops/sec \u00b10.43% (94 runs sampled)\r\nz.union: many: valid: a x 151,210 ops/sec \u00b13.75% (95 runs sampled)\r\nz.union: many: valid: c x 155,035 ops/sec \u00b10.21% (97 runs sampled)\r\nz.union: many: invalid: null x 31,971 ops/sec \u00b10.53% (93 runs sampled)\r\nz.union: many: invalid: wrong shape x 28,777 ops/sec \u00b10.42% (95 runs sampled)\r\n\r\nz.discriminatedUnion: double: valid: a x 857,014 ops/sec \u00b13.61% (99 runs sampled)\r\nz.discriminatedUnion: double: valid: b x 876,301 ops/sec \u00b10.15% (95 runs sampled)\r\nz.discriminatedUnion: double: invalid: null x 130,574 ops/sec \u00b10.55% (98 runs sampled)\r\nz.discriminatedUnion: double: invalid: wrong shape x 124,104 ops/sec \u00b13.36% (98 runs sampled)\r\nz.discriminatedUnion: many: valid: a x 859,193 ops/sec \u00b10.28% (94 runs sampled)\r\nz.discriminatedUnion: many: valid: c x 858,599 ops/sec \u00b10.30% (94 runs sampled)\r\nz.discriminatedUnion: many: invalid: null x 124,720 ops/sec \u00b10.36% (96 runs sampled)\r\nz.discriminatedUnion: many: invalid: wrong shape x 117,588 ops/sec \u00b13.44% (93 runs sampled)\r\n\r\nz.string: empty string x 3,263,033 ops/sec \u00b11.31% (94 runs sampled)\r\nz.string: short string x 3,254,089 ops/sec \u00b10.82% (93 runs sampled)\r\nz.string: long string x 3,249,335 ops/sec \u00b10.73% (93 runs sampled)\r\nz.string: invalid: null x 138,359 ops/sec \u00b10.58% (95 runs sampled)\r\nz.string: manual parser: long x 883,218,417 ops/sec \u00b10.31% (92 runs sampled)\r\nz.object: empty: valid x 2,477,603 ops/sec \u00b10.18% (97 runs sampled)\r\nz.object: empty: valid: extra keys x 2,291,072 ops/sec \u00b10.12% (95 runs sampled)\r\nz.object: empty: invalid: null x 142,172 ops/sec \u00b10.54% (97 runs sampled)\r\nz.object: short: valid x 1,139,297 ops/sec \u00b13.54% (99 runs sampled)\r\nz.object: short: valid: extra keys x 1,086,536 ops/sec \u00b10.30% (99 runs sampled)\r\nz.object: short: invalid: null x 141,700 ops/sec \u00b10.56% (96 runs sampled)\r\nz.object: long: valid x 481,833 ops/sec \u00b13.78% (91 runs sampled)\r\nz.object: long: valid: extra keys x 469,050 ops/sec \u00b10.24% (100 runs sampled)\r\nz.object: long: invalid: null x 145,378 ops/sec \u00b10.57% (97 runs sampled)\r\nDone in 165.07s.\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/899",
        "comments": [
          "Thanks @alexxander for this PR. The team I work with would have an immediate use for this as the current errors for unions can leave something to be desired. I am not sure what the current approval process for this project is but I would be happy to do an initial review before @colinhacks.",
          "Hi @EdsterG, firstly, thanks for the compliments on my work, I am glad you find this useful.\r\n\r\nHowever, I did try to handle that case you mentioned and I am failing to reproduce the incorrect error. Though it might be that something slipped through my fingers. I actually even created a new zod issue type for this particular purpose. See the test case bellow:\r\n\r\n```ts\r\ntest(\"invalid discriminator value\", () => {\r\n    expect.assertions(1);\r\n    try {\r\n      z.discriminatedUnion(\"type\", [\r\n        z.object({ type: z.literal(\"a\"), a: z.string() }),\r\n        z.object({ type: z.literal(\"b\"), b: z.string() }),\r\n      ]).parse({ type: \"x\", a: \"abc\" });\r\n    } catch (e: any) {\r\n      expect(JSON.parse(e.message)).toEqual([\r\n        {\r\n          code: z.ZodIssueCode.invalid_union_discriminator,\r\n          expectedOneOf: [\"a\", \"b\"],\r\n          received: \"x\",\r\n          message:\r\n            \"Invalid discriminator value. Expected one of: a, b. Received x.\",\r\n          path: [\"type\"],\r\n        },\r\n      ]);\r\n    }\r\n  });\r\n```\r\n\r\nI tried to pass other values in the `type` property - such as `null`, an object, `undefined`. I even tried leaving the property out. And in all the cases it seemed to work. Is there anything I am missing?",
          "Hi @CantelopePeel, before this PR, I also implemented a self-standing function to handle discriminated unions with zod. I guess you might be interested in that as well: https://github.com/colinhacks/zod/issues/792#issuecomment-1023251415.",
          "@alexxander yes that was my mistake. I was getting a very confusing error message and accidentally thought it was related to incorrect discriminator value. Your code correctly reports when an invalid discriminator is passed in. On that same note, there seems to be a previous issue to remove input values from the error messages. Might make sense to follow the same pattern and avoid having the input value as part of the error message. https://github.com/colinhacks/zod/issues/461",
          "> On that same note, there seems to be a previous issue to remove input values from the error messages. Might make sense to follow the same pattern and avoid having the input value as part of the error message\r\n\r\nYeah, it has been our practice to _not_ leak input or schema data in error messaging to avoid logging sensitive or personally-identifying information to logs/etc. Applications _should_ have the context at the call-site to report that sort of data themselves if they find it useful.",
          "Previously, the only supported discriminator value type was `string`. In the last commit, I added support for other primitive types supported by the `z.literal` function. The drawback is that I needed to use the `Map` data type. Should this be a problem, I can implement it using a separate object for each type:\r\n```js\r\nconst map = {\r\n  'string': {},\r\n  'number': {},\r\n  'bigint': {},\r\n  'boolean': {},\r\n  'object': {},\r\n  'undefined': {}\r\n};\r\nmap[typeof discriminatorValue][discriminatorValue] = schema;\r\n```\r\n\r\nWhat do you think @scotttrinh?",
          "Also, there are the failing _deno_ tests. I guess I have to modify the tests to be compatible with both _jest_ and _deno_? Any hints @scotttrinh?\r\n\r\nHow about using something like https://github.com/gcaptn/tincan? (Though this might be for a different issue.)",
          "> The drawback is that I needed to use the Map data type.\r\n\r\nGlad you called that out. Hmm. We don't have a strong platform support story, but if it's easy enough to implement in the nested way you've outlined then that's probably the safest bet here without wanting a major version bump and a line-in-the-sand policy about platform support.\r\n\r\n> Also, there are the failing deno tests. I guess I have to modify the tests to be compatible with both jest and deno?\r\n\r\nYeah, we are trying to be friendly to the Deno community as much as is feasible. I can take a look at the failing tests, but I have 0 experience with Deno so won't be too much specific help.",
          "Would it be possible to make this support lazy schemas? Otherwise it's not possible to use with discriminated recursive schemas.",
          "> Would it be possible to make this support lazy schemas?\r\n\r\n@EdsterG I will try to look into this :wink: \r\n\r\n",
          "@alexxander that would be super helpful, I know there's also a `z.late.object` methods that's implemented but undocumented. It's referenced here https://github.com/colinhacks/tozod but I'm not familiar with the inner workings of Zod so am having trouble getting it to work.",
          "Just would like to say I'm also looking forward to this PR, more human errors will be a very good improvement.",
          "> I know there's also a z.late.object methods that's implemented but undocumented.\r\n\r\nI believe that is a 2.0 construct. As far as I can tell in the source code, there is not `late` class.\r\n\r\nI'm actually wondering if we should put off supporting `lazy` here? @alexxander if you dig in a bit and run into any roadblocks, I think we should consider shipping what you have here and breaking off the further work into a separate PR.",
          "> Would it be possible to make this support lazy schemas?\r\n\r\n@EdsterG I tried some simple tests with `z.lazy`, and it seemed to work well. Did you find any particular issues?",
          "@alexxander here's a toy example where I get type errors:\r\n```\r\nimport {z} from 'zod';\r\n\r\ntype Category1 = {\r\n  type: 'Category1';\r\n  subcategories1: Array<Category>;\r\n};\r\n\r\ntype Category2 = {\r\n  type: 'Category2';\r\n  subcategories2: Array<Category>;\r\n};\r\n\r\nconst Category1Schema: z.ZodSchema<Category1> = z.object({\r\n  type: z.literal('Category1'),\r\n  subcategories1: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst Category2Schema: z.ZodSchema<Category2> = z.object({\r\n  type: z.literal('Category2'),\r\n  subcategories2: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst CategorySchema = z.discriminatedUnion('type', [Category1Schema, Category2Schema]);\r\ntype Category = z.infer<typeof CategorySchema>;\r\n```\r\nI get the following type error:\r\n```\r\nerror TS2740: Type 'ZodType<Category1, ZodTypeDef, Category1>' is missing the following properties from type 'ZodObject<{ type: ZodLiteral<Primitive>; } & ZodRawShape, any, any, { [x: string]: any; [x: number]: any; }, { [x: string]: any; [x: number]: any; }>': _shape, _unknownKeys, _catchall, _cached, and 16 more.\r\n\r\nconst CategorySchema = z.discriminatedUnion('type', [Category1Schema, Category2Schema]);\r\n```",
          "@EdsterG This fails because `z.discriminatedUnion` expects instances of `ZodObject`. You, however, typed `Category1Schema` and `Category2Schema`  as `ZodSchema`, which is an alias of `ZodType`.\r\n\r\nNonetheless, it is still possible to achieve what you want by slightly reorganizing the types.\r\n\r\n```ts\r\ntype Category1 = {\r\n  type: \"Category1\";\r\n  subcategories1: Array<Category>;\r\n};\r\n\r\ntype Category2 = {\r\n  type: \"Category2\";\r\n  subcategories2: Array<Category>;\r\n};\r\n\r\ntype Category = Category1 | Category2;\r\n\r\nconst Category1Schema = z.object({\r\n  type: z.literal(\"Category1\"),\r\n  subcategories1: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst Category2Schema = z.object({\r\n  type: z.literal(\"Category2\"),\r\n  subcategories2: z.array(z.lazy(() => CategorySchema)),\r\n});\r\n\r\nconst CategorySchema: z.ZodSchema<Category> = z.discriminatedUnion(\"type\", [\r\n  Category1Schema,\r\n  Category2Schema,\r\n]);\r\n```\r\nOr even more compactly:\r\n```ts\r\ntype Category1 = {\r\n  type: \"Category1\";\r\n  subcategories1: Array<Category>;\r\n};\r\ntype Category2 = {\r\n  type: \"Category2\";\r\n  subcategories2: Array<Category>;\r\n};\r\ntype Category = Category1 | Category2;\r\n\r\nconst CategorySchema: z.ZodSchema<Category> = z.lazy(() =>\r\n  z.discriminatedUnion(\"type\", [\r\n    z.object({\r\n      type: z.literal(\"Category1\"),\r\n      subcategories1: z.array(CategorySchema),\r\n    }),\r\n    z.object({\r\n      type: z.literal(\"Category2\"),\r\n      subcategories2: z.array(CategorySchema),\r\n    }),\r\n  ])\r\n);\r\n```\r\n\r\nTherefore, I do not really think this is a big issue. But I guess I could try to make the discriminated union accept anything object-like. Though I would prefer to put it in a separate PR (if at all).\r\n\r\nAny views on this @scotttrinh?",
          "Ah, I see. The idea was that many types of categories would be defined through out the lifetime of the project so I wanted to avoid maintaining two sources of truth:\r\n```\r\ntype Category = Category1 | Category2;\r\n```\r\nand\r\n```\r\nconst CategorySchema: z.ZodSchema<Category> = z.discriminatedUnion(\"type\", [\r\n  Category1Schema,\r\n  Category2Schema,\r\n]);\r\n```\r\n\r\nHowever, I would agree that this change should go into a separate PR. In my opinion, this PR should be merged as is because its impact is too great to wait any longer.",
          "> ```ts\r\n> import {z} from 'zod';\r\n> \r\n> type Category1 = {\r\n>   type: 'Category1';\r\n>   subcategories1: Array<Category>;\r\n> };\r\n> \r\n> type Category2 = {\r\n>   type: 'Category2';\r\n>   subcategories2: Array<Category>;\r\n> };\r\n> \r\n> const Category1Schema: z.ZodSchema<Category1> = z.object({\r\n>   type: z.literal('Category1'),\r\n>   subcategories1: z.array(z.lazy(() => CategorySchema)),\r\n> });\r\n> \r\n> const Category2Schema: z.ZodSchema<Category2> = z.object({\r\n>   type: z.literal('Category2'),\r\n>   subcategories2: z.array(z.lazy(() => CategorySchema)),\r\n> });\r\n> \r\n> const CategorySchema = z.discriminatedUnion('type', [Category1Schema, Category2Schema]);\r\n> type Category = z.infer<typeof CategorySchema>;\r\n> ```\r\n\r\n@EdsterG, actually, even if `z.discriminatedUnion` accepted anything object-like, typescript would still throw recursion-related errors with your solution quoted above. The thing is that `Category` is inferred from `CategorySchema`, which refers to `Category1Schema` of type `Category1`. However, `Category1` refers to `Category`.\r\n\r\n",
          "@scotttrinh I added the simplified implementation of the map data structure as it was outlined in one of my previous comments (`util.SimpleMap`). It implements `get(key)`, `set(key, value)`, `has(key)`, `keys()` and the `size` property. Though I am not completely happy about the additional complexity it introduces (I mean, `Map` is well documented in the standards, while this one is custom and does not fully adhere to the `Map` interface). But it might be a good trade-off between a full `Map` polyfill and relying on `Map` being present in the environment.",
          "@alexxander \r\n\r\nLooking at https://caniuse.com/mdn-javascript_builtins_map I'm personally fine with IE11+ here, so `Map` still seems like a reasonable choice. We use `const`/`let` which has even worse support than `Map` (TIL!).\r\n\r\n@EdsterG \r\n\r\nRE: The type errors related to `ZodSchema`/`ZodType`\r\n\r\nWe shouldn't do too much work to support explicit types like the examples given here. Zod takes a pretty opinionated and strong stance that it should be the source of truth for types and does a best-effort job of supporting defining the types in TypeScript first. The big place of friction with this is external types that you do not control, so it's definitely ideal for it to work well if possible, but we should not spend too much development effort trying to get it to work. If `z.infer`/`z.input`/`z.output` is able to infer the correct type, that's our primary concern.",
          "@scotttrinh So I should revert it to the state in which `Map` is used, right?\r\nIs there anything else that has to be done (or that has to be changed) before this can be merged?",
          "> @scotttrinh So I should revert it to the state in which Map is used, right?\r\n> Is there anything else that has to be done (or that has to be changed) before this can be merged?\r\n\r\nJust went back through the code, and it looks very good to me, thank you for all of your hard work here! Once you get it back to using a `Map`, do you mind just running the benchmarks again and updating the description if they're different at all from the first time you ran it?",
          "@scotttrinh I reverted it. So now it uses `Map` again. I also ran the benchmarks and updated the pull request description.",
          "Whoa, amazing! This is just what we needed today. But looks like this isn't published to npm yet? Any way we can get a beta published?",
          "I published the latest master branch for anyone else who needs it.\r\n\r\nSet this in your package.json\r\n```json\r\n\"zod\": \"npm:@flybayer/zod@3.11.7-discriminatedUnion\"\r\n```"
        ]
      },
      {
        "pr_number": 876,
        "title": "README consistency fixes ",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/876",
        "comments": []
      },
      {
        "pr_number": 881,
        "title": "added z.date documentation to README.md. fixes #880",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/881",
        "comments": []
      },
      {
        "pr_number": 939,
        "title": "Add zod-prisma to the ecosystem section",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/939",
        "comments": []
      },
      {
        "pr_number": 939,
        "title": "Add zod-prisma to the ecosystem section",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/939",
        "comments": []
      },
      {
        "pr_number": 947,
        "title": "Add badges and call to action to README",
        "body": "Encourage users to use Zod, by asking them to Join the Discord server, Explore the Docs, and to Install Zod.\r\n![image](https://user-images.githubusercontent.com/61631665/154691506-a13515ae-de09-4d25-b25e-2b79d5b747dc.png)\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/947",
        "comments": []
      },
      {
        "pr_number": 947,
        "title": "Add badges and call to action to README",
        "body": "Encourage users to use Zod, by asking them to Join the Discord server, Explore the Docs, and to Install Zod.\r\n![image](https://user-images.githubusercontent.com/61631665/154691506-a13515ae-de09-4d25-b25e-2b79d5b747dc.png)\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/947",
        "comments": []
      },
      {
        "pr_number": 766,
        "title": "Remove duplicated `processCreateParams` in `ZodNumber`",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/766",
        "comments": []
      }
    ],
    "v3.11.6": [
      {
        "pr_number": 727,
        "title": "Improve refine with type guards",
        "body": "This PR improves the type signature of `refine` so the type of provided type guards is not lost.\n",
        "html_url": "https://github.com/colinhacks/zod/pull/727",
        "comments": [
          "Great idea and great PR! Thanks Denis!\r\n\r\nMerged in `zod@3.11.6`"
        ]
      },
      {
        "pr_number": 732,
        "title": "Standardize return types",
        "body": "Related to this issue: https://github.com/colinhacks/zod/issues/731",
        "html_url": "https://github.com/colinhacks/zod/pull/732",
        "comments": []
      },
      {
        "pr_number": 732,
        "title": "Standardize return types",
        "body": "Related to this issue: https://github.com/colinhacks/zod/issues/731",
        "html_url": "https://github.com/colinhacks/zod/pull/732",
        "comments": []
      },
      {
        "pr_number": 727,
        "title": "Improve refine with type guards",
        "body": "This PR improves the type signature of `refine` so the type of provided type guards is not lost.\n",
        "html_url": "https://github.com/colinhacks/zod/pull/727",
        "comments": [
          "Great idea and great PR! Thanks Denis!\r\n\r\nMerged in `zod@3.11.6`"
        ]
      }
    ],
    "v3.11.4": [],
    "v3.11.3": [
      {
        "pr_number": 721,
        "title": "Fix code typos in readme",
        "body": "I've catch those typos while reading readme",
        "html_url": "https://github.com/colinhacks/zod/pull/721",
        "comments": []
      },
      {
        "pr_number": 721,
        "title": "Fix code typos in readme",
        "body": "I've catch those typos while reading readme",
        "html_url": "https://github.com/colinhacks/zod/pull/721",
        "comments": []
      },
      {
        "pr_number": 721,
        "title": "Fix code typos in readme",
        "body": "I've catch those typos while reading readme",
        "html_url": "https://github.com/colinhacks/zod/pull/721",
        "comments": []
      },
      {
        "pr_number": 724,
        "title": "Add option for superRefine to abort further validation",
        "body": "The recent introduction of failed validations not short circuiting the entire validation chain introduced an issue for one of my projects, where a later check relied on an earlier check in a deeper object to succeed.\r\n\r\nThis PR adds an option for `superRefine()` to set the abort status via the the `IssueData` by specifying the new optional `fatal` boolean property on it.\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/724",
        "comments": []
      }
    ],
    "v3.10.3": [
      {
        "pr_number": 712,
        "title": "v3.10",
        "body": "Zod now can continue parsing after non-fatal errors (such as refinement errors) have occurred. This allows Zod to surface more errors to the user at once. Closes #690.",
        "html_url": "https://github.com/colinhacks/zod/pull/712",
        "comments": []
      },
      {
        "pr_number": 712,
        "title": "v3.10",
        "body": "Zod now can continue parsing after non-fatal errors (such as refinement errors) have occurred. This allows Zod to surface more errors to the user at once. Closes #690.",
        "html_url": "https://github.com/colinhacks/zod/pull/712",
        "comments": []
      },
      {
        "pr_number": 675,
        "title": "fix some readme error and opt inline link",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/675",
        "comments": []
      },
      {
        "pr_number": 675,
        "title": "fix some readme error and opt inline link",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/675",
        "comments": []
      },
      {
        "pr_number": 712,
        "title": "v3.10",
        "body": "Zod now can continue parsing after non-fatal errors (such as refinement errors) have occurred. This allows Zod to surface more errors to the user at once. Closes #690.",
        "html_url": "https://github.com/colinhacks/zod/pull/712",
        "comments": []
      },
      {
        "pr_number": 712,
        "title": "v3.10",
        "body": "Zod now can continue parsing after non-fatal errors (such as refinement errors) have occurred. This allows Zod to surface more errors to the user at once. Closes #690.",
        "html_url": "https://github.com/colinhacks/zod/pull/712",
        "comments": []
      },
      {
        "pr_number": 712,
        "title": "v3.10",
        "body": "Zod now can continue parsing after non-fatal errors (such as refinement errors) have occurred. This allows Zod to surface more errors to the user at once. Closes #690.",
        "html_url": "https://github.com/colinhacks/zod/pull/712",
        "comments": []
      },
      {
        "pr_number": 712,
        "title": "v3.10",
        "body": "Zod now can continue parsing after non-fatal errors (such as refinement errors) have occurred. This allows Zod to surface more errors to the user at once. Closes #690.",
        "html_url": "https://github.com/colinhacks/zod/pull/712",
        "comments": []
      },
      {
        "pr_number": 712,
        "title": "v3.10",
        "body": "Zod now can continue parsing after non-fatal errors (such as refinement errors) have occurred. This allows Zod to surface more errors to the user at once. Closes #690.",
        "html_url": "https://github.com/colinhacks/zod/pull/712",
        "comments": []
      },
      {
        "pr_number": 712,
        "title": "v3.10",
        "body": "Zod now can continue parsing after non-fatal errors (such as refinement errors) have occurred. This allows Zod to surface more errors to the user at once. Closes #690.",
        "html_url": "https://github.com/colinhacks/zod/pull/712",
        "comments": []
      },
      {
        "pr_number": 712,
        "title": "v3.10",
        "body": "Zod now can continue parsing after non-fatal errors (such as refinement errors) have occurred. This allows Zod to surface more errors to the user at once. Closes #690.",
        "html_url": "https://github.com/colinhacks/zod/pull/712",
        "comments": []
      },
      {
        "pr_number": 712,
        "title": "v3.10",
        "body": "Zod now can continue parsing after non-fatal errors (such as refinement errors) have occurred. This allows Zod to surface more errors to the user at once. Closes #690.",
        "html_url": "https://github.com/colinhacks/zod/pull/712",
        "comments": []
      },
      {
        "pr_number": 712,
        "title": "v3.10",
        "body": "Zod now can continue parsing after non-fatal errors (such as refinement errors) have occurred. This allows Zod to surface more errors to the user at once. Closes #690.",
        "html_url": "https://github.com/colinhacks/zod/pull/712",
        "comments": []
      },
      {
        "pr_number": 712,
        "title": "v3.10",
        "body": "Zod now can continue parsing after non-fatal errors (such as refinement errors) have occurred. This allows Zod to surface more errors to the user at once. Closes #690.",
        "html_url": "https://github.com/colinhacks/zod/pull/712",
        "comments": []
      },
      {
        "pr_number": 712,
        "title": "v3.10",
        "body": "Zod now can continue parsing after non-fatal errors (such as refinement errors) have occurred. This allows Zod to surface more errors to the user at once. Closes #690.",
        "html_url": "https://github.com/colinhacks/zod/pull/712",
        "comments": []
      },
      {
        "pr_number": 712,
        "title": "v3.10",
        "body": "Zod now can continue parsing after non-fatal errors (such as refinement errors) have occurred. This allows Zod to surface more errors to the user at once. Closes #690.",
        "html_url": "https://github.com/colinhacks/zod/pull/712",
        "comments": []
      },
      {
        "pr_number": 712,
        "title": "v3.10",
        "body": "Zod now can continue parsing after non-fatal errors (such as refinement errors) have occurred. This allows Zod to surface more errors to the user at once. Closes #690.",
        "html_url": "https://github.com/colinhacks/zod/pull/712",
        "comments": []
      },
      {
        "pr_number": 712,
        "title": "v3.10",
        "body": "Zod now can continue parsing after non-fatal errors (such as refinement errors) have occurred. This allows Zod to surface more errors to the user at once. Closes #690.",
        "html_url": "https://github.com/colinhacks/zod/pull/712",
        "comments": []
      },
      {
        "pr_number": 712,
        "title": "v3.10",
        "body": "Zod now can continue parsing after non-fatal errors (such as refinement errors) have occurred. This allows Zod to surface more errors to the user at once. Closes #690.",
        "html_url": "https://github.com/colinhacks/zod/pull/712",
        "comments": []
      },
      {
        "pr_number": 712,
        "title": "v3.10",
        "body": "Zod now can continue parsing after non-fatal errors (such as refinement errors) have occurred. This allows Zod to surface more errors to the user at once. Closes #690.",
        "html_url": "https://github.com/colinhacks/zod/pull/712",
        "comments": []
      },
      {
        "pr_number": 712,
        "title": "v3.10",
        "body": "Zod now can continue parsing after non-fatal errors (such as refinement errors) have occurred. This allows Zod to surface more errors to the user at once. Closes #690.",
        "html_url": "https://github.com/colinhacks/zod/pull/712",
        "comments": []
      },
      {
        "pr_number": 712,
        "title": "v3.10",
        "body": "Zod now can continue parsing after non-fatal errors (such as refinement errors) have occurred. This allows Zod to surface more errors to the user at once. Closes #690.",
        "html_url": "https://github.com/colinhacks/zod/pull/712",
        "comments": []
      },
      {
        "pr_number": 712,
        "title": "v3.10",
        "body": "Zod now can continue parsing after non-fatal errors (such as refinement errors) have occurred. This allows Zod to surface more errors to the user at once. Closes #690.",
        "html_url": "https://github.com/colinhacks/zod/pull/712",
        "comments": []
      }
    ],
    "v3.9.8": [
      {
        "pr_number": 676,
        "title": "Support array type during intersection",
        "body": "The change is motivated by https://github.com/colinhacks/zod/issues/636.\r\nIt should be possible to intersect schemas that consist of common fields, even\r\nif the common fields are defined via `z.array`. Prior to the current change it\r\nwas only possible to intersect primitives/objects.",
        "html_url": "https://github.com/colinhacks/zod/pull/676",
        "comments": [
          "@colinhacks any chance to take a \ud83d\udc41\ufe0f ",
          "Great PR, merged in 3.9.8 \ud83d\udc4d"
        ]
      },
      {
        "pr_number": 676,
        "title": "Support array type during intersection",
        "body": "The change is motivated by https://github.com/colinhacks/zod/issues/636.\r\nIt should be possible to intersect schemas that consist of common fields, even\r\nif the common fields are defined via `z.array`. Prior to the current change it\r\nwas only possible to intersect primitives/objects.",
        "html_url": "https://github.com/colinhacks/zod/pull/676",
        "comments": [
          "@colinhacks any chance to take a \ud83d\udc41\ufe0f ",
          "Great PR, merged in 3.9.8 \ud83d\udc4d"
        ]
      }
    ],
    "v3.9.0": [
      {
        "pr_number": 607,
        "title": "rm \"https\" in supporter a tags",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/607",
        "comments": []
      },
      {
        "pr_number": 607,
        "title": "rm \"https\" in supporter a tags",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/607",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 623,
        "title": "Added multipleOf number validation (evenly divisible).",
        "body": "Came across [multipleOf in the JSON schema docs](https://json-schema.org/understanding-json-schema/reference/numeric.html#multiples) and thought it'd be nice to have in Zod. \r\n\r\nEasily implemented with a simple refinement, but then I can't convert it to a JSON schema and will loose sleep. :(\r\n\r\nJokes aside, it's a pretty basic feature and may be useful for things like `<input type=\"number\" step=x />` in form generators etc.",
        "html_url": "https://github.com/colinhacks/zod/pull/623",
        "comments": [
          "This implementation fails with cases like the following:\r\n\r\n`23.9 % 0.01 = 0.009999999999998082`\r\n\r\n_(the client enters a price, that must have at max 2 decimal places, = step(0.01))_\r\n\r\nhttps://stackoverflow.com/questions/7037926/javascript-how-to-tell-if-one-number-is-a-multiple-of-another\r\n\r\nhttps://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript\r\n\r\n@StefanTerdell @colinhacks @scotttrinh \r\n\r\nFor my case, it would be good a validation like max/minDecimals(), but maybe you can come up with better solutions."
        ]
      },
      {
        "pr_number": 623,
        "title": "Added multipleOf number validation (evenly divisible).",
        "body": "Came across [multipleOf in the JSON schema docs](https://json-schema.org/understanding-json-schema/reference/numeric.html#multiples) and thought it'd be nice to have in Zod. \r\n\r\nEasily implemented with a simple refinement, but then I can't convert it to a JSON schema and will loose sleep. :(\r\n\r\nJokes aside, it's a pretty basic feature and may be useful for things like `<input type=\"number\" step=x />` in form generators etc.",
        "html_url": "https://github.com/colinhacks/zod/pull/623",
        "comments": [
          "This implementation fails with cases like the following:\r\n\r\n`23.9 % 0.01 = 0.009999999999998082`\r\n\r\n_(the client enters a price, that must have at max 2 decimal places, = step(0.01))_\r\n\r\nhttps://stackoverflow.com/questions/7037926/javascript-how-to-tell-if-one-number-is-a-multiple-of-another\r\n\r\nhttps://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript\r\n\r\n@StefanTerdell @colinhacks @scotttrinh \r\n\r\nFor my case, it would be good a validation like max/minDecimals(), but maybe you can come up with better solutions."
        ]
      },
      {
        "pr_number": 624,
        "title": "Add partialBy to ZodObject",
        "body": "GH Issue #621",
        "html_url": "https://github.com/colinhacks/zod/pull/624",
        "comments": [
          "@rubber-duck-software \r\n\r\nImplementation looks solid! Would you be interested in adding some tests similar to [the suite for pick and omit?](https://github.com/colinhacks/zod/blob/master/src/__tests__/pickomit.test.ts) If not, we can add them on our end when integrating this PR.",
          "A good idea and a good implementation. That said, I think this should be an overload of `.partial`. Could you submit another PR? Then I'll publish this as a part of zod@3.9.",
          "@rubber-duck-software Scratch that, doing this myself. This should land in zod@3.9 later today.",
          "Hello @colinhacks ,\r\n\r\nWhen will this feature be officially released? I'm currently running v3.8.2 but this feature would be really useful. "
        ]
      },
      {
        "pr_number": 629,
        "title": "Fix User.parse example",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/629",
        "comments": []
      },
      {
        "pr_number": 629,
        "title": "Fix User.parse example",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/629",
        "comments": []
      },
      {
        "pr_number": 623,
        "title": "Added multipleOf number validation (evenly divisible).",
        "body": "Came across [multipleOf in the JSON schema docs](https://json-schema.org/understanding-json-schema/reference/numeric.html#multiples) and thought it'd be nice to have in Zod. \r\n\r\nEasily implemented with a simple refinement, but then I can't convert it to a JSON schema and will loose sleep. :(\r\n\r\nJokes aside, it's a pretty basic feature and may be useful for things like `<input type=\"number\" step=x />` in form generators etc.",
        "html_url": "https://github.com/colinhacks/zod/pull/623",
        "comments": [
          "This implementation fails with cases like the following:\r\n\r\n`23.9 % 0.01 = 0.009999999999998082`\r\n\r\n_(the client enters a price, that must have at max 2 decimal places, = step(0.01))_\r\n\r\nhttps://stackoverflow.com/questions/7037926/javascript-how-to-tell-if-one-number-is-a-multiple-of-another\r\n\r\nhttps://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript\r\n\r\n@StefanTerdell @colinhacks @scotttrinh \r\n\r\nFor my case, it would be good a validation like max/minDecimals(), but maybe you can come up with better solutions."
        ]
      },
      {
        "pr_number": 623,
        "title": "Added multipleOf number validation (evenly divisible).",
        "body": "Came across [multipleOf in the JSON schema docs](https://json-schema.org/understanding-json-schema/reference/numeric.html#multiples) and thought it'd be nice to have in Zod. \r\n\r\nEasily implemented with a simple refinement, but then I can't convert it to a JSON schema and will loose sleep. :(\r\n\r\nJokes aside, it's a pretty basic feature and may be useful for things like `<input type=\"number\" step=x />` in form generators etc.",
        "html_url": "https://github.com/colinhacks/zod/pull/623",
        "comments": [
          "This implementation fails with cases like the following:\r\n\r\n`23.9 % 0.01 = 0.009999999999998082`\r\n\r\n_(the client enters a price, that must have at max 2 decimal places, = step(0.01))_\r\n\r\nhttps://stackoverflow.com/questions/7037926/javascript-how-to-tell-if-one-number-is-a-multiple-of-another\r\n\r\nhttps://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript\r\n\r\n@StefanTerdell @colinhacks @scotttrinh \r\n\r\nFor my case, it would be good a validation like max/minDecimals(), but maybe you can come up with better solutions."
        ]
      },
      {
        "pr_number": 623,
        "title": "Added multipleOf number validation (evenly divisible).",
        "body": "Came across [multipleOf in the JSON schema docs](https://json-schema.org/understanding-json-schema/reference/numeric.html#multiples) and thought it'd be nice to have in Zod. \r\n\r\nEasily implemented with a simple refinement, but then I can't convert it to a JSON schema and will loose sleep. :(\r\n\r\nJokes aside, it's a pretty basic feature and may be useful for things like `<input type=\"number\" step=x />` in form generators etc.",
        "html_url": "https://github.com/colinhacks/zod/pull/623",
        "comments": [
          "This implementation fails with cases like the following:\r\n\r\n`23.9 % 0.01 = 0.009999999999998082`\r\n\r\n_(the client enters a price, that must have at max 2 decimal places, = step(0.01))_\r\n\r\nhttps://stackoverflow.com/questions/7037926/javascript-how-to-tell-if-one-number-is-a-multiple-of-another\r\n\r\nhttps://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript\r\n\r\n@StefanTerdell @colinhacks @scotttrinh \r\n\r\nFor my case, it would be good a validation like max/minDecimals(), but maybe you can come up with better solutions."
        ]
      },
      {
        "pr_number": 624,
        "title": "Add partialBy to ZodObject",
        "body": "GH Issue #621",
        "html_url": "https://github.com/colinhacks/zod/pull/624",
        "comments": [
          "@rubber-duck-software \r\n\r\nImplementation looks solid! Would you be interested in adding some tests similar to [the suite for pick and omit?](https://github.com/colinhacks/zod/blob/master/src/__tests__/pickomit.test.ts) If not, we can add them on our end when integrating this PR.",
          "A good idea and a good implementation. That said, I think this should be an overload of `.partial`. Could you submit another PR? Then I'll publish this as a part of zod@3.9.",
          "@rubber-duck-software Scratch that, doing this myself. This should land in zod@3.9 later today.",
          "Hello @colinhacks ,\r\n\r\nWhen will this feature be officially released? I'm currently running v3.8.2 but this feature would be really useful. "
        ]
      },
      {
        "pr_number": 624,
        "title": "Add partialBy to ZodObject",
        "body": "GH Issue #621",
        "html_url": "https://github.com/colinhacks/zod/pull/624",
        "comments": [
          "@rubber-duck-software \r\n\r\nImplementation looks solid! Would you be interested in adding some tests similar to [the suite for pick and omit?](https://github.com/colinhacks/zod/blob/master/src/__tests__/pickomit.test.ts) If not, we can add them on our end when integrating this PR.",
          "A good idea and a good implementation. That said, I think this should be an overload of `.partial`. Could you submit another PR? Then I'll publish this as a part of zod@3.9.",
          "@rubber-duck-software Scratch that, doing this myself. This should land in zod@3.9 later today.",
          "Hello @colinhacks ,\r\n\r\nWhen will this feature be officially released? I'm currently running v3.8.2 but this feature would be really useful. "
        ]
      },
      {
        "pr_number": 624,
        "title": "Add partialBy to ZodObject",
        "body": "GH Issue #621",
        "html_url": "https://github.com/colinhacks/zod/pull/624",
        "comments": [
          "@rubber-duck-software \r\n\r\nImplementation looks solid! Would you be interested in adding some tests similar to [the suite for pick and omit?](https://github.com/colinhacks/zod/blob/master/src/__tests__/pickomit.test.ts) If not, we can add them on our end when integrating this PR.",
          "A good idea and a good implementation. That said, I think this should be an overload of `.partial`. Could you submit another PR? Then I'll publish this as a part of zod@3.9.",
          "@rubber-duck-software Scratch that, doing this myself. This should land in zod@3.9 later today.",
          "Hello @colinhacks ,\r\n\r\nWhen will this feature be officially released? I'm currently running v3.8.2 but this feature would be really useful. "
        ]
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 640,
        "title": "fix typos",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/640",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 640,
        "title": "fix typos",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/640",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 657,
        "title": "Add `ZodRecord.element` getter similar to `ZodArray.element`",
        "body": "There is currently no publicly accessible getter for the value type of a `ZodRecord`. This uses the same naming as `ZodArray`, which seems nice, but potentially confusing? Definitely open to feedback on renaming this method.\r\n\r\nCloses #656 ",
        "html_url": "https://github.com/colinhacks/zod/pull/657",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 657,
        "title": "Add `ZodRecord.element` getter similar to `ZodArray.element`",
        "body": "There is currently no publicly accessible getter for the value type of a `ZodRecord`. This uses the same naming as `ZodArray`, which seems nice, but potentially confusing? Definitely open to feedback on renaming this method.\r\n\r\nCloses #656 ",
        "html_url": "https://github.com/colinhacks/zod/pull/657",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      },
      {
        "pr_number": 663,
        "title": "v3.9",
        "body": "## \u2728 Zod 3.9 \u2728 \r\n\r\n### Custom error messages in schemas\r\n\r\n```ts\r\nconst name = z.string({\r\n  invalid_type_error: \"Name must be string\",\r\n  required_error: \"Name is required\",\r\n});\r\n```\r\n\r\nUnder the hood, this creates a custom error map that's bound to the schema. You can also pass a custom error map explicitly.\r\n\r\n```ts\r\nconst name = z.string({ errorMap: myErrorMap });\r\n```\r\n\r\n### Rest parameters for tuples\r\n\r\n```ts\r\nconst myTuple = z.tuple([z.string(), z.number()]).rest(z.boolean());\r\ntype t1 = z.output<typeof myTuple>; // [string, number, ...boolean[]]\r\n```\r\n\r\n### Selective `.partial`\r\n\r\nYou can specify certain fields to make optional with the `ZodObject.partial` method.\r\n\r\n```ts\r\nconst user = z.object({\r\n  name: z.string(),\r\n  age: z.number(),\r\n});\r\n\r\nconst optionalNameUser = user.partial({ name: true });\r\n// { name?: string; age: number; }\r\n```\r\n\r\n### Support key schema in ZodRecord\r\n\r\nPreviously, `z.record` only accepted a single schema:\r\n\r\n```ts\r\nz.record(z.boolean()); // Record<string, boolean>;\r\n```\r\n\r\nNow `z.record` has been overloaded to support two schemas. The first validates the _keys_ of the record, and the second validates the _values_.\r\n\r\n```ts\r\nconst schema = z.record(z.number(), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<number, boolean>\r\n\r\nconst schema = z.record(z.enum([\"Tuna\", \"Trout\"]), z.boolean());\r\ntype schema = z.infer<typeof schema>; // Record<\"Tuna\" | \"Trout\", boolean>\r\n```\r\n\r\n### Don't short-circuit on some validation errors\r\n\r\nCertain issue types \"short circuit\" the rest of the validation logic. If you pass a `number` into a `ZodString` schema, Zod throws an error immediately, without passing the input through any downstream refinements or transforms. This is intentional; those refinements/transforms are likely to throw unexpected errors since they assume a `number` input. \r\n\r\nHowever other kinds of errors shouldn't \"short circuit\" like this. For instance `z.string().min(10).email()`. If we try to parse `\"asdf\"` with this schema, we should get two errors: \"Invalid email\" and \"Input should contain at least 10 characters\". If we short circuit after the `\"min\"` error, then Zod fails to surface the full set of validation issues.\r\n\r\nZod now considers certain classes of validation errors \"continuable\", in that they don't short circuit validation logic. This makes Zod more usable in form validation settings like this:\r\n\r\n```ts\r\nconst user = z\r\n  .object({\r\n    password: z.string().min(6),\r\n    confirm: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirm, \"Passwords don't match\");\r\nconst result = user.safeParse({ password: \"asdf\", confirm: \"qwer\" });\r\n\r\n```\r\nThis will return an error with two issues. Previously the parsing would have short-circuited after the inner `password` was invalid.\r\n\r\n```ts\r\n\r\n/*\r\nZodError: [\r\n    {\r\n      \"code\": \"too_small\",\r\n      \"minimum\": 6,\r\n      \"type\": \"string\",\r\n      \"inclusive\": true,\r\n      \"message\": \"Should be at least 6 characters\",\r\n      \"path\": [ \"password\" ]\r\n    },\r\n    {\r\n      \"code\": \"custom\",\r\n      \"message\": \"Passwords don't match\",\r\n      \"path\": [ \"confirm\" ]\r\n    }\r\n  ]\r\n*/\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/663",
        "comments": []
      }
    ],
    "v3.8.0": [
      {
        "pr_number": 602,
        "title": "3.8.0",
        "body": "Release: `zod@3.8.0`\r\nWhat's new:\r\n\r\n### `z.preprocess`\r\n\r\n   This lets you transform input data before it is parsed by your schema. This is useful for several use cases, notably *type coercion*. Usage:\r\n   \r\n   ```ts\r\n   const coercedString = z.preprocess(\r\n     val => String(val),\r\n     z.string()\r\n   )\r\n   mySchema.parse(12); // => \"12\"\r\n   mySchema.parse(true); // => \"true\"\r\n   ```\r\n\r\n### CUID validation\r\n\r\nCourtesy of @alii \r\n\r\n   ```ts\r\n   const cuid = z.string().cuid()\r\n   cuid.parse(\"ckopqwooh000001la8mbi2im9\");\r\n   ```\r\n\r\n### Improved `.deepPartial()`\r\n\r\n   The `.deepPartial()` method on object schemas now recursively traverses through ZodArray, ZodTuple, ZodOptional, and ZodNullable elements. Previously, this method only worked in hierarchies of simple object schemas.\r\n\r\n   ```ts\r\n   const mySchema = z.object({\r\n     name: z.string(),\r\n     array: z.array(z.object({ asdf: z.string() })),\r\n     tuple: z.tuple([\r\n       z.object({ value: z.string() })\r\n     ]),\r\n   }) \r\n\r\n   const partialed = mySchema.deepPartial();\r\n   type partialed = z.infer<typeof partialed>;\r\n   /*\r\n     {\r\n       name?: string | undefined;\r\n       array?: {\r\n           asdf?: string | undefined;\r\n       }[] | undefined;\r\n       tuple?: [{value?: string}] | undefined;\r\n     }\r\n   */\r\n   ```",
        "html_url": "https://github.com/colinhacks/zod/pull/602",
        "comments": []
      },
      {
        "pr_number": 602,
        "title": "3.8.0",
        "body": "Release: `zod@3.8.0`\r\nWhat's new:\r\n\r\n### `z.preprocess`\r\n\r\n   This lets you transform input data before it is parsed by your schema. This is useful for several use cases, notably *type coercion*. Usage:\r\n   \r\n   ```ts\r\n   const coercedString = z.preprocess(\r\n     val => String(val),\r\n     z.string()\r\n   )\r\n   mySchema.parse(12); // => \"12\"\r\n   mySchema.parse(true); // => \"true\"\r\n   ```\r\n\r\n### CUID validation\r\n\r\nCourtesy of @alii \r\n\r\n   ```ts\r\n   const cuid = z.string().cuid()\r\n   cuid.parse(\"ckopqwooh000001la8mbi2im9\");\r\n   ```\r\n\r\n### Improved `.deepPartial()`\r\n\r\n   The `.deepPartial()` method on object schemas now recursively traverses through ZodArray, ZodTuple, ZodOptional, and ZodNullable elements. Previously, this method only worked in hierarchies of simple object schemas.\r\n\r\n   ```ts\r\n   const mySchema = z.object({\r\n     name: z.string(),\r\n     array: z.array(z.object({ asdf: z.string() })),\r\n     tuple: z.tuple([\r\n       z.object({ value: z.string() })\r\n     ]),\r\n   }) \r\n\r\n   const partialed = mySchema.deepPartial();\r\n   type partialed = z.infer<typeof partialed>;\r\n   /*\r\n     {\r\n       name?: string | undefined;\r\n       array?: {\r\n           asdf?: string | undefined;\r\n       }[] | undefined;\r\n       tuple?: [{value?: string}] | undefined;\r\n     }\r\n   */\r\n   ```",
        "html_url": "https://github.com/colinhacks/zod/pull/602",
        "comments": []
      },
      {
        "pr_number": 602,
        "title": "3.8.0",
        "body": "Release: `zod@3.8.0`\r\nWhat's new:\r\n\r\n### `z.preprocess`\r\n\r\n   This lets you transform input data before it is parsed by your schema. This is useful for several use cases, notably *type coercion*. Usage:\r\n   \r\n   ```ts\r\n   const coercedString = z.preprocess(\r\n     val => String(val),\r\n     z.string()\r\n   )\r\n   mySchema.parse(12); // => \"12\"\r\n   mySchema.parse(true); // => \"true\"\r\n   ```\r\n\r\n### CUID validation\r\n\r\nCourtesy of @alii \r\n\r\n   ```ts\r\n   const cuid = z.string().cuid()\r\n   cuid.parse(\"ckopqwooh000001la8mbi2im9\");\r\n   ```\r\n\r\n### Improved `.deepPartial()`\r\n\r\n   The `.deepPartial()` method on object schemas now recursively traverses through ZodArray, ZodTuple, ZodOptional, and ZodNullable elements. Previously, this method only worked in hierarchies of simple object schemas.\r\n\r\n   ```ts\r\n   const mySchema = z.object({\r\n     name: z.string(),\r\n     array: z.array(z.object({ asdf: z.string() })),\r\n     tuple: z.tuple([\r\n       z.object({ value: z.string() })\r\n     ]),\r\n   }) \r\n\r\n   const partialed = mySchema.deepPartial();\r\n   type partialed = z.infer<typeof partialed>;\r\n   /*\r\n     {\r\n       name?: string | undefined;\r\n       array?: {\r\n           asdf?: string | undefined;\r\n       }[] | undefined;\r\n       tuple?: [{value?: string}] | undefined;\r\n     }\r\n   */\r\n   ```",
        "html_url": "https://github.com/colinhacks/zod/pull/602",
        "comments": []
      },
      {
        "pr_number": 602,
        "title": "3.8.0",
        "body": "Release: `zod@3.8.0`\r\nWhat's new:\r\n\r\n### `z.preprocess`\r\n\r\n   This lets you transform input data before it is parsed by your schema. This is useful for several use cases, notably *type coercion*. Usage:\r\n   \r\n   ```ts\r\n   const coercedString = z.preprocess(\r\n     val => String(val),\r\n     z.string()\r\n   )\r\n   mySchema.parse(12); // => \"12\"\r\n   mySchema.parse(true); // => \"true\"\r\n   ```\r\n\r\n### CUID validation\r\n\r\nCourtesy of @alii \r\n\r\n   ```ts\r\n   const cuid = z.string().cuid()\r\n   cuid.parse(\"ckopqwooh000001la8mbi2im9\");\r\n   ```\r\n\r\n### Improved `.deepPartial()`\r\n\r\n   The `.deepPartial()` method on object schemas now recursively traverses through ZodArray, ZodTuple, ZodOptional, and ZodNullable elements. Previously, this method only worked in hierarchies of simple object schemas.\r\n\r\n   ```ts\r\n   const mySchema = z.object({\r\n     name: z.string(),\r\n     array: z.array(z.object({ asdf: z.string() })),\r\n     tuple: z.tuple([\r\n       z.object({ value: z.string() })\r\n     ]),\r\n   }) \r\n\r\n   const partialed = mySchema.deepPartial();\r\n   type partialed = z.infer<typeof partialed>;\r\n   /*\r\n     {\r\n       name?: string | undefined;\r\n       array?: {\r\n           asdf?: string | undefined;\r\n       }[] | undefined;\r\n       tuple?: [{value?: string}] | undefined;\r\n     }\r\n   */\r\n   ```",
        "html_url": "https://github.com/colinhacks/zod/pull/602",
        "comments": []
      },
      {
        "pr_number": 602,
        "title": "3.8.0",
        "body": "Release: `zod@3.8.0`\r\nWhat's new:\r\n\r\n### `z.preprocess`\r\n\r\n   This lets you transform input data before it is parsed by your schema. This is useful for several use cases, notably *type coercion*. Usage:\r\n   \r\n   ```ts\r\n   const coercedString = z.preprocess(\r\n     val => String(val),\r\n     z.string()\r\n   )\r\n   mySchema.parse(12); // => \"12\"\r\n   mySchema.parse(true); // => \"true\"\r\n   ```\r\n\r\n### CUID validation\r\n\r\nCourtesy of @alii \r\n\r\n   ```ts\r\n   const cuid = z.string().cuid()\r\n   cuid.parse(\"ckopqwooh000001la8mbi2im9\");\r\n   ```\r\n\r\n### Improved `.deepPartial()`\r\n\r\n   The `.deepPartial()` method on object schemas now recursively traverses through ZodArray, ZodTuple, ZodOptional, and ZodNullable elements. Previously, this method only worked in hierarchies of simple object schemas.\r\n\r\n   ```ts\r\n   const mySchema = z.object({\r\n     name: z.string(),\r\n     array: z.array(z.object({ asdf: z.string() })),\r\n     tuple: z.tuple([\r\n       z.object({ value: z.string() })\r\n     ]),\r\n   }) \r\n\r\n   const partialed = mySchema.deepPartial();\r\n   type partialed = z.infer<typeof partialed>;\r\n   /*\r\n     {\r\n       name?: string | undefined;\r\n       array?: {\r\n           asdf?: string | undefined;\r\n       }[] | undefined;\r\n       tuple?: [{value?: string}] | undefined;\r\n     }\r\n   */\r\n   ```",
        "html_url": "https://github.com/colinhacks/zod/pull/602",
        "comments": []
      },
      {
        "pr_number": 602,
        "title": "3.8.0",
        "body": "Release: `zod@3.8.0`\r\nWhat's new:\r\n\r\n### `z.preprocess`\r\n\r\n   This lets you transform input data before it is parsed by your schema. This is useful for several use cases, notably *type coercion*. Usage:\r\n   \r\n   ```ts\r\n   const coercedString = z.preprocess(\r\n     val => String(val),\r\n     z.string()\r\n   )\r\n   mySchema.parse(12); // => \"12\"\r\n   mySchema.parse(true); // => \"true\"\r\n   ```\r\n\r\n### CUID validation\r\n\r\nCourtesy of @alii \r\n\r\n   ```ts\r\n   const cuid = z.string().cuid()\r\n   cuid.parse(\"ckopqwooh000001la8mbi2im9\");\r\n   ```\r\n\r\n### Improved `.deepPartial()`\r\n\r\n   The `.deepPartial()` method on object schemas now recursively traverses through ZodArray, ZodTuple, ZodOptional, and ZodNullable elements. Previously, this method only worked in hierarchies of simple object schemas.\r\n\r\n   ```ts\r\n   const mySchema = z.object({\r\n     name: z.string(),\r\n     array: z.array(z.object({ asdf: z.string() })),\r\n     tuple: z.tuple([\r\n       z.object({ value: z.string() })\r\n     ]),\r\n   }) \r\n\r\n   const partialed = mySchema.deepPartial();\r\n   type partialed = z.infer<typeof partialed>;\r\n   /*\r\n     {\r\n       name?: string | undefined;\r\n       array?: {\r\n           asdf?: string | undefined;\r\n       }[] | undefined;\r\n       tuple?: [{value?: string}] | undefined;\r\n     }\r\n   */\r\n   ```",
        "html_url": "https://github.com/colinhacks/zod/pull/602",
        "comments": []
      },
      {
        "pr_number": 602,
        "title": "3.8.0",
        "body": "Release: `zod@3.8.0`\r\nWhat's new:\r\n\r\n### `z.preprocess`\r\n\r\n   This lets you transform input data before it is parsed by your schema. This is useful for several use cases, notably *type coercion*. Usage:\r\n   \r\n   ```ts\r\n   const coercedString = z.preprocess(\r\n     val => String(val),\r\n     z.string()\r\n   )\r\n   mySchema.parse(12); // => \"12\"\r\n   mySchema.parse(true); // => \"true\"\r\n   ```\r\n\r\n### CUID validation\r\n\r\nCourtesy of @alii \r\n\r\n   ```ts\r\n   const cuid = z.string().cuid()\r\n   cuid.parse(\"ckopqwooh000001la8mbi2im9\");\r\n   ```\r\n\r\n### Improved `.deepPartial()`\r\n\r\n   The `.deepPartial()` method on object schemas now recursively traverses through ZodArray, ZodTuple, ZodOptional, and ZodNullable elements. Previously, this method only worked in hierarchies of simple object schemas.\r\n\r\n   ```ts\r\n   const mySchema = z.object({\r\n     name: z.string(),\r\n     array: z.array(z.object({ asdf: z.string() })),\r\n     tuple: z.tuple([\r\n       z.object({ value: z.string() })\r\n     ]),\r\n   }) \r\n\r\n   const partialed = mySchema.deepPartial();\r\n   type partialed = z.infer<typeof partialed>;\r\n   /*\r\n     {\r\n       name?: string | undefined;\r\n       array?: {\r\n           asdf?: string | undefined;\r\n       }[] | undefined;\r\n       tuple?: [{value?: string}] | undefined;\r\n     }\r\n   */\r\n   ```",
        "html_url": "https://github.com/colinhacks/zod/pull/602",
        "comments": []
      },
      {
        "pr_number": 602,
        "title": "3.8.0",
        "body": "Release: `zod@3.8.0`\r\nWhat's new:\r\n\r\n### `z.preprocess`\r\n\r\n   This lets you transform input data before it is parsed by your schema. This is useful for several use cases, notably *type coercion*. Usage:\r\n   \r\n   ```ts\r\n   const coercedString = z.preprocess(\r\n     val => String(val),\r\n     z.string()\r\n   )\r\n   mySchema.parse(12); // => \"12\"\r\n   mySchema.parse(true); // => \"true\"\r\n   ```\r\n\r\n### CUID validation\r\n\r\nCourtesy of @alii \r\n\r\n   ```ts\r\n   const cuid = z.string().cuid()\r\n   cuid.parse(\"ckopqwooh000001la8mbi2im9\");\r\n   ```\r\n\r\n### Improved `.deepPartial()`\r\n\r\n   The `.deepPartial()` method on object schemas now recursively traverses through ZodArray, ZodTuple, ZodOptional, and ZodNullable elements. Previously, this method only worked in hierarchies of simple object schemas.\r\n\r\n   ```ts\r\n   const mySchema = z.object({\r\n     name: z.string(),\r\n     array: z.array(z.object({ asdf: z.string() })),\r\n     tuple: z.tuple([\r\n       z.object({ value: z.string() })\r\n     ]),\r\n   }) \r\n\r\n   const partialed = mySchema.deepPartial();\r\n   type partialed = z.infer<typeof partialed>;\r\n   /*\r\n     {\r\n       name?: string | undefined;\r\n       array?: {\r\n           asdf?: string | undefined;\r\n       }[] | undefined;\r\n       tuple?: [{value?: string}] | undefined;\r\n     }\r\n   */\r\n   ```",
        "html_url": "https://github.com/colinhacks/zod/pull/602",
        "comments": []
      },
      {
        "pr_number": 602,
        "title": "3.8.0",
        "body": "Release: `zod@3.8.0`\r\nWhat's new:\r\n\r\n### `z.preprocess`\r\n\r\n   This lets you transform input data before it is parsed by your schema. This is useful for several use cases, notably *type coercion*. Usage:\r\n   \r\n   ```ts\r\n   const coercedString = z.preprocess(\r\n     val => String(val),\r\n     z.string()\r\n   )\r\n   mySchema.parse(12); // => \"12\"\r\n   mySchema.parse(true); // => \"true\"\r\n   ```\r\n\r\n### CUID validation\r\n\r\nCourtesy of @alii \r\n\r\n   ```ts\r\n   const cuid = z.string().cuid()\r\n   cuid.parse(\"ckopqwooh000001la8mbi2im9\");\r\n   ```\r\n\r\n### Improved `.deepPartial()`\r\n\r\n   The `.deepPartial()` method on object schemas now recursively traverses through ZodArray, ZodTuple, ZodOptional, and ZodNullable elements. Previously, this method only worked in hierarchies of simple object schemas.\r\n\r\n   ```ts\r\n   const mySchema = z.object({\r\n     name: z.string(),\r\n     array: z.array(z.object({ asdf: z.string() })),\r\n     tuple: z.tuple([\r\n       z.object({ value: z.string() })\r\n     ]),\r\n   }) \r\n\r\n   const partialed = mySchema.deepPartial();\r\n   type partialed = z.infer<typeof partialed>;\r\n   /*\r\n     {\r\n       name?: string | undefined;\r\n       array?: {\r\n           asdf?: string | undefined;\r\n       }[] | undefined;\r\n       tuple?: [{value?: string}] | undefined;\r\n     }\r\n   */\r\n   ```",
        "html_url": "https://github.com/colinhacks/zod/pull/602",
        "comments": []
      },
      {
        "pr_number": 602,
        "title": "3.8.0",
        "body": "Release: `zod@3.8.0`\r\nWhat's new:\r\n\r\n### `z.preprocess`\r\n\r\n   This lets you transform input data before it is parsed by your schema. This is useful for several use cases, notably *type coercion*. Usage:\r\n   \r\n   ```ts\r\n   const coercedString = z.preprocess(\r\n     val => String(val),\r\n     z.string()\r\n   )\r\n   mySchema.parse(12); // => \"12\"\r\n   mySchema.parse(true); // => \"true\"\r\n   ```\r\n\r\n### CUID validation\r\n\r\nCourtesy of @alii \r\n\r\n   ```ts\r\n   const cuid = z.string().cuid()\r\n   cuid.parse(\"ckopqwooh000001la8mbi2im9\");\r\n   ```\r\n\r\n### Improved `.deepPartial()`\r\n\r\n   The `.deepPartial()` method on object schemas now recursively traverses through ZodArray, ZodTuple, ZodOptional, and ZodNullable elements. Previously, this method only worked in hierarchies of simple object schemas.\r\n\r\n   ```ts\r\n   const mySchema = z.object({\r\n     name: z.string(),\r\n     array: z.array(z.object({ asdf: z.string() })),\r\n     tuple: z.tuple([\r\n       z.object({ value: z.string() })\r\n     ]),\r\n   }) \r\n\r\n   const partialed = mySchema.deepPartial();\r\n   type partialed = z.infer<typeof partialed>;\r\n   /*\r\n     {\r\n       name?: string | undefined;\r\n       array?: {\r\n           asdf?: string | undefined;\r\n       }[] | undefined;\r\n       tuple?: [{value?: string}] | undefined;\r\n     }\r\n   */\r\n   ```",
        "html_url": "https://github.com/colinhacks/zod/pull/602",
        "comments": []
      }
    ],
    "v3.7.3": [
      {
        "pr_number": 573,
        "title": "Stack Trace in Async Zod Function",
        "body": "Git Issue #572",
        "html_url": "https://github.com/colinhacks/zod/pull/573",
        "comments": [
          "This would be great to get merged in order to improve the stack traces we get when return type parsing fails.  We're in the midst of migrating to Zod, but the stack traces we get in sentry.io are not enough to troubleshoot with.",
          "This is a blocking issue for Marcato. We would like to use Zod in more places in our backend for runtime type safety, but runtime type safety is only helpful if we can track down the issues quickly. Currently we have an error with stack trace \r\n\r\n```\r\nZodError: [\r\n  {\r\n    \"code\": \"invalid_arguments\",\r\n    \"argumentsError\": {\r\n      \"issues\": [\r\n        {\r\n          \"code\": \"invalid_type\",\r\n          \"expected\": \"string\",\r\n          \"received\": \"undefined\",\r\n          \"path\": [\r\n            0,\r\n            \"filters\",\r\n...\r\n  File \"/var/app/current/node_modules/zod/lib/ZodError.js\", line 75, col 28, in new ZodError\r\n    var _this = _super.call(this) || this;\r\n  File \"/var/app/current/node_modules/zod/lib/types.js\", line 1747, col 23, in handleArgs\r\n    throw new ZodError_1.ZodError([issue]);\r\n  File \"/var/app/current/node_modules/zod/lib/types.js\", line 1778, col 49, in ZodFunction.<anonymous>\r\n    parsedArgs = _a.apply(void 0, _b.concat([_e.sent()]));\r\n  File \"/var/app/current/node_modules/zod/lib/types.js\", line 59, col 23, in step\r\n    op = body.call(thisArg, _);\r\n  File \"/var/app/current/node_modules/zod/lib/types.js\", line 40, col 53, in Object.next\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n  File \"/var/app/current/node_modules/zod/lib/types.js\", line 31, col 58, in fulfilled\r\n    function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n\r\n```\r\n\r\nThere is no telling where in our code base this error was thrown. It is useless to have an error message like this. Please merge this PR or recommend revisions to it soon.  ",
          "@rubber-duck-software \r\n\r\n> Please merge this PR or recommend revisions to it soon.\r\n\r\nThanks for taking the time to PR \u2014 I wish I knew enough about the async validation code to feel comfortable merging this or suggesting updates. In the meantime, I don't think there is anything that should stop you from publishing your own fork and working with us to get your changes upstreamed, so I don't think you have to feel like this really blocks adoption.",
          "Sorry @rubber-duck-software, didn't mean to leave this so long. \r\n\r\nThe reason I haven't merged it is that I don't really know what's happening. Is the goal just to shorten the number of stack frames that are internal to Zod? Is the problem that the stack trace is getting truncated before you can see which LOC in your codebase threw the error? \r\n\r\nIn my testing, your version only decreased the number of Zod-internal stack frames by one. Could you provide a code snippet + associated stack traces where this isn't the case? It's possible the complexity of the input/returnType schemas are relevant here (I was using simple schemas in my tests).\r\n\r\nFinally - if the stack trace is getting truncated before they're useful, I recommend increasing the stack trace limit. The default is 10 which is why you may not be getting as much detail as you need to properly debug. You can just execute `Error.stackTraceLimit = 100` anywhere in your application to change this globally in your codebase.",
          "@rubber-duck-software Also since you're a sponsor, feel free to DM me on Twitter @colinhacks whenever you need speedy attention on an issue/PR \ud83d\udc4d",
          "This could be an environment issue I suppose. I have tested this on both node v14.15.4 and node v12.20.2 with the same result. While my initial assessment was that it was a stack trace limit issue, I later found that increasing the stack trace limit did not change the number of frames associated with the error. On my local machine (as well as on our dev/prod servers), it seems that node could not fully trace the origin of the error. \r\n\r\nSo the issue is not that the stack trace is dominated by zod internals as I initially supposed, rather the issue is that node cannot produce a stack trace which escapes Zod internals. It somehow loses the full stack trace, so that the entirety of the stack trace is something like \r\n\r\n```\r\nat new ZodError (/Users/USERNAME/zod/src/ZodError.ts:134:5)\r\nat handleResult (/Users/USERNAME/zod/src/types.ts:76:19)\r\nat ZodString.<anonymous> (/Users/USERNAME/zod/src/types.ts:149:12)\r\nat step (/Users/USERNAME/zod/src/types.ts:59:23)\r\nat Object.next (/Users/USERNAME/zod/src/types.ts:40:53)\r\nat fulfilled (/Users/USERNAME/zod/src/types.ts:31:58)\r\n```\r\n\r\nHere node traced the error to where it was constructed, but could not trace further up. This is not a stack trace limit issue- the entirety of the stack trace is less than 10 lines and we have not reached the original caller.\r\n\r\nHere is my `playground.ts` file to reproduce the issue\r\n\r\n```\r\nimport { z } from \"./index\";\r\n\r\nexport const numToString = z\r\n  .function()\r\n  .args(z.number())\r\n  .returns(z.string().promise())\r\n  .strictImplement(async (arg1) => {\r\n    return arg1 as any;\r\n  });\r\n\r\nfunction callIt() {\r\n  numToString(3);\r\n}\r\n\r\nfunction callIt2() {\r\n  callIt();\r\n}\r\n\r\nfunction callIt3() {\r\n  callIt2();\r\n}\r\n\r\ncallIt3();\r\n```\r\n\r\nNote: on my branch I know get a stack trace like this for the same `playground.ts`. This stack trace does reach the limit of 10 lines.\r\n\r\n```\r\nat new ZodError (/Users/USERNAME/zod/src/ZodError.ts:134:5)\r\nat ZodFunction.<anonymous> (/Users/USERNAME/zod/src/types.ts:2325:23)\r\nat step (/Users/USERNAME/zod/src/types.ts:59:23)\r\nat Object.next (/Users/USERNAME/zod/src/types.ts:40:53)\r\nat /Users/USERNAME/zod/src/types.ts:34:71\r\nat new Promise (<anonymous>)\r\nat __awaiter (/Users/USERNAME/zod/src/types.ts:30:12)\r\nat Object.numToString (/Users/USERNAME/zod/src/types.ts:1761:24)\r\nat callIt (/Users/USERNAME/zod/src/playground.ts:12:3)\r\nat callIt2 (/Users/USERNAME/zod/src/playground.ts:16:3)\r\n```",
          "Ah okay, I'm seeing this behavior with your playground. Thanks for the explanation! Merged in zod@3.7.3.\r\n\r\n"
        ]
      },
      {
        "pr_number": 574,
        "title": "Docs: Add typeof to input/output/infer example",
        "body": "Add `typeof` to input/output/infer example.",
        "html_url": "https://github.com/colinhacks/zod/pull/574",
        "comments": ["Yikes good catch"]
      },
      {
        "pr_number": 576,
        "title": "chore: Export a `SuperRefinement<T>` alias",
        "body": "This is my attempt to add the type alias as described by Colin [here](https://github.com/colinhacks/zod/issues/540#issuecomment-883043680).\r\n\r\n---\r\n\r\n<details>\r\n<summary>Examples of usage with the following schema</summary>\r\n\r\n```ts\r\nimport {z} from 'zod';\r\n\r\n// Current date state:\r\nconst currentMonth = new Date().getUTCMonth() + 1\r\nconst currentYear  = new Date().getUTCFullYear() - 2000\r\n\r\n\r\n// Custom Validations:\r\n// `.refine(inRange(x,y), err)` is like `z.number().min(x, err).max(y, err)`, but works after `transform()`\r\nconst inRange    = (x: number, y: number) => (n: number) => (n >= x && n <= y)\r\nconst r_isDigits = /^[0-9]+$/\r\n\r\n\r\n// Custom Errors:\r\nconst errorRangeMonth = \"Must be a number between 1 and 12\"\r\nconst errorMinYear    = \"Value should not be in the past\"\r\nconst errorRangeCSC   = \"Value should be 3 digits; 4 if American Express\"\r\nconst errorDigits     = \"Expected only numbers\"\r\n\r\n\r\n// Custom Types:\r\nconst zDigitString = z.string().regex(r_isDigits, errorDigits)\r\nconst zStringNumber = zDigitString.transform(s => parseInt(s))\r\n\r\n\r\n// Actual schema\r\nexport const _zCreditCard = z.object({\r\n  cc_number: zDigitString,\r\n  cc_exp_month: zStringNumber.refine(inRange(1, 12), errorRangeMonth),\r\n  cc_exp_year: zStringNumber.superRefine(min(currentYear, errorMinYear)),\r\n  cc_csc: zDigitString.min(3, errorRangeCSC).max(4, errorRangeCSC),\r\n})\r\n```\r\n\r\n</details>\r\n\r\nWith these two `superRefine()` methods:\r\n\r\n```ts\r\n// A `min()` implementation for zDigitString to use as if it were a `z.number().min(n, err)`\r\ntype zMin<T> = (min: T, message?: string) => z.SuperRefinement<T>\r\nconst min: zMin<number> = (min, message) => (val, ctx) => {\r\n  if (val < min) {\r\n    ctx.addIssue({\r\n      code: z.ZodIssueCode.too_small,\r\n      type: \"number\",\r\n      minimum: min,\r\n      inclusive: false,\r\n      message,\r\n    })\r\n  }\r\n}\r\n```\r\n\r\n```ts\r\n// If not inlined into the schema definition, the type cannot be inferred implicitly.\r\n// Explicitly infer and pass to `SuperRefinement<T>` for easier type definition:\r\ntype zOutput = z.infer<typeof _zCreditCard>\r\nconst isNotExpired: z.SuperRefinement<zOutput> = ({cc_exp_month: m, cc_exp_year: y}, ctx) => {\r\n  if (y === currentYear && m <= currentMonth) {\r\n    ctx.addIssue({\r\n      code: z.ZodIssueCode.custom,\r\n      path: ['cc_exp_month'],\r\n      message: `Expiry date cannot be in the past`,\r\n    })\r\n  }\r\n}\r\n\r\nexport const zCreditCard = _zCreditCard.superRefine(isNotExpired)\r\nexport type CreditCard = z.infer<typeof zCreditCard>\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/576",
        "comments": []
      },
      {
        "pr_number": 574,
        "title": "Docs: Add typeof to input/output/infer example",
        "body": "Add `typeof` to input/output/infer example.",
        "html_url": "https://github.com/colinhacks/zod/pull/574",
        "comments": ["Yikes good catch"]
      },
      {
        "pr_number": 578,
        "title": "Add benchmarks for object unions",
        "body": "Local run:\r\n\r\n![System stats](https://user-images.githubusercontent.com/1682194/128748071-fd7a60c6-2135-469c-aab3-c7dffa944ab5.png)\r\n\r\n```\r\n[snip other benchmarks]\r\nz.union: double: valid: a x 2,285,600 ops/sec \u00b14.88% (84 runs sampled)\r\nz.union: double: valid: b x 558,052 ops/sec \u00b15.98% (80 runs sampled)\r\nz.union: double: invalid: null x 18,932 ops/sec \u00b112.05% (62 runs sampled)\r\nz.union: double: invalid: wrong shape x 16,755 ops/sec \u00b14.62% (74 runs sampled)\r\nz.union: many: valid: a x 2,090,784 ops/sec \u00b17.77% (81 runs sampled)\r\nz.union: many: valid: c x 342,439 ops/sec \u00b16.93% (80 runs sampled)\r\nz.union: many: invalid: null x 12,029 ops/sec \u00b11.76% (86 runs sampled)\r\nz.union: many: invalid: wrong shape x 11,738 ops/sec \u00b11.84% (91 runs sampled)\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/578",
        "comments": [
          "Interesting that getting a miss on the first member of the union is so expensive, and seems to get more expensive the further \"away\" the correct member is from the first one.",
          "I think we can/should(/I might take a swing at) do something similar to this suggestion: https://github.com/colinhacks/zod/issues/311#issuecomment-818266883\r\n\r\nIt'd be nice to be able to tell Zod which field was the discriminant so we didn't have to run the full schema parsing on each schema at runtime."
        ]
      },
      {
        "pr_number": 578,
        "title": "Add benchmarks for object unions",
        "body": "Local run:\r\n\r\n![System stats](https://user-images.githubusercontent.com/1682194/128748071-fd7a60c6-2135-469c-aab3-c7dffa944ab5.png)\r\n\r\n```\r\n[snip other benchmarks]\r\nz.union: double: valid: a x 2,285,600 ops/sec \u00b14.88% (84 runs sampled)\r\nz.union: double: valid: b x 558,052 ops/sec \u00b15.98% (80 runs sampled)\r\nz.union: double: invalid: null x 18,932 ops/sec \u00b112.05% (62 runs sampled)\r\nz.union: double: invalid: wrong shape x 16,755 ops/sec \u00b14.62% (74 runs sampled)\r\nz.union: many: valid: a x 2,090,784 ops/sec \u00b17.77% (81 runs sampled)\r\nz.union: many: valid: c x 342,439 ops/sec \u00b16.93% (80 runs sampled)\r\nz.union: many: invalid: null x 12,029 ops/sec \u00b11.76% (86 runs sampled)\r\nz.union: many: invalid: wrong shape x 11,738 ops/sec \u00b11.84% (91 runs sampled)\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/578",
        "comments": [
          "Interesting that getting a miss on the first member of the union is so expensive, and seems to get more expensive the further \"away\" the correct member is from the first one.",
          "I think we can/should(/I might take a swing at) do something similar to this suggestion: https://github.com/colinhacks/zod/issues/311#issuecomment-818266883\r\n\r\nIt'd be nice to be able to tell Zod which field was the discriminant so we didn't have to run the full schema parsing on each schema at runtime."
        ]
      },
      {
        "pr_number": 578,
        "title": "Add benchmarks for object unions",
        "body": "Local run:\r\n\r\n![System stats](https://user-images.githubusercontent.com/1682194/128748071-fd7a60c6-2135-469c-aab3-c7dffa944ab5.png)\r\n\r\n```\r\n[snip other benchmarks]\r\nz.union: double: valid: a x 2,285,600 ops/sec \u00b14.88% (84 runs sampled)\r\nz.union: double: valid: b x 558,052 ops/sec \u00b15.98% (80 runs sampled)\r\nz.union: double: invalid: null x 18,932 ops/sec \u00b112.05% (62 runs sampled)\r\nz.union: double: invalid: wrong shape x 16,755 ops/sec \u00b14.62% (74 runs sampled)\r\nz.union: many: valid: a x 2,090,784 ops/sec \u00b17.77% (81 runs sampled)\r\nz.union: many: valid: c x 342,439 ops/sec \u00b16.93% (80 runs sampled)\r\nz.union: many: invalid: null x 12,029 ops/sec \u00b11.76% (86 runs sampled)\r\nz.union: many: invalid: wrong shape x 11,738 ops/sec \u00b11.84% (91 runs sampled)\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/578",
        "comments": [
          "Interesting that getting a miss on the first member of the union is so expensive, and seems to get more expensive the further \"away\" the correct member is from the first one.",
          "I think we can/should(/I might take a swing at) do something similar to this suggestion: https://github.com/colinhacks/zod/issues/311#issuecomment-818266883\r\n\r\nIt'd be nice to be able to tell Zod which field was the discriminant so we didn't have to run the full schema parsing on each schema at runtime."
        ]
      },
      {
        "pr_number": 578,
        "title": "Add benchmarks for object unions",
        "body": "Local run:\r\n\r\n![System stats](https://user-images.githubusercontent.com/1682194/128748071-fd7a60c6-2135-469c-aab3-c7dffa944ab5.png)\r\n\r\n```\r\n[snip other benchmarks]\r\nz.union: double: valid: a x 2,285,600 ops/sec \u00b14.88% (84 runs sampled)\r\nz.union: double: valid: b x 558,052 ops/sec \u00b15.98% (80 runs sampled)\r\nz.union: double: invalid: null x 18,932 ops/sec \u00b112.05% (62 runs sampled)\r\nz.union: double: invalid: wrong shape x 16,755 ops/sec \u00b14.62% (74 runs sampled)\r\nz.union: many: valid: a x 2,090,784 ops/sec \u00b17.77% (81 runs sampled)\r\nz.union: many: valid: c x 342,439 ops/sec \u00b16.93% (80 runs sampled)\r\nz.union: many: invalid: null x 12,029 ops/sec \u00b11.76% (86 runs sampled)\r\nz.union: many: invalid: wrong shape x 11,738 ops/sec \u00b11.84% (91 runs sampled)\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/578",
        "comments": [
          "Interesting that getting a miss on the first member of the union is so expensive, and seems to get more expensive the further \"away\" the correct member is from the first one.",
          "I think we can/should(/I might take a swing at) do something similar to this suggestion: https://github.com/colinhacks/zod/issues/311#issuecomment-818266883\r\n\r\nIt'd be nice to be able to tell Zod which field was the discriminant so we didn't have to run the full schema parsing on each schema at runtime."
        ]
      },
      {
        "pr_number": 583,
        "title": "Added zod-to-json-schema to ecosystem",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/583",
        "comments": []
      },
      {
        "pr_number": 583,
        "title": "Added zod-to-json-schema to ecosystem",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/583",
        "comments": []
      },
      {
        "pr_number": 583,
        "title": "Added zod-to-json-schema to ecosystem",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/583",
        "comments": []
      },
      {
        "pr_number": 588,
        "title": "Add json to zod in ecosystem",
        "body": "Also added a link to the live page for the converter",
        "html_url": "https://github.com/colinhacks/zod/pull/588",
        "comments": []
      },
      {
        "pr_number": 588,
        "title": "Add json to zod in ecosystem",
        "body": "Also added a link to the live page for the converter",
        "html_url": "https://github.com/colinhacks/zod/pull/588",
        "comments": []
      },
      {
        "pr_number": 588,
        "title": "Add json to zod in ecosystem",
        "body": "Also added a link to the live page for the converter",
        "html_url": "https://github.com/colinhacks/zod/pull/588",
        "comments": []
      },
      {
        "pr_number": 578,
        "title": "Add benchmarks for object unions",
        "body": "Local run:\r\n\r\n![System stats](https://user-images.githubusercontent.com/1682194/128748071-fd7a60c6-2135-469c-aab3-c7dffa944ab5.png)\r\n\r\n```\r\n[snip other benchmarks]\r\nz.union: double: valid: a x 2,285,600 ops/sec \u00b14.88% (84 runs sampled)\r\nz.union: double: valid: b x 558,052 ops/sec \u00b15.98% (80 runs sampled)\r\nz.union: double: invalid: null x 18,932 ops/sec \u00b112.05% (62 runs sampled)\r\nz.union: double: invalid: wrong shape x 16,755 ops/sec \u00b14.62% (74 runs sampled)\r\nz.union: many: valid: a x 2,090,784 ops/sec \u00b17.77% (81 runs sampled)\r\nz.union: many: valid: c x 342,439 ops/sec \u00b16.93% (80 runs sampled)\r\nz.union: many: invalid: null x 12,029 ops/sec \u00b11.76% (86 runs sampled)\r\nz.union: many: invalid: wrong shape x 11,738 ops/sec \u00b11.84% (91 runs sampled)\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/578",
        "comments": [
          "Interesting that getting a miss on the first member of the union is so expensive, and seems to get more expensive the further \"away\" the correct member is from the first one.",
          "I think we can/should(/I might take a swing at) do something similar to this suggestion: https://github.com/colinhacks/zod/issues/311#issuecomment-818266883\r\n\r\nIt'd be nice to be able to tell Zod which field was the discriminant so we didn't have to run the full schema parsing on each schema at runtime."
        ]
      },
      {
        "pr_number": 578,
        "title": "Add benchmarks for object unions",
        "body": "Local run:\r\n\r\n![System stats](https://user-images.githubusercontent.com/1682194/128748071-fd7a60c6-2135-469c-aab3-c7dffa944ab5.png)\r\n\r\n```\r\n[snip other benchmarks]\r\nz.union: double: valid: a x 2,285,600 ops/sec \u00b14.88% (84 runs sampled)\r\nz.union: double: valid: b x 558,052 ops/sec \u00b15.98% (80 runs sampled)\r\nz.union: double: invalid: null x 18,932 ops/sec \u00b112.05% (62 runs sampled)\r\nz.union: double: invalid: wrong shape x 16,755 ops/sec \u00b14.62% (74 runs sampled)\r\nz.union: many: valid: a x 2,090,784 ops/sec \u00b17.77% (81 runs sampled)\r\nz.union: many: valid: c x 342,439 ops/sec \u00b16.93% (80 runs sampled)\r\nz.union: many: invalid: null x 12,029 ops/sec \u00b11.76% (86 runs sampled)\r\nz.union: many: invalid: wrong shape x 11,738 ops/sec \u00b11.84% (91 runs sampled)\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/578",
        "comments": [
          "Interesting that getting a miss on the first member of the union is so expensive, and seems to get more expensive the further \"away\" the correct member is from the first one.",
          "I think we can/should(/I might take a swing at) do something similar to this suggestion: https://github.com/colinhacks/zod/issues/311#issuecomment-818266883\r\n\r\nIt'd be nice to be able to tell Zod which field was the discriminant so we didn't have to run the full schema parsing on each schema at runtime."
        ]
      },
      {
        "pr_number": 588,
        "title": "Add json to zod in ecosystem",
        "body": "Also added a link to the live page for the converter",
        "html_url": "https://github.com/colinhacks/zod/pull/588",
        "comments": []
      },
      {
        "pr_number": 576,
        "title": "chore: Export a `SuperRefinement<T>` alias",
        "body": "This is my attempt to add the type alias as described by Colin [here](https://github.com/colinhacks/zod/issues/540#issuecomment-883043680).\r\n\r\n---\r\n\r\n<details>\r\n<summary>Examples of usage with the following schema</summary>\r\n\r\n```ts\r\nimport {z} from 'zod';\r\n\r\n// Current date state:\r\nconst currentMonth = new Date().getUTCMonth() + 1\r\nconst currentYear  = new Date().getUTCFullYear() - 2000\r\n\r\n\r\n// Custom Validations:\r\n// `.refine(inRange(x,y), err)` is like `z.number().min(x, err).max(y, err)`, but works after `transform()`\r\nconst inRange    = (x: number, y: number) => (n: number) => (n >= x && n <= y)\r\nconst r_isDigits = /^[0-9]+$/\r\n\r\n\r\n// Custom Errors:\r\nconst errorRangeMonth = \"Must be a number between 1 and 12\"\r\nconst errorMinYear    = \"Value should not be in the past\"\r\nconst errorRangeCSC   = \"Value should be 3 digits; 4 if American Express\"\r\nconst errorDigits     = \"Expected only numbers\"\r\n\r\n\r\n// Custom Types:\r\nconst zDigitString = z.string().regex(r_isDigits, errorDigits)\r\nconst zStringNumber = zDigitString.transform(s => parseInt(s))\r\n\r\n\r\n// Actual schema\r\nexport const _zCreditCard = z.object({\r\n  cc_number: zDigitString,\r\n  cc_exp_month: zStringNumber.refine(inRange(1, 12), errorRangeMonth),\r\n  cc_exp_year: zStringNumber.superRefine(min(currentYear, errorMinYear)),\r\n  cc_csc: zDigitString.min(3, errorRangeCSC).max(4, errorRangeCSC),\r\n})\r\n```\r\n\r\n</details>\r\n\r\nWith these two `superRefine()` methods:\r\n\r\n```ts\r\n// A `min()` implementation for zDigitString to use as if it were a `z.number().min(n, err)`\r\ntype zMin<T> = (min: T, message?: string) => z.SuperRefinement<T>\r\nconst min: zMin<number> = (min, message) => (val, ctx) => {\r\n  if (val < min) {\r\n    ctx.addIssue({\r\n      code: z.ZodIssueCode.too_small,\r\n      type: \"number\",\r\n      minimum: min,\r\n      inclusive: false,\r\n      message,\r\n    })\r\n  }\r\n}\r\n```\r\n\r\n```ts\r\n// If not inlined into the schema definition, the type cannot be inferred implicitly.\r\n// Explicitly infer and pass to `SuperRefinement<T>` for easier type definition:\r\ntype zOutput = z.infer<typeof _zCreditCard>\r\nconst isNotExpired: z.SuperRefinement<zOutput> = ({cc_exp_month: m, cc_exp_year: y}, ctx) => {\r\n  if (y === currentYear && m <= currentMonth) {\r\n    ctx.addIssue({\r\n      code: z.ZodIssueCode.custom,\r\n      path: ['cc_exp_month'],\r\n      message: `Expiry date cannot be in the past`,\r\n    })\r\n  }\r\n}\r\n\r\nexport const zCreditCard = _zCreditCard.superRefine(isNotExpired)\r\nexport type CreditCard = z.infer<typeof zCreditCard>\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/576",
        "comments": []
      },
      {
        "pr_number": 593,
        "title": "Fix url for json-to-zod converter",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/593",
        "comments": []
      },
      {
        "pr_number": 593,
        "title": "Fix url for json-to-zod converter",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/593",
        "comments": []
      },
      {
        "pr_number": 596,
        "title": "fix typo",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/596",
        "comments": []
      },
      {
        "pr_number": 596,
        "title": "fix typo",
        "body": null,
        "html_url": "https://github.com/colinhacks/zod/pull/596",
        "comments": []
      },
      {
        "pr_number": 573,
        "title": "Stack Trace in Async Zod Function",
        "body": "Git Issue #572",
        "html_url": "https://github.com/colinhacks/zod/pull/573",
        "comments": [
          "This would be great to get merged in order to improve the stack traces we get when return type parsing fails.  We're in the midst of migrating to Zod, but the stack traces we get in sentry.io are not enough to troubleshoot with.",
          "This is a blocking issue for Marcato. We would like to use Zod in more places in our backend for runtime type safety, but runtime type safety is only helpful if we can track down the issues quickly. Currently we have an error with stack trace \r\n\r\n```\r\nZodError: [\r\n  {\r\n    \"code\": \"invalid_arguments\",\r\n    \"argumentsError\": {\r\n      \"issues\": [\r\n        {\r\n          \"code\": \"invalid_type\",\r\n          \"expected\": \"string\",\r\n          \"received\": \"undefined\",\r\n          \"path\": [\r\n            0,\r\n            \"filters\",\r\n...\r\n  File \"/var/app/current/node_modules/zod/lib/ZodError.js\", line 75, col 28, in new ZodError\r\n    var _this = _super.call(this) || this;\r\n  File \"/var/app/current/node_modules/zod/lib/types.js\", line 1747, col 23, in handleArgs\r\n    throw new ZodError_1.ZodError([issue]);\r\n  File \"/var/app/current/node_modules/zod/lib/types.js\", line 1778, col 49, in ZodFunction.<anonymous>\r\n    parsedArgs = _a.apply(void 0, _b.concat([_e.sent()]));\r\n  File \"/var/app/current/node_modules/zod/lib/types.js\", line 59, col 23, in step\r\n    op = body.call(thisArg, _);\r\n  File \"/var/app/current/node_modules/zod/lib/types.js\", line 40, col 53, in Object.next\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n  File \"/var/app/current/node_modules/zod/lib/types.js\", line 31, col 58, in fulfilled\r\n    function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n\r\n```\r\n\r\nThere is no telling where in our code base this error was thrown. It is useless to have an error message like this. Please merge this PR or recommend revisions to it soon.  ",
          "@rubber-duck-software \r\n\r\n> Please merge this PR or recommend revisions to it soon.\r\n\r\nThanks for taking the time to PR \u2014 I wish I knew enough about the async validation code to feel comfortable merging this or suggesting updates. In the meantime, I don't think there is anything that should stop you from publishing your own fork and working with us to get your changes upstreamed, so I don't think you have to feel like this really blocks adoption.",
          "Sorry @rubber-duck-software, didn't mean to leave this so long. \r\n\r\nThe reason I haven't merged it is that I don't really know what's happening. Is the goal just to shorten the number of stack frames that are internal to Zod? Is the problem that the stack trace is getting truncated before you can see which LOC in your codebase threw the error? \r\n\r\nIn my testing, your version only decreased the number of Zod-internal stack frames by one. Could you provide a code snippet + associated stack traces where this isn't the case? It's possible the complexity of the input/returnType schemas are relevant here (I was using simple schemas in my tests).\r\n\r\nFinally - if the stack trace is getting truncated before they're useful, I recommend increasing the stack trace limit. The default is 10 which is why you may not be getting as much detail as you need to properly debug. You can just execute `Error.stackTraceLimit = 100` anywhere in your application to change this globally in your codebase.",
          "@rubber-duck-software Also since you're a sponsor, feel free to DM me on Twitter @colinhacks whenever you need speedy attention on an issue/PR \ud83d\udc4d",
          "This could be an environment issue I suppose. I have tested this on both node v14.15.4 and node v12.20.2 with the same result. While my initial assessment was that it was a stack trace limit issue, I later found that increasing the stack trace limit did not change the number of frames associated with the error. On my local machine (as well as on our dev/prod servers), it seems that node could not fully trace the origin of the error. \r\n\r\nSo the issue is not that the stack trace is dominated by zod internals as I initially supposed, rather the issue is that node cannot produce a stack trace which escapes Zod internals. It somehow loses the full stack trace, so that the entirety of the stack trace is something like \r\n\r\n```\r\nat new ZodError (/Users/USERNAME/zod/src/ZodError.ts:134:5)\r\nat handleResult (/Users/USERNAME/zod/src/types.ts:76:19)\r\nat ZodString.<anonymous> (/Users/USERNAME/zod/src/types.ts:149:12)\r\nat step (/Users/USERNAME/zod/src/types.ts:59:23)\r\nat Object.next (/Users/USERNAME/zod/src/types.ts:40:53)\r\nat fulfilled (/Users/USERNAME/zod/src/types.ts:31:58)\r\n```\r\n\r\nHere node traced the error to where it was constructed, but could not trace further up. This is not a stack trace limit issue- the entirety of the stack trace is less than 10 lines and we have not reached the original caller.\r\n\r\nHere is my `playground.ts` file to reproduce the issue\r\n\r\n```\r\nimport { z } from \"./index\";\r\n\r\nexport const numToString = z\r\n  .function()\r\n  .args(z.number())\r\n  .returns(z.string().promise())\r\n  .strictImplement(async (arg1) => {\r\n    return arg1 as any;\r\n  });\r\n\r\nfunction callIt() {\r\n  numToString(3);\r\n}\r\n\r\nfunction callIt2() {\r\n  callIt();\r\n}\r\n\r\nfunction callIt3() {\r\n  callIt2();\r\n}\r\n\r\ncallIt3();\r\n```\r\n\r\nNote: on my branch I know get a stack trace like this for the same `playground.ts`. This stack trace does reach the limit of 10 lines.\r\n\r\n```\r\nat new ZodError (/Users/USERNAME/zod/src/ZodError.ts:134:5)\r\nat ZodFunction.<anonymous> (/Users/USERNAME/zod/src/types.ts:2325:23)\r\nat step (/Users/USERNAME/zod/src/types.ts:59:23)\r\nat Object.next (/Users/USERNAME/zod/src/types.ts:40:53)\r\nat /Users/USERNAME/zod/src/types.ts:34:71\r\nat new Promise (<anonymous>)\r\nat __awaiter (/Users/USERNAME/zod/src/types.ts:30:12)\r\nat Object.numToString (/Users/USERNAME/zod/src/types.ts:1761:24)\r\nat callIt (/Users/USERNAME/zod/src/playground.ts:12:3)\r\nat callIt2 (/Users/USERNAME/zod/src/playground.ts:16:3)\r\n```",
          "Ah okay, I'm seeing this behavior with your playground. Thanks for the explanation! Merged in zod@3.7.3.\r\n\r\n"
        ]
      }
    ],
    "v3.7.0": [],
    "v3.6.1": [
      {
        "pr_number": 544,
        "title": "docs: \u270f\ufe0f add Chinese readme file",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/544",
        "comments": []
      },
      {
        "pr_number": 545,
        "title": "Fix getter for maxLength",
        "body": "Fix getter on ZodString for maxLength, changing the def.checks from kind min to max",
        "html_url": "https://github.com/colinhacks/zod/pull/545",
        "comments": ["Doh \ud83e\udd26\u200d\u2642\ufe0f"]
      },
      {
        "pr_number": 544,
        "title": "docs: \u270f\ufe0f add Chinese readme file",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/544",
        "comments": []
      },
      {
        "pr_number": 545,
        "title": "Fix getter for maxLength",
        "body": "Fix getter on ZodString for maxLength, changing the def.checks from kind min to max",
        "html_url": "https://github.com/colinhacks/zod/pull/545",
        "comments": ["Doh \ud83e\udd26\u200d\u2642\ufe0f"]
      },
      {
        "pr_number": 547,
        "title": "Support legacy browsers",
        "body": "This PR adds ponyfills for `Object.keys`, `Object.setPrototypeOf` (duplicate of https://github.com/colinhacks/zod/pull/141 and https://github.com/colinhacks/zod/pull/478) and other functions which fixes Zod in legacy browsers like ie11.",
        "html_url": "https://github.com/colinhacks/zod/pull/547",
        "comments": [
          "Instead of banning these explicit unsupported features, could we leverage https://github.com/amilajack/eslint-plugin-compat to make it explicit what we plan on supporting? There are plenty of other things that would break IE11 compatibility and trying to detect each of those things seems a bit tedious and error-prone. I'm also not sure that I totally agree that IE11 compatibility should be our responsibility, but I know that's a very debatable topic.",
          "Merged in zod@3.5.4. \r\n\r\nHappy to merge this now even if we don't have a great mechanism for catching future incompatibilities. As with most OSS, IE11 compatibility in Zod is best effort, and investing time in a linting solution for checking browser compatibility isn't worth it. Though if someone takes it upon themselves to do so I'd happily merge.\r\n\r\n@mad-gooze thanks for doing this! Great PR."
        ]
      },
      {
        "pr_number": 548,
        "title": "Add promise() to ZodType",
        "body": "Git Issue #537",
        "html_url": "https://github.com/colinhacks/zod/pull/548",
        "comments": [
          "@rubber-duck-software\r\n\r\nThe pre-commit hook should've written a few more files (specifically Deno stuff), so I'm not sure if that's something that @colinhacks usually does when merging PRs, but we probably want to get those before we can merge this.\r\n\r\nWould you mind updating the relevant part of the README as well?"
        ]
      },
      {
        "pr_number": 548,
        "title": "Add promise() to ZodType",
        "body": "Git Issue #537",
        "html_url": "https://github.com/colinhacks/zod/pull/548",
        "comments": [
          "@rubber-duck-software\r\n\r\nThe pre-commit hook should've written a few more files (specifically Deno stuff), so I'm not sure if that's something that @colinhacks usually does when merging PRs, but we probably want to get those before we can merge this.\r\n\r\nWould you mind updating the relevant part of the README as well?"
        ]
      },
      {
        "pr_number": 548,
        "title": "Add promise() to ZodType",
        "body": "Git Issue #537",
        "html_url": "https://github.com/colinhacks/zod/pull/548",
        "comments": [
          "@rubber-duck-software\r\n\r\nThe pre-commit hook should've written a few more files (specifically Deno stuff), so I'm not sure if that's something that @colinhacks usually does when merging PRs, but we probably want to get those before we can merge this.\r\n\r\nWould you mind updating the relevant part of the README as well?"
        ]
      },
      {
        "pr_number": 557,
        "title": "Fix isInvalid equality check",
        "body": "`===` comparisons only works when Zod is installed once in a monorepo setup with multiple packages using Zod.\r\n\r\nThis PR changes it to use structural type checking rather than referential equality checking.\r\n\r\nThe test reproduces the issue (i.e. fails before applying the change).\r\n\r\nCloses #556",
        "html_url": "https://github.com/colinhacks/zod/pull/557",
        "comments": [
          "@krivachy Nice work sleuthing this. I'll double-check the benchmarks to ensure it's not a big regression, but I imagine it shouldn't be a noticeable increase in checking object reference equality vs checking an object's property boolean state. I'll comment here when I get some benchmarking results back.",
          "Thanks :+1: Looking forward to have this PR in for the next release :)",
          "I didn't notice any performance regressions on the benchmarks, so I think this is good to go!",
          "@scotttrinh This isn't super urgent for me, but just wondering why you haven't merged the PR yet? Does someone else also need to review this PR and merge it?",
          "@krivachy I was hoping someone else would do the actual merge since I haven't done it since becoming a collaborator, but I'm not sure why I'm hesitant! I'll merge it now, thanks for the ping.",
          "Thanks! This is a tiny PR, so shouldn't wreck havoc as your first merge \ud83e\udd23 ",
          "@scotttrinh don't be hesitant! really glad this got merged. "
        ]
      },
      {
        "pr_number": 548,
        "title": "Add promise() to ZodType",
        "body": "Git Issue #537",
        "html_url": "https://github.com/colinhacks/zod/pull/548",
        "comments": [
          "@rubber-duck-software\r\n\r\nThe pre-commit hook should've written a few more files (specifically Deno stuff), so I'm not sure if that's something that @colinhacks usually does when merging PRs, but we probably want to get those before we can merge this.\r\n\r\nWould you mind updating the relevant part of the README as well?"
        ]
      },
      {
        "pr_number": 557,
        "title": "Fix isInvalid equality check",
        "body": "`===` comparisons only works when Zod is installed once in a monorepo setup with multiple packages using Zod.\r\n\r\nThis PR changes it to use structural type checking rather than referential equality checking.\r\n\r\nThe test reproduces the issue (i.e. fails before applying the change).\r\n\r\nCloses #556",
        "html_url": "https://github.com/colinhacks/zod/pull/557",
        "comments": [
          "@krivachy Nice work sleuthing this. I'll double-check the benchmarks to ensure it's not a big regression, but I imagine it shouldn't be a noticeable increase in checking object reference equality vs checking an object's property boolean state. I'll comment here when I get some benchmarking results back.",
          "Thanks :+1: Looking forward to have this PR in for the next release :)",
          "I didn't notice any performance regressions on the benchmarks, so I think this is good to go!",
          "@scotttrinh This isn't super urgent for me, but just wondering why you haven't merged the PR yet? Does someone else also need to review this PR and merge it?",
          "@krivachy I was hoping someone else would do the actual merge since I haven't done it since becoming a collaborator, but I'm not sure why I'm hesitant! I'll merge it now, thanks for the ping.",
          "Thanks! This is a tiny PR, so shouldn't wreck havoc as your first merge \ud83e\udd23 ",
          "@scotttrinh don't be hesitant! really glad this got merged. "
        ]
      },
      {
        "pr_number": 565,
        "title": "Add flatMap capability to errors",
        "body": "Proposed fix for #564",
        "html_url": "https://github.com/colinhacks/zod/pull/565",
        "comments": [
          "Really great idea! Instead of introducing a new method, I just added this functionality inside the original `flatten` method. I think it's a simpler API and avoids duplicative code. \r\n\r\nPlus `flatMap` means something [very specific](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap) in JS, and this doesn't perform a \"flatMap\" operation as most people understand it. \r\n\r\nGreat PR! Thanks for adding documentation too \ud83e\udd19"
        ]
      },
      {
        "pr_number": 565,
        "title": "Add flatMap capability to errors",
        "body": "Proposed fix for #564",
        "html_url": "https://github.com/colinhacks/zod/pull/565",
        "comments": [
          "Really great idea! Instead of introducing a new method, I just added this functionality inside the original `flatten` method. I think it's a simpler API and avoids duplicative code. \r\n\r\nPlus `flatMap` means something [very specific](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap) in JS, and this doesn't perform a \"flatMap\" operation as most people understand it. \r\n\r\nGreat PR! Thanks for adding documentation too \ud83e\udd19"
        ]
      },
      {
        "pr_number": 547,
        "title": "Support legacy browsers",
        "body": "This PR adds ponyfills for `Object.keys`, `Object.setPrototypeOf` (duplicate of https://github.com/colinhacks/zod/pull/141 and https://github.com/colinhacks/zod/pull/478) and other functions which fixes Zod in legacy browsers like ie11.",
        "html_url": "https://github.com/colinhacks/zod/pull/547",
        "comments": [
          "Instead of banning these explicit unsupported features, could we leverage https://github.com/amilajack/eslint-plugin-compat to make it explicit what we plan on supporting? There are plenty of other things that would break IE11 compatibility and trying to detect each of those things seems a bit tedious and error-prone. I'm also not sure that I totally agree that IE11 compatibility should be our responsibility, but I know that's a very debatable topic.",
          "Merged in zod@3.5.4. \r\n\r\nHappy to merge this now even if we don't have a great mechanism for catching future incompatibilities. As with most OSS, IE11 compatibility in Zod is best effort, and investing time in a linting solution for checking browser compatibility isn't worth it. Though if someone takes it upon themselves to do so I'd happily merge.\r\n\r\n@mad-gooze thanks for doing this! Great PR."
        ]
      },
      {
        "pr_number": 526,
        "title": "Fix z.void() to reject null",
        "body": "`z.void()` previously accepted `null` or `undefined`, but the TypeScript `void` type is only assignable from `undefined` (unless `strictNullChecks` is `false`, in which case every type is assignable from `null` regardless).\r\n\r\nThis unsoundness could be observed as follows:\r\n\r\n```js\r\nconst x = z.string().or(z.void()).parse(null);\r\nif (x !== undefined) {\r\n  // TypeScript infers x is a string, but it\u2019s actually null\r\n  x.trim(); // oops\r\n}\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/526",
        "comments": [
          "I wonder if the better solution wouldn't be to fix `z.void()` to in fact reject `null`. This would be a breaking change however. @colinhacks yay or nay?",
          "Thanks for pointing this out @andersk, never considered this use case. I must have been in a rush when I read the TS docs about `void` because clearly `null` shouldn't be an accepted value for `z.void`. As @lilred proposes, Zod's runtime behavior should conform to TypeScript's behavior _in strict mode_ (as it does in many other cases). @andersk would you be down to update this PR?"
        ]
      }
    ],
    "v3.5.1": [
      {
        "pr_number": 527,
        "title": "README: Fix broken fragment links",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/527",
        "comments": ["Thank you Anders!"]
      },
      {
        "pr_number": 527,
        "title": "README: Fix broken fragment links",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/527",
        "comments": ["Thank you Anders!"]
      }
    ],
    "v3.5.0": [
      {
        "pr_number": 523,
        "title": "Add type discriminator to zod type",
        "body": "Note: Unsure of the handling around ZodNonEmptyArray. ",
        "html_url": "https://github.com/colinhacks/zod/pull/523",
        "comments": [
          "Great PR, merged in 3.5.0 with a few changes\r\n\r\n- I added a `typeName` to `ZodEffects`, this was missing which broke the discriminated union over `ZodFirstPartyTypes`\r\n- Added a unit test in `__tests__/firstparty.test.ts`\r\n- Switched the string literals to an enum: `ZodFirstPartyTypeKind`\r\n\r\nYou can now check the type like so:\r\n\r\n```ts\r\nconst myType = z.string() as z.ZodFirstPartySchemaTypes;\r\nconst def = myType._def;\r\nswitch (def.typeName) {\r\n  case \"ZodString\":\r\n    def; // ZodSringDef;\r\n    break;\r\n  // ...\r\n}\r\n```\r\n"
        ]
      },
      {
        "pr_number": 523,
        "title": "Add type discriminator to zod type",
        "body": "Note: Unsure of the handling around ZodNonEmptyArray. ",
        "html_url": "https://github.com/colinhacks/zod/pull/523",
        "comments": [
          "Great PR, merged in 3.5.0 with a few changes\r\n\r\n- I added a `typeName` to `ZodEffects`, this was missing which broke the discriminated union over `ZodFirstPartyTypes`\r\n- Added a unit test in `__tests__/firstparty.test.ts`\r\n- Switched the string literals to an enum: `ZodFirstPartyTypeKind`\r\n\r\nYou can now check the type like so:\r\n\r\n```ts\r\nconst myType = z.string() as z.ZodFirstPartySchemaTypes;\r\nconst def = myType._def;\r\nswitch (def.typeName) {\r\n  case \"ZodString\":\r\n    def; // ZodSringDef;\r\n    break;\r\n  // ...\r\n}\r\n```\r\n"
        ]
      }
    ],
    "v3.4.2": [],
    "v3.4.0": [
      {
        "pr_number": 431,
        "title": "Add benchmarking for parser",
        "body": "As part of the work to help improve zod's performance, it seems to me like the first step is to add some benchmarking to track performance as we make changes. What's measured improves and all that.\r\n\r\nAdded a few really basic benchmarks and will want to expand this before landing it, but wanted to get some early feedback on this approach from @colinhacks and the rest of the community. It's also possible that we want these benchmarks to live \"outside\" of the code, so that it can import multiple versions to track changes, benchmark other similar libraries, incorporate other tools, etc.\r\n\r\nTODO:\r\n\r\n- [ ] Schemas\r\n  - [x] String\r\n  - [ ] Object\r\n    - [x] Simple flat objects\r\n    - [ ] Nested objects\r\n    - [ ] Arrays of objects\r\n  - [ ] etc..\r\n- [ ] Documentation\r\n- [ ] Add package.json script for running\r\n- [ ] Collect results somewhere\r\n- [ ] Add running infrastructure\r\n\r\n===\r\n\r\n## Current benchmarks:\r\n\r\n```\r\nz.string: empty string x 39,259 ops/sec \u00b13.98% (77 runs sampled)\r\nz.string: short string x 40,917 ops/sec \u00b12.43% (77 runs sampled)\r\nz.string: long string x 40,562 ops/sec \u00b12.54% (84 runs sampled)\r\nz.string: invalid: null x 32,975 ops/sec \u00b13.76% (82 runs sampled)\r\nz.string: manual parser: long x 770,761,225 ops/sec \u00b10.40% (95 runs sampled)\r\n\r\nz.object: empty: valid x 25,292 ops/sec \u00b12.01% (77 runs sampled)\r\nz.object: empty: valid: extra keys x 24,640 ops/sec \u00b12.69% (89 runs sampled)\r\nz.object: empty: invalid: null x 35,210 ops/sec \u00b12.20% (86 runs sampled)\r\nz.object: short: valid x 13,420 ops/sec \u00b13.00% (86 runs sampled)\r\nz.object: short: valid: extra keys x 13,429 ops/sec \u00b12.00% (85 runs sampled)\r\nz.object: short: invalid: null x 35,542 ops/sec \u00b13.11% (88 runs sampled)\r\nz.object: long: valid x 7,155 ops/sec \u00b12.96% (81 runs sampled)\r\nz.object: long: valid: extra keys x 7,292 ops/sec \u00b12.29% (87 runs sampled)\r\nz.object: long: invalid: null x 35,468 ops/sec \u00b13.27% (84 runs sampled)\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/431",
        "comments": []
      },
      {
        "pr_number": 431,
        "title": "Add benchmarking for parser",
        "body": "As part of the work to help improve zod's performance, it seems to me like the first step is to add some benchmarking to track performance as we make changes. What's measured improves and all that.\r\n\r\nAdded a few really basic benchmarks and will want to expand this before landing it, but wanted to get some early feedback on this approach from @colinhacks and the rest of the community. It's also possible that we want these benchmarks to live \"outside\" of the code, so that it can import multiple versions to track changes, benchmark other similar libraries, incorporate other tools, etc.\r\n\r\nTODO:\r\n\r\n- [ ] Schemas\r\n  - [x] String\r\n  - [ ] Object\r\n    - [x] Simple flat objects\r\n    - [ ] Nested objects\r\n    - [ ] Arrays of objects\r\n  - [ ] etc..\r\n- [ ] Documentation\r\n- [ ] Add package.json script for running\r\n- [ ] Collect results somewhere\r\n- [ ] Add running infrastructure\r\n\r\n===\r\n\r\n## Current benchmarks:\r\n\r\n```\r\nz.string: empty string x 39,259 ops/sec \u00b13.98% (77 runs sampled)\r\nz.string: short string x 40,917 ops/sec \u00b12.43% (77 runs sampled)\r\nz.string: long string x 40,562 ops/sec \u00b12.54% (84 runs sampled)\r\nz.string: invalid: null x 32,975 ops/sec \u00b13.76% (82 runs sampled)\r\nz.string: manual parser: long x 770,761,225 ops/sec \u00b10.40% (95 runs sampled)\r\n\r\nz.object: empty: valid x 25,292 ops/sec \u00b12.01% (77 runs sampled)\r\nz.object: empty: valid: extra keys x 24,640 ops/sec \u00b12.69% (89 runs sampled)\r\nz.object: empty: invalid: null x 35,210 ops/sec \u00b12.20% (86 runs sampled)\r\nz.object: short: valid x 13,420 ops/sec \u00b13.00% (86 runs sampled)\r\nz.object: short: valid: extra keys x 13,429 ops/sec \u00b12.00% (85 runs sampled)\r\nz.object: short: invalid: null x 35,542 ops/sec \u00b13.11% (88 runs sampled)\r\nz.object: long: valid x 7,155 ops/sec \u00b12.96% (81 runs sampled)\r\nz.object: long: valid: extra keys x 7,292 ops/sec \u00b12.29% (87 runs sampled)\r\nz.object: long: invalid: null x 35,468 ops/sec \u00b13.27% (84 runs sampled)\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/431",
        "comments": []
      },
      {
        "pr_number": 431,
        "title": "Add benchmarking for parser",
        "body": "As part of the work to help improve zod's performance, it seems to me like the first step is to add some benchmarking to track performance as we make changes. What's measured improves and all that.\r\n\r\nAdded a few really basic benchmarks and will want to expand this before landing it, but wanted to get some early feedback on this approach from @colinhacks and the rest of the community. It's also possible that we want these benchmarks to live \"outside\" of the code, so that it can import multiple versions to track changes, benchmark other similar libraries, incorporate other tools, etc.\r\n\r\nTODO:\r\n\r\n- [ ] Schemas\r\n  - [x] String\r\n  - [ ] Object\r\n    - [x] Simple flat objects\r\n    - [ ] Nested objects\r\n    - [ ] Arrays of objects\r\n  - [ ] etc..\r\n- [ ] Documentation\r\n- [ ] Add package.json script for running\r\n- [ ] Collect results somewhere\r\n- [ ] Add running infrastructure\r\n\r\n===\r\n\r\n## Current benchmarks:\r\n\r\n```\r\nz.string: empty string x 39,259 ops/sec \u00b13.98% (77 runs sampled)\r\nz.string: short string x 40,917 ops/sec \u00b12.43% (77 runs sampled)\r\nz.string: long string x 40,562 ops/sec \u00b12.54% (84 runs sampled)\r\nz.string: invalid: null x 32,975 ops/sec \u00b13.76% (82 runs sampled)\r\nz.string: manual parser: long x 770,761,225 ops/sec \u00b10.40% (95 runs sampled)\r\n\r\nz.object: empty: valid x 25,292 ops/sec \u00b12.01% (77 runs sampled)\r\nz.object: empty: valid: extra keys x 24,640 ops/sec \u00b12.69% (89 runs sampled)\r\nz.object: empty: invalid: null x 35,210 ops/sec \u00b12.20% (86 runs sampled)\r\nz.object: short: valid x 13,420 ops/sec \u00b13.00% (86 runs sampled)\r\nz.object: short: valid: extra keys x 13,429 ops/sec \u00b12.00% (85 runs sampled)\r\nz.object: short: invalid: null x 35,542 ops/sec \u00b13.11% (88 runs sampled)\r\nz.object: long: valid x 7,155 ops/sec \u00b12.96% (81 runs sampled)\r\nz.object: long: valid: extra keys x 7,292 ops/sec \u00b12.29% (87 runs sampled)\r\nz.object: long: invalid: null x 35,468 ops/sec \u00b13.27% (84 runs sampled)\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/431",
        "comments": []
      },
      {
        "pr_number": 478,
        "title": "fix setPrototypeOf in v3",
        "body": "Hi @colinhacks!\r\n\r\nPlease, review this PR - I've applied fix from https://github.com/colinhacks/zod/commit/7142f7d33a5071a589df798461f3e11b6311fd16",
        "html_url": "https://github.com/colinhacks/zod/pull/478",
        "comments": ["Thanks!"]
      },
      {
        "pr_number": 483,
        "title": "Fix not considering the nil UUID a valid UUID",
        "body": "The nil UUID (`00000000-0000-0000-0000-000000000000`) is a valid UUID according to [RFC4122 (Section 4.1.7)](https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.7). This PR adds it to the regex for UUID validation. It is added separately to avoid allowing `0` in locations where it is not permitted for other UUID versions.",
        "html_url": "https://github.com/colinhacks/zod/pull/483",
        "comments": ["Great, thanks!"]
      },
      {
        "pr_number": 489,
        "title": "update io-ts comparison",
        "body": "- Missing lazy/recursive types\r\nhttps://github.com/gcanti/io-ts/blob/master/Decoder.md#the-lazy-combinator\r\n- Missing union & intersection schemas\r\nhttps://github.com/gcanti/io-ts/blob/master/Decoder.md#the-union-combinator\r\nhttps://github.com/gcanti/io-ts/blob/master/Decoder.md#the-intersect-combinator\r\n- Missing support for parsing cyclical data (maybe)\r\nhttps://github.com/gcanti/io-ts/blob/master/Decoder.md#the-lazy-combinator\r\n- Missing error customization \r\nit has built in error reporter, tho as error is just a data structure you can implement your own error reporter\r\nhttps://github.com/gcanti/io-ts/blob/master/Decoder.md#built-in-error-reporter",
        "html_url": "https://github.com/colinhacks/zod/pull/489",
        "comments": []
      },
      {
        "pr_number": 489,
        "title": "update io-ts comparison",
        "body": "- Missing lazy/recursive types\r\nhttps://github.com/gcanti/io-ts/blob/master/Decoder.md#the-lazy-combinator\r\n- Missing union & intersection schemas\r\nhttps://github.com/gcanti/io-ts/blob/master/Decoder.md#the-union-combinator\r\nhttps://github.com/gcanti/io-ts/blob/master/Decoder.md#the-intersect-combinator\r\n- Missing support for parsing cyclical data (maybe)\r\nhttps://github.com/gcanti/io-ts/blob/master/Decoder.md#the-lazy-combinator\r\n- Missing error customization \r\nit has built in error reporter, tho as error is just a data structure you can implement your own error reporter\r\nhttps://github.com/gcanti/io-ts/blob/master/Decoder.md#built-in-error-reporter",
        "html_url": "https://github.com/colinhacks/zod/pull/489",
        "comments": []
      },
      {
        "pr_number": 483,
        "title": "Fix not considering the nil UUID a valid UUID",
        "body": "The nil UUID (`00000000-0000-0000-0000-000000000000`) is a valid UUID according to [RFC4122 (Section 4.1.7)](https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.7). This PR adds it to the regex for UUID validation. It is added separately to avoid allowing `0` in locations where it is not permitted for other UUID versions.",
        "html_url": "https://github.com/colinhacks/zod/pull/483",
        "comments": ["Great, thanks!"]
      },
      {
        "pr_number": 478,
        "title": "fix setPrototypeOf in v3",
        "body": "Hi @colinhacks!\r\n\r\nPlease, review this PR - I've applied fix from https://github.com/colinhacks/zod/commit/7142f7d33a5071a589df798461f3e11b6311fd16",
        "html_url": "https://github.com/colinhacks/zod/pull/478",
        "comments": ["Thanks!"]
      },
      {
        "pr_number": 492,
        "title": "Performance improvements",
        "body": "Hello and first thanks for this project! I've hoped to find a validation library that focuses on data validation, has simple and intuitive API and can infer TS types correctly from the schemas. When I encountered `zod`, I knew that it was exactly what I had been searching for. So I happily started using the library but soon I unfortunately realized that there were some performance issues that made the validations run very slow and due these issues I had to drop the library from production. I felt very sad about it. \ud83d\ude22 So here is my contribution that'd hopefully help to fix some of these issues in future.\r\n\r\ntl;dr; this PR introduces some changes that bring **100-200x speedup** compared to the current `master` \r\n\r\n### Baseline\r\n\r\nThere is already some prior research done about the performance, such as #292 and #459 which have found that excessive `ZodError` allocation is the main cause for poor performance and one fix would be to remove the `Error` base class (and hence remove the costly stacktrace allocation). And if I've understood correctly, the main concern is that the stacktrace could be relevant for the library uses (and to be honest, I share this concern as well).\r\n\r\nSo I took a look at the codebase and (like @reinismu [said](https://github.com/colinhacks/zod/pull/292#discussion_r567867700)) it heavily overuses `try/catch`. The codebase also implements `PseudoPromise` abstraction that allows to support async refinements. If we (mentally) unroll the structure, the code flow looks like the following:\r\n\r\n```js\r\n// level 1\r\ntry {\r\n  const err1 = new ZodError()\r\n  if (invalid(level1)) throw err1\r\n  // level 2\r\n  try {\r\n    const err2 = new ZodError()\r\n    if (invalid(level2)) throw err2\r\n    // level 3 \r\n    try {\r\n      const err3 = new ZodError()\r\n      if (invalid(level3)) throw err3\r\n      // level ...\r\n      try {\r\n        // ...\r\n      } catch (err) {\r\n        // ...\r\n      }\r\n    } catch (err) {\r\n      err2.addIssues(err.issues)\r\n      throw err2\r\n    }\r\n  } catch (err) {\r\n    err1.addIssues(err.issues)\r\n    throw err1\r\n  }\r\n} catch (err) {\r\n  baseErr.addIssues(err.issues)\r\n  throw baseErr\r\n}\r\n```\r\n\r\nLike you can see, the code allocates quite many errors. It also accumulates issues per level which is a lot of extra work. In addition this flow is orchestrated by `PseudoPromise` abstraction that also adds some extra allocation and calculation to the parsing.\r\n\r\nAt this point, I ran the (excellent!) benchmarks introduced in #431 by @scotttrinh and got the following results on my '20 MBP (Node 16):\r\n<details>\r\n  <summary> ** Baseline (~50k ops/s) ** </summary>\r\n  \r\n```\r\nz.string: empty string x 69,126 ops/sec \u00b11.71% (86 runs sampled)\r\nz.string: short string x 66,917 ops/sec \u00b14.43% (85 runs sampled)\r\nz.string: long string x 69,844 ops/sec \u00b14.63% (87 runs sampled)\r\nz.string: invalid: null x 51,296 ops/sec \u00b14.51% (82 runs sampled)\r\nz.string: manual parser: long x 878,697,948 ops/sec \u00b11.60% (85 runs sampled)\r\nz.object: empty: valid x 31,908 ops/sec \u00b18.31% (81 runs sampled)\r\nz.object: empty: valid: extra keys x 35,451 ops/sec \u00b16.17% (84 runs sampled)\r\nz.object: empty: invalid: null x 56,126 ops/sec \u00b11.50% (89 runs sampled)\r\nz.object: short: valid x 20,422 ops/sec \u00b16.28% (84 runs sampled)\r\nz.object: short: valid: extra keys x 19,344 ops/sec \u00b16.31% (79 runs sampled)\r\nz.object: short: invalid: null x 50,725 ops/sec \u00b11.61% (82 runs sampled)\r\nz.object: long: valid x 10,492 ops/sec \u00b13.93% (80 runs sampled)\r\nz.object: long: valid: extra keys x 9,877 ops/sec \u00b17.00% (80 runs sampled)\r\nz.object: long: invalid: null x 51,332 ops/sec \u00b11.65% (88 runs sampled)\r\n```\r\n\r\n</details>\r\n\r\n\r\n### 1. Optimize flow control\r\n\r\n \r\nSo what I did is that I changed the execution flow into more lightweight variant which allows better composition of parsing functions and minimizes the required allocations, in pseudo:\r\n\r\n```js \r\nconst level1Valid = valid(level1Data)\r\nconst level2Valid = level1Valid && valid(level2Data)\r\nconst level3Valid = level2Valid && valid(level3Data)\r\nconst levelNParsed = level3Valid && valid(levelNData) ? makeResult(levelNData) : INVALID\r\nconst level3Parsed = levelNParsed === INVALID ? INVALID : makeResult(level3Data, levelNParsed)\r\nconst level2Parsed = level3Parsed === INVALID ? INVALID : makeResult(level2Data, level3Parsed)\r\nconst level1Parsed = level2Parsed === INVALID ? INVALID : makeResult(level1Data, level3Parsed)\r\n```\r\nLike in the current implementation, the parsing context is passed as a parameter to `_parse` but the difference is that errors are not indicated by throwing and catching them. Instead, `_parse` returns a result object of `ParseResult = INVALID | OK(parsed)`. If any parsing errors occur, issues are stored directly into the context: we known that if parsing fails, the call stack will eventually be returning to the top level `parse` (or `safeParse`) where we can read all the issues and **then** throw an error with all of those issues. This means that **there are no breaking changes to the public API** but the difference in performance is huge.\r\n\r\nOf course the implementation must also support async refinements so the parse result type is actually `ParseResult = INVALID | OK(parsed) | ASYNC(INVALID | OK(parsed))` and parsers must implement the async case as well. Luckily the number of those cases is relatively low (basically collections like object, array, tuple, record, set, list) so I could add specialized performance-optimized implementations for each case. I ran benchmarks again and the different is significant. And the best part is that there were absolutely **no changes to the public API** - all tests are passing without any modifications on them!\r\n\r\n<details>\r\n  <summary> ** Optimized flow (~5M ops/s) ** </summary>\r\n  \r\n```\r\nz.string: empty string x 13,120,643 ops/sec \u00b11.27% (94 runs sampled)\r\nz.string: short string x 12,989,836 ops/sec \u00b11.45% (92 runs sampled)\r\nz.string: long string x 12,788,053 ops/sec \u00b11.21% (91 runs sampled)\r\nz.string: invalid: null x 118,915 ops/sec \u00b11.32% (81 runs sampled)\r\nz.string: manual parser: long x 876,793,503 ops/sec \u00b11.38% (82 runs sampled)\r\nz.object: empty: valid x 5,437,250 ops/sec \u00b14.61% (88 runs sampled)\r\nz.object: empty: valid: extra keys x 5,086,771 ops/sec \u00b11.36% (88 runs sampled)\r\nz.object: empty: invalid: null x 127,522 ops/sec \u00b13.38% (90 runs sampled)\r\nz.object: short: valid x 3,103,337 ops/sec \u00b11.53% (93 runs sampled)\r\nz.object: short: valid: extra keys x 3,223,728 ops/sec \u00b11.64% (90 runs sampled)\r\nz.object: short: invalid: null x 126,815 ops/sec \u00b14.66% (91 runs sampled)\r\nz.object: long: valid x 1,482,835 ops/sec \u00b11.32% (94 runs sampled)\r\nz.object: long: valid: extra keys x 1,411,238 ops/sec \u00b11.22% (91 runs sampled)\r\nz.object: long: invalid: null x 120,033 ops/sec \u00b13.74% (87 runs sampled)\r\n```\r\n\r\n</details>\r\n\r\n### 2. Add some extra optimizations\r\n\r\nIn addition to the flow, I also did some minor optimizations:\r\n\r\n* https://github.com/milankinen/zod/commit/341e9ddc46dbf12f9860c8aa7c5eb177e9bc27ad - change context path updates to use persistent O(1) list instead of O(n) array copy\r\n* https://github.com/milankinen/zod/commit/423c9a97f14fec5ce0b66d5f74378802161a9c97 - cache object shape information over subsequent parse events\r\n* https://github.com/milankinen/zod/commit/89088c2570230d9dd17e57c5e795b9babba69c57 - switch-case parsed type calculation\r\n\r\nWith these smaller local optimizations, I could squeeze some extra cycles:\r\n\r\n<details>\r\n  <summary> ** Optimized flow + local optimizations (~7,5M ops/s) ** </summary>\r\n  \r\n```\r\nz.string: empty string x 11,050,585 ops/sec \u00b11.34% (89 runs sampled)\r\nz.string: short string x 10,931,303 ops/sec \u00b11.58% (89 runs sampled)\r\nz.string: long string x 11,056,030 ops/sec \u00b11.43% (94 runs sampled)\r\nz.string: invalid: null x 118,733 ops/sec \u00b11.41% (90 runs sampled)\r\nz.string: manual parser: long x 864,371,553 ops/sec \u00b11.41% (82 runs sampled)\r\nz.object: empty: valid x 7,120,299 ops/sec \u00b14.26% (88 runs sampled)\r\nz.object: empty: valid: extra keys x 7,585,016 ops/sec \u00b11.28% (93 runs sampled)\r\nz.object: empty: invalid: null x 129,548 ops/sec \u00b13.68% (89 runs sampled)\r\nz.object: short: valid x 4,777,457 ops/sec \u00b11.35% (94 runs sampled)\r\nz.object: short: valid: extra keys x 5,014,443 ops/sec \u00b14.73% (90 runs sampled)\r\nz.object: short: invalid: null x 127,899 ops/sec \u00b13.33% (89 runs sampled)\r\nz.object: long: valid x 2,173,238 ops/sec \u00b11.34% (94 runs sampled)\r\nz.object: long: valid: extra keys x 2,125,664 ops/sec \u00b11.29% (91 runs sampled)\r\nz.object: long: invalid: null x 117,491 ops/sec \u00b13.75% (81 runs sampled)\r\n```\r\n\r\n</details>\r\n\r\nI also ran the https://github.com/moltar/typescript-runtime-type-benchmarks with current master (`zod` in the graphics) and optimizations (`milankinen/zod` in the graphics) and got the following results:\r\n\r\n![Som graphics](https://raw.githubusercontent.com/milankinen/zod/performance-improvements/data-type-sans-outliers-v16.0.0.png)\r\n\r\n<details>\r\n  <summary> Full onsole output </summary>\r\n  \r\n```\r\nRunning \"data-type-sans-outliers\" suite...\r\n decoders:\r\n    328 543 ops/s, \u00b11.64%     | 92.91% slower\r\n\r\n  io-ts:\r\n    1 924 017 ops/s, \u00b11.39%   | 58.49% slower\r\n\r\n  jointz:\r\n    2 303 597 ops/s, \u00b11.18%   | 50.3% slower\r\n\r\n  json-decoder:\r\n    1 205 792 ops/s, \u00b11.44%   | 73.98% slower\r\n\r\n  @mojotech/json-type-validation:\r\n    1 801 597 ops/s, \u00b11.40%   | 61.13% slower\r\n\r\n  myzod:\r\n    2 115 310 ops/s, \u00b11.29%   | 54.36% slower\r\n\r\n  purify-ts:\r\n    1 023 057 ops/s, \u00b11.73%   | 77.93% slower\r\n\r\n  rulr:\r\n    1 242 731 ops/s, \u00b11.36%   | 73.19% slower\r\n\r\n  runtypes:\r\n    161 748 ops/s, \u00b11.66%     | 96.51% slower\r\n\r\n  simple-runtypes:\r\n    3 077 120 ops/s, \u00b11.23%   | 33.61% slower\r\n\r\n  superstruct:\r\n    152 440 ops/s, \u00b11.81%     | 96.71% slower\r\n\r\n  toi:\r\n    874 245 ops/s, \u00b11.41%     | 81.14% slower\r\n\r\n  ts-utils:\r\n    64 927 ops/s, \u00b160.92%      | 98.6% slower\r\n\r\n  @typeofweb/schema:\r\n    1 320 077 ops/s, \u00b11.54%   | 71.52% slower\r\n\r\n  valita:\r\n    4 634 932 ops/s, \u00b11.12%   | fastest\r\n\r\n  yup:\r\n    42 782 ops/s, \u00b11.14%      | 99.08% slower\r\n\r\n  zod:\r\n    2 981 ops/s, \u00b117.43%       | slowest, 99.94% slower\r\n\r\n  milankinen/zod:\r\n    469 237 ops/s, \u00b141.76%     | 89.88% slower\r\n\r\n  ts-interface-checker:\r\n    3 340 228 ops/s, \u00b11.29%   | 27.93% slower\r\n\r\nFinished 23 cases!\r\n  Fastest: valita\r\n  Slowest: zod\r\n\r\n```\r\n\r\n</details>\r\n\r\n### Conclusions\r\n\r\nI'm very happy that I found a way to significantly improve the performance while maintaining this excellent API. Honestly I don't believe or expect that this PR will be merged to the upstream as it is but I at least hope that it'll give some pointers for the future improvements. I really like `zod` as a library and hope that some day the performance gets fixed so that it won't prevent me from using this in production as well. :slightly_smiling_face:\r\n\r\nCheers!\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/492",
        "comments": [
          "PRs like this remind me why I love open source. Truly glorious stuff Matti!\r\n\r\nI've been looking through the code and I think I understand the new execution system. I like it! Getting rid of all those spaghetti code PseudoPromise methods is so satisfying.\r\n\r\nFor grins, I re-ran the benchmarks after removing the `Error` base class, and saw nearly 3x performance improvements on all invalid results. Which is a pretty compelling reason to remove it...\r\n\r\n```\r\nz.string: empty string x 9,702,190 ops/sec \u00b10.89% (87 runs sampled)\r\nz.string: short string x 9,628,797 ops/sec \u00b10.84% (92 runs sampled)\r\nz.string: long string x 9,472,395 ops/sec \u00b12.01% (88 runs sampled)\r\nz.string: invalid: null x 419,983 ops/sec \u00b11.34% (87 runs sampled)\r\nz.string: manual parser: long x 973,337,378 ops/sec \u00b10.75% (96 runs sampled)\r\nz.object: empty: valid x 7,065,026 ops/sec \u00b11.18% (87 runs sampled)\r\nz.object: empty: valid: extra keys x 8,204,405 ops/sec \u00b10.94% (92 runs sampled)\r\nz.object: empty: invalid: null x 537,947 ops/sec \u00b11.76% (86 runs sampled)\r\nz.object: short: valid x 4,047,468 ops/sec \u00b10.96% (89 runs sampled)\r\nz.object: short: valid: extra keys x 4,494,936 ops/sec \u00b11.06% (86 runs sampled)\r\nz.object: short: invalid: null x 554,633 ops/sec \u00b11.06% (92 runs sampled)\r\nz.object: long: valid x 2,041,231 ops/sec \u00b11.07% (86 runs sampled)\r\nz.object: long: valid: extra keys x 2,031,685 ops/sec \u00b11.13% (88 runs sampled)\r\nz.object: long: invalid: null x 535,857 ops/sec \u00b12.65% (82 runs sampled)\r\n```\r\n\r\nYou say you don't expect that this PR will be merged...but I can't see any reason why not. Seems like a definitive improvement in terms of code understandability, perf, and elegance. Am I missing anything?\r\n\r\nI think combining this with some of the changes by @scotttrinh will be the best of all worlds: changing the format of `ZodInvalidUnionIssue` and eliminating the Error subclass for ZodError (cc @lilred). Scott what do you think?",
          ">You say you don't expect that this PR will be merged...but I can't see any reason why not. Seems like a definitive improvement in terms of code understandability, perf, and elegance. Am I missing anything?\r\n\r\nWell, this PR introduces quite big changes to the internals which can be an issue sometimes. \ud83d\ude05 But I'm glad that you approve those changes, technically there should be no reason not to merge this (except the conflicts that must be resolved first). \ud83d\ude42 This PR is forked from #431 so perhaps that could be merged first as a separate PR?\r\n\r\n>For grins, I re-ran the benchmarks after removing the Error base class, and saw nearly 3x performance improvements on all invalid results. Which is a pretty compelling reason to remove it...\r\n\r\nYeah, removing the `Error` class can improve the performance for invalid cases quite a lot so if bumping the major version does not scare, then we should definitely go for it!\r\n\r\nAnother, a bit more conservative option could be to keep `Error` sub-classing in `.parse` and `.parseAsync` so that the thrown error has a stacktrace, but return `{success: false, issues: ZodIssue[])` from `safeParse` and `spa`? With this, performance critical applications could use safe version. That said, both approaches are not backward compatible so they'd require a major version bump. \r\n\r\n>I think combining this with some of the changes by @scotttrinh will be the best of all worlds: changing the format of ZodInvalidUnionIssue and eliminating the Error subclass for ZodError (cc @lilred). Scott what do you think?\r\n\r\nI definitely agree with this \ud83d\udc4d Storing error instances inside another error won't give any benefits.\r\n\r\n",
          "> I think combining this with some of the changes by @scotttrinh will be the best of all worlds: changing the format of `ZodInvalidUnionIssue` and eliminating the Error subclass for ZodError (cc @lilred). Scott what do you think?\n\nI don't think we should wait on my opinion here, I was mostly working off existing work! I'll have time in the next few hours to review and it sounds like we will need to rebase or deconflict this on the latest, so I'm happy to help with that, too.",
          "FYI @colinhacks I don't have bandwidth to review this in a timely manner, I don't think you were awaiting my review but just so it's clear feel free to proceed without me.",
          "@scotttrinh thanks for the review comments! I committed the suggested changes. There are still some conflicting files because this branch is built on top of #431 which is a little bit behind the current master. What do you think is the best option? I could either:\r\n\r\n1. Rebase this whole branch with the benchmark commits onto current master\r\n2. Rebase only my commits and leave benchmark branch to be merged separately\r\n\r\nAlso one other thing I noticed when I was running the tests with the new implementation was that [this test](https://github.com/colinhacks/zod/blob/master/src/__tests__/async-parsing.test.ts#L364-L387) seemed to have an expectation that was conflicting with the description. The description says that \"early async failure prevents follow-up refinement checks\". However, the expected `count` value is 2, indicating that both refinements are run, even though the first one returns `false`. I didn't want to break the existing behaviour so I removed the refinement prevention but what is actually the expected behaviour?",
          "Nice work!\r\nStill need some work to reach https://github.com/badrap/valita level, but at least it shouldn't be the bottleneck of the whole application after this :)",
          "Thanks! Valita is indeed a nice piece of software. Of course running these kind of microbenchmarks is a bit dangerous because benchmark setup might favour some libraries. For example valita seems to be built built on top of assumption that validated object does not contain any extra keys and if that happens, it falls back to a slower execution path (its still pretty damn fast though \ud83d\ude05!). In `zod` extra keys do not matter (if running with default .strip mode).\r\n\r\nIf we add some extra keys to the data, we can see that among the \"popular\" libs we're almost in par.\r\n```\r\n> typescript-runtime-type-benchmarks@1.0.0 start\r\n> ts-node index.ts\r\n\r\nRunning \"data-type-sans-outliers\" suite...\r\nProgress: 100%\r\n\r\n  io-ts:\r\n    1 562 873 ops/s, \u00b131.23%   | 11.62% slower\r\n\r\n  runtypes:\r\n    166 728 ops/s, \u00b10.70%     | 90.57% slower\r\n\r\n  valita:\r\n    1 768 350 ops/s, \u00b10.72%   | fastest\r\n\r\n  zod:\r\n    3 458 ops/s, \u00b114.52%       | slowest, 99.8% slower\r\n\r\n  milankinen/zod:\r\n    801 172 ops/s, \u00b11.18%     | 54.69% slower\r\n\r\nFinished 5 cases!\r\n  Fastest: valita\r\n  Slowest: zod\r\n```\r\n\r\nOn the other hand the test setup might be able to put in such way that also the new implementation seem a lot slower than others. \ud83d\ude04 ",
          "@milankinen \r\n\r\n> Also one other thing I noticed when I was running the tests with the new implementation was that this test seemed to have an expectation that was conflicting with the description. The description says that \"early async failure prevents follow-up refinement checks\". However, the expected count value is 2, indicating that both refinements are run, even though the first one returns false. I didn't want to break the existing behaviour so I removed the refinement prevention but what is actually the expected behaviour?\r\n\r\nI'd say even if the original _intent_ was to prevent the refinement, the fact that the current version does not prevent it (given the tests) means that's the behavior to preserve. If we're collecting possible breaking changes around these updates here, maybe it's worth considering that more holistically, but I imagine we want to minimize breakage. Definitely a @colinhacks call.\r\n\r\n> There are still some conflicting files because this branch is built on top of #431 which is a little bit behind the current master. What do you think is the best option?\r\n\r\nI'm curious about this question as well. In my opinion, I'd rather see us concentrate on landing your changes here while incorporating some of the additional changes to `ZodError` that the other PR introduces, but I want to get some marching orders from Colin around this since it seems like we're all in a good position to take on the work.",
          ">I'm curious about this question as well. In my opinion, I'd rather see us concentrate on landing your changes here while incorporating some of the additional changes to ZodError that the other PR introduces, but I want to get some marching orders from Colin around this since it seems like we're all in a good position to take on the work.\r\n\r\nI guess you're talking about #459 which introduces also the `ZodError` changes? I mean, #431 introduces only the benchmarks (no ZodError changes) and is mergeable by its own (and not having any conflicts atm), so I was just wondering that do we want to merge it first as a separate PR? Then I could rebase this branch of mine on top of the master and drop the benchmark commit from this PR.  \r\n\r\nOr we could just merge this entirely which also merges benchmarks to the master, making #431 obsolete. Both options are fine for me.\r\n",
          "Yeah, all of these options are on the table for me, too, but I want to minimize the amount of work (and rework) that we need to do to land _these_ changes, regardless of what we choose to do about `ZodError`.\r\n\r\n@colinhacks I think we're all ready to put some work in here if you have a clear sense of what you want to see happen. Separate PRs for the different elements (benchmarking, ZodError changes, control flow changes)? Combine all of the performance work onto this branch? If we want to combine these branches,  what are your thoughts on the nature of breaking changes around further `ZodError` and `ZodUnion`-specific issues?",
          "I already fixed all the conflicts on this PR locally. My plan is to redo/merge in Scott's ZodError changes where relevant in my local branch, then merge the whole thing as one big PR. \r\n\r\nI don't think eliminating the Error subclass is enough to merit a new major version. ZodError implements the entire Error interface except `.stack` (we could add `stack = \"\"` as a property) so it's unlikely to break much code. Sorry Matti, as a \"code janitor\" (love that \ud83d\ude1b) this probably gives you an aneurysm.\r\n\r\nUnfortunately there's a larger backwards compatibility problem: the new return type of the `_parse` method. Despite the fact that it's prefixed, users may have defined custom subclasses that rely on the old method signature. It's the [recommended way](https://github.com/colinhacks/zod/issues/307) to implement custom ZodType subclasses. Ideally we'd be able to maintain compatibility somehow, I'll look into it. If it's not, we can just break this too, since it's not officially documented. ",
          ">ZodError implements the entire Error interface except .stack (we could add stack = \"\" as a property) so it's unlikely to break much code. Sorry Matti, as a \"code janitor\" (love that \ud83d\ude1b) this probably gives you an aneurysm.\r\n\r\nI'm not worried about the property itself but its contents. \ud83d\ude04 If you decide to remove the `Error` inheritance, then it's fine for me to drop the `stack` property as well.\r\n\r\n> Unfortunately there's a larger backwards compatibility problem: the new return type of the _parse method. ...\r\n\r\nShiii.. I thought it was for internal purposes only! This commit https://github.com/colinhacks/zod/pull/492/commits/c0744c7d6b514808051af30eab1edb6764a813a3 attempts to restore the backwards compatibility. It basically does the following:\r\n\r\n* Restore old `PseudoPromise` implementation and rename new \"PseudoPromise\" construct to `AsyncValue`\r\n* Rename new \"fast\" internal parse to `_parseFast` - all built-in `ZodType` sub-classes implement this\r\n* Add `_parseSlow` to `ZodType` that will make the conversion from new parameter format to old format and calls `_parse` \r\n* Add logic to detect whether we can use \"fast\" parse flow or \"slow\" depending whether the type instance has `_parse` overridden or not\r\n* Restore `_internalParse` that uses the detected execution flow - all internal calls should call this instead of `_parse`, `_parseFast` or `_parseSlow`\r\n* Add default `_parse` implementation to `ZodType` so that inherited custom types can call `super._parse(...)`\r\n\r\nI also added some tests for the backwards compatibility.",
          "Merged in 3.3! \r\n\r\nFor now ZodError still subclasses Error but that still might change that in a future release. I decided to forgo including your compatibility changes from (c0744c7)[https://github.com/colinhacks/zod/commit/c0744c7d6b514808051af30eab1edb6764a813a3]. I don't think it's worth the additional complexity, since I have no evidence that anyone is actually subclassing ZodType in the wild. In any case, since this pattern isn't actually documented, I'm not particularly concerned about publishing this as a minor version. \r\n\r\nAgain, incredible work! \ud83d\ude4c ",
          "Awesome! Thank you for your quick actions to get this merged! \ud83d\udc4c "
        ]
      },
      {
        "pr_number": 492,
        "title": "Performance improvements",
        "body": "Hello and first thanks for this project! I've hoped to find a validation library that focuses on data validation, has simple and intuitive API and can infer TS types correctly from the schemas. When I encountered `zod`, I knew that it was exactly what I had been searching for. So I happily started using the library but soon I unfortunately realized that there were some performance issues that made the validations run very slow and due these issues I had to drop the library from production. I felt very sad about it. \ud83d\ude22 So here is my contribution that'd hopefully help to fix some of these issues in future.\r\n\r\ntl;dr; this PR introduces some changes that bring **100-200x speedup** compared to the current `master` \r\n\r\n### Baseline\r\n\r\nThere is already some prior research done about the performance, such as #292 and #459 which have found that excessive `ZodError` allocation is the main cause for poor performance and one fix would be to remove the `Error` base class (and hence remove the costly stacktrace allocation). And if I've understood correctly, the main concern is that the stacktrace could be relevant for the library uses (and to be honest, I share this concern as well).\r\n\r\nSo I took a look at the codebase and (like @reinismu [said](https://github.com/colinhacks/zod/pull/292#discussion_r567867700)) it heavily overuses `try/catch`. The codebase also implements `PseudoPromise` abstraction that allows to support async refinements. If we (mentally) unroll the structure, the code flow looks like the following:\r\n\r\n```js\r\n// level 1\r\ntry {\r\n  const err1 = new ZodError()\r\n  if (invalid(level1)) throw err1\r\n  // level 2\r\n  try {\r\n    const err2 = new ZodError()\r\n    if (invalid(level2)) throw err2\r\n    // level 3 \r\n    try {\r\n      const err3 = new ZodError()\r\n      if (invalid(level3)) throw err3\r\n      // level ...\r\n      try {\r\n        // ...\r\n      } catch (err) {\r\n        // ...\r\n      }\r\n    } catch (err) {\r\n      err2.addIssues(err.issues)\r\n      throw err2\r\n    }\r\n  } catch (err) {\r\n    err1.addIssues(err.issues)\r\n    throw err1\r\n  }\r\n} catch (err) {\r\n  baseErr.addIssues(err.issues)\r\n  throw baseErr\r\n}\r\n```\r\n\r\nLike you can see, the code allocates quite many errors. It also accumulates issues per level which is a lot of extra work. In addition this flow is orchestrated by `PseudoPromise` abstraction that also adds some extra allocation and calculation to the parsing.\r\n\r\nAt this point, I ran the (excellent!) benchmarks introduced in #431 by @scotttrinh and got the following results on my '20 MBP (Node 16):\r\n<details>\r\n  <summary> ** Baseline (~50k ops/s) ** </summary>\r\n  \r\n```\r\nz.string: empty string x 69,126 ops/sec \u00b11.71% (86 runs sampled)\r\nz.string: short string x 66,917 ops/sec \u00b14.43% (85 runs sampled)\r\nz.string: long string x 69,844 ops/sec \u00b14.63% (87 runs sampled)\r\nz.string: invalid: null x 51,296 ops/sec \u00b14.51% (82 runs sampled)\r\nz.string: manual parser: long x 878,697,948 ops/sec \u00b11.60% (85 runs sampled)\r\nz.object: empty: valid x 31,908 ops/sec \u00b18.31% (81 runs sampled)\r\nz.object: empty: valid: extra keys x 35,451 ops/sec \u00b16.17% (84 runs sampled)\r\nz.object: empty: invalid: null x 56,126 ops/sec \u00b11.50% (89 runs sampled)\r\nz.object: short: valid x 20,422 ops/sec \u00b16.28% (84 runs sampled)\r\nz.object: short: valid: extra keys x 19,344 ops/sec \u00b16.31% (79 runs sampled)\r\nz.object: short: invalid: null x 50,725 ops/sec \u00b11.61% (82 runs sampled)\r\nz.object: long: valid x 10,492 ops/sec \u00b13.93% (80 runs sampled)\r\nz.object: long: valid: extra keys x 9,877 ops/sec \u00b17.00% (80 runs sampled)\r\nz.object: long: invalid: null x 51,332 ops/sec \u00b11.65% (88 runs sampled)\r\n```\r\n\r\n</details>\r\n\r\n\r\n### 1. Optimize flow control\r\n\r\n \r\nSo what I did is that I changed the execution flow into more lightweight variant which allows better composition of parsing functions and minimizes the required allocations, in pseudo:\r\n\r\n```js \r\nconst level1Valid = valid(level1Data)\r\nconst level2Valid = level1Valid && valid(level2Data)\r\nconst level3Valid = level2Valid && valid(level3Data)\r\nconst levelNParsed = level3Valid && valid(levelNData) ? makeResult(levelNData) : INVALID\r\nconst level3Parsed = levelNParsed === INVALID ? INVALID : makeResult(level3Data, levelNParsed)\r\nconst level2Parsed = level3Parsed === INVALID ? INVALID : makeResult(level2Data, level3Parsed)\r\nconst level1Parsed = level2Parsed === INVALID ? INVALID : makeResult(level1Data, level3Parsed)\r\n```\r\nLike in the current implementation, the parsing context is passed as a parameter to `_parse` but the difference is that errors are not indicated by throwing and catching them. Instead, `_parse` returns a result object of `ParseResult = INVALID | OK(parsed)`. If any parsing errors occur, issues are stored directly into the context: we known that if parsing fails, the call stack will eventually be returning to the top level `parse` (or `safeParse`) where we can read all the issues and **then** throw an error with all of those issues. This means that **there are no breaking changes to the public API** but the difference in performance is huge.\r\n\r\nOf course the implementation must also support async refinements so the parse result type is actually `ParseResult = INVALID | OK(parsed) | ASYNC(INVALID | OK(parsed))` and parsers must implement the async case as well. Luckily the number of those cases is relatively low (basically collections like object, array, tuple, record, set, list) so I could add specialized performance-optimized implementations for each case. I ran benchmarks again and the different is significant. And the best part is that there were absolutely **no changes to the public API** - all tests are passing without any modifications on them!\r\n\r\n<details>\r\n  <summary> ** Optimized flow (~5M ops/s) ** </summary>\r\n  \r\n```\r\nz.string: empty string x 13,120,643 ops/sec \u00b11.27% (94 runs sampled)\r\nz.string: short string x 12,989,836 ops/sec \u00b11.45% (92 runs sampled)\r\nz.string: long string x 12,788,053 ops/sec \u00b11.21% (91 runs sampled)\r\nz.string: invalid: null x 118,915 ops/sec \u00b11.32% (81 runs sampled)\r\nz.string: manual parser: long x 876,793,503 ops/sec \u00b11.38% (82 runs sampled)\r\nz.object: empty: valid x 5,437,250 ops/sec \u00b14.61% (88 runs sampled)\r\nz.object: empty: valid: extra keys x 5,086,771 ops/sec \u00b11.36% (88 runs sampled)\r\nz.object: empty: invalid: null x 127,522 ops/sec \u00b13.38% (90 runs sampled)\r\nz.object: short: valid x 3,103,337 ops/sec \u00b11.53% (93 runs sampled)\r\nz.object: short: valid: extra keys x 3,223,728 ops/sec \u00b11.64% (90 runs sampled)\r\nz.object: short: invalid: null x 126,815 ops/sec \u00b14.66% (91 runs sampled)\r\nz.object: long: valid x 1,482,835 ops/sec \u00b11.32% (94 runs sampled)\r\nz.object: long: valid: extra keys x 1,411,238 ops/sec \u00b11.22% (91 runs sampled)\r\nz.object: long: invalid: null x 120,033 ops/sec \u00b13.74% (87 runs sampled)\r\n```\r\n\r\n</details>\r\n\r\n### 2. Add some extra optimizations\r\n\r\nIn addition to the flow, I also did some minor optimizations:\r\n\r\n* https://github.com/milankinen/zod/commit/341e9ddc46dbf12f9860c8aa7c5eb177e9bc27ad - change context path updates to use persistent O(1) list instead of O(n) array copy\r\n* https://github.com/milankinen/zod/commit/423c9a97f14fec5ce0b66d5f74378802161a9c97 - cache object shape information over subsequent parse events\r\n* https://github.com/milankinen/zod/commit/89088c2570230d9dd17e57c5e795b9babba69c57 - switch-case parsed type calculation\r\n\r\nWith these smaller local optimizations, I could squeeze some extra cycles:\r\n\r\n<details>\r\n  <summary> ** Optimized flow + local optimizations (~7,5M ops/s) ** </summary>\r\n  \r\n```\r\nz.string: empty string x 11,050,585 ops/sec \u00b11.34% (89 runs sampled)\r\nz.string: short string x 10,931,303 ops/sec \u00b11.58% (89 runs sampled)\r\nz.string: long string x 11,056,030 ops/sec \u00b11.43% (94 runs sampled)\r\nz.string: invalid: null x 118,733 ops/sec \u00b11.41% (90 runs sampled)\r\nz.string: manual parser: long x 864,371,553 ops/sec \u00b11.41% (82 runs sampled)\r\nz.object: empty: valid x 7,120,299 ops/sec \u00b14.26% (88 runs sampled)\r\nz.object: empty: valid: extra keys x 7,585,016 ops/sec \u00b11.28% (93 runs sampled)\r\nz.object: empty: invalid: null x 129,548 ops/sec \u00b13.68% (89 runs sampled)\r\nz.object: short: valid x 4,777,457 ops/sec \u00b11.35% (94 runs sampled)\r\nz.object: short: valid: extra keys x 5,014,443 ops/sec \u00b14.73% (90 runs sampled)\r\nz.object: short: invalid: null x 127,899 ops/sec \u00b13.33% (89 runs sampled)\r\nz.object: long: valid x 2,173,238 ops/sec \u00b11.34% (94 runs sampled)\r\nz.object: long: valid: extra keys x 2,125,664 ops/sec \u00b11.29% (91 runs sampled)\r\nz.object: long: invalid: null x 117,491 ops/sec \u00b13.75% (81 runs sampled)\r\n```\r\n\r\n</details>\r\n\r\nI also ran the https://github.com/moltar/typescript-runtime-type-benchmarks with current master (`zod` in the graphics) and optimizations (`milankinen/zod` in the graphics) and got the following results:\r\n\r\n![Som graphics](https://raw.githubusercontent.com/milankinen/zod/performance-improvements/data-type-sans-outliers-v16.0.0.png)\r\n\r\n<details>\r\n  <summary> Full onsole output </summary>\r\n  \r\n```\r\nRunning \"data-type-sans-outliers\" suite...\r\n decoders:\r\n    328 543 ops/s, \u00b11.64%     | 92.91% slower\r\n\r\n  io-ts:\r\n    1 924 017 ops/s, \u00b11.39%   | 58.49% slower\r\n\r\n  jointz:\r\n    2 303 597 ops/s, \u00b11.18%   | 50.3% slower\r\n\r\n  json-decoder:\r\n    1 205 792 ops/s, \u00b11.44%   | 73.98% slower\r\n\r\n  @mojotech/json-type-validation:\r\n    1 801 597 ops/s, \u00b11.40%   | 61.13% slower\r\n\r\n  myzod:\r\n    2 115 310 ops/s, \u00b11.29%   | 54.36% slower\r\n\r\n  purify-ts:\r\n    1 023 057 ops/s, \u00b11.73%   | 77.93% slower\r\n\r\n  rulr:\r\n    1 242 731 ops/s, \u00b11.36%   | 73.19% slower\r\n\r\n  runtypes:\r\n    161 748 ops/s, \u00b11.66%     | 96.51% slower\r\n\r\n  simple-runtypes:\r\n    3 077 120 ops/s, \u00b11.23%   | 33.61% slower\r\n\r\n  superstruct:\r\n    152 440 ops/s, \u00b11.81%     | 96.71% slower\r\n\r\n  toi:\r\n    874 245 ops/s, \u00b11.41%     | 81.14% slower\r\n\r\n  ts-utils:\r\n    64 927 ops/s, \u00b160.92%      | 98.6% slower\r\n\r\n  @typeofweb/schema:\r\n    1 320 077 ops/s, \u00b11.54%   | 71.52% slower\r\n\r\n  valita:\r\n    4 634 932 ops/s, \u00b11.12%   | fastest\r\n\r\n  yup:\r\n    42 782 ops/s, \u00b11.14%      | 99.08% slower\r\n\r\n  zod:\r\n    2 981 ops/s, \u00b117.43%       | slowest, 99.94% slower\r\n\r\n  milankinen/zod:\r\n    469 237 ops/s, \u00b141.76%     | 89.88% slower\r\n\r\n  ts-interface-checker:\r\n    3 340 228 ops/s, \u00b11.29%   | 27.93% slower\r\n\r\nFinished 23 cases!\r\n  Fastest: valita\r\n  Slowest: zod\r\n\r\n```\r\n\r\n</details>\r\n\r\n### Conclusions\r\n\r\nI'm very happy that I found a way to significantly improve the performance while maintaining this excellent API. Honestly I don't believe or expect that this PR will be merged to the upstream as it is but I at least hope that it'll give some pointers for the future improvements. I really like `zod` as a library and hope that some day the performance gets fixed so that it won't prevent me from using this in production as well. :slightly_smiling_face:\r\n\r\nCheers!\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/492",
        "comments": [
          "PRs like this remind me why I love open source. Truly glorious stuff Matti!\r\n\r\nI've been looking through the code and I think I understand the new execution system. I like it! Getting rid of all those spaghetti code PseudoPromise methods is so satisfying.\r\n\r\nFor grins, I re-ran the benchmarks after removing the `Error` base class, and saw nearly 3x performance improvements on all invalid results. Which is a pretty compelling reason to remove it...\r\n\r\n```\r\nz.string: empty string x 9,702,190 ops/sec \u00b10.89% (87 runs sampled)\r\nz.string: short string x 9,628,797 ops/sec \u00b10.84% (92 runs sampled)\r\nz.string: long string x 9,472,395 ops/sec \u00b12.01% (88 runs sampled)\r\nz.string: invalid: null x 419,983 ops/sec \u00b11.34% (87 runs sampled)\r\nz.string: manual parser: long x 973,337,378 ops/sec \u00b10.75% (96 runs sampled)\r\nz.object: empty: valid x 7,065,026 ops/sec \u00b11.18% (87 runs sampled)\r\nz.object: empty: valid: extra keys x 8,204,405 ops/sec \u00b10.94% (92 runs sampled)\r\nz.object: empty: invalid: null x 537,947 ops/sec \u00b11.76% (86 runs sampled)\r\nz.object: short: valid x 4,047,468 ops/sec \u00b10.96% (89 runs sampled)\r\nz.object: short: valid: extra keys x 4,494,936 ops/sec \u00b11.06% (86 runs sampled)\r\nz.object: short: invalid: null x 554,633 ops/sec \u00b11.06% (92 runs sampled)\r\nz.object: long: valid x 2,041,231 ops/sec \u00b11.07% (86 runs sampled)\r\nz.object: long: valid: extra keys x 2,031,685 ops/sec \u00b11.13% (88 runs sampled)\r\nz.object: long: invalid: null x 535,857 ops/sec \u00b12.65% (82 runs sampled)\r\n```\r\n\r\nYou say you don't expect that this PR will be merged...but I can't see any reason why not. Seems like a definitive improvement in terms of code understandability, perf, and elegance. Am I missing anything?\r\n\r\nI think combining this with some of the changes by @scotttrinh will be the best of all worlds: changing the format of `ZodInvalidUnionIssue` and eliminating the Error subclass for ZodError (cc @lilred). Scott what do you think?",
          ">You say you don't expect that this PR will be merged...but I can't see any reason why not. Seems like a definitive improvement in terms of code understandability, perf, and elegance. Am I missing anything?\r\n\r\nWell, this PR introduces quite big changes to the internals which can be an issue sometimes. \ud83d\ude05 But I'm glad that you approve those changes, technically there should be no reason not to merge this (except the conflicts that must be resolved first). \ud83d\ude42 This PR is forked from #431 so perhaps that could be merged first as a separate PR?\r\n\r\n>For grins, I re-ran the benchmarks after removing the Error base class, and saw nearly 3x performance improvements on all invalid results. Which is a pretty compelling reason to remove it...\r\n\r\nYeah, removing the `Error` class can improve the performance for invalid cases quite a lot so if bumping the major version does not scare, then we should definitely go for it!\r\n\r\nAnother, a bit more conservative option could be to keep `Error` sub-classing in `.parse` and `.parseAsync` so that the thrown error has a stacktrace, but return `{success: false, issues: ZodIssue[])` from `safeParse` and `spa`? With this, performance critical applications could use safe version. That said, both approaches are not backward compatible so they'd require a major version bump. \r\n\r\n>I think combining this with some of the changes by @scotttrinh will be the best of all worlds: changing the format of ZodInvalidUnionIssue and eliminating the Error subclass for ZodError (cc @lilred). Scott what do you think?\r\n\r\nI definitely agree with this \ud83d\udc4d Storing error instances inside another error won't give any benefits.\r\n\r\n",
          "> I think combining this with some of the changes by @scotttrinh will be the best of all worlds: changing the format of `ZodInvalidUnionIssue` and eliminating the Error subclass for ZodError (cc @lilred). Scott what do you think?\n\nI don't think we should wait on my opinion here, I was mostly working off existing work! I'll have time in the next few hours to review and it sounds like we will need to rebase or deconflict this on the latest, so I'm happy to help with that, too.",
          "FYI @colinhacks I don't have bandwidth to review this in a timely manner, I don't think you were awaiting my review but just so it's clear feel free to proceed without me.",
          "@scotttrinh thanks for the review comments! I committed the suggested changes. There are still some conflicting files because this branch is built on top of #431 which is a little bit behind the current master. What do you think is the best option? I could either:\r\n\r\n1. Rebase this whole branch with the benchmark commits onto current master\r\n2. Rebase only my commits and leave benchmark branch to be merged separately\r\n\r\nAlso one other thing I noticed when I was running the tests with the new implementation was that [this test](https://github.com/colinhacks/zod/blob/master/src/__tests__/async-parsing.test.ts#L364-L387) seemed to have an expectation that was conflicting with the description. The description says that \"early async failure prevents follow-up refinement checks\". However, the expected `count` value is 2, indicating that both refinements are run, even though the first one returns `false`. I didn't want to break the existing behaviour so I removed the refinement prevention but what is actually the expected behaviour?",
          "Nice work!\r\nStill need some work to reach https://github.com/badrap/valita level, but at least it shouldn't be the bottleneck of the whole application after this :)",
          "Thanks! Valita is indeed a nice piece of software. Of course running these kind of microbenchmarks is a bit dangerous because benchmark setup might favour some libraries. For example valita seems to be built built on top of assumption that validated object does not contain any extra keys and if that happens, it falls back to a slower execution path (its still pretty damn fast though \ud83d\ude05!). In `zod` extra keys do not matter (if running with default .strip mode).\r\n\r\nIf we add some extra keys to the data, we can see that among the \"popular\" libs we're almost in par.\r\n```\r\n> typescript-runtime-type-benchmarks@1.0.0 start\r\n> ts-node index.ts\r\n\r\nRunning \"data-type-sans-outliers\" suite...\r\nProgress: 100%\r\n\r\n  io-ts:\r\n    1 562 873 ops/s, \u00b131.23%   | 11.62% slower\r\n\r\n  runtypes:\r\n    166 728 ops/s, \u00b10.70%     | 90.57% slower\r\n\r\n  valita:\r\n    1 768 350 ops/s, \u00b10.72%   | fastest\r\n\r\n  zod:\r\n    3 458 ops/s, \u00b114.52%       | slowest, 99.8% slower\r\n\r\n  milankinen/zod:\r\n    801 172 ops/s, \u00b11.18%     | 54.69% slower\r\n\r\nFinished 5 cases!\r\n  Fastest: valita\r\n  Slowest: zod\r\n```\r\n\r\nOn the other hand the test setup might be able to put in such way that also the new implementation seem a lot slower than others. \ud83d\ude04 ",
          "@milankinen \r\n\r\n> Also one other thing I noticed when I was running the tests with the new implementation was that this test seemed to have an expectation that was conflicting with the description. The description says that \"early async failure prevents follow-up refinement checks\". However, the expected count value is 2, indicating that both refinements are run, even though the first one returns false. I didn't want to break the existing behaviour so I removed the refinement prevention but what is actually the expected behaviour?\r\n\r\nI'd say even if the original _intent_ was to prevent the refinement, the fact that the current version does not prevent it (given the tests) means that's the behavior to preserve. If we're collecting possible breaking changes around these updates here, maybe it's worth considering that more holistically, but I imagine we want to minimize breakage. Definitely a @colinhacks call.\r\n\r\n> There are still some conflicting files because this branch is built on top of #431 which is a little bit behind the current master. What do you think is the best option?\r\n\r\nI'm curious about this question as well. In my opinion, I'd rather see us concentrate on landing your changes here while incorporating some of the additional changes to `ZodError` that the other PR introduces, but I want to get some marching orders from Colin around this since it seems like we're all in a good position to take on the work.",
          ">I'm curious about this question as well. In my opinion, I'd rather see us concentrate on landing your changes here while incorporating some of the additional changes to ZodError that the other PR introduces, but I want to get some marching orders from Colin around this since it seems like we're all in a good position to take on the work.\r\n\r\nI guess you're talking about #459 which introduces also the `ZodError` changes? I mean, #431 introduces only the benchmarks (no ZodError changes) and is mergeable by its own (and not having any conflicts atm), so I was just wondering that do we want to merge it first as a separate PR? Then I could rebase this branch of mine on top of the master and drop the benchmark commit from this PR.  \r\n\r\nOr we could just merge this entirely which also merges benchmarks to the master, making #431 obsolete. Both options are fine for me.\r\n",
          "Yeah, all of these options are on the table for me, too, but I want to minimize the amount of work (and rework) that we need to do to land _these_ changes, regardless of what we choose to do about `ZodError`.\r\n\r\n@colinhacks I think we're all ready to put some work in here if you have a clear sense of what you want to see happen. Separate PRs for the different elements (benchmarking, ZodError changes, control flow changes)? Combine all of the performance work onto this branch? If we want to combine these branches,  what are your thoughts on the nature of breaking changes around further `ZodError` and `ZodUnion`-specific issues?",
          "I already fixed all the conflicts on this PR locally. My plan is to redo/merge in Scott's ZodError changes where relevant in my local branch, then merge the whole thing as one big PR. \r\n\r\nI don't think eliminating the Error subclass is enough to merit a new major version. ZodError implements the entire Error interface except `.stack` (we could add `stack = \"\"` as a property) so it's unlikely to break much code. Sorry Matti, as a \"code janitor\" (love that \ud83d\ude1b) this probably gives you an aneurysm.\r\n\r\nUnfortunately there's a larger backwards compatibility problem: the new return type of the `_parse` method. Despite the fact that it's prefixed, users may have defined custom subclasses that rely on the old method signature. It's the [recommended way](https://github.com/colinhacks/zod/issues/307) to implement custom ZodType subclasses. Ideally we'd be able to maintain compatibility somehow, I'll look into it. If it's not, we can just break this too, since it's not officially documented. ",
          ">ZodError implements the entire Error interface except .stack (we could add stack = \"\" as a property) so it's unlikely to break much code. Sorry Matti, as a \"code janitor\" (love that \ud83d\ude1b) this probably gives you an aneurysm.\r\n\r\nI'm not worried about the property itself but its contents. \ud83d\ude04 If you decide to remove the `Error` inheritance, then it's fine for me to drop the `stack` property as well.\r\n\r\n> Unfortunately there's a larger backwards compatibility problem: the new return type of the _parse method. ...\r\n\r\nShiii.. I thought it was for internal purposes only! This commit https://github.com/colinhacks/zod/pull/492/commits/c0744c7d6b514808051af30eab1edb6764a813a3 attempts to restore the backwards compatibility. It basically does the following:\r\n\r\n* Restore old `PseudoPromise` implementation and rename new \"PseudoPromise\" construct to `AsyncValue`\r\n* Rename new \"fast\" internal parse to `_parseFast` - all built-in `ZodType` sub-classes implement this\r\n* Add `_parseSlow` to `ZodType` that will make the conversion from new parameter format to old format and calls `_parse` \r\n* Add logic to detect whether we can use \"fast\" parse flow or \"slow\" depending whether the type instance has `_parse` overridden or not\r\n* Restore `_internalParse` that uses the detected execution flow - all internal calls should call this instead of `_parse`, `_parseFast` or `_parseSlow`\r\n* Add default `_parse` implementation to `ZodType` so that inherited custom types can call `super._parse(...)`\r\n\r\nI also added some tests for the backwards compatibility.",
          "Merged in 3.3! \r\n\r\nFor now ZodError still subclasses Error but that still might change that in a future release. I decided to forgo including your compatibility changes from (c0744c7)[https://github.com/colinhacks/zod/commit/c0744c7d6b514808051af30eab1edb6764a813a3]. I don't think it's worth the additional complexity, since I have no evidence that anyone is actually subclassing ZodType in the wild. In any case, since this pattern isn't actually documented, I'm not particularly concerned about publishing this as a minor version. \r\n\r\nAgain, incredible work! \ud83d\ude4c ",
          "Awesome! Thank you for your quick actions to get this merged! \ud83d\udc4c "
        ]
      },
      {
        "pr_number": 492,
        "title": "Performance improvements",
        "body": "Hello and first thanks for this project! I've hoped to find a validation library that focuses on data validation, has simple and intuitive API and can infer TS types correctly from the schemas. When I encountered `zod`, I knew that it was exactly what I had been searching for. So I happily started using the library but soon I unfortunately realized that there were some performance issues that made the validations run very slow and due these issues I had to drop the library from production. I felt very sad about it. \ud83d\ude22 So here is my contribution that'd hopefully help to fix some of these issues in future.\r\n\r\ntl;dr; this PR introduces some changes that bring **100-200x speedup** compared to the current `master` \r\n\r\n### Baseline\r\n\r\nThere is already some prior research done about the performance, such as #292 and #459 which have found that excessive `ZodError` allocation is the main cause for poor performance and one fix would be to remove the `Error` base class (and hence remove the costly stacktrace allocation). And if I've understood correctly, the main concern is that the stacktrace could be relevant for the library uses (and to be honest, I share this concern as well).\r\n\r\nSo I took a look at the codebase and (like @reinismu [said](https://github.com/colinhacks/zod/pull/292#discussion_r567867700)) it heavily overuses `try/catch`. The codebase also implements `PseudoPromise` abstraction that allows to support async refinements. If we (mentally) unroll the structure, the code flow looks like the following:\r\n\r\n```js\r\n// level 1\r\ntry {\r\n  const err1 = new ZodError()\r\n  if (invalid(level1)) throw err1\r\n  // level 2\r\n  try {\r\n    const err2 = new ZodError()\r\n    if (invalid(level2)) throw err2\r\n    // level 3 \r\n    try {\r\n      const err3 = new ZodError()\r\n      if (invalid(level3)) throw err3\r\n      // level ...\r\n      try {\r\n        // ...\r\n      } catch (err) {\r\n        // ...\r\n      }\r\n    } catch (err) {\r\n      err2.addIssues(err.issues)\r\n      throw err2\r\n    }\r\n  } catch (err) {\r\n    err1.addIssues(err.issues)\r\n    throw err1\r\n  }\r\n} catch (err) {\r\n  baseErr.addIssues(err.issues)\r\n  throw baseErr\r\n}\r\n```\r\n\r\nLike you can see, the code allocates quite many errors. It also accumulates issues per level which is a lot of extra work. In addition this flow is orchestrated by `PseudoPromise` abstraction that also adds some extra allocation and calculation to the parsing.\r\n\r\nAt this point, I ran the (excellent!) benchmarks introduced in #431 by @scotttrinh and got the following results on my '20 MBP (Node 16):\r\n<details>\r\n  <summary> ** Baseline (~50k ops/s) ** </summary>\r\n  \r\n```\r\nz.string: empty string x 69,126 ops/sec \u00b11.71% (86 runs sampled)\r\nz.string: short string x 66,917 ops/sec \u00b14.43% (85 runs sampled)\r\nz.string: long string x 69,844 ops/sec \u00b14.63% (87 runs sampled)\r\nz.string: invalid: null x 51,296 ops/sec \u00b14.51% (82 runs sampled)\r\nz.string: manual parser: long x 878,697,948 ops/sec \u00b11.60% (85 runs sampled)\r\nz.object: empty: valid x 31,908 ops/sec \u00b18.31% (81 runs sampled)\r\nz.object: empty: valid: extra keys x 35,451 ops/sec \u00b16.17% (84 runs sampled)\r\nz.object: empty: invalid: null x 56,126 ops/sec \u00b11.50% (89 runs sampled)\r\nz.object: short: valid x 20,422 ops/sec \u00b16.28% (84 runs sampled)\r\nz.object: short: valid: extra keys x 19,344 ops/sec \u00b16.31% (79 runs sampled)\r\nz.object: short: invalid: null x 50,725 ops/sec \u00b11.61% (82 runs sampled)\r\nz.object: long: valid x 10,492 ops/sec \u00b13.93% (80 runs sampled)\r\nz.object: long: valid: extra keys x 9,877 ops/sec \u00b17.00% (80 runs sampled)\r\nz.object: long: invalid: null x 51,332 ops/sec \u00b11.65% (88 runs sampled)\r\n```\r\n\r\n</details>\r\n\r\n\r\n### 1. Optimize flow control\r\n\r\n \r\nSo what I did is that I changed the execution flow into more lightweight variant which allows better composition of parsing functions and minimizes the required allocations, in pseudo:\r\n\r\n```js \r\nconst level1Valid = valid(level1Data)\r\nconst level2Valid = level1Valid && valid(level2Data)\r\nconst level3Valid = level2Valid && valid(level3Data)\r\nconst levelNParsed = level3Valid && valid(levelNData) ? makeResult(levelNData) : INVALID\r\nconst level3Parsed = levelNParsed === INVALID ? INVALID : makeResult(level3Data, levelNParsed)\r\nconst level2Parsed = level3Parsed === INVALID ? INVALID : makeResult(level2Data, level3Parsed)\r\nconst level1Parsed = level2Parsed === INVALID ? INVALID : makeResult(level1Data, level3Parsed)\r\n```\r\nLike in the current implementation, the parsing context is passed as a parameter to `_parse` but the difference is that errors are not indicated by throwing and catching them. Instead, `_parse` returns a result object of `ParseResult = INVALID | OK(parsed)`. If any parsing errors occur, issues are stored directly into the context: we known that if parsing fails, the call stack will eventually be returning to the top level `parse` (or `safeParse`) where we can read all the issues and **then** throw an error with all of those issues. This means that **there are no breaking changes to the public API** but the difference in performance is huge.\r\n\r\nOf course the implementation must also support async refinements so the parse result type is actually `ParseResult = INVALID | OK(parsed) | ASYNC(INVALID | OK(parsed))` and parsers must implement the async case as well. Luckily the number of those cases is relatively low (basically collections like object, array, tuple, record, set, list) so I could add specialized performance-optimized implementations for each case. I ran benchmarks again and the different is significant. And the best part is that there were absolutely **no changes to the public API** - all tests are passing without any modifications on them!\r\n\r\n<details>\r\n  <summary> ** Optimized flow (~5M ops/s) ** </summary>\r\n  \r\n```\r\nz.string: empty string x 13,120,643 ops/sec \u00b11.27% (94 runs sampled)\r\nz.string: short string x 12,989,836 ops/sec \u00b11.45% (92 runs sampled)\r\nz.string: long string x 12,788,053 ops/sec \u00b11.21% (91 runs sampled)\r\nz.string: invalid: null x 118,915 ops/sec \u00b11.32% (81 runs sampled)\r\nz.string: manual parser: long x 876,793,503 ops/sec \u00b11.38% (82 runs sampled)\r\nz.object: empty: valid x 5,437,250 ops/sec \u00b14.61% (88 runs sampled)\r\nz.object: empty: valid: extra keys x 5,086,771 ops/sec \u00b11.36% (88 runs sampled)\r\nz.object: empty: invalid: null x 127,522 ops/sec \u00b13.38% (90 runs sampled)\r\nz.object: short: valid x 3,103,337 ops/sec \u00b11.53% (93 runs sampled)\r\nz.object: short: valid: extra keys x 3,223,728 ops/sec \u00b11.64% (90 runs sampled)\r\nz.object: short: invalid: null x 126,815 ops/sec \u00b14.66% (91 runs sampled)\r\nz.object: long: valid x 1,482,835 ops/sec \u00b11.32% (94 runs sampled)\r\nz.object: long: valid: extra keys x 1,411,238 ops/sec \u00b11.22% (91 runs sampled)\r\nz.object: long: invalid: null x 120,033 ops/sec \u00b13.74% (87 runs sampled)\r\n```\r\n\r\n</details>\r\n\r\n### 2. Add some extra optimizations\r\n\r\nIn addition to the flow, I also did some minor optimizations:\r\n\r\n* https://github.com/milankinen/zod/commit/341e9ddc46dbf12f9860c8aa7c5eb177e9bc27ad - change context path updates to use persistent O(1) list instead of O(n) array copy\r\n* https://github.com/milankinen/zod/commit/423c9a97f14fec5ce0b66d5f74378802161a9c97 - cache object shape information over subsequent parse events\r\n* https://github.com/milankinen/zod/commit/89088c2570230d9dd17e57c5e795b9babba69c57 - switch-case parsed type calculation\r\n\r\nWith these smaller local optimizations, I could squeeze some extra cycles:\r\n\r\n<details>\r\n  <summary> ** Optimized flow + local optimizations (~7,5M ops/s) ** </summary>\r\n  \r\n```\r\nz.string: empty string x 11,050,585 ops/sec \u00b11.34% (89 runs sampled)\r\nz.string: short string x 10,931,303 ops/sec \u00b11.58% (89 runs sampled)\r\nz.string: long string x 11,056,030 ops/sec \u00b11.43% (94 runs sampled)\r\nz.string: invalid: null x 118,733 ops/sec \u00b11.41% (90 runs sampled)\r\nz.string: manual parser: long x 864,371,553 ops/sec \u00b11.41% (82 runs sampled)\r\nz.object: empty: valid x 7,120,299 ops/sec \u00b14.26% (88 runs sampled)\r\nz.object: empty: valid: extra keys x 7,585,016 ops/sec \u00b11.28% (93 runs sampled)\r\nz.object: empty: invalid: null x 129,548 ops/sec \u00b13.68% (89 runs sampled)\r\nz.object: short: valid x 4,777,457 ops/sec \u00b11.35% (94 runs sampled)\r\nz.object: short: valid: extra keys x 5,014,443 ops/sec \u00b14.73% (90 runs sampled)\r\nz.object: short: invalid: null x 127,899 ops/sec \u00b13.33% (89 runs sampled)\r\nz.object: long: valid x 2,173,238 ops/sec \u00b11.34% (94 runs sampled)\r\nz.object: long: valid: extra keys x 2,125,664 ops/sec \u00b11.29% (91 runs sampled)\r\nz.object: long: invalid: null x 117,491 ops/sec \u00b13.75% (81 runs sampled)\r\n```\r\n\r\n</details>\r\n\r\nI also ran the https://github.com/moltar/typescript-runtime-type-benchmarks with current master (`zod` in the graphics) and optimizations (`milankinen/zod` in the graphics) and got the following results:\r\n\r\n![Som graphics](https://raw.githubusercontent.com/milankinen/zod/performance-improvements/data-type-sans-outliers-v16.0.0.png)\r\n\r\n<details>\r\n  <summary> Full onsole output </summary>\r\n  \r\n```\r\nRunning \"data-type-sans-outliers\" suite...\r\n decoders:\r\n    328 543 ops/s, \u00b11.64%     | 92.91% slower\r\n\r\n  io-ts:\r\n    1 924 017 ops/s, \u00b11.39%   | 58.49% slower\r\n\r\n  jointz:\r\n    2 303 597 ops/s, \u00b11.18%   | 50.3% slower\r\n\r\n  json-decoder:\r\n    1 205 792 ops/s, \u00b11.44%   | 73.98% slower\r\n\r\n  @mojotech/json-type-validation:\r\n    1 801 597 ops/s, \u00b11.40%   | 61.13% slower\r\n\r\n  myzod:\r\n    2 115 310 ops/s, \u00b11.29%   | 54.36% slower\r\n\r\n  purify-ts:\r\n    1 023 057 ops/s, \u00b11.73%   | 77.93% slower\r\n\r\n  rulr:\r\n    1 242 731 ops/s, \u00b11.36%   | 73.19% slower\r\n\r\n  runtypes:\r\n    161 748 ops/s, \u00b11.66%     | 96.51% slower\r\n\r\n  simple-runtypes:\r\n    3 077 120 ops/s, \u00b11.23%   | 33.61% slower\r\n\r\n  superstruct:\r\n    152 440 ops/s, \u00b11.81%     | 96.71% slower\r\n\r\n  toi:\r\n    874 245 ops/s, \u00b11.41%     | 81.14% slower\r\n\r\n  ts-utils:\r\n    64 927 ops/s, \u00b160.92%      | 98.6% slower\r\n\r\n  @typeofweb/schema:\r\n    1 320 077 ops/s, \u00b11.54%   | 71.52% slower\r\n\r\n  valita:\r\n    4 634 932 ops/s, \u00b11.12%   | fastest\r\n\r\n  yup:\r\n    42 782 ops/s, \u00b11.14%      | 99.08% slower\r\n\r\n  zod:\r\n    2 981 ops/s, \u00b117.43%       | slowest, 99.94% slower\r\n\r\n  milankinen/zod:\r\n    469 237 ops/s, \u00b141.76%     | 89.88% slower\r\n\r\n  ts-interface-checker:\r\n    3 340 228 ops/s, \u00b11.29%   | 27.93% slower\r\n\r\nFinished 23 cases!\r\n  Fastest: valita\r\n  Slowest: zod\r\n\r\n```\r\n\r\n</details>\r\n\r\n### Conclusions\r\n\r\nI'm very happy that I found a way to significantly improve the performance while maintaining this excellent API. Honestly I don't believe or expect that this PR will be merged to the upstream as it is but I at least hope that it'll give some pointers for the future improvements. I really like `zod` as a library and hope that some day the performance gets fixed so that it won't prevent me from using this in production as well. :slightly_smiling_face:\r\n\r\nCheers!\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/492",
        "comments": [
          "PRs like this remind me why I love open source. Truly glorious stuff Matti!\r\n\r\nI've been looking through the code and I think I understand the new execution system. I like it! Getting rid of all those spaghetti code PseudoPromise methods is so satisfying.\r\n\r\nFor grins, I re-ran the benchmarks after removing the `Error` base class, and saw nearly 3x performance improvements on all invalid results. Which is a pretty compelling reason to remove it...\r\n\r\n```\r\nz.string: empty string x 9,702,190 ops/sec \u00b10.89% (87 runs sampled)\r\nz.string: short string x 9,628,797 ops/sec \u00b10.84% (92 runs sampled)\r\nz.string: long string x 9,472,395 ops/sec \u00b12.01% (88 runs sampled)\r\nz.string: invalid: null x 419,983 ops/sec \u00b11.34% (87 runs sampled)\r\nz.string: manual parser: long x 973,337,378 ops/sec \u00b10.75% (96 runs sampled)\r\nz.object: empty: valid x 7,065,026 ops/sec \u00b11.18% (87 runs sampled)\r\nz.object: empty: valid: extra keys x 8,204,405 ops/sec \u00b10.94% (92 runs sampled)\r\nz.object: empty: invalid: null x 537,947 ops/sec \u00b11.76% (86 runs sampled)\r\nz.object: short: valid x 4,047,468 ops/sec \u00b10.96% (89 runs sampled)\r\nz.object: short: valid: extra keys x 4,494,936 ops/sec \u00b11.06% (86 runs sampled)\r\nz.object: short: invalid: null x 554,633 ops/sec \u00b11.06% (92 runs sampled)\r\nz.object: long: valid x 2,041,231 ops/sec \u00b11.07% (86 runs sampled)\r\nz.object: long: valid: extra keys x 2,031,685 ops/sec \u00b11.13% (88 runs sampled)\r\nz.object: long: invalid: null x 535,857 ops/sec \u00b12.65% (82 runs sampled)\r\n```\r\n\r\nYou say you don't expect that this PR will be merged...but I can't see any reason why not. Seems like a definitive improvement in terms of code understandability, perf, and elegance. Am I missing anything?\r\n\r\nI think combining this with some of the changes by @scotttrinh will be the best of all worlds: changing the format of `ZodInvalidUnionIssue` and eliminating the Error subclass for ZodError (cc @lilred). Scott what do you think?",
          ">You say you don't expect that this PR will be merged...but I can't see any reason why not. Seems like a definitive improvement in terms of code understandability, perf, and elegance. Am I missing anything?\r\n\r\nWell, this PR introduces quite big changes to the internals which can be an issue sometimes. \ud83d\ude05 But I'm glad that you approve those changes, technically there should be no reason not to merge this (except the conflicts that must be resolved first). \ud83d\ude42 This PR is forked from #431 so perhaps that could be merged first as a separate PR?\r\n\r\n>For grins, I re-ran the benchmarks after removing the Error base class, and saw nearly 3x performance improvements on all invalid results. Which is a pretty compelling reason to remove it...\r\n\r\nYeah, removing the `Error` class can improve the performance for invalid cases quite a lot so if bumping the major version does not scare, then we should definitely go for it!\r\n\r\nAnother, a bit more conservative option could be to keep `Error` sub-classing in `.parse` and `.parseAsync` so that the thrown error has a stacktrace, but return `{success: false, issues: ZodIssue[])` from `safeParse` and `spa`? With this, performance critical applications could use safe version. That said, both approaches are not backward compatible so they'd require a major version bump. \r\n\r\n>I think combining this with some of the changes by @scotttrinh will be the best of all worlds: changing the format of ZodInvalidUnionIssue and eliminating the Error subclass for ZodError (cc @lilred). Scott what do you think?\r\n\r\nI definitely agree with this \ud83d\udc4d Storing error instances inside another error won't give any benefits.\r\n\r\n",
          "> I think combining this with some of the changes by @scotttrinh will be the best of all worlds: changing the format of `ZodInvalidUnionIssue` and eliminating the Error subclass for ZodError (cc @lilred). Scott what do you think?\n\nI don't think we should wait on my opinion here, I was mostly working off existing work! I'll have time in the next few hours to review and it sounds like we will need to rebase or deconflict this on the latest, so I'm happy to help with that, too.",
          "FYI @colinhacks I don't have bandwidth to review this in a timely manner, I don't think you were awaiting my review but just so it's clear feel free to proceed without me.",
          "@scotttrinh thanks for the review comments! I committed the suggested changes. There are still some conflicting files because this branch is built on top of #431 which is a little bit behind the current master. What do you think is the best option? I could either:\r\n\r\n1. Rebase this whole branch with the benchmark commits onto current master\r\n2. Rebase only my commits and leave benchmark branch to be merged separately\r\n\r\nAlso one other thing I noticed when I was running the tests with the new implementation was that [this test](https://github.com/colinhacks/zod/blob/master/src/__tests__/async-parsing.test.ts#L364-L387) seemed to have an expectation that was conflicting with the description. The description says that \"early async failure prevents follow-up refinement checks\". However, the expected `count` value is 2, indicating that both refinements are run, even though the first one returns `false`. I didn't want to break the existing behaviour so I removed the refinement prevention but what is actually the expected behaviour?",
          "Nice work!\r\nStill need some work to reach https://github.com/badrap/valita level, but at least it shouldn't be the bottleneck of the whole application after this :)",
          "Thanks! Valita is indeed a nice piece of software. Of course running these kind of microbenchmarks is a bit dangerous because benchmark setup might favour some libraries. For example valita seems to be built built on top of assumption that validated object does not contain any extra keys and if that happens, it falls back to a slower execution path (its still pretty damn fast though \ud83d\ude05!). In `zod` extra keys do not matter (if running with default .strip mode).\r\n\r\nIf we add some extra keys to the data, we can see that among the \"popular\" libs we're almost in par.\r\n```\r\n> typescript-runtime-type-benchmarks@1.0.0 start\r\n> ts-node index.ts\r\n\r\nRunning \"data-type-sans-outliers\" suite...\r\nProgress: 100%\r\n\r\n  io-ts:\r\n    1 562 873 ops/s, \u00b131.23%   | 11.62% slower\r\n\r\n  runtypes:\r\n    166 728 ops/s, \u00b10.70%     | 90.57% slower\r\n\r\n  valita:\r\n    1 768 350 ops/s, \u00b10.72%   | fastest\r\n\r\n  zod:\r\n    3 458 ops/s, \u00b114.52%       | slowest, 99.8% slower\r\n\r\n  milankinen/zod:\r\n    801 172 ops/s, \u00b11.18%     | 54.69% slower\r\n\r\nFinished 5 cases!\r\n  Fastest: valita\r\n  Slowest: zod\r\n```\r\n\r\nOn the other hand the test setup might be able to put in such way that also the new implementation seem a lot slower than others. \ud83d\ude04 ",
          "@milankinen \r\n\r\n> Also one other thing I noticed when I was running the tests with the new implementation was that this test seemed to have an expectation that was conflicting with the description. The description says that \"early async failure prevents follow-up refinement checks\". However, the expected count value is 2, indicating that both refinements are run, even though the first one returns false. I didn't want to break the existing behaviour so I removed the refinement prevention but what is actually the expected behaviour?\r\n\r\nI'd say even if the original _intent_ was to prevent the refinement, the fact that the current version does not prevent it (given the tests) means that's the behavior to preserve. If we're collecting possible breaking changes around these updates here, maybe it's worth considering that more holistically, but I imagine we want to minimize breakage. Definitely a @colinhacks call.\r\n\r\n> There are still some conflicting files because this branch is built on top of #431 which is a little bit behind the current master. What do you think is the best option?\r\n\r\nI'm curious about this question as well. In my opinion, I'd rather see us concentrate on landing your changes here while incorporating some of the additional changes to `ZodError` that the other PR introduces, but I want to get some marching orders from Colin around this since it seems like we're all in a good position to take on the work.",
          ">I'm curious about this question as well. In my opinion, I'd rather see us concentrate on landing your changes here while incorporating some of the additional changes to ZodError that the other PR introduces, but I want to get some marching orders from Colin around this since it seems like we're all in a good position to take on the work.\r\n\r\nI guess you're talking about #459 which introduces also the `ZodError` changes? I mean, #431 introduces only the benchmarks (no ZodError changes) and is mergeable by its own (and not having any conflicts atm), so I was just wondering that do we want to merge it first as a separate PR? Then I could rebase this branch of mine on top of the master and drop the benchmark commit from this PR.  \r\n\r\nOr we could just merge this entirely which also merges benchmarks to the master, making #431 obsolete. Both options are fine for me.\r\n",
          "Yeah, all of these options are on the table for me, too, but I want to minimize the amount of work (and rework) that we need to do to land _these_ changes, regardless of what we choose to do about `ZodError`.\r\n\r\n@colinhacks I think we're all ready to put some work in here if you have a clear sense of what you want to see happen. Separate PRs for the different elements (benchmarking, ZodError changes, control flow changes)? Combine all of the performance work onto this branch? If we want to combine these branches,  what are your thoughts on the nature of breaking changes around further `ZodError` and `ZodUnion`-specific issues?",
          "I already fixed all the conflicts on this PR locally. My plan is to redo/merge in Scott's ZodError changes where relevant in my local branch, then merge the whole thing as one big PR. \r\n\r\nI don't think eliminating the Error subclass is enough to merit a new major version. ZodError implements the entire Error interface except `.stack` (we could add `stack = \"\"` as a property) so it's unlikely to break much code. Sorry Matti, as a \"code janitor\" (love that \ud83d\ude1b) this probably gives you an aneurysm.\r\n\r\nUnfortunately there's a larger backwards compatibility problem: the new return type of the `_parse` method. Despite the fact that it's prefixed, users may have defined custom subclasses that rely on the old method signature. It's the [recommended way](https://github.com/colinhacks/zod/issues/307) to implement custom ZodType subclasses. Ideally we'd be able to maintain compatibility somehow, I'll look into it. If it's not, we can just break this too, since it's not officially documented. ",
          ">ZodError implements the entire Error interface except .stack (we could add stack = \"\" as a property) so it's unlikely to break much code. Sorry Matti, as a \"code janitor\" (love that \ud83d\ude1b) this probably gives you an aneurysm.\r\n\r\nI'm not worried about the property itself but its contents. \ud83d\ude04 If you decide to remove the `Error` inheritance, then it's fine for me to drop the `stack` property as well.\r\n\r\n> Unfortunately there's a larger backwards compatibility problem: the new return type of the _parse method. ...\r\n\r\nShiii.. I thought it was for internal purposes only! This commit https://github.com/colinhacks/zod/pull/492/commits/c0744c7d6b514808051af30eab1edb6764a813a3 attempts to restore the backwards compatibility. It basically does the following:\r\n\r\n* Restore old `PseudoPromise` implementation and rename new \"PseudoPromise\" construct to `AsyncValue`\r\n* Rename new \"fast\" internal parse to `_parseFast` - all built-in `ZodType` sub-classes implement this\r\n* Add `_parseSlow` to `ZodType` that will make the conversion from new parameter format to old format and calls `_parse` \r\n* Add logic to detect whether we can use \"fast\" parse flow or \"slow\" depending whether the type instance has `_parse` overridden or not\r\n* Restore `_internalParse` that uses the detected execution flow - all internal calls should call this instead of `_parse`, `_parseFast` or `_parseSlow`\r\n* Add default `_parse` implementation to `ZodType` so that inherited custom types can call `super._parse(...)`\r\n\r\nI also added some tests for the backwards compatibility.",
          "Merged in 3.3! \r\n\r\nFor now ZodError still subclasses Error but that still might change that in a future release. I decided to forgo including your compatibility changes from (c0744c7)[https://github.com/colinhacks/zod/commit/c0744c7d6b514808051af30eab1edb6764a813a3]. I don't think it's worth the additional complexity, since I have no evidence that anyone is actually subclassing ZodType in the wild. In any case, since this pattern isn't actually documented, I'm not particularly concerned about publishing this as a minor version. \r\n\r\nAgain, incredible work! \ud83d\ude4c ",
          "Awesome! Thank you for your quick actions to get this merged! \ud83d\udc4c "
        ]
      },
      {
        "pr_number": 492,
        "title": "Performance improvements",
        "body": "Hello and first thanks for this project! I've hoped to find a validation library that focuses on data validation, has simple and intuitive API and can infer TS types correctly from the schemas. When I encountered `zod`, I knew that it was exactly what I had been searching for. So I happily started using the library but soon I unfortunately realized that there were some performance issues that made the validations run very slow and due these issues I had to drop the library from production. I felt very sad about it. \ud83d\ude22 So here is my contribution that'd hopefully help to fix some of these issues in future.\r\n\r\ntl;dr; this PR introduces some changes that bring **100-200x speedup** compared to the current `master` \r\n\r\n### Baseline\r\n\r\nThere is already some prior research done about the performance, such as #292 and #459 which have found that excessive `ZodError` allocation is the main cause for poor performance and one fix would be to remove the `Error` base class (and hence remove the costly stacktrace allocation). And if I've understood correctly, the main concern is that the stacktrace could be relevant for the library uses (and to be honest, I share this concern as well).\r\n\r\nSo I took a look at the codebase and (like @reinismu [said](https://github.com/colinhacks/zod/pull/292#discussion_r567867700)) it heavily overuses `try/catch`. The codebase also implements `PseudoPromise` abstraction that allows to support async refinements. If we (mentally) unroll the structure, the code flow looks like the following:\r\n\r\n```js\r\n// level 1\r\ntry {\r\n  const err1 = new ZodError()\r\n  if (invalid(level1)) throw err1\r\n  // level 2\r\n  try {\r\n    const err2 = new ZodError()\r\n    if (invalid(level2)) throw err2\r\n    // level 3 \r\n    try {\r\n      const err3 = new ZodError()\r\n      if (invalid(level3)) throw err3\r\n      // level ...\r\n      try {\r\n        // ...\r\n      } catch (err) {\r\n        // ...\r\n      }\r\n    } catch (err) {\r\n      err2.addIssues(err.issues)\r\n      throw err2\r\n    }\r\n  } catch (err) {\r\n    err1.addIssues(err.issues)\r\n    throw err1\r\n  }\r\n} catch (err) {\r\n  baseErr.addIssues(err.issues)\r\n  throw baseErr\r\n}\r\n```\r\n\r\nLike you can see, the code allocates quite many errors. It also accumulates issues per level which is a lot of extra work. In addition this flow is orchestrated by `PseudoPromise` abstraction that also adds some extra allocation and calculation to the parsing.\r\n\r\nAt this point, I ran the (excellent!) benchmarks introduced in #431 by @scotttrinh and got the following results on my '20 MBP (Node 16):\r\n<details>\r\n  <summary> ** Baseline (~50k ops/s) ** </summary>\r\n  \r\n```\r\nz.string: empty string x 69,126 ops/sec \u00b11.71% (86 runs sampled)\r\nz.string: short string x 66,917 ops/sec \u00b14.43% (85 runs sampled)\r\nz.string: long string x 69,844 ops/sec \u00b14.63% (87 runs sampled)\r\nz.string: invalid: null x 51,296 ops/sec \u00b14.51% (82 runs sampled)\r\nz.string: manual parser: long x 878,697,948 ops/sec \u00b11.60% (85 runs sampled)\r\nz.object: empty: valid x 31,908 ops/sec \u00b18.31% (81 runs sampled)\r\nz.object: empty: valid: extra keys x 35,451 ops/sec \u00b16.17% (84 runs sampled)\r\nz.object: empty: invalid: null x 56,126 ops/sec \u00b11.50% (89 runs sampled)\r\nz.object: short: valid x 20,422 ops/sec \u00b16.28% (84 runs sampled)\r\nz.object: short: valid: extra keys x 19,344 ops/sec \u00b16.31% (79 runs sampled)\r\nz.object: short: invalid: null x 50,725 ops/sec \u00b11.61% (82 runs sampled)\r\nz.object: long: valid x 10,492 ops/sec \u00b13.93% (80 runs sampled)\r\nz.object: long: valid: extra keys x 9,877 ops/sec \u00b17.00% (80 runs sampled)\r\nz.object: long: invalid: null x 51,332 ops/sec \u00b11.65% (88 runs sampled)\r\n```\r\n\r\n</details>\r\n\r\n\r\n### 1. Optimize flow control\r\n\r\n \r\nSo what I did is that I changed the execution flow into more lightweight variant which allows better composition of parsing functions and minimizes the required allocations, in pseudo:\r\n\r\n```js \r\nconst level1Valid = valid(level1Data)\r\nconst level2Valid = level1Valid && valid(level2Data)\r\nconst level3Valid = level2Valid && valid(level3Data)\r\nconst levelNParsed = level3Valid && valid(levelNData) ? makeResult(levelNData) : INVALID\r\nconst level3Parsed = levelNParsed === INVALID ? INVALID : makeResult(level3Data, levelNParsed)\r\nconst level2Parsed = level3Parsed === INVALID ? INVALID : makeResult(level2Data, level3Parsed)\r\nconst level1Parsed = level2Parsed === INVALID ? INVALID : makeResult(level1Data, level3Parsed)\r\n```\r\nLike in the current implementation, the parsing context is passed as a parameter to `_parse` but the difference is that errors are not indicated by throwing and catching them. Instead, `_parse` returns a result object of `ParseResult = INVALID | OK(parsed)`. If any parsing errors occur, issues are stored directly into the context: we known that if parsing fails, the call stack will eventually be returning to the top level `parse` (or `safeParse`) where we can read all the issues and **then** throw an error with all of those issues. This means that **there are no breaking changes to the public API** but the difference in performance is huge.\r\n\r\nOf course the implementation must also support async refinements so the parse result type is actually `ParseResult = INVALID | OK(parsed) | ASYNC(INVALID | OK(parsed))` and parsers must implement the async case as well. Luckily the number of those cases is relatively low (basically collections like object, array, tuple, record, set, list) so I could add specialized performance-optimized implementations for each case. I ran benchmarks again and the different is significant. And the best part is that there were absolutely **no changes to the public API** - all tests are passing without any modifications on them!\r\n\r\n<details>\r\n  <summary> ** Optimized flow (~5M ops/s) ** </summary>\r\n  \r\n```\r\nz.string: empty string x 13,120,643 ops/sec \u00b11.27% (94 runs sampled)\r\nz.string: short string x 12,989,836 ops/sec \u00b11.45% (92 runs sampled)\r\nz.string: long string x 12,788,053 ops/sec \u00b11.21% (91 runs sampled)\r\nz.string: invalid: null x 118,915 ops/sec \u00b11.32% (81 runs sampled)\r\nz.string: manual parser: long x 876,793,503 ops/sec \u00b11.38% (82 runs sampled)\r\nz.object: empty: valid x 5,437,250 ops/sec \u00b14.61% (88 runs sampled)\r\nz.object: empty: valid: extra keys x 5,086,771 ops/sec \u00b11.36% (88 runs sampled)\r\nz.object: empty: invalid: null x 127,522 ops/sec \u00b13.38% (90 runs sampled)\r\nz.object: short: valid x 3,103,337 ops/sec \u00b11.53% (93 runs sampled)\r\nz.object: short: valid: extra keys x 3,223,728 ops/sec \u00b11.64% (90 runs sampled)\r\nz.object: short: invalid: null x 126,815 ops/sec \u00b14.66% (91 runs sampled)\r\nz.object: long: valid x 1,482,835 ops/sec \u00b11.32% (94 runs sampled)\r\nz.object: long: valid: extra keys x 1,411,238 ops/sec \u00b11.22% (91 runs sampled)\r\nz.object: long: invalid: null x 120,033 ops/sec \u00b13.74% (87 runs sampled)\r\n```\r\n\r\n</details>\r\n\r\n### 2. Add some extra optimizations\r\n\r\nIn addition to the flow, I also did some minor optimizations:\r\n\r\n* https://github.com/milankinen/zod/commit/341e9ddc46dbf12f9860c8aa7c5eb177e9bc27ad - change context path updates to use persistent O(1) list instead of O(n) array copy\r\n* https://github.com/milankinen/zod/commit/423c9a97f14fec5ce0b66d5f74378802161a9c97 - cache object shape information over subsequent parse events\r\n* https://github.com/milankinen/zod/commit/89088c2570230d9dd17e57c5e795b9babba69c57 - switch-case parsed type calculation\r\n\r\nWith these smaller local optimizations, I could squeeze some extra cycles:\r\n\r\n<details>\r\n  <summary> ** Optimized flow + local optimizations (~7,5M ops/s) ** </summary>\r\n  \r\n```\r\nz.string: empty string x 11,050,585 ops/sec \u00b11.34% (89 runs sampled)\r\nz.string: short string x 10,931,303 ops/sec \u00b11.58% (89 runs sampled)\r\nz.string: long string x 11,056,030 ops/sec \u00b11.43% (94 runs sampled)\r\nz.string: invalid: null x 118,733 ops/sec \u00b11.41% (90 runs sampled)\r\nz.string: manual parser: long x 864,371,553 ops/sec \u00b11.41% (82 runs sampled)\r\nz.object: empty: valid x 7,120,299 ops/sec \u00b14.26% (88 runs sampled)\r\nz.object: empty: valid: extra keys x 7,585,016 ops/sec \u00b11.28% (93 runs sampled)\r\nz.object: empty: invalid: null x 129,548 ops/sec \u00b13.68% (89 runs sampled)\r\nz.object: short: valid x 4,777,457 ops/sec \u00b11.35% (94 runs sampled)\r\nz.object: short: valid: extra keys x 5,014,443 ops/sec \u00b14.73% (90 runs sampled)\r\nz.object: short: invalid: null x 127,899 ops/sec \u00b13.33% (89 runs sampled)\r\nz.object: long: valid x 2,173,238 ops/sec \u00b11.34% (94 runs sampled)\r\nz.object: long: valid: extra keys x 2,125,664 ops/sec \u00b11.29% (91 runs sampled)\r\nz.object: long: invalid: null x 117,491 ops/sec \u00b13.75% (81 runs sampled)\r\n```\r\n\r\n</details>\r\n\r\nI also ran the https://github.com/moltar/typescript-runtime-type-benchmarks with current master (`zod` in the graphics) and optimizations (`milankinen/zod` in the graphics) and got the following results:\r\n\r\n![Som graphics](https://raw.githubusercontent.com/milankinen/zod/performance-improvements/data-type-sans-outliers-v16.0.0.png)\r\n\r\n<details>\r\n  <summary> Full onsole output </summary>\r\n  \r\n```\r\nRunning \"data-type-sans-outliers\" suite...\r\n decoders:\r\n    328 543 ops/s, \u00b11.64%     | 92.91% slower\r\n\r\n  io-ts:\r\n    1 924 017 ops/s, \u00b11.39%   | 58.49% slower\r\n\r\n  jointz:\r\n    2 303 597 ops/s, \u00b11.18%   | 50.3% slower\r\n\r\n  json-decoder:\r\n    1 205 792 ops/s, \u00b11.44%   | 73.98% slower\r\n\r\n  @mojotech/json-type-validation:\r\n    1 801 597 ops/s, \u00b11.40%   | 61.13% slower\r\n\r\n  myzod:\r\n    2 115 310 ops/s, \u00b11.29%   | 54.36% slower\r\n\r\n  purify-ts:\r\n    1 023 057 ops/s, \u00b11.73%   | 77.93% slower\r\n\r\n  rulr:\r\n    1 242 731 ops/s, \u00b11.36%   | 73.19% slower\r\n\r\n  runtypes:\r\n    161 748 ops/s, \u00b11.66%     | 96.51% slower\r\n\r\n  simple-runtypes:\r\n    3 077 120 ops/s, \u00b11.23%   | 33.61% slower\r\n\r\n  superstruct:\r\n    152 440 ops/s, \u00b11.81%     | 96.71% slower\r\n\r\n  toi:\r\n    874 245 ops/s, \u00b11.41%     | 81.14% slower\r\n\r\n  ts-utils:\r\n    64 927 ops/s, \u00b160.92%      | 98.6% slower\r\n\r\n  @typeofweb/schema:\r\n    1 320 077 ops/s, \u00b11.54%   | 71.52% slower\r\n\r\n  valita:\r\n    4 634 932 ops/s, \u00b11.12%   | fastest\r\n\r\n  yup:\r\n    42 782 ops/s, \u00b11.14%      | 99.08% slower\r\n\r\n  zod:\r\n    2 981 ops/s, \u00b117.43%       | slowest, 99.94% slower\r\n\r\n  milankinen/zod:\r\n    469 237 ops/s, \u00b141.76%     | 89.88% slower\r\n\r\n  ts-interface-checker:\r\n    3 340 228 ops/s, \u00b11.29%   | 27.93% slower\r\n\r\nFinished 23 cases!\r\n  Fastest: valita\r\n  Slowest: zod\r\n\r\n```\r\n\r\n</details>\r\n\r\n### Conclusions\r\n\r\nI'm very happy that I found a way to significantly improve the performance while maintaining this excellent API. Honestly I don't believe or expect that this PR will be merged to the upstream as it is but I at least hope that it'll give some pointers for the future improvements. I really like `zod` as a library and hope that some day the performance gets fixed so that it won't prevent me from using this in production as well. :slightly_smiling_face:\r\n\r\nCheers!\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/492",
        "comments": [
          "PRs like this remind me why I love open source. Truly glorious stuff Matti!\r\n\r\nI've been looking through the code and I think I understand the new execution system. I like it! Getting rid of all those spaghetti code PseudoPromise methods is so satisfying.\r\n\r\nFor grins, I re-ran the benchmarks after removing the `Error` base class, and saw nearly 3x performance improvements on all invalid results. Which is a pretty compelling reason to remove it...\r\n\r\n```\r\nz.string: empty string x 9,702,190 ops/sec \u00b10.89% (87 runs sampled)\r\nz.string: short string x 9,628,797 ops/sec \u00b10.84% (92 runs sampled)\r\nz.string: long string x 9,472,395 ops/sec \u00b12.01% (88 runs sampled)\r\nz.string: invalid: null x 419,983 ops/sec \u00b11.34% (87 runs sampled)\r\nz.string: manual parser: long x 973,337,378 ops/sec \u00b10.75% (96 runs sampled)\r\nz.object: empty: valid x 7,065,026 ops/sec \u00b11.18% (87 runs sampled)\r\nz.object: empty: valid: extra keys x 8,204,405 ops/sec \u00b10.94% (92 runs sampled)\r\nz.object: empty: invalid: null x 537,947 ops/sec \u00b11.76% (86 runs sampled)\r\nz.object: short: valid x 4,047,468 ops/sec \u00b10.96% (89 runs sampled)\r\nz.object: short: valid: extra keys x 4,494,936 ops/sec \u00b11.06% (86 runs sampled)\r\nz.object: short: invalid: null x 554,633 ops/sec \u00b11.06% (92 runs sampled)\r\nz.object: long: valid x 2,041,231 ops/sec \u00b11.07% (86 runs sampled)\r\nz.object: long: valid: extra keys x 2,031,685 ops/sec \u00b11.13% (88 runs sampled)\r\nz.object: long: invalid: null x 535,857 ops/sec \u00b12.65% (82 runs sampled)\r\n```\r\n\r\nYou say you don't expect that this PR will be merged...but I can't see any reason why not. Seems like a definitive improvement in terms of code understandability, perf, and elegance. Am I missing anything?\r\n\r\nI think combining this with some of the changes by @scotttrinh will be the best of all worlds: changing the format of `ZodInvalidUnionIssue` and eliminating the Error subclass for ZodError (cc @lilred). Scott what do you think?",
          ">You say you don't expect that this PR will be merged...but I can't see any reason why not. Seems like a definitive improvement in terms of code understandability, perf, and elegance. Am I missing anything?\r\n\r\nWell, this PR introduces quite big changes to the internals which can be an issue sometimes. \ud83d\ude05 But I'm glad that you approve those changes, technically there should be no reason not to merge this (except the conflicts that must be resolved first). \ud83d\ude42 This PR is forked from #431 so perhaps that could be merged first as a separate PR?\r\n\r\n>For grins, I re-ran the benchmarks after removing the Error base class, and saw nearly 3x performance improvements on all invalid results. Which is a pretty compelling reason to remove it...\r\n\r\nYeah, removing the `Error` class can improve the performance for invalid cases quite a lot so if bumping the major version does not scare, then we should definitely go for it!\r\n\r\nAnother, a bit more conservative option could be to keep `Error` sub-classing in `.parse` and `.parseAsync` so that the thrown error has a stacktrace, but return `{success: false, issues: ZodIssue[])` from `safeParse` and `spa`? With this, performance critical applications could use safe version. That said, both approaches are not backward compatible so they'd require a major version bump. \r\n\r\n>I think combining this with some of the changes by @scotttrinh will be the best of all worlds: changing the format of ZodInvalidUnionIssue and eliminating the Error subclass for ZodError (cc @lilred). Scott what do you think?\r\n\r\nI definitely agree with this \ud83d\udc4d Storing error instances inside another error won't give any benefits.\r\n\r\n",
          "> I think combining this with some of the changes by @scotttrinh will be the best of all worlds: changing the format of `ZodInvalidUnionIssue` and eliminating the Error subclass for ZodError (cc @lilred). Scott what do you think?\n\nI don't think we should wait on my opinion here, I was mostly working off existing work! I'll have time in the next few hours to review and it sounds like we will need to rebase or deconflict this on the latest, so I'm happy to help with that, too.",
          "FYI @colinhacks I don't have bandwidth to review this in a timely manner, I don't think you were awaiting my review but just so it's clear feel free to proceed without me.",
          "@scotttrinh thanks for the review comments! I committed the suggested changes. There are still some conflicting files because this branch is built on top of #431 which is a little bit behind the current master. What do you think is the best option? I could either:\r\n\r\n1. Rebase this whole branch with the benchmark commits onto current master\r\n2. Rebase only my commits and leave benchmark branch to be merged separately\r\n\r\nAlso one other thing I noticed when I was running the tests with the new implementation was that [this test](https://github.com/colinhacks/zod/blob/master/src/__tests__/async-parsing.test.ts#L364-L387) seemed to have an expectation that was conflicting with the description. The description says that \"early async failure prevents follow-up refinement checks\". However, the expected `count` value is 2, indicating that both refinements are run, even though the first one returns `false`. I didn't want to break the existing behaviour so I removed the refinement prevention but what is actually the expected behaviour?",
          "Nice work!\r\nStill need some work to reach https://github.com/badrap/valita level, but at least it shouldn't be the bottleneck of the whole application after this :)",
          "Thanks! Valita is indeed a nice piece of software. Of course running these kind of microbenchmarks is a bit dangerous because benchmark setup might favour some libraries. For example valita seems to be built built on top of assumption that validated object does not contain any extra keys and if that happens, it falls back to a slower execution path (its still pretty damn fast though \ud83d\ude05!). In `zod` extra keys do not matter (if running with default .strip mode).\r\n\r\nIf we add some extra keys to the data, we can see that among the \"popular\" libs we're almost in par.\r\n```\r\n> typescript-runtime-type-benchmarks@1.0.0 start\r\n> ts-node index.ts\r\n\r\nRunning \"data-type-sans-outliers\" suite...\r\nProgress: 100%\r\n\r\n  io-ts:\r\n    1 562 873 ops/s, \u00b131.23%   | 11.62% slower\r\n\r\n  runtypes:\r\n    166 728 ops/s, \u00b10.70%     | 90.57% slower\r\n\r\n  valita:\r\n    1 768 350 ops/s, \u00b10.72%   | fastest\r\n\r\n  zod:\r\n    3 458 ops/s, \u00b114.52%       | slowest, 99.8% slower\r\n\r\n  milankinen/zod:\r\n    801 172 ops/s, \u00b11.18%     | 54.69% slower\r\n\r\nFinished 5 cases!\r\n  Fastest: valita\r\n  Slowest: zod\r\n```\r\n\r\nOn the other hand the test setup might be able to put in such way that also the new implementation seem a lot slower than others. \ud83d\ude04 ",
          "@milankinen \r\n\r\n> Also one other thing I noticed when I was running the tests with the new implementation was that this test seemed to have an expectation that was conflicting with the description. The description says that \"early async failure prevents follow-up refinement checks\". However, the expected count value is 2, indicating that both refinements are run, even though the first one returns false. I didn't want to break the existing behaviour so I removed the refinement prevention but what is actually the expected behaviour?\r\n\r\nI'd say even if the original _intent_ was to prevent the refinement, the fact that the current version does not prevent it (given the tests) means that's the behavior to preserve. If we're collecting possible breaking changes around these updates here, maybe it's worth considering that more holistically, but I imagine we want to minimize breakage. Definitely a @colinhacks call.\r\n\r\n> There are still some conflicting files because this branch is built on top of #431 which is a little bit behind the current master. What do you think is the best option?\r\n\r\nI'm curious about this question as well. In my opinion, I'd rather see us concentrate on landing your changes here while incorporating some of the additional changes to `ZodError` that the other PR introduces, but I want to get some marching orders from Colin around this since it seems like we're all in a good position to take on the work.",
          ">I'm curious about this question as well. In my opinion, I'd rather see us concentrate on landing your changes here while incorporating some of the additional changes to ZodError that the other PR introduces, but I want to get some marching orders from Colin around this since it seems like we're all in a good position to take on the work.\r\n\r\nI guess you're talking about #459 which introduces also the `ZodError` changes? I mean, #431 introduces only the benchmarks (no ZodError changes) and is mergeable by its own (and not having any conflicts atm), so I was just wondering that do we want to merge it first as a separate PR? Then I could rebase this branch of mine on top of the master and drop the benchmark commit from this PR.  \r\n\r\nOr we could just merge this entirely which also merges benchmarks to the master, making #431 obsolete. Both options are fine for me.\r\n",
          "Yeah, all of these options are on the table for me, too, but I want to minimize the amount of work (and rework) that we need to do to land _these_ changes, regardless of what we choose to do about `ZodError`.\r\n\r\n@colinhacks I think we're all ready to put some work in here if you have a clear sense of what you want to see happen. Separate PRs for the different elements (benchmarking, ZodError changes, control flow changes)? Combine all of the performance work onto this branch? If we want to combine these branches,  what are your thoughts on the nature of breaking changes around further `ZodError` and `ZodUnion`-specific issues?",
          "I already fixed all the conflicts on this PR locally. My plan is to redo/merge in Scott's ZodError changes where relevant in my local branch, then merge the whole thing as one big PR. \r\n\r\nI don't think eliminating the Error subclass is enough to merit a new major version. ZodError implements the entire Error interface except `.stack` (we could add `stack = \"\"` as a property) so it's unlikely to break much code. Sorry Matti, as a \"code janitor\" (love that \ud83d\ude1b) this probably gives you an aneurysm.\r\n\r\nUnfortunately there's a larger backwards compatibility problem: the new return type of the `_parse` method. Despite the fact that it's prefixed, users may have defined custom subclasses that rely on the old method signature. It's the [recommended way](https://github.com/colinhacks/zod/issues/307) to implement custom ZodType subclasses. Ideally we'd be able to maintain compatibility somehow, I'll look into it. If it's not, we can just break this too, since it's not officially documented. ",
          ">ZodError implements the entire Error interface except .stack (we could add stack = \"\" as a property) so it's unlikely to break much code. Sorry Matti, as a \"code janitor\" (love that \ud83d\ude1b) this probably gives you an aneurysm.\r\n\r\nI'm not worried about the property itself but its contents. \ud83d\ude04 If you decide to remove the `Error` inheritance, then it's fine for me to drop the `stack` property as well.\r\n\r\n> Unfortunately there's a larger backwards compatibility problem: the new return type of the _parse method. ...\r\n\r\nShiii.. I thought it was for internal purposes only! This commit https://github.com/colinhacks/zod/pull/492/commits/c0744c7d6b514808051af30eab1edb6764a813a3 attempts to restore the backwards compatibility. It basically does the following:\r\n\r\n* Restore old `PseudoPromise` implementation and rename new \"PseudoPromise\" construct to `AsyncValue`\r\n* Rename new \"fast\" internal parse to `_parseFast` - all built-in `ZodType` sub-classes implement this\r\n* Add `_parseSlow` to `ZodType` that will make the conversion from new parameter format to old format and calls `_parse` \r\n* Add logic to detect whether we can use \"fast\" parse flow or \"slow\" depending whether the type instance has `_parse` overridden or not\r\n* Restore `_internalParse` that uses the detected execution flow - all internal calls should call this instead of `_parse`, `_parseFast` or `_parseSlow`\r\n* Add default `_parse` implementation to `ZodType` so that inherited custom types can call `super._parse(...)`\r\n\r\nI also added some tests for the backwards compatibility.",
          "Merged in 3.3! \r\n\r\nFor now ZodError still subclasses Error but that still might change that in a future release. I decided to forgo including your compatibility changes from (c0744c7)[https://github.com/colinhacks/zod/commit/c0744c7d6b514808051af30eab1edb6764a813a3]. I don't think it's worth the additional complexity, since I have no evidence that anyone is actually subclassing ZodType in the wild. In any case, since this pattern isn't actually documented, I'm not particularly concerned about publishing this as a minor version. \r\n\r\nAgain, incredible work! \ud83d\ude4c ",
          "Awesome! Thank you for your quick actions to get this merged! \ud83d\udc4c "
        ]
      },
      {
        "pr_number": 492,
        "title": "Performance improvements",
        "body": "Hello and first thanks for this project! I've hoped to find a validation library that focuses on data validation, has simple and intuitive API and can infer TS types correctly from the schemas. When I encountered `zod`, I knew that it was exactly what I had been searching for. So I happily started using the library but soon I unfortunately realized that there were some performance issues that made the validations run very slow and due these issues I had to drop the library from production. I felt very sad about it. \ud83d\ude22 So here is my contribution that'd hopefully help to fix some of these issues in future.\r\n\r\ntl;dr; this PR introduces some changes that bring **100-200x speedup** compared to the current `master` \r\n\r\n### Baseline\r\n\r\nThere is already some prior research done about the performance, such as #292 and #459 which have found that excessive `ZodError` allocation is the main cause for poor performance and one fix would be to remove the `Error` base class (and hence remove the costly stacktrace allocation). And if I've understood correctly, the main concern is that the stacktrace could be relevant for the library uses (and to be honest, I share this concern as well).\r\n\r\nSo I took a look at the codebase and (like @reinismu [said](https://github.com/colinhacks/zod/pull/292#discussion_r567867700)) it heavily overuses `try/catch`. The codebase also implements `PseudoPromise` abstraction that allows to support async refinements. If we (mentally) unroll the structure, the code flow looks like the following:\r\n\r\n```js\r\n// level 1\r\ntry {\r\n  const err1 = new ZodError()\r\n  if (invalid(level1)) throw err1\r\n  // level 2\r\n  try {\r\n    const err2 = new ZodError()\r\n    if (invalid(level2)) throw err2\r\n    // level 3 \r\n    try {\r\n      const err3 = new ZodError()\r\n      if (invalid(level3)) throw err3\r\n      // level ...\r\n      try {\r\n        // ...\r\n      } catch (err) {\r\n        // ...\r\n      }\r\n    } catch (err) {\r\n      err2.addIssues(err.issues)\r\n      throw err2\r\n    }\r\n  } catch (err) {\r\n    err1.addIssues(err.issues)\r\n    throw err1\r\n  }\r\n} catch (err) {\r\n  baseErr.addIssues(err.issues)\r\n  throw baseErr\r\n}\r\n```\r\n\r\nLike you can see, the code allocates quite many errors. It also accumulates issues per level which is a lot of extra work. In addition this flow is orchestrated by `PseudoPromise` abstraction that also adds some extra allocation and calculation to the parsing.\r\n\r\nAt this point, I ran the (excellent!) benchmarks introduced in #431 by @scotttrinh and got the following results on my '20 MBP (Node 16):\r\n<details>\r\n  <summary> ** Baseline (~50k ops/s) ** </summary>\r\n  \r\n```\r\nz.string: empty string x 69,126 ops/sec \u00b11.71% (86 runs sampled)\r\nz.string: short string x 66,917 ops/sec \u00b14.43% (85 runs sampled)\r\nz.string: long string x 69,844 ops/sec \u00b14.63% (87 runs sampled)\r\nz.string: invalid: null x 51,296 ops/sec \u00b14.51% (82 runs sampled)\r\nz.string: manual parser: long x 878,697,948 ops/sec \u00b11.60% (85 runs sampled)\r\nz.object: empty: valid x 31,908 ops/sec \u00b18.31% (81 runs sampled)\r\nz.object: empty: valid: extra keys x 35,451 ops/sec \u00b16.17% (84 runs sampled)\r\nz.object: empty: invalid: null x 56,126 ops/sec \u00b11.50% (89 runs sampled)\r\nz.object: short: valid x 20,422 ops/sec \u00b16.28% (84 runs sampled)\r\nz.object: short: valid: extra keys x 19,344 ops/sec \u00b16.31% (79 runs sampled)\r\nz.object: short: invalid: null x 50,725 ops/sec \u00b11.61% (82 runs sampled)\r\nz.object: long: valid x 10,492 ops/sec \u00b13.93% (80 runs sampled)\r\nz.object: long: valid: extra keys x 9,877 ops/sec \u00b17.00% (80 runs sampled)\r\nz.object: long: invalid: null x 51,332 ops/sec \u00b11.65% (88 runs sampled)\r\n```\r\n\r\n</details>\r\n\r\n\r\n### 1. Optimize flow control\r\n\r\n \r\nSo what I did is that I changed the execution flow into more lightweight variant which allows better composition of parsing functions and minimizes the required allocations, in pseudo:\r\n\r\n```js \r\nconst level1Valid = valid(level1Data)\r\nconst level2Valid = level1Valid && valid(level2Data)\r\nconst level3Valid = level2Valid && valid(level3Data)\r\nconst levelNParsed = level3Valid && valid(levelNData) ? makeResult(levelNData) : INVALID\r\nconst level3Parsed = levelNParsed === INVALID ? INVALID : makeResult(level3Data, levelNParsed)\r\nconst level2Parsed = level3Parsed === INVALID ? INVALID : makeResult(level2Data, level3Parsed)\r\nconst level1Parsed = level2Parsed === INVALID ? INVALID : makeResult(level1Data, level3Parsed)\r\n```\r\nLike in the current implementation, the parsing context is passed as a parameter to `_parse` but the difference is that errors are not indicated by throwing and catching them. Instead, `_parse` returns a result object of `ParseResult = INVALID | OK(parsed)`. If any parsing errors occur, issues are stored directly into the context: we known that if parsing fails, the call stack will eventually be returning to the top level `parse` (or `safeParse`) where we can read all the issues and **then** throw an error with all of those issues. This means that **there are no breaking changes to the public API** but the difference in performance is huge.\r\n\r\nOf course the implementation must also support async refinements so the parse result type is actually `ParseResult = INVALID | OK(parsed) | ASYNC(INVALID | OK(parsed))` and parsers must implement the async case as well. Luckily the number of those cases is relatively low (basically collections like object, array, tuple, record, set, list) so I could add specialized performance-optimized implementations for each case. I ran benchmarks again and the different is significant. And the best part is that there were absolutely **no changes to the public API** - all tests are passing without any modifications on them!\r\n\r\n<details>\r\n  <summary> ** Optimized flow (~5M ops/s) ** </summary>\r\n  \r\n```\r\nz.string: empty string x 13,120,643 ops/sec \u00b11.27% (94 runs sampled)\r\nz.string: short string x 12,989,836 ops/sec \u00b11.45% (92 runs sampled)\r\nz.string: long string x 12,788,053 ops/sec \u00b11.21% (91 runs sampled)\r\nz.string: invalid: null x 118,915 ops/sec \u00b11.32% (81 runs sampled)\r\nz.string: manual parser: long x 876,793,503 ops/sec \u00b11.38% (82 runs sampled)\r\nz.object: empty: valid x 5,437,250 ops/sec \u00b14.61% (88 runs sampled)\r\nz.object: empty: valid: extra keys x 5,086,771 ops/sec \u00b11.36% (88 runs sampled)\r\nz.object: empty: invalid: null x 127,522 ops/sec \u00b13.38% (90 runs sampled)\r\nz.object: short: valid x 3,103,337 ops/sec \u00b11.53% (93 runs sampled)\r\nz.object: short: valid: extra keys x 3,223,728 ops/sec \u00b11.64% (90 runs sampled)\r\nz.object: short: invalid: null x 126,815 ops/sec \u00b14.66% (91 runs sampled)\r\nz.object: long: valid x 1,482,835 ops/sec \u00b11.32% (94 runs sampled)\r\nz.object: long: valid: extra keys x 1,411,238 ops/sec \u00b11.22% (91 runs sampled)\r\nz.object: long: invalid: null x 120,033 ops/sec \u00b13.74% (87 runs sampled)\r\n```\r\n\r\n</details>\r\n\r\n### 2. Add some extra optimizations\r\n\r\nIn addition to the flow, I also did some minor optimizations:\r\n\r\n* https://github.com/milankinen/zod/commit/341e9ddc46dbf12f9860c8aa7c5eb177e9bc27ad - change context path updates to use persistent O(1) list instead of O(n) array copy\r\n* https://github.com/milankinen/zod/commit/423c9a97f14fec5ce0b66d5f74378802161a9c97 - cache object shape information over subsequent parse events\r\n* https://github.com/milankinen/zod/commit/89088c2570230d9dd17e57c5e795b9babba69c57 - switch-case parsed type calculation\r\n\r\nWith these smaller local optimizations, I could squeeze some extra cycles:\r\n\r\n<details>\r\n  <summary> ** Optimized flow + local optimizations (~7,5M ops/s) ** </summary>\r\n  \r\n```\r\nz.string: empty string x 11,050,585 ops/sec \u00b11.34% (89 runs sampled)\r\nz.string: short string x 10,931,303 ops/sec \u00b11.58% (89 runs sampled)\r\nz.string: long string x 11,056,030 ops/sec \u00b11.43% (94 runs sampled)\r\nz.string: invalid: null x 118,733 ops/sec \u00b11.41% (90 runs sampled)\r\nz.string: manual parser: long x 864,371,553 ops/sec \u00b11.41% (82 runs sampled)\r\nz.object: empty: valid x 7,120,299 ops/sec \u00b14.26% (88 runs sampled)\r\nz.object: empty: valid: extra keys x 7,585,016 ops/sec \u00b11.28% (93 runs sampled)\r\nz.object: empty: invalid: null x 129,548 ops/sec \u00b13.68% (89 runs sampled)\r\nz.object: short: valid x 4,777,457 ops/sec \u00b11.35% (94 runs sampled)\r\nz.object: short: valid: extra keys x 5,014,443 ops/sec \u00b14.73% (90 runs sampled)\r\nz.object: short: invalid: null x 127,899 ops/sec \u00b13.33% (89 runs sampled)\r\nz.object: long: valid x 2,173,238 ops/sec \u00b11.34% (94 runs sampled)\r\nz.object: long: valid: extra keys x 2,125,664 ops/sec \u00b11.29% (91 runs sampled)\r\nz.object: long: invalid: null x 117,491 ops/sec \u00b13.75% (81 runs sampled)\r\n```\r\n\r\n</details>\r\n\r\nI also ran the https://github.com/moltar/typescript-runtime-type-benchmarks with current master (`zod` in the graphics) and optimizations (`milankinen/zod` in the graphics) and got the following results:\r\n\r\n![Som graphics](https://raw.githubusercontent.com/milankinen/zod/performance-improvements/data-type-sans-outliers-v16.0.0.png)\r\n\r\n<details>\r\n  <summary> Full onsole output </summary>\r\n  \r\n```\r\nRunning \"data-type-sans-outliers\" suite...\r\n decoders:\r\n    328 543 ops/s, \u00b11.64%     | 92.91% slower\r\n\r\n  io-ts:\r\n    1 924 017 ops/s, \u00b11.39%   | 58.49% slower\r\n\r\n  jointz:\r\n    2 303 597 ops/s, \u00b11.18%   | 50.3% slower\r\n\r\n  json-decoder:\r\n    1 205 792 ops/s, \u00b11.44%   | 73.98% slower\r\n\r\n  @mojotech/json-type-validation:\r\n    1 801 597 ops/s, \u00b11.40%   | 61.13% slower\r\n\r\n  myzod:\r\n    2 115 310 ops/s, \u00b11.29%   | 54.36% slower\r\n\r\n  purify-ts:\r\n    1 023 057 ops/s, \u00b11.73%   | 77.93% slower\r\n\r\n  rulr:\r\n    1 242 731 ops/s, \u00b11.36%   | 73.19% slower\r\n\r\n  runtypes:\r\n    161 748 ops/s, \u00b11.66%     | 96.51% slower\r\n\r\n  simple-runtypes:\r\n    3 077 120 ops/s, \u00b11.23%   | 33.61% slower\r\n\r\n  superstruct:\r\n    152 440 ops/s, \u00b11.81%     | 96.71% slower\r\n\r\n  toi:\r\n    874 245 ops/s, \u00b11.41%     | 81.14% slower\r\n\r\n  ts-utils:\r\n    64 927 ops/s, \u00b160.92%      | 98.6% slower\r\n\r\n  @typeofweb/schema:\r\n    1 320 077 ops/s, \u00b11.54%   | 71.52% slower\r\n\r\n  valita:\r\n    4 634 932 ops/s, \u00b11.12%   | fastest\r\n\r\n  yup:\r\n    42 782 ops/s, \u00b11.14%      | 99.08% slower\r\n\r\n  zod:\r\n    2 981 ops/s, \u00b117.43%       | slowest, 99.94% slower\r\n\r\n  milankinen/zod:\r\n    469 237 ops/s, \u00b141.76%     | 89.88% slower\r\n\r\n  ts-interface-checker:\r\n    3 340 228 ops/s, \u00b11.29%   | 27.93% slower\r\n\r\nFinished 23 cases!\r\n  Fastest: valita\r\n  Slowest: zod\r\n\r\n```\r\n\r\n</details>\r\n\r\n### Conclusions\r\n\r\nI'm very happy that I found a way to significantly improve the performance while maintaining this excellent API. Honestly I don't believe or expect that this PR will be merged to the upstream as it is but I at least hope that it'll give some pointers for the future improvements. I really like `zod` as a library and hope that some day the performance gets fixed so that it won't prevent me from using this in production as well. :slightly_smiling_face:\r\n\r\nCheers!\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/492",
        "comments": [
          "PRs like this remind me why I love open source. Truly glorious stuff Matti!\r\n\r\nI've been looking through the code and I think I understand the new execution system. I like it! Getting rid of all those spaghetti code PseudoPromise methods is so satisfying.\r\n\r\nFor grins, I re-ran the benchmarks after removing the `Error` base class, and saw nearly 3x performance improvements on all invalid results. Which is a pretty compelling reason to remove it...\r\n\r\n```\r\nz.string: empty string x 9,702,190 ops/sec \u00b10.89% (87 runs sampled)\r\nz.string: short string x 9,628,797 ops/sec \u00b10.84% (92 runs sampled)\r\nz.string: long string x 9,472,395 ops/sec \u00b12.01% (88 runs sampled)\r\nz.string: invalid: null x 419,983 ops/sec \u00b11.34% (87 runs sampled)\r\nz.string: manual parser: long x 973,337,378 ops/sec \u00b10.75% (96 runs sampled)\r\nz.object: empty: valid x 7,065,026 ops/sec \u00b11.18% (87 runs sampled)\r\nz.object: empty: valid: extra keys x 8,204,405 ops/sec \u00b10.94% (92 runs sampled)\r\nz.object: empty: invalid: null x 537,947 ops/sec \u00b11.76% (86 runs sampled)\r\nz.object: short: valid x 4,047,468 ops/sec \u00b10.96% (89 runs sampled)\r\nz.object: short: valid: extra keys x 4,494,936 ops/sec \u00b11.06% (86 runs sampled)\r\nz.object: short: invalid: null x 554,633 ops/sec \u00b11.06% (92 runs sampled)\r\nz.object: long: valid x 2,041,231 ops/sec \u00b11.07% (86 runs sampled)\r\nz.object: long: valid: extra keys x 2,031,685 ops/sec \u00b11.13% (88 runs sampled)\r\nz.object: long: invalid: null x 535,857 ops/sec \u00b12.65% (82 runs sampled)\r\n```\r\n\r\nYou say you don't expect that this PR will be merged...but I can't see any reason why not. Seems like a definitive improvement in terms of code understandability, perf, and elegance. Am I missing anything?\r\n\r\nI think combining this with some of the changes by @scotttrinh will be the best of all worlds: changing the format of `ZodInvalidUnionIssue` and eliminating the Error subclass for ZodError (cc @lilred). Scott what do you think?",
          ">You say you don't expect that this PR will be merged...but I can't see any reason why not. Seems like a definitive improvement in terms of code understandability, perf, and elegance. Am I missing anything?\r\n\r\nWell, this PR introduces quite big changes to the internals which can be an issue sometimes. \ud83d\ude05 But I'm glad that you approve those changes, technically there should be no reason not to merge this (except the conflicts that must be resolved first). \ud83d\ude42 This PR is forked from #431 so perhaps that could be merged first as a separate PR?\r\n\r\n>For grins, I re-ran the benchmarks after removing the Error base class, and saw nearly 3x performance improvements on all invalid results. Which is a pretty compelling reason to remove it...\r\n\r\nYeah, removing the `Error` class can improve the performance for invalid cases quite a lot so if bumping the major version does not scare, then we should definitely go for it!\r\n\r\nAnother, a bit more conservative option could be to keep `Error` sub-classing in `.parse` and `.parseAsync` so that the thrown error has a stacktrace, but return `{success: false, issues: ZodIssue[])` from `safeParse` and `spa`? With this, performance critical applications could use safe version. That said, both approaches are not backward compatible so they'd require a major version bump. \r\n\r\n>I think combining this with some of the changes by @scotttrinh will be the best of all worlds: changing the format of ZodInvalidUnionIssue and eliminating the Error subclass for ZodError (cc @lilred). Scott what do you think?\r\n\r\nI definitely agree with this \ud83d\udc4d Storing error instances inside another error won't give any benefits.\r\n\r\n",
          "> I think combining this with some of the changes by @scotttrinh will be the best of all worlds: changing the format of `ZodInvalidUnionIssue` and eliminating the Error subclass for ZodError (cc @lilred). Scott what do you think?\n\nI don't think we should wait on my opinion here, I was mostly working off existing work! I'll have time in the next few hours to review and it sounds like we will need to rebase or deconflict this on the latest, so I'm happy to help with that, too.",
          "FYI @colinhacks I don't have bandwidth to review this in a timely manner, I don't think you were awaiting my review but just so it's clear feel free to proceed without me.",
          "@scotttrinh thanks for the review comments! I committed the suggested changes. There are still some conflicting files because this branch is built on top of #431 which is a little bit behind the current master. What do you think is the best option? I could either:\r\n\r\n1. Rebase this whole branch with the benchmark commits onto current master\r\n2. Rebase only my commits and leave benchmark branch to be merged separately\r\n\r\nAlso one other thing I noticed when I was running the tests with the new implementation was that [this test](https://github.com/colinhacks/zod/blob/master/src/__tests__/async-parsing.test.ts#L364-L387) seemed to have an expectation that was conflicting with the description. The description says that \"early async failure prevents follow-up refinement checks\". However, the expected `count` value is 2, indicating that both refinements are run, even though the first one returns `false`. I didn't want to break the existing behaviour so I removed the refinement prevention but what is actually the expected behaviour?",
          "Nice work!\r\nStill need some work to reach https://github.com/badrap/valita level, but at least it shouldn't be the bottleneck of the whole application after this :)",
          "Thanks! Valita is indeed a nice piece of software. Of course running these kind of microbenchmarks is a bit dangerous because benchmark setup might favour some libraries. For example valita seems to be built built on top of assumption that validated object does not contain any extra keys and if that happens, it falls back to a slower execution path (its still pretty damn fast though \ud83d\ude05!). In `zod` extra keys do not matter (if running with default .strip mode).\r\n\r\nIf we add some extra keys to the data, we can see that among the \"popular\" libs we're almost in par.\r\n```\r\n> typescript-runtime-type-benchmarks@1.0.0 start\r\n> ts-node index.ts\r\n\r\nRunning \"data-type-sans-outliers\" suite...\r\nProgress: 100%\r\n\r\n  io-ts:\r\n    1 562 873 ops/s, \u00b131.23%   | 11.62% slower\r\n\r\n  runtypes:\r\n    166 728 ops/s, \u00b10.70%     | 90.57% slower\r\n\r\n  valita:\r\n    1 768 350 ops/s, \u00b10.72%   | fastest\r\n\r\n  zod:\r\n    3 458 ops/s, \u00b114.52%       | slowest, 99.8% slower\r\n\r\n  milankinen/zod:\r\n    801 172 ops/s, \u00b11.18%     | 54.69% slower\r\n\r\nFinished 5 cases!\r\n  Fastest: valita\r\n  Slowest: zod\r\n```\r\n\r\nOn the other hand the test setup might be able to put in such way that also the new implementation seem a lot slower than others. \ud83d\ude04 ",
          "@milankinen \r\n\r\n> Also one other thing I noticed when I was running the tests with the new implementation was that this test seemed to have an expectation that was conflicting with the description. The description says that \"early async failure prevents follow-up refinement checks\". However, the expected count value is 2, indicating that both refinements are run, even though the first one returns false. I didn't want to break the existing behaviour so I removed the refinement prevention but what is actually the expected behaviour?\r\n\r\nI'd say even if the original _intent_ was to prevent the refinement, the fact that the current version does not prevent it (given the tests) means that's the behavior to preserve. If we're collecting possible breaking changes around these updates here, maybe it's worth considering that more holistically, but I imagine we want to minimize breakage. Definitely a @colinhacks call.\r\n\r\n> There are still some conflicting files because this branch is built on top of #431 which is a little bit behind the current master. What do you think is the best option?\r\n\r\nI'm curious about this question as well. In my opinion, I'd rather see us concentrate on landing your changes here while incorporating some of the additional changes to `ZodError` that the other PR introduces, but I want to get some marching orders from Colin around this since it seems like we're all in a good position to take on the work.",
          ">I'm curious about this question as well. In my opinion, I'd rather see us concentrate on landing your changes here while incorporating some of the additional changes to ZodError that the other PR introduces, but I want to get some marching orders from Colin around this since it seems like we're all in a good position to take on the work.\r\n\r\nI guess you're talking about #459 which introduces also the `ZodError` changes? I mean, #431 introduces only the benchmarks (no ZodError changes) and is mergeable by its own (and not having any conflicts atm), so I was just wondering that do we want to merge it first as a separate PR? Then I could rebase this branch of mine on top of the master and drop the benchmark commit from this PR.  \r\n\r\nOr we could just merge this entirely which also merges benchmarks to the master, making #431 obsolete. Both options are fine for me.\r\n",
          "Yeah, all of these options are on the table for me, too, but I want to minimize the amount of work (and rework) that we need to do to land _these_ changes, regardless of what we choose to do about `ZodError`.\r\n\r\n@colinhacks I think we're all ready to put some work in here if you have a clear sense of what you want to see happen. Separate PRs for the different elements (benchmarking, ZodError changes, control flow changes)? Combine all of the performance work onto this branch? If we want to combine these branches,  what are your thoughts on the nature of breaking changes around further `ZodError` and `ZodUnion`-specific issues?",
          "I already fixed all the conflicts on this PR locally. My plan is to redo/merge in Scott's ZodError changes where relevant in my local branch, then merge the whole thing as one big PR. \r\n\r\nI don't think eliminating the Error subclass is enough to merit a new major version. ZodError implements the entire Error interface except `.stack` (we could add `stack = \"\"` as a property) so it's unlikely to break much code. Sorry Matti, as a \"code janitor\" (love that \ud83d\ude1b) this probably gives you an aneurysm.\r\n\r\nUnfortunately there's a larger backwards compatibility problem: the new return type of the `_parse` method. Despite the fact that it's prefixed, users may have defined custom subclasses that rely on the old method signature. It's the [recommended way](https://github.com/colinhacks/zod/issues/307) to implement custom ZodType subclasses. Ideally we'd be able to maintain compatibility somehow, I'll look into it. If it's not, we can just break this too, since it's not officially documented. ",
          ">ZodError implements the entire Error interface except .stack (we could add stack = \"\" as a property) so it's unlikely to break much code. Sorry Matti, as a \"code janitor\" (love that \ud83d\ude1b) this probably gives you an aneurysm.\r\n\r\nI'm not worried about the property itself but its contents. \ud83d\ude04 If you decide to remove the `Error` inheritance, then it's fine for me to drop the `stack` property as well.\r\n\r\n> Unfortunately there's a larger backwards compatibility problem: the new return type of the _parse method. ...\r\n\r\nShiii.. I thought it was for internal purposes only! This commit https://github.com/colinhacks/zod/pull/492/commits/c0744c7d6b514808051af30eab1edb6764a813a3 attempts to restore the backwards compatibility. It basically does the following:\r\n\r\n* Restore old `PseudoPromise` implementation and rename new \"PseudoPromise\" construct to `AsyncValue`\r\n* Rename new \"fast\" internal parse to `_parseFast` - all built-in `ZodType` sub-classes implement this\r\n* Add `_parseSlow` to `ZodType` that will make the conversion from new parameter format to old format and calls `_parse` \r\n* Add logic to detect whether we can use \"fast\" parse flow or \"slow\" depending whether the type instance has `_parse` overridden or not\r\n* Restore `_internalParse` that uses the detected execution flow - all internal calls should call this instead of `_parse`, `_parseFast` or `_parseSlow`\r\n* Add default `_parse` implementation to `ZodType` so that inherited custom types can call `super._parse(...)`\r\n\r\nI also added some tests for the backwards compatibility.",
          "Merged in 3.3! \r\n\r\nFor now ZodError still subclasses Error but that still might change that in a future release. I decided to forgo including your compatibility changes from (c0744c7)[https://github.com/colinhacks/zod/commit/c0744c7d6b514808051af30eab1edb6764a813a3]. I don't think it's worth the additional complexity, since I have no evidence that anyone is actually subclassing ZodType in the wild. In any case, since this pattern isn't actually documented, I'm not particularly concerned about publishing this as a minor version. \r\n\r\nAgain, incredible work! \ud83d\ude4c ",
          "Awesome! Thank you for your quick actions to get this merged! \ud83d\udc4c "
        ]
      },
      {
        "pr_number": 494,
        "title": "Stop inferring `unknown` fields as optional",
        "body": "Addresses https://github.com/colinhacks/zod/issues/493\r\n\r\nThis is a breaking change so let's wait until @colinhacks checks in",
        "html_url": "https://github.com/colinhacks/zod/pull/494",
        "comments": [
          "Merged in 3.3!",
          "@colinhacks This improvement definitively breaks compatibility with `strictNullChecks=false`. It is not big deal, but just for you to know...\r\n\r\n![image](https://user-images.githubusercontent.com/383294/124392705-7ef5c180-dcf7-11eb-9149-429e86403020.png)\r\n",
          "Ah good catch. That's a bug that was introduced due to an unrelated fix: https://github.com/colinhacks/zod/issues/452\r\n\r\nFixed in 3.3.3.",
          "@colinhacks Tried with 3.3.4 and still, the same bug occurred when TS `strictNullChecks=false` is set. But as I said, no big deal"
        ]
      },
      {
        "pr_number": 492,
        "title": "Performance improvements",
        "body": "Hello and first thanks for this project! I've hoped to find a validation library that focuses on data validation, has simple and intuitive API and can infer TS types correctly from the schemas. When I encountered `zod`, I knew that it was exactly what I had been searching for. So I happily started using the library but soon I unfortunately realized that there were some performance issues that made the validations run very slow and due these issues I had to drop the library from production. I felt very sad about it. \ud83d\ude22 So here is my contribution that'd hopefully help to fix some of these issues in future.\r\n\r\ntl;dr; this PR introduces some changes that bring **100-200x speedup** compared to the current `master` \r\n\r\n### Baseline\r\n\r\nThere is already some prior research done about the performance, such as #292 and #459 which have found that excessive `ZodError` allocation is the main cause for poor performance and one fix would be to remove the `Error` base class (and hence remove the costly stacktrace allocation). And if I've understood correctly, the main concern is that the stacktrace could be relevant for the library uses (and to be honest, I share this concern as well).\r\n\r\nSo I took a look at the codebase and (like @reinismu [said](https://github.com/colinhacks/zod/pull/292#discussion_r567867700)) it heavily overuses `try/catch`. The codebase also implements `PseudoPromise` abstraction that allows to support async refinements. If we (mentally) unroll the structure, the code flow looks like the following:\r\n\r\n```js\r\n// level 1\r\ntry {\r\n  const err1 = new ZodError()\r\n  if (invalid(level1)) throw err1\r\n  // level 2\r\n  try {\r\n    const err2 = new ZodError()\r\n    if (invalid(level2)) throw err2\r\n    // level 3 \r\n    try {\r\n      const err3 = new ZodError()\r\n      if (invalid(level3)) throw err3\r\n      // level ...\r\n      try {\r\n        // ...\r\n      } catch (err) {\r\n        // ...\r\n      }\r\n    } catch (err) {\r\n      err2.addIssues(err.issues)\r\n      throw err2\r\n    }\r\n  } catch (err) {\r\n    err1.addIssues(err.issues)\r\n    throw err1\r\n  }\r\n} catch (err) {\r\n  baseErr.addIssues(err.issues)\r\n  throw baseErr\r\n}\r\n```\r\n\r\nLike you can see, the code allocates quite many errors. It also accumulates issues per level which is a lot of extra work. In addition this flow is orchestrated by `PseudoPromise` abstraction that also adds some extra allocation and calculation to the parsing.\r\n\r\nAt this point, I ran the (excellent!) benchmarks introduced in #431 by @scotttrinh and got the following results on my '20 MBP (Node 16):\r\n<details>\r\n  <summary> ** Baseline (~50k ops/s) ** </summary>\r\n  \r\n```\r\nz.string: empty string x 69,126 ops/sec \u00b11.71% (86 runs sampled)\r\nz.string: short string x 66,917 ops/sec \u00b14.43% (85 runs sampled)\r\nz.string: long string x 69,844 ops/sec \u00b14.63% (87 runs sampled)\r\nz.string: invalid: null x 51,296 ops/sec \u00b14.51% (82 runs sampled)\r\nz.string: manual parser: long x 878,697,948 ops/sec \u00b11.60% (85 runs sampled)\r\nz.object: empty: valid x 31,908 ops/sec \u00b18.31% (81 runs sampled)\r\nz.object: empty: valid: extra keys x 35,451 ops/sec \u00b16.17% (84 runs sampled)\r\nz.object: empty: invalid: null x 56,126 ops/sec \u00b11.50% (89 runs sampled)\r\nz.object: short: valid x 20,422 ops/sec \u00b16.28% (84 runs sampled)\r\nz.object: short: valid: extra keys x 19,344 ops/sec \u00b16.31% (79 runs sampled)\r\nz.object: short: invalid: null x 50,725 ops/sec \u00b11.61% (82 runs sampled)\r\nz.object: long: valid x 10,492 ops/sec \u00b13.93% (80 runs sampled)\r\nz.object: long: valid: extra keys x 9,877 ops/sec \u00b17.00% (80 runs sampled)\r\nz.object: long: invalid: null x 51,332 ops/sec \u00b11.65% (88 runs sampled)\r\n```\r\n\r\n</details>\r\n\r\n\r\n### 1. Optimize flow control\r\n\r\n \r\nSo what I did is that I changed the execution flow into more lightweight variant which allows better composition of parsing functions and minimizes the required allocations, in pseudo:\r\n\r\n```js \r\nconst level1Valid = valid(level1Data)\r\nconst level2Valid = level1Valid && valid(level2Data)\r\nconst level3Valid = level2Valid && valid(level3Data)\r\nconst levelNParsed = level3Valid && valid(levelNData) ? makeResult(levelNData) : INVALID\r\nconst level3Parsed = levelNParsed === INVALID ? INVALID : makeResult(level3Data, levelNParsed)\r\nconst level2Parsed = level3Parsed === INVALID ? INVALID : makeResult(level2Data, level3Parsed)\r\nconst level1Parsed = level2Parsed === INVALID ? INVALID : makeResult(level1Data, level3Parsed)\r\n```\r\nLike in the current implementation, the parsing context is passed as a parameter to `_parse` but the difference is that errors are not indicated by throwing and catching them. Instead, `_parse` returns a result object of `ParseResult = INVALID | OK(parsed)`. If any parsing errors occur, issues are stored directly into the context: we known that if parsing fails, the call stack will eventually be returning to the top level `parse` (or `safeParse`) where we can read all the issues and **then** throw an error with all of those issues. This means that **there are no breaking changes to the public API** but the difference in performance is huge.\r\n\r\nOf course the implementation must also support async refinements so the parse result type is actually `ParseResult = INVALID | OK(parsed) | ASYNC(INVALID | OK(parsed))` and parsers must implement the async case as well. Luckily the number of those cases is relatively low (basically collections like object, array, tuple, record, set, list) so I could add specialized performance-optimized implementations for each case. I ran benchmarks again and the different is significant. And the best part is that there were absolutely **no changes to the public API** - all tests are passing without any modifications on them!\r\n\r\n<details>\r\n  <summary> ** Optimized flow (~5M ops/s) ** </summary>\r\n  \r\n```\r\nz.string: empty string x 13,120,643 ops/sec \u00b11.27% (94 runs sampled)\r\nz.string: short string x 12,989,836 ops/sec \u00b11.45% (92 runs sampled)\r\nz.string: long string x 12,788,053 ops/sec \u00b11.21% (91 runs sampled)\r\nz.string: invalid: null x 118,915 ops/sec \u00b11.32% (81 runs sampled)\r\nz.string: manual parser: long x 876,793,503 ops/sec \u00b11.38% (82 runs sampled)\r\nz.object: empty: valid x 5,437,250 ops/sec \u00b14.61% (88 runs sampled)\r\nz.object: empty: valid: extra keys x 5,086,771 ops/sec \u00b11.36% (88 runs sampled)\r\nz.object: empty: invalid: null x 127,522 ops/sec \u00b13.38% (90 runs sampled)\r\nz.object: short: valid x 3,103,337 ops/sec \u00b11.53% (93 runs sampled)\r\nz.object: short: valid: extra keys x 3,223,728 ops/sec \u00b11.64% (90 runs sampled)\r\nz.object: short: invalid: null x 126,815 ops/sec \u00b14.66% (91 runs sampled)\r\nz.object: long: valid x 1,482,835 ops/sec \u00b11.32% (94 runs sampled)\r\nz.object: long: valid: extra keys x 1,411,238 ops/sec \u00b11.22% (91 runs sampled)\r\nz.object: long: invalid: null x 120,033 ops/sec \u00b13.74% (87 runs sampled)\r\n```\r\n\r\n</details>\r\n\r\n### 2. Add some extra optimizations\r\n\r\nIn addition to the flow, I also did some minor optimizations:\r\n\r\n* https://github.com/milankinen/zod/commit/341e9ddc46dbf12f9860c8aa7c5eb177e9bc27ad - change context path updates to use persistent O(1) list instead of O(n) array copy\r\n* https://github.com/milankinen/zod/commit/423c9a97f14fec5ce0b66d5f74378802161a9c97 - cache object shape information over subsequent parse events\r\n* https://github.com/milankinen/zod/commit/89088c2570230d9dd17e57c5e795b9babba69c57 - switch-case parsed type calculation\r\n\r\nWith these smaller local optimizations, I could squeeze some extra cycles:\r\n\r\n<details>\r\n  <summary> ** Optimized flow + local optimizations (~7,5M ops/s) ** </summary>\r\n  \r\n```\r\nz.string: empty string x 11,050,585 ops/sec \u00b11.34% (89 runs sampled)\r\nz.string: short string x 10,931,303 ops/sec \u00b11.58% (89 runs sampled)\r\nz.string: long string x 11,056,030 ops/sec \u00b11.43% (94 runs sampled)\r\nz.string: invalid: null x 118,733 ops/sec \u00b11.41% (90 runs sampled)\r\nz.string: manual parser: long x 864,371,553 ops/sec \u00b11.41% (82 runs sampled)\r\nz.object: empty: valid x 7,120,299 ops/sec \u00b14.26% (88 runs sampled)\r\nz.object: empty: valid: extra keys x 7,585,016 ops/sec \u00b11.28% (93 runs sampled)\r\nz.object: empty: invalid: null x 129,548 ops/sec \u00b13.68% (89 runs sampled)\r\nz.object: short: valid x 4,777,457 ops/sec \u00b11.35% (94 runs sampled)\r\nz.object: short: valid: extra keys x 5,014,443 ops/sec \u00b14.73% (90 runs sampled)\r\nz.object: short: invalid: null x 127,899 ops/sec \u00b13.33% (89 runs sampled)\r\nz.object: long: valid x 2,173,238 ops/sec \u00b11.34% (94 runs sampled)\r\nz.object: long: valid: extra keys x 2,125,664 ops/sec \u00b11.29% (91 runs sampled)\r\nz.object: long: invalid: null x 117,491 ops/sec \u00b13.75% (81 runs sampled)\r\n```\r\n\r\n</details>\r\n\r\nI also ran the https://github.com/moltar/typescript-runtime-type-benchmarks with current master (`zod` in the graphics) and optimizations (`milankinen/zod` in the graphics) and got the following results:\r\n\r\n![Som graphics](https://raw.githubusercontent.com/milankinen/zod/performance-improvements/data-type-sans-outliers-v16.0.0.png)\r\n\r\n<details>\r\n  <summary> Full onsole output </summary>\r\n  \r\n```\r\nRunning \"data-type-sans-outliers\" suite...\r\n decoders:\r\n    328 543 ops/s, \u00b11.64%     | 92.91% slower\r\n\r\n  io-ts:\r\n    1 924 017 ops/s, \u00b11.39%   | 58.49% slower\r\n\r\n  jointz:\r\n    2 303 597 ops/s, \u00b11.18%   | 50.3% slower\r\n\r\n  json-decoder:\r\n    1 205 792 ops/s, \u00b11.44%   | 73.98% slower\r\n\r\n  @mojotech/json-type-validation:\r\n    1 801 597 ops/s, \u00b11.40%   | 61.13% slower\r\n\r\n  myzod:\r\n    2 115 310 ops/s, \u00b11.29%   | 54.36% slower\r\n\r\n  purify-ts:\r\n    1 023 057 ops/s, \u00b11.73%   | 77.93% slower\r\n\r\n  rulr:\r\n    1 242 731 ops/s, \u00b11.36%   | 73.19% slower\r\n\r\n  runtypes:\r\n    161 748 ops/s, \u00b11.66%     | 96.51% slower\r\n\r\n  simple-runtypes:\r\n    3 077 120 ops/s, \u00b11.23%   | 33.61% slower\r\n\r\n  superstruct:\r\n    152 440 ops/s, \u00b11.81%     | 96.71% slower\r\n\r\n  toi:\r\n    874 245 ops/s, \u00b11.41%     | 81.14% slower\r\n\r\n  ts-utils:\r\n    64 927 ops/s, \u00b160.92%      | 98.6% slower\r\n\r\n  @typeofweb/schema:\r\n    1 320 077 ops/s, \u00b11.54%   | 71.52% slower\r\n\r\n  valita:\r\n    4 634 932 ops/s, \u00b11.12%   | fastest\r\n\r\n  yup:\r\n    42 782 ops/s, \u00b11.14%      | 99.08% slower\r\n\r\n  zod:\r\n    2 981 ops/s, \u00b117.43%       | slowest, 99.94% slower\r\n\r\n  milankinen/zod:\r\n    469 237 ops/s, \u00b141.76%     | 89.88% slower\r\n\r\n  ts-interface-checker:\r\n    3 340 228 ops/s, \u00b11.29%   | 27.93% slower\r\n\r\nFinished 23 cases!\r\n  Fastest: valita\r\n  Slowest: zod\r\n\r\n```\r\n\r\n</details>\r\n\r\n### Conclusions\r\n\r\nI'm very happy that I found a way to significantly improve the performance while maintaining this excellent API. Honestly I don't believe or expect that this PR will be merged to the upstream as it is but I at least hope that it'll give some pointers for the future improvements. I really like `zod` as a library and hope that some day the performance gets fixed so that it won't prevent me from using this in production as well. :slightly_smiling_face:\r\n\r\nCheers!\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/492",
        "comments": [
          "PRs like this remind me why I love open source. Truly glorious stuff Matti!\r\n\r\nI've been looking through the code and I think I understand the new execution system. I like it! Getting rid of all those spaghetti code PseudoPromise methods is so satisfying.\r\n\r\nFor grins, I re-ran the benchmarks after removing the `Error` base class, and saw nearly 3x performance improvements on all invalid results. Which is a pretty compelling reason to remove it...\r\n\r\n```\r\nz.string: empty string x 9,702,190 ops/sec \u00b10.89% (87 runs sampled)\r\nz.string: short string x 9,628,797 ops/sec \u00b10.84% (92 runs sampled)\r\nz.string: long string x 9,472,395 ops/sec \u00b12.01% (88 runs sampled)\r\nz.string: invalid: null x 419,983 ops/sec \u00b11.34% (87 runs sampled)\r\nz.string: manual parser: long x 973,337,378 ops/sec \u00b10.75% (96 runs sampled)\r\nz.object: empty: valid x 7,065,026 ops/sec \u00b11.18% (87 runs sampled)\r\nz.object: empty: valid: extra keys x 8,204,405 ops/sec \u00b10.94% (92 runs sampled)\r\nz.object: empty: invalid: null x 537,947 ops/sec \u00b11.76% (86 runs sampled)\r\nz.object: short: valid x 4,047,468 ops/sec \u00b10.96% (89 runs sampled)\r\nz.object: short: valid: extra keys x 4,494,936 ops/sec \u00b11.06% (86 runs sampled)\r\nz.object: short: invalid: null x 554,633 ops/sec \u00b11.06% (92 runs sampled)\r\nz.object: long: valid x 2,041,231 ops/sec \u00b11.07% (86 runs sampled)\r\nz.object: long: valid: extra keys x 2,031,685 ops/sec \u00b11.13% (88 runs sampled)\r\nz.object: long: invalid: null x 535,857 ops/sec \u00b12.65% (82 runs sampled)\r\n```\r\n\r\nYou say you don't expect that this PR will be merged...but I can't see any reason why not. Seems like a definitive improvement in terms of code understandability, perf, and elegance. Am I missing anything?\r\n\r\nI think combining this with some of the changes by @scotttrinh will be the best of all worlds: changing the format of `ZodInvalidUnionIssue` and eliminating the Error subclass for ZodError (cc @lilred). Scott what do you think?",
          ">You say you don't expect that this PR will be merged...but I can't see any reason why not. Seems like a definitive improvement in terms of code understandability, perf, and elegance. Am I missing anything?\r\n\r\nWell, this PR introduces quite big changes to the internals which can be an issue sometimes. \ud83d\ude05 But I'm glad that you approve those changes, technically there should be no reason not to merge this (except the conflicts that must be resolved first). \ud83d\ude42 This PR is forked from #431 so perhaps that could be merged first as a separate PR?\r\n\r\n>For grins, I re-ran the benchmarks after removing the Error base class, and saw nearly 3x performance improvements on all invalid results. Which is a pretty compelling reason to remove it...\r\n\r\nYeah, removing the `Error` class can improve the performance for invalid cases quite a lot so if bumping the major version does not scare, then we should definitely go for it!\r\n\r\nAnother, a bit more conservative option could be to keep `Error` sub-classing in `.parse` and `.parseAsync` so that the thrown error has a stacktrace, but return `{success: false, issues: ZodIssue[])` from `safeParse` and `spa`? With this, performance critical applications could use safe version. That said, both approaches are not backward compatible so they'd require a major version bump. \r\n\r\n>I think combining this with some of the changes by @scotttrinh will be the best of all worlds: changing the format of ZodInvalidUnionIssue and eliminating the Error subclass for ZodError (cc @lilred). Scott what do you think?\r\n\r\nI definitely agree with this \ud83d\udc4d Storing error instances inside another error won't give any benefits.\r\n\r\n",
          "> I think combining this with some of the changes by @scotttrinh will be the best of all worlds: changing the format of `ZodInvalidUnionIssue` and eliminating the Error subclass for ZodError (cc @lilred). Scott what do you think?\n\nI don't think we should wait on my opinion here, I was mostly working off existing work! I'll have time in the next few hours to review and it sounds like we will need to rebase or deconflict this on the latest, so I'm happy to help with that, too.",
          "FYI @colinhacks I don't have bandwidth to review this in a timely manner, I don't think you were awaiting my review but just so it's clear feel free to proceed without me.",
          "@scotttrinh thanks for the review comments! I committed the suggested changes. There are still some conflicting files because this branch is built on top of #431 which is a little bit behind the current master. What do you think is the best option? I could either:\r\n\r\n1. Rebase this whole branch with the benchmark commits onto current master\r\n2. Rebase only my commits and leave benchmark branch to be merged separately\r\n\r\nAlso one other thing I noticed when I was running the tests with the new implementation was that [this test](https://github.com/colinhacks/zod/blob/master/src/__tests__/async-parsing.test.ts#L364-L387) seemed to have an expectation that was conflicting with the description. The description says that \"early async failure prevents follow-up refinement checks\". However, the expected `count` value is 2, indicating that both refinements are run, even though the first one returns `false`. I didn't want to break the existing behaviour so I removed the refinement prevention but what is actually the expected behaviour?",
          "Nice work!\r\nStill need some work to reach https://github.com/badrap/valita level, but at least it shouldn't be the bottleneck of the whole application after this :)",
          "Thanks! Valita is indeed a nice piece of software. Of course running these kind of microbenchmarks is a bit dangerous because benchmark setup might favour some libraries. For example valita seems to be built built on top of assumption that validated object does not contain any extra keys and if that happens, it falls back to a slower execution path (its still pretty damn fast though \ud83d\ude05!). In `zod` extra keys do not matter (if running with default .strip mode).\r\n\r\nIf we add some extra keys to the data, we can see that among the \"popular\" libs we're almost in par.\r\n```\r\n> typescript-runtime-type-benchmarks@1.0.0 start\r\n> ts-node index.ts\r\n\r\nRunning \"data-type-sans-outliers\" suite...\r\nProgress: 100%\r\n\r\n  io-ts:\r\n    1 562 873 ops/s, \u00b131.23%   | 11.62% slower\r\n\r\n  runtypes:\r\n    166 728 ops/s, \u00b10.70%     | 90.57% slower\r\n\r\n  valita:\r\n    1 768 350 ops/s, \u00b10.72%   | fastest\r\n\r\n  zod:\r\n    3 458 ops/s, \u00b114.52%       | slowest, 99.8% slower\r\n\r\n  milankinen/zod:\r\n    801 172 ops/s, \u00b11.18%     | 54.69% slower\r\n\r\nFinished 5 cases!\r\n  Fastest: valita\r\n  Slowest: zod\r\n```\r\n\r\nOn the other hand the test setup might be able to put in such way that also the new implementation seem a lot slower than others. \ud83d\ude04 ",
          "@milankinen \r\n\r\n> Also one other thing I noticed when I was running the tests with the new implementation was that this test seemed to have an expectation that was conflicting with the description. The description says that \"early async failure prevents follow-up refinement checks\". However, the expected count value is 2, indicating that both refinements are run, even though the first one returns false. I didn't want to break the existing behaviour so I removed the refinement prevention but what is actually the expected behaviour?\r\n\r\nI'd say even if the original _intent_ was to prevent the refinement, the fact that the current version does not prevent it (given the tests) means that's the behavior to preserve. If we're collecting possible breaking changes around these updates here, maybe it's worth considering that more holistically, but I imagine we want to minimize breakage. Definitely a @colinhacks call.\r\n\r\n> There are still some conflicting files because this branch is built on top of #431 which is a little bit behind the current master. What do you think is the best option?\r\n\r\nI'm curious about this question as well. In my opinion, I'd rather see us concentrate on landing your changes here while incorporating some of the additional changes to `ZodError` that the other PR introduces, but I want to get some marching orders from Colin around this since it seems like we're all in a good position to take on the work.",
          ">I'm curious about this question as well. In my opinion, I'd rather see us concentrate on landing your changes here while incorporating some of the additional changes to ZodError that the other PR introduces, but I want to get some marching orders from Colin around this since it seems like we're all in a good position to take on the work.\r\n\r\nI guess you're talking about #459 which introduces also the `ZodError` changes? I mean, #431 introduces only the benchmarks (no ZodError changes) and is mergeable by its own (and not having any conflicts atm), so I was just wondering that do we want to merge it first as a separate PR? Then I could rebase this branch of mine on top of the master and drop the benchmark commit from this PR.  \r\n\r\nOr we could just merge this entirely which also merges benchmarks to the master, making #431 obsolete. Both options are fine for me.\r\n",
          "Yeah, all of these options are on the table for me, too, but I want to minimize the amount of work (and rework) that we need to do to land _these_ changes, regardless of what we choose to do about `ZodError`.\r\n\r\n@colinhacks I think we're all ready to put some work in here if you have a clear sense of what you want to see happen. Separate PRs for the different elements (benchmarking, ZodError changes, control flow changes)? Combine all of the performance work onto this branch? If we want to combine these branches,  what are your thoughts on the nature of breaking changes around further `ZodError` and `ZodUnion`-specific issues?",
          "I already fixed all the conflicts on this PR locally. My plan is to redo/merge in Scott's ZodError changes where relevant in my local branch, then merge the whole thing as one big PR. \r\n\r\nI don't think eliminating the Error subclass is enough to merit a new major version. ZodError implements the entire Error interface except `.stack` (we could add `stack = \"\"` as a property) so it's unlikely to break much code. Sorry Matti, as a \"code janitor\" (love that \ud83d\ude1b) this probably gives you an aneurysm.\r\n\r\nUnfortunately there's a larger backwards compatibility problem: the new return type of the `_parse` method. Despite the fact that it's prefixed, users may have defined custom subclasses that rely on the old method signature. It's the [recommended way](https://github.com/colinhacks/zod/issues/307) to implement custom ZodType subclasses. Ideally we'd be able to maintain compatibility somehow, I'll look into it. If it's not, we can just break this too, since it's not officially documented. ",
          ">ZodError implements the entire Error interface except .stack (we could add stack = \"\" as a property) so it's unlikely to break much code. Sorry Matti, as a \"code janitor\" (love that \ud83d\ude1b) this probably gives you an aneurysm.\r\n\r\nI'm not worried about the property itself but its contents. \ud83d\ude04 If you decide to remove the `Error` inheritance, then it's fine for me to drop the `stack` property as well.\r\n\r\n> Unfortunately there's a larger backwards compatibility problem: the new return type of the _parse method. ...\r\n\r\nShiii.. I thought it was for internal purposes only! This commit https://github.com/colinhacks/zod/pull/492/commits/c0744c7d6b514808051af30eab1edb6764a813a3 attempts to restore the backwards compatibility. It basically does the following:\r\n\r\n* Restore old `PseudoPromise` implementation and rename new \"PseudoPromise\" construct to `AsyncValue`\r\n* Rename new \"fast\" internal parse to `_parseFast` - all built-in `ZodType` sub-classes implement this\r\n* Add `_parseSlow` to `ZodType` that will make the conversion from new parameter format to old format and calls `_parse` \r\n* Add logic to detect whether we can use \"fast\" parse flow or \"slow\" depending whether the type instance has `_parse` overridden or not\r\n* Restore `_internalParse` that uses the detected execution flow - all internal calls should call this instead of `_parse`, `_parseFast` or `_parseSlow`\r\n* Add default `_parse` implementation to `ZodType` so that inherited custom types can call `super._parse(...)`\r\n\r\nI also added some tests for the backwards compatibility.",
          "Merged in 3.3! \r\n\r\nFor now ZodError still subclasses Error but that still might change that in a future release. I decided to forgo including your compatibility changes from (c0744c7)[https://github.com/colinhacks/zod/commit/c0744c7d6b514808051af30eab1edb6764a813a3]. I don't think it's worth the additional complexity, since I have no evidence that anyone is actually subclassing ZodType in the wild. In any case, since this pattern isn't actually documented, I'm not particularly concerned about publishing this as a minor version. \r\n\r\nAgain, incredible work! \ud83d\ude4c ",
          "Awesome! Thank you for your quick actions to get this merged! \ud83d\udc4c "
        ]
      },
      {
        "pr_number": 492,
        "title": "Performance improvements",
        "body": "Hello and first thanks for this project! I've hoped to find a validation library that focuses on data validation, has simple and intuitive API and can infer TS types correctly from the schemas. When I encountered `zod`, I knew that it was exactly what I had been searching for. So I happily started using the library but soon I unfortunately realized that there were some performance issues that made the validations run very slow and due these issues I had to drop the library from production. I felt very sad about it. \ud83d\ude22 So here is my contribution that'd hopefully help to fix some of these issues in future.\r\n\r\ntl;dr; this PR introduces some changes that bring **100-200x speedup** compared to the current `master` \r\n\r\n### Baseline\r\n\r\nThere is already some prior research done about the performance, such as #292 and #459 which have found that excessive `ZodError` allocation is the main cause for poor performance and one fix would be to remove the `Error` base class (and hence remove the costly stacktrace allocation). And if I've understood correctly, the main concern is that the stacktrace could be relevant for the library uses (and to be honest, I share this concern as well).\r\n\r\nSo I took a look at the codebase and (like @reinismu [said](https://github.com/colinhacks/zod/pull/292#discussion_r567867700)) it heavily overuses `try/catch`. The codebase also implements `PseudoPromise` abstraction that allows to support async refinements. If we (mentally) unroll the structure, the code flow looks like the following:\r\n\r\n```js\r\n// level 1\r\ntry {\r\n  const err1 = new ZodError()\r\n  if (invalid(level1)) throw err1\r\n  // level 2\r\n  try {\r\n    const err2 = new ZodError()\r\n    if (invalid(level2)) throw err2\r\n    // level 3 \r\n    try {\r\n      const err3 = new ZodError()\r\n      if (invalid(level3)) throw err3\r\n      // level ...\r\n      try {\r\n        // ...\r\n      } catch (err) {\r\n        // ...\r\n      }\r\n    } catch (err) {\r\n      err2.addIssues(err.issues)\r\n      throw err2\r\n    }\r\n  } catch (err) {\r\n    err1.addIssues(err.issues)\r\n    throw err1\r\n  }\r\n} catch (err) {\r\n  baseErr.addIssues(err.issues)\r\n  throw baseErr\r\n}\r\n```\r\n\r\nLike you can see, the code allocates quite many errors. It also accumulates issues per level which is a lot of extra work. In addition this flow is orchestrated by `PseudoPromise` abstraction that also adds some extra allocation and calculation to the parsing.\r\n\r\nAt this point, I ran the (excellent!) benchmarks introduced in #431 by @scotttrinh and got the following results on my '20 MBP (Node 16):\r\n<details>\r\n  <summary> ** Baseline (~50k ops/s) ** </summary>\r\n  \r\n```\r\nz.string: empty string x 69,126 ops/sec \u00b11.71% (86 runs sampled)\r\nz.string: short string x 66,917 ops/sec \u00b14.43% (85 runs sampled)\r\nz.string: long string x 69,844 ops/sec \u00b14.63% (87 runs sampled)\r\nz.string: invalid: null x 51,296 ops/sec \u00b14.51% (82 runs sampled)\r\nz.string: manual parser: long x 878,697,948 ops/sec \u00b11.60% (85 runs sampled)\r\nz.object: empty: valid x 31,908 ops/sec \u00b18.31% (81 runs sampled)\r\nz.object: empty: valid: extra keys x 35,451 ops/sec \u00b16.17% (84 runs sampled)\r\nz.object: empty: invalid: null x 56,126 ops/sec \u00b11.50% (89 runs sampled)\r\nz.object: short: valid x 20,422 ops/sec \u00b16.28% (84 runs sampled)\r\nz.object: short: valid: extra keys x 19,344 ops/sec \u00b16.31% (79 runs sampled)\r\nz.object: short: invalid: null x 50,725 ops/sec \u00b11.61% (82 runs sampled)\r\nz.object: long: valid x 10,492 ops/sec \u00b13.93% (80 runs sampled)\r\nz.object: long: valid: extra keys x 9,877 ops/sec \u00b17.00% (80 runs sampled)\r\nz.object: long: invalid: null x 51,332 ops/sec \u00b11.65% (88 runs sampled)\r\n```\r\n\r\n</details>\r\n\r\n\r\n### 1. Optimize flow control\r\n\r\n \r\nSo what I did is that I changed the execution flow into more lightweight variant which allows better composition of parsing functions and minimizes the required allocations, in pseudo:\r\n\r\n```js \r\nconst level1Valid = valid(level1Data)\r\nconst level2Valid = level1Valid && valid(level2Data)\r\nconst level3Valid = level2Valid && valid(level3Data)\r\nconst levelNParsed = level3Valid && valid(levelNData) ? makeResult(levelNData) : INVALID\r\nconst level3Parsed = levelNParsed === INVALID ? INVALID : makeResult(level3Data, levelNParsed)\r\nconst level2Parsed = level3Parsed === INVALID ? INVALID : makeResult(level2Data, level3Parsed)\r\nconst level1Parsed = level2Parsed === INVALID ? INVALID : makeResult(level1Data, level3Parsed)\r\n```\r\nLike in the current implementation, the parsing context is passed as a parameter to `_parse` but the difference is that errors are not indicated by throwing and catching them. Instead, `_parse` returns a result object of `ParseResult = INVALID | OK(parsed)`. If any parsing errors occur, issues are stored directly into the context: we known that if parsing fails, the call stack will eventually be returning to the top level `parse` (or `safeParse`) where we can read all the issues and **then** throw an error with all of those issues. This means that **there are no breaking changes to the public API** but the difference in performance is huge.\r\n\r\nOf course the implementation must also support async refinements so the parse result type is actually `ParseResult = INVALID | OK(parsed) | ASYNC(INVALID | OK(parsed))` and parsers must implement the async case as well. Luckily the number of those cases is relatively low (basically collections like object, array, tuple, record, set, list) so I could add specialized performance-optimized implementations for each case. I ran benchmarks again and the different is significant. And the best part is that there were absolutely **no changes to the public API** - all tests are passing without any modifications on them!\r\n\r\n<details>\r\n  <summary> ** Optimized flow (~5M ops/s) ** </summary>\r\n  \r\n```\r\nz.string: empty string x 13,120,643 ops/sec \u00b11.27% (94 runs sampled)\r\nz.string: short string x 12,989,836 ops/sec \u00b11.45% (92 runs sampled)\r\nz.string: long string x 12,788,053 ops/sec \u00b11.21% (91 runs sampled)\r\nz.string: invalid: null x 118,915 ops/sec \u00b11.32% (81 runs sampled)\r\nz.string: manual parser: long x 876,793,503 ops/sec \u00b11.38% (82 runs sampled)\r\nz.object: empty: valid x 5,437,250 ops/sec \u00b14.61% (88 runs sampled)\r\nz.object: empty: valid: extra keys x 5,086,771 ops/sec \u00b11.36% (88 runs sampled)\r\nz.object: empty: invalid: null x 127,522 ops/sec \u00b13.38% (90 runs sampled)\r\nz.object: short: valid x 3,103,337 ops/sec \u00b11.53% (93 runs sampled)\r\nz.object: short: valid: extra keys x 3,223,728 ops/sec \u00b11.64% (90 runs sampled)\r\nz.object: short: invalid: null x 126,815 ops/sec \u00b14.66% (91 runs sampled)\r\nz.object: long: valid x 1,482,835 ops/sec \u00b11.32% (94 runs sampled)\r\nz.object: long: valid: extra keys x 1,411,238 ops/sec \u00b11.22% (91 runs sampled)\r\nz.object: long: invalid: null x 120,033 ops/sec \u00b13.74% (87 runs sampled)\r\n```\r\n\r\n</details>\r\n\r\n### 2. Add some extra optimizations\r\n\r\nIn addition to the flow, I also did some minor optimizations:\r\n\r\n* https://github.com/milankinen/zod/commit/341e9ddc46dbf12f9860c8aa7c5eb177e9bc27ad - change context path updates to use persistent O(1) list instead of O(n) array copy\r\n* https://github.com/milankinen/zod/commit/423c9a97f14fec5ce0b66d5f74378802161a9c97 - cache object shape information over subsequent parse events\r\n* https://github.com/milankinen/zod/commit/89088c2570230d9dd17e57c5e795b9babba69c57 - switch-case parsed type calculation\r\n\r\nWith these smaller local optimizations, I could squeeze some extra cycles:\r\n\r\n<details>\r\n  <summary> ** Optimized flow + local optimizations (~7,5M ops/s) ** </summary>\r\n  \r\n```\r\nz.string: empty string x 11,050,585 ops/sec \u00b11.34% (89 runs sampled)\r\nz.string: short string x 10,931,303 ops/sec \u00b11.58% (89 runs sampled)\r\nz.string: long string x 11,056,030 ops/sec \u00b11.43% (94 runs sampled)\r\nz.string: invalid: null x 118,733 ops/sec \u00b11.41% (90 runs sampled)\r\nz.string: manual parser: long x 864,371,553 ops/sec \u00b11.41% (82 runs sampled)\r\nz.object: empty: valid x 7,120,299 ops/sec \u00b14.26% (88 runs sampled)\r\nz.object: empty: valid: extra keys x 7,585,016 ops/sec \u00b11.28% (93 runs sampled)\r\nz.object: empty: invalid: null x 129,548 ops/sec \u00b13.68% (89 runs sampled)\r\nz.object: short: valid x 4,777,457 ops/sec \u00b11.35% (94 runs sampled)\r\nz.object: short: valid: extra keys x 5,014,443 ops/sec \u00b14.73% (90 runs sampled)\r\nz.object: short: invalid: null x 127,899 ops/sec \u00b13.33% (89 runs sampled)\r\nz.object: long: valid x 2,173,238 ops/sec \u00b11.34% (94 runs sampled)\r\nz.object: long: valid: extra keys x 2,125,664 ops/sec \u00b11.29% (91 runs sampled)\r\nz.object: long: invalid: null x 117,491 ops/sec \u00b13.75% (81 runs sampled)\r\n```\r\n\r\n</details>\r\n\r\nI also ran the https://github.com/moltar/typescript-runtime-type-benchmarks with current master (`zod` in the graphics) and optimizations (`milankinen/zod` in the graphics) and got the following results:\r\n\r\n![Som graphics](https://raw.githubusercontent.com/milankinen/zod/performance-improvements/data-type-sans-outliers-v16.0.0.png)\r\n\r\n<details>\r\n  <summary> Full onsole output </summary>\r\n  \r\n```\r\nRunning \"data-type-sans-outliers\" suite...\r\n decoders:\r\n    328 543 ops/s, \u00b11.64%     | 92.91% slower\r\n\r\n  io-ts:\r\n    1 924 017 ops/s, \u00b11.39%   | 58.49% slower\r\n\r\n  jointz:\r\n    2 303 597 ops/s, \u00b11.18%   | 50.3% slower\r\n\r\n  json-decoder:\r\n    1 205 792 ops/s, \u00b11.44%   | 73.98% slower\r\n\r\n  @mojotech/json-type-validation:\r\n    1 801 597 ops/s, \u00b11.40%   | 61.13% slower\r\n\r\n  myzod:\r\n    2 115 310 ops/s, \u00b11.29%   | 54.36% slower\r\n\r\n  purify-ts:\r\n    1 023 057 ops/s, \u00b11.73%   | 77.93% slower\r\n\r\n  rulr:\r\n    1 242 731 ops/s, \u00b11.36%   | 73.19% slower\r\n\r\n  runtypes:\r\n    161 748 ops/s, \u00b11.66%     | 96.51% slower\r\n\r\n  simple-runtypes:\r\n    3 077 120 ops/s, \u00b11.23%   | 33.61% slower\r\n\r\n  superstruct:\r\n    152 440 ops/s, \u00b11.81%     | 96.71% slower\r\n\r\n  toi:\r\n    874 245 ops/s, \u00b11.41%     | 81.14% slower\r\n\r\n  ts-utils:\r\n    64 927 ops/s, \u00b160.92%      | 98.6% slower\r\n\r\n  @typeofweb/schema:\r\n    1 320 077 ops/s, \u00b11.54%   | 71.52% slower\r\n\r\n  valita:\r\n    4 634 932 ops/s, \u00b11.12%   | fastest\r\n\r\n  yup:\r\n    42 782 ops/s, \u00b11.14%      | 99.08% slower\r\n\r\n  zod:\r\n    2 981 ops/s, \u00b117.43%       | slowest, 99.94% slower\r\n\r\n  milankinen/zod:\r\n    469 237 ops/s, \u00b141.76%     | 89.88% slower\r\n\r\n  ts-interface-checker:\r\n    3 340 228 ops/s, \u00b11.29%   | 27.93% slower\r\n\r\nFinished 23 cases!\r\n  Fastest: valita\r\n  Slowest: zod\r\n\r\n```\r\n\r\n</details>\r\n\r\n### Conclusions\r\n\r\nI'm very happy that I found a way to significantly improve the performance while maintaining this excellent API. Honestly I don't believe or expect that this PR will be merged to the upstream as it is but I at least hope that it'll give some pointers for the future improvements. I really like `zod` as a library and hope that some day the performance gets fixed so that it won't prevent me from using this in production as well. :slightly_smiling_face:\r\n\r\nCheers!\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/492",
        "comments": [
          "PRs like this remind me why I love open source. Truly glorious stuff Matti!\r\n\r\nI've been looking through the code and I think I understand the new execution system. I like it! Getting rid of all those spaghetti code PseudoPromise methods is so satisfying.\r\n\r\nFor grins, I re-ran the benchmarks after removing the `Error` base class, and saw nearly 3x performance improvements on all invalid results. Which is a pretty compelling reason to remove it...\r\n\r\n```\r\nz.string: empty string x 9,702,190 ops/sec \u00b10.89% (87 runs sampled)\r\nz.string: short string x 9,628,797 ops/sec \u00b10.84% (92 runs sampled)\r\nz.string: long string x 9,472,395 ops/sec \u00b12.01% (88 runs sampled)\r\nz.string: invalid: null x 419,983 ops/sec \u00b11.34% (87 runs sampled)\r\nz.string: manual parser: long x 973,337,378 ops/sec \u00b10.75% (96 runs sampled)\r\nz.object: empty: valid x 7,065,026 ops/sec \u00b11.18% (87 runs sampled)\r\nz.object: empty: valid: extra keys x 8,204,405 ops/sec \u00b10.94% (92 runs sampled)\r\nz.object: empty: invalid: null x 537,947 ops/sec \u00b11.76% (86 runs sampled)\r\nz.object: short: valid x 4,047,468 ops/sec \u00b10.96% (89 runs sampled)\r\nz.object: short: valid: extra keys x 4,494,936 ops/sec \u00b11.06% (86 runs sampled)\r\nz.object: short: invalid: null x 554,633 ops/sec \u00b11.06% (92 runs sampled)\r\nz.object: long: valid x 2,041,231 ops/sec \u00b11.07% (86 runs sampled)\r\nz.object: long: valid: extra keys x 2,031,685 ops/sec \u00b11.13% (88 runs sampled)\r\nz.object: long: invalid: null x 535,857 ops/sec \u00b12.65% (82 runs sampled)\r\n```\r\n\r\nYou say you don't expect that this PR will be merged...but I can't see any reason why not. Seems like a definitive improvement in terms of code understandability, perf, and elegance. Am I missing anything?\r\n\r\nI think combining this with some of the changes by @scotttrinh will be the best of all worlds: changing the format of `ZodInvalidUnionIssue` and eliminating the Error subclass for ZodError (cc @lilred). Scott what do you think?",
          ">You say you don't expect that this PR will be merged...but I can't see any reason why not. Seems like a definitive improvement in terms of code understandability, perf, and elegance. Am I missing anything?\r\n\r\nWell, this PR introduces quite big changes to the internals which can be an issue sometimes. \ud83d\ude05 But I'm glad that you approve those changes, technically there should be no reason not to merge this (except the conflicts that must be resolved first). \ud83d\ude42 This PR is forked from #431 so perhaps that could be merged first as a separate PR?\r\n\r\n>For grins, I re-ran the benchmarks after removing the Error base class, and saw nearly 3x performance improvements on all invalid results. Which is a pretty compelling reason to remove it...\r\n\r\nYeah, removing the `Error` class can improve the performance for invalid cases quite a lot so if bumping the major version does not scare, then we should definitely go for it!\r\n\r\nAnother, a bit more conservative option could be to keep `Error` sub-classing in `.parse` and `.parseAsync` so that the thrown error has a stacktrace, but return `{success: false, issues: ZodIssue[])` from `safeParse` and `spa`? With this, performance critical applications could use safe version. That said, both approaches are not backward compatible so they'd require a major version bump. \r\n\r\n>I think combining this with some of the changes by @scotttrinh will be the best of all worlds: changing the format of ZodInvalidUnionIssue and eliminating the Error subclass for ZodError (cc @lilred). Scott what do you think?\r\n\r\nI definitely agree with this \ud83d\udc4d Storing error instances inside another error won't give any benefits.\r\n\r\n",
          "> I think combining this with some of the changes by @scotttrinh will be the best of all worlds: changing the format of `ZodInvalidUnionIssue` and eliminating the Error subclass for ZodError (cc @lilred). Scott what do you think?\n\nI don't think we should wait on my opinion here, I was mostly working off existing work! I'll have time in the next few hours to review and it sounds like we will need to rebase or deconflict this on the latest, so I'm happy to help with that, too.",
          "FYI @colinhacks I don't have bandwidth to review this in a timely manner, I don't think you were awaiting my review but just so it's clear feel free to proceed without me.",
          "@scotttrinh thanks for the review comments! I committed the suggested changes. There are still some conflicting files because this branch is built on top of #431 which is a little bit behind the current master. What do you think is the best option? I could either:\r\n\r\n1. Rebase this whole branch with the benchmark commits onto current master\r\n2. Rebase only my commits and leave benchmark branch to be merged separately\r\n\r\nAlso one other thing I noticed when I was running the tests with the new implementation was that [this test](https://github.com/colinhacks/zod/blob/master/src/__tests__/async-parsing.test.ts#L364-L387) seemed to have an expectation that was conflicting with the description. The description says that \"early async failure prevents follow-up refinement checks\". However, the expected `count` value is 2, indicating that both refinements are run, even though the first one returns `false`. I didn't want to break the existing behaviour so I removed the refinement prevention but what is actually the expected behaviour?",
          "Nice work!\r\nStill need some work to reach https://github.com/badrap/valita level, but at least it shouldn't be the bottleneck of the whole application after this :)",
          "Thanks! Valita is indeed a nice piece of software. Of course running these kind of microbenchmarks is a bit dangerous because benchmark setup might favour some libraries. For example valita seems to be built built on top of assumption that validated object does not contain any extra keys and if that happens, it falls back to a slower execution path (its still pretty damn fast though \ud83d\ude05!). In `zod` extra keys do not matter (if running with default .strip mode).\r\n\r\nIf we add some extra keys to the data, we can see that among the \"popular\" libs we're almost in par.\r\n```\r\n> typescript-runtime-type-benchmarks@1.0.0 start\r\n> ts-node index.ts\r\n\r\nRunning \"data-type-sans-outliers\" suite...\r\nProgress: 100%\r\n\r\n  io-ts:\r\n    1 562 873 ops/s, \u00b131.23%   | 11.62% slower\r\n\r\n  runtypes:\r\n    166 728 ops/s, \u00b10.70%     | 90.57% slower\r\n\r\n  valita:\r\n    1 768 350 ops/s, \u00b10.72%   | fastest\r\n\r\n  zod:\r\n    3 458 ops/s, \u00b114.52%       | slowest, 99.8% slower\r\n\r\n  milankinen/zod:\r\n    801 172 ops/s, \u00b11.18%     | 54.69% slower\r\n\r\nFinished 5 cases!\r\n  Fastest: valita\r\n  Slowest: zod\r\n```\r\n\r\nOn the other hand the test setup might be able to put in such way that also the new implementation seem a lot slower than others. \ud83d\ude04 ",
          "@milankinen \r\n\r\n> Also one other thing I noticed when I was running the tests with the new implementation was that this test seemed to have an expectation that was conflicting with the description. The description says that \"early async failure prevents follow-up refinement checks\". However, the expected count value is 2, indicating that both refinements are run, even though the first one returns false. I didn't want to break the existing behaviour so I removed the refinement prevention but what is actually the expected behaviour?\r\n\r\nI'd say even if the original _intent_ was to prevent the refinement, the fact that the current version does not prevent it (given the tests) means that's the behavior to preserve. If we're collecting possible breaking changes around these updates here, maybe it's worth considering that more holistically, but I imagine we want to minimize breakage. Definitely a @colinhacks call.\r\n\r\n> There are still some conflicting files because this branch is built on top of #431 which is a little bit behind the current master. What do you think is the best option?\r\n\r\nI'm curious about this question as well. In my opinion, I'd rather see us concentrate on landing your changes here while incorporating some of the additional changes to `ZodError` that the other PR introduces, but I want to get some marching orders from Colin around this since it seems like we're all in a good position to take on the work.",
          ">I'm curious about this question as well. In my opinion, I'd rather see us concentrate on landing your changes here while incorporating some of the additional changes to ZodError that the other PR introduces, but I want to get some marching orders from Colin around this since it seems like we're all in a good position to take on the work.\r\n\r\nI guess you're talking about #459 which introduces also the `ZodError` changes? I mean, #431 introduces only the benchmarks (no ZodError changes) and is mergeable by its own (and not having any conflicts atm), so I was just wondering that do we want to merge it first as a separate PR? Then I could rebase this branch of mine on top of the master and drop the benchmark commit from this PR.  \r\n\r\nOr we could just merge this entirely which also merges benchmarks to the master, making #431 obsolete. Both options are fine for me.\r\n",
          "Yeah, all of these options are on the table for me, too, but I want to minimize the amount of work (and rework) that we need to do to land _these_ changes, regardless of what we choose to do about `ZodError`.\r\n\r\n@colinhacks I think we're all ready to put some work in here if you have a clear sense of what you want to see happen. Separate PRs for the different elements (benchmarking, ZodError changes, control flow changes)? Combine all of the performance work onto this branch? If we want to combine these branches,  what are your thoughts on the nature of breaking changes around further `ZodError` and `ZodUnion`-specific issues?",
          "I already fixed all the conflicts on this PR locally. My plan is to redo/merge in Scott's ZodError changes where relevant in my local branch, then merge the whole thing as one big PR. \r\n\r\nI don't think eliminating the Error subclass is enough to merit a new major version. ZodError implements the entire Error interface except `.stack` (we could add `stack = \"\"` as a property) so it's unlikely to break much code. Sorry Matti, as a \"code janitor\" (love that \ud83d\ude1b) this probably gives you an aneurysm.\r\n\r\nUnfortunately there's a larger backwards compatibility problem: the new return type of the `_parse` method. Despite the fact that it's prefixed, users may have defined custom subclasses that rely on the old method signature. It's the [recommended way](https://github.com/colinhacks/zod/issues/307) to implement custom ZodType subclasses. Ideally we'd be able to maintain compatibility somehow, I'll look into it. If it's not, we can just break this too, since it's not officially documented. ",
          ">ZodError implements the entire Error interface except .stack (we could add stack = \"\" as a property) so it's unlikely to break much code. Sorry Matti, as a \"code janitor\" (love that \ud83d\ude1b) this probably gives you an aneurysm.\r\n\r\nI'm not worried about the property itself but its contents. \ud83d\ude04 If you decide to remove the `Error` inheritance, then it's fine for me to drop the `stack` property as well.\r\n\r\n> Unfortunately there's a larger backwards compatibility problem: the new return type of the _parse method. ...\r\n\r\nShiii.. I thought it was for internal purposes only! This commit https://github.com/colinhacks/zod/pull/492/commits/c0744c7d6b514808051af30eab1edb6764a813a3 attempts to restore the backwards compatibility. It basically does the following:\r\n\r\n* Restore old `PseudoPromise` implementation and rename new \"PseudoPromise\" construct to `AsyncValue`\r\n* Rename new \"fast\" internal parse to `_parseFast` - all built-in `ZodType` sub-classes implement this\r\n* Add `_parseSlow` to `ZodType` that will make the conversion from new parameter format to old format and calls `_parse` \r\n* Add logic to detect whether we can use \"fast\" parse flow or \"slow\" depending whether the type instance has `_parse` overridden or not\r\n* Restore `_internalParse` that uses the detected execution flow - all internal calls should call this instead of `_parse`, `_parseFast` or `_parseSlow`\r\n* Add default `_parse` implementation to `ZodType` so that inherited custom types can call `super._parse(...)`\r\n\r\nI also added some tests for the backwards compatibility.",
          "Merged in 3.3! \r\n\r\nFor now ZodError still subclasses Error but that still might change that in a future release. I decided to forgo including your compatibility changes from (c0744c7)[https://github.com/colinhacks/zod/commit/c0744c7d6b514808051af30eab1edb6764a813a3]. I don't think it's worth the additional complexity, since I have no evidence that anyone is actually subclassing ZodType in the wild. In any case, since this pattern isn't actually documented, I'm not particularly concerned about publishing this as a minor version. \r\n\r\nAgain, incredible work! \ud83d\ude4c ",
          "Awesome! Thank you for your quick actions to get this merged! \ud83d\udc4c "
        ]
      },
      {
        "pr_number": 492,
        "title": "Performance improvements",
        "body": "Hello and first thanks for this project! I've hoped to find a validation library that focuses on data validation, has simple and intuitive API and can infer TS types correctly from the schemas. When I encountered `zod`, I knew that it was exactly what I had been searching for. So I happily started using the library but soon I unfortunately realized that there were some performance issues that made the validations run very slow and due these issues I had to drop the library from production. I felt very sad about it. \ud83d\ude22 So here is my contribution that'd hopefully help to fix some of these issues in future.\r\n\r\ntl;dr; this PR introduces some changes that bring **100-200x speedup** compared to the current `master` \r\n\r\n### Baseline\r\n\r\nThere is already some prior research done about the performance, such as #292 and #459 which have found that excessive `ZodError` allocation is the main cause for poor performance and one fix would be to remove the `Error` base class (and hence remove the costly stacktrace allocation). And if I've understood correctly, the main concern is that the stacktrace could be relevant for the library uses (and to be honest, I share this concern as well).\r\n\r\nSo I took a look at the codebase and (like @reinismu [said](https://github.com/colinhacks/zod/pull/292#discussion_r567867700)) it heavily overuses `try/catch`. The codebase also implements `PseudoPromise` abstraction that allows to support async refinements. If we (mentally) unroll the structure, the code flow looks like the following:\r\n\r\n```js\r\n// level 1\r\ntry {\r\n  const err1 = new ZodError()\r\n  if (invalid(level1)) throw err1\r\n  // level 2\r\n  try {\r\n    const err2 = new ZodError()\r\n    if (invalid(level2)) throw err2\r\n    // level 3 \r\n    try {\r\n      const err3 = new ZodError()\r\n      if (invalid(level3)) throw err3\r\n      // level ...\r\n      try {\r\n        // ...\r\n      } catch (err) {\r\n        // ...\r\n      }\r\n    } catch (err) {\r\n      err2.addIssues(err.issues)\r\n      throw err2\r\n    }\r\n  } catch (err) {\r\n    err1.addIssues(err.issues)\r\n    throw err1\r\n  }\r\n} catch (err) {\r\n  baseErr.addIssues(err.issues)\r\n  throw baseErr\r\n}\r\n```\r\n\r\nLike you can see, the code allocates quite many errors. It also accumulates issues per level which is a lot of extra work. In addition this flow is orchestrated by `PseudoPromise` abstraction that also adds some extra allocation and calculation to the parsing.\r\n\r\nAt this point, I ran the (excellent!) benchmarks introduced in #431 by @scotttrinh and got the following results on my '20 MBP (Node 16):\r\n<details>\r\n  <summary> ** Baseline (~50k ops/s) ** </summary>\r\n  \r\n```\r\nz.string: empty string x 69,126 ops/sec \u00b11.71% (86 runs sampled)\r\nz.string: short string x 66,917 ops/sec \u00b14.43% (85 runs sampled)\r\nz.string: long string x 69,844 ops/sec \u00b14.63% (87 runs sampled)\r\nz.string: invalid: null x 51,296 ops/sec \u00b14.51% (82 runs sampled)\r\nz.string: manual parser: long x 878,697,948 ops/sec \u00b11.60% (85 runs sampled)\r\nz.object: empty: valid x 31,908 ops/sec \u00b18.31% (81 runs sampled)\r\nz.object: empty: valid: extra keys x 35,451 ops/sec \u00b16.17% (84 runs sampled)\r\nz.object: empty: invalid: null x 56,126 ops/sec \u00b11.50% (89 runs sampled)\r\nz.object: short: valid x 20,422 ops/sec \u00b16.28% (84 runs sampled)\r\nz.object: short: valid: extra keys x 19,344 ops/sec \u00b16.31% (79 runs sampled)\r\nz.object: short: invalid: null x 50,725 ops/sec \u00b11.61% (82 runs sampled)\r\nz.object: long: valid x 10,492 ops/sec \u00b13.93% (80 runs sampled)\r\nz.object: long: valid: extra keys x 9,877 ops/sec \u00b17.00% (80 runs sampled)\r\nz.object: long: invalid: null x 51,332 ops/sec \u00b11.65% (88 runs sampled)\r\n```\r\n\r\n</details>\r\n\r\n\r\n### 1. Optimize flow control\r\n\r\n \r\nSo what I did is that I changed the execution flow into more lightweight variant which allows better composition of parsing functions and minimizes the required allocations, in pseudo:\r\n\r\n```js \r\nconst level1Valid = valid(level1Data)\r\nconst level2Valid = level1Valid && valid(level2Data)\r\nconst level3Valid = level2Valid && valid(level3Data)\r\nconst levelNParsed = level3Valid && valid(levelNData) ? makeResult(levelNData) : INVALID\r\nconst level3Parsed = levelNParsed === INVALID ? INVALID : makeResult(level3Data, levelNParsed)\r\nconst level2Parsed = level3Parsed === INVALID ? INVALID : makeResult(level2Data, level3Parsed)\r\nconst level1Parsed = level2Parsed === INVALID ? INVALID : makeResult(level1Data, level3Parsed)\r\n```\r\nLike in the current implementation, the parsing context is passed as a parameter to `_parse` but the difference is that errors are not indicated by throwing and catching them. Instead, `_parse` returns a result object of `ParseResult = INVALID | OK(parsed)`. If any parsing errors occur, issues are stored directly into the context: we known that if parsing fails, the call stack will eventually be returning to the top level `parse` (or `safeParse`) where we can read all the issues and **then** throw an error with all of those issues. This means that **there are no breaking changes to the public API** but the difference in performance is huge.\r\n\r\nOf course the implementation must also support async refinements so the parse result type is actually `ParseResult = INVALID | OK(parsed) | ASYNC(INVALID | OK(parsed))` and parsers must implement the async case as well. Luckily the number of those cases is relatively low (basically collections like object, array, tuple, record, set, list) so I could add specialized performance-optimized implementations for each case. I ran benchmarks again and the different is significant. And the best part is that there were absolutely **no changes to the public API** - all tests are passing without any modifications on them!\r\n\r\n<details>\r\n  <summary> ** Optimized flow (~5M ops/s) ** </summary>\r\n  \r\n```\r\nz.string: empty string x 13,120,643 ops/sec \u00b11.27% (94 runs sampled)\r\nz.string: short string x 12,989,836 ops/sec \u00b11.45% (92 runs sampled)\r\nz.string: long string x 12,788,053 ops/sec \u00b11.21% (91 runs sampled)\r\nz.string: invalid: null x 118,915 ops/sec \u00b11.32% (81 runs sampled)\r\nz.string: manual parser: long x 876,793,503 ops/sec \u00b11.38% (82 runs sampled)\r\nz.object: empty: valid x 5,437,250 ops/sec \u00b14.61% (88 runs sampled)\r\nz.object: empty: valid: extra keys x 5,086,771 ops/sec \u00b11.36% (88 runs sampled)\r\nz.object: empty: invalid: null x 127,522 ops/sec \u00b13.38% (90 runs sampled)\r\nz.object: short: valid x 3,103,337 ops/sec \u00b11.53% (93 runs sampled)\r\nz.object: short: valid: extra keys x 3,223,728 ops/sec \u00b11.64% (90 runs sampled)\r\nz.object: short: invalid: null x 126,815 ops/sec \u00b14.66% (91 runs sampled)\r\nz.object: long: valid x 1,482,835 ops/sec \u00b11.32% (94 runs sampled)\r\nz.object: long: valid: extra keys x 1,411,238 ops/sec \u00b11.22% (91 runs sampled)\r\nz.object: long: invalid: null x 120,033 ops/sec \u00b13.74% (87 runs sampled)\r\n```\r\n\r\n</details>\r\n\r\n### 2. Add some extra optimizations\r\n\r\nIn addition to the flow, I also did some minor optimizations:\r\n\r\n* https://github.com/milankinen/zod/commit/341e9ddc46dbf12f9860c8aa7c5eb177e9bc27ad - change context path updates to use persistent O(1) list instead of O(n) array copy\r\n* https://github.com/milankinen/zod/commit/423c9a97f14fec5ce0b66d5f74378802161a9c97 - cache object shape information over subsequent parse events\r\n* https://github.com/milankinen/zod/commit/89088c2570230d9dd17e57c5e795b9babba69c57 - switch-case parsed type calculation\r\n\r\nWith these smaller local optimizations, I could squeeze some extra cycles:\r\n\r\n<details>\r\n  <summary> ** Optimized flow + local optimizations (~7,5M ops/s) ** </summary>\r\n  \r\n```\r\nz.string: empty string x 11,050,585 ops/sec \u00b11.34% (89 runs sampled)\r\nz.string: short string x 10,931,303 ops/sec \u00b11.58% (89 runs sampled)\r\nz.string: long string x 11,056,030 ops/sec \u00b11.43% (94 runs sampled)\r\nz.string: invalid: null x 118,733 ops/sec \u00b11.41% (90 runs sampled)\r\nz.string: manual parser: long x 864,371,553 ops/sec \u00b11.41% (82 runs sampled)\r\nz.object: empty: valid x 7,120,299 ops/sec \u00b14.26% (88 runs sampled)\r\nz.object: empty: valid: extra keys x 7,585,016 ops/sec \u00b11.28% (93 runs sampled)\r\nz.object: empty: invalid: null x 129,548 ops/sec \u00b13.68% (89 runs sampled)\r\nz.object: short: valid x 4,777,457 ops/sec \u00b11.35% (94 runs sampled)\r\nz.object: short: valid: extra keys x 5,014,443 ops/sec \u00b14.73% (90 runs sampled)\r\nz.object: short: invalid: null x 127,899 ops/sec \u00b13.33% (89 runs sampled)\r\nz.object: long: valid x 2,173,238 ops/sec \u00b11.34% (94 runs sampled)\r\nz.object: long: valid: extra keys x 2,125,664 ops/sec \u00b11.29% (91 runs sampled)\r\nz.object: long: invalid: null x 117,491 ops/sec \u00b13.75% (81 runs sampled)\r\n```\r\n\r\n</details>\r\n\r\nI also ran the https://github.com/moltar/typescript-runtime-type-benchmarks with current master (`zod` in the graphics) and optimizations (`milankinen/zod` in the graphics) and got the following results:\r\n\r\n![Som graphics](https://raw.githubusercontent.com/milankinen/zod/performance-improvements/data-type-sans-outliers-v16.0.0.png)\r\n\r\n<details>\r\n  <summary> Full onsole output </summary>\r\n  \r\n```\r\nRunning \"data-type-sans-outliers\" suite...\r\n decoders:\r\n    328 543 ops/s, \u00b11.64%     | 92.91% slower\r\n\r\n  io-ts:\r\n    1 924 017 ops/s, \u00b11.39%   | 58.49% slower\r\n\r\n  jointz:\r\n    2 303 597 ops/s, \u00b11.18%   | 50.3% slower\r\n\r\n  json-decoder:\r\n    1 205 792 ops/s, \u00b11.44%   | 73.98% slower\r\n\r\n  @mojotech/json-type-validation:\r\n    1 801 597 ops/s, \u00b11.40%   | 61.13% slower\r\n\r\n  myzod:\r\n    2 115 310 ops/s, \u00b11.29%   | 54.36% slower\r\n\r\n  purify-ts:\r\n    1 023 057 ops/s, \u00b11.73%   | 77.93% slower\r\n\r\n  rulr:\r\n    1 242 731 ops/s, \u00b11.36%   | 73.19% slower\r\n\r\n  runtypes:\r\n    161 748 ops/s, \u00b11.66%     | 96.51% slower\r\n\r\n  simple-runtypes:\r\n    3 077 120 ops/s, \u00b11.23%   | 33.61% slower\r\n\r\n  superstruct:\r\n    152 440 ops/s, \u00b11.81%     | 96.71% slower\r\n\r\n  toi:\r\n    874 245 ops/s, \u00b11.41%     | 81.14% slower\r\n\r\n  ts-utils:\r\n    64 927 ops/s, \u00b160.92%      | 98.6% slower\r\n\r\n  @typeofweb/schema:\r\n    1 320 077 ops/s, \u00b11.54%   | 71.52% slower\r\n\r\n  valita:\r\n    4 634 932 ops/s, \u00b11.12%   | fastest\r\n\r\n  yup:\r\n    42 782 ops/s, \u00b11.14%      | 99.08% slower\r\n\r\n  zod:\r\n    2 981 ops/s, \u00b117.43%       | slowest, 99.94% slower\r\n\r\n  milankinen/zod:\r\n    469 237 ops/s, \u00b141.76%     | 89.88% slower\r\n\r\n  ts-interface-checker:\r\n    3 340 228 ops/s, \u00b11.29%   | 27.93% slower\r\n\r\nFinished 23 cases!\r\n  Fastest: valita\r\n  Slowest: zod\r\n\r\n```\r\n\r\n</details>\r\n\r\n### Conclusions\r\n\r\nI'm very happy that I found a way to significantly improve the performance while maintaining this excellent API. Honestly I don't believe or expect that this PR will be merged to the upstream as it is but I at least hope that it'll give some pointers for the future improvements. I really like `zod` as a library and hope that some day the performance gets fixed so that it won't prevent me from using this in production as well. :slightly_smiling_face:\r\n\r\nCheers!\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/492",
        "comments": [
          "PRs like this remind me why I love open source. Truly glorious stuff Matti!\r\n\r\nI've been looking through the code and I think I understand the new execution system. I like it! Getting rid of all those spaghetti code PseudoPromise methods is so satisfying.\r\n\r\nFor grins, I re-ran the benchmarks after removing the `Error` base class, and saw nearly 3x performance improvements on all invalid results. Which is a pretty compelling reason to remove it...\r\n\r\n```\r\nz.string: empty string x 9,702,190 ops/sec \u00b10.89% (87 runs sampled)\r\nz.string: short string x 9,628,797 ops/sec \u00b10.84% (92 runs sampled)\r\nz.string: long string x 9,472,395 ops/sec \u00b12.01% (88 runs sampled)\r\nz.string: invalid: null x 419,983 ops/sec \u00b11.34% (87 runs sampled)\r\nz.string: manual parser: long x 973,337,378 ops/sec \u00b10.75% (96 runs sampled)\r\nz.object: empty: valid x 7,065,026 ops/sec \u00b11.18% (87 runs sampled)\r\nz.object: empty: valid: extra keys x 8,204,405 ops/sec \u00b10.94% (92 runs sampled)\r\nz.object: empty: invalid: null x 537,947 ops/sec \u00b11.76% (86 runs sampled)\r\nz.object: short: valid x 4,047,468 ops/sec \u00b10.96% (89 runs sampled)\r\nz.object: short: valid: extra keys x 4,494,936 ops/sec \u00b11.06% (86 runs sampled)\r\nz.object: short: invalid: null x 554,633 ops/sec \u00b11.06% (92 runs sampled)\r\nz.object: long: valid x 2,041,231 ops/sec \u00b11.07% (86 runs sampled)\r\nz.object: long: valid: extra keys x 2,031,685 ops/sec \u00b11.13% (88 runs sampled)\r\nz.object: long: invalid: null x 535,857 ops/sec \u00b12.65% (82 runs sampled)\r\n```\r\n\r\nYou say you don't expect that this PR will be merged...but I can't see any reason why not. Seems like a definitive improvement in terms of code understandability, perf, and elegance. Am I missing anything?\r\n\r\nI think combining this with some of the changes by @scotttrinh will be the best of all worlds: changing the format of `ZodInvalidUnionIssue` and eliminating the Error subclass for ZodError (cc @lilred). Scott what do you think?",
          ">You say you don't expect that this PR will be merged...but I can't see any reason why not. Seems like a definitive improvement in terms of code understandability, perf, and elegance. Am I missing anything?\r\n\r\nWell, this PR introduces quite big changes to the internals which can be an issue sometimes. \ud83d\ude05 But I'm glad that you approve those changes, technically there should be no reason not to merge this (except the conflicts that must be resolved first). \ud83d\ude42 This PR is forked from #431 so perhaps that could be merged first as a separate PR?\r\n\r\n>For grins, I re-ran the benchmarks after removing the Error base class, and saw nearly 3x performance improvements on all invalid results. Which is a pretty compelling reason to remove it...\r\n\r\nYeah, removing the `Error` class can improve the performance for invalid cases quite a lot so if bumping the major version does not scare, then we should definitely go for it!\r\n\r\nAnother, a bit more conservative option could be to keep `Error` sub-classing in `.parse` and `.parseAsync` so that the thrown error has a stacktrace, but return `{success: false, issues: ZodIssue[])` from `safeParse` and `spa`? With this, performance critical applications could use safe version. That said, both approaches are not backward compatible so they'd require a major version bump. \r\n\r\n>I think combining this with some of the changes by @scotttrinh will be the best of all worlds: changing the format of ZodInvalidUnionIssue and eliminating the Error subclass for ZodError (cc @lilred). Scott what do you think?\r\n\r\nI definitely agree with this \ud83d\udc4d Storing error instances inside another error won't give any benefits.\r\n\r\n",
          "> I think combining this with some of the changes by @scotttrinh will be the best of all worlds: changing the format of `ZodInvalidUnionIssue` and eliminating the Error subclass for ZodError (cc @lilred). Scott what do you think?\n\nI don't think we should wait on my opinion here, I was mostly working off existing work! I'll have time in the next few hours to review and it sounds like we will need to rebase or deconflict this on the latest, so I'm happy to help with that, too.",
          "FYI @colinhacks I don't have bandwidth to review this in a timely manner, I don't think you were awaiting my review but just so it's clear feel free to proceed without me.",
          "@scotttrinh thanks for the review comments! I committed the suggested changes. There are still some conflicting files because this branch is built on top of #431 which is a little bit behind the current master. What do you think is the best option? I could either:\r\n\r\n1. Rebase this whole branch with the benchmark commits onto current master\r\n2. Rebase only my commits and leave benchmark branch to be merged separately\r\n\r\nAlso one other thing I noticed when I was running the tests with the new implementation was that [this test](https://github.com/colinhacks/zod/blob/master/src/__tests__/async-parsing.test.ts#L364-L387) seemed to have an expectation that was conflicting with the description. The description says that \"early async failure prevents follow-up refinement checks\". However, the expected `count` value is 2, indicating that both refinements are run, even though the first one returns `false`. I didn't want to break the existing behaviour so I removed the refinement prevention but what is actually the expected behaviour?",
          "Nice work!\r\nStill need some work to reach https://github.com/badrap/valita level, but at least it shouldn't be the bottleneck of the whole application after this :)",
          "Thanks! Valita is indeed a nice piece of software. Of course running these kind of microbenchmarks is a bit dangerous because benchmark setup might favour some libraries. For example valita seems to be built built on top of assumption that validated object does not contain any extra keys and if that happens, it falls back to a slower execution path (its still pretty damn fast though \ud83d\ude05!). In `zod` extra keys do not matter (if running with default .strip mode).\r\n\r\nIf we add some extra keys to the data, we can see that among the \"popular\" libs we're almost in par.\r\n```\r\n> typescript-runtime-type-benchmarks@1.0.0 start\r\n> ts-node index.ts\r\n\r\nRunning \"data-type-sans-outliers\" suite...\r\nProgress: 100%\r\n\r\n  io-ts:\r\n    1 562 873 ops/s, \u00b131.23%   | 11.62% slower\r\n\r\n  runtypes:\r\n    166 728 ops/s, \u00b10.70%     | 90.57% slower\r\n\r\n  valita:\r\n    1 768 350 ops/s, \u00b10.72%   | fastest\r\n\r\n  zod:\r\n    3 458 ops/s, \u00b114.52%       | slowest, 99.8% slower\r\n\r\n  milankinen/zod:\r\n    801 172 ops/s, \u00b11.18%     | 54.69% slower\r\n\r\nFinished 5 cases!\r\n  Fastest: valita\r\n  Slowest: zod\r\n```\r\n\r\nOn the other hand the test setup might be able to put in such way that also the new implementation seem a lot slower than others. \ud83d\ude04 ",
          "@milankinen \r\n\r\n> Also one other thing I noticed when I was running the tests with the new implementation was that this test seemed to have an expectation that was conflicting with the description. The description says that \"early async failure prevents follow-up refinement checks\". However, the expected count value is 2, indicating that both refinements are run, even though the first one returns false. I didn't want to break the existing behaviour so I removed the refinement prevention but what is actually the expected behaviour?\r\n\r\nI'd say even if the original _intent_ was to prevent the refinement, the fact that the current version does not prevent it (given the tests) means that's the behavior to preserve. If we're collecting possible breaking changes around these updates here, maybe it's worth considering that more holistically, but I imagine we want to minimize breakage. Definitely a @colinhacks call.\r\n\r\n> There are still some conflicting files because this branch is built on top of #431 which is a little bit behind the current master. What do you think is the best option?\r\n\r\nI'm curious about this question as well. In my opinion, I'd rather see us concentrate on landing your changes here while incorporating some of the additional changes to `ZodError` that the other PR introduces, but I want to get some marching orders from Colin around this since it seems like we're all in a good position to take on the work.",
          ">I'm curious about this question as well. In my opinion, I'd rather see us concentrate on landing your changes here while incorporating some of the additional changes to ZodError that the other PR introduces, but I want to get some marching orders from Colin around this since it seems like we're all in a good position to take on the work.\r\n\r\nI guess you're talking about #459 which introduces also the `ZodError` changes? I mean, #431 introduces only the benchmarks (no ZodError changes) and is mergeable by its own (and not having any conflicts atm), so I was just wondering that do we want to merge it first as a separate PR? Then I could rebase this branch of mine on top of the master and drop the benchmark commit from this PR.  \r\n\r\nOr we could just merge this entirely which also merges benchmarks to the master, making #431 obsolete. Both options are fine for me.\r\n",
          "Yeah, all of these options are on the table for me, too, but I want to minimize the amount of work (and rework) that we need to do to land _these_ changes, regardless of what we choose to do about `ZodError`.\r\n\r\n@colinhacks I think we're all ready to put some work in here if you have a clear sense of what you want to see happen. Separate PRs for the different elements (benchmarking, ZodError changes, control flow changes)? Combine all of the performance work onto this branch? If we want to combine these branches,  what are your thoughts on the nature of breaking changes around further `ZodError` and `ZodUnion`-specific issues?",
          "I already fixed all the conflicts on this PR locally. My plan is to redo/merge in Scott's ZodError changes where relevant in my local branch, then merge the whole thing as one big PR. \r\n\r\nI don't think eliminating the Error subclass is enough to merit a new major version. ZodError implements the entire Error interface except `.stack` (we could add `stack = \"\"` as a property) so it's unlikely to break much code. Sorry Matti, as a \"code janitor\" (love that \ud83d\ude1b) this probably gives you an aneurysm.\r\n\r\nUnfortunately there's a larger backwards compatibility problem: the new return type of the `_parse` method. Despite the fact that it's prefixed, users may have defined custom subclasses that rely on the old method signature. It's the [recommended way](https://github.com/colinhacks/zod/issues/307) to implement custom ZodType subclasses. Ideally we'd be able to maintain compatibility somehow, I'll look into it. If it's not, we can just break this too, since it's not officially documented. ",
          ">ZodError implements the entire Error interface except .stack (we could add stack = \"\" as a property) so it's unlikely to break much code. Sorry Matti, as a \"code janitor\" (love that \ud83d\ude1b) this probably gives you an aneurysm.\r\n\r\nI'm not worried about the property itself but its contents. \ud83d\ude04 If you decide to remove the `Error` inheritance, then it's fine for me to drop the `stack` property as well.\r\n\r\n> Unfortunately there's a larger backwards compatibility problem: the new return type of the _parse method. ...\r\n\r\nShiii.. I thought it was for internal purposes only! This commit https://github.com/colinhacks/zod/pull/492/commits/c0744c7d6b514808051af30eab1edb6764a813a3 attempts to restore the backwards compatibility. It basically does the following:\r\n\r\n* Restore old `PseudoPromise` implementation and rename new \"PseudoPromise\" construct to `AsyncValue`\r\n* Rename new \"fast\" internal parse to `_parseFast` - all built-in `ZodType` sub-classes implement this\r\n* Add `_parseSlow` to `ZodType` that will make the conversion from new parameter format to old format and calls `_parse` \r\n* Add logic to detect whether we can use \"fast\" parse flow or \"slow\" depending whether the type instance has `_parse` overridden or not\r\n* Restore `_internalParse` that uses the detected execution flow - all internal calls should call this instead of `_parse`, `_parseFast` or `_parseSlow`\r\n* Add default `_parse` implementation to `ZodType` so that inherited custom types can call `super._parse(...)`\r\n\r\nI also added some tests for the backwards compatibility.",
          "Merged in 3.3! \r\n\r\nFor now ZodError still subclasses Error but that still might change that in a future release. I decided to forgo including your compatibility changes from (c0744c7)[https://github.com/colinhacks/zod/commit/c0744c7d6b514808051af30eab1edb6764a813a3]. I don't think it's worth the additional complexity, since I have no evidence that anyone is actually subclassing ZodType in the wild. In any case, since this pattern isn't actually documented, I'm not particularly concerned about publishing this as a minor version. \r\n\r\nAgain, incredible work! \ud83d\ude4c ",
          "Awesome! Thank you for your quick actions to get this merged! \ud83d\udc4c "
        ]
      },
      {
        "pr_number": 492,
        "title": "Performance improvements",
        "body": "Hello and first thanks for this project! I've hoped to find a validation library that focuses on data validation, has simple and intuitive API and can infer TS types correctly from the schemas. When I encountered `zod`, I knew that it was exactly what I had been searching for. So I happily started using the library but soon I unfortunately realized that there were some performance issues that made the validations run very slow and due these issues I had to drop the library from production. I felt very sad about it. \ud83d\ude22 So here is my contribution that'd hopefully help to fix some of these issues in future.\r\n\r\ntl;dr; this PR introduces some changes that bring **100-200x speedup** compared to the current `master` \r\n\r\n### Baseline\r\n\r\nThere is already some prior research done about the performance, such as #292 and #459 which have found that excessive `ZodError` allocation is the main cause for poor performance and one fix would be to remove the `Error` base class (and hence remove the costly stacktrace allocation). And if I've understood correctly, the main concern is that the stacktrace could be relevant for the library uses (and to be honest, I share this concern as well).\r\n\r\nSo I took a look at the codebase and (like @reinismu [said](https://github.com/colinhacks/zod/pull/292#discussion_r567867700)) it heavily overuses `try/catch`. The codebase also implements `PseudoPromise` abstraction that allows to support async refinements. If we (mentally) unroll the structure, the code flow looks like the following:\r\n\r\n```js\r\n// level 1\r\ntry {\r\n  const err1 = new ZodError()\r\n  if (invalid(level1)) throw err1\r\n  // level 2\r\n  try {\r\n    const err2 = new ZodError()\r\n    if (invalid(level2)) throw err2\r\n    // level 3 \r\n    try {\r\n      const err3 = new ZodError()\r\n      if (invalid(level3)) throw err3\r\n      // level ...\r\n      try {\r\n        // ...\r\n      } catch (err) {\r\n        // ...\r\n      }\r\n    } catch (err) {\r\n      err2.addIssues(err.issues)\r\n      throw err2\r\n    }\r\n  } catch (err) {\r\n    err1.addIssues(err.issues)\r\n    throw err1\r\n  }\r\n} catch (err) {\r\n  baseErr.addIssues(err.issues)\r\n  throw baseErr\r\n}\r\n```\r\n\r\nLike you can see, the code allocates quite many errors. It also accumulates issues per level which is a lot of extra work. In addition this flow is orchestrated by `PseudoPromise` abstraction that also adds some extra allocation and calculation to the parsing.\r\n\r\nAt this point, I ran the (excellent!) benchmarks introduced in #431 by @scotttrinh and got the following results on my '20 MBP (Node 16):\r\n<details>\r\n  <summary> ** Baseline (~50k ops/s) ** </summary>\r\n  \r\n```\r\nz.string: empty string x 69,126 ops/sec \u00b11.71% (86 runs sampled)\r\nz.string: short string x 66,917 ops/sec \u00b14.43% (85 runs sampled)\r\nz.string: long string x 69,844 ops/sec \u00b14.63% (87 runs sampled)\r\nz.string: invalid: null x 51,296 ops/sec \u00b14.51% (82 runs sampled)\r\nz.string: manual parser: long x 878,697,948 ops/sec \u00b11.60% (85 runs sampled)\r\nz.object: empty: valid x 31,908 ops/sec \u00b18.31% (81 runs sampled)\r\nz.object: empty: valid: extra keys x 35,451 ops/sec \u00b16.17% (84 runs sampled)\r\nz.object: empty: invalid: null x 56,126 ops/sec \u00b11.50% (89 runs sampled)\r\nz.object: short: valid x 20,422 ops/sec \u00b16.28% (84 runs sampled)\r\nz.object: short: valid: extra keys x 19,344 ops/sec \u00b16.31% (79 runs sampled)\r\nz.object: short: invalid: null x 50,725 ops/sec \u00b11.61% (82 runs sampled)\r\nz.object: long: valid x 10,492 ops/sec \u00b13.93% (80 runs sampled)\r\nz.object: long: valid: extra keys x 9,877 ops/sec \u00b17.00% (80 runs sampled)\r\nz.object: long: invalid: null x 51,332 ops/sec \u00b11.65% (88 runs sampled)\r\n```\r\n\r\n</details>\r\n\r\n\r\n### 1. Optimize flow control\r\n\r\n \r\nSo what I did is that I changed the execution flow into more lightweight variant which allows better composition of parsing functions and minimizes the required allocations, in pseudo:\r\n\r\n```js \r\nconst level1Valid = valid(level1Data)\r\nconst level2Valid = level1Valid && valid(level2Data)\r\nconst level3Valid = level2Valid && valid(level3Data)\r\nconst levelNParsed = level3Valid && valid(levelNData) ? makeResult(levelNData) : INVALID\r\nconst level3Parsed = levelNParsed === INVALID ? INVALID : makeResult(level3Data, levelNParsed)\r\nconst level2Parsed = level3Parsed === INVALID ? INVALID : makeResult(level2Data, level3Parsed)\r\nconst level1Parsed = level2Parsed === INVALID ? INVALID : makeResult(level1Data, level3Parsed)\r\n```\r\nLike in the current implementation, the parsing context is passed as a parameter to `_parse` but the difference is that errors are not indicated by throwing and catching them. Instead, `_parse` returns a result object of `ParseResult = INVALID | OK(parsed)`. If any parsing errors occur, issues are stored directly into the context: we known that if parsing fails, the call stack will eventually be returning to the top level `parse` (or `safeParse`) where we can read all the issues and **then** throw an error with all of those issues. This means that **there are no breaking changes to the public API** but the difference in performance is huge.\r\n\r\nOf course the implementation must also support async refinements so the parse result type is actually `ParseResult = INVALID | OK(parsed) | ASYNC(INVALID | OK(parsed))` and parsers must implement the async case as well. Luckily the number of those cases is relatively low (basically collections like object, array, tuple, record, set, list) so I could add specialized performance-optimized implementations for each case. I ran benchmarks again and the different is significant. And the best part is that there were absolutely **no changes to the public API** - all tests are passing without any modifications on them!\r\n\r\n<details>\r\n  <summary> ** Optimized flow (~5M ops/s) ** </summary>\r\n  \r\n```\r\nz.string: empty string x 13,120,643 ops/sec \u00b11.27% (94 runs sampled)\r\nz.string: short string x 12,989,836 ops/sec \u00b11.45% (92 runs sampled)\r\nz.string: long string x 12,788,053 ops/sec \u00b11.21% (91 runs sampled)\r\nz.string: invalid: null x 118,915 ops/sec \u00b11.32% (81 runs sampled)\r\nz.string: manual parser: long x 876,793,503 ops/sec \u00b11.38% (82 runs sampled)\r\nz.object: empty: valid x 5,437,250 ops/sec \u00b14.61% (88 runs sampled)\r\nz.object: empty: valid: extra keys x 5,086,771 ops/sec \u00b11.36% (88 runs sampled)\r\nz.object: empty: invalid: null x 127,522 ops/sec \u00b13.38% (90 runs sampled)\r\nz.object: short: valid x 3,103,337 ops/sec \u00b11.53% (93 runs sampled)\r\nz.object: short: valid: extra keys x 3,223,728 ops/sec \u00b11.64% (90 runs sampled)\r\nz.object: short: invalid: null x 126,815 ops/sec \u00b14.66% (91 runs sampled)\r\nz.object: long: valid x 1,482,835 ops/sec \u00b11.32% (94 runs sampled)\r\nz.object: long: valid: extra keys x 1,411,238 ops/sec \u00b11.22% (91 runs sampled)\r\nz.object: long: invalid: null x 120,033 ops/sec \u00b13.74% (87 runs sampled)\r\n```\r\n\r\n</details>\r\n\r\n### 2. Add some extra optimizations\r\n\r\nIn addition to the flow, I also did some minor optimizations:\r\n\r\n* https://github.com/milankinen/zod/commit/341e9ddc46dbf12f9860c8aa7c5eb177e9bc27ad - change context path updates to use persistent O(1) list instead of O(n) array copy\r\n* https://github.com/milankinen/zod/commit/423c9a97f14fec5ce0b66d5f74378802161a9c97 - cache object shape information over subsequent parse events\r\n* https://github.com/milankinen/zod/commit/89088c2570230d9dd17e57c5e795b9babba69c57 - switch-case parsed type calculation\r\n\r\nWith these smaller local optimizations, I could squeeze some extra cycles:\r\n\r\n<details>\r\n  <summary> ** Optimized flow + local optimizations (~7,5M ops/s) ** </summary>\r\n  \r\n```\r\nz.string: empty string x 11,050,585 ops/sec \u00b11.34% (89 runs sampled)\r\nz.string: short string x 10,931,303 ops/sec \u00b11.58% (89 runs sampled)\r\nz.string: long string x 11,056,030 ops/sec \u00b11.43% (94 runs sampled)\r\nz.string: invalid: null x 118,733 ops/sec \u00b11.41% (90 runs sampled)\r\nz.string: manual parser: long x 864,371,553 ops/sec \u00b11.41% (82 runs sampled)\r\nz.object: empty: valid x 7,120,299 ops/sec \u00b14.26% (88 runs sampled)\r\nz.object: empty: valid: extra keys x 7,585,016 ops/sec \u00b11.28% (93 runs sampled)\r\nz.object: empty: invalid: null x 129,548 ops/sec \u00b13.68% (89 runs sampled)\r\nz.object: short: valid x 4,777,457 ops/sec \u00b11.35% (94 runs sampled)\r\nz.object: short: valid: extra keys x 5,014,443 ops/sec \u00b14.73% (90 runs sampled)\r\nz.object: short: invalid: null x 127,899 ops/sec \u00b13.33% (89 runs sampled)\r\nz.object: long: valid x 2,173,238 ops/sec \u00b11.34% (94 runs sampled)\r\nz.object: long: valid: extra keys x 2,125,664 ops/sec \u00b11.29% (91 runs sampled)\r\nz.object: long: invalid: null x 117,491 ops/sec \u00b13.75% (81 runs sampled)\r\n```\r\n\r\n</details>\r\n\r\nI also ran the https://github.com/moltar/typescript-runtime-type-benchmarks with current master (`zod` in the graphics) and optimizations (`milankinen/zod` in the graphics) and got the following results:\r\n\r\n![Som graphics](https://raw.githubusercontent.com/milankinen/zod/performance-improvements/data-type-sans-outliers-v16.0.0.png)\r\n\r\n<details>\r\n  <summary> Full onsole output </summary>\r\n  \r\n```\r\nRunning \"data-type-sans-outliers\" suite...\r\n decoders:\r\n    328 543 ops/s, \u00b11.64%     | 92.91% slower\r\n\r\n  io-ts:\r\n    1 924 017 ops/s, \u00b11.39%   | 58.49% slower\r\n\r\n  jointz:\r\n    2 303 597 ops/s, \u00b11.18%   | 50.3% slower\r\n\r\n  json-decoder:\r\n    1 205 792 ops/s, \u00b11.44%   | 73.98% slower\r\n\r\n  @mojotech/json-type-validation:\r\n    1 801 597 ops/s, \u00b11.40%   | 61.13% slower\r\n\r\n  myzod:\r\n    2 115 310 ops/s, \u00b11.29%   | 54.36% slower\r\n\r\n  purify-ts:\r\n    1 023 057 ops/s, \u00b11.73%   | 77.93% slower\r\n\r\n  rulr:\r\n    1 242 731 ops/s, \u00b11.36%   | 73.19% slower\r\n\r\n  runtypes:\r\n    161 748 ops/s, \u00b11.66%     | 96.51% slower\r\n\r\n  simple-runtypes:\r\n    3 077 120 ops/s, \u00b11.23%   | 33.61% slower\r\n\r\n  superstruct:\r\n    152 440 ops/s, \u00b11.81%     | 96.71% slower\r\n\r\n  toi:\r\n    874 245 ops/s, \u00b11.41%     | 81.14% slower\r\n\r\n  ts-utils:\r\n    64 927 ops/s, \u00b160.92%      | 98.6% slower\r\n\r\n  @typeofweb/schema:\r\n    1 320 077 ops/s, \u00b11.54%   | 71.52% slower\r\n\r\n  valita:\r\n    4 634 932 ops/s, \u00b11.12%   | fastest\r\n\r\n  yup:\r\n    42 782 ops/s, \u00b11.14%      | 99.08% slower\r\n\r\n  zod:\r\n    2 981 ops/s, \u00b117.43%       | slowest, 99.94% slower\r\n\r\n  milankinen/zod:\r\n    469 237 ops/s, \u00b141.76%     | 89.88% slower\r\n\r\n  ts-interface-checker:\r\n    3 340 228 ops/s, \u00b11.29%   | 27.93% slower\r\n\r\nFinished 23 cases!\r\n  Fastest: valita\r\n  Slowest: zod\r\n\r\n```\r\n\r\n</details>\r\n\r\n### Conclusions\r\n\r\nI'm very happy that I found a way to significantly improve the performance while maintaining this excellent API. Honestly I don't believe or expect that this PR will be merged to the upstream as it is but I at least hope that it'll give some pointers for the future improvements. I really like `zod` as a library and hope that some day the performance gets fixed so that it won't prevent me from using this in production as well. :slightly_smiling_face:\r\n\r\nCheers!\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/492",
        "comments": [
          "PRs like this remind me why I love open source. Truly glorious stuff Matti!\r\n\r\nI've been looking through the code and I think I understand the new execution system. I like it! Getting rid of all those spaghetti code PseudoPromise methods is so satisfying.\r\n\r\nFor grins, I re-ran the benchmarks after removing the `Error` base class, and saw nearly 3x performance improvements on all invalid results. Which is a pretty compelling reason to remove it...\r\n\r\n```\r\nz.string: empty string x 9,702,190 ops/sec \u00b10.89% (87 runs sampled)\r\nz.string: short string x 9,628,797 ops/sec \u00b10.84% (92 runs sampled)\r\nz.string: long string x 9,472,395 ops/sec \u00b12.01% (88 runs sampled)\r\nz.string: invalid: null x 419,983 ops/sec \u00b11.34% (87 runs sampled)\r\nz.string: manual parser: long x 973,337,378 ops/sec \u00b10.75% (96 runs sampled)\r\nz.object: empty: valid x 7,065,026 ops/sec \u00b11.18% (87 runs sampled)\r\nz.object: empty: valid: extra keys x 8,204,405 ops/sec \u00b10.94% (92 runs sampled)\r\nz.object: empty: invalid: null x 537,947 ops/sec \u00b11.76% (86 runs sampled)\r\nz.object: short: valid x 4,047,468 ops/sec \u00b10.96% (89 runs sampled)\r\nz.object: short: valid: extra keys x 4,494,936 ops/sec \u00b11.06% (86 runs sampled)\r\nz.object: short: invalid: null x 554,633 ops/sec \u00b11.06% (92 runs sampled)\r\nz.object: long: valid x 2,041,231 ops/sec \u00b11.07% (86 runs sampled)\r\nz.object: long: valid: extra keys x 2,031,685 ops/sec \u00b11.13% (88 runs sampled)\r\nz.object: long: invalid: null x 535,857 ops/sec \u00b12.65% (82 runs sampled)\r\n```\r\n\r\nYou say you don't expect that this PR will be merged...but I can't see any reason why not. Seems like a definitive improvement in terms of code understandability, perf, and elegance. Am I missing anything?\r\n\r\nI think combining this with some of the changes by @scotttrinh will be the best of all worlds: changing the format of `ZodInvalidUnionIssue` and eliminating the Error subclass for ZodError (cc @lilred). Scott what do you think?",
          ">You say you don't expect that this PR will be merged...but I can't see any reason why not. Seems like a definitive improvement in terms of code understandability, perf, and elegance. Am I missing anything?\r\n\r\nWell, this PR introduces quite big changes to the internals which can be an issue sometimes. \ud83d\ude05 But I'm glad that you approve those changes, technically there should be no reason not to merge this (except the conflicts that must be resolved first). \ud83d\ude42 This PR is forked from #431 so perhaps that could be merged first as a separate PR?\r\n\r\n>For grins, I re-ran the benchmarks after removing the Error base class, and saw nearly 3x performance improvements on all invalid results. Which is a pretty compelling reason to remove it...\r\n\r\nYeah, removing the `Error` class can improve the performance for invalid cases quite a lot so if bumping the major version does not scare, then we should definitely go for it!\r\n\r\nAnother, a bit more conservative option could be to keep `Error` sub-classing in `.parse` and `.parseAsync` so that the thrown error has a stacktrace, but return `{success: false, issues: ZodIssue[])` from `safeParse` and `spa`? With this, performance critical applications could use safe version. That said, both approaches are not backward compatible so they'd require a major version bump. \r\n\r\n>I think combining this with some of the changes by @scotttrinh will be the best of all worlds: changing the format of ZodInvalidUnionIssue and eliminating the Error subclass for ZodError (cc @lilred). Scott what do you think?\r\n\r\nI definitely agree with this \ud83d\udc4d Storing error instances inside another error won't give any benefits.\r\n\r\n",
          "> I think combining this with some of the changes by @scotttrinh will be the best of all worlds: changing the format of `ZodInvalidUnionIssue` and eliminating the Error subclass for ZodError (cc @lilred). Scott what do you think?\n\nI don't think we should wait on my opinion here, I was mostly working off existing work! I'll have time in the next few hours to review and it sounds like we will need to rebase or deconflict this on the latest, so I'm happy to help with that, too.",
          "FYI @colinhacks I don't have bandwidth to review this in a timely manner, I don't think you were awaiting my review but just so it's clear feel free to proceed without me.",
          "@scotttrinh thanks for the review comments! I committed the suggested changes. There are still some conflicting files because this branch is built on top of #431 which is a little bit behind the current master. What do you think is the best option? I could either:\r\n\r\n1. Rebase this whole branch with the benchmark commits onto current master\r\n2. Rebase only my commits and leave benchmark branch to be merged separately\r\n\r\nAlso one other thing I noticed when I was running the tests with the new implementation was that [this test](https://github.com/colinhacks/zod/blob/master/src/__tests__/async-parsing.test.ts#L364-L387) seemed to have an expectation that was conflicting with the description. The description says that \"early async failure prevents follow-up refinement checks\". However, the expected `count` value is 2, indicating that both refinements are run, even though the first one returns `false`. I didn't want to break the existing behaviour so I removed the refinement prevention but what is actually the expected behaviour?",
          "Nice work!\r\nStill need some work to reach https://github.com/badrap/valita level, but at least it shouldn't be the bottleneck of the whole application after this :)",
          "Thanks! Valita is indeed a nice piece of software. Of course running these kind of microbenchmarks is a bit dangerous because benchmark setup might favour some libraries. For example valita seems to be built built on top of assumption that validated object does not contain any extra keys and if that happens, it falls back to a slower execution path (its still pretty damn fast though \ud83d\ude05!). In `zod` extra keys do not matter (if running with default .strip mode).\r\n\r\nIf we add some extra keys to the data, we can see that among the \"popular\" libs we're almost in par.\r\n```\r\n> typescript-runtime-type-benchmarks@1.0.0 start\r\n> ts-node index.ts\r\n\r\nRunning \"data-type-sans-outliers\" suite...\r\nProgress: 100%\r\n\r\n  io-ts:\r\n    1 562 873 ops/s, \u00b131.23%   | 11.62% slower\r\n\r\n  runtypes:\r\n    166 728 ops/s, \u00b10.70%     | 90.57% slower\r\n\r\n  valita:\r\n    1 768 350 ops/s, \u00b10.72%   | fastest\r\n\r\n  zod:\r\n    3 458 ops/s, \u00b114.52%       | slowest, 99.8% slower\r\n\r\n  milankinen/zod:\r\n    801 172 ops/s, \u00b11.18%     | 54.69% slower\r\n\r\nFinished 5 cases!\r\n  Fastest: valita\r\n  Slowest: zod\r\n```\r\n\r\nOn the other hand the test setup might be able to put in such way that also the new implementation seem a lot slower than others. \ud83d\ude04 ",
          "@milankinen \r\n\r\n> Also one other thing I noticed when I was running the tests with the new implementation was that this test seemed to have an expectation that was conflicting with the description. The description says that \"early async failure prevents follow-up refinement checks\". However, the expected count value is 2, indicating that both refinements are run, even though the first one returns false. I didn't want to break the existing behaviour so I removed the refinement prevention but what is actually the expected behaviour?\r\n\r\nI'd say even if the original _intent_ was to prevent the refinement, the fact that the current version does not prevent it (given the tests) means that's the behavior to preserve. If we're collecting possible breaking changes around these updates here, maybe it's worth considering that more holistically, but I imagine we want to minimize breakage. Definitely a @colinhacks call.\r\n\r\n> There are still some conflicting files because this branch is built on top of #431 which is a little bit behind the current master. What do you think is the best option?\r\n\r\nI'm curious about this question as well. In my opinion, I'd rather see us concentrate on landing your changes here while incorporating some of the additional changes to `ZodError` that the other PR introduces, but I want to get some marching orders from Colin around this since it seems like we're all in a good position to take on the work.",
          ">I'm curious about this question as well. In my opinion, I'd rather see us concentrate on landing your changes here while incorporating some of the additional changes to ZodError that the other PR introduces, but I want to get some marching orders from Colin around this since it seems like we're all in a good position to take on the work.\r\n\r\nI guess you're talking about #459 which introduces also the `ZodError` changes? I mean, #431 introduces only the benchmarks (no ZodError changes) and is mergeable by its own (and not having any conflicts atm), so I was just wondering that do we want to merge it first as a separate PR? Then I could rebase this branch of mine on top of the master and drop the benchmark commit from this PR.  \r\n\r\nOr we could just merge this entirely which also merges benchmarks to the master, making #431 obsolete. Both options are fine for me.\r\n",
          "Yeah, all of these options are on the table for me, too, but I want to minimize the amount of work (and rework) that we need to do to land _these_ changes, regardless of what we choose to do about `ZodError`.\r\n\r\n@colinhacks I think we're all ready to put some work in here if you have a clear sense of what you want to see happen. Separate PRs for the different elements (benchmarking, ZodError changes, control flow changes)? Combine all of the performance work onto this branch? If we want to combine these branches,  what are your thoughts on the nature of breaking changes around further `ZodError` and `ZodUnion`-specific issues?",
          "I already fixed all the conflicts on this PR locally. My plan is to redo/merge in Scott's ZodError changes where relevant in my local branch, then merge the whole thing as one big PR. \r\n\r\nI don't think eliminating the Error subclass is enough to merit a new major version. ZodError implements the entire Error interface except `.stack` (we could add `stack = \"\"` as a property) so it's unlikely to break much code. Sorry Matti, as a \"code janitor\" (love that \ud83d\ude1b) this probably gives you an aneurysm.\r\n\r\nUnfortunately there's a larger backwards compatibility problem: the new return type of the `_parse` method. Despite the fact that it's prefixed, users may have defined custom subclasses that rely on the old method signature. It's the [recommended way](https://github.com/colinhacks/zod/issues/307) to implement custom ZodType subclasses. Ideally we'd be able to maintain compatibility somehow, I'll look into it. If it's not, we can just break this too, since it's not officially documented. ",
          ">ZodError implements the entire Error interface except .stack (we could add stack = \"\" as a property) so it's unlikely to break much code. Sorry Matti, as a \"code janitor\" (love that \ud83d\ude1b) this probably gives you an aneurysm.\r\n\r\nI'm not worried about the property itself but its contents. \ud83d\ude04 If you decide to remove the `Error` inheritance, then it's fine for me to drop the `stack` property as well.\r\n\r\n> Unfortunately there's a larger backwards compatibility problem: the new return type of the _parse method. ...\r\n\r\nShiii.. I thought it was for internal purposes only! This commit https://github.com/colinhacks/zod/pull/492/commits/c0744c7d6b514808051af30eab1edb6764a813a3 attempts to restore the backwards compatibility. It basically does the following:\r\n\r\n* Restore old `PseudoPromise` implementation and rename new \"PseudoPromise\" construct to `AsyncValue`\r\n* Rename new \"fast\" internal parse to `_parseFast` - all built-in `ZodType` sub-classes implement this\r\n* Add `_parseSlow` to `ZodType` that will make the conversion from new parameter format to old format and calls `_parse` \r\n* Add logic to detect whether we can use \"fast\" parse flow or \"slow\" depending whether the type instance has `_parse` overridden or not\r\n* Restore `_internalParse` that uses the detected execution flow - all internal calls should call this instead of `_parse`, `_parseFast` or `_parseSlow`\r\n* Add default `_parse` implementation to `ZodType` so that inherited custom types can call `super._parse(...)`\r\n\r\nI also added some tests for the backwards compatibility.",
          "Merged in 3.3! \r\n\r\nFor now ZodError still subclasses Error but that still might change that in a future release. I decided to forgo including your compatibility changes from (c0744c7)[https://github.com/colinhacks/zod/commit/c0744c7d6b514808051af30eab1edb6764a813a3]. I don't think it's worth the additional complexity, since I have no evidence that anyone is actually subclassing ZodType in the wild. In any case, since this pattern isn't actually documented, I'm not particularly concerned about publishing this as a minor version. \r\n\r\nAgain, incredible work! \ud83d\ude4c ",
          "Awesome! Thank you for your quick actions to get this merged! \ud83d\udc4c "
        ]
      },
      {
        "pr_number": 497,
        "title": "Fix README.md recommending deprecated method",
        "body": "Updated to be consistent with the comment above, which says that  `.nonempty` is deprecated .\r\n\r\nRelated issue: https://github.com/colinhacks/zod/issues/439",
        "html_url": "https://github.com/colinhacks/zod/pull/497",
        "comments": []
      },
      {
        "pr_number": 499,
        "title": "Deprecate `.nonstrict()`",
        "body": "In my team's codebase, we have used `.nonstrict()` in many, many places because it was necessary with zod 1. Easy example: validating `process.env`, which always has extra properties that we don't care about.  Now that we've updated to zod 3, our code is still working, but it's unnecessary and slightly less safe than the default behaviour of `.strip()`. It'd be good if our IDE/linter could help us find these cases _and_ make sure that people who haven't carefully read zod changelogs don't add any new usages of `.nonstrict()`.",
        "html_url": "https://github.com/colinhacks/zod/pull/499",
        "comments": ["Good call!"]
      },
      {
        "pr_number": 499,
        "title": "Deprecate `.nonstrict()`",
        "body": "In my team's codebase, we have used `.nonstrict()` in many, many places because it was necessary with zod 1. Easy example: validating `process.env`, which always has extra properties that we don't care about.  Now that we've updated to zod 3, our code is still working, but it's unnecessary and slightly less safe than the default behaviour of `.strip()`. It'd be good if our IDE/linter could help us find these cases _and_ make sure that people who haven't carefully read zod changelogs don't add any new usages of `.nonstrict()`.",
        "html_url": "https://github.com/colinhacks/zod/pull/499",
        "comments": ["Good call!"]
      },
      {
        "pr_number": 497,
        "title": "Fix README.md recommending deprecated method",
        "body": "Updated to be consistent with the comment above, which says that  `.nonempty` is deprecated .\r\n\r\nRelated issue: https://github.com/colinhacks/zod/issues/439",
        "html_url": "https://github.com/colinhacks/zod/pull/497",
        "comments": []
      },
      {
        "pr_number": 497,
        "title": "Fix README.md recommending deprecated method",
        "body": "Updated to be consistent with the comment above, which says that  `.nonempty` is deprecated .\r\n\r\nRelated issue: https://github.com/colinhacks/zod/issues/439",
        "html_url": "https://github.com/colinhacks/zod/pull/497",
        "comments": []
      },
      {
        "pr_number": 494,
        "title": "Stop inferring `unknown` fields as optional",
        "body": "Addresses https://github.com/colinhacks/zod/issues/493\r\n\r\nThis is a breaking change so let's wait until @colinhacks checks in",
        "html_url": "https://github.com/colinhacks/zod/pull/494",
        "comments": [
          "Merged in 3.3!",
          "@colinhacks This improvement definitively breaks compatibility with `strictNullChecks=false`. It is not big deal, but just for you to know...\r\n\r\n![image](https://user-images.githubusercontent.com/383294/124392705-7ef5c180-dcf7-11eb-9149-429e86403020.png)\r\n",
          "Ah good catch. That's a bug that was introduced due to an unrelated fix: https://github.com/colinhacks/zod/issues/452\r\n\r\nFixed in 3.3.3.",
          "@colinhacks Tried with 3.3.4 and still, the same bug occurred when TS `strictNullChecks=false` is set. But as I said, no big deal"
        ]
      },
      {
        "pr_number": 499,
        "title": "Deprecate `.nonstrict()`",
        "body": "In my team's codebase, we have used `.nonstrict()` in many, many places because it was necessary with zod 1. Easy example: validating `process.env`, which always has extra properties that we don't care about.  Now that we've updated to zod 3, our code is still working, but it's unnecessary and slightly less safe than the default behaviour of `.strip()`. It'd be good if our IDE/linter could help us find these cases _and_ make sure that people who haven't carefully read zod changelogs don't add any new usages of `.nonstrict()`.",
        "html_url": "https://github.com/colinhacks/zod/pull/499",
        "comments": ["Good call!"]
      },
      {
        "pr_number": 492,
        "title": "Performance improvements",
        "body": "Hello and first thanks for this project! I've hoped to find a validation library that focuses on data validation, has simple and intuitive API and can infer TS types correctly from the schemas. When I encountered `zod`, I knew that it was exactly what I had been searching for. So I happily started using the library but soon I unfortunately realized that there were some performance issues that made the validations run very slow and due these issues I had to drop the library from production. I felt very sad about it. \ud83d\ude22 So here is my contribution that'd hopefully help to fix some of these issues in future.\r\n\r\ntl;dr; this PR introduces some changes that bring **100-200x speedup** compared to the current `master` \r\n\r\n### Baseline\r\n\r\nThere is already some prior research done about the performance, such as #292 and #459 which have found that excessive `ZodError` allocation is the main cause for poor performance and one fix would be to remove the `Error` base class (and hence remove the costly stacktrace allocation). And if I've understood correctly, the main concern is that the stacktrace could be relevant for the library uses (and to be honest, I share this concern as well).\r\n\r\nSo I took a look at the codebase and (like @reinismu [said](https://github.com/colinhacks/zod/pull/292#discussion_r567867700)) it heavily overuses `try/catch`. The codebase also implements `PseudoPromise` abstraction that allows to support async refinements. If we (mentally) unroll the structure, the code flow looks like the following:\r\n\r\n```js\r\n// level 1\r\ntry {\r\n  const err1 = new ZodError()\r\n  if (invalid(level1)) throw err1\r\n  // level 2\r\n  try {\r\n    const err2 = new ZodError()\r\n    if (invalid(level2)) throw err2\r\n    // level 3 \r\n    try {\r\n      const err3 = new ZodError()\r\n      if (invalid(level3)) throw err3\r\n      // level ...\r\n      try {\r\n        // ...\r\n      } catch (err) {\r\n        // ...\r\n      }\r\n    } catch (err) {\r\n      err2.addIssues(err.issues)\r\n      throw err2\r\n    }\r\n  } catch (err) {\r\n    err1.addIssues(err.issues)\r\n    throw err1\r\n  }\r\n} catch (err) {\r\n  baseErr.addIssues(err.issues)\r\n  throw baseErr\r\n}\r\n```\r\n\r\nLike you can see, the code allocates quite many errors. It also accumulates issues per level which is a lot of extra work. In addition this flow is orchestrated by `PseudoPromise` abstraction that also adds some extra allocation and calculation to the parsing.\r\n\r\nAt this point, I ran the (excellent!) benchmarks introduced in #431 by @scotttrinh and got the following results on my '20 MBP (Node 16):\r\n<details>\r\n  <summary> ** Baseline (~50k ops/s) ** </summary>\r\n  \r\n```\r\nz.string: empty string x 69,126 ops/sec \u00b11.71% (86 runs sampled)\r\nz.string: short string x 66,917 ops/sec \u00b14.43% (85 runs sampled)\r\nz.string: long string x 69,844 ops/sec \u00b14.63% (87 runs sampled)\r\nz.string: invalid: null x 51,296 ops/sec \u00b14.51% (82 runs sampled)\r\nz.string: manual parser: long x 878,697,948 ops/sec \u00b11.60% (85 runs sampled)\r\nz.object: empty: valid x 31,908 ops/sec \u00b18.31% (81 runs sampled)\r\nz.object: empty: valid: extra keys x 35,451 ops/sec \u00b16.17% (84 runs sampled)\r\nz.object: empty: invalid: null x 56,126 ops/sec \u00b11.50% (89 runs sampled)\r\nz.object: short: valid x 20,422 ops/sec \u00b16.28% (84 runs sampled)\r\nz.object: short: valid: extra keys x 19,344 ops/sec \u00b16.31% (79 runs sampled)\r\nz.object: short: invalid: null x 50,725 ops/sec \u00b11.61% (82 runs sampled)\r\nz.object: long: valid x 10,492 ops/sec \u00b13.93% (80 runs sampled)\r\nz.object: long: valid: extra keys x 9,877 ops/sec \u00b17.00% (80 runs sampled)\r\nz.object: long: invalid: null x 51,332 ops/sec \u00b11.65% (88 runs sampled)\r\n```\r\n\r\n</details>\r\n\r\n\r\n### 1. Optimize flow control\r\n\r\n \r\nSo what I did is that I changed the execution flow into more lightweight variant which allows better composition of parsing functions and minimizes the required allocations, in pseudo:\r\n\r\n```js \r\nconst level1Valid = valid(level1Data)\r\nconst level2Valid = level1Valid && valid(level2Data)\r\nconst level3Valid = level2Valid && valid(level3Data)\r\nconst levelNParsed = level3Valid && valid(levelNData) ? makeResult(levelNData) : INVALID\r\nconst level3Parsed = levelNParsed === INVALID ? INVALID : makeResult(level3Data, levelNParsed)\r\nconst level2Parsed = level3Parsed === INVALID ? INVALID : makeResult(level2Data, level3Parsed)\r\nconst level1Parsed = level2Parsed === INVALID ? INVALID : makeResult(level1Data, level3Parsed)\r\n```\r\nLike in the current implementation, the parsing context is passed as a parameter to `_parse` but the difference is that errors are not indicated by throwing and catching them. Instead, `_parse` returns a result object of `ParseResult = INVALID | OK(parsed)`. If any parsing errors occur, issues are stored directly into the context: we known that if parsing fails, the call stack will eventually be returning to the top level `parse` (or `safeParse`) where we can read all the issues and **then** throw an error with all of those issues. This means that **there are no breaking changes to the public API** but the difference in performance is huge.\r\n\r\nOf course the implementation must also support async refinements so the parse result type is actually `ParseResult = INVALID | OK(parsed) | ASYNC(INVALID | OK(parsed))` and parsers must implement the async case as well. Luckily the number of those cases is relatively low (basically collections like object, array, tuple, record, set, list) so I could add specialized performance-optimized implementations for each case. I ran benchmarks again and the different is significant. And the best part is that there were absolutely **no changes to the public API** - all tests are passing without any modifications on them!\r\n\r\n<details>\r\n  <summary> ** Optimized flow (~5M ops/s) ** </summary>\r\n  \r\n```\r\nz.string: empty string x 13,120,643 ops/sec \u00b11.27% (94 runs sampled)\r\nz.string: short string x 12,989,836 ops/sec \u00b11.45% (92 runs sampled)\r\nz.string: long string x 12,788,053 ops/sec \u00b11.21% (91 runs sampled)\r\nz.string: invalid: null x 118,915 ops/sec \u00b11.32% (81 runs sampled)\r\nz.string: manual parser: long x 876,793,503 ops/sec \u00b11.38% (82 runs sampled)\r\nz.object: empty: valid x 5,437,250 ops/sec \u00b14.61% (88 runs sampled)\r\nz.object: empty: valid: extra keys x 5,086,771 ops/sec \u00b11.36% (88 runs sampled)\r\nz.object: empty: invalid: null x 127,522 ops/sec \u00b13.38% (90 runs sampled)\r\nz.object: short: valid x 3,103,337 ops/sec \u00b11.53% (93 runs sampled)\r\nz.object: short: valid: extra keys x 3,223,728 ops/sec \u00b11.64% (90 runs sampled)\r\nz.object: short: invalid: null x 126,815 ops/sec \u00b14.66% (91 runs sampled)\r\nz.object: long: valid x 1,482,835 ops/sec \u00b11.32% (94 runs sampled)\r\nz.object: long: valid: extra keys x 1,411,238 ops/sec \u00b11.22% (91 runs sampled)\r\nz.object: long: invalid: null x 120,033 ops/sec \u00b13.74% (87 runs sampled)\r\n```\r\n\r\n</details>\r\n\r\n### 2. Add some extra optimizations\r\n\r\nIn addition to the flow, I also did some minor optimizations:\r\n\r\n* https://github.com/milankinen/zod/commit/341e9ddc46dbf12f9860c8aa7c5eb177e9bc27ad - change context path updates to use persistent O(1) list instead of O(n) array copy\r\n* https://github.com/milankinen/zod/commit/423c9a97f14fec5ce0b66d5f74378802161a9c97 - cache object shape information over subsequent parse events\r\n* https://github.com/milankinen/zod/commit/89088c2570230d9dd17e57c5e795b9babba69c57 - switch-case parsed type calculation\r\n\r\nWith these smaller local optimizations, I could squeeze some extra cycles:\r\n\r\n<details>\r\n  <summary> ** Optimized flow + local optimizations (~7,5M ops/s) ** </summary>\r\n  \r\n```\r\nz.string: empty string x 11,050,585 ops/sec \u00b11.34% (89 runs sampled)\r\nz.string: short string x 10,931,303 ops/sec \u00b11.58% (89 runs sampled)\r\nz.string: long string x 11,056,030 ops/sec \u00b11.43% (94 runs sampled)\r\nz.string: invalid: null x 118,733 ops/sec \u00b11.41% (90 runs sampled)\r\nz.string: manual parser: long x 864,371,553 ops/sec \u00b11.41% (82 runs sampled)\r\nz.object: empty: valid x 7,120,299 ops/sec \u00b14.26% (88 runs sampled)\r\nz.object: empty: valid: extra keys x 7,585,016 ops/sec \u00b11.28% (93 runs sampled)\r\nz.object: empty: invalid: null x 129,548 ops/sec \u00b13.68% (89 runs sampled)\r\nz.object: short: valid x 4,777,457 ops/sec \u00b11.35% (94 runs sampled)\r\nz.object: short: valid: extra keys x 5,014,443 ops/sec \u00b14.73% (90 runs sampled)\r\nz.object: short: invalid: null x 127,899 ops/sec \u00b13.33% (89 runs sampled)\r\nz.object: long: valid x 2,173,238 ops/sec \u00b11.34% (94 runs sampled)\r\nz.object: long: valid: extra keys x 2,125,664 ops/sec \u00b11.29% (91 runs sampled)\r\nz.object: long: invalid: null x 117,491 ops/sec \u00b13.75% (81 runs sampled)\r\n```\r\n\r\n</details>\r\n\r\nI also ran the https://github.com/moltar/typescript-runtime-type-benchmarks with current master (`zod` in the graphics) and optimizations (`milankinen/zod` in the graphics) and got the following results:\r\n\r\n![Som graphics](https://raw.githubusercontent.com/milankinen/zod/performance-improvements/data-type-sans-outliers-v16.0.0.png)\r\n\r\n<details>\r\n  <summary> Full onsole output </summary>\r\n  \r\n```\r\nRunning \"data-type-sans-outliers\" suite...\r\n decoders:\r\n    328 543 ops/s, \u00b11.64%     | 92.91% slower\r\n\r\n  io-ts:\r\n    1 924 017 ops/s, \u00b11.39%   | 58.49% slower\r\n\r\n  jointz:\r\n    2 303 597 ops/s, \u00b11.18%   | 50.3% slower\r\n\r\n  json-decoder:\r\n    1 205 792 ops/s, \u00b11.44%   | 73.98% slower\r\n\r\n  @mojotech/json-type-validation:\r\n    1 801 597 ops/s, \u00b11.40%   | 61.13% slower\r\n\r\n  myzod:\r\n    2 115 310 ops/s, \u00b11.29%   | 54.36% slower\r\n\r\n  purify-ts:\r\n    1 023 057 ops/s, \u00b11.73%   | 77.93% slower\r\n\r\n  rulr:\r\n    1 242 731 ops/s, \u00b11.36%   | 73.19% slower\r\n\r\n  runtypes:\r\n    161 748 ops/s, \u00b11.66%     | 96.51% slower\r\n\r\n  simple-runtypes:\r\n    3 077 120 ops/s, \u00b11.23%   | 33.61% slower\r\n\r\n  superstruct:\r\n    152 440 ops/s, \u00b11.81%     | 96.71% slower\r\n\r\n  toi:\r\n    874 245 ops/s, \u00b11.41%     | 81.14% slower\r\n\r\n  ts-utils:\r\n    64 927 ops/s, \u00b160.92%      | 98.6% slower\r\n\r\n  @typeofweb/schema:\r\n    1 320 077 ops/s, \u00b11.54%   | 71.52% slower\r\n\r\n  valita:\r\n    4 634 932 ops/s, \u00b11.12%   | fastest\r\n\r\n  yup:\r\n    42 782 ops/s, \u00b11.14%      | 99.08% slower\r\n\r\n  zod:\r\n    2 981 ops/s, \u00b117.43%       | slowest, 99.94% slower\r\n\r\n  milankinen/zod:\r\n    469 237 ops/s, \u00b141.76%     | 89.88% slower\r\n\r\n  ts-interface-checker:\r\n    3 340 228 ops/s, \u00b11.29%   | 27.93% slower\r\n\r\nFinished 23 cases!\r\n  Fastest: valita\r\n  Slowest: zod\r\n\r\n```\r\n\r\n</details>\r\n\r\n### Conclusions\r\n\r\nI'm very happy that I found a way to significantly improve the performance while maintaining this excellent API. Honestly I don't believe or expect that this PR will be merged to the upstream as it is but I at least hope that it'll give some pointers for the future improvements. I really like `zod` as a library and hope that some day the performance gets fixed so that it won't prevent me from using this in production as well. :slightly_smiling_face:\r\n\r\nCheers!\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/492",
        "comments": [
          "PRs like this remind me why I love open source. Truly glorious stuff Matti!\r\n\r\nI've been looking through the code and I think I understand the new execution system. I like it! Getting rid of all those spaghetti code PseudoPromise methods is so satisfying.\r\n\r\nFor grins, I re-ran the benchmarks after removing the `Error` base class, and saw nearly 3x performance improvements on all invalid results. Which is a pretty compelling reason to remove it...\r\n\r\n```\r\nz.string: empty string x 9,702,190 ops/sec \u00b10.89% (87 runs sampled)\r\nz.string: short string x 9,628,797 ops/sec \u00b10.84% (92 runs sampled)\r\nz.string: long string x 9,472,395 ops/sec \u00b12.01% (88 runs sampled)\r\nz.string: invalid: null x 419,983 ops/sec \u00b11.34% (87 runs sampled)\r\nz.string: manual parser: long x 973,337,378 ops/sec \u00b10.75% (96 runs sampled)\r\nz.object: empty: valid x 7,065,026 ops/sec \u00b11.18% (87 runs sampled)\r\nz.object: empty: valid: extra keys x 8,204,405 ops/sec \u00b10.94% (92 runs sampled)\r\nz.object: empty: invalid: null x 537,947 ops/sec \u00b11.76% (86 runs sampled)\r\nz.object: short: valid x 4,047,468 ops/sec \u00b10.96% (89 runs sampled)\r\nz.object: short: valid: extra keys x 4,494,936 ops/sec \u00b11.06% (86 runs sampled)\r\nz.object: short: invalid: null x 554,633 ops/sec \u00b11.06% (92 runs sampled)\r\nz.object: long: valid x 2,041,231 ops/sec \u00b11.07% (86 runs sampled)\r\nz.object: long: valid: extra keys x 2,031,685 ops/sec \u00b11.13% (88 runs sampled)\r\nz.object: long: invalid: null x 535,857 ops/sec \u00b12.65% (82 runs sampled)\r\n```\r\n\r\nYou say you don't expect that this PR will be merged...but I can't see any reason why not. Seems like a definitive improvement in terms of code understandability, perf, and elegance. Am I missing anything?\r\n\r\nI think combining this with some of the changes by @scotttrinh will be the best of all worlds: changing the format of `ZodInvalidUnionIssue` and eliminating the Error subclass for ZodError (cc @lilred). Scott what do you think?",
          ">You say you don't expect that this PR will be merged...but I can't see any reason why not. Seems like a definitive improvement in terms of code understandability, perf, and elegance. Am I missing anything?\r\n\r\nWell, this PR introduces quite big changes to the internals which can be an issue sometimes. \ud83d\ude05 But I'm glad that you approve those changes, technically there should be no reason not to merge this (except the conflicts that must be resolved first). \ud83d\ude42 This PR is forked from #431 so perhaps that could be merged first as a separate PR?\r\n\r\n>For grins, I re-ran the benchmarks after removing the Error base class, and saw nearly 3x performance improvements on all invalid results. Which is a pretty compelling reason to remove it...\r\n\r\nYeah, removing the `Error` class can improve the performance for invalid cases quite a lot so if bumping the major version does not scare, then we should definitely go for it!\r\n\r\nAnother, a bit more conservative option could be to keep `Error` sub-classing in `.parse` and `.parseAsync` so that the thrown error has a stacktrace, but return `{success: false, issues: ZodIssue[])` from `safeParse` and `spa`? With this, performance critical applications could use safe version. That said, both approaches are not backward compatible so they'd require a major version bump. \r\n\r\n>I think combining this with some of the changes by @scotttrinh will be the best of all worlds: changing the format of ZodInvalidUnionIssue and eliminating the Error subclass for ZodError (cc @lilred). Scott what do you think?\r\n\r\nI definitely agree with this \ud83d\udc4d Storing error instances inside another error won't give any benefits.\r\n\r\n",
          "> I think combining this with some of the changes by @scotttrinh will be the best of all worlds: changing the format of `ZodInvalidUnionIssue` and eliminating the Error subclass for ZodError (cc @lilred). Scott what do you think?\n\nI don't think we should wait on my opinion here, I was mostly working off existing work! I'll have time in the next few hours to review and it sounds like we will need to rebase or deconflict this on the latest, so I'm happy to help with that, too.",
          "FYI @colinhacks I don't have bandwidth to review this in a timely manner, I don't think you were awaiting my review but just so it's clear feel free to proceed without me.",
          "@scotttrinh thanks for the review comments! I committed the suggested changes. There are still some conflicting files because this branch is built on top of #431 which is a little bit behind the current master. What do you think is the best option? I could either:\r\n\r\n1. Rebase this whole branch with the benchmark commits onto current master\r\n2. Rebase only my commits and leave benchmark branch to be merged separately\r\n\r\nAlso one other thing I noticed when I was running the tests with the new implementation was that [this test](https://github.com/colinhacks/zod/blob/master/src/__tests__/async-parsing.test.ts#L364-L387) seemed to have an expectation that was conflicting with the description. The description says that \"early async failure prevents follow-up refinement checks\". However, the expected `count` value is 2, indicating that both refinements are run, even though the first one returns `false`. I didn't want to break the existing behaviour so I removed the refinement prevention but what is actually the expected behaviour?",
          "Nice work!\r\nStill need some work to reach https://github.com/badrap/valita level, but at least it shouldn't be the bottleneck of the whole application after this :)",
          "Thanks! Valita is indeed a nice piece of software. Of course running these kind of microbenchmarks is a bit dangerous because benchmark setup might favour some libraries. For example valita seems to be built built on top of assumption that validated object does not contain any extra keys and if that happens, it falls back to a slower execution path (its still pretty damn fast though \ud83d\ude05!). In `zod` extra keys do not matter (if running with default .strip mode).\r\n\r\nIf we add some extra keys to the data, we can see that among the \"popular\" libs we're almost in par.\r\n```\r\n> typescript-runtime-type-benchmarks@1.0.0 start\r\n> ts-node index.ts\r\n\r\nRunning \"data-type-sans-outliers\" suite...\r\nProgress: 100%\r\n\r\n  io-ts:\r\n    1 562 873 ops/s, \u00b131.23%   | 11.62% slower\r\n\r\n  runtypes:\r\n    166 728 ops/s, \u00b10.70%     | 90.57% slower\r\n\r\n  valita:\r\n    1 768 350 ops/s, \u00b10.72%   | fastest\r\n\r\n  zod:\r\n    3 458 ops/s, \u00b114.52%       | slowest, 99.8% slower\r\n\r\n  milankinen/zod:\r\n    801 172 ops/s, \u00b11.18%     | 54.69% slower\r\n\r\nFinished 5 cases!\r\n  Fastest: valita\r\n  Slowest: zod\r\n```\r\n\r\nOn the other hand the test setup might be able to put in such way that also the new implementation seem a lot slower than others. \ud83d\ude04 ",
          "@milankinen \r\n\r\n> Also one other thing I noticed when I was running the tests with the new implementation was that this test seemed to have an expectation that was conflicting with the description. The description says that \"early async failure prevents follow-up refinement checks\". However, the expected count value is 2, indicating that both refinements are run, even though the first one returns false. I didn't want to break the existing behaviour so I removed the refinement prevention but what is actually the expected behaviour?\r\n\r\nI'd say even if the original _intent_ was to prevent the refinement, the fact that the current version does not prevent it (given the tests) means that's the behavior to preserve. If we're collecting possible breaking changes around these updates here, maybe it's worth considering that more holistically, but I imagine we want to minimize breakage. Definitely a @colinhacks call.\r\n\r\n> There are still some conflicting files because this branch is built on top of #431 which is a little bit behind the current master. What do you think is the best option?\r\n\r\nI'm curious about this question as well. In my opinion, I'd rather see us concentrate on landing your changes here while incorporating some of the additional changes to `ZodError` that the other PR introduces, but I want to get some marching orders from Colin around this since it seems like we're all in a good position to take on the work.",
          ">I'm curious about this question as well. In my opinion, I'd rather see us concentrate on landing your changes here while incorporating some of the additional changes to ZodError that the other PR introduces, but I want to get some marching orders from Colin around this since it seems like we're all in a good position to take on the work.\r\n\r\nI guess you're talking about #459 which introduces also the `ZodError` changes? I mean, #431 introduces only the benchmarks (no ZodError changes) and is mergeable by its own (and not having any conflicts atm), so I was just wondering that do we want to merge it first as a separate PR? Then I could rebase this branch of mine on top of the master and drop the benchmark commit from this PR.  \r\n\r\nOr we could just merge this entirely which also merges benchmarks to the master, making #431 obsolete. Both options are fine for me.\r\n",
          "Yeah, all of these options are on the table for me, too, but I want to minimize the amount of work (and rework) that we need to do to land _these_ changes, regardless of what we choose to do about `ZodError`.\r\n\r\n@colinhacks I think we're all ready to put some work in here if you have a clear sense of what you want to see happen. Separate PRs for the different elements (benchmarking, ZodError changes, control flow changes)? Combine all of the performance work onto this branch? If we want to combine these branches,  what are your thoughts on the nature of breaking changes around further `ZodError` and `ZodUnion`-specific issues?",
          "I already fixed all the conflicts on this PR locally. My plan is to redo/merge in Scott's ZodError changes where relevant in my local branch, then merge the whole thing as one big PR. \r\n\r\nI don't think eliminating the Error subclass is enough to merit a new major version. ZodError implements the entire Error interface except `.stack` (we could add `stack = \"\"` as a property) so it's unlikely to break much code. Sorry Matti, as a \"code janitor\" (love that \ud83d\ude1b) this probably gives you an aneurysm.\r\n\r\nUnfortunately there's a larger backwards compatibility problem: the new return type of the `_parse` method. Despite the fact that it's prefixed, users may have defined custom subclasses that rely on the old method signature. It's the [recommended way](https://github.com/colinhacks/zod/issues/307) to implement custom ZodType subclasses. Ideally we'd be able to maintain compatibility somehow, I'll look into it. If it's not, we can just break this too, since it's not officially documented. ",
          ">ZodError implements the entire Error interface except .stack (we could add stack = \"\" as a property) so it's unlikely to break much code. Sorry Matti, as a \"code janitor\" (love that \ud83d\ude1b) this probably gives you an aneurysm.\r\n\r\nI'm not worried about the property itself but its contents. \ud83d\ude04 If you decide to remove the `Error` inheritance, then it's fine for me to drop the `stack` property as well.\r\n\r\n> Unfortunately there's a larger backwards compatibility problem: the new return type of the _parse method. ...\r\n\r\nShiii.. I thought it was for internal purposes only! This commit https://github.com/colinhacks/zod/pull/492/commits/c0744c7d6b514808051af30eab1edb6764a813a3 attempts to restore the backwards compatibility. It basically does the following:\r\n\r\n* Restore old `PseudoPromise` implementation and rename new \"PseudoPromise\" construct to `AsyncValue`\r\n* Rename new \"fast\" internal parse to `_parseFast` - all built-in `ZodType` sub-classes implement this\r\n* Add `_parseSlow` to `ZodType` that will make the conversion from new parameter format to old format and calls `_parse` \r\n* Add logic to detect whether we can use \"fast\" parse flow or \"slow\" depending whether the type instance has `_parse` overridden or not\r\n* Restore `_internalParse` that uses the detected execution flow - all internal calls should call this instead of `_parse`, `_parseFast` or `_parseSlow`\r\n* Add default `_parse` implementation to `ZodType` so that inherited custom types can call `super._parse(...)`\r\n\r\nI also added some tests for the backwards compatibility.",
          "Merged in 3.3! \r\n\r\nFor now ZodError still subclasses Error but that still might change that in a future release. I decided to forgo including your compatibility changes from (c0744c7)[https://github.com/colinhacks/zod/commit/c0744c7d6b514808051af30eab1edb6764a813a3]. I don't think it's worth the additional complexity, since I have no evidence that anyone is actually subclassing ZodType in the wild. In any case, since this pattern isn't actually documented, I'm not particularly concerned about publishing this as a minor version. \r\n\r\nAgain, incredible work! \ud83d\ude4c ",
          "Awesome! Thank you for your quick actions to get this merged! \ud83d\udc4c "
        ]
      }
    ],
    "v3.2": [],
    "v3.1.0": [
      {
        "pr_number": 455,
        "title": "make addQuestionMarks a homomorphic mapped type",
        "body": "This means that docstrings on the schema definition will transfer to the z.Infer generated type.\r\n\r\nFixes #423 \r\n\r\nI can't think of a way to embed this into a test though. If anyone has any idea how to do so I'm all ears.",
        "html_url": "https://github.com/colinhacks/zod/pull/455",
        "comments": ["Merged in 3.0.1. Thanks!"]
      },
      {
        "pr_number": 469,
        "title": "Change internal structure of string and number validation methods",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/469",
        "comments": []
      },
      {
        "pr_number": 469,
        "title": "Change internal structure of string and number validation methods",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/469",
        "comments": []
      }
    ],
    "v3.0.0": [
      {
        "pr_number": 156,
        "title": "Fix Tuple section in readme",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/156",
        "comments": []
      },
      {
        "pr_number": 156,
        "title": "Fix Tuple section in readme",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/156",
        "comments": []
      },
      {
        "pr_number": 171,
        "title": "Fix typo (\"successs\" -> \"success\") in README.md",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/171",
        "comments": []
      },
      {
        "pr_number": 171,
        "title": "Fix typo (\"successs\" -> \"success\") in README.md",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/171",
        "comments": []
      },
      {
        "pr_number": 218,
        "title": "delay costly makeError to when it is needed",
        "body": "In the context of issue #205, this change makes parsing 4x faster in my tests.",
        "html_url": "https://github.com/colinhacks/zod/pull/218",
        "comments": [
          "Can you summarize what you did here? Everything was prettified with a shorter `printWidth` so it's hard to find your changes.",
          "Ah I just saw you're other comment. Basically your moving the `makeError` definition out of the parsing function. Makes sense! I'll play around with this.",
          "Agh, sorry! I only saw now how messy the diff got due to applying prettier. I was rushing to send this between meetings and I didn't double check the diff before pushing \ud83d\ude1e\r\n\r\nI moved the `makeError` out fo the parsing because in the profiler I saw that the `ZodError` generation was always present and taking a significant amount of time on JSON blobs that never error. Doing less work on a heavy-hit function was bound to speed things up.\r\n\r\nI didn't see any other obvious things in the profiler, so I didn't dig deeper.\r\n",
          "Merged into Zod v1 and v2-beta. Thanks @mgilbir, great work on this!"
        ]
      },
      {
        "pr_number": 232,
        "title": "fix: typo in readme",
        "body": "just a small fix",
        "html_url": "https://github.com/colinhacks/zod/pull/232",
        "comments": ["Good catch!!"]
      },
      {
        "pr_number": 237,
        "title": "Correct expected type name in bigint parse errors",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/237",
        "comments": [
          "Good catch! That error has been there for a long time \ud83d\ude2c  I suppose `bigint` doesn't get much utilization..."
        ]
      },
      {
        "pr_number": 232,
        "title": "fix: typo in readme",
        "body": "just a small fix",
        "html_url": "https://github.com/colinhacks/zod/pull/232",
        "comments": ["Good catch!!"]
      },
      {
        "pr_number": 237,
        "title": "Correct expected type name in bigint parse errors",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/237",
        "comments": [
          "Good catch! That error has been there for a long time \ud83d\ude2c  I suppose `bigint` doesn't get much utilization..."
        ]
      },
      {
        "pr_number": 218,
        "title": "delay costly makeError to when it is needed",
        "body": "In the context of issue #205, this change makes parsing 4x faster in my tests.",
        "html_url": "https://github.com/colinhacks/zod/pull/218",
        "comments": [
          "Can you summarize what you did here? Everything was prettified with a shorter `printWidth` so it's hard to find your changes.",
          "Ah I just saw you're other comment. Basically your moving the `makeError` definition out of the parsing function. Makes sense! I'll play around with this.",
          "Agh, sorry! I only saw now how messy the diff got due to applying prettier. I was rushing to send this between meetings and I didn't double check the diff before pushing \ud83d\ude1e\r\n\r\nI moved the `makeError` out fo the parsing because in the profiler I saw that the `ZodError` generation was always present and taking a significant amount of time on JSON blobs that never error. Doing less work on a heavy-hit function was bound to speed things up.\r\n\r\nI didn't see any other obvious things in the profiler, so I didn't dig deeper.\r\n",
          "Merged into Zod v1 and v2-beta. Thanks @mgilbir, great work on this!"
        ]
      },
      {
        "pr_number": 242,
        "title": "Docs fixes",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/242",
        "comments": []
      },
      {
        "pr_number": 242,
        "title": "Docs fixes",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/242",
        "comments": []
      },
      {
        "pr_number": 242,
        "title": "Docs fixes",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/242",
        "comments": []
      },
      {
        "pr_number": 268,
        "title": "Bump ini from 1.3.5 to 1.3.8",
        "body": "Bumps [ini](https://github.com/isaacs/ini) from 1.3.5 to 1.3.8.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/npm/ini/commit/a2c5da86604bc2238fe393c5ff083bf23a9910eb\"><code>a2c5da8</code></a> 1.3.8</li>\n<li><a href=\"https://github.com/npm/ini/commit/af5c6bb5dca6f0248c153aa87e25bddfc515ff6e\"><code>af5c6bb</code></a> Do not use Object.create(null)</li>\n<li><a href=\"https://github.com/npm/ini/commit/8b648a1ac49e1b3b7686ea957e0b95e544bc6ec1\"><code>8b648a1</code></a> don't test where our devdeps don't even work</li>\n<li><a href=\"https://github.com/npm/ini/commit/c74c8af35f32b801a7e82a8309eab792a95932f6\"><code>c74c8af</code></a> 1.3.7</li>\n<li><a href=\"https://github.com/npm/ini/commit/024b8b55ac1c980c6225607b007714c54eb501ba\"><code>024b8b5</code></a> update deps, add linting</li>\n<li><a href=\"https://github.com/npm/ini/commit/032fbaf5f0b98fce70c8cc380e0d05177a9c9073\"><code>032fbaf</code></a> Use Object.create(null) to avoid default object property hazards</li>\n<li><a href=\"https://github.com/npm/ini/commit/2da90391ef70db41d10f013e3a87f9a8c5d01a72\"><code>2da9039</code></a> 1.3.6</li>\n<li><a href=\"https://github.com/npm/ini/commit/cfea636f534b5ca7550d2c28b7d1a95d936d56c6\"><code>cfea636</code></a> better git push script, before publish instead of after</li>\n<li><a href=\"https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1\"><code>56d2805</code></a> do not allow invalid hazardous string as section name</li>\n<li>See full diff in <a href=\"https://github.com/isaacs/ini/compare/v1.3.5...v1.3.8\">compare view</a></li>\n</ul>\n</details>\n<details>\n<summary>Maintainer changes</summary>\n<p>This version was pushed to npm by <a href=\"https://www.npmjs.com/~isaacs\">isaacs</a>, a new releaser for ini since your current version.</p>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ini&package-manager=npm_and_yarn&previous-version=1.3.5&new-version=1.3.8)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/colinhacks/zod/network/alerts).\n\n</details>",
        "html_url": "https://github.com/colinhacks/zod/pull/268",
        "comments": []
      },
      {
        "pr_number": 271,
        "title": "Update yup differences",
        "body": "\ud83d\udc4b  howdy, sorry for the drive-by edits. Updating the readme to match the current reality. I removed the note about `required()` since it was sort of misleading and i couldn't think of another way to explain the situation without adding a bunch of yup specific details you probably don't want in your readme. tl;dr;\r\n\r\n`required()` is weird, and named poorly, it generally means \"not null or undefined\" except in the string case where it also means \"not an empty string\" (the empty array case has been finally changed to be normal and not mean \"no empty arrays\"). In terms of feature comparison tho, it's not the right method to call out. Yup has a \"not undefined\" method, it's called `defined()` which is the more apples to apples comparison to zod's `required()`. IDK if that's worth noting to your users happy to reword.",
        "html_url": "https://github.com/colinhacks/zod/pull/271",
        "comments": [
          "Thrilled to hear about some of these changes. More than happy to merge this! Thanks Jason."
        ]
      },
      {
        "pr_number": 271,
        "title": "Update yup differences",
        "body": "\ud83d\udc4b  howdy, sorry for the drive-by edits. Updating the readme to match the current reality. I removed the note about `required()` since it was sort of misleading and i couldn't think of another way to explain the situation without adding a bunch of yup specific details you probably don't want in your readme. tl;dr;\r\n\r\n`required()` is weird, and named poorly, it generally means \"not null or undefined\" except in the string case where it also means \"not an empty string\" (the empty array case has been finally changed to be normal and not mean \"no empty arrays\"). In terms of feature comparison tho, it's not the right method to call out. Yup has a \"not undefined\" method, it's called `defined()` which is the more apples to apples comparison to zod's `required()`. IDK if that's worth noting to your users happy to reword.",
        "html_url": "https://github.com/colinhacks/zod/pull/271",
        "comments": [
          "Thrilled to hear about some of these changes. More than happy to merge this! Thanks Jason."
        ]
      },
      {
        "pr_number": 280,
        "title": "create INTEGRATIONS.md & add mongoose docs",
        "body": "Following the discussion on #86.\r\nCreated an INTEGRATIONS.md file, and added docs on integrating Zod with Mongoose in it.\r\n\r\nI haven't got to integrate Zod with other relevant libraries (yet), so I couldn't add guides for other libraries. ",
        "html_url": "https://github.com/colinhacks/zod/pull/280",
        "comments": ["Excellent thanks!!"]
      },
      {
        "pr_number": 280,
        "title": "create INTEGRATIONS.md & add mongoose docs",
        "body": "Following the discussion on #86.\r\nCreated an INTEGRATIONS.md file, and added docs on integrating Zod with Mongoose in it.\r\n\r\nI haven't got to integrate Zod with other relevant libraries (yet), so I couldn't add guides for other libraries. ",
        "html_url": "https://github.com/colinhacks/zod/pull/280",
        "comments": ["Excellent thanks!!"]
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 287,
        "title": "Fix URL to default error map",
        "body": "Fixes a broken link to the default error map",
        "html_url": "https://github.com/colinhacks/zod/pull/287",
        "comments": []
      },
      {
        "pr_number": 287,
        "title": "Fix URL to default error map",
        "body": "Fixes a broken link to the default error map",
        "html_url": "https://github.com/colinhacks/zod/pull/287",
        "comments": []
      },
      {
        "pr_number": 304,
        "title": "Clean up test output",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/304",
        "comments": []
      },
      {
        "pr_number": 304,
        "title": "Clean up test output",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/304",
        "comments": []
      },
      {
        "pr_number": 305,
        "title": "Add .keyof",
        "body": "https://github.com/colinhacks/zod/issues/286",
        "html_url": "https://github.com/colinhacks/zod/pull/305",
        "comments": []
      },
      {
        "pr_number": 304,
        "title": "Clean up test output",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/304",
        "comments": []
      },
      {
        "pr_number": 268,
        "title": "Bump ini from 1.3.5 to 1.3.8",
        "body": "Bumps [ini](https://github.com/isaacs/ini) from 1.3.5 to 1.3.8.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/npm/ini/commit/a2c5da86604bc2238fe393c5ff083bf23a9910eb\"><code>a2c5da8</code></a> 1.3.8</li>\n<li><a href=\"https://github.com/npm/ini/commit/af5c6bb5dca6f0248c153aa87e25bddfc515ff6e\"><code>af5c6bb</code></a> Do not use Object.create(null)</li>\n<li><a href=\"https://github.com/npm/ini/commit/8b648a1ac49e1b3b7686ea957e0b95e544bc6ec1\"><code>8b648a1</code></a> don't test where our devdeps don't even work</li>\n<li><a href=\"https://github.com/npm/ini/commit/c74c8af35f32b801a7e82a8309eab792a95932f6\"><code>c74c8af</code></a> 1.3.7</li>\n<li><a href=\"https://github.com/npm/ini/commit/024b8b55ac1c980c6225607b007714c54eb501ba\"><code>024b8b5</code></a> update deps, add linting</li>\n<li><a href=\"https://github.com/npm/ini/commit/032fbaf5f0b98fce70c8cc380e0d05177a9c9073\"><code>032fbaf</code></a> Use Object.create(null) to avoid default object property hazards</li>\n<li><a href=\"https://github.com/npm/ini/commit/2da90391ef70db41d10f013e3a87f9a8c5d01a72\"><code>2da9039</code></a> 1.3.6</li>\n<li><a href=\"https://github.com/npm/ini/commit/cfea636f534b5ca7550d2c28b7d1a95d936d56c6\"><code>cfea636</code></a> better git push script, before publish instead of after</li>\n<li><a href=\"https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1\"><code>56d2805</code></a> do not allow invalid hazardous string as section name</li>\n<li>See full diff in <a href=\"https://github.com/isaacs/ini/compare/v1.3.5...v1.3.8\">compare view</a></li>\n</ul>\n</details>\n<details>\n<summary>Maintainer changes</summary>\n<p>This version was pushed to npm by <a href=\"https://www.npmjs.com/~isaacs\">isaacs</a>, a new releaser for ini since your current version.</p>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ini&package-manager=npm_and_yarn&previous-version=1.3.5&new-version=1.3.8)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/colinhacks/zod/network/alerts).\n\n</details>",
        "html_url": "https://github.com/colinhacks/zod/pull/268",
        "comments": []
      },
      {
        "pr_number": 305,
        "title": "Add .keyof",
        "body": "https://github.com/colinhacks/zod/issues/286",
        "html_url": "https://github.com/colinhacks/zod/pull/305",
        "comments": []
      },
      {
        "pr_number": 365,
        "title": "chore: Remove yarn-error.log",
        "body": "The file has no utility for the library.\r\n\r\nI also placed it in .gitignore",
        "html_url": "https://github.com/colinhacks/zod/pull/365",
        "comments": []
      },
      {
        "pr_number": 365,
        "title": "chore: Remove yarn-error.log",
        "body": "The file has no utility for the library.\r\n\r\nI also placed it in .gitignore",
        "html_url": "https://github.com/colinhacks/zod/pull/365",
        "comments": []
      },
      {
        "pr_number": 373,
        "title": "Bump y18n from 4.0.0 to 4.0.1",
        "body": "Bumps [y18n](https://github.com/yargs/y18n) from 4.0.0 to 4.0.1.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/yargs/y18n/blob/master/CHANGELOG.md\">y18n's changelog</a>.</em></p>\n<blockquote>\n<h1>Change Log</h1>\n<p>All notable changes to this project will be documented in this file. See <a href=\"https://github.com/conventional-changelog/standard-version\">standard-version</a> for commit guidelines.</p>\n<h3><a href=\"https://www.github.com/yargs/y18n/compare/v5.0.4...v5.0.5\">5.0.5</a> (2020-10-25)</h3>\n<h3>Bug Fixes</h3>\n<ul>\n<li>address prototype pollution issue (<a href=\"https://www.github-redirect.dependabot.com/yargs/y18n/issues/108\">#108</a>) (<a href=\"https://www.github.com/yargs/y18n/commit/a9ac604abf756dec9687be3843e2c93bfe581f25\">a9ac604</a>)</li>\n</ul>\n<h3><a href=\"https://www.github.com/yargs/y18n/compare/v5.0.3...v5.0.4\">5.0.4</a> (2020-10-16)</h3>\n<h3>Bug Fixes</h3>\n<ul>\n<li><strong>exports:</strong> node 13.0 and 13.1 require the dotted object form <em>with</em> a string fallback (<a href=\"https://www.github-redirect.dependabot.com/yargs/y18n/issues/105\">#105</a>) (<a href=\"https://www.github.com/yargs/y18n/commit/4f85d80dbaae6d2c7899ae394f7ad97805df4886\">4f85d80</a>)</li>\n</ul>\n<h3><a href=\"https://www.github.com/yargs/y18n/compare/v5.0.2...v5.0.3\">5.0.3</a> (2020-10-16)</h3>\n<h3>Bug Fixes</h3>\n<ul>\n<li><strong>exports:</strong> node 13.0-13.6 require a string fallback (<a href=\"https://www.github-redirect.dependabot.com/yargs/y18n/issues/103\">#103</a>) (<a href=\"https://www.github.com/yargs/y18n/commit/e39921e1017f88f5d8ea97ddea854ffe92d68e74\">e39921e</a>)</li>\n</ul>\n<h3><a href=\"https://www.github.com/yargs/y18n/compare/v5.0.1...v5.0.2\">5.0.2</a> (2020-10-01)</h3>\n<h3>Bug Fixes</h3>\n<ul>\n<li><strong>deno:</strong> update types for deno ^1.4.0 (<a href=\"https://www.github-redirect.dependabot.com/yargs/y18n/issues/100\">#100</a>) (<a href=\"https://www.github.com/yargs/y18n/commit/3834d9ab1332f2937c935ada5e76623290efae81\">3834d9a</a>)</li>\n</ul>\n<h3><a href=\"https://www.github.com/yargs/y18n/compare/v5.0.0...v5.0.1\">5.0.1</a> (2020-09-05)</h3>\n<h3>Bug Fixes</h3>\n<ul>\n<li>main had old index path (<a href=\"https://www.github-redirect.dependabot.com/yargs/y18n/issues/98\">#98</a>) (<a href=\"https://www.github.com/yargs/y18n/commit/124f7b047ba9596bdbdf64459988304e77f3de1b\">124f7b0</a>)</li>\n</ul>\n<h2><a href=\"https://www.github.com/yargs/y18n/compare/v4.0.0...v5.0.0\">5.0.0</a> (2020-09-05)</h2>\n<h3>\u26a0 BREAKING CHANGES</h3>\n<ul>\n<li>exports maps are now used, which modifies import behavior.</li>\n<li>drops Node 6 and 4. begin following Node.js LTS schedule (<a href=\"https://github-redirect.dependabot.com/yargs/y18n/issues/89\">#89</a>)</li>\n</ul>\n<h3>Features</h3>\n<ul>\n<li>add support for ESM and Deno <a href=\"https://www.github-redirect.dependabot.com/yargs/y18n/issues/95\">#95</a>) (<a href=\"https://www.github.com/yargs/y18n/commit/4d7ae94bcb42e84164e2180366474b1cd321ed94\">4d7ae94</a>)</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/yargs/y18n/commits\">compare view</a></li>\n</ul>\n</details>\n<details>\n<summary>Maintainer changes</summary>\n<p>This version was pushed to npm by <a href=\"https://www.npmjs.com/~oss-bot\">oss-bot</a>, a new releaser for y18n since your current version.</p>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=y18n&package-manager=npm_and_yarn&previous-version=4.0.0&new-version=4.0.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/colinhacks/zod/network/alerts).\n\n</details>",
        "html_url": "https://github.com/colinhacks/zod/pull/373",
        "comments": []
      },
      {
        "pr_number": 375,
        "title": "Improve error message when err.path is empty",
        "body": "Currently, the ZodError message looks buggy when `err.path` is empty. There should be some kind of explicit indication of an error occurring at the root-level value, instead of just showing an empty string.\r\n\r\nBefore:\r\n```\r\nIssue #1: unrecognized_keys at\r\n```\r\n\r\nAfter:\r\n```\r\nIssue #1: unrecognized_keys at [[root]]\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/375",
        "comments": [
          "Seems like a good solution! Note that in Zod 3 I've moved away from formatting ZodErrors and just `JSON.stringify` `error.issues`. "
        ]
      },
      {
        "pr_number": 375,
        "title": "Improve error message when err.path is empty",
        "body": "Currently, the ZodError message looks buggy when `err.path` is empty. There should be some kind of explicit indication of an error occurring at the root-level value, instead of just showing an empty string.\r\n\r\nBefore:\r\n```\r\nIssue #1: unrecognized_keys at\r\n```\r\n\r\nAfter:\r\n```\r\nIssue #1: unrecognized_keys at [[root]]\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/375",
        "comments": [
          "Seems like a good solution! Note that in Zod 3 I've moved away from formatting ZodErrors and just `JSON.stringify` `error.issues`. "
        ]
      },
      {
        "pr_number": 373,
        "title": "Bump y18n from 4.0.0 to 4.0.1",
        "body": "Bumps [y18n](https://github.com/yargs/y18n) from 4.0.0 to 4.0.1.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/yargs/y18n/blob/master/CHANGELOG.md\">y18n's changelog</a>.</em></p>\n<blockquote>\n<h1>Change Log</h1>\n<p>All notable changes to this project will be documented in this file. See <a href=\"https://github.com/conventional-changelog/standard-version\">standard-version</a> for commit guidelines.</p>\n<h3><a href=\"https://www.github.com/yargs/y18n/compare/v5.0.4...v5.0.5\">5.0.5</a> (2020-10-25)</h3>\n<h3>Bug Fixes</h3>\n<ul>\n<li>address prototype pollution issue (<a href=\"https://www.github-redirect.dependabot.com/yargs/y18n/issues/108\">#108</a>) (<a href=\"https://www.github.com/yargs/y18n/commit/a9ac604abf756dec9687be3843e2c93bfe581f25\">a9ac604</a>)</li>\n</ul>\n<h3><a href=\"https://www.github.com/yargs/y18n/compare/v5.0.3...v5.0.4\">5.0.4</a> (2020-10-16)</h3>\n<h3>Bug Fixes</h3>\n<ul>\n<li><strong>exports:</strong> node 13.0 and 13.1 require the dotted object form <em>with</em> a string fallback (<a href=\"https://www.github-redirect.dependabot.com/yargs/y18n/issues/105\">#105</a>) (<a href=\"https://www.github.com/yargs/y18n/commit/4f85d80dbaae6d2c7899ae394f7ad97805df4886\">4f85d80</a>)</li>\n</ul>\n<h3><a href=\"https://www.github.com/yargs/y18n/compare/v5.0.2...v5.0.3\">5.0.3</a> (2020-10-16)</h3>\n<h3>Bug Fixes</h3>\n<ul>\n<li><strong>exports:</strong> node 13.0-13.6 require a string fallback (<a href=\"https://www.github-redirect.dependabot.com/yargs/y18n/issues/103\">#103</a>) (<a href=\"https://www.github.com/yargs/y18n/commit/e39921e1017f88f5d8ea97ddea854ffe92d68e74\">e39921e</a>)</li>\n</ul>\n<h3><a href=\"https://www.github.com/yargs/y18n/compare/v5.0.1...v5.0.2\">5.0.2</a> (2020-10-01)</h3>\n<h3>Bug Fixes</h3>\n<ul>\n<li><strong>deno:</strong> update types for deno ^1.4.0 (<a href=\"https://www.github-redirect.dependabot.com/yargs/y18n/issues/100\">#100</a>) (<a href=\"https://www.github.com/yargs/y18n/commit/3834d9ab1332f2937c935ada5e76623290efae81\">3834d9a</a>)</li>\n</ul>\n<h3><a href=\"https://www.github.com/yargs/y18n/compare/v5.0.0...v5.0.1\">5.0.1</a> (2020-09-05)</h3>\n<h3>Bug Fixes</h3>\n<ul>\n<li>main had old index path (<a href=\"https://www.github-redirect.dependabot.com/yargs/y18n/issues/98\">#98</a>) (<a href=\"https://www.github.com/yargs/y18n/commit/124f7b047ba9596bdbdf64459988304e77f3de1b\">124f7b0</a>)</li>\n</ul>\n<h2><a href=\"https://www.github.com/yargs/y18n/compare/v4.0.0...v5.0.0\">5.0.0</a> (2020-09-05)</h2>\n<h3>\u26a0 BREAKING CHANGES</h3>\n<ul>\n<li>exports maps are now used, which modifies import behavior.</li>\n<li>drops Node 6 and 4. begin following Node.js LTS schedule (<a href=\"https://github-redirect.dependabot.com/yargs/y18n/issues/89\">#89</a>)</li>\n</ul>\n<h3>Features</h3>\n<ul>\n<li>add support for ESM and Deno <a href=\"https://www.github-redirect.dependabot.com/yargs/y18n/issues/95\">#95</a>) (<a href=\"https://www.github.com/yargs/y18n/commit/4d7ae94bcb42e84164e2180366474b1cd321ed94\">4d7ae94</a>)</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/yargs/y18n/commits\">compare view</a></li>\n</ul>\n</details>\n<details>\n<summary>Maintainer changes</summary>\n<p>This version was pushed to npm by <a href=\"https://www.npmjs.com/~oss-bot\">oss-bot</a>, a new releaser for y18n since your current version.</p>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=y18n&package-manager=npm_and_yarn&previous-version=4.0.0&new-version=4.0.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/colinhacks/zod/network/alerts).\n\n</details>",
        "html_url": "https://github.com/colinhacks/zod/pull/373",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      }
    ],
    "3.0.0-beta3": [
      {
        "pr_number": 416,
        "title": "Add support for all UUID versions, fix #415",
        "body": "This commit broke UUID support for versions other than 4: https://github.com/colinhacks/zod/commit/e0f7412358a66efa25ffc0374d7945e0e3111b05\r\n\r\nThis PR adds support for all UUID versions again. Additionally, it supports both case-insensitive and case-sensitive UUIDs (using the `i` flag).\r\n\r\nFixes #415 ",
        "html_url": "https://github.com/colinhacks/zod/pull/416",
        "comments": ["Love it, thanks Niek!"]
      },
      {
        "pr_number": 421,
        "title": "Standardize behavior of optionals + defaults",
        "body": "#### 1. Default values are now implemented in separate `ZodDefault` class. \r\n\r\nPreviously this logic was folded into ZodOptional.\r\n\r\n#### 2. Standardized behavior of `.optional()` and `.nullable()` methods.\r\n\r\nPreviously calling `.optional()` on an instance of ZodOptional instance would return the current instance instead of redundantly nesting ZodOptional instances. This seems entirely unnecessary, feels too magical, and introduced complexity into the typings. This complexity makes it harder to write generic functions on top of Zod: https://github.com/colinhacks/zod/issues/355#issuecomment-805130057\r\n\r\n#### 3. No `undefined` defaults\r\n\r\n```ts\r\n// before this was OK\r\nz.string().optional().default(undefined)\r\n\r\n// now it's not\r\nz.string().optional().default('asdf'); // must be string\r\n```\r\n\r\nThere's no point in setting `undefined` value as a  default value, it's a NOOP. This also lets us explicitly eliminate optionals from the inferred output types of ZodDefault:\r\n\r\n```ts\r\nexport class ZodDefault<T extends ZodTypeAny> extends ZodType<\r\n  util.noUndefined<T[\"_output\"]>,\r\n  ZodDefaultDef<T>,\r\n  T[\"_input\"] | undefined\r\n> {\r\n  // ...\r\n}\r\n```\r\n\r\n#### 4. Calls to `.optional` always return schema with `T | undefined`\r\n\r\nThis is a consequence of #2.  Previously calling `.optional()` on `z.string().default()` would return the instance unchanged, since defaults values were implemented in the ZodOptional class. Now it introduces a new ZodOptional instance that wraps a ZodDefault instance. As such the type signature is now `string | undefined` instead of `string`.\r\n\r\nThis introduces a nice duality into chained calls to `default` and `optional`.\r\n\r\n```ts\r\nz.string().default('asdf'); // string\r\nz.string().default('asdf').optional(); // string | undefined\r\nz.string().default('asdf').optional().default('asdf'); // string\r\n```\r\n\r\n#### 5. Introduce .nullish()\r\n\r\n```ts\r\n// equivalent\r\nz.string().nullish()\r\nz.string().optional().nullable()\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/421",
        "comments": [
          "> 1. Default values are now implemented in separate ZodDefault class.\r\n\r\nNo opinion\r\n\r\n> 2. Standardized behavior of .optional() and .nullable() methods.\r\n\r\nNo opinion\r\n\r\n> 3. No undefined defaults\r\n\r\nSeems good as long as you don't **have to** pass a `default()` to `optional()` (but seems like you don't considering 4.)\r\n\r\nAre you doing a `?? defaultValue` in the code, i.e `z.string().optional().nullable().default('x').parse(null)` return `x`? I think it should if not.\r\n\r\nCan this also `.default()` used on complex objects too? \r\n\r\n> 4. Calls to .optional always return schema with T | undefined\r\n\r\nNice.\r\n\r\n\r\n> 5. Introduce .nullish()\r\n\r\nYou know I love this (#403)\r\n\r\n\r\n---\r\n\r\nOverall, great changes \ud83d\udc4f ",
          "Glad you like it :) I was planning to just implement `.nullish` (basically a one-liner) then I got sucked down this rabbit hole :) Feeling good about it!\r\n\r\nCurrently defaults are only applied when the schema receives an `undefined` value. I'd be opening to adding a new subclass (NullishDefault?) or add flag inside ZodDefault to support `??`-like behavior. \r\n\r\nRegarding the base-class convenience method, this could be introduced as a new method (`nullishDefault()`?) or as a param on `default` (`.default('asdf', {nullish:true})`). Probably gonna do the new method though because I don't like params in general.",
          "@colinhacks If a new method will be added (`nullishDefault`), then it will be great if a null-only default is provided as well, just to be consistent, and also since `T.nullable().default()` output type is `T | null` instead of just `T` (related #425)",
          "@colinhacks +1 for a `nullishDefault`.\r\n\r\nI'm running into some impedance mismatches between Zod and React Hook Forms with regards to undefined / null handling.\r\n\r\nRHF discourages the use of `undefined` for field states and reserves its use internally - explicitly setting a field to undefined will reset its state back to the form default.\r\n\r\nSetting the field as `null` is the 'proper' way, but that means changing the schema from `optional()` to `nullish()`, effectively obviating `.default()` and causing consumers of the form to receive `number | null` type."
        ]
      },
      {
        "pr_number": 421,
        "title": "Standardize behavior of optionals + defaults",
        "body": "#### 1. Default values are now implemented in separate `ZodDefault` class. \r\n\r\nPreviously this logic was folded into ZodOptional.\r\n\r\n#### 2. Standardized behavior of `.optional()` and `.nullable()` methods.\r\n\r\nPreviously calling `.optional()` on an instance of ZodOptional instance would return the current instance instead of redundantly nesting ZodOptional instances. This seems entirely unnecessary, feels too magical, and introduced complexity into the typings. This complexity makes it harder to write generic functions on top of Zod: https://github.com/colinhacks/zod/issues/355#issuecomment-805130057\r\n\r\n#### 3. No `undefined` defaults\r\n\r\n```ts\r\n// before this was OK\r\nz.string().optional().default(undefined)\r\n\r\n// now it's not\r\nz.string().optional().default('asdf'); // must be string\r\n```\r\n\r\nThere's no point in setting `undefined` value as a  default value, it's a NOOP. This also lets us explicitly eliminate optionals from the inferred output types of ZodDefault:\r\n\r\n```ts\r\nexport class ZodDefault<T extends ZodTypeAny> extends ZodType<\r\n  util.noUndefined<T[\"_output\"]>,\r\n  ZodDefaultDef<T>,\r\n  T[\"_input\"] | undefined\r\n> {\r\n  // ...\r\n}\r\n```\r\n\r\n#### 4. Calls to `.optional` always return schema with `T | undefined`\r\n\r\nThis is a consequence of #2.  Previously calling `.optional()` on `z.string().default()` would return the instance unchanged, since defaults values were implemented in the ZodOptional class. Now it introduces a new ZodOptional instance that wraps a ZodDefault instance. As such the type signature is now `string | undefined` instead of `string`.\r\n\r\nThis introduces a nice duality into chained calls to `default` and `optional`.\r\n\r\n```ts\r\nz.string().default('asdf'); // string\r\nz.string().default('asdf').optional(); // string | undefined\r\nz.string().default('asdf').optional().default('asdf'); // string\r\n```\r\n\r\n#### 5. Introduce .nullish()\r\n\r\n```ts\r\n// equivalent\r\nz.string().nullish()\r\nz.string().optional().nullable()\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/421",
        "comments": [
          "> 1. Default values are now implemented in separate ZodDefault class.\r\n\r\nNo opinion\r\n\r\n> 2. Standardized behavior of .optional() and .nullable() methods.\r\n\r\nNo opinion\r\n\r\n> 3. No undefined defaults\r\n\r\nSeems good as long as you don't **have to** pass a `default()` to `optional()` (but seems like you don't considering 4.)\r\n\r\nAre you doing a `?? defaultValue` in the code, i.e `z.string().optional().nullable().default('x').parse(null)` return `x`? I think it should if not.\r\n\r\nCan this also `.default()` used on complex objects too? \r\n\r\n> 4. Calls to .optional always return schema with T | undefined\r\n\r\nNice.\r\n\r\n\r\n> 5. Introduce .nullish()\r\n\r\nYou know I love this (#403)\r\n\r\n\r\n---\r\n\r\nOverall, great changes \ud83d\udc4f ",
          "Glad you like it :) I was planning to just implement `.nullish` (basically a one-liner) then I got sucked down this rabbit hole :) Feeling good about it!\r\n\r\nCurrently defaults are only applied when the schema receives an `undefined` value. I'd be opening to adding a new subclass (NullishDefault?) or add flag inside ZodDefault to support `??`-like behavior. \r\n\r\nRegarding the base-class convenience method, this could be introduced as a new method (`nullishDefault()`?) or as a param on `default` (`.default('asdf', {nullish:true})`). Probably gonna do the new method though because I don't like params in general.",
          "@colinhacks If a new method will be added (`nullishDefault`), then it will be great if a null-only default is provided as well, just to be consistent, and also since `T.nullable().default()` output type is `T | null` instead of just `T` (related #425)",
          "@colinhacks +1 for a `nullishDefault`.\r\n\r\nI'm running into some impedance mismatches between Zod and React Hook Forms with regards to undefined / null handling.\r\n\r\nRHF discourages the use of `undefined` for field states and reserves its use internally - explicitly setting a field to undefined will reset its state back to the form default.\r\n\r\nSetting the field as `null` is the 'proper' way, but that means changing the schema from `optional()` to `nullish()`, effectively obviating `.default()` and causing consumers of the form to receive `number | null` type."
        ]
      },
      {
        "pr_number": 421,
        "title": "Standardize behavior of optionals + defaults",
        "body": "#### 1. Default values are now implemented in separate `ZodDefault` class. \r\n\r\nPreviously this logic was folded into ZodOptional.\r\n\r\n#### 2. Standardized behavior of `.optional()` and `.nullable()` methods.\r\n\r\nPreviously calling `.optional()` on an instance of ZodOptional instance would return the current instance instead of redundantly nesting ZodOptional instances. This seems entirely unnecessary, feels too magical, and introduced complexity into the typings. This complexity makes it harder to write generic functions on top of Zod: https://github.com/colinhacks/zod/issues/355#issuecomment-805130057\r\n\r\n#### 3. No `undefined` defaults\r\n\r\n```ts\r\n// before this was OK\r\nz.string().optional().default(undefined)\r\n\r\n// now it's not\r\nz.string().optional().default('asdf'); // must be string\r\n```\r\n\r\nThere's no point in setting `undefined` value as a  default value, it's a NOOP. This also lets us explicitly eliminate optionals from the inferred output types of ZodDefault:\r\n\r\n```ts\r\nexport class ZodDefault<T extends ZodTypeAny> extends ZodType<\r\n  util.noUndefined<T[\"_output\"]>,\r\n  ZodDefaultDef<T>,\r\n  T[\"_input\"] | undefined\r\n> {\r\n  // ...\r\n}\r\n```\r\n\r\n#### 4. Calls to `.optional` always return schema with `T | undefined`\r\n\r\nThis is a consequence of #2.  Previously calling `.optional()` on `z.string().default()` would return the instance unchanged, since defaults values were implemented in the ZodOptional class. Now it introduces a new ZodOptional instance that wraps a ZodDefault instance. As such the type signature is now `string | undefined` instead of `string`.\r\n\r\nThis introduces a nice duality into chained calls to `default` and `optional`.\r\n\r\n```ts\r\nz.string().default('asdf'); // string\r\nz.string().default('asdf').optional(); // string | undefined\r\nz.string().default('asdf').optional().default('asdf'); // string\r\n```\r\n\r\n#### 5. Introduce .nullish()\r\n\r\n```ts\r\n// equivalent\r\nz.string().nullish()\r\nz.string().optional().nullable()\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/421",
        "comments": [
          "> 1. Default values are now implemented in separate ZodDefault class.\r\n\r\nNo opinion\r\n\r\n> 2. Standardized behavior of .optional() and .nullable() methods.\r\n\r\nNo opinion\r\n\r\n> 3. No undefined defaults\r\n\r\nSeems good as long as you don't **have to** pass a `default()` to `optional()` (but seems like you don't considering 4.)\r\n\r\nAre you doing a `?? defaultValue` in the code, i.e `z.string().optional().nullable().default('x').parse(null)` return `x`? I think it should if not.\r\n\r\nCan this also `.default()` used on complex objects too? \r\n\r\n> 4. Calls to .optional always return schema with T | undefined\r\n\r\nNice.\r\n\r\n\r\n> 5. Introduce .nullish()\r\n\r\nYou know I love this (#403)\r\n\r\n\r\n---\r\n\r\nOverall, great changes \ud83d\udc4f ",
          "Glad you like it :) I was planning to just implement `.nullish` (basically a one-liner) then I got sucked down this rabbit hole :) Feeling good about it!\r\n\r\nCurrently defaults are only applied when the schema receives an `undefined` value. I'd be opening to adding a new subclass (NullishDefault?) or add flag inside ZodDefault to support `??`-like behavior. \r\n\r\nRegarding the base-class convenience method, this could be introduced as a new method (`nullishDefault()`?) or as a param on `default` (`.default('asdf', {nullish:true})`). Probably gonna do the new method though because I don't like params in general.",
          "@colinhacks If a new method will be added (`nullishDefault`), then it will be great if a null-only default is provided as well, just to be consistent, and also since `T.nullable().default()` output type is `T | null` instead of just `T` (related #425)",
          "@colinhacks +1 for a `nullishDefault`.\r\n\r\nI'm running into some impedance mismatches between Zod and React Hook Forms with regards to undefined / null handling.\r\n\r\nRHF discourages the use of `undefined` for field states and reserves its use internally - explicitly setting a field to undefined will reset its state back to the form default.\r\n\r\nSetting the field as `null` is the 'proper' way, but that means changing the schema from `optional()` to `nullish()`, effectively obviating `.default()` and causing consumers of the form to receive `number | null` type."
        ]
      },
      {
        "pr_number": 421,
        "title": "Standardize behavior of optionals + defaults",
        "body": "#### 1. Default values are now implemented in separate `ZodDefault` class. \r\n\r\nPreviously this logic was folded into ZodOptional.\r\n\r\n#### 2. Standardized behavior of `.optional()` and `.nullable()` methods.\r\n\r\nPreviously calling `.optional()` on an instance of ZodOptional instance would return the current instance instead of redundantly nesting ZodOptional instances. This seems entirely unnecessary, feels too magical, and introduced complexity into the typings. This complexity makes it harder to write generic functions on top of Zod: https://github.com/colinhacks/zod/issues/355#issuecomment-805130057\r\n\r\n#### 3. No `undefined` defaults\r\n\r\n```ts\r\n// before this was OK\r\nz.string().optional().default(undefined)\r\n\r\n// now it's not\r\nz.string().optional().default('asdf'); // must be string\r\n```\r\n\r\nThere's no point in setting `undefined` value as a  default value, it's a NOOP. This also lets us explicitly eliminate optionals from the inferred output types of ZodDefault:\r\n\r\n```ts\r\nexport class ZodDefault<T extends ZodTypeAny> extends ZodType<\r\n  util.noUndefined<T[\"_output\"]>,\r\n  ZodDefaultDef<T>,\r\n  T[\"_input\"] | undefined\r\n> {\r\n  // ...\r\n}\r\n```\r\n\r\n#### 4. Calls to `.optional` always return schema with `T | undefined`\r\n\r\nThis is a consequence of #2.  Previously calling `.optional()` on `z.string().default()` would return the instance unchanged, since defaults values were implemented in the ZodOptional class. Now it introduces a new ZodOptional instance that wraps a ZodDefault instance. As such the type signature is now `string | undefined` instead of `string`.\r\n\r\nThis introduces a nice duality into chained calls to `default` and `optional`.\r\n\r\n```ts\r\nz.string().default('asdf'); // string\r\nz.string().default('asdf').optional(); // string | undefined\r\nz.string().default('asdf').optional().default('asdf'); // string\r\n```\r\n\r\n#### 5. Introduce .nullish()\r\n\r\n```ts\r\n// equivalent\r\nz.string().nullish()\r\nz.string().optional().nullable()\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/421",
        "comments": [
          "> 1. Default values are now implemented in separate ZodDefault class.\r\n\r\nNo opinion\r\n\r\n> 2. Standardized behavior of .optional() and .nullable() methods.\r\n\r\nNo opinion\r\n\r\n> 3. No undefined defaults\r\n\r\nSeems good as long as you don't **have to** pass a `default()` to `optional()` (but seems like you don't considering 4.)\r\n\r\nAre you doing a `?? defaultValue` in the code, i.e `z.string().optional().nullable().default('x').parse(null)` return `x`? I think it should if not.\r\n\r\nCan this also `.default()` used on complex objects too? \r\n\r\n> 4. Calls to .optional always return schema with T | undefined\r\n\r\nNice.\r\n\r\n\r\n> 5. Introduce .nullish()\r\n\r\nYou know I love this (#403)\r\n\r\n\r\n---\r\n\r\nOverall, great changes \ud83d\udc4f ",
          "Glad you like it :) I was planning to just implement `.nullish` (basically a one-liner) then I got sucked down this rabbit hole :) Feeling good about it!\r\n\r\nCurrently defaults are only applied when the schema receives an `undefined` value. I'd be opening to adding a new subclass (NullishDefault?) or add flag inside ZodDefault to support `??`-like behavior. \r\n\r\nRegarding the base-class convenience method, this could be introduced as a new method (`nullishDefault()`?) or as a param on `default` (`.default('asdf', {nullish:true})`). Probably gonna do the new method though because I don't like params in general.",
          "@colinhacks If a new method will be added (`nullishDefault`), then it will be great if a null-only default is provided as well, just to be consistent, and also since `T.nullable().default()` output type is `T | null` instead of just `T` (related #425)",
          "@colinhacks +1 for a `nullishDefault`.\r\n\r\nI'm running into some impedance mismatches between Zod and React Hook Forms with regards to undefined / null handling.\r\n\r\nRHF discourages the use of `undefined` for field states and reserves its use internally - explicitly setting a field to undefined will reset its state back to the form default.\r\n\r\nSetting the field as `null` is the 'proper' way, but that means changing the schema from `optional()` to `nullish()`, effectively obviating `.default()` and causing consumers of the form to receive `number | null` type."
        ]
      },
      {
        "pr_number": 422,
        "title": "Fix error map being ignored by custom refinement",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/422",
        "comments": []
      },
      {
        "pr_number": 422,
        "title": "Fix error map being ignored by custom refinement",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/422",
        "comments": []
      },
      {
        "pr_number": 422,
        "title": "Fix error map being ignored by custom refinement",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/422",
        "comments": []
      },
      {
        "pr_number": 416,
        "title": "Add support for all UUID versions, fix #415",
        "body": "This commit broke UUID support for versions other than 4: https://github.com/colinhacks/zod/commit/e0f7412358a66efa25ffc0374d7945e0e3111b05\r\n\r\nThis PR adds support for all UUID versions again. Additionally, it supports both case-insensitive and case-sensitive UUIDs (using the `i` flag).\r\n\r\nFixes #415 ",
        "html_url": "https://github.com/colinhacks/zod/pull/416",
        "comments": ["Love it, thanks Niek!"]
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 421,
        "title": "Standardize behavior of optionals + defaults",
        "body": "#### 1. Default values are now implemented in separate `ZodDefault` class. \r\n\r\nPreviously this logic was folded into ZodOptional.\r\n\r\n#### 2. Standardized behavior of `.optional()` and `.nullable()` methods.\r\n\r\nPreviously calling `.optional()` on an instance of ZodOptional instance would return the current instance instead of redundantly nesting ZodOptional instances. This seems entirely unnecessary, feels too magical, and introduced complexity into the typings. This complexity makes it harder to write generic functions on top of Zod: https://github.com/colinhacks/zod/issues/355#issuecomment-805130057\r\n\r\n#### 3. No `undefined` defaults\r\n\r\n```ts\r\n// before this was OK\r\nz.string().optional().default(undefined)\r\n\r\n// now it's not\r\nz.string().optional().default('asdf'); // must be string\r\n```\r\n\r\nThere's no point in setting `undefined` value as a  default value, it's a NOOP. This also lets us explicitly eliminate optionals from the inferred output types of ZodDefault:\r\n\r\n```ts\r\nexport class ZodDefault<T extends ZodTypeAny> extends ZodType<\r\n  util.noUndefined<T[\"_output\"]>,\r\n  ZodDefaultDef<T>,\r\n  T[\"_input\"] | undefined\r\n> {\r\n  // ...\r\n}\r\n```\r\n\r\n#### 4. Calls to `.optional` always return schema with `T | undefined`\r\n\r\nThis is a consequence of #2.  Previously calling `.optional()` on `z.string().default()` would return the instance unchanged, since defaults values were implemented in the ZodOptional class. Now it introduces a new ZodOptional instance that wraps a ZodDefault instance. As such the type signature is now `string | undefined` instead of `string`.\r\n\r\nThis introduces a nice duality into chained calls to `default` and `optional`.\r\n\r\n```ts\r\nz.string().default('asdf'); // string\r\nz.string().default('asdf').optional(); // string | undefined\r\nz.string().default('asdf').optional().default('asdf'); // string\r\n```\r\n\r\n#### 5. Introduce .nullish()\r\n\r\n```ts\r\n// equivalent\r\nz.string().nullish()\r\nz.string().optional().nullable()\r\n```",
        "html_url": "https://github.com/colinhacks/zod/pull/421",
        "comments": [
          "> 1. Default values are now implemented in separate ZodDefault class.\r\n\r\nNo opinion\r\n\r\n> 2. Standardized behavior of .optional() and .nullable() methods.\r\n\r\nNo opinion\r\n\r\n> 3. No undefined defaults\r\n\r\nSeems good as long as you don't **have to** pass a `default()` to `optional()` (but seems like you don't considering 4.)\r\n\r\nAre you doing a `?? defaultValue` in the code, i.e `z.string().optional().nullable().default('x').parse(null)` return `x`? I think it should if not.\r\n\r\nCan this also `.default()` used on complex objects too? \r\n\r\n> 4. Calls to .optional always return schema with T | undefined\r\n\r\nNice.\r\n\r\n\r\n> 5. Introduce .nullish()\r\n\r\nYou know I love this (#403)\r\n\r\n\r\n---\r\n\r\nOverall, great changes \ud83d\udc4f ",
          "Glad you like it :) I was planning to just implement `.nullish` (basically a one-liner) then I got sucked down this rabbit hole :) Feeling good about it!\r\n\r\nCurrently defaults are only applied when the schema receives an `undefined` value. I'd be opening to adding a new subclass (NullishDefault?) or add flag inside ZodDefault to support `??`-like behavior. \r\n\r\nRegarding the base-class convenience method, this could be introduced as a new method (`nullishDefault()`?) or as a param on `default` (`.default('asdf', {nullish:true})`). Probably gonna do the new method though because I don't like params in general.",
          "@colinhacks If a new method will be added (`nullishDefault`), then it will be great if a null-only default is provided as well, just to be consistent, and also since `T.nullable().default()` output type is `T | null` instead of just `T` (related #425)",
          "@colinhacks +1 for a `nullishDefault`.\r\n\r\nI'm running into some impedance mismatches between Zod and React Hook Forms with regards to undefined / null handling.\r\n\r\nRHF discourages the use of `undefined` for field states and reserves its use internally - explicitly setting a field to undefined will reset its state back to the form default.\r\n\r\nSetting the field as `null` is the 'proper' way, but that means changing the schema from `optional()` to `nullish()`, effectively obviating `.default()` and causing consumers of the form to receive `number | null` type."
        ]
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 434,
        "title": "Fix \"Symbol is undefined\" error",
        "body": "We faced with issue, that in old browsers Symbol is not supported.\r\nAs I see, in the code, Symbol is used as unique value (not as unique key in an object).\r\nSo I added the check if Symbol exists and use an Object if not.",
        "html_url": "https://github.com/colinhacks/zod/pull/434",
        "comments": [
          "I switched away from Symbol entirely, the `typeof Symbol === \"function\"` check just adds unnecessary complexity. Good PR, thanks!!"
        ]
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 440,
        "title": "Deprecate string nonempty",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/440",
        "comments": []
      },
      {
        "pr_number": 440,
        "title": "Deprecate string nonempty",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/440",
        "comments": []
      },
      {
        "pr_number": 440,
        "title": "Deprecate string nonempty",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/440",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 434,
        "title": "Fix \"Symbol is undefined\" error",
        "body": "We faced with issue, that in old browsers Symbol is not supported.\r\nAs I see, in the code, Symbol is used as unique value (not as unique key in an object).\r\nSo I added the check if Symbol exists and use an Object if not.",
        "html_url": "https://github.com/colinhacks/zod/pull/434",
        "comments": [
          "I switched away from Symbol entirely, the `typeof Symbol === \"function\"` check just adds unnecessary complexity. Good PR, thanks!!"
        ]
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 441,
        "title": "Clean up error messages and test cases",
        "body": "Clean up error messages.",
        "html_url": "https://github.com/colinhacks/zod/pull/441",
        "comments": []
      },
      {
        "pr_number": 441,
        "title": "Clean up error messages and test cases",
        "body": "Clean up error messages.",
        "html_url": "https://github.com/colinhacks/zod/pull/441",
        "comments": []
      },
      {
        "pr_number": 441,
        "title": "Clean up error messages and test cases",
        "body": "Clean up error messages.",
        "html_url": "https://github.com/colinhacks/zod/pull/441",
        "comments": []
      },
      {
        "pr_number": 441,
        "title": "Clean up error messages and test cases",
        "body": "Clean up error messages.",
        "html_url": "https://github.com/colinhacks/zod/pull/441",
        "comments": []
      },
      {
        "pr_number": 441,
        "title": "Clean up error messages and test cases",
        "body": "Clean up error messages.",
        "html_url": "https://github.com/colinhacks/zod/pull/441",
        "comments": []
      },
      {
        "pr_number": 441,
        "title": "Clean up error messages and test cases",
        "body": "Clean up error messages.",
        "html_url": "https://github.com/colinhacks/zod/pull/441",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      }
    ],
    "3.0.0-alpha.39": [
      {
        "pr_number": 336,
        "title": "Fixed formatting in ERROR_HANDLING table",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/336",
        "comments": [
          "Awesome thanks for this!\r\n\r\nI was relying on VSCode's automatic table formatting...guess I need to be more careful.",
          "The commented rows were causing issues with VSCode. As long as you keep the comments apart, it should be fine",
          "Ah, really good to know."
        ]
      },
      {
        "pr_number": 336,
        "title": "Fixed formatting in ERROR_HANDLING table",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/336",
        "comments": [
          "Awesome thanks for this!\r\n\r\nI was relying on VSCode's automatic table formatting...guess I need to be more careful.",
          "The commented rows were causing issues with VSCode. As long as you keep the comments apart, it should be fine",
          "Ah, really good to know."
        ]
      },
      {
        "pr_number": 399,
        "title": "Update README.md",
        "body": "just remove word 'a'",
        "html_url": "https://github.com/colinhacks/zod/pull/399",
        "comments": ["Merged! Good catch :)"]
      },
      {
        "pr_number": 399,
        "title": "Update README.md",
        "body": "just remove word 'a'",
        "html_url": "https://github.com/colinhacks/zod/pull/399",
        "comments": ["Merged! Good catch :)"]
      },
      {
        "pr_number": 409,
        "title": "Fixed UUID regex",
        "body": "Previously the regex was missing anchors (^ and $) so validation would pass as long as the argument contained a valid UUID as a substring. Closes #389.\r\n\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/409",
        "comments": []
      },
      {
        "pr_number": 409,
        "title": "Fixed UUID regex",
        "body": "Previously the regex was missing anchors (^ and $) so validation would pass as long as the argument contained a valid UUID as a substring. Closes #389.\r\n\r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/409",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 410,
        "title": "Fixed tuple parsing bug ",
        "body": "Fixed tuple parsing bug when tupledata length is different from ZodTuple.items length",
        "html_url": "https://github.com/colinhacks/zod/pull/410",
        "comments": []
      },
      {
        "pr_number": 410,
        "title": "Fixed tuple parsing bug ",
        "body": "Fixed tuple parsing bug when tupledata length is different from ZodTuple.items length",
        "html_url": "https://github.com/colinhacks/zod/pull/410",
        "comments": []
      },
      {
        "pr_number": 410,
        "title": "Fixed tuple parsing bug ",
        "body": "Fixed tuple parsing bug when tupledata length is different from ZodTuple.items length",
        "html_url": "https://github.com/colinhacks/zod/pull/410",
        "comments": []
      },
      {
        "pr_number": 410,
        "title": "Fixed tuple parsing bug ",
        "body": "Fixed tuple parsing bug when tupledata length is different from ZodTuple.items length",
        "html_url": "https://github.com/colinhacks/zod/pull/410",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 412,
        "title": "Clarify ZodObject.merge override behavior, fix inferred type",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/412",
        "comments": []
      },
      {
        "pr_number": 412,
        "title": "Clarify ZodObject.merge override behavior, fix inferred type",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/412",
        "comments": []
      },
      {
        "pr_number": 412,
        "title": "Clarify ZodObject.merge override behavior, fix inferred type",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/412",
        "comments": []
      },
      {
        "pr_number": 412,
        "title": "Clarify ZodObject.merge override behavior, fix inferred type",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/412",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 413,
        "title": "Add Ecosystem section to docs",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/413",
        "comments": []
      },
      {
        "pr_number": 413,
        "title": "Add Ecosystem section to docs",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/413",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      }
    ],
    "v3.0.0-alpha.33": [
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      }
    ],
    "v3.0.0-alpha.32": [
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      }
    ],
    "v3.0.0-alpha.19": [
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 348,
        "title": "Moves eslint-plugin-unused-imports to dev deps",
        "body": "It seems like perhaps this was just a mistake of omitting the -D because can't seem to find any reference to using the plugin in the main source.",
        "html_url": "https://github.com/colinhacks/zod/pull/348",
        "comments": ["So it is! Good catch! Fixed in alpha.10."]
      },
      {
        "pr_number": 348,
        "title": "Moves eslint-plugin-unused-imports to dev deps",
        "body": "It seems like perhaps this was just a mistake of omitting the -D because can't seem to find any reference to using the plugin in the main source.",
        "html_url": "https://github.com/colinhacks/zod/pull/348",
        "comments": ["So it is! Good catch! Fixed in alpha.10."]
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      }
    ],
    "3.0.0-alpha.8": [],
    "3.0.0-alpha.7": [
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 297,
        "title": "fix(README): fix broken sponsorship links",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/297",
        "comments": []
      },
      {
        "pr_number": 297,
        "title": "fix(README): fix broken sponsorship links",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/297",
        "comments": []
      },
      {
        "pr_number": 298,
        "title": "Add Set / z.set() support ",
        "body": "#172 \r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/298",
        "comments": [
          "Hello :) \r\n\r\nWhen do you think we will be able to use the z.set() function ?"
        ]
      },
      {
        "pr_number": 298,
        "title": "Add Set / z.set() support ",
        "body": "#172 \r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/298",
        "comments": [
          "Hello :) \r\n\r\nWhen do you think we will be able to use the z.set() function ?"
        ]
      },
      {
        "pr_number": 298,
        "title": "Add Set / z.set() support ",
        "body": "#172 \r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/298",
        "comments": [
          "Hello :) \r\n\r\nWhen do you think we will be able to use the z.set() function ?"
        ]
      },
      {
        "pr_number": 298,
        "title": "Add Set / z.set() support ",
        "body": "#172 \r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/298",
        "comments": [
          "Hello :) \r\n\r\nWhen do you think we will be able to use the z.set() function ?"
        ]
      },
      {
        "pr_number": 298,
        "title": "Add Set / z.set() support ",
        "body": "#172 \r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/298",
        "comments": [
          "Hello :) \r\n\r\nWhen do you think we will be able to use the z.set() function ?"
        ]
      },
      {
        "pr_number": 317,
        "title": "docs: corrected install instructions in readme for v3",
        "body": "- also removed yarn instructions. Having both are confusing for those new to node ecosystem. Yarn users will know what to do.",
        "html_url": "https://github.com/colinhacks/zod/pull/317",
        "comments": []
      },
      {
        "pr_number": 317,
        "title": "docs: corrected install instructions in readme for v3",
        "body": "- also removed yarn instructions. Having both are confusing for those new to node ecosystem. Yarn users will know what to do.",
        "html_url": "https://github.com/colinhacks/zod/pull/317",
        "comments": []
      },
      {
        "pr_number": 298,
        "title": "Add Set / z.set() support ",
        "body": "#172 \r\n",
        "html_url": "https://github.com/colinhacks/zod/pull/298",
        "comments": [
          "Hello :) \r\n\r\nWhen do you think we will be able to use the z.set() function ?"
        ]
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 303,
        "title": "test(deno bundle): add syntax sanity check for deno bundle v1.7.1+",
        "body": "The just-released [Deno 1.7.1](https://github.com/denoland/deno/releases/tag/v1.7.1) fixes the last issue (https://github.com/denoland/deno/issues/9097) that was causing invalid bundles to be generated for Zod. This PR adds a sanity check that the generated bundle is at least importable without an error, and updates the test matrix to run against Deno 1.7.1 and the latest stable Deno 1.x release (please feel free to change that if you'd prefer to only run one or the other), dropping the test for the broken-bundling Deno 1.6.\r\n\r\nAlso adds` yarn clean` to fix.yaml to remove stale files, and removes the previously accidentally-committed stale `bundle.js`.\r\n\r\nI am optimistic that this will remain stable from now on, but if it does break don't hesitate to tag me. \ud83d\ude43",
        "html_url": "https://github.com/colinhacks/zod/pull/303",
        "comments": [
          "@jeremyBanks should I merge this or is it obsolete? I'm crazy behind on PRs...sorry for the delay \ud83d\ude2c \r\n\r\nI'm planning to do a big rewrite of v3 that eliminates cyclical imports (which will make ESM much easier) and makes some perf improvements. I want really rock solid Deno support before I promote v3 to stable.",
          "@colinhacks No worries. This is still relevant, but let me give it a spin with the latest Deno tonight to make sure it's still all good before you merge.",
          "@colinhacks LGTM \ud83d\ude09 "
        ]
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 303,
        "title": "test(deno bundle): add syntax sanity check for deno bundle v1.7.1+",
        "body": "The just-released [Deno 1.7.1](https://github.com/denoland/deno/releases/tag/v1.7.1) fixes the last issue (https://github.com/denoland/deno/issues/9097) that was causing invalid bundles to be generated for Zod. This PR adds a sanity check that the generated bundle is at least importable without an error, and updates the test matrix to run against Deno 1.7.1 and the latest stable Deno 1.x release (please feel free to change that if you'd prefer to only run one or the other), dropping the test for the broken-bundling Deno 1.6.\r\n\r\nAlso adds` yarn clean` to fix.yaml to remove stale files, and removes the previously accidentally-committed stale `bundle.js`.\r\n\r\nI am optimistic that this will remain stable from now on, but if it does break don't hesitate to tag me. \ud83d\ude43",
        "html_url": "https://github.com/colinhacks/zod/pull/303",
        "comments": [
          "@jeremyBanks should I merge this or is it obsolete? I'm crazy behind on PRs...sorry for the delay \ud83d\ude2c \r\n\r\nI'm planning to do a big rewrite of v3 that eliminates cyclical imports (which will make ESM much easier) and makes some perf improvements. I want really rock solid Deno support before I promote v3 to stable.",
          "@colinhacks No worries. This is still relevant, but let me give it a spin with the latest Deno tonight to make sure it's still all good before you merge.",
          "@colinhacks LGTM \ud83d\ude09 "
        ]
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      },
      {
        "pr_number": 445,
        "title": "v3 -> master",
        "body": "",
        "html_url": "https://github.com/colinhacks/zod/pull/445",
        "comments": []
      }
    ]
  }
}
