diff --git a/.gitignore b/.gitignore
index 1990b6b5e..a779ff58c 100644
--- a/.gitignore
+++ b/.gitignore
@@ -9,3 +9,4 @@ src/playground.ts
 deno/lib/playground.ts
 .eslintcache
 workspace.code-workspace
+.netlify
diff --git a/docs/.nojekyll b/.nojekyll
similarity index 100%
rename from docs/.nojekyll
rename to .nojekyll
diff --git a/.prettierrc.yaml b/.prettierrc.yaml
index ac66545cb..2fcf1d015 100644
--- a/.prettierrc.yaml
+++ b/.prettierrc.yaml
@@ -3,3 +3,4 @@ trailingComma: "es5"
 tabWidth: 2
 semi: true
 singleQuote: false
+printWidth: 80
diff --git a/ERROR_HANDLING.md b/ERROR_HANDLING.md
index 8efc40e14..ada915d5d 100644
--- a/ERROR_HANDLING.md
+++ b/ERROR_HANDLING.md
@@ -42,7 +42,7 @@ _Every_ ZodIssue has these fields:
 
 | code                             | additional fields                                                                                                                                                                                                                                                                                                                                                    |
 | -------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
-| ZodIssueCode.invalid_type        | `expected: ZodParsedType` <br> `received: ZodParsedType` <br><br>Jump to [this section](#parsedtype) for a breakdown of the possible values of ZodParsedType.                                                                                                                                                                                                        |
+| ZodIssueCode.invalid_type        | `expected: ZodParsedType` <br> `received: ZodParsedType` <br><br>Jump to [this section](#zodparsedtype) for a breakdown of the possible values of ZodParsedType.                                                                                                                                                                                                        |
 | ZodIssueCode.unrecognized_keys   | `keys: string[]`<br>The list of unrecognized keys<br>                                                                                                                                                                                                                                                                                                                |
 | ZodIssueCode.invalid_union       | `unionErrors: ZodError[]` <br> The errors thrown by each element of the union.                                                                                                                                                                                                                                                                                       |
 | ZodIssueCode.invalid_enum_value  | `options: string[]` <br> The set of acceptable string values for this enum.                                                                                                                                                                                                                                                                                          |
diff --git a/README.md b/README.md
index b0f19fed7..4c85aa486 100644
--- a/README.md
+++ b/README.md
@@ -1,7 +1,13 @@
 <p align="center">
-  <img src="logo.svg" width="200px" align="center" />
+  <img src="logo.svg" width="200px" align="center" alt="Zod logo" />
   <h1 align="center">Zod</h1>
+  <p align="center">
+    ✨ <a href="https://zod.dev">https://zod.dev</a> ✨
+    <br/>
+    TypeScript-first schema validation with static type inference
+  </p>
 </p>
+<br/>
 <p align="center">
 <a href="https://github.com/colinhacks/zod/actions?query=branch%3Amaster"><img src="https://github.com/colinhacks/zod/actions/workflows/test.yml/badge.svg?event=push&branch=master" alt="Zod CI status" /></a>
 <a href="https://twitter.com/colinhacks" rel="nofollow"><img src="https://img.shields.io/badge/created%20by-@colinhacks-4BBAAB.svg" alt="Created by Colin McDonnell"></a>
@@ -12,6 +18,8 @@
 </p>
 
 <div align="center">
+  <a href="https://zod.dev">Documentation</a>
+  <span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>
   <a href="https://discord.gg/RcG33DQJdf">Discord</a>
   <span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>
   <a href="https://www.npmjs.com/package/zod">NPM</a>
@@ -24,61 +32,62 @@
   <br />
 </div>
 
+<br/>
 <br/>
 
-These docs have been translated into [Chinese](./README_ZH.md).
+> These docs have been translated into [Chinese](./README_ZH.md).
 
-# Table of contents
+## Table of contents
 
 <!-- The full documentation is available both on the [official documentation site](https://zod.js.org/) (recommended) and in `README.md`.
 
-### Go to [zod.js.org](https://zod.js.org) >> -->
+#### Go to [zod.js.org](https://zod.js.org) >> -->
 
-- [What is Zod](#what-is-zod)
+- [Introduction](#introduction)
+  - [Sponsors](#sponsors)
+  - [Ecosystem](#ecosystem)
 - [Installation](#installation)
-- [Ecosystem](#ecosystem)
 - [Basic usage](#basic-usage)
-- [Defining schemas](#defining-schemas)
-  - [Primitives](#primitives)
-  - [Literals](#literals)
-  - [Strings](#strings)
-  - [Numbers](#numbers)
-  - [NaNs](#nans)
-  - [Booleans](#booleans)
-  - [Dates](#dates)
-  - [Zod enums](#zod-enums)
-  - [Native enums](#native-enums)
-  - [Optionals](#optionals)
-  - [Nullables](#nullables)
-  - [Objects](#objects)
-    - [.shape](#shape)
-    - [.extend](#extend)
-    - [.merge](#merge)
-    - [.pick/.omit](#pickomit)
-    - [.partial](#partial)
-    - [.deepPartial](#deepPartial)
-    - [.passthrough](#passthrough)
-    - [.strict](#strict)
-    - [.strip](#strip)
-    - [.catchall](#catchall)
-  - [Arrays](#arrays)
-    - [.element](#element)
-    - [.nonempty](#nonempty)
-    - [.min/.max/.length](#minmaxlength)
-  - [Tuples](#tuples)
-  - [Records](#records)
-  - [Maps](#maps)
-  - [Sets](#sets)
-  - [Unions](#unions)
-    - [Discriminated Unions](#discriminated-unions)
-  - [Recursive types](#recursive-types)
-    - [JSON type](#json-type)
-    - [Cyclical data](#cyclical-objects)
-  - [Promises](#promises)
-  - [Instanceof](#instanceof)
-  - [Function schemas](#function-schemas)
-  - [Preprocess](#preprocess)
-- [Schema methods](#zodtype-methods-and-properties)
+- [Primitives](#primitives)
+- [Literals](#literals)
+- [Strings](#strings)
+- [Numbers](#numbers)
+- [NaNs](#nans)
+- [Booleans](#booleans)
+- [Dates](#dates)
+- [Zod enums](#zod-enums)
+- [Native enums](#native-enums)
+- [Optionals](#optionals)
+- [Nullables](#nullables)
+- [Objects](#objects)
+  - [.shape](#shape)
+  - [.extend](#extend)
+  - [.merge](#merge)
+  - [.pick/.omit](#pickomit)
+  - [.partial](#partial)
+  - [.deepPartial](#deepPartial)
+  - [.passthrough](#passthrough)
+  - [.strict](#strict)
+  - [.strip](#strip)
+  - [.catchall](#catchall)
+- [Arrays](#arrays)
+  - [.element](#element)
+  - [.nonempty](#nonempty)
+  - [.min/.max/.length](#minmaxlength)
+- [Tuples](#tuples)
+- [Unions](#unions)
+- [Discriminated Unions](#discriminated-unions)
+- [Records](#records)
+- [Maps](#maps)
+- [Sets](#sets)
+- [Recursive types](#recursive-types)
+  - [JSON type](#json-type)
+  - [Cyclical data](#cyclical-objects)
+- [Promises](#promises)
+- [Instanceof](#instanceof)
+- [Function schemas](#function-schemas)
+- [Preprocess](#preprocess)
+- [Schema methods](#schema-methods)
   - [.parse](#parse)
   - [.parseAsync](#parseasync)
   - [.safeParse](#safeparse)
@@ -98,6 +107,7 @@ These docs have been translated into [Chinese](./README_ZH.md).
   - [Type inference](#type-inference)
   - [Writing generic functions](#writing-generic-functions)
   - [Error handling](#error-handling)
+  - [Error formatting](#error-formatting)
 - [Comparison](#comparison)
   - [Joi](#joi)
   - [Yup](#yup)
@@ -107,7 +117,7 @@ These docs have been translated into [Chinese](./README_ZH.md).
 
 <!-- **Zod 2 is coming! Follow [@colinhacks](https://twitter.com/colinhacks) to stay updated and discuss the future of Zod.** -->
 
-# What is Zod
+## Introduction
 
 Zod is a TypeScript-first schema declaration and validation library. I'm using the term "schema" to broadly refer to any data type, from a simple `string` to a complex nested object.
 
@@ -123,17 +133,17 @@ Some other great aspects:
 - Functional approach: [parse, don't validate](https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/)
 - Works with plain JavaScript too! You don't need to use TypeScript.
 
-# Sponsorship
+### Sponsors
 
 Sponsorship at any level is appreciated and encouraged. For individual developers, consider the [Cup of Coffee tier](https://github.com/sponsors/colinhacks). If you built a paid product using Zod, consider one of the [podium tiers](https://github.com/sponsors/colinhacks).
 
-### Gold
+#### Gold
 
 <table>
   <tr>
     <td align="center">
       <a href="https://astro.build/">
-        <img src="https://avatars.githubusercontent.com/u/44914786?s=200&v=4" width="200px;" alt="" />
+        <img src="https://avatars.githubusercontent.com/u/44914786?s=200&v=4" width="200px;" alt="Astro" />
       </a>
       <br />
       <b>Astro</b>
@@ -173,7 +183,7 @@ Sponsorship at any level is appreciated and encouraged. For individual developer
   </tr>
 </table>
 
-### Silver
+#### Silver
 
 <table>
   <tr>
@@ -205,7 +215,7 @@ Sponsorship at any level is appreciated and encouraged. For individual developer
   </tr>
 </table>
 
-### Bronze
+#### Bronze
 
 <table>
   <tr>
@@ -242,34 +252,7 @@ Sponsorship at any level is appreciated and encouraged. For individual developer
   </tr>
 </table>
 
-# Installation
-
-To install Zod v3:
-
-```sh
-npm install zod
-```
-
-⚠️ IMPORTANT: You must enable `strict` mode in your `tsconfig.json`. This is a best practice for all TypeScript projects.
-
-```ts
-// tsconfig.json
-{
-  // ...
-  "compilerOptions": {
-    // ...
-    "strict": true
-  }
-}
-```
-
-#### TypeScript requirements
-
-- Zod 3.x requires TypeScript 4.1+
-- Zod 2.x requires TypeScript 3.7+
-- Zod 1.x requires TypeScript 3.3+
-
-# Ecosystem
+### Ecosystem
 
 There are a growing number of tools that are built atop or support Zod natively! If you've built a tool or library on top of Zod, tell me about it [on Twitter](https://twitter.com/colinhacks) or [start a Discussion](https://github.com/colinhacks/zod/discussions). I'll add it below and tweet it out.
 
@@ -284,8 +267,8 @@ There are a growing number of tools that are built atop or support Zod natively!
 - [`zod-endpoints`](https://github.com/flock-community/zod-endpoints): Contract-first strictly typed endpoints with Zod. OpenAPI compatible.
 - [`express-zod-api`](https://github.com/RobinTail/express-zod-api): Build Express-based APIs with I/O schema validation and custom middlewares.
 - [`zod-to-json-schema`](https://github.com/StefanTerdell/zod-to-json-schema): Convert your Zod schemas into [JSON Schemas](https://json-schema.org/).
-- [`json-schema-to-zod`](https://github.com/StefanTerdell/json-schema-to-zod): Convert your [JSON Schemas](https://json-schema.org/) into Zod schemas. Use it live [here](https://StefanTerdell.github.io/json-schema-to-zod-react/).
-- [`json-to-zod`](https://github.com/rsinohara/json-to-zod): Convert JSON objects into Zod schemas. Use it live [here](https://rsinohara.github.io/json-to-zod-react/).
+- [`json-schema-to-zod`](https://github.com/StefanTerdell/json-schema-to-zod): Convert your [JSON Schemas](https://json-schema.org/) into Zod schemas. [Live demo](https://StefanTerdell.github.io/json-schema-to-zod-react/).
+- [`json-to-zod`](https://github.com/rsinohara/json-to-zod): Convert JSON objects into Zod schemas. [Live demo](https://rsinohara.github.io/json-to-zod-react/).
 - [`zod-dto`](https://github.com/kbkk/abitia/tree/master/packages/zod-dto): Generate Nest.js DTOs from a Zod schema.
 - [`soly`](https://github.com/mdbetancourt/soly): Create CLI applications with zod.
 - [`graphql-codegen-typescript-validation-schema`](https://github.com/Code-Hex/graphql-codegen-typescript-validation-schema): GraphQL Code Generator plugin to generate form validation schema from your GraphQL schema
@@ -297,13 +280,40 @@ There are a growing number of tools that are built atop or support Zod natively!
 - [`prisma-trpc-generator`](https://github.com/omar-dulaimi/prisma-trpc-generator): Emit fully implemented tRPC routers and their validation schemas using Zod.
 - [`nestjs-graphql-zod`](https://github.com/incetarik/nestjs-graphql-zod): Generates NestJS GraphQL model classes from Zod schemas dynamically and provides GraphQL method decorators working with Zod schemas.
 
-### Form integrations
+#### Form integrations
 
 - [`react-hook-form`](https://github.com/react-hook-form/resolvers#zod): A first-party Zod resolver for React Hook Form
 - [`zod-formik-adapter`](https://github.com/robertLichtnow/zod-formik-adapter): A community-maintained Formik adapter for Zod
 - [`react-zorm`](https://github.com/esamattis/react-zorm): Standalone `<form>` generation and validation for React using Zod
 
-# Basic usage
+## Installation
+
+To install Zod v3:
+
+```sh
+npm install zod
+```
+
+⚠️ IMPORTANT: You must enable `strict` mode in your `tsconfig.json`. This is a best practice for all TypeScript projects.
+
+```ts
+// tsconfig.json
+{
+  // ...
+  "compilerOptions": {
+    // ...
+    "strict": true
+  }
+}
+```
+
+> **TypeScript requirements**
+>
+> - Zod 3.x requires TypeScript 4.1+
+> - Zod 2.x requires TypeScript 3.7+
+> - Zod 1.x requires TypeScript 3.3+
+
+## Basic usage
 
 Creating a simple string schema
 
@@ -338,8 +348,6 @@ type User = z.infer<typeof User>;
 // { username: string }
 ```
 
-# Defining schemas
-
 ## Primitives
 
 ```ts
@@ -403,9 +411,7 @@ z.string().nonempty({ message: "Can't be empty" });
 
 > Check out [validator.js](https://github.com/validatorjs/validator.js) for a bunch of other useful string validation functions.
 
-#### Custom error messages
-
-You can customize certain errors when creating a string schema.
+You can customize some common errors messages when creating a string schema.
 
 ```ts
 const name = z.string({
@@ -551,7 +557,7 @@ FishEnum.options; // ["Salmon", "Tuna", "Trout"]);
 
 ## Native enums
 
-Zod enums are the recommended approach to defining and validating enums. But if you need to validate against an enum from a third-party library (or you don't want to rewrite your existing enums) you can use `z.nativeEnum()` .
+Zod enums are the recommended approach to defining and validating enums. But if you need to validate against an enum from a third-party library (or you don't want to rewrite your existing enums) you can use `z.nativeEnum()`.
 
 **Numeric enums**
 
@@ -619,7 +625,7 @@ FruitEnum.enum.Apple; // "apple"
 
 ## Optionals
 
-You can make any schema optional with `z.optional()`:
+You can make any schema optional with `z.optional()`. This wraps the schema in a `ZodOptional` instance and returns the result.
 
 ```ts
 const schema = z.optional(z.string());
@@ -628,7 +634,7 @@ schema.parse(undefined); // => returns undefined
 type A = z.infer<typeof schema>; // string | undefined
 ```
 
-You can make an existing schema optional with the `.optional()` method:
+For convenience, you can also call the `.optional()` method on an existing schema.
 
 ```ts
 const user = z.object({
@@ -637,7 +643,7 @@ const user = z.object({
 type C = z.infer<typeof user>; // { username?: string | undefined };
 ```
 
-#### `.unwrap`
+You can extract the wrapped schema from a `ZodOptional` instance with `.unwrap()`.
 
 ```ts
 const stringSchema = z.string();
@@ -647,7 +653,7 @@ optionalString.unwrap() === stringSchema; // true
 
 ## Nullables
 
-Similarly, you can create nullable types like so:
+Similarly, you can create nullable types with `z.nullable()`.
 
 ```ts
 const nullableString = z.nullable(z.string());
@@ -655,14 +661,14 @@ nullableString.parse("asdf"); // => "asdf"
 nullableString.parse(null); // => null
 ```
 
-You can make an existing schema nullable with the `nullable` method:
+Or use the `.nullable()` method.
 
 ```ts
 const E = z.string().nullable(); // equivalent to D
 type E = z.infer<typeof E>; // string | null
 ```
 
-#### `.unwrap`
+Extract the inner schema with `.unwrap()`.
 
 ```ts
 const stringSchema = z.string();
@@ -818,7 +824,7 @@ const deepPartialUser = user.deepPartial();
 
 > Important limitation: deep partials only work as expected in hierarchies of objects, arrays, and tuples.
 
-#### Unrecognized keys
+### `.passthrough`
 
 By default Zod objects schemas strip out unrecognized keys during parsing.
 
@@ -835,8 +841,6 @@ person.parse({
 // extraKey has been stripped
 ```
 
-### `.passthrough`
-
 Instead, if you want to pass through unknown keys, use `.passthrough()` .
 
 ```ts
@@ -849,7 +853,7 @@ person.passthrough().parse({
 
 ### `.strict`
 
-You can _disallow_ unknown keys with `.strict()` . If there are any unknown keys in the input, Zod will throw an error.
+By default Zod objects schemas strip out unrecognized keys during parsing. You can _disallow_ unknown keys with `.strict()` . If there are any unknown keys in the input, Zod will throw an error.
 
 ```ts
 const person = z
@@ -986,7 +990,7 @@ For convenience, you can also use the `.or` method:
 const stringOrNumber = z.string().or(z.number());
 ```
 
-### Discriminated unions
+## Discriminated unions
 
 If the union consists of object schemas all identifiable by a common property, it is possible to use
 the `z.discriminatedUnion` method.
@@ -1032,7 +1036,7 @@ userStore["77d2586b-9e8e-4ecf-8b21-ea7e0530eadd"] = {
 }; // TypeError
 ```
 
-#### A note on numerical keys
+**A note on numerical keys**
 
 You may have expected `z.record()` to accept two arguments, one for the keys and one for the values. After all, TypeScript's built-in Record type does: `Record<KeyType, ValueType>` . Otherwise, how do you represent the TypeScript type `Record<number, any>` in Zod?
 
@@ -1049,9 +1053,7 @@ for (const key in testMap) {
 // prints: `1: string`
 ```
 
-As you can see, JavaScript automatically casts all object keys to strings under the hood.
-
-Since Zod is trying to bridge the gap between static and runtime types, it doesn't make sense to provide a way of creating a record schema with numerical keys, since there's no such thing as a numerical key in runtime JavaScript.
+As you can see, JavaScript automatically casts all object keys to strings under the hood. Since Zod is trying to bridge the gap between static and runtime types, it doesn't make sense to provide a way of creating a record schema with numerical keys, since there's no such thing as a numerical key in runtime JavaScript.
 
 ## Maps
 
@@ -1070,7 +1072,7 @@ type NumberSet = z.infer<typeof numberSet>;
 // type NumberSet = Set<number>
 ```
 
-### `.nonempty/.min/.max/.size`
+Set schemas can be further contrainted with the following utility methods.
 
 ```ts
 z.set(z.string()).nonempty(); // must contain at least one item
@@ -1081,8 +1083,6 @@ z.set(z.string()).size(5); // must contain 5 items exactly
 
 ## Intersections
 
-<!-- > ⚠️ Intersections are deprecated. If you are trying to merge objects, use the `.merge` method instead. -->
-
 Intersections are useful for creating "logical AND" types. This is useful for intersecting two object types.
 
 ```ts
@@ -1184,7 +1184,7 @@ const Category: z.ZodType<Category> = BaseCategory.merge(
 );
 ``` -->
 
-#### JSON type
+### JSON type
 
 If you want to validate any JSON value, you can use the snippet below.
 
@@ -1201,7 +1201,7 @@ jsonSchema.parse(data);
 
 Thanks to [ggoodman](https://github.com/ggoodman) for suggesting this.
 
-#### Cyclical objects
+### Cyclical objects
 
 Despite supporting recursive schemas, passing cyclical data into Zod will cause an infinite loop.
 
@@ -1265,7 +1265,7 @@ type myFunction = z.infer<typeof myFunction>;
 // => ()=>unknown
 ```
 
-**Define inputs and output**
+Define inputs and outputs.
 
 ```ts
 const myFunction = z
@@ -1276,24 +1276,6 @@ type myFunction = z.infer<typeof myFunction>;
 // => (arg0: string, arg1: number)=>boolean
 ```
 
-**Extract the input and output schemas**
-You can extract the parameters and return type of a function schema.
-
-```ts
-myFunction.parameters();
-// => ZodTuple<[ZodString, ZodNumber]>
-
-myFunction.returnType();
-// => ZodBoolean
-```
-
-<!-- `z.function()` accepts two arguments:
-
-* `args: ZodTuple` The first argument is a tuple (created with `z.tuple([...])` and defines the schema of the arguments to your function. If the function doesn't accept arguments, you can pass an empty tuple (`z.tuple([])`).
-* `returnType: any Zod schema` The second argument is the function's return type. This can be any Zod schema. -->
-
-> You can use the special `z.void()` option if your function doesn't return anything. This will let Zod properly infer the type of void-returning functions. (Void-returning functions actually return undefined.)
-
 <!--
 
 ``` ts
@@ -1322,7 +1304,9 @@ trimmedLength("sandwich"); // => 8
 trimmedLength(" asdf "); // => 4
 ```
 
-If you only care about validating inputs, that's fine:
+If you only care about validating inputs, just don't call the `.returns()` method. The output type will be inferred from the implementation.
+
+> You can use the special `z.void()` option if your function doesn't return anything. This will let Zod properly infer the type of void-returning functions. (Void-returning functions actually return undefined.)
 
 ```ts
 const myFunction = z
@@ -1334,6 +1318,21 @@ const myFunction = z
 myFunction; // (arg: string)=>number[]
 ```
 
+Extract the input and output schemas from a function schema.
+
+```ts
+myFunction.parameters();
+// => ZodTuple<[ZodString, ZodNumber]>
+
+myFunction.returnType();
+// => ZodBoolean
+```
+
+<!-- `z.function()` accepts two arguments:
+
+* `args: ZodTuple` The first argument is a tuple (created with `z.tuple([...])` and defines the schema of the arguments to your function. If the function doesn't accept arguments, you can pass an empty tuple (`z.tuple([])`).
+* `returnType: any Zod schema` The second argument is the function's return type. This can be any Zod schema. -->
+
 ## Preprocess
 
 Typically Zod operates under a "parse then transform" paradigm. Zod validates the input first, then passes it through a chain of transformation functions. (For more information about transforms, read the [.transform docs](#transform).)
@@ -1346,7 +1345,7 @@ const castToString = z.preprocess((val) => String(val), z.string());
 
 This returns a `ZodEffects` instance. `ZodEffects` is a wrapper class that contains all logic pertaining to preprocessing, refinements, and transforms.
 
-# ZodType: methods and properties
+## Schema methods
 
 All Zod schemas contain certain methods.
 
@@ -1371,8 +1370,11 @@ stringSchema.parse(12); // throws Error('Non-string type: number');
 If you use asynchronous [refinements](#refine) or [transforms](#transform) (more on those later), you'll need to use `.parseAsync`
 
 ```ts
-const stringSchema = z.string().refine(async (val) => val.length > 20);
-const value = await stringSchema.parseAsync("hello"); // => hello
+const stringSchema1 = z.string().refine(async (val) => val.length < 20);
+const value1 = await stringSchema.parseAsync("hello"); // => hello
+
+const stringSchema2 = z.string().refine(async (val) => val.length > 20);
+const value2 = await stringSchema.parseAsync("hello"); // => throws
 ```
 
 ### `.safeParse`
@@ -1607,27 +1609,6 @@ stringToNumber.parse("string"); // => 6
 
 > ⚠️ Transform functions must not throw. Make sure to use refinements before the transform or addIssue within the transform to make sure the input can be parsed by the transform.
 
-#### Validating during transform
-
-Similar to `superRefine`, `transform` can optionally take a `ctx`. This allows you to simultaneously
-validate and transform the value, which can be simpler than chaining `refine` and `validate`. 
-When calling `ctx.addIssue` make sure to still return a value of the correct type otherwise the inferred type will include `undefined`.
-
-```ts
-const Strings = z
-  .string()
-  .transform((val, ctx) => {
-    const parsed = parseInt(val);
-    if (isNaN(parsed)) {
-      ctx.addIssue({
-        code: z.ZodIssueCode.custom,
-        message: "Not a number",
-      });
-    }
-    return parsed;
-  });
-```
-
 #### Chaining order
 
 Note that `stringToNumber` above is an instance of the `ZodEffects` subclass. It is NOT an instance of `ZodString`. If you want to use the built-in methods of `ZodString` (e.g. `.email()`) you must apply those methods _before_ any transforms.
@@ -1641,14 +1622,33 @@ const emailToDomain = z
 emailToDomain.parse("colinhacks@example.com"); // => example.com
 ```
 
+#### Validating during transform
+
+Similar to `superRefine`, `transform` can optionally take a `ctx`. This allows you to simultaneously validate and transform the value, which can be simpler than chaining `refine` and `validate`. When calling `ctx.addIssue` make sure to still return a value of the correct type otherwise the inferred type will include `undefined`.
+
+```ts
+const Strings = z.string().transform((val, ctx) => {
+  const parsed = parseInt(val);
+  if (isNaN(parsed)) {
+    ctx.addIssue({
+      code: z.ZodIssueCode.custom,
+      message: "Not a number",
+    });
+  }
+  return parsed;
+});
+```
+
 #### Relationship to refinements
 
-Transforms and refinements can be interleaved:
+Transforms and refinements can be interleaved. These will be executed in the order they are declared.
 
 ```ts
 z.string()
-  .transform((val) => val.length)
-  .refine((val) => val > 25);
+  .transform((val) => val.toUpperCase())
+  .refine((val) => val.length > 15)
+  .transform((val) => `Hello ${val}`)
+  .refine((val) => val.indexOf("!") === -1);
 ```
 
 #### Async transforms
@@ -1710,7 +1710,7 @@ z.nullable(z.string());
 
 ### `.nullish`
 
-A convenience method that returns a "nullish" version of a schema. Nullish schemas will accept both `undefined` and `null`. Read more about the concept of "nullish" [here](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#nullish-coalescing).
+A convenience method that returns a "nullish" version of a schema. Nullish schemas will accept both `undefined` and `null`. Read more about the concept of "nullish" [in the TypeScript 3.7 release notes](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#nullish-coalescing).
 
 ```ts
 const nullishString = z.string().nullish(); // string | null | undefined
@@ -1763,9 +1763,9 @@ z.object({ name: z.string() }).and(z.object({ age: z.number() })); // { name: st
 z.intersection(z.object({ name: z.string() }), z.object({ age: z.number() }));
 ```
 
-# Guides and concepts
+## Guides and concepts
 
-## Type inference
+### Type inference
 
 You can extract the TypeScript type of any schema with `z.infer<typeof mySchema>` .
 
@@ -1777,7 +1777,7 @@ const u: A = 12; // TypeError
 const u: A = "asdf"; // compiles
 ```
 
-#### What about transforms?
+**What about transforms?**
 
 In reality each Zod schema internally tracks **two** types: an input and an output. For most schemas (e.g. `z.string()`) these two are the same. But once you add transforms into the mix, these two values can diverge. For instance `z.string().transform(val => val.length)` has an input of `string` and an output of `number`.
 
@@ -1794,7 +1794,7 @@ type output = z.output<typeof stringToNumber>; // number
 type inferred = z.infer<typeof stringToNumber>; // number
 ```
 
-## Writing generic functions
+### Writing generic functions
 
 When attempting to write a functions that accepts a Zod schemas as an input, it's common to try something like this:
 
@@ -1828,13 +1828,13 @@ const arg = makeSchemaOptional(z.string());
 arg.unwrap(); // ZodString
 ```
 
-### Restricting valid schemas
+#### Constraining allowable inputs
 
 The `ZodType` class has three generic parameters.
 
 ```ts
 class ZodType<
-  Output,
+  Output = any,
   Def extends ZodTypeDef = ZodTypeDef,
   Input = Output
 > { ... }
@@ -1854,12 +1854,16 @@ makeSchemaOptional(z.number());
 // Error: 'ZodNumber' is not assignable to parameter of type 'ZodType<string, ZodTypeDef, string>'
 ```
 
-## Error handling
+### Error handling
 
 Zod provides a subclass of Error called `ZodError`. ZodErrors contain an `issues` array containing detailed information about the validation problems.
 
 ```ts
-const data = z.object({ name: z.string() }).safeParse({ name: 12 });
+const data = z
+  .object({
+    name: z.string(),
+  })
+  .safeParse({ name: 12 });
 
 if (!data.success) {
   data.error.issues;
@@ -1875,20 +1879,31 @@ if (!data.success) {
 }
 ```
 
-#### Error formatting
+> For detailed information about the possible error codes and how to customize error messages, check out the dedicated error handling guide: [ERROR_HANDLING.md](ERROR_HANDLING.md)
+
+### Error formatting
 
 You can use the `.format()` method to convert this error into a nested object.
 
 ```ts
-data.error.format();
-/* {
-  name: { _errors: [ 'Expected string, received number' ] }
-} */
-```
+const data = z
+  .object({
+    name: z.string(),
+  })
+  .safeParse({ name: 12 });
 
-For detailed information about the possible error codes and how to customize error messages, check out the dedicated error handling guide: [ERROR_HANDLING.md](ERROR_HANDLING.md)
+if (!data.success) {
+  const formatted = data.error.format();
+  /* {
+    name: { _errors: [ 'Expected string, received number' ] }
+  } */
 
-# Comparison
+  formatted.name?._errors;
+  // => ["Expected string, received number"]
+}
+```
+
+## Comparison
 
 There are a handful of other widely-used validation libraries, but all of them have certain design limitations that make for a non-ideal developer experience.
 
@@ -1940,20 +1955,18 @@ Branded -->
 * Missing support for parsing cyclical data (maybe)
 * Missing error customization -->
 
-#### Joi
+**Joi**
 
 [https://github.com/hapijs/joi](https://github.com/hapijs/joi)
 
 Doesn't support static type inference 😕
 
-#### Yup
+**Yup**
 
 [https://github.com/jquense/yup](https://github.com/jquense/yup)
 
 Yup is a full-featured library that was implemented first in vanilla JS, and later rewritten in TypeScript.
 
-Differences
-
 - Supports casting and transforms
 - All object fields are optional by default
 - Missing object methods: (partial, deepPartial)
@@ -1964,7 +1977,7 @@ Differences
 
 <!-- ¹Yup has a strange interpretation of the word `required`. Instead of meaning "not undefined", Yup uses it to mean "not empty". So `yup.string().required()` will not accept an empty string, and `yup.array(yup.string()).required()` will not accept an empty array. Instead, Yup us Zod arrays there is a dedicated `.nonempty()` method to indicate this, or you can implement it with a custom refinement. -->
 
-#### io-ts
+**io-ts**
 
 [https://github.com/gcanti/io-ts](https://github.com/gcanti/io-ts)
 
@@ -2015,7 +2028,7 @@ This more declarative API makes schema definitions vastly more concise.
 - Missing promise schemas
 - Missing function schemas
 
-#### Runtypes
+**Runtypes**
 
 [https://github.com/pelotom/runtypes](https://github.com/pelotom/runtypes)
 
@@ -2028,7 +2041,7 @@ Good type inference support, but limited options for object type masking (no `.p
 - Missing promise schemas
 - Missing error customization
 
-#### Ow
+**Ow**
 
 [https://github.com/sindresorhus/ow](https://github.com/sindresorhus/ow)
 
@@ -2036,6 +2049,6 @@ Ow is focused on function input validation. It's a library that makes it easy to
 
 If you want to validate function inputs, use function schemas in Zod! It's a much simpler approach that lets you reuse a function type declaration without repeating yourself (namely, copy-pasting a bunch of ow assertions at the beginning of every function). Also Zod lets you validate your return types as well, so you can be sure there won't be any unexpected data passed downstream.
 
-# Changelog
+## Changelog
 
 View the changelog at [CHANGELOG.md](CHANGELOG.md)
diff --git a/README_ZH.md b/README_ZH.md
index 0ca2082c0..0fafdb4e7 100644
--- a/README_ZH.md
+++ b/README_ZH.md
@@ -1,42 +1,37 @@
 <p align="center">
-  <img src="logo.svg" width="200px" align="center" />
+  <img src="logo.svg" width="200px" align="center" alt="Zod logo" />
   <h1 align="center">Zod</h1>
+  <p align="center">TypeScript-first schema validation with static type inference
+  <br/>
+  <a href="https://zod.dev">https://zod.dev</a></p>
 </p>
+<br/>
 <p align="center">
+<a href="https://github.com/colinhacks/zod/actions?query=branch%3Amaster"><img src="https://github.com/colinhacks/zod/actions/workflows/test.yml/badge.svg?event=push&branch=master" alt="Zod CI status" /></a>
 <a href="https://twitter.com/colinhacks" rel="nofollow"><img src="https://img.shields.io/badge/created%20by-@colinhacks-4BBAAB.svg" alt="Created by Colin McDonnell"></a>
 <a href="https://opensource.org/licenses/MIT" rel="nofollow"><img src="https://img.shields.io/github/license/colinhacks/zod" alt="License"></a>
 <a href="https://www.npmjs.com/package/zod" rel="nofollow"><img src="https://img.shields.io/npm/dw/zod.svg" alt="npm"></a>
 <a href="https://www.npmjs.com/package/zod" rel="nofollow"><img src="https://img.shields.io/github/stars/colinhacks/zod" alt="stars"></a>
-<a href="./src/__tests__" rel="nofollow"><img src="./coverage.svg" alt="coverage"></a>
-
-</p>
-<p align="center">
-⭐️ smash that star button ⭐️
+<a href="https://discord.gg/KaSRdyX2vc" rel="nofollow"><img src="https://img.shields.io/discord/893487829802418277?label=Discord&logo=discord&logoColor=white" alt="discord server"></a>
 </p>
 
-> 如果你喜欢 Zod，你会喜欢我的新库 [tRPC](https://trpc.io). 这是一种建立端到端类型安全 API 的方法，无需 GraphQL 或代码生成 请在[trpc.io](https://trpc.io)上查看他.
+<div align="center">
+  <a href="https://zod.dev">Documentation</a>
+  <span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>
+  <a href="https://discord.gg/RcG33DQJdf">Discord</a>
+  <span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>
+  <a href="https://www.npmjs.com/package/zod">NPM</a>
+  <span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>
+  <a href="https://github.com/colinhacks/zod/issues/new">Issues</a>
+  <span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>
+  <a href="https://twitter.com/colinhacks">@colinhacks</a>
+  <span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>
+  <a href="https://trpc.io">tRPC</a>
+  <br />
+</div>
 
 <br/>
-
-## 二零二一年五月十七日: Zod v3 已经进入稳定版!
-
-查看 [迁移指南](https://github.com/colinhacks/zod/blob/master/MIGRATION.md) 进行升级.
-
-以前的版本:
-
-- [`Zod 1 docs`](https://github.com/colinhacks/zod/tree/v1)
-- [`Zod 2 docs`](https://github.com/colinhacks/zod/tree/v2)
-
-#### 新功能
-
-- **更容易的引入**: 你现在可以像`import { z } from 'zod';`那样导入 Zod，而不是使用`import * as`语法。
-- **结构化的错误消息**. 对 ZodError 使用`.format()`方法，将错误转换为强类型的嵌套对象: [format method](#error-formatting)
-- **更容易的联合类型**. 使用 ZodType（所有 Zod 模式的基类）的`or`方法，可以轻松创建联合类型，如 `z.string().or(z.number())`
-- **更容易的交叉类型**. 对 ZodType（所有 Zod 模式的基类）使用`and`方法，可以轻松创建交叉类型
-- **全局错误定制**. 使用`z.setErrorMap(myErrorMap)`来全面定制 Zod 产生的错误信息: [setErrorMap](ERROR_HANDLING.md#customizing-errors-with-zoderrormap)
-- **Maps and sets**. Zod 现在支持 [`Map`](#maps) 和 [`Set`](#sets) 模式。
-- **可选的和可忽略的解包**. ZodOptional 和 ZodNullable 现在有一个`.unwrap()`方法来检索它们所包裹的模式。
-- **A new implementation of transformers**. 请参阅[迁移指南](https://github.com/colinhacks/zod/blob/master/MIGRATION.md)部分以了解语法的变化。
+<br/>
 
 # 內容
 
diff --git a/_redirects b/_redirects
new file mode 100644
index 000000000..63b560201
--- /dev/null
+++ b/_redirects
@@ -0,0 +1,2 @@
+/robots.txt   /   404
+/*            /   200
diff --git a/deno/lib/__tests__/default.test.ts b/deno/lib/__tests__/default.test.ts
index db55629f7..84a02eb19 100644
--- a/deno/lib/__tests__/default.test.ts
+++ b/deno/lib/__tests__/default.test.ts
@@ -106,3 +106,24 @@ test("chained defaults", () => {
 test("factory", () => {
   z.ZodDefault.create(z.string()).parse(undefined);
 });
+
+test("native enum", () => {
+  enum Fruits {
+    apple = "apple",
+    orange = "orange",
+  }
+
+  const schema = z.object({
+    fruit: z.nativeEnum(Fruits).default(Fruits.apple),
+  });
+
+  expect(schema.parse({})).toEqual({ fruit: Fruits.apple });
+});
+
+test("enum", () => {
+  const schema = z.object({
+    fruit: z.enum(["apple", "orange"]).default("apple"),
+  });
+
+  expect(schema.parse({})).toEqual({ fruit: "apple" });
+});
diff --git a/deno/lib/__tests__/instanceof.test.ts b/deno/lib/__tests__/instanceof.test.ts
index 7d4b76aee..dda1da47e 100644
--- a/deno/lib/__tests__/instanceof.test.ts
+++ b/deno/lib/__tests__/instanceof.test.ts
@@ -26,3 +26,9 @@ test("instanceof", async () => {
   const f1: util.AssertEqual<Test, z.infer<typeof TestSchema>> = true;
   expect(f1).toBeTruthy();
 });
+
+test("instanceof fatal", () => {
+  const schema = z.instanceof(Date).refine((d) => d.toString());
+  const res = schema.safeParse(null);
+  expect(res.success).toBe(false);
+});
diff --git a/deno/lib/__tests__/recursive.test.ts b/deno/lib/__tests__/recursive.test.ts
index d184c2391..ff472c112 100644
--- a/deno/lib/__tests__/recursive.test.ts
+++ b/deno/lib/__tests__/recursive.test.ts
@@ -1,7 +1,6 @@
 // @ts-ignore TS6133
 import { expect } from "https://deno.land/x/expect@v0.2.6/mod.ts";
 const test = Deno.test;
-
 import { z } from "../index.ts";
 
 interface Category {
@@ -50,6 +49,36 @@ test("recursion with z.lazy", () => {
 test("schema getter", () => {
   z.lazy(() => z.string()).schema.parse("asdf");
 });
+
+type LinkedList = null | { value: number; next: LinkedList };
+
+const linkedListExample = {
+  value: 1,
+  next: {
+    value: 2,
+    next: {
+      value: 3,
+      next: {
+        value: 4,
+        next: null,
+      },
+    },
+  },
+};
+
+test("recursion involving union type", () => {
+  const LinkedListSchema: z.ZodType<LinkedList> = z.lazy(() =>
+    z.union([
+      z.null(),
+      z.object({
+        value: z.number(),
+        next: LinkedListSchema,
+      }),
+    ])
+  );
+  LinkedListSchema.parse(linkedListExample);
+});
+
 // interface A {
 //   val: number;
 //   b: B;
diff --git a/deno/lib/declarations.d.ts b/deno/lib/declarations.d.ts
new file mode 100644
index 000000000..e8586a7df
--- /dev/null
+++ b/deno/lib/declarations.d.ts
@@ -0,0 +1,20 @@
+interface Body<T> {
+  readonly body: ReadableStream<Uint8Array> | null;
+  readonly bodyUsed: boolean;
+  arrayBuffer(): Promise<ArrayBuffer>;
+  blob(): Promise<Blob>;
+  formData(): Promise<FormData>;
+  json(): Promise<T>;
+  text(): Promise<string>;
+}
+
+interface Response<T> extends Body<T> {
+  readonly headers: Headers;
+  readonly ok: boolean;
+  readonly redirected: boolean;
+  readonly status: number;
+  readonly statusText: string;
+  readonly type: ResponseType;
+  readonly url: string;
+  clone(): Response<T>;
+}
diff --git a/deno/lib/types.ts b/deno/lib/types.ts
index bb75caa81..984d51993 100644
--- a/deno/lib/types.ts
+++ b/deno/lib/types.ts
@@ -634,8 +634,8 @@ export class ZodString extends ZodType<string, ZodStringDef> {
   }
 
   /**
-   * Deprecated.
-   * Use z.string().min(1) instead.
+   * @deprecated Use z.string().min(1) instead.
+   * @see {@link ZodString.min}
    */
   nonempty = (message?: errorUtil.ErrMessage) =>
     this.min(1, errorUtil.errToObj(message));
@@ -3576,9 +3576,17 @@ export class ZodNaN extends ZodType<number, ZodNaNDef> {
 
 export const custom = <T>(
   check?: (data: unknown) => any,
-  params?: Parameters<ZodTypeAny["refine"]>[1]
+  params: Parameters<ZodTypeAny["refine"]>[1] = {},
+  fatal?: boolean
 ): ZodType<T> => {
-  if (check) return ZodAny.create().refine(check, params);
+  if (check)
+    return ZodAny.create().superRefine((data, ctx) => {
+      if (!check(data)) {
+        const p = typeof params === "function" ? params(data) : params;
+        const p2 = typeof p === "string" ? { message: p } : p;
+        ctx.addIssue({ code: "custom", ...p2, fatal });
+      }
+    });
   return ZodAny.create();
 };
 
@@ -3659,7 +3667,7 @@ const instanceOfType = <T extends new (...args: any[]) => any>(
   params: Parameters<ZodTypeAny["refine"]>[1] = {
     message: `Input not instance of ${cls.name}`,
   }
-) => custom<InstanceType<T>>((data) => data instanceof cls, params);
+) => custom<InstanceType<T>>((data) => data instanceof cls, params, true);
 
 const stringType = ZodString.create;
 const numberType = ZodNumber.create;
diff --git a/docs/README.md b/docs/README.md
deleted file mode 100644
index a92ca0c54..000000000
--- a/docs/README.md
+++ /dev/null
@@ -1,1906 +0,0 @@
-<p align="center">
-  <img src="logo.svg" width="200px" align="center" />
-  <h1 align="center">Zod</h1>
-</p>
-<p align="center">
-<a href="https://twitter.com/colinhacks" rel="nofollow"><img src="https://img.shields.io/badge/created%20by-@colinhacks-4BBAAB.svg" alt="Created by Colin McDonnell"></a>
-<a href="https://opensource.org/licenses/MIT" rel="nofollow"><img src="https://img.shields.io/github/license/colinhacks/zod" alt="License"></a>
-<a href="https://www.npmjs.com/package/zod" rel="nofollow"><img src="https://img.shields.io/npm/dw/zod.svg" alt="npm"></a>
-<a href="https://www.npmjs.com/package/zod" rel="nofollow"><img src="https://img.shields.io/github/stars/colinhacks/zod" alt="stars"></a>
-<a href="./src/__tests__" rel="nofollow"><img src="./coverage.svg" alt="coverage"></a>
-<a href="https://discord.gg/KaSRdyX2vc" rel="nofollow"><img src="https://img.shields.io/discord/893487829802418277?label=Discord&logo=discord&logoColor=white" alt="discord server"></a>
-</p>
-
-<div align="center">
-  <a href="https://discord.gg/RcG33DQJdf">Discord</a>
-  <span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>
-  <a href="https://www.npmjs.com/package/zod">NPM</a>
-  <span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>
-  <a href="https://github.com/colinhacks/zod/issues/new">Issues</a>
-  <span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>
-  <a href="https://twitter.com/colinhacks">@colinhacks</a>
-  <span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>
-  <a href="https://trpc.io">tRPC</a>
-  <br />
-</div>
-
-<br/>
-
-These docs have been translated into [Chinese](./README_ZH.md).
-
-# Table of contents
-
-The full documentation is available both on the [official documentation site](https://zod.js.org/) (recommended) and in `README.md`.
-
-### Go to [zod.js.org](https://zod.js.org) >>
-
-- [What is Zod](#what-is-zod)
-- [Installation](#installation)
-- [Ecosystem](#ecosystem)
-- [Basic usage](#basic-usage)
-- [Defining schemas](#defining-schemas)
-  - [Primitives](#primitives)
-  - [Literals](#literals)
-  - [Strings](#strings)
-  - [Numbers](#numbers)
-  - [NaNs](#nans)
-  - [Booleans](#booleans)
-  - [Dates](#dates)
-  - [Zod enums](#zod-enums)
-  - [Native enums](#native-enums)
-  - [Optionals](#optionals)
-  - [Nullables](#nullables)
-  - [Objects](#objects)
-    - [.shape](#shape)
-    - [.extend](#extend)
-    - [.merge](#merge)
-    - [.pick/.omit](#pickomit)
-    - [.partial](#partial)
-    - [.deepPartial](#deepPartial)
-    - [.passthrough](#passthrough)
-    - [.strict](#strict)
-    - [.strip](#strip)
-    - [.catchall](#catchall)
-  - [Arrays](#arrays)
-    - [.element](#element)
-    - [.nonempty](#nonempty)
-    - [.min/.max/.length](#minmaxlength)
-  - [Tuples](#tuples)
-  - [Records](#records)
-  - [Maps](#maps)
-  - [Sets](#sets)
-  - [Unions](#unions)
-    - [Discriminated Unions](#discriminated-unions)
-  - [Recursive types](#recursive-types)
-    - [JSON type](#json-type)
-    - [Cyclical data](#cyclical-objects)
-  - [Promises](#promises)
-  - [Instanceof](#instanceof)
-  - [Function schemas](#function-schemas)
-  - [Preprocess](#preprocess)
-- [Schema methods](#zodtype-methods-and-properties)
-  - [.parse](#parse)
-  - [.parseAsync](#parseasync)
-  - [.safeParse](#safeparse)
-  - [.safeParseAsync](#safeparseasync)
-  - [.refine](#refine)
-  - [.superRefine](#superRefine)
-  - [.transform](#transform)
-  - [.default](#default)
-  - [.optional](#optional)
-  - [.nullable](#nullable)
-  - [.nullish](#nullish)
-  - [.array](#array)
-  - [.promise](#promise)
-  - [.or](#or)
-  - [.and](#and)
-- [Type inference](#type-inference)
-- [Errors](#errors)
-- [Comparison](#comparison)
-  - [Joi](#joi)
-  - [Yup](#yup)
-  - [io-ts](#io-ts)
-  - [Runtypes](#runtypes)
-- [Changelog](#changelog)
-
-<!-- **Zod 2 is coming! Follow [@colinhacks](https://twitter.com/colinhacks) to stay updated and discuss the future of Zod.** -->
-
-# What is Zod
-
-Zod is a TypeScript-first schema declaration and validation library. I'm using the term "schema" to broadly refer to any data type, from a simple `string` to a complex nested object.
-
-Zod is designed to be as developer-friendly as possible. The goal is to eliminate duplicative type declarations. With Zod, you declare a validator _once_ and Zod will automatically infer the static TypeScript type. It's easy to compose simpler types into complex data structures.
-
-Some other great aspects:
-
-- Zero dependencies
-- Works in Node.js and browsers (including IE 11)
-- Tiny: 8kb minified + zipped
-- Immutable: methods (i.e. `.optional()`) return a new instance
-- Concise, chainable interface
-- Functional approach: [parse, don't validate](https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/)
-- Works with plain JavaScript too! You don't need to use TypeScript.
-
-# Sponsorship
-
-Sponsorship at any level is appreciated and encouraged. Zod is maintained by a solo developer ([hi!](https://twitter.com/colinhacks)). For individual developers, consider the [Cup of Coffee tier](https://github.com/sponsors/colinhacks). If you built a paid product using Zod, consider the [Startup tier](https://github.com/sponsors/colinhacks). You can learn more about the tiers at [github.com/sponsors/colinhacks](https://github.com/sponsors/colinhacks).
-
-### Sponsors
-
-<table>
-  <tr>
-   <td align="center">
-      <a href="https://deletype.com/">
-        <img src="https://avatars0.githubusercontent.com/u/15068039?s=200&v=4" width="100px;" alt="" />
-      </a>
-      <br>
-      <b>Deletype</b>
-      <br>
-      <a href="https://deletype.com/">deletype.com/</a>
-    </td>
-  <td align="center">
-      <a href="https://github.com/kevinsimper">
-        <img src="https://avatars1.githubusercontent.com/u/1126497?s=460&v=4" width="100px;" alt="" />
-      </a>
-      <br>
-      <b>Kevin Simper</b>
-      <br>
-      <a href="https://github.com/kevinsimper">@kevinsimper</a>
-    </td>
-    <td align="center">
-      <a href="https://twitter.com/flybayer">
-        <img src="https://avatars2.githubusercontent.com/u/8813276?s=460&u=4ff8beb9a67b173015c4b426a92d89cab960af1b&v=4" width="100px;" alt=""/>
-      </a>
-      <br>
-      <b>Brandon Bayer</b>
-      <br/>
-      <a href="https://twitter.com/flybayer">@flybayer</a>,
-      <span>creator of <a href="https://blitzjs.com">Blitz.js</a></span>
-      <br />
-    </td>
-
-  </tr>
-  <tr>
-    <td align="center">
-      <a href="https://www.bamboocreative.nz/">
-        <img src="https://avatars1.githubusercontent.com/u/41406870?s=460&v=4" width="100px;" alt="" />
-      </a>
-      <br>
-      <b>Bamboo Creative</b>
-      <br>
-      <a href="https://www.bamboocreative.nz/">bamboocreative.nz</a>
-    </td>
-    <td align="center">
-      <a href="https://github.com/jeremyBanks">
-        <img src="https://avatars.githubusercontent.com/u/18020?s=400&u=dba6c1402ae1746a276a5d256e01d68e774a0e9d&v=4" width="100px;" alt="" />
-      </a>
-      <br>
-      <b>Jeremy Banks</b>
-      <br>
-      <a href="https://github.com/jeremyBanks">github.com/jeremyBanks</a>
-    </td>
-     <td align="center">
-      <a href="https://marcatopartners.com/">
-        <img src="https://avatars.githubusercontent.com/u/84106192?s=200&v=4" width="100px;" alt="Marcato Partners" />
-      </a>
-      <br>
-      <b>Marcato Partners</b>
-      <br>
-      <a href="https://marcatopartners.com/">marcatopartners.com</a>
-    </td>
-  </tr>
-</table>
-
-_To get your name + Twitter + website here, sponsor Zod at the [Freelancer](https://github.com/sponsors/colinhacks) or [Consultancy](https://github.com/sponsors/colinhacks) tier._
-
-# Installation
-
-To install Zod v3:
-
-```sh
-npm install zod
-```
-
-⚠️ IMPORTANT: You must enable `strict` mode in your `tsconfig.json`. This is a best practice for all TypeScript projects.
-
-```ts
-// tsconfig.json
-{
-  // ...
-  "compilerOptions": {
-    // ...
-    "strict": true
-  }
-}
-```
-
-#### TypeScript requirements
-
-- Zod 3.x requires TypeScript 4.1+
-- Zod 2.x requires TypeScript 3.7+
-- Zod 1.x requires TypeScript 3.3+
-
-# Ecosystem
-
-There are a growing number of tools that are built atop or support Zod natively! If you've built a tool or library on top of Zod, tell me about it [on Twitter](https://twitter.com/colinhacks) or [start a Discussion](https://github.com/colinhacks/zod/discussions). I'll add it below and tweet it out.
-
-- [`tRPC`](https://github.com/trpc/trpc): Build end-to-end typesafe APIs without GraphQL.
-- [`ts-to-zod`](https://github.com/fabien0102/ts-to-zod): Convert TypeScript definitions into Zod schemas.
-- [`zod-to-ts`](https://github.com/sachinraja/zod-to-ts): Generate TypeScript definitions from Zod schemas.
-- [`@anatine/zod-openapi`](https://github.com/anatine/zod-plugins/tree/main/libs/zod-openapi): Converts a Zod schema to an OpenAPI v3.x `SchemaObject`.
-- [`@anatine/zod-mock`](https://github.com/anatine/zod-plugins/tree/main/libs/zod-mock): Generate mock data from a Zod schema. Powered by [faker.js](https://github.com/Marak/Faker.js).
-- [`@anatine/zod-nestjs`](https://github.com/anatine/zod-plugins/tree/main/libs/zod-nestjs): Helper methods for using Zod in a NestJS project.
-- [`zod-mocking`](https://github.com/dipasqualew/zod-mocking): Generate mock data from your Zod schemas.
-- [`zod-fast-check`](https://github.com/DavidTimms/zod-fast-check): Generate `fast-check` arbitraries from Zod schemas.
-- [`zod-endpoints`](https://github.com/flock-community/zod-endpoints): Contract-first strictly typed endpoints with Zod. OpenAPI compatible.
-- [`express-zod-api`](https://github.com/RobinTail/express-zod-api): Build Express-based APIs with I/O schema validation and custom middlewares.
-- [`zod-to-json-schema`](https://github.com/StefanTerdell/zod-to-json-schema): Convert your Zod schemas into [JSON Schemas](https://json-schema.org/).
-- [`json-schema-to-zod`](https://github.com/StefanTerdell/json-schema-to-zod): Convert your [JSON Schemas](https://json-schema.org/) into Zod schemas. Use it live [here](https://StefanTerdell.github.io/json-schema-to-zod-react/).
-- [`json-to-zod`](https://github.com/rsinohara/json-to-zod): Convert JSON objects into Zod schemas. Use it live [here](https://rsinohara.github.io/json-to-zod-react/).
-- [`zod-dto`](https://github.com/kbkk/abitia/tree/master/packages/zod-dto): Generate Nest.js DTOs from a Zod schema.
-- [`soly`](https://github.com/mdbetancourt/soly): Create CLI applications with zod.
-- [`graphql-codegen-typescript-validation-schema`](https://github.com/Code-Hex/graphql-codegen-typescript-validation-schema): GraphQL Code Generator plugin to generate form validation schema from your GraphQL schema
-- [`zod-prisma`](https://github.com/CarterGrimmeisen/zod-prisma): Generate Zod schemas from your Prisma schema.
-
-### Form integrations
-
-- [`react-hook-form`](https://github.com/react-hook-form/resolvers#zod): A first-party Zod resolver for React Hook Form
-- [`zod-formik-adapter`](https://github.com/robertLichtnow/zod-formik-adapter): A community-maintained Formik adapter for Zod
-
-# Basic usage
-
-Creating a simple string schema
-
-```ts
-import { z } from "zod";
-
-// creating a schema for strings
-const mySchema = z.string();
-
-// parsing
-mySchema.parse("tuna"); // => "tuna"
-mySchema.parse(12); // => throws ZodError
-
-// "safe" parsing (doesn't throw error if validation fails)
-mySchema.safeParse("tuna"); // => { success: true; data: "tuna" }
-mySchema.safeParse(12); // => { success: false; error: ZodError }
-```
-
-Creating an object schema
-
-```ts
-import { z } from "zod";
-
-const User = z.object({
-  username: z.string(),
-});
-
-User.parse({ username: "Ludwig" });
-
-// extract the inferred type
-type User = z.infer<typeof User>;
-// { username: string }
-```
-
-# Defining schemas
-
-## Primitives
-
-```ts
-import { z } from "zod";
-
-// primitive values
-z.string();
-z.number();
-z.bigint();
-z.boolean();
-z.date();
-
-// empty types
-z.undefined();
-z.null();
-z.void(); // accepts undefined
-
-// catch-all types
-// allows any value
-z.any();
-z.unknown();
-
-// never type
-// allows no values
-z.never();
-```
-
-## Literals
-
-```ts
-const tuna = z.literal("tuna");
-const twelve = z.literal(12);
-const tru = z.literal(true);
-
-// retrieve literal value
-tuna.value; // "tuna"
-```
-
-> Currently there is no support for Date or bigint literals in Zod. If you have a use case for this feature, please file an issue.
-
-## Strings
-
-Zod includes a handful of string-specific validations.
-
-```ts
-z.string().max(5);
-z.string().min(5);
-z.string().length(5);
-z.string().email();
-z.string().url();
-z.string().uuid();
-z.string().cuid();
-z.string().regex(regex);
-
-// deprecated, equivalent to .min(1)
-z.string().nonempty();
-
-// optional custom error message
-z.string().nonempty({ message: "Can't be empty" });
-```
-
-> Check out [validator.js](https://github.com/validatorjs/validator.js) for a bunch of other useful string validation functions.
-
-#### Custom error messages
-
-You can customize certain errors when creating a string schema.
-
-```ts
-const name = z.string({
-  required_error: "Name is required",
-  invalid_type_error: "Name must be a string",
-});
-```
-
-When using validation methods, you can pass in an additional argument to provide a custom error message.
-
-```ts
-z.string().min(5, { message: "Must be 5 or more characters long" });
-z.string().max(5, { message: "Must be 5 or fewer characters long" });
-z.string().length(5, { message: "Must be exactly 5 characters long" });
-z.string().email({ message: "Invalid email address" });
-z.string().url({ message: "Invalid url" });
-z.string().uuid({ message: "Invalid UUID" });
-```
-
-## Numbers
-
-You can customize certain error messages when creating a number schema.
-
-```ts
-const age = z.number({
-  required_error: "Age is required",
-  invalid_type_error: "Age must be a number",
-});
-```
-
-Zod includes a handful of number-specific validations.
-
-```ts
-z.number().gt(5);
-z.number().gte(5); // alias .min(5)
-z.number().lt(5);
-z.number().lte(5); // alias .max(5)
-
-z.number().int(); // value must be an integer
-
-z.number().positive(); //     > 0
-z.number().nonnegative(); //  >= 0
-z.number().negative(); //     < 0
-z.number().nonpositive(); //  <= 0
-
-z.number().multipleOf(5); // Evenly divisible by 5. Alias .step(5)
-```
-
-Optionally, you can pass in a second argument to provide a custom error message.
-
-```ts
-z.number().lte(5, { message: "this👏is👏too👏big" });
-```
-
-## NaNs
-
-You can customize certain error messages when creating a nan schema.
-
-```ts
-const isNaN = z.nan({
-  required_error: "isNaN is required",
-  invalid_type_error: "isNaN must be not a number",
-});
-```
-
-## Booleans
-
-You can customize certain error messages when creating a boolean schema.
-
-```ts
-const isActive = z.boolean({
-  required_error: "isActive is required",
-  invalid_type_error: "isActive must be a boolean",
-});
-```
-
-## Dates
-
-z.date() accepts a date, not a date string
-
-```ts
-z.date().safeParse(new Date()); // success: true
-z.date().safeParse("2022-01-12T00:00:00.000Z"); // success: false
-```
-
-To allow for dates or date strings, you can use preprocess
-
-```ts
-const dateSchema = z.preprocess((arg) => {
-  if (typeof arg == "string" || arg instanceof Date) return new Date(arg);
-}, z.date());
-type DateSchema = z.infer<typeof dateSchema>;
-// type DateSchema = Date
-
-dateSchema.safeParse(new Date("1/12/22")); // success: true
-dateSchema.safeParse("2022-01-12T00:00:00.000Z"); // success: true
-```
-
-## Zod enums
-
-```ts
-const FishEnum = z.enum(["Salmon", "Tuna", "Trout"]);
-type FishEnum = z.infer<typeof FishEnum>;
-// 'Salmon' | 'Tuna' | 'Trout'
-```
-
-`z.enum` is a Zod-native way to declare a schema with a fixed set of allowable _string_ values. Pass the array of values directly into `z.enum()`. Alternatively, use `as const` to define your enum values as a tuple of strings. See the [const assertion docs](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#const-assertions) for details.
-
-```ts
-const VALUES = ["Salmon", "Tuna", "Trout"] as const;
-const FishEnum = z.enum(VALUES);
-```
-
-This is not allowed, since Zod isn't able to infer the exact values of each elements.
-
-```ts
-const fish = ["Salmon", "Tuna", "Trout"];
-const FishEnum = z.enum(fish);
-```
-
-**Autocompletion**
-
-To get autocompletion with a Zod enum, use the `.enum` property of your schema:
-
-```ts
-FishEnum.enum.Salmon; // => autocompletes
-
-FishEnum.enum;
-/*
-=> {
-  Salmon: "Salmon",
-  Tuna: "Tuna",
-  Trout: "Trout",
-}
-*/
-```
-
-You can also retrieve the list of options as a tuple with the `.options` property:
-
-```ts
-FishEnum.options; // ["Salmon", "Tuna", "Trout"]);
-```
-
-## Native enums
-
-Zod enums are the recommended approach to defining and validating enums. But if you need to validate against an enum from a third-party library (or you don't want to rewrite your existing enums) you can use `z.nativeEnum()` .
-
-**Numeric enums**
-
-```ts
-enum Fruits {
-  Apple,
-  Banana,
-}
-
-const FruitEnum = z.nativeEnum(Fruits);
-type FruitEnum = z.infer<typeof FruitEnum>; // Fruits
-
-FruitEnum.parse(Fruits.Apple); // passes
-FruitEnum.parse(Fruits.Banana); // passes
-FruitEnum.parse(0); // passes
-FruitEnum.parse(1); // passes
-FruitEnum.parse(3); // fails
-```
-
-**String enums**
-
-```ts
-enum Fruits {
-  Apple = "apple",
-  Banana = "banana",
-  Cantaloupe, // you can mix numerical and string enums
-}
-
-const FruitEnum = z.nativeEnum(Fruits);
-type FruitEnum = z.infer<typeof FruitEnum>; // Fruits
-
-FruitEnum.parse(Fruits.Apple); // passes
-FruitEnum.parse(Fruits.Cantaloupe); // passes
-FruitEnum.parse("apple"); // passes
-FruitEnum.parse("banana"); // passes
-FruitEnum.parse(0); // passes
-FruitEnum.parse("Cantaloupe"); // fails
-```
-
-**Const enums**
-
-The `.nativeEnum()` function works for `as const` objects as well. ⚠️ `as const` required TypeScript 3.4+!
-
-```ts
-const Fruits = {
-  Apple: "apple",
-  Banana: "banana",
-  Cantaloupe: 3,
-} as const;
-
-const FruitEnum = z.nativeEnum(Fruits);
-type FruitEnum = z.infer<typeof FruitEnum>; // "apple" | "banana" | 3
-
-FruitEnum.parse("apple"); // passes
-FruitEnum.parse("banana"); // passes
-FruitEnum.parse(3); // passes
-FruitEnum.parse("Cantaloupe"); // fails
-```
-
-You can access the underlying object with the `.enum` property:
-
-```ts
-FruitEnum.enum.Apple; // "apple"
-```
-
-## Optionals
-
-You can make any schema optional with `z.optional()`:
-
-```ts
-const schema = z.optional(z.string());
-
-schema.parse(undefined); // => returns undefined
-type A = z.infer<typeof schema>; // string | undefined
-```
-
-You can make an existing schema optional with the `.optional()` method:
-
-```ts
-const user = z.object({
-  username: z.string().optional(),
-});
-type C = z.infer<typeof user>; // { username?: string | undefined };
-```
-
-#### `.unwrap`
-
-```ts
-const stringSchema = z.string();
-const optionalString = stringSchema.optional();
-optionalString.unwrap() === stringSchema; // true
-```
-
-## Nullables
-
-Similarly, you can create nullable types like so:
-
-```ts
-const nullableString = z.nullable(z.string());
-nullableString.parse("asdf"); // => "asdf"
-nullableString.parse(null); // => null
-```
-
-You can make an existing schema nullable with the `nullable` method:
-
-```ts
-const E = z.string().nullable(); // equivalent to D
-type E = z.infer<typeof E>; // string | null
-```
-
-#### `.unwrap`
-
-```ts
-const stringSchema = z.string();
-const nullableString = stringSchema.nullable();
-nullableString.unwrap() === stringSchema; // true
-```
-
-## Objects
-
-```ts
-// all properties are required by default
-const Dog = z.object({
-  name: z.string(),
-  age: z.number(),
-});
-
-// extract the inferred type like this
-type Dog = z.infer<typeof Dog>;
-
-// equivalent to:
-type Dog = {
-  name: string;
-  age: number;
-};
-```
-
-### `.shape`
-
-Use `.shape` to access the schemas for a particular key.
-
-```ts
-Dog.shape.name; // => string schema
-Dog.shape.age; // => number schema
-```
-
-### `.extend`
-
-You can add additional fields an object schema with the `.extend` method.
-
-```ts
-const DogWithBreed = Dog.extend({
-  breed: z.string(),
-});
-```
-
-You can use `.extend` to overwrite fields! Be careful with this power!
-
-### `.merge`
-
-Equivalent to `A.extend(B.shape)`.
-
-```ts
-const BaseTeacher = z.object({ students: z.array(z.string()) });
-const HasID = z.object({ id: z.string() });
-
-const Teacher = BaseTeacher.merge(HasID);
-type Teacher = z.infer<typeof Teacher>; // => { students: string[], id: string }
-```
-
-> If the two schemas share keys, the properties of B overrides the property of A. The returned schema also inherits the "unknownKeys" policy (strip/strict/passthrough) and the catchall schema of B.
-
-### `.pick/.omit`
-
-Inspired by TypeScript's built-in `Pick` and `Omit` utility types, all Zod object schemas have `.pick` and `.omit` methods that return a modified version. Consider this Recipe schema:
-
-```ts
-const Recipe = z.object({
-  id: z.string(),
-  name: z.string(),
-  ingredients: z.array(z.string()),
-});
-```
-
-To only keep certain keys, use `.pick` .
-
-```ts
-const JustTheName = Recipe.pick({ name: true });
-type JustTheName = z.infer<typeof JustTheName>;
-// => { name: string }
-```
-
-To remove certain keys, use `.omit` .
-
-```ts
-const NoIDRecipe = Recipe.omit({ id: true });
-
-type NoIDRecipe = z.infer<typeof NoIDRecipe>;
-// => { name: string, ingredients: string[] }
-```
-
-### `.partial`
-
-Inspired by the built-in TypeScript utility type [Partial](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialt), the `.partial` method makes all properties optional.
-
-Starting from this object:
-
-```ts
-const user = z.object({
-  email: z.string()
-  username: z.string(),
-});
-// { email: string; username: string }
-```
-
-We can create a partial version:
-
-```ts
-const partialUser = user.partial();
-// { email?: string | undefined; username?: string | undefined }
-```
-
-You can also specify which properties to make optional:
-
-```ts
-const optionalEmail = user.partial({
-  email: true,
-});
-/*
-{
-  email?: string | undefined;
-  username: string
-}
-*/
-```
-
-### `.deepPartial`
-
-The `.partial` method is shallow — it only applies one level deep. There is also a "deep" version:
-
-```ts
-const user = z.object({
-  username: z.string(),
-  location: z.object({
-    latitude: z.number(),
-    longitude: z.number(),
-  }),
-  strings: z.array(z.object({ value: z.string() })),
-});
-
-const deepPartialUser = user.deepPartial();
-
-/*
-{
-  username?: string | undefined,
-  location?: {
-    latitude?: number | undefined;
-    longitude?: number | undefined;
-  } | undefined,
-  strings?: { value?: string}[]
-}
-*/
-```
-
-> Important limitation: deep partials only work as expected in hierarchies of objects, arrays, and tuples.
-
-#### Unrecognized keys
-
-By default Zod objects schemas strip out unrecognized keys during parsing.
-
-```ts
-const person = z.object({
-  name: z.string(),
-});
-
-person.parse({
-  name: "bob dylan",
-  extraKey: 61,
-});
-// => { name: "bob dylan" }
-// extraKey has been stripped
-```
-
-### `.passthrough`
-
-Instead, if you want to pass through unknown keys, use `.passthrough()` .
-
-```ts
-person.passthrough().parse({
-  name: "bob dylan",
-  extraKey: 61,
-});
-// => { name: "bob dylan", extraKey: 61 }
-```
-
-### `.strict`
-
-You can _disallow_ unknown keys with `.strict()` . If there are any unknown keys in the input, Zod will throw an error.
-
-```ts
-const person = z
-  .object({
-    name: z.string(),
-  })
-  .strict();
-
-person.parse({
-  name: "bob dylan",
-  extraKey: 61,
-});
-// => throws ZodError
-```
-
-### `.strip`
-
-You can use the `.strip` method to reset an object schema to the default behavior (stripping unrecognized keys).
-
-### `.catchall`
-
-You can pass a "catchall" schema into an object schema. All unknown keys will be validated against it.
-
-```ts
-const person = z
-  .object({
-    name: z.string(),
-  })
-  .catchall(z.number());
-
-person.parse({
-  name: "bob dylan",
-  validExtraKey: 61, // works fine
-});
-
-person.parse({
-  name: "bob dylan",
-  validExtraKey: false, // fails
-});
-// => throws ZodError
-```
-
-Using `.catchall()` obviates `.passthrough()` , `.strip()` , or `.strict()`. All keys are now considered "known".
-
-## Arrays
-
-```ts
-const stringArray = z.array(z.string());
-
-// equivalent
-const stringArray = z.string().array();
-```
-
-Be careful with the `.array()` method. It returns a new `ZodArray` instance. This means the _order_ in which you call methods matters. For instance:
-
-```ts
-z.string().optional().array(); // (string | undefined)[]
-z.string().array().optional(); // string[] | undefined
-```
-
-### `.element`
-
-Use `.element` to access the schema for an element of the array.
-
-```ts
-stringArray.element; // => string schema
-```
-
-### `.nonempty`
-
-If you want to ensure that an array contains at least one element, use `.nonempty()`.
-
-```ts
-const nonEmptyStrings = z.string().array().nonempty();
-// the inferred type is now
-// [string, ...string[]]
-
-nonEmptyStrings.parse([]); // throws: "Array cannot be empty"
-nonEmptyStrings.parse(["Ariana Grande"]); // passes
-```
-
-You can optionally specify a custom error message:
-
-```ts
-// optional custom error message
-const nonEmptyStrings = z.string().array().nonempty({
-  message: "Can't be empty!",
-});
-```
-
-### `.min/.max/.length`
-
-```ts
-z.string().array().min(5); // must contain 5 or more items
-z.string().array().max(5); // must contain 5 or fewer items
-z.string().array().length(5); // must contain 5 items exactly
-```
-
-Unlike `.nonempty()` these methods do not change the inferred type.
-
-## Tuples
-
-Unlike arrays, tuples have a fixed number of elements and each element can have a different type.
-
-```ts
-const athleteSchema = z.tuple([
-  z.string(), // name
-  z.number(), // jersey number
-  z.object({
-    pointsScored: z.number(),
-  }), // statistics
-]);
-
-type Athlete = z.infer<typeof athleteSchema>;
-// type Athlete = [string, number, { pointsScored: number }]
-```
-
-## Unions
-
-Zod includes a built-in `z.union` method for composing "OR" types.
-
-```ts
-const stringOrNumber = z.union([z.string(), z.number()]);
-
-stringOrNumber.parse("foo"); // passes
-stringOrNumber.parse(14); // passes
-```
-
-Zod will test the input against each of the "options" in order and return the first value that validates successfully.
-
-For convenience, you can also use the `.or` method:
-
-```ts
-const stringOrNumber = z.string().or(z.number());
-```
-
-### Discriminated unions
-
-If the union consists of object schemas all identifiable by a common property, it is possible to use
-the `z.discriminatedUnion` method.
-
-The advantage is in more efficient evaluation and more human friendly errors. With the basic union method the input is
-tested against each of the provided "options", and in the case of invalidity, issues for all the "options" are shown in
-the zod error. On the other hand, the discriminated union allows for selecting just one of the "options", testing
-against it, and showing only the issues related to this "option".
-
-```ts
-const item = z
-  .discriminatedUnion("type", [
-    z.object({ type: z.literal("a"), a: z.string() }),
-    z.object({ type: z.literal("b"), b: z.string() }),
-  ])
-  .parse({ type: "a", a: "abc" });
-```
-
-## Records
-
-Record schemas are used to validate types such as `{ [k: string]: number }`.
-
-If you want to validate the _values_ of an object against some schema but don't care about the keys, use `Record`.
-
-```ts
-const NumberCache = z.record(z.number());
-
-type NumberCache = z.infer<typeof NumberCache>;
-// => { [k: string]: number }
-```
-
-This is particularly useful for storing or caching items by ID.
-
-```ts
-const userStore: UserStore = {};
-
-userStore["77d2586b-9e8e-4ecf-8b21-ea7e0530eadd"] = {
-  name: "Carlotta",
-}; // passes
-
-userStore["77d2586b-9e8e-4ecf-8b21-ea7e0530eadd"] = {
-  whatever: "Ice cream sundae",
-}; // TypeError
-```
-
-#### A note on numerical keys
-
-You may have expected `z.record()` to accept two arguments, one for the keys and one for the values. After all, TypeScript's built-in Record type does: `Record<KeyType, ValueType>` . Otherwise, how do you represent the TypeScript type `Record<number, any>` in Zod?
-
-As it turns out, TypeScript's behavior surrounding `[k: number]` is a little unintuitive:
-
-```ts
-const testMap: { [k: number]: string } = {
-  1: "one",
-};
-
-for (const key in testMap) {
-  console.log(`${key}: ${typeof key}`);
-}
-// prints: `1: string`
-```
-
-As you can see, JavaScript automatically casts all object keys to strings under the hood.
-
-Since Zod is trying to bridge the gap between static and runtime types, it doesn't make sense to provide a way of creating a record schema with numerical keys, since there's no such thing as a numerical key in runtime JavaScript.
-
-## Maps
-
-```ts
-const stringNumberMap = z.map(z.string(), z.number());
-
-type StringNumberMap = z.infer<typeof stringNumberMap>;
-// type StringNumberMap = Map<string, number>
-```
-
-## Sets
-
-```ts
-const numberSet = z.set(z.number());
-type NumberSet = z.infer<typeof numberSet>;
-// type NumberSet = Set<number>
-```
-
-### `.nonempty/.min/.max/.size`
-
-```ts
-z.set(z.string()).nonempty(); // must contain at least one item
-z.set(z.string()).min(5); // must contain 5 or more items
-z.set(z.string()).max(5); // must contain 5 or fewer items
-z.set(z.string()).size(5); // must contain 5 items exactly
-```
-
-## Intersections
-
-<!-- > ⚠️ Intersections are deprecated. If you are trying to merge objects, use the `.merge` method instead. -->
-
-Intersections are useful for creating "logical AND" types. This is useful for intersecting two object types.
-
-```ts
-const Person = z.object({
-  name: z.string(),
-});
-
-const Employee = z.object({
-  role: z.string(),
-});
-
-const EmployedPerson = z.intersection(Person, Employee);
-
-// equivalent to:
-const EmployedPerson = Person.and(Employee);
-```
-
-Though in many cases, it is recommended to use `A.merge(B)` to merge two objects. The `.merge` method returns a new `ZodObject` instance, whereas `A.and(B)` returns a less useful `ZodIntersection` instance that lacks common object methods like `pick` and `omit`.
-
-```ts
-const a = z.union([z.number(), z.string()]);
-const b = z.union([z.number(), z.boolean()]);
-const c = z.intersection(a, b);
-
-type c = z.infer<typeof c>; // => number
-```
-
-<!-- Intersections in Zod are not smart. Whatever data you pass into `.parse()` gets passed into the two intersected schemas. Because Zod object schemas don't allow any unknown keys by default, there are some unintuitive behavior surrounding intersections of object schemas. -->
-
-<!--
-
-``` ts
-const A = z.object({
-  a: z.string(),
-});
-
-const B = z.object({
-  b: z.string(),
-});
-
-const AB = z.intersection(A, B);
-
-type Teacher = z.infer<typeof Teacher>;
-// { id:string; name:string };
-```  -->
-
-## Recursive types
-
-You can define a recursive schema in Zod, but because of a limitation of TypeScript, their type can't be statically inferred. Instead you'll need to define the type definition manually, and provide it to Zod as a "type hint".
-
-```ts
-interface Category {
-  name: string;
-  subcategories: Category[];
-}
-
-// cast to z.ZodType<Category>
-const Category: z.ZodType<Category> = z.lazy(() =>
-  z.object({
-    name: z.string(),
-    subcategories: z.array(Category),
-  })
-);
-
-Category.parse({
-  name: "People",
-  subcategories: [
-    {
-      name: "Politicians",
-      subcategories: [{ name: "Presidents", subcategories: [] }],
-    },
-  ],
-}); // passes
-```
-
-Unfortunately this code is a bit duplicative, since you're declaring the types twice: once in the interface and again in the Zod definition.
-
-<!-- If your schema has lots of primitive fields, there's a way of reducing the amount of duplication:
-
-```ts
-// define all the non-recursive stuff here
-const BaseCategory = z.object({
-  name: z.string(),
-  tags: z.array(z.string()),
-  itemCount: z.number(),
-});
-
-// create an interface that extends the base schema
-interface Category extends z.infer<typeof BaseCategory> {
-  subcategories: Category[];
-}
-
-// merge the base schema with
-// a new Zod schema containing relations
-const Category: z.ZodType<Category> = BaseCategory.merge(
-  z.object({
-    subcategories: z.lazy(() => z.array(Category)),
-  })
-);
-``` -->
-
-#### JSON type
-
-If you want to validate any JSON value, you can use the snippet below.
-
-```ts
-type Literal = boolean | null | number | string;
-type Json = Literal | { [key: string]: Json } | Json[];
-const literalSchema = z.union([z.string(), z.number(), z.boolean(), z.null()]);
-const jsonSchema: z.ZodType<Json> = z.lazy(() =>
-  z.union([literalSchema, z.array(jsonSchema), z.record(jsonSchema)])
-);
-
-jsonSchema.parse(data);
-```
-
-Thanks to [ggoodman](https://github.com/ggoodman) for suggesting this.
-
-#### Cyclical objects
-
-Despite supporting recursive schemas, passing cyclical data into Zod will cause an infinite loop.
-
-## Promises
-
-```ts
-const numberPromise = z.promise(z.number());
-```
-
-"Parsing" works a little differently with promise schemas. Validation happens in two parts:
-
-1. Zod synchronously checks that the input is an instance of Promise (i.e. an object with `.then` and `.catch` methods.).
-2. Zod uses `.then` to attach an additional validation step onto the existing Promise. You'll have to use `.catch` on the returned Promise to handle validation failures.
-
-```ts
-numberPromise.parse("tuna");
-// ZodError: Non-Promise type: string
-
-numberPromise.parse(Promise.resolve("tuna"));
-// => Promise<number>
-
-const test = async () => {
-  await numberPromise.parse(Promise.resolve("tuna"));
-  // ZodError: Non-number type: string
-
-  await numberPromise.parse(Promise.resolve(3.14));
-  // => 3.14
-};
-```
-
-<!-- #### Non-native promise implementations
-
-When "parsing" a promise, Zod checks that the passed value is an object with `.then` and `.catch` methods — that's it. So you should be able to pass non-native Promises (Bluebird, etc) into `z.promise(...).parse` with no trouble. One gotcha: the return type of the parse function will be a _native_ `Promise` , so if you have downstream logic that uses non-standard Promise methods, this won't work. -->
-
-## Instanceof
-
-You can use `z.instanceof` to check that the input is an instance of a class. This is useful to validate inputs against classes that are exported from third-party libraries.
-
-```ts
-class Test {
-  name: string;
-}
-
-const TestSchema = z.instanceof(Test);
-
-const blob: any = "whatever";
-TestSchema.parse(new Test()); // passes
-TestSchema.parse("blob"); // throws
-```
-
-## Function schemas
-
-Zod also lets you define "function schemas". This makes it easy to validate the inputs and outputs of a function without intermixing your validation code and "business logic".
-
-You can create a function schema with `z.function(args, returnType)` .
-
-```ts
-const myFunction = z.function();
-
-type myFunction = z.infer<typeof myFunction>;
-// => ()=>unknown
-```
-
-**Define inputs and output**
-
-```ts
-const myFunction = z
-  .function()
-  .args(z.string(), z.number()) // accepts an arbitrary number of arguments
-  .returns(z.boolean());
-type myFunction = z.infer<typeof myFunction>;
-// => (arg0: string, arg1: number)=>boolean
-```
-
-**Extract the input and output schemas**
-You can extract the parameters and return type of a function schema.
-
-```ts
-myFunction.parameters();
-// => ZodTuple<[ZodString, ZodNumber]>
-
-myFunction.returnType();
-// => ZodBoolean
-```
-
-<!-- `z.function()` accepts two arguments:
-
-* `args: ZodTuple` The first argument is a tuple (created with `z.tuple([...])` and defines the schema of the arguments to your function. If the function doesn't accept arguments, you can pass an empty tuple (`z.tuple([])`).
-* `returnType: any Zod schema` The second argument is the function's return type. This can be any Zod schema. -->
-
-> You can use the special `z.void()` option if your function doesn't return anything. This will let Zod properly infer the type of void-returning functions. (Void-returning functions actually return undefined.)
-
-<!--
-
-``` ts
-const args = z.tuple([z.string()]);
-
-const returnType = z.number();
-
-const myFunction = z.function(args, returnType);
-type myFunction = z.infer<typeof myFunction>;
-// => (arg0: string)=>number
-``` -->
-
-Function schemas have an `.implement()` method which accepts a function and returns a new function that automatically validates it's inputs and outputs.
-
-```ts
-const trimmedLength = z
-  .function()
-  .args(z.string()) // accepts an arbitrary number of arguments
-  .returns(z.number())
-  .implement((x) => {
-    // TypeScript knows x is a string!
-    return x.trim().length;
-  });
-
-trimmedLength("sandwich"); // => 8
-trimmedLength(" asdf "); // => 4
-```
-
-If you only care about validating inputs, that's fine:
-
-```ts
-const myFunction = z
-  .function()
-  .args(z.string())
-  .implement((arg) => {
-    return [arg.length]; //
-  });
-myFunction; // (arg: string)=>number[]
-```
-
-## Preprocess
-
-Typically Zod operates under a "parse then transform" paradigm. Zod validates the input first, then passes it through a chain of transformation functions. (For more information about transforms, read the [.transform docs](#transform).)
-
-But sometimes you want to apply some transform to the input _before_ parsing happens. A common use case: type coercion. Zod enables this with the `z.preprocess()`.
-
-```ts
-const castToString = z.preprocess((val) => String(val), z.string());
-```
-
-This returns a `ZodEffects` instance. `ZodEffects` is a wrapper class that contains all logic pertaining to preprocessing, refinements, and transforms.
-
-# ZodType: methods and properties
-
-All Zod schemas contain certain methods.
-
-### `.parse`
-
-`.parse(data:unknown): T`
-
-Given any Zod schema, you can call its `.parse` method to check `data` is valid. If it is, a value is returned with full type information! Otherwise, an error is thrown.
-
-> IMPORTANT: In Zod 2 and Zod 1.11+, the value returned by `.parse` is a _deep clone_ of the variable you passed in. This was also the case in zod@1.4 and earlier.
-
-```ts
-const stringSchema = z.string();
-stringSchema.parse("fish"); // => returns "fish"
-stringSchema.parse(12); // throws Error('Non-string type: number');
-```
-
-### `.parseAsync`
-
-`.parseAsync(data:unknown): Promise<T>`
-
-If you use asynchronous [refinements](#refine) or [transforms](#transform) (more on those later), you'll need to use `.parseAsync`
-
-```ts
-const stringSchema = z.string().refine(async (val) => val.length > 20);
-const value = await stringSchema.parseAsync("hello"); // => hello
-```
-
-### `.safeParse`
-
-`.safeParse(data:unknown): { success: true; data: T; } | { success: false; error: ZodError; }`
-
-If you don't want Zod to throw errors when validation fails, use `.safeParse`. This method returns an object containing either the successfully parsed data or a ZodError instance containing detailed information about the validation problems.
-
-```ts
-stringSchema.safeParse(12);
-// => { success: false; error: ZodError }
-
-stringSchema.safeParse("billie");
-// => { success: true; data: 'billie' }
-```
-
-The result is a _discriminated union_ so you can handle errors very conveniently:
-
-```ts
-const result = stringSchema.safeParse("billie");
-if (!result.success) {
-  // handle error then return
-  result.error;
-} else {
-  // do something
-  result.data;
-}
-```
-
-### `.safeParseAsync`
-
-> Alias: `.spa`
-
-An asynchronous version of `safeParse`.
-
-```ts
-await stringSchema.safeParseAsync("billie");
-```
-
-For convenience, this has been aliased to `.spa`:
-
-```ts
-await stringSchema.spa("billie");
-```
-
-### `.refine`
-
-`.refine(validator: (data:T)=>any, params?: RefineParams)`
-
-Zod lets you provide custom validation logic via _refinements_. (For advanced features like creating multiple issues and customizing error codes, see [`.superRefine`](#superrefine).)
-
-Zod was designed to mirror TypeScript as closely as possible. But there are many so-called "refinement types" you may wish to check for that can't be represented in TypeScript's type system. For instance: checking that a number is an integer or that a string is a valid email address.
-
-For example, you can define a custom validation check on _any_ Zod schema with `.refine` :
-
-```ts
-const myString = z.string().refine((val) => val.length <= 255, {
-  message: "String can't be more than 255 characters",
-});
-```
-
-> ⚠️ Refinement functions should not throw. Instead they should return a falsy value to signal failure.
-
-#### Arguments
-
-As you can see, `.refine` takes two arguments.
-
-1. The first is the validation function. This function takes one input (of type `T` — the inferred type of the schema) and returns `any`. Any truthy value will pass validation. (Prior to zod@1.6.2 the validation function had to return a boolean.)
-2. The second argument accepts some options. You can use this to customize certain error-handling behavior:
-
-```ts
-type RefineParams = {
-  // override error message
-  message?: string;
-
-  // appended to error path
-  path?: (string | number)[];
-
-  // params object you can use to customize message
-  // in error map
-  params?: object;
-};
-```
-
-For advanced cases, the second argument can also be a function that returns `RefineParams`/
-
-```ts
-z.string().refine(
-  (val) => val.length > 10,
-  (val) => ({ message: `${val} is not more than 10 characters` })
-);
-```
-
-#### Customize error path
-
-```ts
-const passwordForm = z
-  .object({
-    password: z.string(),
-    confirm: z.string(),
-  })
-  .refine((data) => data.password === data.confirm, {
-    message: "Passwords don't match",
-    path: ["confirm"], // path of error
-  })
-  .parse({ password: "asdf", confirm: "qwer" });
-```
-
-Because you provided a `path` parameter, the resulting error will be:
-
-```ts
-ZodError {
-  issues: [{
-    "code": "custom",
-    "path": [ "confirm" ],
-    "message": "Passwords don't match"
-  }]
-}
-```
-
-#### Asynchronous refinements
-
-Refinements can also be async:
-
-```ts
-const userId = z.string().refine(async (id) => {
-  // verify that ID exists in database
-  return true;
-});
-```
-
-> ⚠️If you use async refinements, you must use the `.parseAsync` method to parse data! Otherwise Zod will throw an error.
-
-#### Relationship to transforms
-
-Transforms and refinements can be interleaved:
-
-```ts
-z.string()
-  .transform((val) => val.length)
-  .refine((val) => val > 25);
-```
-
-<!-- Note that the `path` is set to `["confirm"]` , so you can easily display this error underneath the "Confirm password" textbox.
-
-
-```ts
-const allForms = z.object({ passwordForm }).parse({
-  passwordForm: {
-    password: "asdf",
-    confirm: "qwer",
-  },
-});
-```
-
-would result in
-
-```
-
-ZodError {
-  issues: [{
-    "code": "custom",
-    "path": [ "passwordForm", "confirm" ],
-    "message": "Passwords don't match"
-  }]
-}
-``` -->
-
-### `.superRefine`
-
-The `.refine` method is actually syntactic sugar atop a more versatile (and verbose) method called `superRefine`. Here's an example:
-
-```ts
-const Strings = z.array(z.string()).superRefine((val, ctx) => {
-  if (val.length > 3) {
-    ctx.addIssue({
-      code: z.ZodIssueCode.too_big,
-      maximum: 3,
-      type: "array",
-      inclusive: true,
-      message: "Too many items 😡",
-    });
-  }
-
-  if (val.length !== new Set(val).size) {
-    ctx.addIssue({
-      code: z.ZodIssueCode.custom,
-      message: `No duplicated allowed.`,
-    });
-  }
-});
-```
-
-You can add as many issues as you like. If `ctx.addIssue` is NOT called during the execution of the function, validation passes.
-
-Normally refinements always create issues with a `ZodIssueCode.custom` error code, but with `superRefine` you can create any issue of any code. Each issue code is described in detail in the Error Handling guide: [ERROR_HANDLING.md](ERROR_HANDLING.md).
-
-#### Abort early
-
-By default, parsing will continue even after a refinement check fails. For instance, if you chain together multiple refinements, they will all be executed. However, it may be desirable to _abort early_ to prevent later refinements from being executed. To achieve this, pass the `fatal` flag to `ctx.addIssue`:
-
-```ts
-const Strings = z
-  .number()
-  .superRefine((val, ctx) => {
-    if (val < 10) {
-      ctx.addIssue({
-        code: z.ZodIssueCode.custom,
-        message: "foo",
-        fatal: true,
-      });
-    }
-  })
-  .superRefine((val, ctx) => {
-    if (val !== " ") {
-      ctx.addIssue({
-        code: z.ZodIssueCode.custom,
-        message: "bar",
-      });
-    }
-  });
-```
-
-### `.transform`
-
-To transform data after parsing, use the `transform` method.
-
-```ts
-const stringToNumber = z.string().transform((val) => myString.length);
-stringToNumber.parse("string"); // => 6
-```
-
-> ⚠️ Transform functions must not throw. Make sure to use refinements before the transform to make sure the input can be parsed by the transform.
-
-#### Chaining order
-
-Note that `stringToNumber` above is an instance of the `ZodEffects` subclass. It is NOT an instance of `ZodString`. If you want to use the built-in methods of `ZodString` (e.g. `.email()`) you must apply those methods _before_ any transforms.
-
-```ts
-const emailToDomain = z
-  .string()
-  .email()
-  .transform((val) => val.split("@")[1]);
-
-emailToDomain.parse("colinhacks@example.com"); // => example.com
-```
-
-#### Relationship to refinements
-
-Transforms and refinements can be interleaved:
-
-```ts
-z.string()
-  .transform((val) => val.length)
-  .refine((val) => val > 25);
-```
-
-#### Async transforms
-
-Transforms can also be async.
-
-```ts
-const IdToUser = z
-  .string()
-  .uuid()
-  .transform(async (id) => {
-    return await getUserById(id);
-  });
-```
-
-> ⚠️ If your schema contains asynchronous transforms, you must use .parseAsync() or .safeParseAsync() to parse data. Otherwise Zod will throw an error.
-
-### `.default`
-
-You can use transforms to implement the concept of "default values" in Zod.
-
-```ts
-const stringWithDefault = z.string().default("tuna");
-
-stringWithDefault.parse(undefined); // => "tuna"
-```
-
-Optionally, you can pass a function into `.default` that will be re-executed whenever a default value needs to be generated:
-
-```ts
-const numberWithRandomDefault = z.number().default(Math.random);
-
-numberWithRandomDefault.parse(undefined); // => 0.4413456736055323
-numberWithRandomDefault.parse(undefined); // => 0.1871840107401901
-numberWithRandomDefault.parse(undefined); // => 0.7223408162401552
-```
-
-### `.optional`
-
-A convenience method that returns an optional version of a schema.
-
-```ts
-const optionalString = z.string().optional(); // string | undefined
-
-// equivalent to
-z.optional(z.string());
-```
-
-### `.nullable`
-
-A convenience method that returns an nullable version of a schema.
-
-```ts
-const nullableString = z.string().nullable(); // string | null
-
-// equivalent to
-z.nullable(z.string());
-```
-
-### `.nullish`
-
-A convenience method that returns a "nullish" version of a schema. Nullish schemas will accept both `undefined` and `null`. Read more about the concept of "nullish" [here](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#nullish-coalescing).
-
-```ts
-const nullishString = z.string().nullish(); // string | null | undefined
-
-// equivalent to
-z.string().optional().nullable();
-```
-
-### `.array`
-
-A convenience method that returns an array schema for the given type:
-
-```ts
-const nullableString = z.string().array(); // string[]
-
-// equivalent to
-z.array(z.string());
-```
-
-### `.promise`
-
-A convenience method for promise types:
-
-```ts
-const stringPromise = z.string().promise(); // Promise<string>
-
-// equivalent to
-z.promise(z.string());
-```
-
-### `.or`
-
-A convenience method for union types.
-
-```ts
-z.string().or(z.number()); // string | number
-
-// equivalent to
-z.union([z.string(), z.number()]);
-```
-
-### `.and`
-
-A convenience method for creating intersection types.
-
-```ts
-z.object({ name: z.string() }).and(z.object({ age: z.number() })); // { name: string } & { age: number }
-
-// equivalent to
-z.intersection(z.object({ name: z.string() }), z.object({ age: z.number() }));
-```
-
-# Type inference
-
-You can extract the TypeScript type of any schema with `z.infer<typeof mySchema>` .
-
-```ts
-const A = z.string();
-type A = z.infer<typeof A>; // string
-
-const u: A = 12; // TypeError
-const u: A = "asdf"; // compiles
-```
-
-#### What about transforms?
-
-In reality each Zod schema internally tracks **two** types: an input and an output. For most schemas (e.g. `z.string()`) these two are the same. But once you add transforms into the mix, these two values can diverge. For instance `z.string().transform(val => val.length)` has an input of `string` and an output of `number`.
-
-You can separately extract the input and output types like so:
-
-```ts
-const stringToNumber = z.string().transform((val) => val.length);
-
-// ⚠️ Important: z.infer returns the OUTPUT type!
-type input = z.input<typeof stringToNumber>; // string
-type output = z.output<typeof stringToNumber>; // number
-
-// equivalent to z.output!
-type inferred = z.infer<typeof stringToNumber>; // number
-```
-
-# Errors
-
-Zod provides a subclass of Error called `ZodError`. ZodErrors contain an `issues` array containing detailed information about the validation problems.
-
-```ts
-const data = z
-  .object({
-    name: z.string(),
-  })
-  .safeParse({ name: 12 });
-
-if (!data.success) {
-  data.error.issues;
-  /* [
-      {
-        "code": "invalid_type",
-        "expected": "string",
-        "received": "number",
-        "path": [ "name" ],
-        "message": "Expected string, received number"
-      }
-  ] */
-}
-```
-
-#### Error formatting
-
-You can use the `.format()` method to convert this error into a nested object.
-
-```ts
-data.error.format();
-/* {
-  name: { _errors: [ 'Expected string, received number' ] }
-} */
-```
-
-For detailed information about the possible error codes and how to customize error messages, check out the dedicated error handling guide: [ERROR_HANDLING.md](ERROR_HANDLING.md)
-
-# Comparison
-
-There are a handful of other widely-used validation libraries, but all of them have certain design limitations that make for a non-ideal developer experience.
-
-<!-- The table below summarizes the feature differences. Below the table there are more involved discussions of certain alternatives, where necessary. -->
-
-<!-- | Feature                                                                                                                | [Zod](https://github.com/colinhacks) | [Joi](https://github.com/hapijs/joi) | [Yup](https://github.com/jquense/yup) | [io-ts](https://github.com/gcanti/io-ts) | [Runtypes](https://github.com/pelotom/runtypes) | [ow](https://github.com/sindresorhus/ow) | [class-validator](https://github.com/typestack/class-validator) |
-| ---------------------------------------------------------------------------------------------------------------------- | :-----------------------------: | :----------------------------------: | :-----------------------------------: | :--------------------------------------: | :---------------------------------------------: | :--------------------------------------: | :-------------------------------------------------------------: |
-| <abbr title='Any ability to extract a TypeScript type from a validator instance counts.'>Type inference</abbr>         |               🟢                |                  🔴                  |                  🟢                   |                    🟢                    |                       🟢                        |                    🟢                    |                               🟢                                |
-| <abbr title="Yup's inferred types are incorrect in certain cases, see discussion below.">Correct type inference</abbr> |               🟢                |                  🔴                  |                  🔴                   |                    🟢                    |                       🟢                        |                    🟢                    |                               🟢                                |
-
-<abbr title="number, string, boolean, null, undefined">Primitive Types</abbr>
-<abbr title="Includes any checks beyond 'Is this a string?', e.g. min/max length, isEmail, isURL, case checking, etc.">String Validation</abbr>
-<abbr title="Includes any checks beyond 'Is this a number?', e.g. min/max, isPositive, integer vs float, etc.">Number Validation</abbr>
-Dates
-
-Primitive Literals
-Object Literals
-Tuple Literals
-Objects
-Arrays
-Non-empty arrays
-Unions
-Optionals
-Nullable
-Enums
-Enum Autocomplete
-Intersections
-Object Merging
-Tuples
-Recursive Types
-Function Schemas
-
-<abbr title="For instance, Yup allows custom error messages with the syntax yup.number().min(5, 'Number must be more than 5!')">Validation Messages</abbr>
-Immutable instances
-Type Guards
-Validity Checking
-Casting
-Default Values
-Rich Errors
-Branded -->
-
-<!-- - Missing object methods: (pick, omit, partial, deepPartial, merge, extend)
-
-* Missing nonempty arrays with proper typing (`[T, ...T[]]`)
-* Missing lazy/recursive types
-* Missing promise schemas
-* Missing function schemas
-* Missing union & intersection schemas
-* Missing support for parsing cyclical data (maybe)
-* Missing error customization -->
-
-#### Joi
-
-[https://github.com/hapijs/joi](https://github.com/hapijs/joi)
-
-Doesn't support static type inference 😕
-
-#### Yup
-
-[https://github.com/jquense/yup](https://github.com/jquense/yup)
-
-Yup is a full-featured library that was implemented first in vanilla JS, and later rewritten in TypeScript.
-
-Differences
-
-- Supports casting and transforms
-- All object fields are optional by default
-- Missing object methods: (partial, deepPartial)
-<!-- - Missing nonempty arrays with proper typing (`[T, ...T[]]`) -->
-- Missing promise schemas
-- Missing function schemas
-- Missing union & intersection schemas
-
-<!-- ¹Yup has a strange interpretation of the word `required`. Instead of meaning "not undefined", Yup uses it to mean "not empty". So `yup.string().required()` will not accept an empty string, and `yup.array(yup.string()).required()` will not accept an empty array. Instead, Yup us Zod arrays there is a dedicated `.nonempty()` method to indicate this, or you can implement it with a custom refinement. -->
-
-#### io-ts
-
-[https://github.com/gcanti/io-ts](https://github.com/gcanti/io-ts)
-
-io-ts is an excellent library by gcanti. The API of io-ts heavily inspired the design of Zod.
-
-In our experience, io-ts prioritizes functional programming purity over developer experience in many cases. This is a valid and admirable design goal, but it makes io-ts particularly hard to integrate into an existing codebase with a more procedural or object-oriented bias. For instance, consider how to define an object with optional properties in io-ts:
-
-```ts
-import * as t from "io-ts";
-
-const A = t.type({
-  foo: t.string,
-});
-
-const B = t.partial({
-  bar: t.number,
-});
-
-const C = t.intersection([A, B]);
-
-type C = t.TypeOf<typeof C>;
-// returns { foo: string; bar?: number | undefined }
-```
-
-You must define the required and optional props in separate object validators, pass the optionals through `t.partial` (which marks all properties as optional), then combine them with `t.intersection` .
-
-Consider the equivalent in Zod:
-
-```ts
-const C = z.object({
-  foo: z.string(),
-  bar: z.number().optional(),
-});
-
-type C = z.infer<typeof C>;
-// returns { foo: string; bar?: number | undefined }
-```
-
-This more declarative API makes schema definitions vastly more concise.
-
-`io-ts` also requires the use of gcanti's functional programming library `fp-ts` to parse results and handle errors. This is another fantastic resource for developers looking to keep their codebase strictly functional. But depending on `fp-ts` necessarily comes with a lot of intellectual overhead; a developer has to be familiar with functional programming concepts and the `fp-ts` nomenclature to use the library.
-
-- Supports codecs with serialization & deserialization transforms
-- Supports branded types
-- Supports advanced functional programming, higher-kinded types, `fp-ts` compatibility
-- Missing object methods: (pick, omit, partial, deepPartial, merge, extend)
-- Missing nonempty arrays with proper typing (`[T, ...T[]]`)
-- Missing promise schemas
-- Missing function schemas
-
-#### Runtypes
-
-[https://github.com/pelotom/runtypes](https://github.com/pelotom/runtypes)
-
-Good type inference support, but limited options for object type masking (no `.pick` , `.omit` , `.extend` , etc.). No support for `Record` s (their `Record` is equivalent to Zod's `object` ). They DO support branded and readonly types, which Zod does not.
-
-- Supports "pattern matching": computed properties that distribute over unions
-- Supports readonly types
-- Missing object methods: (deepPartial, merge)
-- Missing nonempty arrays with proper typing (`[T, ...T[]]`)
-- Missing promise schemas
-- Missing error customization
-
-#### Ow
-
-[https://github.com/sindresorhus/ow](https://github.com/sindresorhus/ow)
-
-Ow is focused on function input validation. It's a library that makes it easy to express complicated assert statements, but it doesn't let you parse untyped data. They support a much wider variety of types; Zod has a nearly one-to-one mapping with TypeScript's type system, whereas ow lets you validate several highly-specific types out of the box (e.g. `int32Array` , see full list in their README).
-
-If you want to validate function inputs, use function schemas in Zod! It's a much simpler approach that lets you reuse a function type declaration without repeating yourself (namely, copy-pasting a bunch of ow assertions at the beginning of every function). Also Zod lets you validate your return types as well, so you can be sure there won't be any unexpected data passed downstream.
-
-# Changelog
-
-View the changelog at [CHANGELOG.md](CHANGELOG.md)
diff --git a/docs/index.html b/docs/index.html
deleted file mode 100644
index d82c9e223..000000000
--- a/docs/index.html
+++ /dev/null
@@ -1,46 +0,0 @@
-<!DOCTYPE html>
-<html lang="en">
-  <head>
-    <meta charset="UTF-8" />
-    <title>Document</title>
-    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
-    <meta name="description" content="Description" />
-    <meta
-      name="viewport"
-      content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"
-    />
-    <link
-      rel="stylesheet"
-      href="//cdn.jsdelivr.net/npm/docsify/lib/themes/vue.css"
-    />
-  </head>
-
-  <body>
-    <nav
-      style="
-        display: flex;
-        flex-direction: row;
-        align-items: center;
-        justify-content: space-between;
-      "
-    >
-      <a href="https://twitter.com/colinhacks"
-        ><span style="color: #888888">created by @colinhacks</span></a
-      >
-      <a href="#/">Docs</a>
-      <a href="#/screencasts">Screencasts</a>
-    </nav>
-    <div id="app"></div>
-    <script>
-      window.$docsify = {
-        // repo: 'docsifyjs/docsify',
-        subMaxLevel: 1,
-        coverpage: true,
-        onlyCover: true,
-      };
-    </script>
-    <script src="//cdn.jsdelivr.net/npm/docsify/lib/docsify.min.js"></script>
-
-    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.21.0/components/prism-typescript.min.js"></script>
-  </body>
-</html>
diff --git a/images/glow.jpg b/images/glow.jpg
deleted file mode 100644
index 85b67bf0c..000000000
Binary files a/images/glow.jpg and /dev/null differ
diff --git a/index.html b/index.html
new file mode 100644
index 000000000..72f7f85ac
--- /dev/null
+++ b/index.html
@@ -0,0 +1,138 @@
+<!DOCTYPE html>
+<html lang="en">
+  <head>
+    <meta charset="UTF-8" />
+    <title>Zod | Documentation</title>
+    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
+    <meta
+      name="description"
+      content="TypeScript-first schema validation with static type inference"
+    />
+    <meta
+      name="viewport"
+      content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"
+    />
+    <meta
+      name="twitter:title"
+      content="TypeScript-first schema validation with static type inference"
+    />
+    <meta name="twitter:card" content="summary_large_image" />
+    <meta name="twitter:site" content="@colinhacks" />
+    <meta
+      name="twitter:image:src"
+      content="https://opengraph.githubassets.com/1cac1150838995e1f7d1643c00eee51a5d884f2054f995c9d3225b07b0eddb39/colinhacks/zod"
+    />
+    <meta
+      property="og:image"
+      content="https://opengraph.githubassets.com/1cac1150838995e1f7d1643c00eee51a5d884f2054f995c9d3225b07b0eddb39/colinhacks/zod"
+    />
+    <meta
+      property="og:image:alt"
+      content="TypeScript-first schema validation with static type inference"
+    />
+    <meta property="og:image:width" content="1200" />
+    <meta property="og:image:height" content="600" />
+    <meta property="og:site_name" content="GitHub" />
+    <meta property="og:type" content="object" />
+    <meta
+      property="og:title"
+      content="TypeScript-first schema validation with static type inference"
+    />
+    <meta property="og:url" content="https://github.com/colinhacks/zod" />
+    <meta
+      property="og:description"
+      content="TypeScript-first schema validation with static type inference"
+    />
+    <link
+      rel="apple-touch-icon"
+      sizes="180x180"
+      href="/static/apple-touch-icon.png"
+    />
+    <link
+      rel="icon"
+      type="image/png"
+      sizes="32x32"
+      href="/static/favicon-32x32.png"
+    />
+    <link
+      rel="icon"
+      type="image/png"
+      sizes="16x16"
+      href="/static/favicon-16x16.png"
+    />
+    <link rel="manifest" href="/static/site.webmanifest" />
+    <link
+      rel="mask-icon"
+      href="/static/safari-pinned-tab.svg"
+      color="#5bbad5"
+    />
+    <link rel="shortcut icon" href="/static/favicon.ico" />
+    <meta name="msapplication-TileColor" content="#da532c" />
+    <meta name="msapplication-config" content="/static/browserconfig.xml" />
+    <meta name="theme-color" content="#ffffff" />
+
+    <script
+      async
+      src="https://www.googletagmanager.com/gtag/js?id=G-FG8DDV0GBR"
+    ></script>
+    <script>
+      window.dataLayer = window.dataLayer || [];
+      function gtag() {
+        dataLayer.push(arguments);
+      }
+      gtag("js", new Date());
+      gtag("config", "G-FG8DDV0GBR");
+    </script>
+
+    <link
+      rel="preload"
+      href="//cdn.jsdelivr.net/npm/docsify@4.12.2/lib/themes/vue.css"
+      type="text/css"
+      as="style"
+      onload="this.onload=null;this.rel='stylesheet';"
+    />
+
+    <style>
+      .markdown-section {
+        max-width: 720px;
+      }
+      p > img {
+        height: 200px;
+      }
+      .markdown-section h2 {
+        padding: 40px 0px 10px 0px;
+        border-bottom: 1px solid #dbdbdb;
+      }
+
+      .markdown-section h3 {
+        padding-top: 15px;
+      }
+      .markdown-section h3 code {
+        font-size: 80%;
+      }
+    </style>
+  </head>
+
+  <body>
+    <nav
+      style="
+        display: flex;
+        flex-direction: row;
+        align-items: center;
+        justify-content: space-between;
+      "
+    ></nav>
+    <div id="app"></div>
+    <script src="//cdnjs.cloudflare.com/ajax/libs/docsify/4.12.2/docsify.min.js"></script>
+    <script src="//cdnjs.cloudflare.com/ajax/libs/prism/1.28.0/components/prism-typescript.min.js"></script>
+    <script>
+      window.$docsify = {
+        subMaxLevel: 1,
+        maxLevel: 3,
+        auto2top: true,
+        repo: "colinhacks/zod",
+        routerMode: "history",
+      };
+    </script>
+  </body>
+</html>
diff --git a/package.json b/package.json
index 469001706..e636ae142 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "zod",
-  "version": "3.16.0",
+  "version": "3.16.1",
   "description": "TypeScript-first schema declaration and validation library with static type inference",
   "main": "./lib/index.js",
   "types": "./index.d.ts",
diff --git a/src/__tests__/default.test.ts b/src/__tests__/default.test.ts
index c1c6d7389..7867f21d7 100644
--- a/src/__tests__/default.test.ts
+++ b/src/__tests__/default.test.ts
@@ -105,3 +105,24 @@ test("chained defaults", () => {
 test("factory", () => {
   z.ZodDefault.create(z.string()).parse(undefined);
 });
+
+test("native enum", () => {
+  enum Fruits {
+    apple = "apple",
+    orange = "orange",
+  }
+
+  const schema = z.object({
+    fruit: z.nativeEnum(Fruits).default(Fruits.apple),
+  });
+
+  expect(schema.parse({})).toEqual({ fruit: Fruits.apple });
+});
+
+test("enum", () => {
+  const schema = z.object({
+    fruit: z.enum(["apple", "orange"]).default("apple"),
+  });
+
+  expect(schema.parse({})).toEqual({ fruit: "apple" });
+});
diff --git a/src/__tests__/instanceof.test.ts b/src/__tests__/instanceof.test.ts
index a18eb2532..e72e8374d 100644
--- a/src/__tests__/instanceof.test.ts
+++ b/src/__tests__/instanceof.test.ts
@@ -25,3 +25,9 @@ test("instanceof", async () => {
   const f1: util.AssertEqual<Test, z.infer<typeof TestSchema>> = true;
   expect(f1).toBeTruthy();
 });
+
+test("instanceof fatal", () => {
+  const schema = z.instanceof(Date).refine((d) => d.toString());
+  const res = schema.safeParse(null);
+  expect(res.success).toBe(false);
+});
diff --git a/src/__tests__/recursive.test.ts b/src/__tests__/recursive.test.ts
index 9d79d941f..a3c820b52 100644
--- a/src/__tests__/recursive.test.ts
+++ b/src/__tests__/recursive.test.ts
@@ -1,6 +1,5 @@
 // @ts-ignore TS6133
-import { expect, test } from "@jest/globals";
-
+import { test } from "@jest/globals";
 import { z } from "..";
 
 interface Category {
@@ -49,6 +48,36 @@ test("recursion with z.lazy", () => {
 test("schema getter", () => {
   z.lazy(() => z.string()).schema.parse("asdf");
 });
+
+type LinkedList = null | { value: number; next: LinkedList };
+
+const linkedListExample = {
+  value: 1,
+  next: {
+    value: 2,
+    next: {
+      value: 3,
+      next: {
+        value: 4,
+        next: null,
+      },
+    },
+  },
+};
+
+test("recursion involving union type", () => {
+  const LinkedListSchema: z.ZodType<LinkedList> = z.lazy(() =>
+    z.union([
+      z.null(),
+      z.object({
+        value: z.number(),
+        next: LinkedListSchema,
+      }),
+    ])
+  );
+  LinkedListSchema.parse(linkedListExample);
+});
+
 // interface A {
 //   val: number;
 //   b: B;
diff --git a/src/types.ts b/src/types.ts
index c5dc00989..1b28962db 100644
--- a/src/types.ts
+++ b/src/types.ts
@@ -634,8 +634,8 @@ export class ZodString extends ZodType<string, ZodStringDef> {
   }
 
   /**
-   * Deprecated.
-   * Use z.string().min(1) instead.
+   * @deprecated Use z.string().min(1) instead.
+   * @see {@link ZodString.min}
    */
   nonempty = (message?: errorUtil.ErrMessage) =>
     this.min(1, errorUtil.errToObj(message));
@@ -3576,9 +3576,17 @@ export class ZodNaN extends ZodType<number, ZodNaNDef> {
 
 export const custom = <T>(
   check?: (data: unknown) => any,
-  params?: Parameters<ZodTypeAny["refine"]>[1]
+  params: Parameters<ZodTypeAny["refine"]>[1] = {},
+  fatal?: boolean
 ): ZodType<T> => {
-  if (check) return ZodAny.create().refine(check, params);
+  if (check)
+    return ZodAny.create().superRefine((data, ctx) => {
+      if (!check(data)) {
+        const p = typeof params === "function" ? params(data) : params;
+        const p2 = typeof p === "string" ? { message: p } : p;
+        ctx.addIssue({ code: "custom", ...p2, fatal });
+      }
+    });
   return ZodAny.create();
 };
 
@@ -3659,7 +3667,7 @@ const instanceOfType = <T extends new (...args: any[]) => any>(
   params: Parameters<ZodTypeAny["refine"]>[1] = {
     message: `Input not instance of ${cls.name}`,
   }
-) => custom<InstanceType<T>>((data) => data instanceof cls, params);
+) => custom<InstanceType<T>>((data) => data instanceof cls, params, true);
 
 const stringType = ZodString.create;
 const numberType = ZodNumber.create;
diff --git a/static/android-chrome-192x192.png b/static/android-chrome-192x192.png
new file mode 100644
index 000000000..610932b6c
Binary files /dev/null and b/static/android-chrome-192x192.png differ
diff --git a/static/android-chrome-512x512.png b/static/android-chrome-512x512.png
new file mode 100644
index 000000000..09ab1e8b9
Binary files /dev/null and b/static/android-chrome-512x512.png differ
diff --git a/static/apple-touch-icon.png b/static/apple-touch-icon.png
new file mode 100644
index 000000000..05476e788
Binary files /dev/null and b/static/apple-touch-icon.png differ
diff --git a/static/browserconfig.xml b/static/browserconfig.xml
new file mode 100644
index 000000000..b3930d0f0
--- /dev/null
+++ b/static/browserconfig.xml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<browserconfig>
+    <msapplication>
+        <tile>
+            <square150x150logo src="/mstile-150x150.png"/>
+            <TileColor>#da532c</TileColor>
+        </tile>
+    </msapplication>
+</browserconfig>
diff --git a/static/favicon-16x16.png b/static/favicon-16x16.png
new file mode 100644
index 000000000..5ecb49dbc
Binary files /dev/null and b/static/favicon-16x16.png differ
diff --git a/static/favicon-32x32.png b/static/favicon-32x32.png
new file mode 100644
index 000000000..f4451502f
Binary files /dev/null and b/static/favicon-32x32.png differ
diff --git a/static/favicon.ico b/static/favicon.ico
new file mode 100644
index 000000000..4a95e7923
Binary files /dev/null and b/static/favicon.ico differ
diff --git a/static/mstile-144x144.png b/static/mstile-144x144.png
new file mode 100644
index 000000000..f4cd4853a
Binary files /dev/null and b/static/mstile-144x144.png differ
diff --git a/static/mstile-150x150.png b/static/mstile-150x150.png
new file mode 100644
index 000000000..da3cdba9d
Binary files /dev/null and b/static/mstile-150x150.png differ
diff --git a/static/mstile-310x150.png b/static/mstile-310x150.png
new file mode 100644
index 000000000..294e30e31
Binary files /dev/null and b/static/mstile-310x150.png differ
diff --git a/static/mstile-310x310.png b/static/mstile-310x310.png
new file mode 100644
index 000000000..d4bad2b71
Binary files /dev/null and b/static/mstile-310x310.png differ
diff --git a/static/mstile-70x70.png b/static/mstile-70x70.png
new file mode 100644
index 000000000..512bb04f6
Binary files /dev/null and b/static/mstile-70x70.png differ
diff --git a/static/safari-pinned-tab.svg b/static/safari-pinned-tab.svg
new file mode 100644
index 000000000..3ad6f79f9
--- /dev/null
+++ b/static/safari-pinned-tab.svg
@@ -0,0 +1,113 @@
+<?xml version="1.0" standalone="no"?>
+<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN"
+ "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">
+<svg version="1.0" xmlns="http://www.w3.org/2000/svg"
+ width="700.000000pt" height="700.000000pt" viewBox="0 0 700.000000 700.000000"
+ preserveAspectRatio="xMidYMid meet">
+<metadata>
+Created by potrace 1.14, written by Peter Selinger 2001-2017
+</metadata>
+<g transform="translate(0.000000,700.000000) scale(0.100000,-0.100000)"
+fill="#000000" stroke="none">
+<path d="M2096 5843 c-1 -2 -97 -3 -213 -3 l-210 -1 -303 -302 c-166 -166
+-307 -301 -311 -300 -5 2 -8 -1 -6 -5 3 -13 -296 -308 -308 -304 -5 2 -7 0 -3
+-4 9 -9 -103 -120 -117 -116 -5 2 -7 1 -3 -3 10 -10 -142 -156 -155 -148 -6 3
+-7 1 -3 -5 3 -6 -33 -50 -84 -100 l-91 -89 36 -44 c20 -24 50 -59 66 -77 16
+-18 26 -38 23 -44 -4 -6 -3 -8 4 -4 6 3 21 -8 34 -26 12 -18 30 -40 38 -48 9
+-9 42 -49 75 -90 33 -41 67 -82 75 -91 8 -9 22 -25 30 -35 9 -10 51 -61 93
+-111 43 -51 75 -97 72 -103 -4 -6 -2 -9 4 -8 14 4 82 -74 76 -89 -2 -7 2 -10
+10 -6 8 3 18 -2 21 -11 3 -9 21 -32 40 -52 18 -21 30 -42 27 -47 -3 -6 -1 -7
+5 -3 17 10 25 -13 10 -32 -11 -15 -11 -16 3 -5 17 14 13 18 128 -122 23 -27
+39 -55 37 -61 -2 -6 1 -11 8 -10 10 1 53 -47 194 -219 46 -55 119 -142 135
+-160 45 -49 57 -71 44 -85 -10 -12 -9 -12 4 -2 14 11 20 9 38 -14 11 -14 18
+-31 14 -37 -3 -5 -2 -7 4 -4 6 4 25 -13 44 -36 37 -46 55 -68 81 -99 10 -11
+15 -25 11 -31 -3 -5 -1 -7 4 -4 14 9 47 -29 37 -44 -4 -7 -3 -10 4 -5 6 3 28
+-15 49 -41 21 -27 47 -56 57 -65 10 -10 16 -18 13 -18 -3 0 4 -11 16 -23 64
+-69 78 -88 71 -98 -4 -7 -3 -9 3 -6 5 4 23 -10 39 -30 16 -20 34 -41 39 -47
+47 -51 74 -89 69 -97 -3 -5 -1 -8 5 -7 15 4 142 -152 134 -165 -3 -7 -2 -9 2
+-4 5 4 17 0 27 -10 20 -18 25 -38 6 -27 -7 4 -8 3 -4 -5 4 -6 11 -9 15 -7 8 5
+41 -27 51 -49 3 -5 20 -25 38 -43 17 -19 29 -38 26 -43 -3 -5 -1 -8 4 -7 4 2
+46 -42 93 -97 46 -55 90 -106 97 -113 7 -8 10 -18 7 -23 -4 -5 1 -9 9 -9 15 0
+21 -12 17 -33 -1 -5 3 -6 8 -3 5 4 22 -11 38 -31 15 -21 37 -47 48 -59 11 -11
+29 -33 40 -48 11 -15 33 -42 48 -59 16 -18 38 -45 50 -61 12 -15 32 -38 44
+-51 12 -13 19 -26 16 -29 -4 -3 -1 -6 5 -6 16 0 158 -179 154 -194 -2 -6 -1
+-8 3 -4 11 11 37 -20 29 -33 -4 -7 -3 -9 3 -6 6 4 41 -31 79 -76 38 -45 72
+-84 77 -85 4 -2 7 -7 7 -12 0 -4 20 -30 45 -56 25 -27 45 -43 45 -35 0 8 6 11
+16 7 8 -3 12 -2 9 4 -8 13 54 80 70 74 7 -3 16 -1 20 5 3 7 0 8 -9 5 -25 -10
+-19 5 17 40 17 18 57 62 87 99 30 36 59 66 63 66 5 1 5 -4 1 -11 -4 -7 -3 -8
+5 -4 6 4 9 11 6 16 -7 11 34 60 51 60 8 0 12 5 9 11 -4 5 16 33 44 61 28 28
+51 55 51 60 0 6 6 8 14 5 8 -3 13 1 12 11 0 9 5 16 12 14 8 -1 11 2 7 8 -3 5
+1 13 9 16 9 3 16 12 16 19 0 7 19 29 41 49 23 20 39 36 35 36 -3 0 10 17 30
+38 20 20 54 58 77 85 30 34 43 44 50 35 6 -9 7 -8 4 4 -7 20 80 121 96 111 6
+-4 7 -1 2 6 -4 7 1 20 11 30 11 10 48 51 84 91 36 41 76 85 90 100 14 14 51
+56 83 93 31 38 57 65 57 60 0 -4 9 7 20 25 11 17 24 32 29 32 5 0 13 9 16 20
+3 11 11 20 16 20 6 0 7 -6 3 -13 -4 -6 -3 -8 1 -4 5 4 10 14 11 22 3 23 138
+174 151 170 7 -2 10 2 6 11 -3 8 1 14 11 14 9 0 15 6 13 13 -1 6 4 11 11 9 8
+-1 11 2 8 7 -8 12 18 33 29 23 5 -4 5 -2 1 5 -4 7 11 31 36 57 24 25 59 64 78
+86 19 22 41 40 48 40 7 0 10 5 7 11 -8 12 34 61 46 53 5 -3 9 2 9 11 0 8 7 18
+15 21 8 4 12 11 8 17 -4 6 0 8 10 4 10 -4 14 -2 11 7 -4 11 52 71 68 71 3 0
+10 4 15 9 5 5 2 6 -6 1 -9 -5 -12 -3 -9 6 3 8 11 13 17 11 7 -1 10 2 7 7 -4 5
+-1 13 6 18 7 4 30 29 51 56 21 26 43 44 49 41 6 -4 8 -2 4 4 -3 6 6 20 20 31
+15 12 23 21 19 21 -4 0 3 10 16 23 13 12 44 46 68 75 29 35 49 51 59 47 12 -4
+13 -3 2 10 -13 15 -3 21 25 15 6 -1 7 2 3 5 -11 11 11 47 24 39 6 -4 8 -3 5 3
+-8 12 31 56 42 48 5 -2 8 3 7 13 0 9 5 16 11 15 7 -2 12 1 10 5 -1 5 20 34 47
+65 37 43 52 54 59 45 6 -10 8 -9 4 3 -6 18 76 116 93 112 5 -2 6 5 3 14 -4 10
+-2 14 4 10 5 -4 15 5 22 19 6 14 16 22 21 19 6 -4 9 -2 8 4 -2 5 6 17 17 26
+11 9 13 13 5 9 -8 -4 -4 4 10 17 13 13 26 23 29 21 2 -2 9 7 16 20 6 13 17 22
+23 21 7 -2 9 4 5 14 -5 13 -2 15 11 10 9 -4 15 -3 12 1 -7 12 24 53 35 47 5
+-3 6 2 2 11 -4 12 -3 15 5 10 7 -4 12 -3 12 1 0 17 53 73 63 66 5 -3 7 -2 4 4
+-8 13 80 109 96 105 7 -2 9 0 5 3 -12 12 12 47 27 41 8 -3 12 0 9 7 -2 7 29
+47 69 90 41 42 72 77 71 77 -2 0 9 12 23 28 14 15 29 26 34 25 4 -2 5 5 2 14
+-4 10 -2 14 4 10 5 -4 15 5 22 19 7 16 17 24 26 20 8 -3 12 0 10 7 -7 18 22
+50 36 41 7 -4 10 -3 5 4 -4 6 9 27 28 47 19 19 33 35 31 35 -2 0 12 16 31 36
+38 41 40 47 19 64 -8 7 -12 16 -9 21 3 5 1 8 -5 7 -15 -4 -162 153 -154 165 3
+6 1 7 -5 3 -12 -7 -99 81 -94 96 1 5 -1 7 -6 4 -11 -7 -65 48 -55 57 3 4 1 7
+-6 7 -7 0 -47 37 -89 82 -42 45 -101 106 -129 135 -29 29 -53 57 -53 63 0 6
+-4 8 -10 5 -5 -3 -10 -2 -10 3 0 5 -29 37 -64 72 -36 35 -62 69 -59 74 3 6 3
+8 -1 4 -10 -8 -47 23 -40 34 3 4 0 8 -5 8 -18 0 -52 40 -45 52 4 6 3 8 -3 5
+-10 -7 -243 227 -243 244 0 6 -4 8 -9 5 -9 -6 -26 22 -22 37 1 5 -2 6 -7 3
+-12 -7 -54 38 -45 48 5 4 4 6 -2 5 -13 -5 -55 32 -55 48 0 7 -4 12 -9 10 -11
+-3 -71 59 -71 73 0 6 -4 9 -9 6 -7 -5 -191 -7 -441 -5 -25 0 -133 0 -240 0
+-107 0 -202 0 -210 0 -26 1 -469 0 -609 -1 -74 -1 -138 -3 -143 -6 -4 -3 -8
+-2 -8 3 0 9 -121 8 -145 -1 -8 -3 -15 -2 -15 2 0 8 -122 7 -145 -1 -8 -4 -15
+-3 -15 1 0 8 -123 7 -145 -2 -8 -3 -15 -2 -15 2 0 8 -122 7 -145 -1 -8 -4 -15
+-3 -15 1 0 8 -123 7 -145 -2 -8 -3 -15 -2 -15 2 0 8 -122 7 -145 -1 -8 -4 -15
+-3 -15 1 0 8 -123 7 -145 -2 -8 -3 -15 -2 -15 2 0 4 -28 6 -62 5 -100 -2 -439
+-3 -486 0 -24 1 -45 1 -46 0z"/>
+<path d="M6486 4062 c-3 -5 1 -9 9 -9 8 0 12 4 9 9 -3 4 -7 8 -9 8 -2 0 -6 -4
+-9 -8z"/>
+<path d="M6446 4022 c-3 -5 1 -9 9 -9 8 0 12 4 9 9 -3 4 -7 8 -9 8 -2 0 -6 -4
+-9 -8z"/>
+<path d="M6290 3840 c0 -5 5 -10 11 -10 5 0 7 5 4 10 -3 6 -8 10 -11 10 -2 0
+-4 -4 -4 -10z"/>
+<path d="M6126 3658 c3 -5 10 -6 15 -3 13 9 11 12 -6 12 -8 0 -12 -4 -9 -9z"/>
+<path d="M6030 3576 c0 -2 8 -10 18 -17 15 -13 16 -12 3 4 -13 16 -21 21 -21
+13z"/>
+<path d="M5995 3511 c-3 -5 -2 -12 3 -15 5 -3 9 1 9 9 0 17 -3 19 -12 6z"/>
+<path d="M5895 3420 c-3 -5 -1 -10 4 -10 6 0 11 5 11 10 0 6 -2 10 -4 10 -3 0
+-8 -4 -11 -10z"/>
+<path d="M5590 3041 c0 -6 4 -13 10 -16 6 -3 7 1 4 9 -7 18 -14 21 -14 7z"/>
+<path d="M5535 2980 c3 -5 8 -10 11 -10 2 0 4 5 4 10 0 6 -5 10 -11 10 -5 0
+-7 -4 -4 -10z"/>
+<path d="M5506 2962 c-3 -5 1 -9 9 -9 8 0 12 4 9 9 -3 4 -7 8 -9 8 -2 0 -6 -4
+-9 -8z"/>
+<path d="M5357 2813 c-10 -9 -9 -23 1 -23 5 0 9 7 9 15 0 17 -1 18 -10 8z"/>
+<path d="M5356 2758 c3 -5 10 -6 15 -3 13 9 11 12 -6 12 -8 0 -12 -4 -9 -9z"/>
+<path d="M5193 2565 c0 -8 4 -12 9 -9 5 3 6 10 3 15 -9 13 -12 11 -12 -6z"/>
+<path d="M5120 2480 c-9 -6 -10 -10 -3 -10 6 0 15 5 18 10 8 12 4 12 -15 0z"/>
+<path d="M4935 2299 c-3 -4 2 -6 10 -5 21 3 28 13 10 13 -9 0 -18 -4 -20 -8z"/>
+<path d="M4529 1877 c6 -8 7 -18 3 -22 -4 -5 -1 -5 6 -1 10 6 10 11 1 22 -6 8
+-14 14 -16 14 -3 0 0 -6 6 -13z"/>
+<path d="M4255 1580 c-3 -5 -1 -10 4 -10 6 0 11 5 11 10 0 6 -2 10 -4 10 -3 0
+-8 -4 -11 -10z"/>
+<path d="M4235 1461 c-3 -5 -2 -12 3 -15 5 -3 9 1 9 9 0 17 -3 19 -12 6z"/>
+<path d="M3995 1280 c3 -5 8 -10 11 -10 2 0 4 5 4 10 0 6 -5 10 -11 10 -5 0
+-7 -4 -4 -10z"/>
+<path d="M3830 1036 c0 -2 8 -10 18 -17 15 -13 16 -12 3 4 -13 16 -21 21 -21
+13z"/>
+<path d="M3695 951 c-3 -5 -2 -12 3 -15 5 -3 9 1 9 9 0 17 -3 19 -12 6z"/>
+<path d="M3650 880 c0 -5 5 -10 11 -10 5 0 7 5 4 10 -3 6 -8 10 -11 10 -2 0
+-4 -4 -4 -10z"/>
+<path d="M3575 781 c-3 -5 -2 -12 3 -15 5 -3 9 1 9 9 0 17 -3 19 -12 6z"/>
+</g>
+</svg>
diff --git a/static/site.webmanifest b/static/site.webmanifest
new file mode 100644
index 000000000..adaf3a2d7
--- /dev/null
+++ b/static/site.webmanifest
@@ -0,0 +1,21 @@
+{
+  "name": "Zod",
+  "short_name": "Zod",
+  "icons": [
+    {
+      "src": "/android-chrome-192x192.png",
+      "sizes": "192x192",
+      "type": "image/png",
+      "purpose": "any maskable"
+    },
+    {
+      "src": "/android-chrome-512x512.png",
+      "sizes": "512x512",
+      "type": "image/png",
+      "purpose": "any maskable"
+    }
+  ],
+  "theme_color": "#ffffff",
+  "background_color": "#ffffff",
+  "display": "standalone"
+}
