diff --git a/README.md b/README.md
index 6f97a2835..4ca9838bf 100644
--- a/README.md
+++ b/README.md
@@ -1353,7 +1353,7 @@ All Zod schemas contain certain methods.
 
 Given any Zod schema, you can call its `.parse` method to check `data` is valid. If it is, a value is returned with full type information! Otherwise, an error is thrown.
 
-> IMPORTANT: In Zod 2 and Zod 1.11+, the value returned by `.parse` is a _deep clone_ of the variable you passed in. This was also the case in zod@1.4 and earlier.
+> IMPORTANT: The value returned by `.parse` is a _deep clone_ of the variable you passed in.
 
 ```ts
 const stringSchema = z.string();
diff --git a/deno/lib/ZodError.ts b/deno/lib/ZodError.ts
index 5e1b344d3..61db68caa 100644
--- a/deno/lib/ZodError.ts
+++ b/deno/lib/ZodError.ts
@@ -152,7 +152,7 @@ export type ZodFormattedError<T, U = string> = {
 } & (T extends [any, ...any[]]
   ? { [K in keyof T]?: ZodFormattedError<T[K]> }
   : T extends any[]
-  ? ZodFormattedError<T[number]>[]
+  ? { [k: number]: ZodFormattedError<T[number]> }
   : T extends object
   ? { [K in keyof T]?: ZodFormattedError<T[K]> }
   : unknown);
@@ -210,13 +210,14 @@ export class ZodError<T = any> extends Error {
             const terminal = i === issue.path.length - 1;
 
             if (!terminal) {
-              if (typeof el === "string") {
-                curr[el] = curr[el] || { _errors: [] };
-              } else if (typeof el === "number") {
-                const errorArray: any = [];
-                errorArray._errors = [];
-                curr[el] = curr[el] || errorArray;
-              }
+              curr[el] = curr[el] || { _errors: [] };
+              // if (typeof el === "string") {
+              //   curr[el] = curr[el] || { _errors: [] };
+              // } else if (typeof el === "number") {
+              //   const errorArray: any = [];
+              //   errorArray._errors = [];
+              //   curr[el] = curr[el] || errorArray;
+              // }
             } else {
               curr[el] = curr[el] || { _errors: [] };
               curr[el]._errors.push(mapper(issue));
diff --git a/package.json b/package.json
index 7c6c70ba2..4f7b9cb30 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "zod",
-  "version": "3.15.0",
+  "version": "3.15.1",
   "description": "TypeScript-first schema declaration and validation library with static type inference",
   "main": "./lib/index.js",
   "types": "./index.d.ts",
diff --git a/src/ZodError.ts b/src/ZodError.ts
index 3f214e2f6..1319844f8 100644
--- a/src/ZodError.ts
+++ b/src/ZodError.ts
@@ -152,7 +152,7 @@ export type ZodFormattedError<T, U = string> = {
 } & (T extends [any, ...any[]]
   ? { [K in keyof T]?: ZodFormattedError<T[K]> }
   : T extends any[]
-  ? ZodFormattedError<T[number]>[]
+  ? { [k: number]: ZodFormattedError<T[number]> }
   : T extends object
   ? { [K in keyof T]?: ZodFormattedError<T[K]> }
   : unknown);
@@ -210,13 +210,14 @@ export class ZodError<T = any> extends Error {
             const terminal = i === issue.path.length - 1;
 
             if (!terminal) {
-              if (typeof el === "string") {
-                curr[el] = curr[el] || { _errors: [] };
-              } else if (typeof el === "number") {
-                const errorArray: any = [];
-                errorArray._errors = [];
-                curr[el] = curr[el] || errorArray;
-              }
+              curr[el] = curr[el] || { _errors: [] };
+              // if (typeof el === "string") {
+              //   curr[el] = curr[el] || { _errors: [] };
+              // } else if (typeof el === "number") {
+              //   const errorArray: any = [];
+              //   errorArray._errors = [];
+              //   curr[el] = curr[el] || errorArray;
+              // }
             } else {
               curr[el] = curr[el] || { _errors: [] };
               curr[el]._errors.push(mapper(issue));
