diff --git a/.github/workflows/post_publish.yml b/.github/workflows/post_publish.yml
new file mode 100644
index 00000000000..196ed172986
--- /dev/null
+++ b/.github/workflows/post_publish.yml
@@ -0,0 +1,32 @@
+name: post_publish
+
+on:
+  release:
+    types: [published]
+
+jobs:
+  update-dl-version:
+    name: update dl.deno.land version
+    runs-on: ubuntu-22.04
+    if: github.repository == 'denoland/fresh'
+    steps:
+      - name: Checkout repo
+        uses: actions/checkout@v3
+
+      - name: Authenticate with Google Cloud
+        uses: google-github-actions/auth@v1
+        with:
+          project_id: denoland
+          credentials_json: ${{ secrets.GCP_SA_KEY }}
+          export_environment_variables: true
+          create_credentials_file: true
+
+      - name: Setup gcloud
+        uses: google-github-actions/setup-gcloud@v1
+        with:
+          project_id: denoland
+
+      - name: Upload version file to dl.deno.land
+        run: |
+          cat versions.json | jq -r ".[0]" > release-latest.txt
+          gsutil -h "Cache-Control: no-cache" cp release-latest.txt gs://dl.deno.land/fresh/release-latest.txt
diff --git a/.vscode/import_map.json b/.vscode/import_map.json
index 92204dd8d61..235bcbfb26e 100644
--- a/.vscode/import_map.json
+++ b/.vscode/import_map.json
@@ -8,9 +8,12 @@
     "twind/": "https://esm.sh/twind@0.16.19/",
     "preact": "https://esm.sh/preact@10.15.1",
     "preact/": "https://esm.sh/preact@10.15.1/",
-    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.1.0",
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.2.0",
     "@preact/signals": "https://esm.sh/*@preact/signals@1.1.3",
     "@preact/signals-core": "https://esm.sh/@preact/signals-core@1.2.3",
-    "$std/": "https://deno.land/std@0.190.0/"
+    "@preact/signals-core@1.2.3": "https://esm.sh/@preact/signals-core@1.2.3",
+    "@preact/signals-core@1.3.0": "https://esm.sh/@preact/signals-core@1.3.0",
+    "$std/": "https://deno.land/std@0.193.0/",
+    "$ga4": "https://raw.githubusercontent.com/denoland/ga4/main/mod.ts"
   }
 }
diff --git a/.vscode/settings.json b/.vscode/settings.json
index 74b914b015c..0e367099119 100644
--- a/.vscode/settings.json
+++ b/.vscode/settings.json
@@ -3,5 +3,17 @@
   "deno.lint": true,
   "deno.importMap": "./.vscode/import_map.json",
   "deno.codeLens.test": true,
-  "editor.defaultFormatter": "denoland.vscode-deno"
+  "editor.defaultFormatter": "denoland.vscode-deno",
+  "[typescriptreact]": {
+    "editor.defaultFormatter": "denoland.vscode-deno"
+  },
+  "[typescript]": {
+    "editor.defaultFormatter": "denoland.vscode-deno"
+  },
+  "[javascriptreact]": {
+    "editor.defaultFormatter": "denoland.vscode-deno"
+  },
+  "[javascript]": {
+    "editor.defaultFormatter": "denoland.vscode-deno"
+  }
 }
diff --git a/README.md b/README.md
index 281019dbe8c..17dbd8f94b7 100644
--- a/README.md
+++ b/README.md
@@ -25,7 +25,7 @@ The [documentation](https://fresh.deno.dev/docs/) is available on
 
 ## 🚀 Getting started
 
-Install [Deno CLI](https://deno.land/) version 1.25.0 or higher.
+Install [Deno CLI](https://deno.land/) version 1.35.0 or higher.
 
 You can scaffold a new project by running the Fresh init script. To scaffold a
 project run the following:
@@ -63,6 +63,11 @@ For a more in-depth getting started guide, visit the
 [Getting Started](https://fresh.deno.dev/docs/getting-started) page in the Fresh
 docs.
 
+## Contributing
+
+We appreciate your help! To contribute, please read our
+[contributing instructions](https://deno.com/manual/references/contributing#submitting-a-pr-to-fresh).
+
 ## Adding your project to the showcase
 
 If you feel that your project would be helpful to other fresh users, please
diff --git a/demo/deno.json b/demo/deno.json
index 5ca4a4f374f..4cd7f216d3e 100644
--- a/demo/deno.json
+++ b/demo/deno.json
@@ -7,7 +7,7 @@
     "$fresh/": "../",
     "preact": "https://esm.sh/preact@10.15.1",
     "preact/": "https://esm.sh/preact@10.15.1/",
-    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.1.0",
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.2.0",
     "@preact/signals": "https://esm.sh/*@preact/signals@1.1.3",
     "@preact/signals-core": "https://esm.sh/@preact/signals-core@1.2.3"
   },
diff --git a/docs/canary/the-canary-version/index.md b/docs/canary/the-canary-version/index.md
new file mode 100644
index 00000000000..9ec8f401d9f
--- /dev/null
+++ b/docs/canary/the-canary-version/index.md
@@ -0,0 +1,15 @@
+---
+description: |
+  Learn more about Fresh canary releases
+---
+
+The canary version represents the current development state of Fresh. It's
+intended for testing work in progress features before it lands in a stable
+release. Whenever new code is merged into the `main` branch on
+[GitHub](https://github.com/denoland/fresh) a new canary version is created that
+matches the hash of the git commit.
+
+With the addition of new features that are not yet in a stable release, we need
+a place to update our documentation. That's what this section of the
+documentation is about. It contains all information about unreleased features
+and changes that will land in a stable release.
diff --git a/docs/concepts/app-wrapper.md b/docs/concepts/app-wrapper.md
index 28e36640f4d..7d83bafcc82 100644
--- a/docs/concepts/app-wrapper.md
+++ b/docs/concepts/app-wrapper.md
@@ -7,15 +7,18 @@ An application wrapper is defined in an `_app.tsx` file in `routes/` folder. It
 must contain a default export that is a regular Preact component. Only one such
 wrapper is allowed per application.
 
-It receives component through props which is to be wrapped. For instance, it
-allows to introduce a global container for the whole application.
+The component to be wrapped is received via props, in addition to a few other
+things. This allows for the introduction of a global container functioning as a
+template which can be conditioned based on state and params. Note that any state
+set by middleware is available via `props.state`.
 
 ```tsx
 // routes/_app.tsx
 
 import { AppProps } from "$fresh/server.ts";
 
-export default function App({ Component }: AppProps) {
+export default function App({ Component, state }: AppProps) {
+  //do something with state here
   return (
     <div class="wrapper">
       <Component />
diff --git a/docs/concepts/deployment.md b/docs/concepts/deployment.md
index 051d0d54b62..14e3586dd97 100644
--- a/docs/concepts/deployment.md
+++ b/docs/concepts/deployment.md
@@ -36,7 +36,7 @@ caching **will** cause your project to not function correctly.
 Here is an example `Dockerfile` for a Fresh project:
 
 ```dockerfile
-FROM denoland/deno:1.33.2
+FROM denoland/deno:1.35.0
 
 ARG GIT_REVISION
 ENV DENO_DEPLOYMENT_ID=${GIT_REVISION}
diff --git a/docs/concepts/error-pages.md b/docs/concepts/error-pages.md
index d1a4d0780c1..dc5cd30d336 100644
--- a/docs/concepts/error-pages.md
+++ b/docs/concepts/error-pages.md
@@ -36,7 +36,9 @@ export const handler: Handlers = {
   async GET(req, ctx) {
     const blogpost = await fetchBlogpost(ctx.params.slug);
     if (!blogpost) {
-      return ctx.renderNotFound();
+      return ctx.renderNotFound({
+        custom: "prop",
+      });
     }
     return ctx.render({ blogpost });
   },
diff --git a/docs/concepts/islands.md b/docs/concepts/islands.md
index 39f4f08c1d5..4451445dfcf 100644
--- a/docs/concepts/islands.md
+++ b/docs/concepts/islands.md
@@ -9,12 +9,12 @@ components in Fresh, as they are usually just rendered on the server.
 
 Islands are defined by creating a file in the `islands/` folder in a Fresh
 project. The name of this file must be a PascalCase or kebab-case name of the
-island. The file must have a default export that is a regular Preact component.
+island.
 
 ```tsx
 // islands/MyIsland.tsx
 
-import type { Signal } from "@preact/signals";
+import { useSignal } from "@preact/signals";
 
 export default function MyIsland() {
   const count = useSignal(0);
@@ -34,9 +34,9 @@ care of automatically re-hydrating the island on the client.
 Passing props to islands is supported, but only if the props are serializable.
 Fresh can serialize the following types of values:
 
-- Primitive types `string`, `boolean`, and `null`
+- Primitive types `string`, `boolean`, `bigint`, and `null`
 - Most `number`s (`Infinity`, `-Infinity`, and `NaN` are silently converted to
-  `null`, and `bigint`s are not supported)
+  `null`)
 - Plain objects with string keys and serializable values
 - Arrays containing serializable values
 - Uint8Array
@@ -54,7 +54,7 @@ Islands support passing JSX elements via the `children` property. This allows
 you to pass static content rendered by the server to an island in the browser.
 
 ```jsx
-// file: /route/index.tsx
+// route/index.tsx
 import MyIsland from "../islands/my-island.tsx";
 
 export default function Home() {
@@ -78,7 +78,7 @@ like a normal Preact component, but still receive the serialized props if any
 were present.
 
 ```jsx
-// file: /route/index.tsx
+// route/index.tsx
 import MyIsland from "../islands/my-island.tsx";
 import OtherIsland from "../islands/other-island.tsx";
 
@@ -98,7 +98,7 @@ a way that's most optimal for your use app. We'll keep sending only the
 JavaScript that is needed for the islands to the browser.
 
 ```jsx
-// file: /route/index.tsx
+// route/index.tsx
 import MyIsland from "../islands/my-island.tsx";
 import OtherIsland from "../islands/other-island.tsx";
 
diff --git a/docs/concepts/middleware.md b/docs/concepts/middleware.md
index 473e70614f5..5f272f103ca 100644
--- a/docs/concepts/middleware.md
+++ b/docs/concepts/middleware.md
@@ -10,7 +10,10 @@ use-cases for this are logging, authentication, and performance monitoring.
 
 Each middleware gets passed a `next` function in the context argument that is
 used to trigger child handlers. The `ctx` also has a `state` property that can
-be used to pass arbitrary data to downstream (or upstream) handlers.
+be used to pass arbitrary data to downstream (or upstream) handlers. This
+`state` is included in `PageProps` by default, which is available to both the
+special [\_app](/docs/concepts/app-wrapper.md) wrapper and normal
+[routes](/docs/concepts/routes.md).
 
 ```ts
 // routes/_middleware.ts
@@ -47,11 +50,15 @@ specific first).
 
 For example, take a project with the following routes:
 
-- `routes/_middleware.ts`
-- `routes/index.ts`
-- `routes/admin/_middleware.ts`
-- `routes/admin/index.ts`
-- `routes/admin/signin.ts`
+```
+└── routes
+    ├── _middleware.ts
+    ├── index.ts
+    └── admin
+        ├── _middleware.ts
+        └── index.ts
+        └── signin.ts
+```
 
 For a request to `/` the request will flow like this:
 
@@ -90,3 +97,103 @@ export const handler = [
   },
 ];
 ```
+
+It should be noted that `middleware` has access to route parameters. If you're
+running a fictitious `routes/[tenant]/admin/_middleware.ts` like this:
+
+```ts
+import { MiddlewareHandlerContext } from "$fresh/server.ts";
+
+export async function handler(_req: Request, ctx: MiddlewareHandlerContext) {
+  const currentTenant = ctx.params.tenant;
+  //do something with the tenant
+  const resp = await ctx.next();
+  return resp;
+}
+```
+
+and the request is to `mysaas.com/acme/admin/`, then `currentTenant` will have
+the value of `acme` in your middleware.
+
+## Middleware Destination
+
+To set the stage for this section, `MiddlewareHandlerContext` looks like this:
+
+```ts
+export interface MiddlewareHandlerContext<State = Record<string, unknown>> {
+  next: () => Promise<Response>;
+  state: State;
+  destination: router.DestinationKind;
+  remoteAddr: {
+    transport: "tcp" | "udp";
+    hostname: string;
+    port: number;
+  };
+}
+```
+
+and `router.DestinationKind` is defined like this:
+
+```ts
+export type DestinationKind = "internal" | "static" | "route" | "notFound";
+```
+
+This is useful if you want your middleware to only run when a request is headed
+for a `route`, as opposed to something like `http://localhost:8001/favicon.ico`.
+
+### Example
+
+Initiate a new Fresh project (`deno run -A -r https://fresh.deno.dev/`) and then
+create a `_middleware.ts` file in the `routes` folder like this:
+
+```ts
+import { MiddlewareHandlerContext } from "$fresh/server.ts";
+
+export async function handler(req: Request, ctx: MiddlewareHandlerContext) {
+  console.log(ctx.destination);
+  console.log(req.url);
+  const resp = await ctx.next();
+  return resp;
+}
+```
+
+If you start up your server (`deno task start`) you'll see the following:
+
+```
+Task start deno run -A --watch=static/,routes/ dev.ts
+Watcher Process started.
+The manifest has been generated for 4 routes and 1 islands.
+
+ 🍋 Fresh ready
+    Local: http://localhost:8000/
+
+route
+http://localhost:8000/
+internal
+http://localhost:8000/_frsh/js/3c7400558fc00915df88cb181036c0dbf73ab7f5/deserializer.js
+internal
+http://localhost:8000/_frsh/js/3c7400558fc00915df88cb181036c0dbf73ab7f5/signals.js
+internal
+http://localhost:8000/_frsh/js/3c7400558fc00915df88cb181036c0dbf73ab7f5/plugin-twind-main.js
+internal
+http://localhost:8000/_frsh/js/3c7400558fc00915df88cb181036c0dbf73ab7f5/main.js
+internal
+http://localhost:8000/_frsh/js/3c7400558fc00915df88cb181036c0dbf73ab7f5/island-counter.js
+internal
+http://localhost:8000/_frsh/refresh.js
+static
+http://localhost:8000/logo.svg?__frsh_c=3c7400558fc00915df88cb181036c0dbf73ab7f5
+internal
+http://localhost:8000/_frsh/alive
+internal
+http://localhost:8000/_frsh/js/3c7400558fc00915df88cb181036c0dbf73ab7f5/chunk-PDMKJVJ5.js
+internal
+http://localhost:8000/_frsh/js/3c7400558fc00915df88cb181036c0dbf73ab7f5/chunk-UGFDDSOV.js
+internal
+http://localhost:8000/_frsh/js/3c7400558fc00915df88cb181036c0dbf73ab7f5/chunk-RCK7U3UF.js
+```
+
+That first `route` request is for when `Fresh` responds with the root level
+`index.tsx` route. The rest, as you can see, are either `internal` or `static`
+requests. You can use `ctx.destination` to filter these out if your middleware
+is only supposed to deal with routes.
diff --git a/docs/concepts/plugins.md b/docs/concepts/plugins.md
index 4ce4d7d6508..c86e3c07fc2 100644
--- a/docs/concepts/plugins.md
+++ b/docs/concepts/plugins.md
@@ -2,8 +2,6 @@
 description: Plugins can add new functionality to Fresh without requiring significant complexity.
 ---
 
-> Plugins are only available in Fresh 1.1 and above.
-
 Plugins can dynamically add new functionality to Fresh without exposing
 significant complexity to the user. Users can add plugins by importing and
 initializing them in their `main.ts` file:
@@ -42,7 +40,7 @@ available (explained below).
 
 A Fresh plugin is just a JavaScript object that conforms to the
 [Plugin](https://deno.land/x/fresh/server.ts?s=Plugin) interface. The only
-required property of a plugin is it's name. Names must only contain the
+required property of a plugin is its name. Names must only contain the
 characters `a`-`z`, and `_`.
 
 ```ts
@@ -54,7 +52,8 @@ const plugin: Plugin = {
 ```
 
 A plugin containing only a name is technically valid, but not very useful. To be
-able to do anything with a plugin, it must register some hooks.
+able to do anything with a plugin, it must register some hooks, middlewares, or
+routes.
 
 ### Hook: `render`
 
@@ -109,7 +108,7 @@ asynchronously return its
 either from an `async/await` function or wrapped within a promise.
 
 The render hook is called with the
-[`AsyncPluginRenderContext`](https://deno.land/x/fresh/server.ts?s=AsyncPluginRenderContext)
+[`PluginAsyncRenderContext`](https://deno.land/x/fresh/server.ts?s=PluginAsyncRenderContext)
 object, which contains a `renderAsync()` method. This method must be invoked
 during the render hook to actually render the page. It is a terminal error to
 not call the `renderAsync()` method during the render hook.
@@ -125,3 +124,19 @@ all rendering is complete -- they wrap around the underlying JSX->string
 rendering, plugin `render` hooks, and the
 [`RenderFunction`](https://deno.land/x/fresh/server.ts?s=RenderFunction) that
 may be provided to Fresh's `start` entrypoint in the `main.ts` file.
+
+### Routes and Middlewares
+
+You can create routes and middlewares that get loaded and rendered like the
+normal [routes](/docs/concepts/routes) and
+[middlewares](/docs/concepts/middleware).
+
+The plugin routes and middlewares need a defined path in the format of a file
+name without a filetype inside the routes directory(E.g. `blog/index`,
+`blog/[slug]`).
+
+For more examples see the [Concepts: Routing](/docs/concepts/routing) page.
+
+To create a middleware you need to create a `MiddlewareHandler` function.
+
+And to create a route you can create both a Handler and/or component.
diff --git a/docs/concepts/routes.md b/docs/concepts/routes.md
index 08c9a97be76..f0487b39603 100644
--- a/docs/concepts/routes.md
+++ b/docs/concepts/routes.md
@@ -17,8 +17,9 @@ passed a `render` function that it can call to invoke rendering a component.
 The component is the template for a page. It is a JSX element that is rendered
 on the server. The page component gets passed props that can be used by it to
 determine exactly what should be rendered. By default components receives props
-consisting of: the request URL, the matches from the URL pattern match, and any
-data passed to the handler's `render` function.
+consisting of: the request URL, the matching route (as a string), the matches
+from the URL pattern match, any state set by middleware, and any data passed to
+the handler's `render` function.
 
 ## Handler route
 
@@ -87,3 +88,57 @@ export default function Page(props: PageProps) {
   return <div>You are on the page '{props.url.href}'.</div>;
 }
 ```
+
+## Async route components
+
+Having a separate route handler and component function is nice, when you want to
+test these in isolation, but can become a bit cumbersome to maintain. They
+require some additional indirection of declaring an interface for the component
+`Data` when you're passing it around through `ctx.render()`.
+
+```tsx
+interface Data {
+  foo: number;
+}
+
+export const handler: Handlers<Data> = {
+  async GET(req, ctx) {
+    const value = await loadFooValue();
+    ctx.render({ foo: value });
+  },
+};
+
+export default function MyPage(props: PageProps<Data>) {
+  return <p>foo is: {props.data.foo}</p>;
+}
+```
+
+When a route has both a component and a `GET` handler, they are typically very
+closely coupled. With async route components you can merge the two together and
+avoid having to create the `Data` interface boilerplate.
+
+```tsx
+// Async route component
+export default async function MyPage(req: Request, ctx: RouteContext) {
+  const value = await loadFooValue();
+  return <p>foo is: {value}</p>;
+}
+```
+
+The code gets a little shorter with async route components. Conceptually, you
+can think of async route components inlining the `GET` handler into the
+component function. Note, that you can still add additional HTTP handlers in the
+same file like before.
+
+```tsx
+export const handler: Handlers = {
+  async POST(req) {
+    // ... do something here
+  },
+};
+
+export default async function MyPage(req: Request, ctx: RouteContext) {
+  const value = await loadFooValue();
+  return <p>foo is: {value}</p>;
+}
+```
diff --git a/docs/concepts/server-components.md b/docs/concepts/server-components.md
new file mode 100644
index 00000000000..47791b0b0c4
--- /dev/null
+++ b/docs/concepts/server-components.md
@@ -0,0 +1,17 @@
+---
+description: |
+  Fresh's architecture is designed to leverage server components by default.
+---
+
+If you've read about Fresh's [architecture](/docs/concepts/architecture) then
+you know that it's based on the islands architecture pattern. The flip side of
+this is that everything else is, by default, a server component. When you
+[create a route](/docs/getting-started/create-a-route), all of the components
+used are rendered on the server. No javascript is sent to the client, unless you
+specifically include something from the `/islands/` folder.
+
+Internally, Fresh's rendering heavily leverages
+[preact-render-to-string](https://github.com/preactjs/preact-render-to-string).
+This is the exact library mentioned on Preact's
+[Server-Side Rendering](https://preactjs.com/guide/v10/server-side-rendering/)
+article.
diff --git a/docs/concepts/server-configuration.md b/docs/concepts/server-configuration.md
index 93f446f296f..393dad8adfb 100644
--- a/docs/concepts/server-configuration.md
+++ b/docs/concepts/server-configuration.md
@@ -17,19 +17,10 @@ export async function start(routes: Manifest, opts: StartOptions = {});
 things get interesting. `StartOptions` looks like this:
 
 ```
-export type StartOptions = ServeInit & FreshOptions & {
-  /**
-   * UNSTABLE: use the `Deno.serve` API as the underlying HTTP server instead of
-   * the `std/http` API. Do not use this in production.
-   *
-   * This option is experimental and may be removed in a future Fresh release.
-   */
-  experimentalDenoServe?: boolean;
-};
+export type StartOptions = ServeInit & FreshOptions;
 ```
 
-You can play around with `Deno.serve` if you'd like, but heed the warning. The
-good stuff is really in...
+The good stuff is really in...
 
 ```ts
 export interface FreshOptions {
@@ -58,7 +49,7 @@ export interface RouterOptions {
 
 ## Plugins
 
-See the [docs](./docs/concepts/plugins) on this topic for more detail. But for
+See the [docs](/docs/concepts/plugins) on this topic for more detail. But for
 completion, you can do something like this to load plugins:
 
 ```ts
@@ -80,7 +71,7 @@ This is by far the most complicated option currently available. It allows you to
 configure how your components get rendered.
 
 A detailed, concrete example of this is changing the language of the `<html>`
-tag. See the documentation [here](./docs/examples/setting-the-language.md).
+tag. See the documentation [here](/docs/examples/setting-the-language).
 
 ## RouterOptions
 
diff --git a/docs/concepts/static-files.md b/docs/concepts/static-files.md
index 8dd0677042a..a2771402f10 100644
--- a/docs/concepts/static-files.md
+++ b/docs/concepts/static-files.md
@@ -42,7 +42,7 @@ export default function Page() {
 ```
 
 Fresh also does this automatically for `src` and `srcset` attributes in `<img>`
-and `<source>` HTML tags. These will automatically use "locked" paths if fresh
+and `<source>` HTML tags. These will automatically use "locked" paths if Fresh
 deems it safe to do so. You can always opt out of this behaviour per tag, by
 adding the `data-fresh-disable-lock` attribute.
 
diff --git a/docs/concepts/updating.md b/docs/concepts/updating.md
index 44973b77ad7..83c7aaeb29e 100644
--- a/docs/concepts/updating.md
+++ b/docs/concepts/updating.md
@@ -1,6 +1,6 @@
 ---
 description: |
-  Fresh regularly releases new versions of the framework. This page explains how to update your project.
+  New versions of Fresh are regularly released. This page explains how to update your project.
 ---
 
 Fresh constists of multiple pieces which are independently versioned and
@@ -74,6 +74,12 @@ Fresh 1.0.2 to 1.1.3, and update Preact to the latest version:
   }
 ```
 
+## Automatic update checks
+
+Fresh will periodically check if a new Fresh version is available if it's
+running outside of CI. This happens once per day and can be disabled by setting
+the `FRESH_NO_UPDATE_CHECK=true` environment variable.
+
 ## Code mods
 
 Code mods are small scripts that can be run to update your project's code to
diff --git a/docs/examples/changing-the-src-dir.md b/docs/examples/changing-the-src-dir.md
index f4501d7bbb6..e7f2990362d 100644
--- a/docs/examples/changing-the-src-dir.md
+++ b/docs/examples/changing-the-src-dir.md
@@ -18,9 +18,11 @@ you'll end up with a project like the following:
 │   └── Counter.tsx
 ├── main.ts
 ├── routes
-│   ├── [name].tsx
+│   ├── greet
+│   │   ├── [name].tsx
 │   ├── api
 │   │   └── joke.ts
+│   ├── _404.tsx
 │   └── index.tsx
 └── static
     ├── favicon.ico
@@ -64,9 +66,11 @@ The resulting file structure looks like this:
     │   └── Counter.tsx
     ├── main.ts
     ├── routes
-    │   ├── [name].tsx
+    │   ├── greet
+    │   │   ├── [name].tsx
     │   ├── api
     │   │   └── joke.ts
+    │   ├── _404.tsx
     │   └── index.tsx
     └── static
         ├── favicon.ico
diff --git a/docs/examples/creating-a-crud-api.md b/docs/examples/creating-a-crud-api.md
new file mode 100644
index 00000000000..62497783e63
--- /dev/null
+++ b/docs/examples/creating-a-crud-api.md
@@ -0,0 +1,271 @@
+---
+description: |
+  Use HTTP CRUD methods to perform operations on resources. Learn how to use HTTP handlers to create a RESTful API.
+---
+
+The MDN [docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods) are a
+great resource to learn more about HTTP methods. We'll touch on the four
+fundamental methods necessary to create a basic CRUD (create, read, update,
+delete) API here. Additionally, we'll briefly mention CORS requests and how
+`OPTIONS` comes into play.
+
+Using HTTP methods is a common way to create a REST API. Fresh supports common
+HTTP methods in handlers out of the box. Async HTTP requests are also supported.
+Read more about custom handlers [here](/docs/getting-started/custom-handlers).
+
+In this example we'll be creating a small API that uses
+[Deno KV](https://deno.com/kv) to store users in a database.
+
+Our project structure will look like this (in addition to the rest of the Fresh
+code from a new project):
+
+```
+├── routes
+│   └── api
+│       └── users
+│           ├── [id].ts
+│           └── index.ts
+```
+
+In each section about a method, only the relevant handler will be shown. The
+full files are available at the bottom for reference.
+
+## POST
+
+`POST` (create) is used to create a resource.
+
+```tsx
+// routes/api/users/index.ts
+export const handler: Handlers<User | null> = {
+  async POST(req, _ctx) {
+    const user = await req.json() as User;
+    const userKey = ["user", user.id];
+    const ok = await kv.atomic()
+      .set(userKey, user)
+      .commit();
+    if (!ok) throw new Error("Something went wrong.");
+    return new Response(JSON.stringify(user));
+  },
+};
+```
+
+Test this with Postman (or your favorite client) with a URL like
+`http://localhost:8000/api/users` and a method of `POST`. Make sure to have a
+payload like:
+
+```json
+{
+  "id": "2",
+  "name": "TestUserName"
+}
+```
+
+You should receive the same thing back:
+
+```json
+{ "id": "2", "name": "TestUserName" }
+```
+
+## GET
+
+`GET` (read) is used to retrieve a resource and is by far the most common HTTP
+method. You can use `GET` to fetch database content, markdown, or static files.
+
+```tsx
+// routes/api/users/[id].ts
+export const handler: Handlers<User | null> = {
+  async GET(_req, ctx) {
+    const id = ctx.params.id;
+    const key = ["user", id];
+    const user = (await kv.get<User>(key)).value!;
+    return new Response(JSON.stringify(user));
+  },
+};
+```
+
+Let's practice retrieving our user! A `GET` request to
+`http://localhost:8000/api/users/2` should return:
+
+```json
+{ "id": "2", "name": "TestUserName" }
+```
+
+## PUT (and PATCH)
+
+`PUT` (update) and `PATCH` are used to update a resource. While similar, there
+are differences and you should use the one that best suits your use case. Read
+more about HTTP methods on
+[MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods).
+
+The short version of it: `PUT` requires the entire object to be submitted, while
+`PATCH` requires only the properties that are different to be submitted.
+
+An example of an update endpoint using `PUT`:
+
+```tsx
+// routes/api/users/[id].ts
+export const handler: Handlers<User | null> = {
+  async PUT(req, ctx) {
+    const id = ctx.params.id;
+    const user = await req.json() as User;
+    const userKey = ["user", id];
+    const userRes = await kv.get(userKey);
+    if (!userRes.value) return new Response(`no user with id ${id} found`);
+    const ok = await kv.atomic()
+      .check(userRes)
+      .set(userKey, user)
+      .commit();
+    if (!ok) throw new Error("Something went wrong.");
+    return new Response(JSON.stringify(user));
+  },
+};
+```
+
+Time to change their name. We'll now `PUT` a request to
+`http://localhost:8000/api/users/2` like:
+
+```json
+{
+  "id": "2",
+  "name": "New Name"
+}
+```
+
+We should receive:
+
+```json
+{ "id": "2", "name": "New Name" }
+```
+
+If, on the other hand, we chose to implement this as a `PATCH` operation, the
+request would just involve the changed property like this:
+
+```json
+{
+  "name": "New Name"
+}
+```
+
+No need to send in the id in this case.
+
+## DELETE
+
+`DELETE` (delete) is used to delete a resource.
+
+```tsx
+// routes/api/users/[id].ts
+export const handler: Handlers<User | null> = {
+  async DELETE(_req, ctx) {
+    const id = ctx.params.id;
+    const userKey = ["user", id];
+    const userRes = await kv.get(userKey);
+    if (!userRes.value) return new Response(`no user with id ${id} found`);
+    const ok = await kv.atomic()
+      .check(userRes)
+      .delete(userKey)
+      .commit();
+    if (!ok) throw new Error("Something went wrong.");
+    return new Response(`user ${id} deleted`);
+  },
+};
+```
+
+Try sending `DELETE` to `http://localhost:8000/api/users/2` without a body.
+We'll get back:
+
+```
+user 2 deleted
+```
+
+## OPTIONS
+
+Options can be used for some advanced cases, including implementing preflight
+request checks for complex CORS use cases. See more on the
+[CORS documentation](/docs/examples/dealing-with-cors).
+
+## Full File Reference
+
+<details>
+<summary>[id].ts</summary>
+
+```ts
+import { Handlers } from "$fresh/server.ts";
+
+type User = {
+  id: string;
+  name: string;
+};
+
+const kv = await Deno.openKv();
+
+export const handler: Handlers<User | null> = {
+  async GET(_req, ctx) {
+    const id = ctx.params.id;
+    const key = ["user", id];
+    const user = (await kv.get<User>(key)).value!;
+    return new Response(JSON.stringify(user));
+  },
+  async DELETE(_req, ctx) {
+    const id = ctx.params.id;
+    const userKey = ["user", id];
+    const userRes = await kv.get(userKey);
+    if (!userRes.value) return new Response(`no user with id ${id} found`);
+    const ok = await kv.atomic()
+      .check(userRes)
+      .delete(userKey)
+      .commit();
+    if (!ok) throw new Error("Something went wrong.");
+    return new Response(`user ${id} deleted`);
+  },
+  async PUT(req, ctx) {
+    const id = ctx.params.id;
+    const user = await req.json() as User;
+    const userKey = ["user", id];
+    const userRes = await kv.get(userKey);
+    if (!userRes.value) return new Response(`no user with id ${id} found`);
+    const ok = await kv.atomic()
+      .check(userRes)
+      .set(userKey, user)
+      .commit();
+    if (!ok) throw new Error("Something went wrong.");
+    return new Response(JSON.stringify(user));
+  },
+};
+```
+
+</details>
+
+<details>
+<summary>index.ts</summary>
+
+```ts
+import { Handlers } from "$fresh/server.ts";
+
+type User = {
+  id: string;
+  name: string;
+};
+
+const kv = await Deno.openKv();
+
+export const handler: Handlers<User | null> = {
+  async GET(_req, _ctx) {
+    const users = [];
+    for await (const res of kv.list({ prefix: ["user"] })) {
+      users.push(res.value);
+    }
+    return new Response(JSON.stringify(users));
+  },
+  async POST(req, _ctx) {
+    const user = await req.json() as User;
+    const userKey = ["user", user.id];
+    const ok = await kv.atomic()
+      .set(userKey, user)
+      .commit();
+    if (!ok) throw new Error("Something went wrong.");
+    return new Response(JSON.stringify(user));
+  },
+};
+```
+
+</details>
diff --git a/docs/examples/dealing-with-cors.md b/docs/examples/dealing-with-cors.md
new file mode 100644
index 00000000000..2e1303d209a
--- /dev/null
+++ b/docs/examples/dealing-with-cors.md
@@ -0,0 +1,101 @@
+---
+description: |
+  CORS enabling routes in your Fresh project.
+---
+
+So you've encountered some CORS problems and are on the hunt for the solution?
+You're in the right spot.
+
+Here's a good [resource](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)
+talking about CORS in general, in case you don't fully understand what's wrong.
+
+## Simple CORS -- Middleware
+
+As per the above link, "simple" requests involve `GET`, `HEAD`, or `POST`
+requests. You can CORS enable all the routes affected by some `middleware` by
+doing the following:
+
+```ts
+import { MiddlewareHandlerContext } from "$fresh/server.ts";
+
+export async function handler(
+  req: Request,
+  ctx: MiddlewareHandlerContext,
+) {
+  const origin = req.headers.get("Origin") || "*";
+  const resp = await ctx.next();
+  const headers = resp.headers;
+
+  headers.set("Access-Control-Allow-Origin", origin);
+  headers.set("Access-Control-Allow-Credentials", "true");
+  headers.set(
+    "Access-Control-Allow-Headers",
+    "Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization, accept, origin, Cache-Control, X-Requested-With",
+  );
+  headers.set(
+    "Access-Control-Allow-Methods",
+    "POST, OPTIONS, GET, PUT, DELETE",
+  );
+
+  return resp;
+}
+```
+
+## Complex CORS -- Middleware
+
+What about for one of the other HTTP methods? Then you'll need to be able to
+deal with "preflight requests". Let's imagine you're trying to support a
+`DELETE` route. Then you'd need to do something like this:
+
+```ts
+import { MiddlewareHandlerContext } from "$fresh/server.ts";
+
+export async function handler(
+  _req: Request,
+  ctx: MiddlewareHandlerContext,
+) {
+  if (_req.method == "OPTIONS") {
+    const resp = new Response(null, {
+      status: 204,
+    });
+    const origin = _req.headers.get("Origin") || "*";
+    const headers = resp.headers;
+    headers.set("Access-Control-Allow-Origin", origin);
+    headers.set(
+      "Access-Control-Allow-Methods",
+      "DELETE",
+    );
+    return resp;
+  }
+  const origin = _req.headers.get("Origin") || "*";
+  const resp = await ctx.next();
+  const headers = resp.headers;
+
+  headers.set("Access-Control-Allow-Origin", origin);
+  headers.set("Access-Control-Allow-Credentials", "true");
+  headers.set(
+    "Access-Control-Allow-Headers",
+    "Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization, accept, origin, Cache-Control, X-Requested-With",
+  );
+  headers.set(
+    "Access-Control-Allow-Methods",
+    "POST, OPTIONS, GET, PUT, DELETE",
+  );
+
+  return resp;
+}
+```
+
+These complex results require a two step process:
+
+1. the browser makes an `OPTIONS` request to find out about the allowed methods
+2. the browser makes the actual request
+
+So you can see the middleware has some special handling to deal with `OPTIONS`
+requests.
+
+## CORS in Routes
+
+Of course there's no reason why you need to use middleware in order to solve
+this. The headers can be set directly in the
+[handler](/docs/getting-started/custom-handlers) as well.
diff --git a/docs/examples/handling-complex-routes.md b/docs/examples/handling-complex-routes.md
new file mode 100644
index 00000000000..eb68af84a3c
--- /dev/null
+++ b/docs/examples/handling-complex-routes.md
@@ -0,0 +1,87 @@
+---
+description: |
+  Sometimes URL based routing isn't enough.
+---
+
+The page on [routing](/concepts/routing) hints at complex routing based on URL
+patterns using a `RouteConfig` object. Let's dive into this in a bit more
+detail.
+
+A `RouteConfig` has a `routeOverride` string property, which makes use of the
+[URL Pattern API](https://developer.mozilla.org/en-US/docs/Web/API/URL_Pattern_API).
+Here you can define named groups, wildcards, regex groups, and other bits.
+
+## Simple Route Config
+
+Let's look at the example from the routing page more closely. We'll flesh out
+the handler so that we end up with something like the following:
+
+```ts
+import { HandlerContext, RouteConfig } from "$fresh/server.ts";
+
+export const handler = {
+  GET(_req: Request, { params }: HandlerContext) {
+    console.log(params);
+    return new Response(params.path);
+  },
+};
+
+export const config: RouteConfig = {
+  routeOverride: "/x/:module@:version/:path*",
+};
+```
+
+Now if we hit the server with a request like
+`http://localhost:8000/x/bestModule@1.33.7/asdf`, then logging the params will
+show the following:
+
+```
+{
+  module: "bestModule",
+  version: "1.33.7",
+  path: "asdf"
+}
+```
+
+## Complex Route Config
+
+Let's look at something a bit more complex:
+
+```ts
+import { HandlerContext, RouteConfig } from "$fresh/server.ts";
+
+export const handler = {
+  GET(_req: Request, { params }: HandlerContext) {
+    console.log(params);
+    return new Response(params.path);
+  },
+};
+
+export const config: RouteConfig = {
+  routeOverride: "/api/db/:resource(jobs?|bar)/:id(\\d+)?",
+};
+```
+
+Values are available via `params.resource` and `params.id`.
+
+Here are some example URLs that match this:
+
+- /api/db/bar/1
+- /api/db/jobs/1
+- /api/db/job/1
+- /api/db/job
+- /api/db/jobs
+- /api/db/bar
+
+Here are some that don't:
+
+- /api/db/other/123
+- /api/db/jobs/abc
+- /api/db
+
+## Regex
+
+At this point is should be clear that this is essentially an exercise in
+understanding regex. There are [numerous](https://regexr.com/)
+[resources](https://regex101.com/) [available](https://chat.openai.com/) for
+getting assistance with regex.
diff --git a/docs/examples/index.md b/docs/examples/index.md
index 852b49201b5..b560c7e5627 100644
--- a/docs/examples/index.md
+++ b/docs/examples/index.md
@@ -11,4 +11,12 @@ like to see here, please open
 - [Modifying the `<head>`](./examples/modifying-the-head)
 - [Setting the language](./examples/setting-the-language)
 - [Writing tests](./examples/writing-tests)
-- [Changing the source directory](./changing-the-src-dir.md)
+- [Changing the source directory](./examples/changing-the-src-dir)
+- [Initializing the server](./examples/init-the-server)
+- [Using Fresh canary version](./examples/using-fresh-canary-version)
+- [Dealing with CORS](./examples/dealing-with-cors)
+- [Creating a CRUD API](./examples/creating-a-crud-api)
+- [Handling complex routes](./examples/handling-complex-routes)
+- [Rendering markdown](./examples/rendering-markdown)
+- [Sharing state between islands](./examples/sharing-state-between-islands)
+- [Using Deno KV Oauth](./examples/using-deno-kv-oauth)
diff --git a/docs/examples/init-the-server.md b/docs/examples/init-the-server.md
new file mode 100644
index 00000000000..855067c3146
--- /dev/null
+++ b/docs/examples/init-the-server.md
@@ -0,0 +1,79 @@
+---
+description: |
+  For when you have some complicated setup that needs to be performed once.
+---
+
+Let's pretend you've just initialized a new Fresh project. You want to do some
+complicated setup that runs once, before the server is started. This is,
+fortunately, quite easy. Here's how:
+
+```diff
+ import { start } from "$fresh/server.ts";
+ import manifest from "./fresh.gen.ts";
++import { Context } from "./routes/_middleware.ts";
+
++await Context.init();
+ await start(manifest);
+```
+
+So your full `main.ts` should look like this:
+
+```ts
+/// <reference no-default-lib="true" />
+/// <reference lib="dom" />
+/// <reference lib="dom.iterable" />
+/// <reference lib="dom.asynciterable" />
+/// <reference lib="deno.ns" />
+
+import "$std/dotenv/load.ts";
+
+import { start } from "$fresh/server.ts";
+import manifest from "./fresh.gen.ts";
+import { Context } from "./routes/_middleware.ts";
+
+await Context.init();
+await start(manifest);
+```
+
+But what's going on in this new `_middleware.ts` we've created?
+
+```ts
+import { MiddlewareHandlerContext } from "$fresh/server.ts";
+
+export interface State {
+  context: Context;
+}
+
+export class Context {
+  private static context: Context;
+  private complicatedStartupValue: number;
+
+  public constructor() {
+    // presumably this involves connecting to a
+    // database or doing some heavy computation
+    this.complicatedStartupValue = 42;
+  }
+
+  public static async init() {
+    Context.context = new Context();
+  }
+
+  public static instance() {
+    if (this.context) return this.context;
+    else throw new Error("Context is not initialized!");
+  }
+}
+
+export async function handler(
+  req: Request,
+  ctx: MiddlewareHandlerContext<State>,
+) {
+  ctx.state.context = Context.instance();
+  const resp = await ctx.next();
+  return resp;
+}
+```
+
+So now in this `handler` (or any other `handler` functions you create) you can
+have access to the complicated initialization step by calling
+`Context.instance()`.
diff --git a/docs/examples/rendering-markdown.md b/docs/examples/rendering-markdown.md
new file mode 100644
index 00000000000..55fb6b73f96
--- /dev/null
+++ b/docs/examples/rendering-markdown.md
@@ -0,0 +1,101 @@
+---
+description: |
+  How to render markdown on your Fresh site.
+---
+
+What if you want to render some markdown on your site? There are a few
+possibilities:
+
+1. the markdown is coming from a remote source
+2. the markdown is defined in a string
+3. the markdown is on a file
+
+The following file uses
+[dynamic routing](https://fresh.deno.dev/docs/getting-started/dynamic-routes) to
+handle the three cases. It's assumed this file is called `[slug].tsx`:
+
+```ts
+// routes/[slug].tsx
+import { Handlers, PageProps } from "$fresh/server.ts";
+import { extract } from "$std/front_matter/yaml.ts";
+import { CSS, render } from "$gfm";
+import { Head } from "$fresh/runtime.ts";
+
+interface Page {
+  markdown: string;
+  data: Record<string, unknown>;
+}
+
+export const handler: Handlers<Page> = {
+  async GET(_req, ctx) {
+    let rawMarkdown = "";
+    if (ctx.params.slug === "remote") {
+      const resp = await fetch(
+        `https://raw.githubusercontent.com/denoland/fresh/main/docs/introduction/index.md`,
+      );
+      if (resp.status !== 200) {
+        return ctx.render(undefined);
+      }
+      rawMarkdown = await resp.text();
+    } else if (ctx.params.slug === "string") {
+      rawMarkdown = `---
+description: test
+---
+
+## big text
+
+Look, it's working. _This is in italics._
+      
+      `;
+    } else if (ctx.params.slug === "file") {
+      rawMarkdown = await Deno.readTextFile("text.md");
+    } else {
+      return ctx.render(undefined);
+    }
+    const { attrs, body } = extract(rawMarkdown);
+    return ctx.render({ markdown: body, data: attrs });
+  },
+};
+
+export default function MarkdownPage({ data }: PageProps<Page | null>) {
+  if (!data) {
+    return <h1>File not found.</h1>;
+  }
+
+  return (
+    <>
+      <Head>
+        <style dangerouslySetInnerHTML={{ __html: CSS }} />
+      </Head>
+      <main>
+        <div>{JSON.stringify(data.data)}</div>
+        <div
+          class="markdown-body"
+          dangerouslySetInnerHTML={{ __html: render(data?.markdown) }}
+        />
+      </main>
+    </>
+  );
+}
+```
+
+The contents of the `text.md` file are the following:
+
+```md
+---
+description: testFromText
+---
+
+# Really Big Text
+
+**bold**
+```
+
+You'll also need to import the `Github Flavored Markdown` module:
+
+```json
+"$gfm": "https://deno.land/x/gfm@0.2.3/mod.ts",
+```
+
+Andy has a helpful [post](https://deno.com/blog/build-a-blog-with-fresh) on the
+Deno Blog which goes into a slightly more realistic example.
diff --git a/docs/examples/setting-the-language.md b/docs/examples/setting-the-language.md
index cb09101259e..645ec49e121 100644
--- a/docs/examples/setting-the-language.md
+++ b/docs/examples/setting-the-language.md
@@ -6,7 +6,7 @@ description: |
 When you initialize a project with `deno run -A -r https://fresh.deno.dev`,
 you'll end up with a `main.ts` like the following:
 
-```
+```ts
 /// <reference no-default-lib="true" />
 /// <reference lib="dom" />
 /// <reference lib="dom.iterable" />
@@ -26,7 +26,7 @@ This is a great start if your site is in English, but let's say you want to
 change the language, as per the `<html lang=asdf>` tag. Then you'll need to do
 something like this:
 
-```
+```ts
 /// <reference no-default-lib="true" />
 /// <reference lib="dom" />
 /// <reference lib="dom.iterable" />
diff --git a/docs/examples/sharing-state-between-islands.md b/docs/examples/sharing-state-between-islands.md
new file mode 100644
index 00000000000..62ba827c0da
--- /dev/null
+++ b/docs/examples/sharing-state-between-islands.md
@@ -0,0 +1,195 @@
+---
+description: |
+  When you need to have state shared between islands, this page provides a few recipes.
+---
+
+All of this content is lifted from this great
+[example](https://fresh-with-signals.deno.dev/) by Luca. The source can be found
+[here](https://github.com/lucacasonato/fresh-with-signals).
+
+## Multiple Sibling Islands with Independent State
+
+Imagine we have `Counter.tsx` like this:
+
+```ts
+// islands/Counter.tsx
+import { useSignal } from "@preact/signals";
+import { Button } from "../components/Button.tsx";
+
+interface CounterProps {
+  start: number;
+}
+
+// This island is used to display a counter and increment/decrement it. The
+// state for the counter is stored locally in this island.
+export default function Counter(props: CounterProps) {
+  const count = useSignal(props.start);
+  return (
+    <div class="flex gap-2 items-center w-full">
+      <p class="flex-grow-1 font-bold text-xl">{count}</p>
+      <Button onClick={() => count.value--}>-1</Button>
+      <Button onClick={() => count.value++}>+1</Button>
+    </div>
+  );
+}
+```
+
+Note how `useSignal` is within the `Counter` component. Then if we instantiate
+some counters like this...
+
+```ts
+<Counter start={3} />
+<Counter start={4} />
+```
+
+they'll keep track of their own independent state. Not much sharing going on
+here, yet.
+
+## Multiple Sibling Islands with Shared State
+
+But we can switch things up by looking at a `SynchronizedSlider.tsx` like this:
+
+```ts
+// islands/SynchronizedSlider.tsx
+import { Signal } from "@preact/signals";
+
+interface SliderProps {
+  slider: Signal<number>;
+}
+
+// This island displays a slider with a value equal to the `slider` signal's
+// value. When the slider is moved, the `slider` signal is updated.
+export default function SynchronizedSlider(props: SliderProps) {
+  return (
+    <input
+      class="w-full"
+      type="range"
+      min={1}
+      max={100}
+      value={props.slider.value}
+      onInput={(e) => props.slider.value = Number(e.currentTarget.value)}
+    />
+  );
+}
+```
+
+Now if we were to do the following...
+
+```ts
+// routes/index.tsx
+export default function Home() {
+  const sliderSignal = useSignal(50);
+  return (
+    <div>
+      <SynchronizedSlider slider={sliderSignal} />
+      <SynchronizedSlider slider={sliderSignal} />
+      <SynchronizedSlider slider={sliderSignal} />
+    </div>
+  );
+}
+```
+
+they would all use the same value.
+
+## Independent Islands
+
+We can also create a `signal` in a utility file and export it for consumption
+across multiple places.
+
+```ts
+// utils/cart.ts
+import { signal } from "@preact/signals";
+
+export const cart = signal<string[]>([]);
+```
+
+```ts
+// islands/AddToCart.tsx
+import { Button } from "../components/Button.tsx";
+import { cart } from "../utils/cart.ts";
+
+interface AddToCartProps {
+  product: string;
+}
+
+// This island is used to add a product to the cart state.
+export default function AddToCart(props: AddToCartProps) {
+  return (
+    <Button
+      onClick={() => cart.value = [...cart.value, props.product]}
+      class="w-full"
+    >
+      Add{cart.value.includes(props.product) ? " another" : ""}{" "}
+      "{props.product}" to cart
+    </Button>
+  );
+}
+```
+
+```ts
+// islands/Cart.tsx
+import { Button } from "../components/Button.tsx";
+import { cart } from "../utils/cart.ts";
+import * as icons from "../components/Icons.tsx";
+
+// This island is used to display the cart contents and remove items from it.
+export default function Cart() {
+  return (
+    <h1 class="text-xl flex items-center justify-center">
+      Cart
+    </h1>
+
+    <ul class="w-full bg-gray-50 mt-2 p-2 rounded min-h-[6.5rem]">
+      {cart.value.length === 0 && (
+        <li class="text-center my-4">
+          <div class="text-gray-400">
+            <icons.Cart class="w-8 h-8 inline-block" />
+            <div>
+              Your cart is empty.
+            </div>
+          </div>
+        </li>
+      )}
+      {cart.value.map((product, index) => (
+        <CartItem product={product} index={index} />
+      ))}
+    </ul>
+  );
+}
+
+interface CartItemProps {
+  product: string;
+  index: number;
+}
+
+function CartItem(props: CartItemProps) {
+  const remove = () => {
+    const newCart = [...cart.value];
+    newCart.splice(props.index, 1);
+    cart.value = newCart;
+  };
+
+  return (
+    <li class="flex items-center justify-between gap-1">
+      <icons.Lemon class="text-gray-500" />
+      <div class="flex-1">
+        {props.product}
+      </div>
+      <Button onClick={remove} aria-label="Remove" class="border-none">
+        <icons.X class="inline-block w-4 h-4" />
+      </Button>
+    </li>
+  );
+}
+```
+
+Now we can add the islands to our site by doing the following:
+
+```ts
+<AddToCart product="Lemon" />
+<AddToCart product="Lime" />
+<Cart />
+```
+
+What happens as a result? The `cart` signal is shared across the two `AddToCart`
+islands _and_ the `Cart` island.
diff --git a/docs/examples/using-deno-kv-oauth.md b/docs/examples/using-deno-kv-oauth.md
new file mode 100644
index 00000000000..2124d6826c1
--- /dev/null
+++ b/docs/examples/using-deno-kv-oauth.md
@@ -0,0 +1,146 @@
+---
+description: Easily integrate OAuth 2.0 to your Fresh project with Deno KV OAuth.
+---
+
+> ⚠️ Please note that this functionality relies on
+> [Deno KV](https://deno.com/manual/runtime/kv) which is currently marked as
+> **experimental** and is **subject to change**. It is only available when using
+> the `--unstable` flag.
+
+> ⚠️ Please note that Deno KV OAuth is still in **beta** and is **subject to
+> change**. See [the documentation](https://deno.land/x/deno_kv_oauth) for
+> further details.
+
+## Getting Started
+
+This example uses GitHub as the OAuth 2.0 provider. However there is a suite of
+[pre-configured providers](https://deno.land/x/deno_kv_oauth#pre-configured-oauth-20-clients)
+available.
+
+1. Register a [new GitHub OAuth](https://github.com/settings/applications/new)
+   application, if you haven't already.
+2. Create your pre-configured OAuth client instance. For reusability the
+   instance is stored in `utils/oauth2_client.ts`.
+
+   ```ts
+   // utils/oauth2_client.ts
+   import { createGitHubOAuth2Client } from "https://deno.land/x/deno_kv_oauth@v0.2.4/mod.ts";
+
+   export const oauth2Client = createGitHubOAuth2Client();
+   ```
+
+3. Using the OAuth 2.0 client instance, insert the authentication flow functions
+   into your authentication routes. In this example, there are dedicated handler
+   routes at `routes/signin.ts`, `routes/signout.ts` and `routes/callback.ts`.
+   Please ensure that the `callback` handler matches the authorization callback
+   URL in the configured OAuth application.
+
+   ```ts
+   // routes/signin.ts
+   import { Handlers } from "$fresh/server.ts";
+   import { signIn } from "https://deno.land/x/deno_kv_oauth@v0.2.4/mod.ts";
+   import { oauth2Client } from "../utils/oauth2_client.ts";
+
+   export const handler: Handlers = {
+     async GET(req) {
+       return await signIn(req, oauth2Client);
+     },
+   };
+   ```
+
+   ```ts
+   // routes/signout.ts
+   import { Handlers } from "$fresh/server.ts";
+   import { signOut } from "https://deno.land/x/deno_kv_oauth@v0.2.4/mod.ts";
+
+   export const handler: Handlers = {
+     async GET(req) {
+       return await signOut(req);
+     },
+   };
+   ```
+
+   ```ts
+   // routes/callback.ts
+   import { Handlers } from "$fresh/server.ts";
+   import { handleCallback } from "https://deno.land/x/deno_kv_oauth@v0.2.4/mod.ts";
+   import { oauth2Client } from "../utils/oauth2_client.ts";
+
+   export const handler: Handlers = {
+     async GET(req) {
+       // Return object also includes `accessToken` and `sessionId` properties.
+       const { response } = await handleCallback(req, oauth2Client);
+       return response;
+     },
+   };
+   ```
+
+4. Use Deno KV OAuth's helper functions where needed.
+
+   ```tsx
+   // routes/index.tsx
+   import { Handlers, PageProps } from "$fresh/server.ts";
+   import {
+     getSessionAccessToken,
+     getSessionId,
+   } from "https://deno.land/x/deno_kv_oauth@v0.2.4/mod.ts";
+   import { oauth2Client } from "../utils/oauth2_client.ts";
+
+   interface User {
+     login: string;
+     name: string;
+     avatar_url: string;
+   }
+
+   export const handler: Handlers<User | null> = {
+     async GET(req, ctx) {
+       const sessionId = await getSessionId(req);
+
+       if (!sessionId) {
+         return ctx.render(null);
+       }
+
+       const accessToken = await getSessionAccessToken(oauth2Client, sessionId);
+       const response = await fetch("https://api.github.com/user", {
+         headers: {
+           authorization: `bearer ${accessToken}`,
+         },
+       });
+       const user: User = await response.json();
+       return ctx.render(user);
+     },
+   };
+
+   export default function Page({ data }: PageProps<User | null>) {
+     if (!data) {
+       return <a href="/signin">Sign In</a>;
+     }
+
+     return (
+       <div>
+         <img src={data.avatar_url} width={64} height={64} />
+         <h1>{data.name}</h1>
+         <p>{data.login}</p>
+         <a href="/signout">Sign Out</a>
+       </div>
+     );
+   }
+   ```
+
+5. Start your project with the necessary environment variables.
+
+   ```sh
+   GITHUB_CLIENT_ID=xxx GITHUB_CLIENT_SECRET=xxx deno task start
+   ```
+
+## More on Deno KV OAuth
+
+Follow the links to read more about:
+
+- Using a provider from the list of
+  [pre-configured providers](https://deno.land/x/deno_kv_oauth#pre-configured-oauth-20-clients)
+- Configuring a
+  [custom OAuth 2.0 client](https://deno.land/x/deno_kv_oauth#custom-oauth-20-client)
+- Setting the mandatory
+  [environment variables](https://deno.land/x/deno_kv_oauth#environment-variables)
+- Exploring a [live demo](https://fresh-deno-kv-oauth-demo.deno.dev/)
diff --git a/docs/examples/using-fresh-canary-version.md b/docs/examples/using-fresh-canary-version.md
new file mode 100644
index 00000000000..464e8d7cea7
--- /dev/null
+++ b/docs/examples/using-fresh-canary-version.md
@@ -0,0 +1,78 @@
+---
+description: |
+  For cases where the latest release doesn't fit your needs.
+---
+
+Pretend you have a use case where you need to modify your project to use a
+canary version of Fresh. Or you want to use a slightly different initialization
+script. This page has you covered.
+
+## Canary Fresh in `deno.json`
+
+### Specific commit
+
+Let's say you like living life in the fast lane, and want a particular commit.
+How can you modify your project to no longer use the current release, but
+instead this one particular commit? Just make the following changes to your
+`deno.json`:
+
+```diff
+     "update": "deno run -A -r https://fresh.deno.dev/update ."
+   },
+   "imports": {
+-    "$fresh/": "https://deno.land/x/fresh@1.2.0/",
++    "$fresh/": "https://raw.githubusercontent.com/denoland/fresh/the-particular-commit-hash-here/",
+     "preact": "https://esm.sh/preact@10.15.1",
+     "preact/": "https://esm.sh/preact@10.15.1/",
+     "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.1.0",
+```
+
+### Forked Fresh
+
+Or what if you have a PR created but it's not getting merged into `main`. Don't
+worry, you can use the same approach to reference any branch in a fork as well.
+Here's an example of referencing a feature in a forked repository that hasn't
+been merged yet (at the time of writing this):
+
+```diff
+     "update": "deno run -A -r https://fresh.deno.dev/update ."
+   },
+   "imports": {
+-    "$fresh/": "https://deno.land/x/fresh@1.2.0/",
++    "$fresh/": "https://raw.githubusercontent.com/deer/fresh/state_in_props/",
+     "preact": "https://esm.sh/preact@10.15.1",
+     "preact/": "https://esm.sh/preact@10.15.1/",
+     "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.1.0",
+```
+
+## Creating a new project
+
+What if you're getting into open source development, and you've of course
+decided to contribute to the best, freshest project around. Maybe you want to
+create a test project based on your local changes.
+
+### Creating a project from source
+
+Instead of doing it like this:
+
+```sh
+deno run -A -r https://fresh.deno.dev/
+```
+
+do it like this:
+
+```sh
+deno run -A -r path/to/fresh/init.ts
+```
+
+(or wherever your local code lives)
+
+### Creating a project from the latest commit
+
+Of course there's no reason why you have to check out the Fresh source. You can
+create a project from the latest commit by combining the techniques on this page
+like this:
+
+```sh
+deno run -A -r https://raw.githubusercontent.com/denoland/fresh/main/init.ts
+```
diff --git a/docs/examples/using-twind-v1.md b/docs/examples/using-twind-v1.md
new file mode 100644
index 00000000000..fa865e09fc2
--- /dev/null
+++ b/docs/examples/using-twind-v1.md
@@ -0,0 +1,62 @@
+---
+description: |
+  With a few tweaks one can use twind v1
+---
+
+When you initialize a project with `deno run -A -r https://fresh.deno.dev`,
+you'll end up with a `main.ts` like the following:
+
+```ts
+/// <reference no-default-lib="true" />
+/// <reference lib="dom" />
+/// <reference lib="dom.iterable" />
+/// <reference lib="dom.asynciterable" />
+/// <reference lib="deno.ns" />
+
+import { start } from "$fresh/server.ts";
+import manifest from "./fresh.gen.ts";
+
+import twindPlugin from "$fresh/plugins/twind.ts";
+import twindConfig from "./twind.config.ts";
+
+await start(manifest, { plugins: [twindPlugin(twindConfig)] });
+```
+
+The template generates a Twind v0 project by default. If you want to use Twind
+v1 you can follow this guide. First of all, change the import path to use the
+`twindv1` plugin:
+
+```ts
+/// <reference no-default-lib="true" />
+/// <reference lib="dom" />
+/// <reference lib="dom.iterable" />
+/// <reference lib="dom.asynciterable" />
+/// <reference lib="deno.ns" />
+
+import { start } from "$fresh/server.ts";
+import manifest from "./fresh.gen.ts";
+
+import twindPlugin from "$fresh/plugins/twindv1.ts";
+import twindConfig from "./twind.config.ts";
+
+await start(manifest, { plugins: [twindPlugin(twindConfig)] });
+```
+
+The twind config object has changed significantly in v1, so we must also go
+change `twind.config.ts`. A good base looks like this:
+
+```ts
+import { defineConfig } from "https://esm.sh/@twind/core@1.1.3";
+import presetTailwind from "https://esm.sh/@twind/preset-tailwind@1.1.4";
+import presetAutoprefix from "https://esm.sh/@twind/preset-autoprefix@1.0.7";
+
+export default {
+  ...defineConfig({
+    presets: [presetTailwind(), presetAutoprefix()],
+  }),
+  selfURL: import.meta.url,
+};
+```
+
+To see what other presets exist, you can go to the
+[twind docs](https://twind.style/presets).
diff --git a/docs/examples/writing-tests.md b/docs/examples/writing-tests.md
index 7d5a251afbd..fe675d9843a 100644
--- a/docs/examples/writing-tests.md
+++ b/docs/examples/writing-tests.md
@@ -53,13 +53,11 @@ export default function FooPage() {
 ```ts
 // tests/main_test.ts
 
-import { createHandler } from "$fresh/server.ts";
+import { createHandler, ServeHandlerInfo } from "$fresh/server.ts";
 import manifest from "../fresh.gen.ts";
 import { assert, assertEquals } from "$std/testing/asserts.ts";
-import type { ConnInfo } from "$std/http/server.ts";
 
-const CONN_INFO: ConnInfo = {
-  localAddr: { hostname: "127.0.0.1", port: 8000, transport: "tcp" },
+const CONN_INFO: ServeHandlerInfo = {
   remoteAddr: { hostname: "127.0.0.1", port: 53496, transport: "tcp" },
 };
 
diff --git a/docs/getting-started/create-a-route.md b/docs/getting-started/create-a-route.md
index 4518dbe39dd..90223ae077d 100644
--- a/docs/getting-started/create-a-route.md
+++ b/docs/getting-started/create-a-route.md
@@ -22,7 +22,7 @@ Route files that render HTML are JavaScript or TypeScript modules that export a
 JSX component as their default export. This component will be rendered for every
 request to the route's path. The component receives a few properties that can be
 used to customize the rendered output, such as the current route, the url of the
-request, and handler data (more on that later).
+request, state set by middleware, and handler data (more on the last two later).
 
 In the demo project we'll create a route to handle the `/about` page. To do
 this, one needs to create a new `routes/about.tsx` file. In this file, we can
diff --git a/docs/getting-started/dynamic-routes.md b/docs/getting-started/dynamic-routes.md
index e5f4d50dd9f..df15a1fbfec 100644
--- a/docs/getting-started/dynamic-routes.md
+++ b/docs/getting-started/dynamic-routes.md
@@ -1,31 +1,31 @@
 ---
 description: |
   Create a dynamic route in fresh by adding a dynamic segment to the route name
-  in the routes' file name on disk: `/[name].tsx`.
+  in the routes' file name on disk: `/greet/[name].tsx`.
 ---
 
 The `/about` route created on the last page is pretty static. It does not matter
 what query or path parameters are passed to the route, it will always render the
-same page. Let's create a `/:name` that will render a page with a greeting that
-contains the name passed in the path.
+same page. Let's create a `/greet/:name` that will render a page with a greeting
+that contains the name passed in the path.
 
 Before diving in, a quick refresher on "dynamic" routes. Dynamic routes don't
 just match a single static path, but rather a whole bunch of different paths
-based on a pattern. For example, the `/:name` route will match the paths `/Luca`
-and `/John`, but not `/Luca/John`.
+based on a pattern. For example, the `/greet/:name` route will match the paths
+`/greet/Luca` and `/John`, but not `/greet/Luca/John`.
 
 Fresh supports dynamic routes out of the box through file system routing. To
 make any path segment dynamic, just put square brackets around that segment in
-the file name. For example the `/:name` route maps to the file name
-`routes/[name].tsx`.
+the file name. For example the `/greet/:name` route maps to the file name
+`routes/greet/[name].tsx`.
 
-Just like the static `/about` route, the dynamic `/:name` route will render a
-page. The module must once again expose a component as a default export. This
-time the component will receive the matched path segment properties as arguments
-in its `props` object though.
+Just like the static `/about` route, the dynamic `/greet/:name` route will
+render a page. The module must once again expose a component as a default
+export. This time the component will receive the matched path segment properties
+as arguments in its `props` object though.
 
 ```tsx
-// routes/[name].tsx
+// routes/greet/[name].tsx
 
 import { PageProps } from "$fresh/server.ts";
 
@@ -43,7 +43,7 @@ The `PageProps` interface actually contains a bunch of useful properties that
 can be used to customize the rendered output. Next to the matched url pattern
 parameters, the raw `url`, and the `route` name can also be found in here.
 
-Navigating to `http://localhost:8000/Luca` will now render a page showing
+Navigating to `http://localhost:8000/greet/Luca` will now render a page showing
 "Greetings to you, Luca!".
 
 The [_Concepts: Routing_][concepts-routing] page has more information about
diff --git a/docs/getting-started/fetching-data.md b/docs/getting-started/fetching-data.md
index 69bd437acb5..7716e6c76b6 100644
--- a/docs/getting-started/fetching-data.md
+++ b/docs/getting-started/fetching-data.md
@@ -1,7 +1,7 @@
 ---
 description: |
   Fetch data for routes dynamically by creating a custom handler and passing
-  data to the render function. 
+  data to the render function.
 ---
 
 All of the pages in the demo project so far have not used any dynamic data
diff --git a/docs/getting-started/index.md b/docs/getting-started/index.md
index 07f88ec2284..3fdb2dad037 100644
--- a/docs/getting-started/index.md
+++ b/docs/getting-started/index.md
@@ -10,7 +10,7 @@ framework. You'll learn how to create a new project, run it locally, edit and
 create pages, fetch data, handle user interactions, and how to then deploy the
 project to [Deno Deploy][deno-deploy].
 
-The documentation assumes you have Deno 1.25.0 or later installed.
+The documentation assumes you have Deno 1.35.0 or later installed.
 
 To install Deno, follow the
 [installation instructions in the Deno manual][manual-installation].
diff --git a/docs/toc.json b/docs/toc.json
deleted file mode 100644
index 5238120a756..00000000000
--- a/docs/toc.json
+++ /dev/null
@@ -1,50 +0,0 @@
-{
-  "introduction": {
-    "title": "Introduction"
-  },
-  "getting-started": {
-    "title": "Getting Started",
-    "pages": [
-      ["create-a-project", "Create a project"],
-      ["running-locally", "Running locally"],
-      ["create-a-route", "Create a route"],
-      ["dynamic-routes", "Dynamic routes"],
-      ["custom-handlers", "Custom handlers"],
-      ["fetching-data", "Fetching data"],
-      ["form-submissions", "Form submissions"],
-      ["adding-interactivity", "Adding interactivity"],
-      ["deploy-to-production", "Deploy to production"]
-    ]
-  },
-  "concepts": {
-    "title": "Concepts",
-    "pages": [
-      ["architecture", "Architecture"],
-      ["routes", "Routes"],
-      ["forms", "Forms"],
-      ["islands", "Interactive islands"],
-      ["static-files", "Static files"],
-      ["middleware", "Route middleware"],
-      ["error-pages", "Error pages"],
-      ["routing", "Routing"],
-      ["data-fetching", "Data fetching"],
-      ["deployment", "Deployment"],
-      ["plugins", "Plugins"],
-      ["updating", "Updating Fresh"],
-      ["app-wrapper", "Application wrapper"],
-      ["server-configuration", "Server configuration"]
-    ]
-  },
-  "integrations": {
-    "title": "Integrations"
-  },
-  "examples": {
-    "title": "Examples",
-    "pages": [
-      ["modifying-the-head", "Modifying the <head>"],
-      ["setting-the-language", "Setting the language"],
-      ["writing-tests", "Writing tests"],
-      ["changing-the-src-dir", "Changing the source directory"]
-    ]
-  }
-}
diff --git a/docs/toc.ts b/docs/toc.ts
new file mode 100644
index 00000000000..b4bbe67cbd0
--- /dev/null
+++ b/docs/toc.ts
@@ -0,0 +1,165 @@
+import FRESH_VERSIONS from "../versions.json" assert { type: "json" };
+
+type RawTableOfContents = Record<
+  string,
+  {
+    label: string;
+    content: Record<string, RawTableOfContentsEntry>;
+  }
+>;
+
+interface RawTableOfContentsEntry {
+  title: string;
+  link?: string;
+  pages?: [string, string, string?][];
+}
+
+const toc: RawTableOfContents = {
+  canary: {
+    label: "canary",
+    content: {
+      "the-canary-version": {
+        title: "The canary version",
+      },
+      introduction: {
+        title: "Introduction",
+        link: "latest",
+      },
+      "getting-started": {
+        title: "Getting Started",
+        link: "latest",
+        pages: [
+          ["create-a-project", "Create a project", "link:latest"],
+          ["running-locally", "Running locally", "link:latest"],
+          ["create-a-route", "Create a route", "link:latest"],
+          ["dynamic-routes", "Dynamic routes", "link:latest"],
+          ["custom-handlers", "Custom handlers", "link:latest"],
+          ["fetching-data", "Fetching data", "link:latest"],
+          ["form-submissions", "Form submissions", "link:latest"],
+          ["adding-interactivity", "Adding interactivity", "link:latest"],
+          ["deploy-to-production", "Deploy to production", "link:latest"],
+        ],
+      },
+      concepts: {
+        title: "Concepts",
+        link: "latest",
+        pages: [
+          ["architecture", "Architecture", "link:latest"],
+          ["server-components", "Server Components", "link:latest"],
+          ["routes", "Routes", "link:latest"],
+          ["forms", "Forms", "link:latest"],
+          ["islands", "Interactive islands", "link:latest"],
+          ["static-files", "Static files", "link:latest"],
+          ["middleware", "Route middleware", "link:latest"],
+          ["error-pages", "Error pages", "link:latest"],
+          ["routing", "Routing", "link:latest"],
+          ["data-fetching", "Data fetching", "link:latest"],
+          ["deployment", "Deployment", "link:latest"],
+          ["plugins", "Plugins", "link:latest"],
+          ["updating", "Updating Fresh", "link:canary"],
+          ["app-wrapper", "Application wrapper", "link:latest"],
+          ["server-configuration", "Server configuration", "link:latest"],
+        ],
+      },
+      integrations: {
+        title: "Integrations",
+        link: "latest",
+      },
+      examples: {
+        title: "Examples",
+        link: "latest",
+        pages: [
+          ["modifying-the-head", "Modifying the <head>", "link:latest"],
+          ["setting-the-language", "Setting the language", "link:latest"],
+          ["writing-tests", "Writing tests", "link:latest"],
+          [
+            "changing-the-src-dir",
+            "Changing the source directory",
+            "link:latest",
+          ],
+          ["using-twind-v1", "Using Twind v1", "link:latest"],
+          ["init-the-server", "Initializing the server", "link:latest"],
+          [
+            "using-fresh-canary-version",
+            "Using Fresh canary version",
+            "link:latest",
+          ],
+          ["dealing-with-cors", "Dealing with CORS", "link:latest"],
+          ["creating-a-crud-api", "Creating a CRUD API", "link:latest"],
+          ["handling-complex-routes", "Handling complex routes", "link:latest"],
+          ["rendering-markdown", "Rendering markdown", "link:latest"],
+          [
+            "sharing-state-between-islands",
+            "Sharing state between islands",
+            "link:latest",
+          ],
+          ["using-deno-kv-oauth", "Using Deno KV OAuth", "link:latest"],
+        ],
+      },
+    },
+  },
+  latest: {
+    label: FRESH_VERSIONS[0],
+    content: {
+      introduction: {
+        title: "Introduction",
+      },
+      "getting-started": {
+        title: "Getting Started",
+        pages: [
+          ["create-a-project", "Create a project"],
+          ["running-locally", "Running locally"],
+          ["create-a-route", "Create a route"],
+          ["dynamic-routes", "Dynamic routes"],
+          ["custom-handlers", "Custom handlers"],
+          ["fetching-data", "Fetching data"],
+          ["form-submissions", "Form submissions"],
+          ["adding-interactivity", "Adding interactivity"],
+          ["deploy-to-production", "Deploy to production"],
+        ],
+      },
+      concepts: {
+        title: "Concepts",
+        pages: [
+          ["architecture", "Architecture"],
+          ["server-components", "Server Components"],
+          ["routes", "Routes"],
+          ["forms", "Forms"],
+          ["islands", "Interactive islands"],
+          ["static-files", "Static files"],
+          ["middleware", "Route middleware"],
+          ["error-pages", "Error pages"],
+          ["routing", "Routing"],
+          ["data-fetching", "Data fetching"],
+          ["deployment", "Deployment"],
+          ["plugins", "Plugins"],
+          ["updating", "Updating Fresh"],
+          ["app-wrapper", "Application wrapper"],
+          ["server-configuration", "Server configuration"],
+        ],
+      },
+      integrations: {
+        title: "Integrations",
+      },
+      examples: {
+        title: "Examples",
+        pages: [
+          ["modifying-the-head", "Modifying the <head>"],
+          ["setting-the-language", "Setting the language"],
+          ["writing-tests", "Writing tests"],
+          ["changing-the-src-dir", "Changing the source directory"],
+          ["using-twind-v1", "Using Twind v1"],
+          ["init-the-server", "Initializing the server"],
+          ["using-fresh-canary-version", "Using Fresh canary version"],
+          ["dealing-with-cors", "Dealing with CORS"],
+          ["creating-a-crud-api", "Creating a CRUD API"],
+          ["handling-complex-routes", "Handling complex routes"],
+          ["rendering-markdown", "Rendering markdown"],
+          ["sharing-state-between-islands", "Sharing state between islands"],
+        ],
+      },
+    },
+  },
+};
+
+export default toc;
diff --git a/init.ts b/init.ts
index 7f78eac7122..64db1ac553d 100644
--- a/init.ts
+++ b/init.ts
@@ -1,4 +1,4 @@
-import { join, parse, resolve } from "./src/dev/deps.ts";
+import { basename, colors, join, parse, resolve } from "./src/dev/deps.ts";
 import { error } from "./src/dev/error.ts";
 import { collect, ensureMinDenoVersion, generate } from "./src/dev/mod.ts";
 import {
@@ -42,11 +42,14 @@ const flags = parse(Deno.args, {
   default: { "force": null, "twind": null, "vscode": null },
 });
 
+console.log();
 console.log(
-  `\n%c  🍋 Fresh: the next-gen web framework.  %c\n`,
-  "background-color: #86efac; color: black; font-weight: bold",
-  "",
+  colors.bgRgb8(
+    colors.black(colors.bold(" 🍋 Fresh: The next-gen web framework. ")),
+    121,
+  ),
 );
+console.log();
 
 let unresolvedDirectory = Deno.args[0];
 if (flags._.length !== 1) {
@@ -115,21 +118,24 @@ export default function Home() {
   return (
     <>
       <Head>
-        <title>Fresh App</title>
+        <title>${basename(resolvedDirectory)}</title>
       </Head>
-      <div${useTwind ? ` class="p-4 mx-auto max-w-screen-md"` : ""}>
-        <img
-          src="/logo.svg"
-          ${
-  useTwind ? `class="w-32 h-32"` : `width="128"\n          height="128"`
-}
-          alt="the fresh logo: a sliced lemon dripping with juice"
-        />
-        <p${useTwind ? ` class="my-6"` : ""}>
-          Welcome to \`fresh\`. Try updating this message in the
-          ./routes/index.tsx file, and refresh.
-        </p>
-        <Counter count={count} />
+      <div class="px-4 py-8 mx-auto bg-[#86efac]">
+        <div class="max-w-screen-md mx-auto flex flex-col items-center justify-center">
+          <img
+            class="my-6"
+            src="/logo.svg"
+            width="128"
+            height="128"
+            alt="the fresh logo: a sliced lemon dripping with juice"
+          />
+          <h1 class="text-4xl font-bold">Welcome to fresh</h1>
+          <p class="my-4">
+            Try updating this message in the
+            <code class="mx-2">./routes/index.tsx</code> file, and refresh.
+          </p>
+          <Counter count={count} />
+        </div>
       </div>
     </>
   );
@@ -148,11 +154,8 @@ export function Button(props: JSX.HTMLAttributes<HTMLButtonElement>) {
     <button
       {...props}
       disabled={!IS_BROWSER || props.disabled}
-${
-  useTwind
-    ? '      class="px-2 py-1 border(gray-100 2) hover:bg-gray-200"\n'
-    : ""
-}    />
+      class="px-2 py-1 border-gray-500 border-2 rounded bg-white hover:bg-gray-200 transition-colors"
+    />
   );
 }
 `;
@@ -170,11 +173,9 @@ interface CounterProps {
 
 export default function Counter(props: CounterProps) {
   return (
-    <div${useTwind ? ' class="flex gap-2 w-full"' : ""}>
-      <p${
-  useTwind ? ' class="flex-grow-1 font-bold text-xl"' : ""
-}>{props.count}</p>
+    <div class="flex gap-8 py-6">
       <Button onClick={() => props.count.value -= 1}>-1</Button>
+      <p class="text-3xl">{props.count}</p>
       <Button onClick={() => props.count.value += 1}>+1</Button>
     </div>
   );
@@ -191,11 +192,50 @@ export default function Greet(props: PageProps) {
   return <div>Hello {props.params.name}</div>;
 }
 `;
+await Deno.mkdir(join(resolvedDirectory, "routes", "greet"), {
+  recursive: true,
+});
 await Deno.writeTextFile(
-  join(resolvedDirectory, "routes", "[name].tsx"),
+  join(resolvedDirectory, "routes", "greet", "[name].tsx"),
   ROUTES_GREET_TSX,
 );
 
+// 404 page
+const ROUTES_404_PAGE = `
+import { Head } from "$fresh/runtime.ts";
+
+export default function Error404() {
+  return (
+    <>
+      <Head>
+        <title>404 - Page not found</title>
+      </Head>
+      <div class="px-4 py-8 mx-auto bg-[#86efac]">
+        <div class="max-w-screen-md mx-auto flex flex-col items-center justify-center">
+          <img
+            class="my-6"
+            src="/logo.svg"
+            width="128"
+            height="128"
+            alt="the fresh logo: a sliced lemon dripping with juice"
+          />
+          <h1 class="text-4xl font-bold">404 - Page not found</h1>
+          <p class="my-4">
+            The page you were looking for doesn't exist.
+          </p>
+          <a href="/" class="underline">Go back home</a>
+        </div>
+      </div>
+    </>
+  );
+}
+`;
+
+await Deno.writeTextFile(
+  join(resolvedDirectory, "routes", "_404.tsx"),
+  ROUTES_404_PAGE,
+);
+
 const ROUTES_API_JOKE_TS = `import { HandlerContext } from "$fresh/server.ts";
 
 // Jokes courtesy of https://punsandoneliners.com/randomness/programmer-jokes/
@@ -236,6 +276,172 @@ if (useTwind) {
   );
 }
 
+const NO_TWIND_STYLES = `
+*,
+*::before,
+*::after {
+  box-sizing: boder-box;
+}
+* {
+  margin: 0;
+}
+button {
+  color: inherit;
+}
+button, [role="button"] {
+  cursor: pointer;
+}
+code {
+  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,
+    "Liberation Mono", "Courier New", monospace;
+  font-size: 1em;
+}
+img,
+svg {
+  display: block;
+}
+img,
+video {
+  max-width: 100%;
+  height: auto;
+}
+
+html {
+  line-height: 1.5;
+  -webkit-text-size-adjust: 100%;
+  font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont,
+    "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif,
+    "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
+}
+.transition-colors {
+  transition-property: background-color, border-color, color, fill, stroke;
+  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
+  transition-duration: 150ms;
+}
+.my-6 {
+  margin-bottom: 1.5rem;
+  margin-top: 1.5rem;
+}
+.text-4xl {
+  font-size: 2.25rem;
+  line-height: 2.5rem;
+}
+.mx-2 {
+  margin-left: 0.5rem;
+  margin-right: 0.5rem;
+}
+.my-4 {
+  margin-bottom: 1rem;
+  margin-top: 1rem;
+}
+.mx-auto {
+  margin-left: auto;
+  margin-right: auto;
+}
+.px-4 {
+  padding-left: 1rem;
+  padding-right: 1rem;
+}
+.py-8 {
+  padding-bottom: 2rem;
+  padding-top: 2rem;
+}
+.bg-\\[\\#86efac\\] {
+  background-color: #86efac;
+}
+.text-3xl {
+  font-size: 1.875rem;
+  line-height: 2.25rem;
+}
+.py-6 {
+  padding-bottom: 1.5rem;
+  padding-top: 1.5rem;
+}
+.px-2 {
+  padding-left: 0.5rem;
+  padding-right: 0.5rem;
+}
+.py-1 {
+  padding-bottom: 0.25rem;
+  padding-top: 0.25rem;
+}
+.border-gray-500 {
+  border-color: #6b7280;
+}
+.bg-white {
+  background-color: #fff;
+}
+.flex {
+  display: flex;
+}
+.gap-8 {
+  grid-gap: 2rem;
+  gap: 2rem;
+}
+.font-bold {
+  font-weight: 700;
+}
+.max-w-screen-md {
+  max-width: 768px;
+}
+.flex-col {
+  flex-direction: column;
+}
+.items-center {
+  align-items: center;
+}
+.justify-center {
+  justify-content: center;
+}
+.border-2 {
+  border-width: 2px;
+}
+.rounded {
+  border-radius: 0.25rem;
+}
+.hover\:bg-gray-200:hover {
+  background-color: #e5e7eb;
+}
+`;
+
+const APP_WRAPPER = useTwind
+  ? `import { AppProps } from "$fresh/server.ts";
+
+export default function App({ Component }: AppProps) {
+  return (
+    <>
+      <Component />
+    </>
+  );
+}
+`
+  : `import { AppProps } from "$fresh/server.ts";
+import { Head } from "$fresh/runtime.ts";
+
+export default function App({ Component }: AppProps) {
+  return (
+    <>
+      <Head>
+        <link rel="stylesheet" href="/styles.css" />
+      </Head>
+      <Component />
+    </>
+  );
+}
+`;
+
+if (!useTwind) {
+  await Deno.writeTextFile(
+    join(resolvedDirectory, "static", "styles.css"),
+    NO_TWIND_STYLES,
+  );
+}
+
+await Deno.writeTextFile(
+  join(resolvedDirectory, "routes", "_app.tsx"),
+  APP_WRAPPER,
+);
+
 const STATIC_LOGO =
   `<svg width="40" height="40" fill="none" xmlns="http://www.w3.org/2000/svg">
   <path d="M34.092 8.845C38.929 20.652 34.092 27 30 30.5c1 3.5-2.986 4.222-4.5 2.5-4.457 1.537-13.512 1.487-20-5C2 24.5 4.73 16.714 14 11.5c8-4.5 16-7 20.092-2.655Z" fill="#FFDB1E"/>
@@ -306,6 +512,11 @@ const config = {
     start: "deno run -A --watch=static/,routes/ dev.ts",
     update: "deno run -A -r https://fresh.deno.dev/update .",
   },
+  lint: {
+    rules: {
+      tags: ["fresh", "recommended"],
+    },
+  },
   imports: {} as Record<string, string>,
   compilerOptions: {
     jsx: "react-jsx",
@@ -346,6 +557,18 @@ const vscodeSettings = {
   "deno.enable": true,
   "deno.lint": true,
   "editor.defaultFormatter": "denoland.vscode-deno",
+  "[typescriptreact]": {
+    "editor.defaultFormatter": "denoland.vscode-deno",
+  },
+  "[typescript]": {
+    "editor.defaultFormatter": "denoland.vscode-deno",
+  },
+  "[javascriptreact]": {
+    "editor.defaultFormatter": "denoland.vscode-deno",
+  },
+  "[javascript]": {
+    "editor.defaultFormatter": "denoland.vscode-deno",
+  },
 };
 
 const VSCODE_SETTINGS = JSON.stringify(vscodeSettings, null, 2) + "\n";
diff --git a/plugins/twind.ts b/plugins/twind.ts
index da11ee8f897..62bd6a62b5a 100644
--- a/plugins/twind.ts
+++ b/plugins/twind.ts
@@ -15,9 +15,9 @@ export default function(state) { hydrate(options, state); }`;
   return {
     name: "twind",
     entrypoints: { "main": main },
-    render(ctx) {
+    async renderAsync(ctx) {
       sheet.reset(undefined);
-      const res = ctx.render();
+      const res = await ctx.renderAsync();
       const cssTexts = [...sheet.target];
       const snapshot = sheet.reset();
       const scripts = [];
diff --git a/plugins/twind/shared.ts b/plugins/twind/shared.ts
index 1285dfdabc0..b01e2f5ffd9 100644
--- a/plugins/twind/shared.ts
+++ b/plugins/twind/shared.ts
@@ -1,6 +1,8 @@
 import { JSX, options as preactOptions, VNode } from "preact";
 import { Configuration, setup as twSetup, Sheet, tw } from "twind";
 
+type PreactOptions = typeof preactOptions & { __b?: (vnode: VNode) => void };
+
 export const STYLE_ELEMENT_ID = "__FRSH_TWIND";
 
 export interface Options extends Omit<Configuration, "mode" | "sheet"> {
@@ -25,9 +27,13 @@ export function setup(options: Options, sheet: Sheet) {
   };
   twSetup(config);
 
-  const originalHook = preactOptions.vnode;
-  // deno-lint-ignore no-explicit-any
-  preactOptions.vnode = (vnode: VNode<JSX.DOMAttributes<any>>) => {
+  // Hook into options._diff which is called whenever a new comparison
+  // starts in Preact.
+  const originalHook = (preactOptions as PreactOptions).__b;
+  (preactOptions as PreactOptions).__b = (
+    // deno-lint-ignore no-explicit-any
+    vnode: VNode<JSX.DOMAttributes<any>>,
+  ) => {
     if (typeof vnode.type === "string" && typeof vnode.props === "object") {
       const { props } = vnode;
       const classes: string[] = [];
diff --git a/plugins/twindv1.ts b/plugins/twindv1.ts
index 848e9773c63..33d89aa84f1 100644
--- a/plugins/twindv1.ts
+++ b/plugins/twindv1.ts
@@ -15,8 +15,8 @@ export default function(state) { hydrate(options, state); }`;
   return {
     name: "twind",
     entrypoints: { "main": main },
-    render(ctx) {
-      const res = ctx.render();
+    async renderAsync(ctx) {
+      const res = await ctx.renderAsync();
       const cssText = stringify(sheet.target);
       const scripts = [];
       if (res.requiresHydration) {
diff --git a/plugins/twindv1/shared.ts b/plugins/twindv1/shared.ts
index 5974b34c60d..361b88447b1 100644
--- a/plugins/twindv1/shared.ts
+++ b/plugins/twindv1/shared.ts
@@ -6,6 +6,8 @@ import {
   TwindConfig,
 } from "https://esm.sh/@twind/core@1.1.3";
 
+type PreactOptions = typeof preactOptions & { __b?: (vnode: VNode) => void };
+
 export const STYLE_ELEMENT_ID = "__FRSH_TWIND";
 
 export interface Options extends TwindConfig {
@@ -25,9 +27,13 @@ declare module "preact" {
 export function setup({ selfURL: _selfURL, ...config }: Options, sheet: Sheet) {
   twSetup(config, sheet);
 
-  const originalHook = preactOptions.vnode;
-  // deno-lint-ignore no-explicit-any
-  preactOptions.vnode = (vnode: VNode<JSX.DOMAttributes<any>>) => {
+  // Hook into options._diff which is called whenever a new comparison
+  // starts in Preact.
+  const originalHook = (preactOptions as PreactOptions).__b;
+  (preactOptions as PreactOptions).__b = (
+    // deno-lint-ignore no-explicit-any
+    vnode: VNode<JSX.DOMAttributes<any>>,
+  ) => {
     if (typeof vnode.type === "string" && typeof vnode.props === "object") {
       const { props } = vnode;
       const classes: string[] = [];
diff --git a/src/build/deps.ts b/src/build/deps.ts
index c3508eadeca..f1db2fd7156 100644
--- a/src/build/deps.ts
+++ b/src/build/deps.ts
@@ -2,19 +2,19 @@
 export {
   fromFileUrl,
   toFileUrl,
-} from "https://deno.land/std@0.190.0/path/mod.ts";
-export { escape as regexpEscape } from "https://deno.land/std@0.190.0/regexp/escape.ts";
+} from "https://deno.land/std@0.193.0/path/mod.ts";
+export { escape as regexpEscape } from "https://deno.land/std@0.193.0/regexp/escape.ts";
 
 // -- esbuild --
-// @deno-types="https://deno.land/x/esbuild@v0.17.11/mod.d.ts"
-import * as esbuildWasm from "https://deno.land/x/esbuild@v0.17.19/wasm.js";
-import * as esbuildNative from "https://deno.land/x/esbuild@v0.17.19/mod.js";
+// @deno-types="https://deno.land/x/esbuild@v0.18.11/mod.d.ts"
+import * as esbuildWasm from "https://deno.land/x/esbuild@v0.18.11/wasm.js";
+import * as esbuildNative from "https://deno.land/x/esbuild@v0.18.11/mod.js";
 // @ts-ignore trust me
 // deno-lint-ignore no-deprecated-deno-api
 const esbuild: typeof esbuildWasm = Deno.run === undefined
   ? esbuildWasm
   : esbuildNative;
-const esbuildWasmURL = new URL("./esbuild_v0.17.19.wasm", import.meta.url).href;
+const esbuildWasmURL = new URL("./esbuild_v0.18.11.wasm", import.meta.url).href;
 export { esbuild, esbuildWasm as esbuildTypes, esbuildWasmURL };
 
 export { denoPlugins } from "https://deno.land/x/esbuild_deno_loader@0.8.1/mod.ts";
diff --git a/src/build/esbuild_v0.17.19.wasm b/src/build/esbuild_v0.18.11.wasm
old mode 100644
new mode 100755
similarity index 65%
rename from src/build/esbuild_v0.17.19.wasm
rename to src/build/esbuild_v0.18.11.wasm
index 1d350d7c045..7d2ef267fe2
Binary files a/src/build/esbuild_v0.17.19.wasm and b/src/build/esbuild_v0.18.11.wasm differ
diff --git a/src/dev/deps.ts b/src/dev/deps.ts
index b25b6ea7e1f..c6cfcb349ee 100644
--- a/src/dev/deps.ts
+++ b/src/dev/deps.ts
@@ -1,17 +1,22 @@
 // std
 export {
+  basename,
   dirname,
   extname,
   fromFileUrl,
   join,
+  posix,
   relative,
   resolve,
   SEP,
   toFileUrl,
-} from "https://deno.land/std@0.190.0/path/mod.ts";
-export { walk } from "https://deno.land/std@0.190.0/fs/walk.ts";
-export { parse } from "https://deno.land/std@0.190.0/flags/mod.ts";
-export { gte } from "https://deno.land/std@0.190.0/semver/mod.ts";
+} from "https://deno.land/std@0.193.0/path/mod.ts";
+export { DAY } from "https://deno.land/std@0.193.0/datetime/constants.ts";
+export * as colors from "https://deno.land/std@0.193.0/fmt/colors.ts";
+export { walk, WalkError } from "https://deno.land/std@0.193.0/fs/walk.ts";
+export { parse } from "https://deno.land/std@0.193.0/flags/mod.ts";
+export { gte } from "https://deno.land/std@0.193.0/semver/mod.ts";
+export { existsSync } from "https://deno.land/std@0.193.0/fs/mod.ts";
 
 // ts-morph
 export { Node, Project } from "https://deno.land/x/ts_morph@17.0.1/mod.ts";
diff --git a/src/dev/imports.ts b/src/dev/imports.ts
index 7615171ff98..43be1047db3 100644
--- a/src/dev/imports.ts
+++ b/src/dev/imports.ts
@@ -1,9 +1,9 @@
 export const RECOMMENDED_PREACT_VERSION = "10.15.1";
-export const RECOMMENDED_PREACT_RTS_VERSION = "6.1.0";
+export const RECOMMENDED_PREACT_RTS_VERSION = "6.2.0";
 export const RECOMMENDED_PREACT_SIGNALS_VERSION = "1.1.3";
 export const RECOMMENDED_PREACT_SIGNALS_CORE_VERSION = "1.2.3";
 export const RECOMMENDED_TWIND_VERSION = "0.16.19";
-export const RECOMMENDED_STD_VERSION = "0.190.0";
+export const RECOMMENDED_STD_VERSION = "0.193.0";
 
 export function freshImports(imports: Record<string, string>) {
   imports["$fresh/"] = new URL("../../", import.meta.url).href;
diff --git a/src/dev/mod.ts b/src/dev/mod.ts
index a42c6b63ce9..162c6d72383 100644
--- a/src/dev/mod.ts
+++ b/src/dev/mod.ts
@@ -1,7 +1,17 @@
-import { dirname, fromFileUrl, gte, join, toFileUrl, walk } from "./deps.ts";
+import { updateCheck } from "./update_check.ts";
+import {
+  DAY,
+  dirname,
+  fromFileUrl,
+  gte,
+  join,
+  posix,
+  relative,
+  walk,
+} from "./deps.ts";
 import { error } from "./error.ts";
 
-const MIN_DENO_VERSION = "1.25.0";
+const MIN_DENO_VERSION = "1.31.0";
 
 export function ensureMinDenoVersion() {
   // Check that the minimum supported Deno version is being used.
@@ -21,19 +31,37 @@ export function ensureMinDenoVersion() {
 }
 
 async function collectDir(dir: string): Promise<string[]> {
-  const dirUrl = toFileUrl(dir);
+  // Check if provided path is a directory
+  try {
+    const stat = await Deno.stat(dir);
+    if (!stat.isDirectory) return [];
+  } catch (err) {
+    if (err instanceof Deno.errors.NotFound) return [];
+    throw err;
+  }
+
   const paths = [];
+  const fileNames = new Set<string>();
   const routesFolder = walk(dir, {
     includeDirs: false,
     includeFiles: true,
     exts: ["tsx", "jsx", "ts", "js"],
   });
+
   for await (const entry of routesFolder) {
-    const path = toFileUrl(entry.path).href.substring(
-      dirUrl.href.length,
-    );
-    paths.push(path);
+    const fileNameWithoutExt = relative(dir, entry.path).split(".").slice(0, -1)
+      .join(".");
+
+    if (fileNames.has(fileNameWithoutExt)) {
+      throw new Error(
+        `Route conflict detected. Multiple files have the same name: ${dir}${fileNameWithoutExt}`,
+      );
+    }
+
+    fileNames.add(fileNameWithoutExt);
+    paths.push(relative(dir, entry.path));
   }
+
   paths.sort();
   return paths;
 }
@@ -52,6 +80,17 @@ export async function collect(directory: string): Promise<Manifest> {
   return { routes, islands };
 }
 
+/**
+ * Import specifiers must have forward slashes
+ */
+function toImportSpecifier(file: string) {
+  let specifier = posix.normalize(file).replace(/\\/g, "/");
+  if (!specifier.startsWith(".")) {
+    specifier = "./" + specifier;
+  }
+  return specifier;
+}
+
 export async function generate(directory: string, manifest: Manifest) {
   const { routes, islands } = manifest;
 
@@ -60,25 +99,35 @@ export async function generate(directory: string, manifest: Manifest) {
 // This file is automatically updated during development when running \`dev.ts\`.
 
 ${
-    routes.map((file, i) => `import * as $${i} from "./routes${file}";`).join(
+    routes.map((file, i) =>
+      `import * as $${i} from "${toImportSpecifier(join("routes", file))}";`
+    ).join(
       "\n",
     )
   }
 ${
-    islands.map((file, i) => `import * as $$${i} from "./islands${file}";`)
+    islands.map((file, i) =>
+      `import * as $$${i} from "${toImportSpecifier(join("islands", file))}";`
+    )
       .join("\n")
   }
 
 const manifest = {
   routes: {
     ${
-    routes.map((file, i) => `${JSON.stringify(`./routes${file}`)}: $${i},`)
+    routes.map((file, i) =>
+      `${JSON.stringify(`${toImportSpecifier(join("routes", file))}`)}: $${i},`
+    )
       .join("\n    ")
   }
   },
   islands: {
     ${
-    islands.map((file, i) => `${JSON.stringify(`./islands${file}`)}: $$${i},`)
+    islands.map((file, i) =>
+      `${
+        JSON.stringify(`${toImportSpecifier(join("islands", file))}`)
+      }: $$${i},`
+    )
       .join("\n    ")
   }
   },
@@ -117,6 +166,9 @@ export default manifest;
 export async function dev(base: string, entrypoint: string) {
   ensureMinDenoVersion();
 
+  // Run update check in background
+  updateCheck(DAY).catch(() => {});
+
   entrypoint = new URL(entrypoint, base).href;
 
   const dir = dirname(fromFileUrl(base));
diff --git a/src/dev/update_check.ts b/src/dev/update_check.ts
new file mode 100644
index 00000000000..5cc458349ec
--- /dev/null
+++ b/src/dev/update_check.ts
@@ -0,0 +1,121 @@
+import { colors, join } from "./deps.ts";
+
+interface CheckFile {
+  last_checked: string;
+  latest_version: string;
+  current_version: string;
+}
+
+function getHomeDir(): string | null {
+  switch (Deno.build.os) {
+    case "linux": {
+      const xdg = Deno.env.get("XDG_CACHE_HOME");
+      if (xdg) return xdg;
+
+      const home = Deno.env.get("HOME");
+      if (home) return `${home}/.cache`;
+      break;
+    }
+
+    case "darwin": {
+      const home = Deno.env.get("HOME");
+      if (home) return `${home}/Library/Caches`;
+      break;
+    }
+
+    case "windows":
+      return Deno.env.get("LOCALAPPDATA") ?? null;
+  }
+
+  return null;
+}
+
+function getFreshCacheDir(): string | null {
+  const home = getHomeDir();
+  if (home) return join(home, "fresh");
+  return null;
+}
+
+async function fetchLatestVersion() {
+  const res = await fetch("https://dl.deno.land/fresh/release-latest.txt");
+  if (res.ok) {
+    return (await res.text()).trim().replace(/^v/, "");
+  }
+
+  throw new Error(`Could not fetch latest version.`);
+}
+
+export async function updateCheck(
+  interval: number,
+  getCacheDir = getFreshCacheDir,
+  getLatestVersion = fetchLatestVersion,
+) {
+  // Skip update checks on CI or Deno Deploy
+  if (
+    Deno.env.get("CI") === "true" ||
+    Deno.env.get("FRESH_NO_UPDATE_CHECK") === "true" ||
+    Deno.env.get("DENO_DEPLOYMENT_ID")
+  ) {
+    return;
+  }
+
+  const home = getCacheDir();
+  if (!home) return;
+  const filePath = join(home, "latest.json");
+  try {
+    await Deno.mkdir(home, { recursive: true });
+  } catch (err) {
+    if (!(err instanceof Deno.errors.AlreadyExists)) {
+      throw err;
+    }
+  }
+
+  const versions = (await import("../../versions.json", {
+    "assert": { type: "json" },
+  })).default as string[];
+
+  let checkFile: CheckFile = {
+    current_version: versions[0],
+    latest_version: versions[0],
+    last_checked: new Date(0).toISOString(),
+  };
+  try {
+    const text = await Deno.readTextFile(filePath);
+    checkFile = JSON.parse(text);
+  } catch (err) {
+    if (!(err instanceof Deno.errors.NotFound)) {
+      throw err;
+    }
+  }
+
+  // Only check in the specificed interval
+  if (Date.now() >= new Date(checkFile.last_checked).getTime() + interval) {
+    try {
+      checkFile.latest_version = await getLatestVersion();
+      checkFile.last_checked = new Date().toISOString();
+    } catch (err) {
+      // Update check is optional and shouldn't abort the program.
+      console.error(
+        colors.red(`    Update check failed: `) + err.message,
+      );
+      return;
+    }
+  }
+
+  if (checkFile.current_version !== checkFile.latest_version) {
+    const current = colors.bold(colors.rgb8(checkFile.current_version, 208));
+    const latest = colors.bold(colors.rgb8(checkFile.latest_version, 121));
+    console.log(
+      `    Fresh ${latest} is available. You're on ${current}`,
+    );
+    console.log(
+      colors.dim(
+        `    To upgrade, run: `,
+      ) + colors.dim(`deno run -A -r https://fresh.deno.dev/update .`),
+    );
+    console.log();
+  }
+
+  const raw = JSON.stringify(checkFile, null, 2);
+  await Deno.writeTextFile(filePath, raw);
+}
diff --git a/src/runtime/deserializer.ts b/src/runtime/deserializer.ts
index 75b2d262699..66783aa401f 100644
--- a/src/runtime/deserializer.ts
+++ b/src/runtime/deserializer.ts
@@ -29,6 +29,9 @@ export function deserialize(
       if (v[KEY] === "s") {
         return signal!(v.v);
       }
+      if (v[KEY] === "b") {
+        return BigInt(v.d);
+      }
       if (v[KEY] === "u8a") {
         return b64decode(v.d);
       }
diff --git a/src/runtime/entrypoints/main.ts b/src/runtime/entrypoints/main.ts
index 39c545b9a68..30d19e40548 100644
--- a/src/runtime/entrypoints/main.ts
+++ b/src/runtime/entrypoints/main.ts
@@ -12,6 +12,7 @@ import { assetHashingHook } from "../utils.ts";
 function createRootFragment(
   parent: Element,
   replaceNode: Node | Node[],
+  endMarker: Text,
 ) {
   replaceNode = ([] as Node[]).concat(replaceNode);
   // @ts-ignore this is fine
@@ -24,7 +25,11 @@ function createRootFragment(
       parent.insertBefore(node, child);
     },
     appendChild(child: Node) {
-      parent.appendChild(child);
+      // We cannot blindly call `.append()` as that would add
+      // the new child to the very end of the parent node. This
+      // leads to ordering issues when the multiple islands
+      // share the same parent node.
+      parent.insertBefore(child, endMarker);
     },
     removeChild(child: Node) {
       parent.removeChild(child);
@@ -42,8 +47,11 @@ function isElementNode(node: Node): node is HTMLElement {
   return node.nodeType === Node.ELEMENT_NODE;
 }
 
-// deno-lint-ignore no-explicit-any
-export function revive(islands: Record<string, ComponentType>, props: any[]) {
+export function revive(
+  islands: Record<string, Record<string, ComponentType>>,
+  // deno-lint-ignore no-explicit-any
+  props: any[],
+) {
   _walkInner(
     islands,
     props,
@@ -122,7 +130,7 @@ interface Marker {
  * fashion over an HTMLElement's children list.
  */
 function _walkInner(
-  islands: Record<string, ComponentType>,
+  islands: Record<string, Record<string, ComponentType>>,
   // deno-lint-ignore no-explicit-any
   props: any[],
   markerStack: Marker[],
@@ -203,12 +211,24 @@ function _walkInner(
             const vnode = vnodeStack.pop();
 
             const parentNode = sib.parentNode! as HTMLElement;
+
+            // We need an end marker for islands because multiple
+            // islands can share the same parent node. Since
+            // islands are root-level render calls any calls to
+            // `.appendChild` would lead to a wrong result.
+            const endMarker = new Text("");
+            parentNode.insertBefore(
+              endMarker,
+              marker.endNode,
+            );
+
             const _render = () =>
               render(
                 vnode,
                 createRootFragment(
                   parentNode,
                   children,
+                  endMarker,
                   // deno-lint-ignore no-explicit-any
                 ) as any as HTMLElement,
               );
@@ -236,7 +256,7 @@ function _walkInner(
         }
       } else if (comment.startsWith("frsh")) {
         // We're opening a new island
-        const [id, n] = comment.slice(5).split(":");
+        const [id, exportName, n] = comment.slice(5).split(":");
         const islandProps = props[Number(n)];
 
         markerStack.push({
@@ -245,7 +265,7 @@ function _walkInner(
           text: comment,
           kind: MarkerKind.Island,
         });
-        const vnode = h(islands[id], islandProps);
+        const vnode = h(islands[id][exportName], islandProps);
         vnodeStack.push(vnode);
       }
     } else if (isTextNode(sib)) {
diff --git a/src/runtime/utils.ts b/src/runtime/utils.ts
index ff89bef9066..38ae909b8fd 100644
--- a/src/runtime/utils.ts
+++ b/src/runtime/utils.ts
@@ -11,7 +11,7 @@ export const IS_BROWSER = typeof document !== "undefined";
  * specific to the current version of the application, and as such can be safely
  * served with a very long cache lifetime (1 year).
  */
-export function asset(path: string) {
+export function asset(path: string): string {
   if (!path.startsWith("/") || path.startsWith("//")) return path;
   try {
     const url = new URL(path, "https://freshassetcache.local");
diff --git a/src/server/__snapshots__/serializer_test.ts.snap b/src/server/__snapshots__/serializer_test.ts.snap
index fc4e3467954..318b7318ffb 100644
--- a/src/server/__snapshots__/serializer_test.ts.snap
+++ b/src/server/__snapshots__/serializer_test.ts.snap
@@ -2,10 +2,18 @@ export const snapshot = {};
 
 snapshot[`serializer - primitives & plain objects 1`] = `'{"v":{"a":1,"b":"2","c":true,"d":null,"f":[1,2,3],"g":{"a":1,"b":2,"c":3}}}'`;
 
+snapshot[`serializer - bigint 1`] = `'{"v":{"a":{"_f":"b","d":"999999999999999999"}}}'`;
+
 snapshot[`serializer - Uint8Array 1`] = `'{"v":{"a":{"_f":"u8a","d":"AQID"}}}'`;
 
 snapshot[`serializer - signals 1`] = `'{"v":{"a":1,"b":{"_f":"s","v":2}}}'`;
 
+snapshot[`serializer - @preact/signals-core 1.2.3 1`] = `'{"v":{"a":1,"b":{"_f":"s","v":2}}}'`;
+
+snapshot[`serializer - @preact/signals-core 1.3.0 1`] = `'{"v":{"a":1,"b":{"_f":"s","v":2}}}'`;
+
+snapshot[`serializer - multiple versions of @preact/signals-core 1`] = `'{"v":{"a":1,"b":{"_f":"s","v":2},"c":{"_f":"s","v":2},"d":{"_f":"s","v":2}}}'`;
+
 snapshot[`serializer - magic key 1`] = `'{"v":{"_f":"l","k":"f","v":{"a":1}}}'`;
 
 snapshot[`serializer - circular reference objects 1`] = `'{"v":{"a":1,"b":0},"r":[[[],["b"]]]}'`;
diff --git a/src/server/context.ts b/src/server/context.ts
index 16fead47faf..d85cabaa78a 100644
--- a/src/server/context.ts
+++ b/src/server/context.ts
@@ -1,11 +1,9 @@
 import {
-  ConnInfo,
   dirname,
   extname,
   fromFileUrl,
   join,
   JSONC,
-  RequestHandler,
   Status,
   toFileUrl,
   typeByExtension,
@@ -29,16 +27,24 @@ import {
   MiddlewareModule,
   MiddlewareRoute,
   Plugin,
+  PluginMiddleware,
+  PluginRoute,
   RenderFunction,
   RenderOptions,
   Route,
   RouteModule,
   RouterOptions,
+  RouterState,
+  ServeHandlerInfo,
   UnknownPage,
   UnknownPageModule,
 } from "./types.ts";
-import { render as internalRender } from "./render.ts";
-import { ContentSecurityPolicyDirectives, SELF } from "../runtime/csp.ts";
+import { DEFAULT_RENDER_FN, render as internalRender } from "./render.ts";
+import {
+  ContentSecurityPolicy,
+  ContentSecurityPolicyDirectives,
+  SELF,
+} from "../runtime/csp.ts";
 import { ASSET_CACHE_BUST_KEY, INTERNAL_PREFIX } from "../runtime/utils.ts";
 import {
   Builder,
@@ -46,10 +52,12 @@ import {
   EsbuildBuilder,
   JSXConfig,
 } from "../build/mod.ts";
+import { InternalRoute } from "./router.ts";
 
-interface RouterState {
-  state: Record<string, unknown>;
-}
+const DEFAULT_CONN_INFO: ServeHandlerInfo = {
+  localAddr: { transport: "tcp", hostname: "localhost", port: 8080 },
+  remoteAddr: { transport: "tcp", hostname: "localhost", port: 1234 },
+};
 
 function isObject(value: unknown) {
   return typeof value === "object" &&
@@ -170,7 +178,14 @@ export class ServerContext {
     let app: AppModule = DEFAULT_APP;
     let notFound: UnknownPage = DEFAULT_NOT_FOUND;
     let error: ErrorPage = DEFAULT_ERROR;
-    for (const [self, module] of Object.entries(manifest.routes)) {
+    const allRoutes = [
+      ...Object.entries(manifest.routes),
+      ...Object.entries(getMiddlewareRoutesFromPlugins(opts.plugins || [])),
+      ...Object.entries(getRoutesFromPlugins(opts.plugins || [])),
+    ];
+    for (
+      const [self, module] of allRoutes
+    ) {
       const url = new URL(self, baseUrl).href;
       if (!url.startsWith(baseUrl + "routes")) {
         throw new TypeError("Page is not a child of the basepath.");
@@ -188,6 +203,11 @@ export class ServerContext {
           pattern = String(config.routeOverride);
         }
         let { handler } = module as RouteModule;
+        if (!handler && "handlers" in module) {
+          throw new Error(
+            `Found named export "handlers" in ${self} instead of "handler". Did you mean "handler"?`,
+          );
+        }
         handler ??= {};
         if (
           component && typeof handler === "object" && handler.GET === undefined
@@ -268,7 +288,7 @@ export class ServerContext {
       }
     }
     sortRoutes(routes);
-    sortRoutes(middlewares);
+    sortMiddleware(middlewares);
 
     for (const [self, module] of Object.entries(manifest.islands)) {
       const url = new URL(self, baseUrl).href;
@@ -277,14 +297,21 @@ export class ServerContext {
       }
       const path = url.substring(baseUrl.length).substring("islands".length);
       const baseRoute = path.substring(1, path.length - extname(path).length);
-      const name = sanitizeIslandName(baseRoute);
-      const id = name.toLowerCase();
-      if (typeof module.default !== "function") {
-        throw new TypeError(
-          `Islands must default export a component ('${self}').`,
-        );
+
+      for (const [exportName, exportedFunction] of Object.entries(module)) {
+        if (typeof exportedFunction !== "function") {
+          continue;
+        }
+        const name = sanitizeIslandName(baseRoute);
+        const id = `${name}_${exportName}`.toLowerCase();
+        islands.push({
+          id,
+          name,
+          url,
+          component: exportedFunction,
+          exportName,
+        });
       }
-      islands.push({ id, name, url, component: module.default });
     }
 
     const staticFiles: StaticFile[] = [];
@@ -357,15 +384,19 @@ export class ServerContext {
    * This functions returns a request handler that handles all routes required
    * by fresh, including static files.
    */
-  handler(): RequestHandler {
+  handler(): (req: Request, connInfo?: ServeHandlerInfo) => Promise<Response> {
     const handlers = this.#handlers();
     const inner = router.router<RouterState>(handlers);
     const withMiddlewares = this.#composeMiddlewares(
       this.#middlewares,
       handlers.errorHandler,
+      router.getParamsAndRoute<RouterState>(handlers),
     );
     const trailingSlashEnabled = this.#routerOptions?.trailingSlash;
-    return async function handler(req: Request, connInfo: ConnInfo) {
+    return async function handler(
+      req: Request,
+      connInfo: ServeHandlerInfo = DEFAULT_CONN_INFO,
+    ) {
       // Redirect requests that end with a trailing slash to their non-trailing
       // slash counterpart.
       // Ex: /about/ -> /about
@@ -382,7 +413,16 @@ export class ServerContext {
           headers: { location },
         });
       } else if (trailingSlashEnabled && !url.pathname.endsWith("/")) {
-        return Response.redirect(url.href + "/", Status.PermanentRedirect);
+        // If the last element of the path has a "." it's a file
+        const isFile = url.pathname.split("/").at(-1)?.includes(".");
+
+        // If the path uses the internal prefix, don't redirect it
+        const isInternal = url.pathname.startsWith(INTERNAL_PREFIX);
+
+        if (!isFile && !isInternal) {
+          url.pathname += "/";
+          return Response.redirect(url, Status.PermanentRedirect);
+        }
       }
 
       return await withMiddlewares(req, connInfo, inner);
@@ -418,10 +458,16 @@ export class ServerContext {
   #composeMiddlewares(
     middlewares: MiddlewareRoute[],
     errorHandler: router.ErrorHandler<RouterState>,
+    paramsAndRoute: (
+      url: string,
+    ) => {
+      route: InternalRoute<RouterState> | undefined;
+      params: Record<string, string>;
+    },
   ) {
     return (
       req: Request,
-      connInfo: ConnInfo,
+      connInfo: ServeHandlerInfo,
       inner: router.FinalHandler<RouterState>,
     ) => {
       // identify middlewares to apply, if any.
@@ -429,15 +475,30 @@ export class ServerContext {
       const mws = selectMiddlewares(req.url, middlewares);
 
       const handlers: (() => Response | Promise<Response>)[] = [];
+      const paramsAndRouteResult = paramsAndRoute(req.url);
 
       const middlewareCtx: MiddlewareHandlerContext = {
         next() {
           const handler = handlers.shift()!;
-          return Promise.resolve(handler());
+          try {
+            // As the `handler` can be either sync or async, depending on the user's code,
+            // the current shape of our wrapper, that is `() => handler(req, middlewareCtx)`,
+            // doesn't guarantee that all possible errors will be captured.
+            // `Promise.resolve` accept the value that should be returned to the promise
+            // chain, however, if that value is produced by the external function call,
+            // the possible `Error`, will *not* be caught by any `.catch()` attached to that chain.
+            // Because of that, we need to make sure that the produced value is pushed
+            // through the pipeline only if function was called successfully, and handle
+            // the error case manually, by returning the `Error` as rejected promise.
+            return Promise.resolve(handler());
+          } catch (e) {
+            return Promise.reject(e);
+          }
         },
         ...connInfo,
         state: {},
         destination: "route",
+        params: paramsAndRouteResult.params,
       };
 
       for (const mw of mws) {
@@ -458,6 +519,8 @@ export class ServerContext {
       const { destination, handler } = inner(
         req,
         ctx,
+        paramsAndRouteResult.params,
+        paramsAndRouteResult.route,
       );
       handlers.push(handler);
       middlewareCtx.destination = destination;
@@ -542,6 +605,58 @@ export class ServerContext {
       };
     }
 
+    const dependenciesFn = (path: string) => {
+      const snapshot = this.#maybeBuildSnapshot();
+      return snapshot?.dependencies(path) ?? [];
+    };
+
+    const renderNotFound = async <Data = undefined>(
+      req: Request,
+      params: Record<string, string>,
+      // deno-lint-ignore no-explicit-any
+      ctx?: any,
+      data?: Data,
+      error?: unknown,
+    ) => {
+      const notFound = this.#notFound;
+      if (!notFound.component) {
+        return sendResponse(["Not found.", undefined], {
+          status: Status.NotFound,
+          isDev: this.#dev,
+          statusText: undefined,
+          headers: undefined,
+        });
+      }
+      const imports: string[] = [];
+      const resp = await internalRender({
+        request: req,
+        context: ctx,
+        route: notFound,
+        islands: this.#islands,
+        plugins: this.#plugins,
+        app: this.#app,
+        imports,
+        dependenciesFn,
+        renderFn: this.#renderFn,
+        url: new URL(req.url),
+        params,
+        data,
+        state: ctx?.state,
+        error,
+      });
+
+      if (resp instanceof Response) {
+        return resp;
+      }
+
+      return sendResponse(resp, {
+        status: Status.NotFound,
+        isDev: this.#dev,
+        statusText: undefined,
+        headers: undefined,
+      });
+    };
+
     const genRender = <Data = undefined>(
       route: Route<Data> | UnknownPage | ErrorPage,
       status: number,
@@ -551,6 +666,8 @@ export class ServerContext {
       return (
         req: Request,
         params: Record<string, string>,
+        // deno-lint-ignore no-explicit-any
+        ctx?: any,
         error?: unknown,
       ) => {
         return async (data?: Data, options?: RenderOptions) => {
@@ -558,64 +675,42 @@ export class ServerContext {
             throw new Error("This page does not have a component to render.");
           }
 
-          if (
-            typeof route.component === "function" &&
-            route.component.constructor.name === "AsyncFunction"
-          ) {
-            throw new Error(
-              "Async components are not supported. Fetch data inside of a route handler, as described in the docs: https://fresh.deno.dev/docs/getting-started/fetching-data",
-            );
-          }
-
           const resp = await internalRender({
+            request: req,
+            context: {
+              ...ctx,
+              async renderNotFound() {
+                return await renderNotFound(req, params, ctx, data, error);
+              },
+            },
             route,
             islands: this.#islands,
             plugins: this.#plugins,
             app: this.#app,
             imports,
-            dependenciesFn: (path) => {
-              const snapshot = this.#maybeBuildSnapshot();
-              return snapshot?.dependencies(path) ?? [];
-            },
+            dependenciesFn,
             renderFn: this.#renderFn,
             url: new URL(req.url),
             params,
             data,
+            state: ctx?.state,
             error,
           });
 
-          const headers: Record<string, string> = {
-            "content-type": "text/html; charset=utf-8",
-          };
-
-          const [body, csp] = resp;
-          if (csp) {
-            if (this.#dev) {
-              csp.directives.connectSrc = [
-                ...(csp.directives.connectSrc ?? []),
-                SELF,
-              ];
-            }
-            const directive = serializeCSPDirectives(csp.directives);
-            if (csp.reportOnly) {
-              headers["content-security-policy-report-only"] = directive;
-            } else {
-              headers["content-security-policy"] = directive;
-            }
+          if (resp instanceof Response) {
+            return resp;
           }
-          return new Response(body, {
+
+          return sendResponse(resp, {
             status: options?.status ?? status,
             statusText: options?.statusText,
-            headers: options?.headers
-              ? { ...headers, ...options.headers }
-              : headers,
+            headers: options?.headers,
+            isDev: this.#dev,
           });
         };
       };
     };
 
-    const createUnknownRender = genRender(this.#notFound, Status.NotFound);
-
     for (const route of this.#routes) {
       if (this.#routerOptions.trailingSlash && route.pattern != "/") {
         route.pattern += "/";
@@ -627,8 +722,10 @@ export class ServerContext {
             (route.handler as Handler)(req, {
               ...ctx,
               params,
-              render: createRender(req, params),
-              renderNotFound: createUnknownRender(req, {}),
+              render: createRender(req, params, ctx),
+              async renderNotFound<Data = undefined>(data: Data) {
+                return await renderNotFound(req, params, ctx, data);
+              },
             }),
         };
       } else {
@@ -642,8 +739,10 @@ export class ServerContext {
             handler(req, {
               ...ctx,
               params,
-              render: createRender(req, params),
-              renderNotFound: createUnknownRender(req, {}),
+              render: createRender(req, params, ctx),
+              async renderNotFound<Data = undefined>(data: Data) {
+                return await renderNotFound(req, params, ctx, data);
+              },
             });
         }
       }
@@ -657,7 +756,9 @@ export class ServerContext {
         req,
         {
           ...ctx,
-          render: createUnknownRender(req, {}),
+          render() {
+            return renderNotFound(req, {}, ctx);
+          },
         },
       );
 
@@ -680,7 +781,7 @@ export class ServerContext {
         {
           ...ctx,
           error,
-          render: errorHandlerRender(req, {}, error),
+          render: errorHandlerRender(req, {}, undefined, error),
         },
       );
     };
@@ -788,10 +889,6 @@ export class ServerContext {
   };
 }
 
-const DEFAULT_RENDER_FN: RenderFunction = (_ctx, render) => {
-  render();
-};
-
 const DEFAULT_ROUTER_OPTIONS: RouterOptions = {
   trailingSlash: false,
 };
@@ -840,7 +937,7 @@ export function selectMiddlewares(url: string, middlewares: MiddlewareRoute[]) {
  * Sort pages by their relative routing priority, based on the parts in the
  * route matcher
  */
-function sortRoutes<T extends { pattern: string }>(routes: T[]) {
+export function sortRoutes<T extends { pattern: string }>(routes: T[]) {
   routes.sort((a, b) => {
     const partsA = a.pattern.split("/");
     const partsB = b.pattern.split("/");
@@ -858,6 +955,40 @@ function sortRoutes<T extends { pattern: string }>(routes: T[]) {
   });
 }
 
+export function sortMiddleware<T extends { pattern: string }>(routes: T[]) {
+  routes.sort((a, b) => {
+    const partsA = a.pattern.split("/");
+    const partsB = b.pattern.split("/");
+
+    for (let i = 0; i < Math.max(partsA.length, partsB.length); i++) {
+      const partA = partsA[i];
+      const partB = partsB[i];
+
+      if (partA === undefined && partB === undefined) return 0;
+      if (partA === undefined) return -1;
+      if (partB === undefined) return 1;
+
+      if (partA === partB) continue;
+
+      const priorityA = getPriority(partA);
+      const priorityB = getPriority(partB);
+
+      if (priorityA !== priorityB) {
+        return priorityA - priorityB; // Sort in ascending order of priority
+      }
+    }
+
+    return 0;
+  });
+}
+
+function getPriority(part: string) {
+  if (part.startsWith(":")) {
+    return part.endsWith("*") ? 2 : 1;
+  }
+  return 0;
+}
+
 /** Transform a filesystem URL path to a `path-to-regex` style matcher. */
 function pathToPattern(path: string): string {
   const parts = path.split("/");
@@ -909,7 +1040,7 @@ function toPascalCase(text: string): string {
 }
 
 function sanitizeIslandName(name: string): string {
-  const fileName = name.replace("/", "");
+  const fileName = name.replaceAll("/", "_");
   return toPascalCase(fileName);
 }
 
@@ -1010,3 +1141,75 @@ async function readDenoConfig(
     dir = parent;
   }
 }
+
+function getMiddlewareRoutesFromPlugins(
+  plugins: Plugin[],
+): Record<string, MiddlewareModule> {
+  return (Object.assign(
+    {},
+    ...[
+      ...new Set(
+        ([] as PluginMiddleware[]).concat(
+          ...plugins.map((p) => p.middlewares || []),
+        ),
+      ),
+    ]
+      .map((middleware: PluginMiddleware) => ({
+        [`./routes${middleware.path}_middleware.ts`]: {
+          handler: middleware.middleware.handler,
+        },
+      })) || [],
+  ));
+}
+
+function getRoutesFromPlugins(plugins: Plugin[]): Record<string, RouteModule> {
+  return (Object.assign(
+    {},
+    ...[
+      ...new Set(
+        ([] as PluginRoute[]).concat(...plugins.map((p) => p.routes || [])),
+      ),
+    ]
+      .map((route: PluginRoute) => ({
+        [`./routes${route.path}.ts`]: {
+          default: route.component,
+          handler: route.handler,
+        } as RouteModule,
+      })) || [],
+  ));
+}
+
+function sendResponse(
+  resp: [string, ContentSecurityPolicy | undefined],
+  options: {
+    status: number;
+    statusText: string | undefined;
+    headers?: HeadersInit;
+    isDev: boolean;
+  },
+) {
+  const headers: Record<string, string> = {
+    "content-type": "text/html; charset=utf-8",
+  };
+
+  const [body, csp] = resp;
+  if (csp) {
+    if (options.isDev) {
+      csp.directives.connectSrc = [
+        ...(csp.directives.connectSrc ?? []),
+        SELF,
+      ];
+    }
+    const directive = serializeCSPDirectives(csp.directives);
+    if (csp.reportOnly) {
+      headers["content-security-policy-report-only"] = directive;
+    } else {
+      headers["content-security-policy"] = directive;
+    }
+  }
+  return new Response(body, {
+    status: options.status,
+    statusText: options.statusText,
+    headers: options.headers ? { ...headers, ...options.headers } : headers,
+  });
+}
diff --git a/src/server/default_error_page.ts b/src/server/default_error_page.ts
index e5f22c0aa2d..43a6209673b 100644
--- a/src/server/default_error_page.ts
+++ b/src/server/default_error_page.ts
@@ -33,7 +33,6 @@ export default function DefaultErrorPage(props: ErrorPageProps) {
           background: "#f9fafb",
           margin: 16,
           minWidth: "300px",
-          width: "50%",
         },
       },
       h("p", {
diff --git a/src/server/deps.ts b/src/server/deps.ts
index 9a2bbd3e367..94eb5700281 100644
--- a/src/server/deps.ts
+++ b/src/server/deps.ts
@@ -5,34 +5,18 @@ export {
   fromFileUrl,
   join,
   toFileUrl,
-} from "https://deno.land/std@0.190.0/path/mod.ts";
-export { walk } from "https://deno.land/std@0.190.0/fs/walk.ts";
+} from "https://deno.land/std@0.193.0/path/mod.ts";
+export { walk } from "https://deno.land/std@0.193.0/fs/walk.ts";
+export * as colors from "https://deno.land/std@0.193.0/fmt/colors.ts";
 export {
   type Handler as ServeHandler,
   serve,
-} from "https://deno.land/std@0.190.0/http/server.ts";
-export type {
-  ConnInfo,
-  Handler as RequestHandler,
-  ServeInit,
-} from "https://deno.land/std@0.190.0/http/server.ts";
-export { Status } from "https://deno.land/std@0.190.0/http/http_status.ts";
+} from "https://deno.land/std@0.193.0/http/server.ts";
+export type { ServeInit } from "https://deno.land/std@0.193.0/http/server.ts";
+export { Status } from "https://deno.land/std@0.193.0/http/http_status.ts";
 export {
   typeByExtension,
-} from "https://deno.land/std@0.190.0/media_types/mod.ts";
-export { toHashString } from "https://deno.land/std@0.190.0/crypto/to_hash_string.ts";
-export { escape } from "https://deno.land/std@0.190.0/regexp/escape.ts";
-export * as JSONC from "https://deno.land/std@0.190.0/jsonc/mod.ts";
-
-// -- esbuild --
-// @deno-types="https://deno.land/x/esbuild@v0.17.11/mod.d.ts"
-import * as esbuildWasm from "https://deno.land/x/esbuild@v0.17.11/wasm.js";
-import * as esbuildNative from "https://deno.land/x/esbuild@v0.17.11/mod.js";
-// @ts-ignore trust me
-// deno-lint-ignore no-deprecated-deno-api
-const esbuild: typeof esbuildWasm = Deno.run === undefined
-  ? esbuildWasm
-  : esbuildNative;
-export { esbuild, esbuildWasm as esbuildTypes };
-
-export { denoPlugins } from "https://deno.land/x/esbuild_deno_loader@0.7.0/mod.ts";
+} from "https://deno.land/std@0.193.0/media_types/mod.ts";
+export { toHashString } from "https://deno.land/std@0.193.0/crypto/to_hash_string.ts";
+export { escape } from "https://deno.land/std@0.193.0/regexp/escape.ts";
+export * as JSONC from "https://deno.land/std@0.193.0/jsonc/mod.ts";
diff --git a/src/server/mod.ts b/src/server/mod.ts
index 82a57988cb5..108614c0c51 100644
--- a/src/server/mod.ts
+++ b/src/server/mod.ts
@@ -1,13 +1,14 @@
 import { ServerContext } from "./context.ts";
-import * as colors from "https://deno.land/std@0.190.0/fmt/colors.ts";
-import { serve, ServeHandler } from "./deps.ts";
 export { Status } from "./deps.ts";
+import { colors, serve } from "./deps.ts";
 import {
   AppModule,
   ErrorPageModule,
   IslandModule,
   MiddlewareModule,
   RouteModule,
+  ServeHandler,
+  ServeHandlerInfo,
   StartOptions,
   UnknownPageModule,
 } from "./types.ts";
@@ -22,13 +23,21 @@ export type {
   Handlers,
   MiddlewareHandler,
   MiddlewareHandlerContext,
+  MultiHandler,
   PageProps,
   Plugin,
+  PluginAsyncRenderContext,
+  PluginAsyncRenderFunction,
+  PluginRenderContext,
+  PluginRenderFunction,
+  PluginRenderFunctionResult,
   PluginRenderResult,
   PluginRenderScripts,
   PluginRenderStyleTag,
   RenderFunction,
   RouteConfig,
+  RouteContext,
+  ServeHandlerInfo,
   StartOptions,
   UnknownHandler,
   UnknownHandlerContext,
@@ -64,7 +73,9 @@ export { ServerContext };
 export async function createHandler(
   routes: Manifest,
   opts: StartOptions = {},
-) {
+): Promise<
+  (req: Request, connInfo?: ServeHandlerInfo) => Promise<Response>
+> {
   const ctx = await ServerContext.fromManifest(routes, opts);
   return ctx.handler();
 }
@@ -74,11 +85,11 @@ export async function start(routes: Manifest, opts: StartOptions = {}) {
 
   if (!opts.onListen) {
     opts.onListen = (params) => {
+      console.log();
       console.log(
-        `\n%c 🍋 Fresh ready %c`,
-        "background-color: #86efac; color: black; font-weight: bold",
-        "",
+        colors.bgRgb8(colors.black(colors.bold(" 🍋 Fresh ready ")), 121),
       );
+
       const address = colors.cyan(`http://localhost:${params.port}/`);
       const localLabel = colors.bold("Local:");
       console.log(`    ${localLabel} ${address}\n`);
@@ -126,10 +137,12 @@ export async function start(routes: Manifest, opts: StartOptions = {}) {
 }
 
 async function bootServer(handler: ServeHandler, opts: StartOptions) {
-  if (opts.experimentalDenoServe === true) {
-    // @ts-ignore as `Deno.serve` is still unstable.
-    await Deno.serve({ ...opts, handler }).finished;
+  // @ts-ignore Ignore type error when type checking with Deno versions
+  if (typeof Deno.serve === "function") {
+    // @ts-ignore Ignore type error when type checking with Deno versions
+    await Deno.serve(opts, handler).finished;
   } else {
+    // @ts-ignore Deprecated std serve way
     await serve(handler, opts);
   }
 }
diff --git a/src/server/render.ts b/src/server/render.ts
index 086292c3975..9f9068a6ce8 100644
--- a/src/server/render.ts
+++ b/src/server/render.ts
@@ -11,6 +11,7 @@ import {
 } from "preact";
 import {
   AppModule,
+  AsyncRoute,
   ErrorPage,
   Island,
   Plugin,
@@ -29,6 +30,10 @@ import { assetHashingHook } from "../runtime/utils.ts";
 import { htmlEscapeJsonString } from "./htmlescape.ts";
 import { serialize } from "./serializer.ts";
 
+export const DEFAULT_RENDER_FN: RenderFunction = (_ctx, render) => {
+  render();
+};
+
 // These hooks are long stable, but when we originally added them we
 // weren't sure if they should be public.
 export interface AdvancedPreactOptions extends PreactOptions {
@@ -36,10 +41,17 @@ export interface AdvancedPreactOptions extends PreactOptions {
   __c?(vnode: VNode, commitQueue: Component[]): void;
   /** Attach a hook that is invoked before a vnode has rendered. */
   __r?(vnode: VNode): void;
+  errorBoundaries?: boolean;
 }
 const options = preactOptions as AdvancedPreactOptions;
 
+// Enable error boundaries in Preact.
+options.errorBoundaries = true;
+
 export interface RenderOptions<Data> {
+  request: Request;
+  // deno-lint-ignore no-explicit-any
+  context: any;
   route: Route<Data> | UnknownPage | ErrorPage;
   islands: Island[];
   plugins: Plugin[];
@@ -50,6 +62,7 @@ export interface RenderOptions<Data> {
   params: Record<string, string | string[]>;
   renderFn: RenderFunction;
   data?: Data;
+  state?: Record<string, unknown>;
   error?: unknown;
   lang?: string;
 }
@@ -128,12 +141,17 @@ function defaultCsp() {
  */
 export async function render<Data>(
   opts: RenderOptions<Data>,
-): Promise<[string, ContentSecurityPolicy | undefined]> {
+): Promise<[string, ContentSecurityPolicy | undefined] | Response> {
+  const component = opts.route.component;
+  const isAsyncComponent = typeof component === "function" &&
+    component.constructor.name === "AsyncFunction";
+
   const props: Record<string, unknown> = {
     params: opts.params,
     url: opts.url,
     route: opts.route.pattern,
     data: opts.data,
+    state: opts.state,
   };
   if (opts.error) {
     props.error = opts.error;
@@ -143,30 +161,6 @@ export async function render<Data>(
     ? defaultCsp()
     : undefined;
   const headComponents: ComponentChildren[] = [];
-
-  const vnode = h(CSP_CONTEXT.Provider, {
-    value: csp,
-    children: h(HEAD_CONTEXT.Provider, {
-      value: headComponents,
-      children: h(opts.app.default, {
-        params: opts.params as Record<string, string>,
-        url: opts.url,
-        route: opts.route.pattern,
-        data: opts.data,
-        Component() {
-          return h(opts.route.component! as ComponentType<unknown>, props);
-        },
-      }),
-    }),
-  });
-
-  const ctx = new RenderContext(
-    crypto.randomUUID(),
-    opts.url,
-    opts.route.pattern,
-    opts.lang ?? "en",
-  );
-
   if (csp) {
     // Clear the csp
     const newCsp = defaultCsp();
@@ -185,15 +179,46 @@ export async function render<Data>(
   // Clear the island props
   ISLAND_PROPS = [];
 
+  const ctx = new RenderContext(
+    crypto.randomUUID(),
+    opts.url,
+    opts.route.pattern,
+    opts.lang ?? "en",
+  );
+
   let bodyHtml: string | null = null;
 
-  function renderInner(): string {
-    bodyHtml = renderToString(vnode);
+  function renderInner(vnode: ComponentChildren): string {
+    const root = h(CSP_CONTEXT.Provider, {
+      value: csp,
+      children: h(HEAD_CONTEXT.Provider, {
+        value: headComponents,
+        children: h(opts.app.default, {
+          params: opts.params as Record<string, string>,
+          url: opts.url,
+          route: opts.route.pattern,
+          data: opts.data,
+          state: opts.state!,
+          Component() {
+            // deno-lint-ignore no-explicit-any
+            return vnode as any;
+          },
+        }),
+      }),
+    });
+    bodyHtml = renderToString(root);
     return bodyHtml;
   }
 
-  const syncPlugins = opts.plugins.filter((p) => p.render);
   const renderResults: [Plugin, PluginRenderResult][] = [];
+  const syncPlugins = opts.plugins.filter((p) => p.render);
+  if (isAsyncComponent && syncPlugins.length > 0) {
+    throw new Error(
+      `Async server components cannot be rendered synchronously. The following plugins use a synchronous render method: "${
+        syncPlugins.map((plugin) => plugin.name).join('", "')
+      }"`,
+    );
+  }
 
   function renderSync(): PluginRenderFunctionResult {
     const plugin = syncPlugins.shift();
@@ -206,7 +231,7 @@ export async function render<Data>(
       }
       renderResults.push([plugin, res]);
     } else {
-      renderInner();
+      renderInner(h(component as ComponentType, props));
     }
     if (bodyHtml === null) {
       throw new Error(
@@ -221,6 +246,7 @@ export async function render<Data>(
 
   const asyncPlugins = opts.plugins.filter((p) => p.renderAsync);
 
+  let asyncRenderResponse: Response | undefined;
   async function renderAsync(): Promise<PluginRenderFunctionResult> {
     const plugin = asyncPlugins.shift();
     if (plugin) {
@@ -237,7 +263,33 @@ export async function render<Data>(
         );
       }
     } else {
-      await opts.renderFn(ctx, () => renderSync().htmlText);
+      if (isAsyncComponent) {
+        if (opts.renderFn !== DEFAULT_RENDER_FN) {
+          throw new Error(
+            `Async server components are not supported with custom render functions.`,
+          );
+        }
+
+        // deno-lint-ignore no-explicit-any
+        const res = await (component as AsyncRoute<any>)(opts.request, {
+          localAddr: opts.context.localAddr,
+          remoteAddr: opts.context.remoteAddr,
+          renderNotFound: opts.context.renderNotFound,
+          url: opts.url,
+          route: opts.route.pattern,
+          params: opts.params as Record<string, string>,
+          state: opts.state ?? {},
+        });
+        if (res instanceof Response) {
+          asyncRenderResponse = res;
+          bodyHtml = "";
+        } else {
+          renderInner(res);
+        }
+      } else {
+        await opts.renderFn(ctx, () => renderSync().htmlText);
+      }
+
       if (bodyHtml === null) {
         throw new Error(
           `The 'render' function was not called by the legacy async render hook.`,
@@ -251,6 +303,10 @@ export async function render<Data>(
   }
 
   await renderAsync();
+  if (asyncRenderResponse !== undefined) {
+    return asyncRenderResponse;
+  }
+
   bodyHtml = bodyHtml as unknown as string;
 
   const moduleScripts: [string, string][] = [];
@@ -347,8 +403,9 @@ export async function render<Data>(
     let islandRegistry = "";
     for (const island of ENCOUNTERED_ISLANDS) {
       const url = addImport(`island-${island.id}.js`);
-      script += `import ${island.name} from "${url}";`;
-      islandRegistry += `${island.id}:${island.name},`;
+      script +=
+        `import * as ${island.name}_${island.exportName} from "${url}";`;
+      islandRegistry += `${island.id}:${island.name}_${island.exportName},`;
     }
     script += `revive({${islandRegistry}}, STATE[0]);`;
   }
@@ -533,7 +590,7 @@ options.vnode = (vnode) => {
 
         return wrapWithMarker(
           child,
-          `frsh-${island.id}:${ISLAND_PROPS.length - 1}`,
+          `frsh-${island.id}:${island.exportName}:${ISLAND_PROPS.length - 1}`,
         );
       };
     }
diff --git a/src/server/route_sorting_test.ts b/src/server/route_sorting_test.ts
new file mode 100644
index 00000000000..b7ce29cd6f9
--- /dev/null
+++ b/src/server/route_sorting_test.ts
@@ -0,0 +1,94 @@
+import { assertEquals } from "../../tests/deps.ts";
+import { sortMiddleware, sortRoutes } from "./context.ts";
+
+Deno.test("sort middleware", () => {
+  const routes = [
+    { pattern: "{/*}?" },
+    { pattern: "/layeredMdw{/*}?" },
+    { pattern: "/layeredMdw/layer2{/*}?" },
+    { pattern: "/layeredMdw/layer2/layer3{/*}?" },
+    { pattern: "/layeredMdw/nesting/:tenant/:environment{/*}?" },
+    { pattern: "/layeredMdw/nesting/:tenant{/*}?" },
+    { pattern: "/layeredMdw/nesting{/*}?" },
+    { pattern: "/state-in-props{/*}?" },
+  ];
+  const sortedRoutes = [
+    { pattern: "{/*}?" },
+    { pattern: "/layeredMdw{/*}?" },
+    { pattern: "/state-in-props{/*}?" },
+    { pattern: "/layeredMdw/layer2{/*}?" },
+    { pattern: "/layeredMdw/nesting{/*}?" },
+    { pattern: "/layeredMdw/layer2/layer3{/*}?" },
+    { pattern: "/layeredMdw/nesting/:tenant{/*}?" },
+    { pattern: "/layeredMdw/nesting/:tenant/:environment{/*}?" },
+  ];
+  sortMiddleware(routes);
+  assertEquals(routes, sortedRoutes);
+});
+
+Deno.test("sort routes", () => {
+  const routes = [
+    { pattern: "/:name" },
+    { pattern: "/api/get_only" },
+    { pattern: "/api/head_override" },
+    { pattern: "/assetsCaching" },
+    { pattern: "/books/:id(\\d+)" },
+    { pattern: "/connInfo" },
+    { pattern: "/evil" },
+    { pattern: "/failure" },
+    { pattern: "/" },
+    { pattern: "/intercept" },
+    { pattern: "/intercept_args" },
+    { pattern: "/islands" },
+    { pattern: "/islands/returning_null" },
+    { pattern: "/islands/root_fragment" },
+    { pattern: "/islands/root_fragment_conditional_first" },
+    { pattern: "/layeredMdw/layer2-no-mw/without_mw" },
+    { pattern: "/layeredMdw/layer2/abc" },
+    { pattern: "/layeredMdw/layer2" },
+    { pattern: "/layeredMdw/layer2/layer3/:id" },
+    { pattern: "/layeredMdw/nesting/:tenant/:environment/:id" },
+    { pattern: "/layeredMdw/nesting/:tenant" },
+    { pattern: "/layeredMdw/nesting" },
+    { pattern: "/middleware_root" },
+    { pattern: "/not_found" },
+    { pattern: "/params/:path*" },
+    { pattern: "/props/:id" },
+    { pattern: "/static" },
+    { pattern: "/status_overwrite" },
+    { pattern: "/foo/:path*" },
+  ];
+  const sortedRoutes = [
+    { pattern: "/api/get_only" },
+    { pattern: "/api/head_override" },
+    { pattern: "/assetsCaching" },
+    { pattern: "/books/:id(\\d+)" },
+    { pattern: "/connInfo" },
+    { pattern: "/evil" },
+    { pattern: "/failure" },
+    { pattern: "/" },
+    { pattern: "/intercept" },
+    { pattern: "/intercept_args" },
+    { pattern: "/islands" },
+    { pattern: "/islands/returning_null" },
+    { pattern: "/islands/root_fragment" },
+    { pattern: "/islands/root_fragment_conditional_first" },
+    { pattern: "/layeredMdw/layer2-no-mw/without_mw" },
+    { pattern: "/layeredMdw/layer2" },
+    { pattern: "/layeredMdw/layer2/abc" },
+    { pattern: "/layeredMdw/layer2/layer3/:id" },
+    { pattern: "/layeredMdw/nesting" },
+    { pattern: "/layeredMdw/nesting/:tenant" },
+    { pattern: "/layeredMdw/nesting/:tenant/:environment/:id" },
+    { pattern: "/middleware_root" },
+    { pattern: "/not_found" },
+    { pattern: "/params/:path*" },
+    { pattern: "/props/:id" },
+    { pattern: "/static" },
+    { pattern: "/status_overwrite" },
+    { pattern: "/foo/:path*" },
+    { pattern: "/:name" },
+  ];
+  sortRoutes(routes);
+  assertEquals(routes, sortedRoutes);
+});
diff --git a/src/server/router.ts b/src/server/router.ts
index bca17c036e0..e056e1081af 100644
--- a/src/server/router.ts
+++ b/src/server/router.ts
@@ -1,6 +1,6 @@
-import type { ConnInfo } from "./deps.ts";
+import { ServeHandlerInfo } from "./types.ts";
 
-type HandlerContext<T = unknown> = T & ConnInfo;
+type HandlerContext<T = unknown> = T & ServeHandlerInfo;
 
 export type Handler<T = unknown> = (
   req: Request,
@@ -10,6 +10,8 @@ export type Handler<T = unknown> = (
 export type FinalHandler<T = unknown> = (
   req: Request,
   ctx: HandlerContext<T>,
+  params: Record<string, string>,
+  route?: InternalRoute<T>,
 ) => {
   destination: DestinationKind;
   handler: () => Response | Promise<Response>;
@@ -125,25 +127,22 @@ function processRoutes<T>(
   }
 }
 
-export function router<T = unknown>(
+export function getParamsAndRoute<T>(
   {
     internalRoutes,
     staticRoutes,
     routes,
-    otherHandler,
-    unknownMethodHandler,
   }: RouterOptions<T>,
-): FinalHandler<T> {
-  unknownMethodHandler ??= defaultUnknownMethodHandler;
-
+): (
+  url: string,
+) => { route: InternalRoute<T> | undefined; params: Record<string, string> } {
   const processedRoutes: InternalRoute<T>[] = [];
   processRoutes(processedRoutes, internalRoutes, "internal");
   processRoutes(processedRoutes, staticRoutes, "static");
   processRoutes(processedRoutes, routes, "route");
-
-  return (req, ctx) => {
+  return (url: string) => {
     for (const route of processedRoutes) {
-      const res = route.pattern.exec(req.url);
+      const res = route.pattern.exec(url);
 
       if (res !== null) {
         const groups: Record<string, string> = {};
@@ -156,7 +155,29 @@ export function router<T = unknown>(
             groups[key] = decodeURIComponent(value);
           }
         }
+        return { route: route, params: groups };
+      }
+    }
+    return {
+      route: undefined,
+      params: {},
+    };
+  };
+}
+
+export function router<T = unknown>(
+  {
+    otherHandler,
+    unknownMethodHandler,
+  }: RouterOptions<T>,
+): FinalHandler<T> {
+  unknownMethodHandler ??= defaultUnknownMethodHandler;
 
+  return (req, ctx, groups, route) => {
+    if (route) {
+      const res = route.pattern.exec(req.url);
+
+      if (res !== null) {
         // If not overridden, HEAD requests should be handled as GET requests but without the body.
         if (req.method === "HEAD" && !route.methods["HEAD"]) {
           req = new Request(req.url, { method: "GET", headers: req.headers });
diff --git a/src/server/serializer.ts b/src/server/serializer.ts
index 99c7167e43e..2c49201e123 100644
--- a/src/server/serializer.ts
+++ b/src/server/serializer.ts
@@ -5,6 +5,7 @@
  * - `null`
  * - `boolean`
  * - `number`
+ * - `bigint`
  * - `string`
  * - `array`
  * - `object` (no prototypes)
@@ -134,6 +135,11 @@ export function serialize(data: unknown): SerializeResult {
       const res = { [KEY]: "s", v: value.peek() };
       parentStack.push(res);
       return res;
+    } else if (typeof value === "bigint") {
+      requiresDeserializer = true;
+      const res = { [KEY]: "b", d: value.toString() };
+      parentStack.push(res);
+      return res;
     } else if (value instanceof Uint8Array) {
       requiresDeserializer = true;
       const res = { [KEY]: "u8a", d: b64encode(value) };
@@ -149,6 +155,22 @@ export function serialize(data: unknown): SerializeResult {
       parentStack.push(res);
       return res;
     } else {
+      if (key !== null) {
+        // Bypass signal's `.toJSON` method because we want to serialize
+        // the signal itself including the signal's value and not just
+        // the value. This is needed because `JSON.stringify` always
+        // calls `.toJSON` automatically if available.
+        // deno-lint-ignore no-explicit-any
+        const realValue = (this as any)[key];
+        if (isSignal(realValue)) {
+          requiresDeserializer = true;
+          hasSignals = true;
+          const res = { [KEY]: "s", v: realValue.peek() };
+          parentStack.push(res);
+          return res;
+        }
+      }
+
       parentStack.push(value);
       return value;
     }
diff --git a/src/server/serializer_test.ts b/src/server/serializer_test.ts
index 9674b2250f0..eca080a4865 100644
--- a/src/server/serializer_test.ts
+++ b/src/server/serializer_test.ts
@@ -3,7 +3,9 @@
 import { serialize } from "./serializer.ts";
 import { assert, assertEquals, assertSnapshot } from "../../tests/deps.ts";
 import { deserialize, KEY } from "../runtime/deserializer.ts";
-import { signal } from "@preact/signals";
+import { signal } from "@preact/signals-core";
+import { signal as signal130 } from "@preact/signals-core@1.3.0";
+import { signal as signal123 } from "@preact/signals-core@1.2.3";
 
 Deno.test("serializer - primitives & plain objects", async (t) => {
   const data = {
@@ -22,6 +24,16 @@ Deno.test("serializer - primitives & plain objects", async (t) => {
   assertEquals(deserialized, data);
 });
 
+Deno.test("serializer - bigint", async (t) => {
+  const data = { a: 999999999999999999n };
+  const res = serialize(data);
+  assert(res.requiresDeserializer);
+  assert(!res.hasSignals);
+  await assertSnapshot(t, res.serialized);
+  const deserialized = deserialize(res.serialized);
+  assertEquals(deserialized, data);
+});
+
 Deno.test("serializer - Uint8Array", async (t) => {
   const data = { a: new Uint8Array([1, 2, 3]) };
   const res = serialize(data);
@@ -48,6 +60,60 @@ Deno.test("serializer - signals", async (t) => {
   assertEquals(deserialized.b.peek(), 2);
 });
 
+Deno.test("serializer - @preact/signals-core 1.2.3", async (t) => {
+  const data = {
+    a: 1,
+    b: signal123(2),
+  };
+  const res = serialize(data);
+  assert(res.requiresDeserializer);
+  assert(res.hasSignals);
+  await assertSnapshot(t, res.serialized);
+  const deserialized: any = deserialize(res.serialized, signal);
+  assertEquals(typeof deserialized, "object");
+  assertEquals(deserialized.a, 1);
+  assertEquals(deserialized.b.value, 2);
+  assertEquals(deserialized.b.peek(), 2);
+});
+
+Deno.test("serializer - @preact/signals-core 1.3.0", async (t) => {
+  const data = {
+    a: 1,
+    b: signal130(2),
+  };
+  const res = serialize(data);
+  assert(res.requiresDeserializer);
+  assert(res.hasSignals);
+  await assertSnapshot(t, res.serialized);
+  const deserialized: any = deserialize(res.serialized, signal);
+  assertEquals(typeof deserialized, "object");
+  assertEquals(deserialized.a, 1);
+  assertEquals(deserialized.b.value, 2);
+  assertEquals(deserialized.b.peek(), 2);
+});
+
+Deno.test("serializer - multiple versions of @preact/signals-core", async (t) => {
+  const data = {
+    a: 1,
+    b: signal(2),
+    c: signal123(2),
+    d: signal130(2),
+  };
+  const res = serialize(data);
+  assert(res.requiresDeserializer);
+  assert(res.hasSignals);
+  await assertSnapshot(t, res.serialized);
+  const deserialized: any = deserialize(res.serialized, signal);
+  assertEquals(typeof deserialized, "object");
+  assertEquals(deserialized.a, 1);
+  assertEquals(deserialized.b.value, 2);
+  assertEquals(deserialized.b.peek(), 2);
+  assertEquals(deserialized.c.value, 2);
+  assertEquals(deserialized.c.peek(), 2);
+  assertEquals(deserialized.d.value, 2);
+  assertEquals(deserialized.d.peek(), 2);
+});
+
 Deno.test("serializer - magic key", async (t) => {
   const data = { [KEY]: "f", a: 1 };
   const res = serialize(data);
diff --git a/src/server/types.ts b/src/server/types.ts
index 760e24cc45c..f7d5ffc3fdb 100644
--- a/src/server/types.ts
+++ b/src/server/types.ts
@@ -1,19 +1,11 @@
-import { ComponentType } from "preact";
-import { ConnInfo, ServeInit } from "./deps.ts";
+import { ComponentChildren, ComponentType, VNode } from "preact";
+import { ServeInit } from "./deps.ts";
 import * as router from "./router.ts";
 import { InnerRenderFunction, RenderContext } from "./render.ts";
 
 // --- APPLICATION CONFIGURATION ---
 
-export type StartOptions = ServeInit & FreshOptions & {
-  /**
-   * UNSTABLE: use the `Deno.serve` API as the underlying HTTP server instead of
-   * the `std/http` API. Do not use this in production.
-   *
-   * This option is experimental and may be removed in a future Fresh release.
-   */
-  experimentalDenoServe?: boolean;
-};
+export type StartOptions = ServeInit & FreshOptions;
 
 export interface FreshOptions {
   render?: RenderFunction;
@@ -38,7 +30,7 @@ export type RenderFunction = (
 /// --- ROUTES ---
 
 // deno-lint-ignore no-explicit-any
-export interface PageProps<T = any> {
+export interface PageProps<T = any, S = Record<string, unknown>> {
   /** The URL of the request that resulted in this page being rendered. */
   url: URL;
 
@@ -61,8 +53,19 @@ export interface PageProps<T = any> {
    * `undefined`.
    */
   data: T;
+  state: S;
 }
 
+/**
+ * Context passed to async route components.
+ */
+export type RouteContext<T = unknown, S = Record<string, unknown>> =
+  & Omit<
+    HandlerContext<T, S>,
+    "render"
+  >
+  & Omit<PageProps<unknown, S>, "data">;
+
 export interface RouteConfig {
   /**
    * A route override for the page. This is useful for pages where the route
@@ -84,14 +87,28 @@ export interface RouteConfig {
 // deno-lint-ignore no-empty-interface
 export interface RenderOptions extends ResponseInit {}
 
+export type ServeHandlerInfo = {
+  /**
+   * Backwards compatible with std/server
+   * @deprecated
+   */
+  localAddr?: Deno.NetAddr;
+  remoteAddr: Deno.NetAddr;
+};
+
+export type ServeHandler = (
+  request: Request,
+  info: ServeHandlerInfo,
+) => Response | Promise<Response>;
+
 export interface HandlerContext<Data = unknown, State = Record<string, unknown>>
-  extends ConnInfo {
+  extends ServeHandlerInfo {
   params: Record<string, string>;
   render: (
     data?: Data,
     options?: RenderOptions,
   ) => Response | Promise<Response>;
-  renderNotFound: () => Response | Promise<Response>;
+  renderNotFound: (data?: Data) => Response | Promise<Response>;
   state: State;
 }
 
@@ -106,23 +123,42 @@ export type Handlers<T = any, State = Record<string, unknown>> = {
   [K in router.KnownMethod]?: Handler<T, State>;
 };
 
+/**
+ * @deprecated This type was a short-lived alternative to `Handlers`. Please use `Handlers` instead.
+ */
+export type MultiHandler<T> = Handlers<T>;
+
 export interface RouteModule {
-  default?: ComponentType<PageProps>;
+  default?: PageComponent<PageProps>;
   // deno-lint-ignore no-explicit-any
   handler?: Handler<any, any> | Handlers<any, any>;
   config?: RouteConfig;
 }
 
+export type AsyncRoute<T> = (
+  req: Request,
+  ctx: RouteContext<T>,
+) => Promise<ComponentChildren | Response>;
+export type PageComponent<T> =
+  | ComponentType<PageProps<T>>
+  | AsyncRoute<T>
+  // deno-lint-ignore no-explicit-any
+  | ((props: any) => VNode<any> | ComponentChildren);
+
 // deno-lint-ignore no-explicit-any
 export interface Route<Data = any> {
   pattern: string;
   url: string;
   name: string;
-  component?: ComponentType<PageProps<Data>>;
+  component?: PageComponent<Data>;
   handler: Handler<Data> | Handlers<Data>;
   csp: boolean;
 }
 
+export interface RouterState {
+  state: Record<string, unknown>;
+}
+
 // --- APP ---
 
 export interface AppProps extends PageProps {
@@ -135,17 +171,24 @@ export interface AppModule {
 
 // --- UNKNOWN PAGE ---
 
-export interface UnknownPageProps {
+// deno-lint-ignore no-explicit-any
+export interface UnknownPageProps<T = any> {
   /** The URL of the request that resulted in this page being rendered. */
   url: URL;
 
   /** The route matcher (e.g. /blog/:id) that the request matched for this page
    * to be rendered. */
   route: string;
+
+  /**
+   * Additional data passed into `HandlerContext.renderNotFound`. Defaults to
+   * `undefined`.
+   */
+  data: T;
 }
 
 export interface UnknownHandlerContext<State = Record<string, unknown>>
-  extends ConnInfo {
+  extends ServeHandlerInfo {
   render: () => Response | Promise<Response>;
   state: State;
 }
@@ -156,7 +199,7 @@ export type UnknownHandler = (
 ) => Response | Promise<Response>;
 
 export interface UnknownPageModule {
-  default?: ComponentType<UnknownPageProps>;
+  default?: PageComponent<UnknownPageProps>;
   handler?: UnknownHandler;
   config?: RouteConfig;
 }
@@ -165,7 +208,7 @@ export interface UnknownPage {
   pattern: string;
   url: string;
   name: string;
-  component?: ComponentType<UnknownPageProps>;
+  component?: PageComponent<UnknownPageProps>;
   handler: UnknownHandler;
   csp: boolean;
 }
@@ -185,18 +228,19 @@ export interface ErrorPageProps {
 }
 
 export interface ErrorHandlerContext<State = Record<string, unknown>>
-  extends ConnInfo {
+  extends ServeHandlerInfo {
   error: unknown;
   render: () => Response | Promise<Response>;
   state: State;
 }
+
 export type ErrorHandler = (
   req: Request,
   ctx: ErrorHandlerContext,
 ) => Response | Promise<Response>;
 
 export interface ErrorPageModule {
-  default?: ComponentType<ErrorPageProps>;
+  default?: PageComponent<ErrorPageProps>;
   handler?: ErrorHandler;
   config?: RouteConfig;
 }
@@ -205,7 +249,7 @@ export interface ErrorPage {
   pattern: string;
   url: string;
   name: string;
-  component?: ComponentType<ErrorPageProps>;
+  component?: PageComponent<ErrorPageProps>;
   handler: ErrorHandler;
   csp: boolean;
 }
@@ -213,10 +257,11 @@ export interface ErrorPage {
 // --- MIDDLEWARES ---
 
 export interface MiddlewareHandlerContext<State = Record<string, unknown>>
-  extends ConnInfo {
+  extends ServeHandlerInfo {
   next: () => Promise<Response>;
   state: State;
   destination: router.DestinationKind;
+  params: Record<string, string>;
 }
 
 export interface MiddlewareRoute extends Middleware {
@@ -248,7 +293,7 @@ export interface Middleware<State = Record<string, unknown>> {
 
 export interface IslandModule {
   // deno-lint-ignore no-explicit-any
-  default: ComponentType<any>;
+  [key: string]: ComponentType<any>;
 }
 
 export interface Island {
@@ -256,6 +301,7 @@ export interface Island {
   name: string;
   url: string;
   component: ComponentType<unknown>;
+  exportName: string;
 }
 
 // --- PLUGINS ---
@@ -291,11 +337,16 @@ export interface Plugin {
    * propagate state between the render hook and the renderer.
    */
   renderAsync?(ctx: PluginAsyncRenderContext): Promise<PluginRenderResult>;
+
+  routes?: PluginRoute[];
+
+  middlewares?: PluginMiddleware[];
 }
 
 export interface PluginRenderContext {
   render: PluginRenderFunction;
 }
+
 export interface PluginAsyncRenderContext {
   renderAsync: PluginAsyncRenderFunction;
 }
@@ -328,6 +379,7 @@ export interface PluginRenderScripts {
 }
 
 export type PluginRenderFunction = () => PluginRenderFunctionResult;
+
 export type PluginAsyncRenderFunction = () =>
   | PluginRenderFunctionResult
   | Promise<PluginRenderFunctionResult>;
@@ -339,3 +391,20 @@ export interface PluginRenderFunctionResult {
    * client. */
   requiresHydration: boolean;
 }
+
+export interface PluginMiddleware {
+  /** A path in the format of a filename path without filetype */
+  path: string;
+
+  middleware: Middleware;
+}
+
+export interface PluginRoute {
+  /** A path in the format of a filename path without filetype */
+  path: string;
+
+  component?: ComponentType<PageProps> | ComponentType<AppProps>;
+
+  // deno-lint-ignore no-explicit-any
+  handler?: Handler<any, any> | Handlers<any, any>;
+}
diff --git a/tests/cli_test.ts b/tests/cli_test.ts
index 9c9b67ad95e..6f177d7714b 100644
--- a/tests/cli_test.ts
+++ b/tests/cli_test.ts
@@ -1,5 +1,8 @@
 import * as path from "$std/path/mod.ts";
-import { assertNotMatch } from "https://deno.land/std@0.190.0/testing/asserts.ts";
+import {
+  assertMatch,
+  assertNotMatch,
+} from "https://deno.land/std@0.193.0/testing/asserts.ts";
 import { Status } from "../src/server/deps.ts";
 import {
   assert,
@@ -9,31 +12,19 @@ import {
   puppeteer,
   retry,
 } from "./deps.ts";
-import { startFreshServer } from "./test_utils.ts";
-
-type FileTree = {
-  type: "file";
-  name: string;
-} | {
-  type: "directory";
-  name: string;
-  contents: FileTree[];
-};
-
-const assertFileExistence = async (tree: FileTree[], dirname?: string) => {
-  for (const t of tree) {
-    const stat = await Deno.stat(
-      dirname ? [dirname, t.name].join("/") : t.name,
-    );
-    assertEquals(t.type === "file", stat.isFile);
-
-    if (t.type === "directory") {
-      assert(stat.isDirectory);
-      await assertFileExistence(
-        t.contents,
-        dirname ? [dirname, t.name].join("/") : t.name,
-      );
-    }
+import {
+  clickWhenListenerReady,
+  startFreshServer,
+  waitForText,
+} from "./test_utils.ts";
+
+const assertFileExistence = async (files: string[], dirname: string) => {
+  for (const filePath of files) {
+    const parts = filePath.split("/").slice(1);
+
+    const osFilePath = path.join(dirname, ...parts);
+    const stat = await Deno.stat(osFilePath);
+    assert(stat.isFile, `Could not find file ${osFilePath}`);
   }
 };
 
@@ -58,57 +49,21 @@ Deno.test({
       assertEquals(code, 0);
     });
 
-    // NOTE: generated by `tree -J <dir>`
-    const targetFileTree: FileTree[] = [
-      {
-        "type": "directory",
-        "name": tmpDirName,
-        "contents": [
-          { "type": "file", "name": "README.md" },
-          { "type": "file", "name": "fresh.gen.ts" },
-          {
-            "type": "directory",
-            "name": "components",
-            "contents": [
-              { "type": "file", "name": "Button.tsx" },
-            ],
-          },
-          {
-            "type": "directory",
-            "name": "islands",
-            "contents": [
-              { "type": "file", "name": "Counter.tsx" },
-            ],
-          },
-          { "type": "file", "name": "main.ts" },
-          {
-            "type": "directory",
-            "name": "routes",
-            "contents": [
-              { "type": "file", "name": "[name].tsx" },
-              {
-                "type": "directory",
-                "name": "api",
-                "contents": [
-                  { "type": "file", "name": "joke.ts" },
-                ],
-              },
-              { "type": "file", "name": "index.tsx" },
-            ],
-          },
-          {
-            "type": "directory",
-            "name": "static",
-            "contents": [
-              { "type": "file", "name": "logo.svg" },
-            ],
-          },
-        ],
-      },
+    const files = [
+      `/README.md`,
+      `/fresh.gen.ts`,
+      `/components/Button.tsx`,
+      `/islands/Counter.tsx`,
+      `/main.ts`,
+      `/routes/greet/[name].tsx`,
+      `/routes/api/joke.ts`,
+      `/routes/_app.tsx`,
+      `/routes/index.tsx`,
+      `/static/logo.svg`,
     ];
 
     await t.step("check generated files", async () => {
-      await assertFileExistence(targetFileTree);
+      await assertFileExistence(files, tmpDirName);
     });
 
     await t.step("start up the server and access the root page", async () => {
@@ -130,14 +85,16 @@ Deno.test({
       });
       const page = await browser.newPage();
       await page.goto(address, { waitUntil: "networkidle2" });
-      const counter = await page.$("body > div > div > p");
+      const counter = await page.$("body > div > div > div > p");
       let counterValue = await counter?.evaluate((el) => el.textContent);
       assert(counterValue === "3");
 
-      const buttonPlus = await page.$("body > div > div > button:nth-child(3)");
-      await buttonPlus?.click();
+      await clickWhenListenerReady(
+        page,
+        "body > div > div > div > button:nth-child(3)",
+      );
 
-      await delay(100);
+      await waitForText(page, "body > div > div > div > p", "4");
 
       counterValue = await counter?.evaluate((el) => el.textContent);
       assert(counterValue === "4");
@@ -146,7 +103,7 @@ Deno.test({
 
       await lines.cancel();
       serverProcess.kill("SIGTERM");
-      await delay(100);
+      await serverProcess.status;
     });
 
     await retry(() => Deno.remove(tmpDirName, { recursive: true }));
@@ -177,67 +134,25 @@ Deno.test({
       assertEquals(code, 0);
     });
 
-    // NOTE: generated by `tree -J <dir>`
-    const targetFileTree: FileTree[] = [
-      {
-        "type": "directory",
-        "name": tmpDirName,
-        "contents": [
-          { "type": "file", "name": "README.md" },
-          { "type": "file", "name": "fresh.gen.ts" },
-          { "type": "file", "name": "twind.config.ts" },
-          {
-            "type": "directory",
-            "name": "components",
-            "contents": [
-              { "type": "file", "name": "Button.tsx" },
-            ],
-          },
-          {
-            "type": "directory",
-            "name": "islands",
-            "contents": [
-              { "type": "file", "name": "Counter.tsx" },
-            ],
-          },
-          { "type": "file", "name": "main.ts" },
-          {
-            "type": "directory",
-            "name": "routes",
-            "contents": [
-              { "type": "file", "name": "[name].tsx" },
-              {
-                "type": "directory",
-                "name": "api",
-                "contents": [
-                  { "type": "file", "name": "joke.ts" },
-                ],
-              },
-              { "type": "file", "name": "index.tsx" },
-            ],
-          },
-          {
-            "type": "directory",
-            "name": "static",
-            "contents": [
-              { "type": "file", "name": "logo.svg" },
-            ],
-          },
-          {
-            "type": "directory",
-            "name": ".vscode",
-            "contents": [
-              { "type": "file", "name": "settings.json" },
-              { "type": "file", "name": "extensions.json" },
-            ],
-          },
-          { "type": "file", "name": ".gitignore" },
-        ],
-      },
+    const files = [
+      "/README.md",
+      "/fresh.gen.ts",
+      "/twind.config.ts",
+      "/components/Button.tsx",
+      "/islands/Counter.tsx",
+      "/main.ts",
+      "/routes/greet/[name].tsx",
+      "/routes/api/joke.ts",
+      "/routes/_app.tsx",
+      "/routes/index.tsx",
+      "/static/logo.svg",
+      "/.vscode/settings.json",
+      "/.vscode/extensions.json",
+      "/.gitignore",
     ];
 
     await t.step("check generated files", async () => {
-      await assertFileExistence(targetFileTree);
+      await assertFileExistence(files, tmpDirName);
     });
 
     await t.step("start up the server and access the root page", async () => {
@@ -258,19 +173,21 @@ Deno.test({
       const page = await browser.newPage();
       await page.goto(address, { waitUntil: "networkidle2" });
 
-      const counter = await page.$("body > div > div > p");
+      const counter = await page.$("body > div > div > div > p");
       let counterValue = await counter?.evaluate((el) => el.textContent);
-      assert(counterValue === "3");
+      assertEquals(counterValue, "3");
 
       const fontWeight = await counter?.evaluate((el) =>
         getComputedStyle(el).fontWeight
       );
-      assertEquals(fontWeight, "700");
+      assertEquals(fontWeight, "400");
 
-      const buttonPlus = await page.$("body > div > div > button:nth-child(3)");
+      const buttonPlus = await page.$(
+        "body > div > div > div > button:nth-child(3)",
+      );
       await buttonPlus?.click();
 
-      await delay(100);
+      await waitForText(page, "body > div > div > div > p", "4");
 
       counterValue = await counter?.evaluate((el) => el.textContent);
       assert(counterValue === "4");
@@ -279,7 +196,7 @@ Deno.test({
 
       await lines.cancel();
       serverProcess.kill("SIGTERM");
-      await delay(100);
+      await serverProcess.status;
     });
 
     await retry(() => Deno.remove(tmpDirName, { recursive: true }));
@@ -388,33 +305,15 @@ Deno.test({
       path.join(tmpDirName, "deno.json"),
     );
 
-    const targetFileTree: FileTree[] = [
-      {
-        "type": "directory",
-        "name": tmpDirName,
-        "contents": [
-          { "type": "file", "name": "deno.json" },
-          {
-            "type": "directory",
-            "name": "subdirectory",
-            contents: [
-              {
-                "type": "directory",
-                "name": "subsubdirectory",
-                "contents": [
-                  { "type": "file", "name": "main.ts" },
-                  { "type": "file", "name": "dev.ts" },
-                  { "type": "file", "name": "fresh.gen.ts" },
-                ],
-              },
-            ],
-          },
-        ],
-      },
+    const files = [
+      "/deno.json",
+      "/subdirectory/subsubdirectory/main.ts",
+      "/subdirectory/subsubdirectory/dev.ts",
+      "/subdirectory/subsubdirectory/fresh.gen.ts",
     ];
 
     await t.step("check generated files", async () => {
-      await assertFileExistence(targetFileTree);
+      await assertFileExistence(files, tmpDirName);
     });
 
     await t.step("start up the server", async () => {
@@ -427,10 +326,112 @@ Deno.test({
 
       await lines.cancel();
       serverProcess.kill("SIGTERM");
-      await delay(100);
+      await serverProcess.status;
     });
 
     await retry(() => Deno.remove(tmpDirName, { recursive: true }));
   },
   sanitizeResources: false,
 });
+
+Deno.test("fresh-update", async function fn(t) {
+  // Preparation
+  const tmpDirName = await Deno.makeTempDir();
+
+  const cliProcess = new Deno.Command(Deno.execPath(), {
+    args: [
+      "run",
+      "-A",
+      path.join(Deno.cwd(), "init.ts"),
+      ".",
+    ],
+    cwd: tmpDirName,
+    stdin: "null",
+    stdout: "null",
+  });
+
+  await cliProcess.output();
+
+  await t.step("execute update command", async () => {
+    await updateAndVerify(
+      /The manifest has been generated for \d+ routes and \d+ islands./,
+    );
+  });
+
+  await t.step("execute update command deno.jsonc support", async () => {
+    try {
+      Deno.renameSync(`${tmpDirName}/deno.json`, `${tmpDirName}/deno.jsonc`);
+      await updateAndVerify(
+        /The manifest has been generated for \d+ routes and \d+ islands./,
+      );
+    } finally {
+      Deno.renameSync(`${tmpDirName}/deno.jsonc`, `${tmpDirName}/deno.json`);
+    }
+  });
+
+  await t.step("execute update command src dir", async () => {
+    const names = [
+      "components",
+      "islands",
+      "routes",
+      "static",
+      "dev.ts",
+      "main.ts",
+      "fresh.gen.ts",
+    ];
+    try {
+      Deno.mkdirSync(tmpDirName + "/src");
+      names.forEach((x) => {
+        Deno.renameSync(
+          path.join(tmpDirName, x),
+          path.join(tmpDirName, "src", x),
+        );
+      });
+      await updateAndVerify(
+        /The manifest has been generated for (?!0 routes and 0 islands)\d+ routes and \d+ islands./,
+      );
+    } finally {
+      names.forEach((x) => {
+        Deno.renameSync(
+          path.join(tmpDirName, "src", x),
+          path.join(tmpDirName, x),
+        );
+      });
+      Deno.removeSync(tmpDirName + "/src", { recursive: true });
+    }
+  });
+
+  await t.step("execute update command (no islands directory)", async () => {
+    await retry(() =>
+      Deno.remove(path.join(tmpDirName, "islands"), { recursive: true })
+    );
+    await updateAndVerify(
+      /The manifest has been generated for \d+ routes and 0 islands./,
+    );
+  });
+
+  await retry(() => Deno.remove(tmpDirName, { recursive: true }));
+
+  async function updateAndVerify(expected: RegExp) {
+    const cliProcess = new Deno.Command(Deno.execPath(), {
+      args: [
+        "run",
+        "-A",
+        path.join(Deno.cwd(), "update.ts"),
+        ".",
+      ],
+      cwd: tmpDirName,
+      stdin: "null",
+      stdout: "piped",
+    });
+
+    const { code, stdout } = await cliProcess.output();
+    const output = new TextDecoder().decode(stdout);
+
+    assertMatch(
+      output,
+      expected,
+    );
+    assertEquals(code, 0);
+  }
+});
diff --git a/tests/cli_update_check_test.ts b/tests/cli_update_check_test.ts
new file mode 100644
index 00000000000..85404302ab4
--- /dev/null
+++ b/tests/cli_update_check_test.ts
@@ -0,0 +1,156 @@
+import { colors, join } from "../src/server/deps.ts";
+import {
+  assertEquals,
+  assertMatch,
+  assertNotMatch,
+} from "$std/testing/asserts.ts";
+import versions from "../versions.json" assert { type: "json" };
+
+Deno.test({
+  name: "stores update check file in $HOME/fresh",
+  async fn() {
+    const tmpDirName = await Deno.makeTempDir();
+    const filePath = join(tmpDirName, "latest.json");
+
+    await new Deno.Command(Deno.execPath(), {
+      args: ["run", "-A", "./tests/fixture_update_check/mod.ts"],
+      env: {
+        CI: "false",
+        HOME: tmpDirName,
+      },
+    }).output();
+
+    const text = JSON.parse(await Deno.readTextFile(filePath));
+    assertEquals(text, {
+      current_version: versions[0],
+      latest_version: "99.99.999",
+      last_checked: text.last_checked,
+    });
+
+    await Deno.remove(tmpDirName, { recursive: true });
+  },
+});
+
+Deno.test({
+  name: "skips update check on specific environment variables",
+  async fn(t) {
+    const envs = ["FRESH_NO_UPDATE_CHECK", "CI", "DENO_DEPLOYMENT_ID"];
+
+    for (const env of envs) {
+      await t.step(`checking ${env}`, async () => {
+        const tmpDirName = await Deno.makeTempDir();
+        const out = await new Deno.Command(Deno.execPath(), {
+          args: ["run", "-A", "./tests/fixture_update_check/mod.ts"],
+          env: {
+            [env]: "true",
+            HOME: tmpDirName,
+            LATEST_VERSION: "1.30.0",
+          },
+        }).output();
+
+        const decoder = new TextDecoder();
+        const stdout = colors.stripColor(decoder.decode(out.stdout));
+        assertNotMatch(stdout, /Fresh 1\.30\.0 is available/);
+
+        await Deno.remove(tmpDirName, { recursive: true });
+      });
+    }
+  },
+});
+
+Deno.test({
+  name: "shows update message on version mismatch",
+  async fn() {
+    const tmpDirName = await Deno.makeTempDir();
+    const filePath = join(tmpDirName, "latest.json");
+
+    await Deno.writeTextFile(
+      filePath,
+      JSON.stringify({
+        current_version: "1.1.0",
+        latest_version: "1.1.0",
+        last_checked: new Date(0).toISOString(),
+      }),
+    );
+
+    const out = await new Deno.Command(Deno.execPath(), {
+      args: ["run", "-A", "./tests/fixture_update_check/mod.ts"],
+      env: {
+        CI: "false",
+        HOME: tmpDirName,
+        LATEST_VERSION: "1.30.0",
+      },
+    }).output();
+
+    const decoder = new TextDecoder();
+
+    const stdout = colors.stripColor(decoder.decode(out.stdout));
+    assertMatch(stdout, /Fresh 1\.30\.0 is available/);
+
+    // Updates check file
+    const text = JSON.parse(await Deno.readTextFile(filePath));
+    assertEquals(text, {
+      current_version: "1.1.0",
+      latest_version: "1.30.0",
+      last_checked: text.last_checked,
+    });
+
+    await Deno.remove(tmpDirName, { recursive: true });
+  },
+  sanitizeResources: false,
+});
+
+Deno.test({
+  name: "only fetch new version defined by interval",
+  async fn(t) {
+    const tmpDirName = await Deno.makeTempDir();
+    const decoder = new TextDecoder();
+
+    await t.step("fetches latest version initially", async () => {
+      const out = await new Deno.Command(Deno.execPath(), {
+        args: ["run", "-A", "./tests/fixture_update_check/mod.ts"],
+        env: {
+          CI: "false",
+          UPDATE_INTERVAL: "100000",
+          HOME: tmpDirName,
+          LATEST_VERSION: "1.30.0",
+        },
+      }).output();
+
+      const stdout = colors.stripColor(decoder.decode(out.stdout));
+      assertMatch(stdout, /fetching latest version/);
+    });
+
+    await t.step("should not fetch if interval has not passed", async () => {
+      const out = await new Deno.Command(Deno.execPath(), {
+        args: ["run", "-A", "./tests/fixture_update_check/mod.ts"],
+        env: {
+          CI: "false",
+          UPDATE_INTERVAL: "100000",
+          HOME: tmpDirName,
+          LATEST_VERSION: "1.30.0",
+        },
+      }).output();
+
+      const stdout = colors.stripColor(decoder.decode(out.stdout));
+      assertNotMatch(stdout, /fetching latest version/);
+    });
+
+    await t.step("fetches if interval has passed", async () => {
+      const out = await new Deno.Command(Deno.execPath(), {
+        args: ["run", "-A", "./tests/fixture_update_check/mod.ts"],
+        env: {
+          CI: "false",
+          UPDATE_INTERVAL: "1 ",
+          HOME: tmpDirName,
+          LATEST_VERSION: "1.30.0",
+        },
+      }).output();
+
+      const stdout = colors.stripColor(decoder.decode(out.stdout));
+      assertMatch(stdout, /fetching latest version/);
+    });
+
+    await Deno.remove(tmpDirName, { recursive: true });
+  },
+});
diff --git a/tests/deps.ts b/tests/deps.ts
index e86870f711a..a00ee725b54 100644
--- a/tests/deps.ts
+++ b/tests/deps.ts
@@ -8,13 +8,13 @@ export {
   assert,
   assertEquals,
   assertStringIncludes,
-} from "https://deno.land/std@0.190.0/testing/asserts.ts";
-export { assertSnapshot } from "https://deno.land/std@0.190.0/testing/snapshot.ts";
+} from "https://deno.land/std@0.193.0/testing/asserts.ts";
+export { assertSnapshot } from "https://deno.land/std@0.193.0/testing/snapshot.ts";
 export {
   TextLineStream,
-} from "https://deno.land/std@0.190.0/streams/text_line_stream.ts";
-export { delay } from "https://deno.land/std@0.190.0/async/delay.ts";
-export { retry } from "https://deno.land/std@0.190.0/async/retry.ts";
+} from "https://deno.land/std@0.193.0/streams/text_line_stream.ts";
+export { delay } from "https://deno.land/std@0.193.0/async/delay.ts";
+export { retry } from "https://deno.land/std@0.193.0/async/retry.ts";
 export {
   default as puppeteer,
   Page,
diff --git a/tests/error_test.ts b/tests/error_test.ts
index 4ce2a0d1a7f..b8a0c4492a0 100644
--- a/tests/error_test.ts
+++ b/tests/error_test.ts
@@ -7,11 +7,6 @@ const ctx = await ServerContext.fromManifest(manifest, {});
 const handler = ctx.handler();
 const router = (req: Request) => {
   return handler(req, {
-    localAddr: {
-      transport: "tcp",
-      hostname: "127.0.0.1",
-      port: 80,
-    },
     remoteAddr: {
       transport: "tcp",
       hostname: "127.0.0.1",
diff --git a/tests/fixture/deno.json b/tests/fixture/deno.json
index 7e98181c54a..9d782057e20 100644
--- a/tests/fixture/deno.json
+++ b/tests/fixture/deno.json
@@ -4,7 +4,7 @@
     "$fresh/": "../../",
     "preact": "https://esm.sh/preact@10.15.1",
     "preact/": "https://esm.sh/preact@10.15.1/",
-    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.1.0",
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.2.0",
     "@preact/signals": "https://esm.sh/*@preact/signals@1.1.3",
     "@preact/signals-core": "https://esm.sh/@preact/signals-core@1.2.3"
   },
diff --git a/tests/fixture/fresh.gen.ts b/tests/fixture/fresh.gen.ts
index 9adaa57d137..299cb0749a3 100644
--- a/tests/fixture/fresh.gen.ts
+++ b/tests/fixture/fresh.gen.ts
@@ -12,36 +12,52 @@ import * as $6 from "./routes/api/head_override.ts";
 import * as $7 from "./routes/assetsCaching/index.tsx";
 import * as $8 from "./routes/books/[id].tsx";
 import * as $9 from "./routes/connInfo.ts";
-import * as $10 from "./routes/evil.tsx";
-import * as $11 from "./routes/failure.ts";
-import * as $12 from "./routes/index.tsx";
-import * as $13 from "./routes/intercept.tsx";
-import * as $14 from "./routes/intercept_args.tsx";
-import * as $15 from "./routes/islands/index.tsx";
-import * as $16 from "./routes/islands/returning_null.tsx";
-import * as $17 from "./routes/islands/root_fragment.tsx";
-import * as $18 from "./routes/islands/root_fragment_conditional_first.tsx";
-import * as $19 from "./routes/layeredMdw/_middleware.ts";
-import * as $20 from "./routes/layeredMdw/layer2-no-mw/without_mw.ts";
-import * as $21 from "./routes/layeredMdw/layer2/_middleware.ts";
-import * as $22 from "./routes/layeredMdw/layer2/abc.ts";
-import * as $23 from "./routes/layeredMdw/layer2/index.ts";
-import * as $24 from "./routes/layeredMdw/layer2/layer3/[id].ts";
-import * as $25 from "./routes/layeredMdw/layer2/layer3/_middleware.ts";
-import * as $26 from "./routes/middleware_root.ts";
-import * as $27 from "./routes/not_found.ts";
-import * as $28 from "./routes/params.tsx";
-import * as $29 from "./routes/props/[id].tsx";
-import * as $30 from "./routes/static.tsx";
-import * as $31 from "./routes/status_overwrite.tsx";
-import * as $32 from "./routes/wildcard.tsx";
+import * as $10 from "./routes/error_boundary.tsx";
+import * as $11 from "./routes/evil.tsx";
+import * as $12 from "./routes/failure.ts";
+import * as $13 from "./routes/index.tsx";
+import * as $14 from "./routes/intercept.tsx";
+import * as $15 from "./routes/intercept_args.tsx";
+import * as $16 from "./routes/islands/index.tsx";
+import * as $17 from "./routes/islands/multiple_island_exports.tsx";
+import * as $18 from "./routes/islands/returning_null.tsx";
+import * as $19 from "./routes/islands/root_fragment.tsx";
+import * as $20 from "./routes/islands/root_fragment_conditional_first.tsx";
+import * as $21 from "./routes/layeredMdw/_middleware.ts";
+import * as $22 from "./routes/layeredMdw/layer2-no-mw/without_mw.ts";
+import * as $23 from "./routes/layeredMdw/layer2-with-params/[tenantId]/[id].ts";
+import * as $24 from "./routes/layeredMdw/layer2-with-params/[tenantId]/_middleware.ts";
+import * as $25 from "./routes/layeredMdw/layer2-with-params/_middleware.ts";
+import * as $26 from "./routes/layeredMdw/layer2/_middleware.ts";
+import * as $27 from "./routes/layeredMdw/layer2/abc.ts";
+import * as $28 from "./routes/layeredMdw/layer2/index.ts";
+import * as $29 from "./routes/layeredMdw/layer2/layer3/[id].ts";
+import * as $30 from "./routes/layeredMdw/layer2/layer3/_middleware.ts";
+import * as $31 from "./routes/layeredMdw/nesting/[tenant]/[environment]/[id].tsx";
+import * as $32 from "./routes/layeredMdw/nesting/[tenant]/[environment]/_middleware.ts";
+import * as $33 from "./routes/layeredMdw/nesting/[tenant]/_middleware.ts";
+import * as $34 from "./routes/layeredMdw/nesting/_middleware.ts";
+import * as $35 from "./routes/middleware-error-handler/_middleware.ts";
+import * as $36 from "./routes/middleware-error-handler/index.tsx";
+import * as $37 from "./routes/middleware_root.ts";
+import * as $38 from "./routes/not_found.ts";
+import * as $39 from "./routes/params.tsx";
+import * as $40 from "./routes/props/[id].tsx";
+import * as $41 from "./routes/state-in-props/_middleware.ts";
+import * as $42 from "./routes/state-in-props/index.tsx";
+import * as $43 from "./routes/static.tsx";
+import * as $44 from "./routes/status_overwrite.tsx";
+import * as $45 from "./routes/umlaut-äöüß.tsx";
+import * as $46 from "./routes/wildcard.tsx";
 import * as $$0 from "./islands/Counter.tsx";
-import * as $$1 from "./islands/ReturningNull.tsx";
-import * as $$2 from "./islands/RootFragment.tsx";
-import * as $$3 from "./islands/RootFragmentWithConditionalFirst.tsx";
-import * as $$4 from "./islands/Test.tsx";
-import * as $$5 from "./islands/folder/Counter.tsx";
-import * as $$6 from "./islands/kebab-case-counter-test.tsx";
+import * as $$1 from "./islands/MultipleCounters.tsx";
+import * as $$2 from "./islands/ReturningNull.tsx";
+import * as $$3 from "./islands/RootFragment.tsx";
+import * as $$4 from "./islands/RootFragmentWithConditionalFirst.tsx";
+import * as $$5 from "./islands/Test.tsx";
+import * as $$6 from "./islands/folder/Counter.tsx";
+import * as $$7 from "./islands/folder/subfolder/Counter.tsx";
+import * as $$8 from "./islands/kebab-case-counter-test.tsx";
 
 const manifest = {
   routes: {
@@ -55,38 +71,54 @@ const manifest = {
     "./routes/assetsCaching/index.tsx": $7,
     "./routes/books/[id].tsx": $8,
     "./routes/connInfo.ts": $9,
-    "./routes/evil.tsx": $10,
-    "./routes/failure.ts": $11,
-    "./routes/index.tsx": $12,
-    "./routes/intercept.tsx": $13,
-    "./routes/intercept_args.tsx": $14,
-    "./routes/islands/index.tsx": $15,
-    "./routes/islands/returning_null.tsx": $16,
-    "./routes/islands/root_fragment.tsx": $17,
-    "./routes/islands/root_fragment_conditional_first.tsx": $18,
-    "./routes/layeredMdw/_middleware.ts": $19,
-    "./routes/layeredMdw/layer2-no-mw/without_mw.ts": $20,
-    "./routes/layeredMdw/layer2/_middleware.ts": $21,
-    "./routes/layeredMdw/layer2/abc.ts": $22,
-    "./routes/layeredMdw/layer2/index.ts": $23,
-    "./routes/layeredMdw/layer2/layer3/[id].ts": $24,
-    "./routes/layeredMdw/layer2/layer3/_middleware.ts": $25,
-    "./routes/middleware_root.ts": $26,
-    "./routes/not_found.ts": $27,
-    "./routes/params.tsx": $28,
-    "./routes/props/[id].tsx": $29,
-    "./routes/static.tsx": $30,
-    "./routes/status_overwrite.tsx": $31,
-    "./routes/wildcard.tsx": $32,
+    "./routes/error_boundary.tsx": $10,
+    "./routes/evil.tsx": $11,
+    "./routes/failure.ts": $12,
+    "./routes/index.tsx": $13,
+    "./routes/intercept.tsx": $14,
+    "./routes/intercept_args.tsx": $15,
+    "./routes/islands/index.tsx": $16,
+    "./routes/islands/multiple_island_exports.tsx": $17,
+    "./routes/islands/returning_null.tsx": $18,
+    "./routes/islands/root_fragment.tsx": $19,
+    "./routes/islands/root_fragment_conditional_first.tsx": $20,
+    "./routes/layeredMdw/_middleware.ts": $21,
+    "./routes/layeredMdw/layer2-no-mw/without_mw.ts": $22,
+    "./routes/layeredMdw/layer2-with-params/[tenantId]/[id].ts": $23,
+    "./routes/layeredMdw/layer2-with-params/[tenantId]/_middleware.ts": $24,
+    "./routes/layeredMdw/layer2-with-params/_middleware.ts": $25,
+    "./routes/layeredMdw/layer2/_middleware.ts": $26,
+    "./routes/layeredMdw/layer2/abc.ts": $27,
+    "./routes/layeredMdw/layer2/index.ts": $28,
+    "./routes/layeredMdw/layer2/layer3/[id].ts": $29,
+    "./routes/layeredMdw/layer2/layer3/_middleware.ts": $30,
+    "./routes/layeredMdw/nesting/[tenant]/[environment]/[id].tsx": $31,
+    "./routes/layeredMdw/nesting/[tenant]/[environment]/_middleware.ts": $32,
+    "./routes/layeredMdw/nesting/[tenant]/_middleware.ts": $33,
+    "./routes/layeredMdw/nesting/_middleware.ts": $34,
+    "./routes/middleware-error-handler/_middleware.ts": $35,
+    "./routes/middleware-error-handler/index.tsx": $36,
+    "./routes/middleware_root.ts": $37,
+    "./routes/not_found.ts": $38,
+    "./routes/params.tsx": $39,
+    "./routes/props/[id].tsx": $40,
+    "./routes/state-in-props/_middleware.ts": $41,
+    "./routes/state-in-props/index.tsx": $42,
+    "./routes/static.tsx": $43,
+    "./routes/status_overwrite.tsx": $44,
+    "./routes/umlaut-äöüß.tsx": $45,
+    "./routes/wildcard.tsx": $46,
   },
   islands: {
     "./islands/Counter.tsx": $$0,
-    "./islands/ReturningNull.tsx": $$1,
-    "./islands/RootFragment.tsx": $$2,
-    "./islands/RootFragmentWithConditionalFirst.tsx": $$3,
-    "./islands/Test.tsx": $$4,
-    "./islands/folder/Counter.tsx": $$5,
-    "./islands/kebab-case-counter-test.tsx": $$6,
+    "./islands/MultipleCounters.tsx": $$1,
+    "./islands/ReturningNull.tsx": $$2,
+    "./islands/RootFragment.tsx": $$3,
+    "./islands/RootFragmentWithConditionalFirst.tsx": $$4,
+    "./islands/Test.tsx": $$5,
+    "./islands/folder/Counter.tsx": $$6,
+    "./islands/folder/subfolder/Counter.tsx": $$7,
+    "./islands/kebab-case-counter-test.tsx": $$8,
   },
   baseUrl: import.meta.url,
 };
diff --git a/tests/fixture/islands/MultipleCounters.tsx b/tests/fixture/islands/MultipleCounters.tsx
new file mode 100644
index 00000000000..0d629398e68
--- /dev/null
+++ b/tests/fixture/islands/MultipleCounters.tsx
@@ -0,0 +1,30 @@
+import type { Signal } from "@preact/signals";
+import { IS_BROWSER } from "$fresh/runtime.ts";
+
+interface CounterProps {
+  count: Signal<number>;
+  id: string;
+}
+
+export default function CounterZero(props: CounterProps) {
+  return (
+    <div id={props.id}>
+      <p>{props.count}</p>
+      <button
+        id={`b-${props.id}`}
+        onClick={() => props.count.value += 1}
+        disabled={!IS_BROWSER}
+      >
+        +1
+      </button>
+    </div>
+  );
+}
+
+export function CounterOne(props: CounterProps) {
+  return CounterZero(props);
+}
+
+export function CounterTwo(props: CounterProps) {
+  return CounterZero(props);
+}
diff --git a/tests/fixture/islands/folder/subfolder/Counter.tsx b/tests/fixture/islands/folder/subfolder/Counter.tsx
new file mode 100644
index 00000000000..5f015b1ee1f
--- /dev/null
+++ b/tests/fixture/islands/folder/subfolder/Counter.tsx
@@ -0,0 +1,22 @@
+import type { Signal } from "@preact/signals";
+import { IS_BROWSER } from "$fresh/runtime.ts";
+
+interface CounterProps {
+  count: Signal<number>;
+  id: string;
+}
+
+export default function Counter(props: CounterProps) {
+  return (
+    <div id={props.id}>
+      <p>{props.count}</p>
+      <button
+        id={`b-${props.id}`}
+        onClick={() => props.count.value += 1}
+        disabled={!IS_BROWSER}
+      >
+        +1
+      </button>
+    </div>
+  );
+}
diff --git a/tests/fixture/main.ts b/tests/fixture/main.ts
index da8c854a3d1..1409a21d698 100644
--- a/tests/fixture/main.ts
+++ b/tests/fixture/main.ts
@@ -8,6 +8,4 @@ import { start } from "$fresh/server.ts";
 import routes from "./fresh.gen.ts";
 import options from "./options.ts";
 
-const experimentalDenoServe = Deno.args.includes("--experimental-deno-serve");
-
-await start(routes, { ...options, experimentalDenoServe });
+await start(routes, options);
diff --git a/tests/fixture/main_wasm.ts b/tests/fixture/main_wasm.ts
index a48ed37cd78..946b1edee78 100644
--- a/tests/fixture/main_wasm.ts
+++ b/tests/fixture/main_wasm.ts
@@ -11,6 +11,4 @@ import { start } from "$fresh/server.ts";
 import routes from "./fresh.gen.ts";
 import options from "./options.ts";
 
-const experimentalDenoServe = Deno.args.includes("--experimental-deno-serve");
-
-await start(routes, { ...options, experimentalDenoServe });
+await start(routes, options);
diff --git a/tests/fixture/routes/_404.tsx b/tests/fixture/routes/_404.tsx
index ca00eb9686b..48279ee2faa 100644
--- a/tests/fixture/routes/_404.tsx
+++ b/tests/fixture/routes/_404.tsx
@@ -1,5 +1,10 @@
 import { UnknownPageProps } from "$fresh/server.ts";
 
-export default function NotFoundPage({ url }: UnknownPageProps) {
-  return <p>404 not found: {url.pathname}</p>;
+export default function NotFoundPage({ data, url }: UnknownPageProps) {
+  return (
+    <>
+      <p>404 not found: {url.pathname}</p>
+      {data?.hello && <p>Hello {data.hello}</p>}
+    </>
+  );
 }
diff --git a/tests/fixture/routes/_app.tsx b/tests/fixture/routes/_app.tsx
index 447bae445ae..47de869666d 100644
--- a/tests/fixture/routes/_app.tsx
+++ b/tests/fixture/routes/_app.tsx
@@ -2,10 +2,16 @@ import { Head } from "$fresh/runtime.ts";
 import { AppProps } from "$fresh/server.ts";
 
 export default function App(props: AppProps) {
+  const statefulValue = props.state?.root === "root_mw"
+    ? "The freshest framework!"
+    : "";
+  const specialCase = props.state?.stateInProps as string;
   return (
     <>
       <Head>
         <meta name="description" content="Hello world!" />
+        <meta name="generator" content={statefulValue} />
+        {specialCase && <meta name="specialTag" content={specialCase} />}
       </Head>
       <props.Component />
     </>
diff --git a/tests/fixture/routes/error_boundary.tsx b/tests/fixture/routes/error_boundary.tsx
new file mode 100644
index 00000000000..14209a80b64
--- /dev/null
+++ b/tests/fixture/routes/error_boundary.tsx
@@ -0,0 +1,27 @@
+import { Component } from "preact";
+
+class ErrorBoundary extends Component {
+  state = { error: null } as { error: Error | null };
+
+  static getDerivedStateFromError(error: Error) {
+    return { error };
+  }
+
+  render() {
+    return this.state.error
+      ? <p>{this.state.error.message}</p>
+      : <>{this.props.children}</>;
+  }
+}
+
+function Thrower(): preact.JSX.Element {
+  throw new Error("it works");
+}
+
+export default function ErrorBoundaryPage() {
+  return (
+    <ErrorBoundary>
+      <Thrower />
+    </ErrorBoundary>
+  );
+}
diff --git a/tests/fixture/routes/islands/index.tsx b/tests/fixture/routes/islands/index.tsx
index 52b449413c2..daffb57622d 100644
--- a/tests/fixture/routes/islands/index.tsx
+++ b/tests/fixture/routes/islands/index.tsx
@@ -1,6 +1,7 @@
 import { useSignal } from "@preact/signals";
 import Counter from "../../islands/Counter.tsx";
 import FolderCounter from "../../islands/folder/Counter.tsx";
+import SubfolderCounter from "../../islands/folder/subfolder/Counter.tsx";
 import KebabCaseFileNameTest from "../../islands/kebab-case-counter-test.tsx";
 import Test from "../../islands/Test.tsx";
 
@@ -10,6 +11,7 @@ export default function Home() {
       <Counter id="counter1" count={useSignal(3)} />
       <Counter id="counter2" count={useSignal(10)} />
       <FolderCounter id="folder-counter" count={useSignal(3)} />
+      <SubfolderCounter id="subfolder-counter" count={useSignal(3)} />
       <KebabCaseFileNameTest
         id="kebab-case-file-counter"
         count={useSignal(5)}
diff --git a/tests/fixture/routes/islands/multiple_island_exports.tsx b/tests/fixture/routes/islands/multiple_island_exports.tsx
new file mode 100644
index 00000000000..0a721065dd0
--- /dev/null
+++ b/tests/fixture/routes/islands/multiple_island_exports.tsx
@@ -0,0 +1,15 @@
+import { useSignal } from "@preact/signals";
+import CounterZero from "../../islands/MultipleCounters.tsx";
+import { CounterOne, CounterTwo } from "../../islands/MultipleCounters.tsx";
+import SubfolderCounter from "../../islands/folder/subfolder/Counter.tsx";
+
+export default function Home() {
+  return (
+    <div>
+      <CounterZero id="counter0" count={useSignal(4)} />
+      <CounterOne id="counter1" count={useSignal(3)} />
+      <CounterTwo id="counter2" count={useSignal(10)} />
+      <SubfolderCounter id="counter3" count={useSignal(4)} />
+    </div>
+  );
+}
diff --git a/tests/fixture/routes/layeredMdw/layer2-with-params/[tenantId]/[id].ts b/tests/fixture/routes/layeredMdw/layer2-with-params/[tenantId]/[id].ts
new file mode 100644
index 00000000000..d9b353dc405
--- /dev/null
+++ b/tests/fixture/routes/layeredMdw/layer2-with-params/[tenantId]/[id].ts
@@ -0,0 +1,7 @@
+import { Handlers } from "$fresh/server.ts";
+
+export const handler: Handlers<undefined> = {
+  GET(_req: Request, _ctx) {
+    return new Response(JSON.stringify({}));
+  },
+};
diff --git a/tests/fixture/routes/layeredMdw/layer2-with-params/[tenantId]/_middleware.ts b/tests/fixture/routes/layeredMdw/layer2-with-params/[tenantId]/_middleware.ts
new file mode 100644
index 00000000000..a56fb70f5f5
--- /dev/null
+++ b/tests/fixture/routes/layeredMdw/layer2-with-params/[tenantId]/_middleware.ts
@@ -0,0 +1,7 @@
+import { MiddlewareHandlerContext } from "$fresh/server.ts";
+
+export async function handler(_req: Request, ctx: MiddlewareHandlerContext) {
+  const resp = await ctx.next();
+  resp.headers.set("middlewareParams_inner", JSON.stringify(ctx.params));
+  return resp;
+}
diff --git a/tests/fixture/routes/layeredMdw/layer2-with-params/_middleware.ts b/tests/fixture/routes/layeredMdw/layer2-with-params/_middleware.ts
new file mode 100644
index 00000000000..510364790e5
--- /dev/null
+++ b/tests/fixture/routes/layeredMdw/layer2-with-params/_middleware.ts
@@ -0,0 +1,7 @@
+import { MiddlewareHandlerContext } from "$fresh/server.ts";
+
+export async function handler(_req: Request, ctx: MiddlewareHandlerContext) {
+  const resp = await ctx.next();
+  resp.headers.set("middlewareParams_outer", JSON.stringify(ctx.params));
+  return resp;
+}
diff --git a/tests/fixture/routes/layeredMdw/nesting/[tenant]/[environment]/[id].tsx b/tests/fixture/routes/layeredMdw/nesting/[tenant]/[environment]/[id].tsx
new file mode 100644
index 00000000000..b20b557dc0f
--- /dev/null
+++ b/tests/fixture/routes/layeredMdw/nesting/[tenant]/[environment]/[id].tsx
@@ -0,0 +1,13 @@
+import { Handlers, PageProps } from "$fresh/server.ts";
+
+export const handler: Handlers = {
+  async GET(_req: Request, ctx) {
+    const order = ctx.state.middlewareNestingOrder as string;
+    const resp = await ctx.render(order + "4");
+    return resp;
+  },
+};
+
+export default function Page(props: PageProps) {
+  return <div>{props.data}</div>;
+}
diff --git a/tests/fixture/routes/layeredMdw/nesting/[tenant]/[environment]/_middleware.ts b/tests/fixture/routes/layeredMdw/nesting/[tenant]/[environment]/_middleware.ts
new file mode 100644
index 00000000000..ed93dc7fa76
--- /dev/null
+++ b/tests/fixture/routes/layeredMdw/nesting/[tenant]/[environment]/_middleware.ts
@@ -0,0 +1,7 @@
+import { MiddlewareHandlerContext } from "$fresh/server.ts";
+
+export async function handler(_req: Request, ctx: MiddlewareHandlerContext) {
+  ctx.state.middlewareNestingOrder += "3";
+  const resp = await ctx.next();
+  return resp;
+}
diff --git a/tests/fixture/routes/layeredMdw/nesting/[tenant]/_middleware.ts b/tests/fixture/routes/layeredMdw/nesting/[tenant]/_middleware.ts
new file mode 100644
index 00000000000..b44a242763d
--- /dev/null
+++ b/tests/fixture/routes/layeredMdw/nesting/[tenant]/_middleware.ts
@@ -0,0 +1,7 @@
+import { MiddlewareHandlerContext } from "$fresh/server.ts";
+
+export async function handler(_req: Request, ctx: MiddlewareHandlerContext) {
+  ctx.state.middlewareNestingOrder += "2";
+  const resp = await ctx.next();
+  return resp;
+}
diff --git a/tests/fixture/routes/layeredMdw/nesting/_middleware.ts b/tests/fixture/routes/layeredMdw/nesting/_middleware.ts
new file mode 100644
index 00000000000..c5fe5488346
--- /dev/null
+++ b/tests/fixture/routes/layeredMdw/nesting/_middleware.ts
@@ -0,0 +1,7 @@
+import { MiddlewareHandlerContext } from "$fresh/server.ts";
+
+export async function handler(_req: Request, ctx: MiddlewareHandlerContext) {
+  ctx.state.middlewareNestingOrder = "1";
+  const resp = await ctx.next();
+  return resp;
+}
diff --git a/tests/fixture/routes/middleware-error-handler/_middleware.ts b/tests/fixture/routes/middleware-error-handler/_middleware.ts
new file mode 100644
index 00000000000..4e93a71332f
--- /dev/null
+++ b/tests/fixture/routes/middleware-error-handler/_middleware.ts
@@ -0,0 +1,14 @@
+import { MiddlewareHandlerContext } from "$fresh/server.ts";
+
+export async function handler(
+  _req: Request,
+  ctx: MiddlewareHandlerContext,
+) {
+  try {
+    ctx.state.flag = true;
+    return await ctx.next();
+  } catch (error) {
+    console.log("we're very thoroughly dealing with this error here: " + error);
+    throw Error("don't show the full error for security purposes");
+  }
+}
diff --git a/tests/fixture/routes/middleware-error-handler/index.tsx b/tests/fixture/routes/middleware-error-handler/index.tsx
new file mode 100644
index 00000000000..887b61ef34c
--- /dev/null
+++ b/tests/fixture/routes/middleware-error-handler/index.tsx
@@ -0,0 +1,14 @@
+import { Handlers, PageProps } from "$fresh/server.ts";
+
+export const handler: Handlers = {
+  GET(req, ctx) {
+    return ctx.render(ctx.state.flag);
+  },
+};
+
+export default function Home(props: PageProps<boolean>) {
+  if (props.data) {
+    throw Error("i'm erroring on purpose");
+  }
+  return <div>this won't get shown</div>;
+}
diff --git a/tests/fixture/routes/not_found.ts b/tests/fixture/routes/not_found.ts
index 1732de1eb57..b90959d5616 100644
--- a/tests/fixture/routes/not_found.ts
+++ b/tests/fixture/routes/not_found.ts
@@ -2,6 +2,8 @@ import { Handlers } from "../../../server.ts";
 
 export const handler: Handlers = {
   GET(_req, ctx) {
-    return ctx.renderNotFound();
+    return ctx.renderNotFound({
+      hello: "Dino",
+    });
   },
 };
diff --git a/tests/fixture/routes/state-in-props/_middleware.ts b/tests/fixture/routes/state-in-props/_middleware.ts
new file mode 100644
index 00000000000..66ed5ddf4b8
--- /dev/null
+++ b/tests/fixture/routes/state-in-props/_middleware.ts
@@ -0,0 +1,10 @@
+import { MiddlewareHandlerContext } from "$fresh/server.ts";
+
+export async function handler(
+  _req: Request,
+  ctx: MiddlewareHandlerContext,
+) {
+  ctx.state.stateInProps = "look, i am set from middleware";
+  const resp = await ctx.next();
+  return resp;
+}
diff --git a/tests/fixture/routes/state-in-props/index.tsx b/tests/fixture/routes/state-in-props/index.tsx
new file mode 100644
index 00000000000..80b6014c71c
--- /dev/null
+++ b/tests/fixture/routes/state-in-props/index.tsx
@@ -0,0 +1,20 @@
+import { Handlers, PageProps } from "$fresh/server.ts";
+
+export const handler: Handlers<boolean> = {
+  GET(_, ctx) {
+    const complexValue = true;
+    return ctx.render(complexValue);
+  },
+};
+
+export default function Page(props: PageProps<boolean>) {
+  let valueFromState = props.state.stateInProps as string;
+  if (props.data) {
+    valueFromState = valueFromState.toUpperCase();
+  }
+  return (
+    <div>
+      <h1>{valueFromState}</h1>
+    </div>
+  );
+}
diff --git "a/tests/fixture/routes/umlaut-\303\244\303\266\303\274\303\237.tsx" "b/tests/fixture/routes/umlaut-\303\244\303\266\303\274\303\237.tsx"
new file mode 100644
index 00000000000..e5f63070418
--- /dev/null
+++ "b/tests/fixture/routes/umlaut-\303\244\303\266\303\274\303\237.tsx"
@@ -0,0 +1,3 @@
+export default function Umlaut() {
+  return <h1>it works</h1>;
+}
diff --git a/tests/fixture_custom_500/deno.json b/tests/fixture_custom_500/deno.json
new file mode 100644
index 00000000000..04ee3099b1b
--- /dev/null
+++ b/tests/fixture_custom_500/deno.json
@@ -0,0 +1,13 @@
+{
+  "lock": false,
+  "imports": {
+    "$fresh/": "../../",
+    "preact": "https://esm.sh/preact@10.15.1",
+    "preact/": "https://esm.sh/preact@10.15.1/",
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.2.0"
+  },
+  "compilerOptions": {
+    "jsx": "react-jsx",
+    "jsxImportSource": "preact"
+  }
+}
diff --git a/tests/fixture_custom_500/dev.ts b/tests/fixture_custom_500/dev.ts
new file mode 100755
index 00000000000..2d85d6c183c
--- /dev/null
+++ b/tests/fixture_custom_500/dev.ts
@@ -0,0 +1,5 @@
+#!/usr/bin/env -S deno run -A --watch=static/,routes/
+
+import dev from "$fresh/dev.ts";
+
+await dev(import.meta.url, "./main.ts");
diff --git a/tests/fixture_custom_500/fresh.gen.ts b/tests/fixture_custom_500/fresh.gen.ts
new file mode 100644
index 00000000000..b5f168f3d37
--- /dev/null
+++ b/tests/fixture_custom_500/fresh.gen.ts
@@ -0,0 +1,17 @@
+// DO NOT EDIT. This file is generated by fresh.
+// This file SHOULD be checked into source version control.
+// This file is automatically updated during development when running `dev.ts`.
+
+import * as $0 from "./routes/_500.tsx";
+import * as $1 from "./routes/index.tsx";
+
+const manifest = {
+  routes: {
+    "./routes/_500.tsx": $0,
+    "./routes/index.tsx": $1,
+  },
+  islands: {},
+  baseUrl: import.meta.url,
+};
+
+export default manifest;
diff --git a/tests/fixture_custom_500/main.ts b/tests/fixture_custom_500/main.ts
new file mode 100644
index 00000000000..dedce9cbb04
--- /dev/null
+++ b/tests/fixture_custom_500/main.ts
@@ -0,0 +1,10 @@
+/// <reference no-default-lib="true" />
+/// <reference lib="dom" />
+/// <reference lib="dom.iterable" />
+/// <reference lib="dom.asynciterable" />
+/// <reference lib="deno.ns" />
+
+import { start } from "$fresh/server.ts";
+import manifest from "./fresh.gen.ts";
+
+await start(manifest);
diff --git a/tests/fixture_custom_500/routes/_500.tsx b/tests/fixture_custom_500/routes/_500.tsx
new file mode 100644
index 00000000000..06ec8219421
--- /dev/null
+++ b/tests/fixture_custom_500/routes/_500.tsx
@@ -0,0 +1,5 @@
+import { ErrorPageProps } from "../../../server.ts";
+
+export default function Error500Page({ error }: ErrorPageProps) {
+  return <p class="custom-500">Custom 500: {(error as Error).message}</p>;
+}
diff --git a/tests/fixture_custom_500/routes/index.tsx b/tests/fixture_custom_500/routes/index.tsx
new file mode 100644
index 00000000000..24b9a6c26e5
--- /dev/null
+++ b/tests/fixture_custom_500/routes/index.tsx
@@ -0,0 +1,7 @@
+import { Handlers } from "../../../server.ts";
+
+export const handler: Handlers = {
+  GET(_req, ctx) {
+    throw new Error("Pickle Rick!");
+  },
+};
diff --git a/tests/fixture_error/deno.json b/tests/fixture_error/deno.json
index fa257c4d860..04ee3099b1b 100644
--- a/tests/fixture_error/deno.json
+++ b/tests/fixture_error/deno.json
@@ -4,7 +4,7 @@
     "$fresh/": "../../",
     "preact": "https://esm.sh/preact@10.15.1",
     "preact/": "https://esm.sh/preact@10.15.1/",
-    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.1.0"
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.2.0"
   },
   "compilerOptions": {
     "jsx": "react-jsx",
diff --git a/tests/fixture_invalid_handlers/deno.json b/tests/fixture_invalid_handlers/deno.json
new file mode 100644
index 00000000000..04ee3099b1b
--- /dev/null
+++ b/tests/fixture_invalid_handlers/deno.json
@@ -0,0 +1,13 @@
+{
+  "lock": false,
+  "imports": {
+    "$fresh/": "../../",
+    "preact": "https://esm.sh/preact@10.15.1",
+    "preact/": "https://esm.sh/preact@10.15.1/",
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.2.0"
+  },
+  "compilerOptions": {
+    "jsx": "react-jsx",
+    "jsxImportSource": "preact"
+  }
+}
diff --git a/tests/fixture_invalid_handlers/dev.ts b/tests/fixture_invalid_handlers/dev.ts
new file mode 100755
index 00000000000..2d85d6c183c
--- /dev/null
+++ b/tests/fixture_invalid_handlers/dev.ts
@@ -0,0 +1,5 @@
+#!/usr/bin/env -S deno run -A --watch=static/,routes/
+
+import dev from "$fresh/dev.ts";
+
+await dev(import.meta.url, "./main.ts");
diff --git a/tests/fixture_invalid_handlers/fresh.gen.ts b/tests/fixture_invalid_handlers/fresh.gen.ts
new file mode 100644
index 00000000000..799a93fba0a
--- /dev/null
+++ b/tests/fixture_invalid_handlers/fresh.gen.ts
@@ -0,0 +1,15 @@
+// DO NOT EDIT. This file is generated by fresh.
+// This file SHOULD be checked into source version control.
+// This file is automatically updated during development when running `dev.ts`.
+
+import * as $0 from "./routes/index.tsx";
+
+const manifest = {
+  routes: {
+    "./routes/index.tsx": $0,
+  },
+  islands: {},
+  baseUrl: import.meta.url,
+};
+
+export default manifest;
diff --git a/tests/fixture_invalid_handlers/main.ts b/tests/fixture_invalid_handlers/main.ts
new file mode 100644
index 00000000000..dedce9cbb04
--- /dev/null
+++ b/tests/fixture_invalid_handlers/main.ts
@@ -0,0 +1,10 @@
+/// <reference no-default-lib="true" />
+/// <reference lib="dom" />
+/// <reference lib="dom.iterable" />
+/// <reference lib="dom.asynciterable" />
+/// <reference lib="deno.ns" />
+
+import { start } from "$fresh/server.ts";
+import manifest from "./fresh.gen.ts";
+
+await start(manifest);
diff --git a/tests/fixture_invalid_handlers/routes/index.tsx b/tests/fixture_invalid_handlers/routes/index.tsx
new file mode 100644
index 00000000000..385b9164f82
--- /dev/null
+++ b/tests/fixture_invalid_handlers/routes/index.tsx
@@ -0,0 +1,7 @@
+import { Handlers } from "../../../server.ts";
+
+export const handlers: Handlers = {
+  GET() {
+    throw new Error("FAIL");
+  },
+};
diff --git a/tests/fixture_island_nesting/deno.json b/tests/fixture_island_nesting/deno.json
index 5a9ac92f1e7..991529965bf 100644
--- a/tests/fixture_island_nesting/deno.json
+++ b/tests/fixture_island_nesting/deno.json
@@ -7,7 +7,7 @@
     "$fresh/": "../../",
     "preact": "https://esm.sh/preact@10.15.1",
     "preact/": "https://esm.sh/preact@10.15.1/",
-    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.1.0",
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.2.0",
     "@preact/signals": "https://esm.sh/*@preact/signals@1.1.3",
     "@preact/signals-core": "https://esm.sh/@preact/signals-core@1.2.3"
   },
diff --git a/tests/fixture_island_nesting/fresh.gen.ts b/tests/fixture_island_nesting/fresh.gen.ts
index 070d9e8ca5f..99341850d8a 100644
--- a/tests/fixture_island_nesting/fresh.gen.ts
+++ b/tests/fixture_island_nesting/fresh.gen.ts
@@ -3,34 +3,40 @@
 // This file is automatically updated during development when running `dev.ts`.
 
 import * as $0 from "./routes/index.tsx";
-import * as $1 from "./routes/island_in_island.tsx";
-import * as $2 from "./routes/island_in_island_definition.tsx";
-import * as $3 from "./routes/island_jsx_child.tsx";
-import * as $4 from "./routes/island_jsx_children.tsx";
-import * as $5 from "./routes/island_jsx_island_jsx.tsx";
-import * as $6 from "./routes/island_jsx_text.tsx";
-import * as $7 from "./routes/island_nested_props.tsx";
-import * as $8 from "./routes/island_siblings.tsx";
-import * as $$0 from "./islands/Island.tsx";
-import * as $$1 from "./islands/IslandInsideIsland.tsx";
-import * as $$2 from "./islands/IslandWithProps.tsx";
+import * as $1 from "./routes/island_conditional.tsx";
+import * as $2 from "./routes/island_in_island.tsx";
+import * as $3 from "./routes/island_in_island_definition.tsx";
+import * as $4 from "./routes/island_jsx_child.tsx";
+import * as $5 from "./routes/island_jsx_children.tsx";
+import * as $6 from "./routes/island_jsx_island_jsx.tsx";
+import * as $7 from "./routes/island_jsx_text.tsx";
+import * as $8 from "./routes/island_nested_props.tsx";
+import * as $9 from "./routes/island_siblings.tsx";
+import * as $$0 from "./islands/BooleanButton.tsx";
+import * as $$1 from "./islands/Island.tsx";
+import * as $$2 from "./islands/IslandConditional.tsx";
+import * as $$3 from "./islands/IslandInsideIsland.tsx";
+import * as $$4 from "./islands/IslandWithProps.tsx";
 
 const manifest = {
   routes: {
     "./routes/index.tsx": $0,
-    "./routes/island_in_island.tsx": $1,
-    "./routes/island_in_island_definition.tsx": $2,
-    "./routes/island_jsx_child.tsx": $3,
-    "./routes/island_jsx_children.tsx": $4,
-    "./routes/island_jsx_island_jsx.tsx": $5,
-    "./routes/island_jsx_text.tsx": $6,
-    "./routes/island_nested_props.tsx": $7,
-    "./routes/island_siblings.tsx": $8,
+    "./routes/island_conditional.tsx": $1,
+    "./routes/island_in_island.tsx": $2,
+    "./routes/island_in_island_definition.tsx": $3,
+    "./routes/island_jsx_child.tsx": $4,
+    "./routes/island_jsx_children.tsx": $5,
+    "./routes/island_jsx_island_jsx.tsx": $6,
+    "./routes/island_jsx_text.tsx": $7,
+    "./routes/island_nested_props.tsx": $8,
+    "./routes/island_siblings.tsx": $9,
   },
   islands: {
-    "./islands/Island.tsx": $$0,
-    "./islands/IslandInsideIsland.tsx": $$1,
-    "./islands/IslandWithProps.tsx": $$2,
+    "./islands/BooleanButton.tsx": $$0,
+    "./islands/Island.tsx": $$1,
+    "./islands/IslandConditional.tsx": $$2,
+    "./islands/IslandInsideIsland.tsx": $$3,
+    "./islands/IslandWithProps.tsx": $$4,
   },
   baseUrl: import.meta.url,
 };
diff --git a/tests/fixture_island_nesting/islands/BooleanButton.tsx b/tests/fixture_island_nesting/islands/BooleanButton.tsx
new file mode 100644
index 00000000000..33ddd6d7362
--- /dev/null
+++ b/tests/fixture_island_nesting/islands/BooleanButton.tsx
@@ -0,0 +1,13 @@
+import { Signal } from "@preact/signals";
+
+export default function BooleanButton({ signal }: { signal: Signal }) {
+  return (
+    <button
+      onClick={() => {
+        signal.value = !signal.value;
+      }}
+    >
+      Toggle
+    </button>
+  );
+}
diff --git a/tests/fixture_island_nesting/islands/IslandConditional.tsx b/tests/fixture_island_nesting/islands/IslandConditional.tsx
new file mode 100644
index 00000000000..5f54983bbba
--- /dev/null
+++ b/tests/fixture_island_nesting/islands/IslandConditional.tsx
@@ -0,0 +1,9 @@
+import { Signal } from "@preact/signals";
+
+export interface IslandConditionalProps {
+  show: Signal<boolean>;
+}
+
+export default function IslandConditional({ show }: IslandConditionalProps) {
+  return show.value ? <>it works</> : null;
+}
diff --git a/tests/fixture_island_nesting/main.ts b/tests/fixture_island_nesting/main.ts
index f6b0fc28fcf..bb97cc80de2 100644
--- a/tests/fixture_island_nesting/main.ts
+++ b/tests/fixture_island_nesting/main.ts
@@ -7,6 +7,4 @@
 import { start } from "$fresh/server.ts";
 import routes from "./fresh.gen.ts";
 
-const experimentalDenoServe = Deno.args.includes("--experimental-deno-serve");
-
-await start(routes, { experimentalDenoServe });
+await start(routes);
diff --git a/tests/fixture_island_nesting/main_wasm.ts b/tests/fixture_island_nesting/main_wasm.ts
index 66b916c81f3..714834e64f5 100644
--- a/tests/fixture_island_nesting/main_wasm.ts
+++ b/tests/fixture_island_nesting/main_wasm.ts
@@ -10,6 +10,4 @@ import "./polyfill_deno_deploy.ts";
 import { start } from "$fresh/server.ts";
 import routes from "./fresh.gen.ts";
 
-const experimentalDenoServe = Deno.args.includes("--experimental-deno-serve");
-
-await start(routes, { experimentalDenoServe });
+await start(routes);
diff --git a/tests/fixture_island_nesting/routes/index.tsx b/tests/fixture_island_nesting/routes/index.tsx
index 545694fe385..408bece10de 100644
--- a/tests/fixture_island_nesting/routes/index.tsx
+++ b/tests/fixture_island_nesting/routes/index.tsx
@@ -1,3 +1,27 @@
+import * as path from "https://deno.land/std@0.192.0/path/mod.ts";
+
+const __dirname = path.dirname(path.fromFileUrl(import.meta.url));
+
+const links: string[] = [];
+for (const file of Deno.readDirSync(__dirname)) {
+  if (file.name.startsWith("index")) continue;
+  const name = path.basename(file.name, path.extname(file.name));
+  links.push(name);
+}
+
 export default function Home() {
-  return <div />;
+  return (
+    <div>
+      <h1>Tests</h1>
+      <ul>
+        {links.map((link) => {
+          return (
+            <li key={link}>
+              <a href={`/${link}`}>{link}</a>
+            </li>
+          );
+        })}
+      </ul>
+    </div>
+  );
 }
diff --git a/tests/fixture_island_nesting/routes/island_conditional.tsx b/tests/fixture_island_nesting/routes/island_conditional.tsx
new file mode 100644
index 00000000000..98cb4b4fe26
--- /dev/null
+++ b/tests/fixture_island_nesting/routes/island_conditional.tsx
@@ -0,0 +1,14 @@
+import IslandConditional from "../islands/IslandConditional.tsx";
+import BooleanButton from "../islands/BooleanButton.tsx";
+import { signal } from "@preact/signals";
+
+const show = signal(false);
+
+export default function Page() {
+  return (
+    <div id="page">
+      <IslandConditional show={show} />
+      <BooleanButton signal={show} />
+    </div>
+  );
+}
diff --git a/tests/fixture_npm/deno.json b/tests/fixture_npm/deno.json
index 7e98181c54a..9d782057e20 100644
--- a/tests/fixture_npm/deno.json
+++ b/tests/fixture_npm/deno.json
@@ -4,7 +4,7 @@
     "$fresh/": "../../",
     "preact": "https://esm.sh/preact@10.15.1",
     "preact/": "https://esm.sh/preact@10.15.1/",
-    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.1.0",
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.2.0",
     "@preact/signals": "https://esm.sh/*@preact/signals@1.1.3",
     "@preact/signals-core": "https://esm.sh/@preact/signals-core@1.2.3"
   },
diff --git a/tests/fixture_plugin/deno.json b/tests/fixture_plugin/deno.json
index fa257c4d860..04ee3099b1b 100644
--- a/tests/fixture_plugin/deno.json
+++ b/tests/fixture_plugin/deno.json
@@ -4,7 +4,7 @@
     "$fresh/": "../../",
     "preact": "https://esm.sh/preact@10.15.1",
     "preact/": "https://esm.sh/preact@10.15.1/",
-    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.1.0"
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.2.0"
   },
   "compilerOptions": {
     "jsx": "react-jsx",
diff --git a/tests/fixture_plugin/fresh.gen.ts b/tests/fixture_plugin/fresh.gen.ts
index 39739cd607e..8f644c5bf0c 100644
--- a/tests/fixture_plugin/fresh.gen.ts
+++ b/tests/fixture_plugin/fresh.gen.ts
@@ -3,13 +3,15 @@
 // This file is automatically updated during development when running `dev.ts`.
 
 import * as $0 from "./routes/static.tsx";
-import * as $1 from "./routes/with-island.tsx";
+import * as $1 from "./routes/test.tsx";
+import * as $2 from "./routes/with-island.tsx";
 import * as $$0 from "./islands/Island.tsx";
 
 const manifest = {
   routes: {
     "./routes/static.tsx": $0,
-    "./routes/with-island.tsx": $1,
+    "./routes/test.tsx": $1,
+    "./routes/with-island.tsx": $2,
   },
   islands: {
     "./islands/Island.tsx": $$0,
diff --git a/tests/fixture_plugin/options.ts b/tests/fixture_plugin/options.ts
index 5555a2848dc..511d546cea8 100644
--- a/tests/fixture_plugin/options.ts
+++ b/tests/fixture_plugin/options.ts
@@ -2,11 +2,13 @@ import { FreshOptions } from "$fresh/server.ts";
 import cssInjectPlugin from "./utils/css-inject-plugin.ts";
 import jsInjectPlugin from "./utils/js-inject-plugin.ts";
 import cssInjectPluginAsync from "./utils/css-inject-plugin-async.ts";
+import routePlugin from "./utils/route-plugin.ts";
 
 export default {
   plugins: [
     cssInjectPlugin,
     jsInjectPlugin,
     cssInjectPluginAsync,
+    routePlugin({ title: "Title Set From Plugin Config" }),
   ],
 } as FreshOptions;
diff --git a/tests/fixture_plugin/routes/test.tsx b/tests/fixture_plugin/routes/test.tsx
new file mode 100644
index 00000000000..ca9d1d4632b
--- /dev/null
+++ b/tests/fixture_plugin/routes/test.tsx
@@ -0,0 +1,17 @@
+import { Handlers, PageProps } from "../../../server.ts";
+
+export const handler: Handlers = {
+  async GET(_req, ctx) {
+    const resp = await ctx.render();
+    return resp;
+  },
+};
+
+export default function Home(props: PageProps) {
+  const value = props.state.test as string;
+  return (
+    <div>
+      <h1>{value}</h1>
+    </div>
+  );
+}
diff --git a/tests/fixture_plugin/utils/route-plugin.ts b/tests/fixture_plugin/utils/route-plugin.ts
new file mode 100644
index 00000000000..a8c4de72048
--- /dev/null
+++ b/tests/fixture_plugin/utils/route-plugin.ts
@@ -0,0 +1,22 @@
+import { Plugin } from "$fresh/server.ts";
+import { handler as testMiddleware } from "./sample_routes/_middleware.ts";
+import { AppBuilder } from "./sample_routes/AppBuilder.tsx";
+export type { Options };
+
+interface Options {
+  title: string;
+}
+
+export default function routePlugin(options: Options): Plugin {
+  return {
+    name: "routePlugin",
+    middlewares: [{
+      middleware: { handler: testMiddleware },
+      path: "/",
+    }],
+    routes: [{
+      path: "/_app",
+      component: AppBuilder(options),
+    }],
+  };
+}
diff --git a/tests/fixture_plugin/utils/sample_routes/AppBuilder.tsx b/tests/fixture_plugin/utils/sample_routes/AppBuilder.tsx
new file mode 100644
index 00000000000..73f18c0cf45
--- /dev/null
+++ b/tests/fixture_plugin/utils/sample_routes/AppBuilder.tsx
@@ -0,0 +1,18 @@
+import { AppProps } from "$fresh/server.ts";
+import { Head } from "../../../../runtime.ts";
+import { Options } from "../route-plugin.ts";
+
+export function AppBuilder(options: Options) {
+  return ({ Component }: AppProps) => {
+    return (
+      <>
+        <Head>
+          <title>{options.title}</title>
+        </Head>
+        <main class="max-w-screen-md px-4 pt-16 mx-auto">
+          <Component />
+        </main>
+      </>
+    );
+  };
+}
diff --git a/tests/fixture_plugin/utils/sample_routes/_middleware.ts b/tests/fixture_plugin/utils/sample_routes/_middleware.ts
new file mode 100644
index 00000000000..cd7407fc31c
--- /dev/null
+++ b/tests/fixture_plugin/utils/sample_routes/_middleware.ts
@@ -0,0 +1,7 @@
+import { MiddlewareHandlerContext } from "$fresh/server.ts";
+
+export async function handler(_req: Request, ctx: MiddlewareHandlerContext) {
+  ctx.state.test = "look, i'm set from a plugin!";
+  const resp = await ctx.next();
+  return resp;
+}
diff --git a/tests/fixture_preact_rts_v5/main.ts b/tests/fixture_preact_rts_v5/main.ts
index da8c854a3d1..1409a21d698 100644
--- a/tests/fixture_preact_rts_v5/main.ts
+++ b/tests/fixture_preact_rts_v5/main.ts
@@ -8,6 +8,4 @@ import { start } from "$fresh/server.ts";
 import routes from "./fresh.gen.ts";
 import options from "./options.ts";
 
-const experimentalDenoServe = Deno.args.includes("--experimental-deno-serve");
-
-await start(routes, { ...options, experimentalDenoServe });
+await start(routes, options);
diff --git a/tests/fixture_preact_rts_v5/main_wasm.ts b/tests/fixture_preact_rts_v5/main_wasm.ts
index a48ed37cd78..946b1edee78 100644
--- a/tests/fixture_preact_rts_v5/main_wasm.ts
+++ b/tests/fixture_preact_rts_v5/main_wasm.ts
@@ -11,6 +11,4 @@ import { start } from "$fresh/server.ts";
 import routes from "./fresh.gen.ts";
 import options from "./options.ts";
 
-const experimentalDenoServe = Deno.args.includes("--experimental-deno-serve");
-
-await start(routes, { ...options, experimentalDenoServe });
+await start(routes, options);
diff --git a/tests/fixture_render_error/deno.json b/tests/fixture_render_error/deno.json
index fa257c4d860..04ee3099b1b 100644
--- a/tests/fixture_render_error/deno.json
+++ b/tests/fixture_render_error/deno.json
@@ -4,7 +4,7 @@
     "$fresh/": "../../",
     "preact": "https://esm.sh/preact@10.15.1",
     "preact/": "https://esm.sh/preact@10.15.1/",
-    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.1.0"
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.2.0"
   },
   "compilerOptions": {
     "jsx": "react-jsx",
diff --git a/tests/fixture_route_analysis/deno.json b/tests/fixture_route_analysis/deno.json
new file mode 100644
index 00000000000..9951af1657a
--- /dev/null
+++ b/tests/fixture_route_analysis/deno.json
@@ -0,0 +1,20 @@
+{
+  "lock": false,
+  "tasks": {
+    "start": "deno run -A --watch=static/,routes/ dev.ts",
+    "update": "deno run -A -r https://fresh.deno.dev/update ."
+  },
+  "imports": {
+    "$fresh/": "../../",
+    "preact": "https://esm.sh/preact@10.15.1",
+    "preact/": "https://esm.sh/preact@10.15.1/",
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.1.0",
+    "@preact/signals": "https://esm.sh/*@preact/signals@1.1.3",
+    "@preact/signals-core": "https://esm.sh/*@preact/signals-core@1.2.3",
+    "$std/": "https://deno.land/std@0.190.0/"
+  },
+  "compilerOptions": {
+    "jsx": "react-jsx",
+    "jsxImportSource": "preact"
+  }
+}
diff --git a/tests/fixture_route_analysis/dev.ts b/tests/fixture_route_analysis/dev.ts
new file mode 100755
index 00000000000..2d85d6c183c
--- /dev/null
+++ b/tests/fixture_route_analysis/dev.ts
@@ -0,0 +1,5 @@
+#!/usr/bin/env -S deno run -A --watch=static/,routes/
+
+import dev from "$fresh/dev.ts";
+
+await dev(import.meta.url, "./main.ts");
diff --git a/tests/fixture_route_analysis/fresh.gen.ts b/tests/fixture_route_analysis/fresh.gen.ts
new file mode 100644
index 00000000000..8cc887a4c42
--- /dev/null
+++ b/tests/fixture_route_analysis/fresh.gen.ts
@@ -0,0 +1,17 @@
+// DO NOT EDIT. This file is generated by fresh.
+// This file SHOULD be checked into source version control.
+// This file is automatically updated during development when running `dev.ts`.
+
+import * as $0 from "./routes/simple_name_conflict/users.ts";
+import * as $1 from "./routes/simple_name_conflict/users.tsx";
+
+const manifest = {
+  routes: {
+    "./routes/simple_name_conflict/users.ts": $0,
+    "./routes/simple_name_conflict/users.tsx": $1,
+  },
+  islands: {},
+  baseUrl: import.meta.url,
+};
+
+export default manifest;
diff --git a/tests/fixture_route_analysis/main.ts b/tests/fixture_route_analysis/main.ts
new file mode 100644
index 00000000000..8ef5d924c9b
--- /dev/null
+++ b/tests/fixture_route_analysis/main.ts
@@ -0,0 +1,12 @@
+/// <reference no-default-lib="true" />
+/// <reference lib="dom" />
+/// <reference lib="dom.iterable" />
+/// <reference lib="dom.asynciterable" />
+/// <reference lib="deno.ns" />
+
+import "$std/dotenv/load.ts";
+
+import { start } from "$fresh/server.ts";
+import manifest from "./fresh.gen.ts";
+
+await start(manifest);
diff --git a/tests/fixture_route_analysis/routes/simple_name_conflict/users.ts b/tests/fixture_route_analysis/routes/simple_name_conflict/users.ts
new file mode 100644
index 00000000000..90d9e8983fb
--- /dev/null
+++ b/tests/fixture_route_analysis/routes/simple_name_conflict/users.ts
@@ -0,0 +1,7 @@
+import { Handlers } from "$fresh/server.ts";
+
+export const handler: Handlers = {
+  GET(_req, _ctx) {
+    return new Response("hello");
+  },
+};
diff --git a/tests/fixture_route_analysis/routes/simple_name_conflict/users.tsx b/tests/fixture_route_analysis/routes/simple_name_conflict/users.tsx
new file mode 100644
index 00000000000..9899158d7e7
--- /dev/null
+++ b/tests/fixture_route_analysis/routes/simple_name_conflict/users.tsx
@@ -0,0 +1,3 @@
+export default function Home() {
+  return <div>Hello</div>;
+}
diff --git a/tests/fixture_router/static/foo.txt b/tests/fixture_router/static/foo.txt
new file mode 100644
index 00000000000..ba0e162e1c4
--- /dev/null
+++ b/tests/fixture_router/static/foo.txt
@@ -0,0 +1 @@
+bar
\ No newline at end of file
diff --git a/tests/fixture_server_components/deno.json b/tests/fixture_server_components/deno.json
new file mode 100644
index 00000000000..c4df017779e
--- /dev/null
+++ b/tests/fixture_server_components/deno.json
@@ -0,0 +1,20 @@
+{
+  "lock": false,
+  "tasks": {
+    "start": "deno run -A --watch=static/,routes/ dev.ts"
+  },
+  "imports": {
+    "$fresh/": "../../",
+    "twind": "https://esm.sh/twind@0.16.19",
+    "twind/": "https://esm.sh/twind@0.16.19/",
+    "preact": "https://esm.sh/preact@10.15.1",
+    "preact/": "https://esm.sh/preact@10.15.1/",
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.1.0",
+    "@preact/signals": "https://esm.sh/*@preact/signals@1.1.3",
+    "@preact/signals-core": "https://esm.sh/@preact/signals-core@1.2.3"
+  },
+  "compilerOptions": {
+    "jsx": "react-jsx",
+    "jsxImportSource": "preact"
+  }
+}
diff --git a/tests/fixture_server_components/dev.ts b/tests/fixture_server_components/dev.ts
new file mode 100755
index 00000000000..2d85d6c183c
--- /dev/null
+++ b/tests/fixture_server_components/dev.ts
@@ -0,0 +1,5 @@
+#!/usr/bin/env -S deno run -A --watch=static/,routes/
+
+import dev from "$fresh/dev.ts";
+
+await dev(import.meta.url, "./main.ts");
diff --git a/tests/fixture_server_components/fresh.gen.ts b/tests/fixture_server_components/fresh.gen.ts
new file mode 100644
index 00000000000..3b6d142eaf3
--- /dev/null
+++ b/tests/fixture_server_components/fresh.gen.ts
@@ -0,0 +1,30 @@
+// DO NOT EDIT. This file is generated by fresh.
+// This file SHOULD be checked into source version control.
+// This file is automatically updated during development when running `dev.ts`.
+
+import * as $0 from "./routes/basic.tsx";
+import * as $1 from "./routes/context/[id].tsx";
+import * as $2 from "./routes/fail.tsx";
+import * as $3 from "./routes/index.tsx";
+import * as $4 from "./routes/island.tsx";
+import * as $5 from "./routes/response.tsx";
+import * as $6 from "./routes/twind.tsx";
+import * as $$0 from "./islands/FooIsland.tsx";
+
+const manifest = {
+  routes: {
+    "./routes/basic.tsx": $0,
+    "./routes/context/[id].tsx": $1,
+    "./routes/fail.tsx": $2,
+    "./routes/index.tsx": $3,
+    "./routes/island.tsx": $4,
+    "./routes/response.tsx": $5,
+    "./routes/twind.tsx": $6,
+  },
+  islands: {
+    "./islands/FooIsland.tsx": $$0,
+  },
+  baseUrl: import.meta.url,
+};
+
+export default manifest;
diff --git a/tests/fixture_server_components/islands/FooIsland.tsx b/tests/fixture_server_components/islands/FooIsland.tsx
new file mode 100644
index 00000000000..0d2e3bd9200
--- /dev/null
+++ b/tests/fixture_server_components/islands/FooIsland.tsx
@@ -0,0 +1,13 @@
+import { useSignal } from "@preact/signals";
+
+export default function FooIsland() {
+  const sig = useSignal(0);
+  return (
+    <button
+      onClick={() => sig.value += 1}
+      class="bg-gray-200 py-2 px-4 rounded m-8"
+    >
+      update {sig}
+    </button>
+  );
+}
diff --git a/tests/fixture_server_components/main.ts b/tests/fixture_server_components/main.ts
new file mode 100644
index 00000000000..871f5ecb939
--- /dev/null
+++ b/tests/fixture_server_components/main.ts
@@ -0,0 +1,11 @@
+/// <reference no-default-lib="true" />
+/// <reference lib="dom" />
+/// <reference lib="dom.asynciterable" />
+/// <reference lib="deno.ns" />
+
+import { start } from "$fresh/server.ts";
+import twind from "$fresh/plugins/twind.ts";
+import manifest from "./fresh.gen.ts";
+
+import twindConfig from "./twind.config.ts";
+await start(manifest, { plugins: [twind(twindConfig)] });
diff --git a/tests/fixture_server_components/routes/basic.tsx b/tests/fixture_server_components/routes/basic.tsx
new file mode 100644
index 00000000000..08976b0d0ce
--- /dev/null
+++ b/tests/fixture_server_components/routes/basic.tsx
@@ -0,0 +1,4 @@
+export default async function Home() {
+  await new Promise((r) => setTimeout(r, 10));
+  return <h1>it works</h1>;
+}
diff --git a/tests/fixture_server_components/routes/context/[id].tsx b/tests/fixture_server_components/routes/context/[id].tsx
new file mode 100644
index 00000000000..307687dd856
--- /dev/null
+++ b/tests/fixture_server_components/routes/context/[id].tsx
@@ -0,0 +1,15 @@
+import { RouteContext } from "../../../../server.ts";
+import { delay } from "../../../deps.ts";
+
+export default async function Foo(_req: Request, context: RouteContext) {
+  await delay(1);
+  const value = JSON.stringify(context, (_key, value) => {
+    if (typeof value === "function") return value.constructor.name;
+    return value;
+  }, 2);
+
+  return new Response(value, {
+    status: 200,
+    headers: { "Content-Type": "application/json" },
+  });
+}
diff --git a/tests/fixture_server_components/routes/fail.tsx b/tests/fixture_server_components/routes/fail.tsx
new file mode 100644
index 00000000000..cb10826d345
--- /dev/null
+++ b/tests/fixture_server_components/routes/fail.tsx
@@ -0,0 +1,6 @@
+import { RouteContext } from "$fresh/server.ts";
+
+// deno-lint-ignore require-await
+export default async function Home(_req: Request, ctx: RouteContext) {
+  return ctx.renderNotFound();
+}
diff --git a/tests/fixture_server_components/routes/index.tsx b/tests/fixture_server_components/routes/index.tsx
new file mode 100644
index 00000000000..b507958e12d
--- /dev/null
+++ b/tests/fixture_server_components/routes/index.tsx
@@ -0,0 +1,27 @@
+import * as path from "https://deno.land/std@0.192.0/path/mod.ts";
+
+const __dirname = path.dirname(path.fromFileUrl(import.meta.url));
+
+const links: string[] = [];
+for (const file of Deno.readDirSync(__dirname)) {
+  if (file.name.startsWith("index")) continue;
+  const name = path.basename(file.name, path.extname(file.name));
+  links.push(name);
+}
+
+export default function Home() {
+  return (
+    <div class="mx-auto max-w-md">
+      <h1 class="text-3xl font-bold my-8">Tests</h1>
+      <ul class="pl-4">
+        {links.map((link) => {
+          return (
+            <li key={link} class="list-disc">
+              <a href={`/${link}`} class="underline">{link}</a>
+            </li>
+          );
+        })}
+      </ul>
+    </div>
+  );
+}
diff --git a/tests/fixture_server_components/routes/island.tsx b/tests/fixture_server_components/routes/island.tsx
new file mode 100644
index 00000000000..84be171449e
--- /dev/null
+++ b/tests/fixture_server_components/routes/island.tsx
@@ -0,0 +1,6 @@
+import FooIsland from "../islands/FooIsland.tsx";
+
+export default async function Island() {
+  await new Promise((r) => setTimeout(r, 10));
+  return <FooIsland />;
+}
diff --git a/tests/fixture_server_components/routes/response.tsx b/tests/fixture_server_components/routes/response.tsx
new file mode 100644
index 00000000000..451a25a7274
--- /dev/null
+++ b/tests/fixture_server_components/routes/response.tsx
@@ -0,0 +1,6 @@
+import { delay } from "../../deps.ts";
+
+export default async function Foo() {
+  await delay(1);
+  return new Response("it works", { status: 200 });
+}
diff --git a/tests/fixture_server_components/routes/twind.tsx b/tests/fixture_server_components/routes/twind.tsx
new file mode 100644
index 00000000000..67395caa965
--- /dev/null
+++ b/tests/fixture_server_components/routes/twind.tsx
@@ -0,0 +1,4 @@
+export default async function Twind() {
+  await new Promise((r) => setTimeout(r, 10));
+  return <h1 class="text-3xl text-red-600 font-bold">it works</h1>;
+}
diff --git a/tests/fixture_server_components/twind.config.ts b/tests/fixture_server_components/twind.config.ts
new file mode 100644
index 00000000000..85562a9be79
--- /dev/null
+++ b/tests/fixture_server_components/twind.config.ts
@@ -0,0 +1,17 @@
+import * as colors from "twind/colors";
+
+export default {
+  selfURL: import.meta.url,
+  theme: {
+    colors: {
+      blue: colors.blue,
+      black: colors.black,
+      gray: colors.gray,
+      green: colors.green,
+      red: colors.red,
+      white: colors.white,
+      yellow: colors.yellow,
+      transparent: "transparent",
+    },
+  },
+};
diff --git a/tests/fixture_twind_hydrate/deno.json b/tests/fixture_twind_hydrate/deno.json
index 5236a198c2a..226bf74767b 100644
--- a/tests/fixture_twind_hydrate/deno.json
+++ b/tests/fixture_twind_hydrate/deno.json
@@ -7,7 +7,7 @@
     "$fresh/": "../../",
     "preact": "https://esm.sh/preact@10.11.0",
     "preact/": "https://esm.sh/preact@10.11.0/",
-    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.1.0",
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.2.0",
     "@preact/signals": "https://esm.sh/*@preact/signals@1.0.3",
     "@preact/signals-core": "https://esm.sh/*@preact/signals-core@1.0.1"
   },
diff --git a/tests/fixture_twind_hydrate/fresh.gen.ts b/tests/fixture_twind_hydrate/fresh.gen.ts
index d32cac5dc82..aaffeb2026b 100644
--- a/tests/fixture_twind_hydrate/fresh.gen.ts
+++ b/tests/fixture_twind_hydrate/fresh.gen.ts
@@ -5,6 +5,8 @@
 import * as $0 from "./routes/check-duplication.tsx";
 import * as $1 from "./routes/insert-cssrules.tsx";
 import * as $2 from "./routes/static.tsx";
+import * as $3 from "./routes/unused.tsx";
+import * as $4 from "./routes/unused_tw.tsx";
 import * as $$0 from "./islands/CheckDuplication.tsx";
 import * as $$1 from "./islands/InsertCssrules.tsx";
 
@@ -13,6 +15,8 @@ const manifest = {
     "./routes/check-duplication.tsx": $0,
     "./routes/insert-cssrules.tsx": $1,
     "./routes/static.tsx": $2,
+    "./routes/unused.tsx": $3,
+    "./routes/unused_tw.tsx": $4,
   },
   islands: {
     "./islands/CheckDuplication.tsx": $$0,
diff --git a/tests/fixture_twind_hydrate/routes/unused.tsx b/tests/fixture_twind_hydrate/routes/unused.tsx
new file mode 100644
index 00000000000..20521dce3a7
--- /dev/null
+++ b/tests/fixture_twind_hydrate/routes/unused.tsx
@@ -0,0 +1,4 @@
+export default function Unused() {
+  const _unused = <div class="text-red-600" />;
+  return <h1>ready</h1>;
+}
diff --git a/tests/fixture_twind_hydrate/routes/unused_tw.tsx b/tests/fixture_twind_hydrate/routes/unused_tw.tsx
new file mode 100644
index 00000000000..23fa5f1d250
--- /dev/null
+++ b/tests/fixture_twind_hydrate/routes/unused_tw.tsx
@@ -0,0 +1,9 @@
+import { tw } from "https://esm.sh/@twind/core@1.1.3";
+
+export default function Unused() {
+  // @ts-ignore twind types are wrong
+  tw`text-green-500`;
+  const _unused = <div class="text-red-600" />;
+  // @ts-ignore twind types are wrong
+  return <h1 class={tw`text-blue-500`}>ready</h1>;
+}
diff --git a/tests/fixture_update_check/mod.ts b/tests/fixture_update_check/mod.ts
new file mode 100644
index 00000000000..7f98632bb53
--- /dev/null
+++ b/tests/fixture_update_check/mod.ts
@@ -0,0 +1,10 @@
+import { updateCheck } from "$fresh/src/dev/update_check.ts";
+
+// deno-lint-ignore require-await
+async function getLatestVersion() {
+  console.log("fetching latest version");
+  return Deno.env.get("LATEST_VERSION") ?? "99.99.999";
+}
+
+const interval = +(Deno.env.get("UPDATE_INTERVAL") ?? 1000);
+await updateCheck(interval, () => Deno.env.get("HOME")!, getLatestVersion);
diff --git a/tests/islands_test.ts b/tests/islands_test.ts
index 271c1c3fd5d..324d6f6df22 100644
--- a/tests/islands_test.ts
+++ b/tests/islands_test.ts
@@ -4,9 +4,12 @@ import {
   assertStringIncludes,
   delay,
   Page,
-  puppeteer,
 } from "./deps.ts";
-import { startFreshServer } from "./test_utils.ts";
+import {
+  clickWhenListenerReady,
+  waitForText,
+  withPageName,
+} from "./test_utils.ts";
 
 Deno.test({
   name: "island tests",
@@ -15,26 +18,22 @@ Deno.test({
       async function counterTest(counterId: string, originalValue: number) {
         const pElem = await page.waitForSelector(`#${counterId} > p`);
 
-        let value = await pElem?.evaluate((el) => el.textContent);
+        const value = await pElem?.evaluate((el) => el.textContent);
         assert(value === `${originalValue}`, `${counterId} first value`);
 
-        const buttonPlus = await page.$(`#b-${counterId}`);
-        await buttonPlus?.click();
-
-        await delay(100);
-
-        value = await pElem?.evaluate((el) => el.textContent);
-        assert(value === `${originalValue + 1}`, `${counterId} click`);
+        await clickWhenListenerReady(page, `#b-${counterId}`);
+        await waitForText(page, `#${counterId} > p`, String(originalValue + 1));
       }
 
       await page.goto(`${address}/islands`, {
         waitUntil: "networkidle2",
       });
 
-      await t.step("Ensure 4 islands on 1 page are revived", async () => {
+      await t.step("Ensure 5 islands on 1 page are revived", async () => {
         await counterTest("counter1", 3);
         await counterTest("counter2", 10);
         await counterTest("folder-counter", 3);
+        await counterTest("subfolder-counter", 3);
         await counterTest("kebab-case-file-counter", 5);
       });
 
@@ -59,38 +58,40 @@ Deno.test({
   sanitizeResources: false,
 });
 
+Deno.test({
+  name: "multiple islands exported from one file",
+  async fn(t) {
+    await withPage(async (page, address) => {
+      async function counterTest(counterId: string, originalValue: number) {
+        const pElem = await page.waitForSelector(`#${counterId} > p`);
+
+        const value = await pElem?.evaluate((el) => el.textContent);
+        assert(value === `${originalValue}`, `${counterId} first value`);
+
+        await clickWhenListenerReady(page, `#b-${counterId}`);
+        await waitForText(page, `#${counterId} > p`, String(originalValue + 1));
+      }
+
+      await page.goto(`${address}/islands/multiple_island_exports`, {
+        waitUntil: "networkidle2",
+      });
+
+      await t.step("Ensure 3 islands on 1 page are revived", async () => {
+        await counterTest("counter0", 4);
+        await counterTest("counter1", 3);
+        await counterTest("counter2", 10);
+      });
+    });
+  },
+
+  sanitizeOps: false,
+  sanitizeResources: false,
+});
+
 function withPage(fn: (page: Page, address: string) => Promise<void>) {
   return withPageName("./tests/fixture/main.ts", fn);
 }
 
-async function withPageName(
-  name: string,
-  fn: (page: Page, address: string) => Promise<void>,
-) {
-  const { lines, serverProcess, address } = await startFreshServer({
-    args: ["run", "-A", name],
-  });
-
-  try {
-    await delay(100);
-    const browser = await puppeteer.launch({ args: ["--no-sandbox"] });
-
-    try {
-      const page = await browser.newPage();
-      await fn(page, address);
-    } finally {
-      await browser.close();
-    }
-  } finally {
-    await lines.cancel();
-
-    serverProcess.kill("SIGTERM");
-
-    // Wait until the process exits
-    await serverProcess.status;
-  }
-}
-
 Deno.test({
   name: "island tests with </script>",
 
@@ -134,21 +135,10 @@ Deno.test({
 
       await page.waitForSelector(clickableSelector);
 
-      const contentBeforeClick = await getIslandParentTextContent();
-      assert(contentBeforeClick === "HelloWorld");
-
-      await page.click(clickableSelector);
-      await delay(100);
-
-      const contentAfterClick = await getIslandParentTextContent();
-      assert(contentAfterClick === "HelloWorldI'm rendered now");
+      await waitForText(page, `#island-parent`, "HelloWorld");
 
-      async function getIslandParentTextContent() {
-        return await page.$eval(
-          "#island-parent",
-          (el: Element) => el.textContent,
-        );
-      }
+      await clickWhenListenerReady(page, clickableSelector);
+      await waitForText(page, `#island-parent`, "HelloWorldI'm rendered now");
     });
   },
 
@@ -171,14 +161,14 @@ Deno.test({
       const clickableSelector = "#root-fragment-conditional-first-click-me";
       await page.waitForSelector(clickableSelector);
 
-      const contentBeforeClick = await getIslandParentTextContent(page);
-      assert(contentBeforeClick === "HelloWorld");
+      await waitForText(page, "#island-parent", "HelloWorld");
 
-      await page.click(clickableSelector);
-      await delay(100);
-
-      const contentAfterClick = await getIslandParentTextContent(page);
-      assert(contentAfterClick === "I'm rendered on topHelloWorld");
+      await clickWhenListenerReady(page, clickableSelector);
+      await waitForText(
+        page,
+        "#island-parent",
+        "I'm rendered on topHelloWorld",
+      );
     });
   },
 
@@ -186,10 +176,6 @@ Deno.test({
   sanitizeResources: false,
 });
 
-async function getIslandParentTextContent(page: Page) {
-  return await page.$eval("#island-parent", (el: Element) => el.textContent);
-}
-
 Deno.test({
   name: "island that returns `null`",
 
@@ -237,10 +223,7 @@ Deno.test({
           waitUntil: "networkidle2",
         });
         await page.waitForSelector("#foo");
-
-        await delay(100);
-        const text = await page.$eval("#foo", (el) => el.textContent);
-        assertEquals(text, "it works");
+        await waitForText(page, "#foo", "it works");
       },
     );
   },
@@ -260,10 +243,7 @@ Deno.test({
           waitUntil: "networkidle2",
         });
         await page.waitForSelector(".island");
-
-        await delay(100);
-        const text = await page.$eval(".island", (el) => el.textContent);
-        assertEquals(text, "it works");
+        await waitForText(page, ".island", "it works");
       },
     );
   },
@@ -329,13 +309,7 @@ Deno.test({
           waitUntil: "networkidle2",
         });
         await page.waitForSelector(".island");
-
-        await delay(100);
-        const text = await page.$eval(
-          ".island .island p",
-          (el) => el.textContent,
-        );
-        assertEquals(text, "it works");
+        await waitForText(page, ".island .island p", "it works");
       },
     );
   },
@@ -356,17 +330,11 @@ Deno.test({
         });
         await page.waitForSelector(".island");
 
-        await delay(100);
-        const text = await page.$eval(
-          ".island .island p",
-          (el) => el.textContent,
-        );
-        assertEquals(text, "it works");
+        await waitForText(page, ".island .island p", "it works");
 
         // Check that there is no duplicated content which could happen
         // when islands aren't initialized correctly
-        const pageText = await page.$eval("#page", (el) => el.textContent);
-        assertEquals(pageText, "it works");
+        await waitForText(page, "#page", "it works");
       },
     );
   },
@@ -388,12 +356,11 @@ Deno.test({
         });
         await page.waitForSelector(".island");
 
-        await delay(100);
-        const text = await page.$eval(
+        await waitForText(
+          page,
           ".island .server .island .server p",
-          (el) => el.textContent,
+          "it works",
         );
-        assertEquals(text, "it works");
       },
     );
   },
@@ -414,18 +381,39 @@ Deno.test({
         });
         await page.waitForSelector(".island");
 
+        await waitForText(page, ".island .a", "it works");
+        await waitForText(page, ".island + .island .b", "it works");
+      },
+    );
+  },
+
+  sanitizeOps: false,
+  sanitizeResources: false,
+});
+
+Deno.test({
+  name: "render sibling islands that render nothing initially",
+
+  async fn(_t) {
+    await withPageName(
+      "./tests/fixture_island_nesting/main.ts",
+      async (page, address) => {
+        await page.goto(`${address}/island_conditional`, {
+          waitUntil: "networkidle2",
+        });
+        await page.waitForSelector("button");
+
         await delay(100);
-        const text = await page.$eval(
-          ".island .a",
-          (el) => el.textContent,
-        );
-        assertEquals(text, "it works");
+        await page.click("button");
 
-        const text2 = await page.$eval(
-          ".island + .island .b",
+        const text = await page.$eval(
+          "#page",
           (el) => el.textContent,
         );
-        assertEquals(text2, "it works");
+        // Button text is matched too, but this allows us
+        // to assert correct ordering. The "it works" should
+        // be left of "Toggle"
+        assertEquals(text, "it worksToggle");
       },
     );
   },
@@ -446,12 +434,7 @@ Deno.test({
         });
         await page.waitForSelector(".island");
 
-        await delay(100);
-        const text = await page.$eval(
-          ".island .island p",
-          (el) => el.textContent,
-        );
-        assertEquals(text, "it works");
+        await waitForText(page, ".island .island p", "it works");
       },
     );
   },
diff --git a/tests/main_test.ts b/tests/main_test.ts
index dc0ee2f1ffc..4e53a472ea5 100644
--- a/tests/main_test.ts
+++ b/tests/main_test.ts
@@ -9,34 +9,21 @@ import {
 import manifest from "./fixture/fresh.gen.ts";
 import options from "./fixture/options.ts";
 import { BUILD_ID } from "../src/server/build_id.ts";
-import { startFreshServer } from "./test_utils.ts";
+import { startFreshServer, withPageName } from "./test_utils.ts";
+import { assertMatch } from "https://deno.land/std@0.193.0/testing/asserts.ts";
 
 const ctx = await ServerContext.fromManifest(manifest, options);
 const handler = ctx.handler();
-const router = (req: Request) => {
-  return handler(req, {
-    localAddr: {
-      transport: "tcp",
-      hostname: "127.0.0.1",
-      port: 80,
-    },
-    remoteAddr: {
-      transport: "tcp",
-      hostname: "127.0.0.1",
-      port: 80,
-    },
-  });
-};
 
 Deno.test("/ page prerender", async () => {
-  const resp = await router(new Request("https://fresh.deno.dev/"));
+  const resp = await handler(new Request("https://fresh.deno.dev/"));
   assert(resp);
   assertEquals(resp.status, Status.OK);
   assertEquals(resp.headers.get("content-type"), "text/html; charset=utf-8");
   assertEquals(resp.headers.get("server"), "fresh test server");
   const body = await resp.text();
   assertStringIncludes(body, `<html lang="en">`);
-  assertStringIncludes(body, "test.js");
+  assertStringIncludes(body, "test_default.js");
   assertStringIncludes(body, "<p>Hello!</p>");
   assertStringIncludes(body, "<p>Viewing JIT render.</p>");
   assertStringIncludes(body, `>{"v":[[{"message":"Hello!"}],[]]}</script>`);
@@ -44,23 +31,31 @@ Deno.test("/ page prerender", async () => {
     body,
     '<meta name="description" content="Hello world!"/>',
   );
+  assertStringIncludes(
+    body,
+    '<meta name="generator" content="The freshest framework!"/>',
+  );
+  assert(
+    !body.includes("specialTag"),
+    `Expected actual: "${body}" to not contain: "specialTag"`,
+  );
   assertStringIncludes(body, `<link rel="modulepreload"`);
 });
 
 Deno.test("/props/123 page prerender", async () => {
-  const resp = await router(new Request("https://fresh.deno.dev/props/123"));
+  const resp = await handler(new Request("https://fresh.deno.dev/props/123"));
   assert(resp);
   assertEquals(resp.status, Status.OK);
   assertEquals(resp.headers.get("content-type"), "text/html; charset=utf-8");
   const body = await resp.text();
   assertStringIncludes(
     body,
-    `{&quot;params&quot;:{&quot;id&quot;:&quot;123&quot;},&quot;url&quot;:&quot;https://fresh.deno.dev/props/123&quot;,&quot;route&quot;:&quot;/props/:id&quot;}`,
+    `{&quot;params&quot;:{&quot;id&quot;:&quot;123&quot;},&quot;url&quot;:&quot;https://fresh.deno.dev/props/123&quot;,&quot;route&quot;:&quot;/props/:id&quot;,&quot;state&quot;:{&quot;root&quot;:&quot;root_mw&quot;}}`,
   );
 });
 
-Deno.test("/[name] page prerender", async () => {
-  const resp = await router(new Request("https://fresh.deno.dev/bar"));
+Deno.test("/greet/[name] page prerender", async () => {
+  const resp = await handler(new Request("https://fresh.deno.dev/bar"));
   assert(resp);
   assertEquals(resp.status, Status.OK);
   assertEquals(resp.headers.get("content-type"), "text/html; charset=utf-8");
@@ -72,7 +67,7 @@ Deno.test("/api/head_override - HEAD", async () => {
   const req = new Request("https://fresh.deno.dev/api/head_override", {
     method: "HEAD",
   });
-  const resp = await router(req);
+  const resp = await handler(req);
   assert(resp);
   assertEquals(resp.status, Status.NoContent);
   assertEquals(resp.body, null);
@@ -86,7 +81,7 @@ Deno.test("/api/get_only - HEAD fallback", async () => {
   const req = new Request("https://fresh.deno.dev/api/get_only", {
     method: "HEAD",
   });
-  const resp = await router(req);
+  const resp = await handler(req);
   assert(resp);
   assertEquals(resp.status, Status.OK);
   assertEquals(resp.body, null);
@@ -100,7 +95,7 @@ Deno.test("/intercept - GET html", async () => {
   const req = new Request("https://fresh.deno.dev/intercept", {
     headers: { "accept": "text/html" },
   });
-  const resp = await router(req);
+  const resp = await handler(req);
   assert(resp);
   assertEquals(resp.status, Status.OK);
   const body = await resp.text();
@@ -111,7 +106,7 @@ Deno.test("/intercept - GET text", async () => {
   const req = new Request("https://fresh.deno.dev/intercept", {
     headers: { "accept": "text/plain" },
   });
-  const resp = await router(req);
+  const resp = await handler(req);
   assert(resp);
   assertEquals(resp.status, Status.OK);
   const body = await resp.text();
@@ -122,7 +117,7 @@ Deno.test("/intercept - POST", async () => {
   const req = new Request("https://fresh.deno.dev/intercept", {
     method: "POST",
   });
-  const resp = await router(req);
+  const resp = await handler(req);
   assert(resp);
   assertEquals(resp.status, Status.OK);
   const body = await resp.text();
@@ -133,7 +128,7 @@ Deno.test("/intercept - DELETE", async () => {
   const req = new Request("https://fresh.deno.dev/intercept", {
     method: "DELETE",
   });
-  const resp = await router(req);
+  const resp = await handler(req);
   assert(resp);
   assertEquals(resp.status, Status.MethodNotAllowed);
 });
@@ -142,7 +137,7 @@ Deno.test("/intercept_args - GET html", async () => {
   const req = new Request("https://fresh.deno.dev/intercept_args", {
     headers: { "accept": "text/html" },
   });
-  const resp = await router(req);
+  const resp = await handler(req);
   assert(resp);
   assertEquals(resp.status, Status.OK);
   const body = await resp.text();
@@ -153,7 +148,7 @@ Deno.test("/status_overwrite", async () => {
   const req = new Request("https://fresh.deno.dev/status_overwrite", {
     headers: { "accept": "text/html" },
   });
-  const resp = await router(req);
+  const resp = await handler(req);
   assert(resp);
   assertEquals(resp.status, Status.Unauthorized);
   assertEquals(resp.headers.get("x-some-header"), "foo");
@@ -162,7 +157,7 @@ Deno.test("/status_overwrite", async () => {
 });
 
 Deno.test("/api/get_only - NOTAMETHOD", async () => {
-  const resp = await router(
+  const resp = await handler(
     new Request("https://fresh.deno.dev/api/get_only", {
       method: "NOTAMETHOD",
     }),
@@ -172,7 +167,7 @@ Deno.test("/api/get_only - NOTAMETHOD", async () => {
 });
 
 Deno.test("/api/xyz not found", async () => {
-  const resp = await router(new Request("https://fresh.deno.dev/api/xyz"));
+  const resp = await handler(new Request("https://fresh.deno.dev/api/xyz"));
   assert(resp);
   assertEquals(resp.status, Status.NotFound);
   const body = await resp.text();
@@ -180,7 +175,7 @@ Deno.test("/api/xyz not found", async () => {
 });
 
 Deno.test("/static page prerender", async () => {
-  const resp = await router(new Request("https://fresh.deno.dev/static"));
+  const resp = await handler(new Request("https://fresh.deno.dev/static"));
   assert(resp);
   assertEquals(resp.status, Status.OK);
   assertEquals(resp.headers.get("content-type"), "text/html; charset=utf-8");
@@ -193,7 +188,7 @@ Deno.test("/static page prerender", async () => {
 });
 
 Deno.test("/books/:id page - /books/123", async () => {
-  const resp = await router(new Request("https://fresh.deno.dev/books/123"));
+  const resp = await handler(new Request("https://fresh.deno.dev/books/123"));
   assert(resp);
   assertEquals(resp.status, Status.OK);
   assertEquals(resp.headers.get("content-type"), "text/html; charset=utf-8");
@@ -202,13 +197,15 @@ Deno.test("/books/:id page - /books/123", async () => {
 });
 
 Deno.test("/books/:id page - /books/abc", async () => {
-  const resp = await router(new Request("https://fresh.deno.dev/books/abc"));
+  const resp = await handler(new Request("https://fresh.deno.dev/books/abc"));
   assert(resp);
   assertEquals(resp.status, Status.NotFound);
 });
 
 Deno.test("redirect /pages/fresh/ to /pages/fresh", async () => {
-  const resp = await router(new Request("https://fresh.deno.dev/pages/fresh/"));
+  const resp = await handler(
+    new Request("https://fresh.deno.dev/pages/fresh/"),
+  );
   assert(resp);
   assertEquals(resp.status, Status.TemporaryRedirect);
   assertEquals(
@@ -218,7 +215,7 @@ Deno.test("redirect /pages/fresh/ to /pages/fresh", async () => {
 });
 
 Deno.test("redirect /pages/////fresh///// to /pages/////fresh", async () => {
-  const resp = await router(
+  const resp = await handler(
     new Request("https://fresh.deno.dev/pages/////fresh/////"),
   );
   assert(resp);
@@ -230,7 +227,7 @@ Deno.test("redirect /pages/////fresh///// to /pages/////fresh", async () => {
 });
 
 Deno.test("redirect /pages/////fresh/ to /pages/////fresh", async () => {
-  const resp = await router(
+  const resp = await handler(
     new Request("https://fresh.deno.dev/pages/////fresh/"),
   );
   assert(resp);
@@ -242,7 +239,7 @@ Deno.test("redirect /pages/////fresh/ to /pages/////fresh", async () => {
 });
 
 Deno.test("no redirect for /pages/////fresh", async () => {
-  const resp = await router(
+  const resp = await handler(
     new Request("https://fresh.deno.dev/pages/////fresh"),
   );
   assert(resp);
@@ -250,7 +247,7 @@ Deno.test("no redirect for /pages/////fresh", async () => {
 });
 
 Deno.test("/failure", async () => {
-  const resp = await router(new Request("https://fresh.deno.dev/failure"));
+  const resp = await handler(new Request("https://fresh.deno.dev/failure"));
   assert(resp);
   assertEquals(resp.status, Status.InternalServerError);
   const body = await resp.text();
@@ -258,7 +255,7 @@ Deno.test("/failure", async () => {
 });
 
 Deno.test("/foo/:path*", async () => {
-  const resp = await router(new Request("https://fresh.deno.dev/foo/bar/baz"));
+  const resp = await handler(new Request("https://fresh.deno.dev/foo/bar/baz"));
   assert(resp);
   assertEquals(resp.status, Status.OK);
   const body = await resp.text();
@@ -272,11 +269,6 @@ Deno.test("static files in custom directory", async () => {
   });
   const newRouter = (req: Request) => {
     return newCtx.handler()(req, {
-      localAddr: {
-        transport: "tcp",
-        hostname: "127.0.0.1",
-        port: 80,
-      },
       remoteAddr: {
         transport: "tcp",
         hostname: "127.0.0.1",
@@ -294,7 +286,7 @@ Deno.test("static files in custom directory", async () => {
 });
 
 Deno.test("static file - by file path", async () => {
-  const resp = await router(new Request("https://fresh.deno.dev/foo.txt"));
+  const resp = await handler(new Request("https://fresh.deno.dev/foo.txt"));
   assertEquals(resp.status, Status.OK);
   const body = await resp.text();
   assert(body.startsWith("bar"));
@@ -305,7 +297,7 @@ Deno.test("static file - by file path", async () => {
   assert(!etag.startsWith("W/"), "etag should be weak");
   assertEquals(resp.headers.get("content-type"), "text/plain");
 
-  const resp2 = await router(
+  const resp2 = await handler(
     new Request("https://fresh.deno.dev/foo.txt", {
       headers: {
         "if-none-match": etag,
@@ -316,7 +308,7 @@ Deno.test("static file - by file path", async () => {
   assertEquals(resp2.headers.get("etag"), etag);
   assertEquals(resp2.headers.get("content-type"), "text/plain");
 
-  const resp3 = await router(
+  const resp3 = await handler(
     new Request("https://fresh.deno.dev/foo.txt", {
       headers: {
         "if-none-match": `W/${etag}`,
@@ -330,7 +322,7 @@ Deno.test("static file - by file path", async () => {
 
 Deno.test("HEAD request", async () => {
   // Static file
-  const resp = await router(
+  const resp = await handler(
     new Request("https://fresh.deno.dev/foo.txt", {
       method: "HEAD",
     }),
@@ -340,7 +332,7 @@ Deno.test("HEAD request", async () => {
   assertEquals(body, "");
 
   // route
-  const resp2 = await router(
+  const resp2 = await handler(
     new Request("https://fresh.deno.dev/books/123", {
       method: "HEAD",
     }),
@@ -353,7 +345,7 @@ Deno.test("HEAD request", async () => {
 
 Deno.test("static file - by 'hashed' path", async () => {
   // Check that the file path have the BUILD_ID
-  const resp = await router(
+  const resp = await handler(
     new Request("https://fresh.deno.dev/assetsCaching"),
   );
   const body = await resp.text();
@@ -362,7 +354,7 @@ Deno.test("static file - by 'hashed' path", async () => {
   assert(imgFilePath.includes(`?__frsh_c=${BUILD_ID}`));
 
   // check the static file is served corectly under its cacheable route
-  const resp2 = await router(
+  const resp2 = await handler(
     new Request(`https://fresh.deno.dev${imgFilePath}`),
   );
   const _ = await resp2.text();
@@ -372,7 +364,7 @@ Deno.test("static file - by 'hashed' path", async () => {
     "public, max-age=31536000, immutable",
   );
 
-  const resp3 = await router(
+  const resp3 = await handler(
     new Request(`https://fresh.deno.dev${imgFilePath}`, {
       headers: {
         "if-none-match": resp2.headers.get("etag")!,
@@ -414,7 +406,7 @@ Deno.test("static file - by 'hashed' path", async () => {
 });
 
 Deno.test("/params/:path*", async () => {
-  const resp = await router(
+  const resp = await handler(
     new Request("https://fresh.deno.dev/params/bar/baz"),
   );
   assert(resp);
@@ -424,17 +416,33 @@ Deno.test("/params/:path*", async () => {
 });
 
 Deno.test("/connInfo", async () => {
-  const resp = await router(new Request("https://fresh.deno.dev/connInfo"));
+  const resp = await handler(new Request("https://fresh.deno.dev/connInfo"));
+  assert(resp);
+  assertEquals(resp.status, Status.OK);
+  const body = await resp.text();
+  assertEquals(body, "localhost");
+});
+
+Deno.test("state in page props", async () => {
+  const resp = await handler(
+    new Request("https://fresh.deno.dev/state-in-props"),
+  );
   assert(resp);
   assertEquals(resp.status, Status.OK);
+  assertEquals(resp.headers.get("content-type"), "text/html; charset=utf-8");
   const body = await resp.text();
-  assertEquals(body, "127.0.0.1");
+  assertStringIncludes(
+    body,
+    '<meta name="generator" content="The freshest framework!"/>',
+  );
+  assertStringIncludes(body, "specialTag");
+  assertStringIncludes(body, "LOOK, I AM SET FROM MIDDLEWARE");
 });
 
 Deno.test({
   name: "/middleware - root",
   fn: async () => {
-    const resp = await router(
+    const resp = await handler(
       new Request("https://fresh.deno.dev/middleware_root"),
     );
     assert(resp);
@@ -448,7 +456,7 @@ Deno.test({
 Deno.test({
   name: "/middleware - mixedHandler(cors)",
   fn: async () => {
-    const resp = await router(
+    const resp = await handler(
       new Request("https://fresh.deno.dev/middleware_root", {
         method: "OPTIONS",
       }),
@@ -463,7 +471,7 @@ Deno.test({
 Deno.test({
   name: "/middleware - mixedHandler(log)",
   fn: async () => {
-    const resp = await router(
+    const resp = await handler(
       new Request("https://fresh.deno.dev/middleware_root"),
     );
     assert(resp);
@@ -479,20 +487,19 @@ Deno.test({
 Deno.test({
   name: "/middleware - layer 2 middleware",
   fn: async () => {
-    const resp = await router(
+    const resp = await handler(
       new Request("https://fresh.deno.dev/layeredMdw/layer2/abc"),
     );
     assert(resp);
     assertEquals(resp.status, Status.OK);
     const body = await resp.text();
-    console.log(body);
     assertStringIncludes(body, "root_mw");
     assertStringIncludes(body, "layer1_mw");
     assertStringIncludes(body, "layer2_mw");
     // layered 2 should not run layer 3 middleware
     assert(!body.includes("layer3_mw"));
 
-    const resp1 = await router(
+    const resp1 = await handler(
       new Request("https://fresh.deno.dev/layeredMdw/layer2-no-mw/without_mw"),
     );
     assert(resp1);
@@ -509,20 +516,19 @@ Deno.test({
 Deno.test({
   name: "/middleware - layer 2 middleware at index",
   fn: async () => {
-    const resp = await router(
+    const resp = await handler(
       new Request("https://fresh.deno.dev/layeredMdw/layer2"),
     );
     assert(resp);
     assertEquals(resp.status, Status.OK);
     const body = await resp.text();
-    console.log(body);
     assertStringIncludes(body, "root_mw");
     assertStringIncludes(body, "layer1_mw");
     assertStringIncludes(body, "layer2_mw");
     // layered 2 should not run layer 3 middleware
     assert(!body.includes("layer3_mw"));
 
-    const resp1 = await router(
+    const resp1 = await handler(
       new Request("https://fresh.deno.dev/layeredMdw/layer2-no-mw/without_mw"),
     );
     assert(resp1);
@@ -540,7 +546,7 @@ Deno.test({
   name: "/middleware - layer 3 middleware",
   fn: async () => {
     // layered 3 should contain layer 3 middleware data
-    const resp = await router(
+    const resp = await handler(
       new Request("https://fresh.deno.dev/layeredMdw/layer2/layer3/abc"),
     );
     assert(resp);
@@ -557,20 +563,61 @@ Deno.test({
   },
 });
 
+Deno.test({
+  name: "/middleware - middlewareParams",
+  fn: async () => {
+    const resp = await handler(
+      new Request(
+        "https://fresh.deno.dev/layeredMdw/layer2-with-params/tenant1/resource1",
+      ),
+    );
+    assert(resp);
+    assertEquals(resp.status, Status.OK);
+    const _body = await resp.text();
+    // assert that outer has access to all params
+    assertEquals(
+      resp.headers.get("middlewareParams_outer"),
+      JSON.stringify({ tenantId: "tenant1", id: "resource1" }),
+    );
+    // assert that inner also has access to all params
+    assertEquals(
+      resp.headers.get("middlewareParams_inner"),
+      JSON.stringify({ tenantId: "tenant1", id: "resource1" }),
+    );
+    assertEquals(resp.headers.get("server"), "fresh test server");
+  },
+});
+
+Deno.test({
+  name: "middleware nesting order",
+  fn: async () => {
+    const resp = await handler(
+      new Request(
+        "https://fresh.deno.dev/layeredMdw/nesting/acme/production/abc",
+      ),
+    );
+    assert(resp);
+    assertEquals(resp.status, Status.OK);
+    const body = await resp.text();
+    assertStringIncludes(body, "<div>1234</div>");
+  },
+});
+
 Deno.test({
   name: "/not_found",
   fn: async () => {
-    const resp = await router(new Request("https://fresh.deno.dev/not_found"));
+    const resp = await handler(new Request("https://fresh.deno.dev/not_found"));
     assert(resp);
     assertEquals(resp.status, 404);
     const body = await resp.text();
     assertStringIncludes(body, "404 not found: /not_found");
+    assertStringIncludes(body, "Hello Dino");
   },
 });
 
 Deno.test("middleware destination", async (t) => {
   await t.step("internal", async () => {
-    const resp = await router(
+    const resp = await handler(
       new Request("https://fresh.deno.dev/_frsh/refresh.js"),
     );
     assert(resp);
@@ -579,78 +626,43 @@ Deno.test("middleware destination", async (t) => {
   });
 
   await t.step("static", async () => {
-    const resp = await router(new Request("https://fresh.deno.dev/foo.txt"));
+    const resp = await handler(new Request("https://fresh.deno.dev/foo.txt"));
     assert(resp);
     assertEquals(resp.headers.get("destination"), "static");
     await resp.body?.cancel();
   });
 
   await t.step("route", async () => {
-    const resp = await router(new Request("https://fresh.deno.dev/"));
+    const resp = await handler(new Request("https://fresh.deno.dev/"));
     assert(resp);
     assertEquals(resp.headers.get("destination"), "route");
     await resp.body?.cancel();
   });
 
   await t.step("notFound", async () => {
-    const resp = await router(new Request("https://fresh.deno.dev/bar/bar"));
+    const resp = await handler(new Request("https://fresh.deno.dev/bar/bar"));
     assert(resp);
     assertEquals(resp.headers.get("destination"), "notFound");
     await resp.body?.cancel();
   });
 });
 
-Deno.test("experimental Deno.serve", {
-  sanitizeOps: false,
-  sanitizeResources: false,
-  ignore: Deno.build.os === "windows", // TODO: Deno.serve hang on Windows?
-}, async (t) => {
-  // Preparation
-  const { serverProcess, lines, address } = await startFreshServer({
-    args: [
-      "run",
-      "-A",
-      "--unstable",
-      "./tests/fixture/main.ts",
-      "--experimental-deno-serve",
-    ],
-  });
-
-  await delay(100);
-
-  await t.step("ssr", async () => {
-    const resp = await fetch(address);
+Deno.test({
+  name: "middleware catch error",
+  fn: async () => {
+    const resp = await handler(
+      new Request(
+        "https://fresh.deno.dev/middleware-error-handler",
+      ),
+    );
     assert(resp);
-    assertEquals(resp.status, Status.OK);
-    assertEquals(resp.headers.get("content-type"), "text/html; charset=utf-8");
-    assertEquals(resp.headers.get("server"), "fresh test server");
+    assertEquals(resp.status, Status.InternalServerError);
     const body = await resp.text();
-    assertStringIncludes(body, `<html lang="en">`);
-    assertStringIncludes(body, "test.js");
-    assertStringIncludes(body, "<p>Hello!</p>");
-    assertStringIncludes(body, "<p>Viewing JIT render.</p>");
-    assertStringIncludes(body, `>{"v":[[{"message":"Hello!"}],[]]}</script>`);
     assertStringIncludes(
       body,
-      '<meta name="description" content="Hello world!"/>',
+      "500 internal error: don't show the full error for security purposes",
     );
-  });
-
-  await t.step("static file", async () => {
-    const resp = await fetch(`${address}/foo.txt`);
-    assertEquals(resp.status, Status.OK);
-    const body = await resp.text();
-    assert(body.startsWith("bar"));
-    const etag = resp.headers.get("etag");
-    assert(etag);
-    // TODO(kt3k): Enable this assertion when new Deno.serve is released.
-    // https://github.com/denoland/deno/pull/18568
-    // assert(etag.startsWith("W/"), "etag should be weak");
-    assertEquals(resp.headers.get("content-type"), "text/plain");
-  });
-
-  await lines.cancel();
-  serverProcess.kill("SIGTERM");
+  },
 });
 
 Deno.test("jsx pragma works", {
@@ -795,3 +807,92 @@ Deno.test("PORT environment variable", {
   await lines.cancel();
   serverProcess.kill("SIGTERM");
 });
+
+Deno.test("throw on route export 'handlers' instead of 'handler'", {
+  sanitizeOps: false,
+  sanitizeResources: false,
+}, async () => {
+  const result = await new Deno.Command(Deno.execPath(), {
+    args: ["run", "-A", "./tests/fixture_invalid_handlers/main.ts"],
+    stderr: "piped",
+    stdout: "piped",
+  }).output();
+
+  assertEquals(result.code, 1);
+
+  const text = new TextDecoder().decode(result.stderr);
+  assertMatch(text, /Did you mean "handler"\?/);
+});
+
+Deno.test("rendering custom _500.tsx page for default handlers", {
+  sanitizeOps: false,
+  sanitizeResources: false,
+}, async (t) => {
+  // Preparation
+  const { serverProcess, lines, address } = await startFreshServer({
+    args: ["run", "-A", "./tests/fixture_custom_500/main.ts"],
+  });
+
+  await delay(100);
+
+  await t.step("SSR error is shown", async () => {
+    const resp = await fetch(address);
+    assertEquals(resp.status, Status.InternalServerError);
+    const text = await resp.text();
+    assertStringIncludes(text, "Custom 500: Pickle Rick!");
+  });
+
+  const browser = await puppeteer.launch({ args: ["--no-sandbox"] });
+  const page = await browser.newPage();
+
+  await page.goto(address, {
+    waitUntil: "networkidle2",
+  });
+
+  await t.step("error page is shown with error message", async () => {
+    const el = await page.waitForSelector(".custom-500");
+    const text = await page.evaluate((el) => el.textContent, el);
+    assertStringIncludes(text, "Custom 500: Pickle Rick!");
+  });
+
+  await browser.close();
+
+  await lines.cancel();
+  serverProcess.kill("SIGTERM");
+});
+
+Deno.test("renders error boundary", {
+  sanitizeOps: false,
+  sanitizeResources: false,
+}, async () => {
+  await withPageName("./tests/fixture/main.ts", async (page, address) => {
+    await page.goto(`${address}/error_boundary`);
+    const text = await page.$eval("body", (el) => el.textContent);
+    assertEquals(text, "it works");
+  });
+});
+
+Deno.test({
+  name: "Resolves routes with non-latin characters",
+
+  async fn() {
+    await withPageName("./tests/fixture/main.ts", async (page, address) => {
+      // Check that we can navigate to the page
+      await page.goto(`${address}/umlaut-äöüß`);
+      await page.waitForSelector("h1");
+      const text = await page.$eval("h1", (el) => el.textContent);
+      assertEquals(text, "it works");
+
+      // Check the manifest
+      const mod = (await import("./fixture/fresh.gen.ts")).default;
+
+      assert(
+        "./routes/umlaut-äöüß.tsx" in mod.routes,
+        "Umlaut route not found",
+      );
+    });
+  },
+
+  sanitizeOps: false,
+  sanitizeResources: false,
+});
diff --git a/tests/plugin_test.ts b/tests/plugin_test.ts
index 320ff3077d9..8bb225a9680 100644
--- a/tests/plugin_test.ts
+++ b/tests/plugin_test.ts
@@ -14,11 +14,6 @@ const ctx = await ServerContext.fromManifest(manifest, options);
 const handler = ctx.handler();
 const router = (req: Request) => {
   return handler(req, {
-    localAddr: {
-      transport: "tcp",
-      hostname: "127.0.0.1",
-      port: 80,
-    },
     remoteAddr: {
       transport: "tcp",
       hostname: "127.0.0.1",
@@ -58,6 +53,21 @@ Deno.test("/with-island prerender", async () => {
   );
 });
 
+Deno.test("plugin routes and middleware", async () => {
+  const resp = await router(new Request("https://fresh.deno.dev/test"));
+  assert(resp);
+  assertEquals(resp.status, Status.OK);
+  const body = await resp.text();
+  assertStringIncludes(
+    body,
+    `<h1>look, i'm set from a plugin!</h1>`,
+  );
+  assertStringIncludes(
+    body,
+    `<title>Title Set From Plugin Config</title>`,
+  );
+});
+
 Deno.test({
   name: "/with-island hydration",
   async fn(t) {
diff --git a/tests/route_analysis_test.ts b/tests/route_analysis_test.ts
new file mode 100644
index 00000000000..ec457e0d816
--- /dev/null
+++ b/tests/route_analysis_test.ts
@@ -0,0 +1,18 @@
+import { startFreshServerExpectErrors } from "./test_utils.ts";
+import { dirname, join } from "$std/path/mod.ts";
+import { assertStringIncludes } from "./deps.ts";
+
+const dir = dirname(import.meta.url);
+
+Deno.test({
+  name: "route-conflicts",
+  async fn() {
+    const errorMessage = await startFreshServerExpectErrors({
+      args: ["run", "-A", join(dir, "./fixture_route_analysis/dev.ts")],
+    });
+    assertStringIncludes(
+      errorMessage,
+      "Error: Route conflict detected. Multiple files have the same name",
+    );
+  },
+});
diff --git a/tests/server_components_test.ts b/tests/server_components_test.ts
new file mode 100644
index 00000000000..860a09101f8
--- /dev/null
+++ b/tests/server_components_test.ts
@@ -0,0 +1,162 @@
+import { assertEquals } from "./deps.ts";
+import { startFreshServer, withPageName } from "./test_utils.ts";
+import { Status } from "../server.ts";
+
+Deno.test({
+  name: "render async server component",
+
+  async fn() {
+    await withPageName(
+      "./tests/fixture_server_components/main.ts",
+      async (page, address) => {
+        await page.goto(`${address}/basic`);
+
+        await page.waitForSelector("h1");
+        const text = await page.$eval("h1", (el) => el.textContent);
+        assertEquals(text, "it works");
+      },
+    );
+  },
+
+  sanitizeOps: false,
+  sanitizeResources: false,
+});
+
+Deno.test({
+  name: "uses returned response",
+
+  async fn() {
+    await withPageName(
+      "./tests/fixture_server_components/main.ts",
+      async (page, address) => {
+        await page.goto(`${address}/response`);
+
+        const text = await page.$eval("body", (el) => el.textContent);
+        assertEquals(text, "it works");
+      },
+    );
+  },
+
+  sanitizeOps: false,
+  sanitizeResources: false,
+});
+
+Deno.test({
+  name: "revives islands in async server component",
+
+  async fn() {
+    await withPageName(
+      "./tests/fixture_server_components/main.ts",
+      async (page, address) => {
+        await page.goto(`${address}/island`);
+
+        await page.waitForSelector("button");
+        let text = await page.$eval("button", (el) => el.textContent);
+        assertEquals(text, "update 0");
+
+        await page.click("button");
+        text = await page.$eval("button", (el) => el.textContent);
+        assertEquals(text, "update 1");
+      },
+    );
+  },
+
+  sanitizeOps: false,
+  sanitizeResources: false,
+});
+
+Deno.test({
+  name: "passes context to server component",
+
+  async fn() {
+    const { lines, serverProcess, address } = await startFreshServer({
+      args: ["run", "-A", "./tests/fixture_server_components/main.ts"],
+    });
+
+    const res = await fetch(`${address}/context/foo`);
+    const json = await res.json();
+
+    assertEquals(typeof json.localAddr, "object");
+    assertEquals(typeof json.remoteAddr, "object");
+    json.localAddr.port = 8000;
+    json.remoteAddr.port = 8000;
+
+    assertEquals(
+      json,
+      {
+        localAddr: {
+          hostname: "localhost",
+          port: 8000,
+          transport: "tcp",
+        },
+        remoteAddr: {
+          hostname: "localhost",
+          port: 8000,
+          transport: "tcp",
+        },
+        renderNotFound: "AsyncFunction",
+        url: `${address}/context/foo`,
+        route: "/context/:id",
+        params: {
+          id: "foo",
+        },
+        state: {},
+      },
+    );
+    await lines.cancel();
+    serverProcess.kill("SIGTERM");
+    await serverProcess.status;
+  },
+
+  sanitizeOps: false,
+  sanitizeResources: false,
+});
+
+Deno.test({
+  name: "can call context.renderNotFound()",
+
+  async fn() {
+    const { lines, serverProcess, address } = await startFreshServer({
+      args: ["run", "-A", "./tests/fixture_server_components/main.ts"],
+    });
+
+    const res = await fetch(`${address}/fail`);
+
+    assertEquals(res.status, Status.NotFound);
+    const html = await res.text();
+    assertEquals(html, "Not found.");
+
+    await lines.cancel();
+    serverProcess.kill("SIGTERM");
+    await serverProcess.status;
+  },
+
+  sanitizeOps: false,
+  sanitizeResources: false,
+});
+
+Deno.test({
+  name: "works with async plugins",
+
+  async fn() {
+    await withPageName(
+      "./tests/fixture_server_components/main.ts",
+      async (page, address) => {
+        await page.goto(`${address}/twind`);
+        await page.waitForSelector("h1");
+
+        const text = await page.$eval("body", (el) => el.textContent);
+        assertEquals(text, "it works");
+
+        // Check that CSS was applied accordingly
+        const color = await page.$eval("h1", (el) => {
+          return window.getComputedStyle(el).color;
+        });
+        assertEquals(color, "rgb(220, 38, 38)");
+      },
+    );
+  },
+
+  sanitizeOps: false,
+  sanitizeResources: false,
+});
diff --git a/tests/test_utils.ts b/tests/test_utils.ts
index 53ebac13d57..66ef05b5a93 100644
--- a/tests/test_utils.ts
+++ b/tests/test_utils.ts
@@ -1,11 +1,118 @@
-import { TextLineStream } from "./deps.ts";
+import { delay, Page, puppeteer, TextLineStream } from "./deps.ts";
 
 export async function startFreshServer(options: Deno.CommandOptions) {
+  const { serverProcess, lines, address } = await spawnServer(options);
+
+  if (!address) {
+    throw new Error("Server didn't start up");
+  }
+
+  return { serverProcess, lines, address };
+}
+
+export async function withPageName(
+  name: string,
+  fn: (page: Page, address: string) => Promise<void>,
+) {
+  const { lines, serverProcess, address } = await startFreshServer({
+    args: ["run", "-A", name],
+  });
+
+  try {
+    await delay(100);
+    const browser = await puppeteer.launch({ args: ["--no-sandbox"] });
+
+    try {
+      const page = await browser.newPage();
+      await fn(page, address);
+    } finally {
+      await browser.close();
+    }
+  } finally {
+    await lines.cancel();
+
+    serverProcess.kill("SIGTERM");
+
+    // Wait until the process exits
+    await serverProcess.status;
+  }
+}
+
+export async function startFreshServerExpectErrors(
+  options: Deno.CommandOptions,
+) {
+  const { serverProcess, address } = await spawnServer(options, true);
+
+  if (address) {
+    throw Error("Server started correctly");
+  }
+
+  const errorDecoder = new TextDecoderStream();
+  const errorLines: ReadableStream<string> = serverProcess.stderr
+    .pipeThrough(errorDecoder)
+    .pipeThrough(new TextLineStream(), {
+      preventCancel: true,
+    });
+  let output = "";
+  for await (const line of errorLines) {
+    output += line + "\n";
+  }
+  return output;
+}
+
+/**
+ * Click on an element once it has an attached click listener
+ */
+export async function clickWhenListenerReady(page: Page, selector: string) {
+  await page.waitForSelector(selector);
+  await page.waitForFunction(
+    (sel) => {
+      const el = document.querySelector(sel)!;
+
+      // Wait for Preact to have attached either a captured or non-captured
+      // click event
+      // deno-lint-ignore no-explicit-any
+      const preactListener = (el as any).l as Record<string, unknown> | null;
+      if (
+        !preactListener || typeof preactListener !== "object" ||
+        (!preactListener.clickfalse && !preactListener.clicktrue)
+      ) {
+        return false;
+      }
+
+      return true;
+    },
+    {},
+    selector,
+  );
+  await page.click(selector);
+}
+
+export async function waitForText(
+  page: Page,
+  selector: string,
+  text: string,
+) {
+  await page.waitForSelector(selector);
+  await page.waitForFunction(
+    (sel, value) => {
+      return document.querySelector(sel)!.textContent === value;
+    },
+    { timeout: 2000 },
+    selector,
+    String(text),
+  );
+}
+
+async function spawnServer(
+  options: Deno.CommandOptions,
+  expectErrors = false,
+) {
   const serverProcess = new Deno.Command(Deno.execPath(), {
     ...options,
     stdin: "null",
     stdout: "piped",
-    stderr: "inherit",
+    stderr: expectErrors ? "piped" : "inherit",
   }).spawn();
 
   const decoder = new TextDecoderStream();
@@ -23,9 +130,6 @@ export async function startFreshServer(options: Deno.CommandOptions) {
       break;
     }
   }
-  if (!address) {
-    throw new Error("Server didn't start up");
-  }
 
   return { serverProcess, lines, address };
 }
diff --git a/tests/trailing_slash_test.ts b/tests/trailing_slash_test.ts
index 63fa5231da9..7947bcd7d96 100644
--- a/tests/trailing_slash_test.ts
+++ b/tests/trailing_slash_test.ts
@@ -1,3 +1,4 @@
+import { INTERNAL_PREFIX } from "../runtime.ts";
 import { ServerContext, Status } from "../server.ts";
 import { assert, assertEquals } from "./deps.ts";
 import manifest from "./fixture_router/fresh.gen.ts";
@@ -9,11 +10,6 @@ const ctx = await ServerContext.fromManifest(manifest, {
 });
 const router = (req: Request) => {
   return ctx.handler()(req, {
-    localAddr: {
-      transport: "tcp",
-      hostname: "127.0.0.1",
-      port: 80,
-    },
     remoteAddr: {
       transport: "tcp",
       hostname: "127.0.0.1",
@@ -30,3 +26,30 @@ Deno.test("forwards slash placed at the end of url", async () => {
   // forwarded location should be with trailing slash
   assertEquals(resp.headers.get("location"), targetUrl + "/");
 });
+
+Deno.test("forwards slash placed at the end of url with hash and query string", async () => {
+  const targetUrl = "https://fresh.deno.dev/about";
+  const queryAndHash = "?demo=test#what";
+  const resp = await router(new Request(targetUrl + queryAndHash));
+  assert(resp);
+  assertEquals(resp.status, Status.PermanentRedirect);
+  // forwarded location should be with trailing slash
+  assertEquals(resp.headers.get("location"), targetUrl + "/" + queryAndHash);
+});
+
+Deno.test("forwards slash not placed at the end of url with prefix", async () => {
+  const targetUrl = `https://fresh.deno.dev${INTERNAL_PREFIX}/no_redirect`;
+  const resp = await router(new Request(targetUrl));
+  assert(resp);
+  // we should get a 404 and not a redirect
+  assertEquals(resp.status, Status.NotFound);
+});
+
+Deno.test("forwards slash not placed at the end of url for static file", async () => {
+  const targetUrl = `https://fresh.deno.dev/foo.txt`;
+  const resp = await router(new Request(targetUrl));
+  assert(resp);
+  // we should not be getting a redirect
+  assertEquals(resp.status, Status.OK);
+  assertEquals(await resp.text(), "bar");
+});
diff --git a/tests/twind_test.ts b/tests/twind_test.ts
index 2507c3d7a25..37ab178a12e 100644
--- a/tests/twind_test.ts
+++ b/tests/twind_test.ts
@@ -1,7 +1,8 @@
+import { assertEquals } from "https://deno.land/std@0.190.0/testing/asserts.ts";
 import { assert, delay, puppeteer } from "./deps.ts";
 
 import { cmpStringArray } from "./fixture_twind_hydrate/utils/utils.ts";
-import { startFreshServer } from "./test_utils.ts";
+import { startFreshServer, withPageName } from "./test_utils.ts";
 
 /**
  * Start the server with the main file.
@@ -292,3 +293,61 @@ Deno.test({
     await server.terminate();
   },
 });
+
+Deno.test({
+  name: "Excludes classes from unused vnodes",
+  async fn() {
+    await withPageName(
+      "./tests/fixture_twind_hydrate/main.ts",
+      async (page, address) => {
+        await page.goto(`${address}/unused`);
+        await page.waitForSelector("#__FRSH_TWIND");
+
+        const hasUnusedRules = await page.$eval("#__FRSH_TWIND", (el) => {
+          return el.textContent.includes(".text-red-600");
+        });
+        assert(
+          !hasUnusedRules,
+          "Unused CSS class '.text-red-600' found.",
+        );
+      },
+    );
+  },
+  sanitizeOps: false,
+  sanitizeResources: false,
+});
+
+Deno.test({
+  name: "Always includes classes from tw-helper",
+  async fn() {
+    await withPageName(
+      "./tests/fixture_twind_hydrate/main.ts",
+      async (page, address) => {
+        await page.goto(`${address}/unused_tw`);
+        await page.waitForSelector("#__FRSH_TWIND");
+
+        const styles = await page.$eval(
+          "#__FRSH_TWIND",
+          (el: HTMLStyleElement) => {
+            const text = el.textContent!;
+            return {
+              "text-red-600": text.includes(".text-red-600"),
+              "text-green-500": text.includes("text-green-500"),
+              "text-blue-500": text.includes("text-blue-500"),
+            };
+          },
+        );
+        assertEquals(
+          styles,
+          {
+            "text-red-600": false,
+            "text-green-500": true,
+            "text-blue-500": true,
+          },
+        );
+      },
+    );
+  },
+  sanitizeOps: false,
+  sanitizeResources: false,
+});
diff --git a/update.ts b/update.ts
index 658b7a99375..2830214e547 100644
--- a/update.ts
+++ b/update.ts
@@ -1,4 +1,13 @@
-import { join, Node, parse, Project, resolve } from "./src/dev/deps.ts";
+import {
+  dirname,
+  existsSync,
+  join,
+  Node,
+  parse,
+  Project,
+  resolve,
+  walk,
+} from "./src/dev/deps.ts";
 import { error } from "./src/dev/error.ts";
 import { freshImports, twindImports } from "./src/dev/imports.ts";
 import { collect, ensureMinDenoVersion, generate } from "./src/dev/mod.ts";
@@ -10,7 +19,7 @@ const help = `fresh-update
 Update a Fresh project. This updates dependencies and optionally performs code
 mods to update a project's source code to the latest recommended patterns.
 
-To upgrade a projecct in the current directory, run:
+To upgrade a project in the current directory, run:
   fresh-update .
 
 USAGE:
@@ -25,11 +34,20 @@ if (flags._.length !== 1) {
 
 const unresolvedDirectory = Deno.args[0];
 const resolvedDirectory = resolve(unresolvedDirectory);
+const srcDirectory = await findSrcDirectory("main.ts", resolvedDirectory);
 
 // Update dependencies in the import map. The import map can either be embedded
-// in a deno.json file or be in a separate JSON file referenced with the
+// in a deno.json (or .jsonc) file or be in a separate JSON file referenced with the
 // `importMap` key in deno.json.
-const DENO_JSON_PATH = join(resolvedDirectory, "deno.json");
+const fileNames = ["deno.json", "deno.jsonc"];
+const DENO_JSON_PATH = fileNames
+  .map((fileName) => join(resolvedDirectory, fileName))
+  .find((path) => existsSync(path));
+if (!DENO_JSON_PATH) {
+  throw new Error(
+    `Neither deno.json nor deno.jsonc could be found in ${resolvedDirectory}`,
+  );
+}
 let denoJsonText = await Deno.readTextFile(DENO_JSON_PATH);
 let denoJson = JSON.parse(denoJsonText);
 if (denoJson.importMap) {
@@ -42,6 +60,23 @@ if (denoJson.importMap) {
   await Deno.remove(IMPORT_MAP_PATH);
 }
 
+// Add fresh lint preset
+if (!denoJson.lint) {
+  denoJson.lint = {};
+}
+if (!denoJson.lint.rules) {
+  denoJson.lint.rules = {};
+}
+if (!denoJson.lint.rules.tags) {
+  denoJson.lint.rules.tags = [];
+}
+if (!denoJson.lint.rules.tags.includes("fresh")) {
+  denoJson.lint.rules.tags.push("fresh");
+}
+if (!denoJson.lint.rules.tags.includes("recommended")) {
+  denoJson.lint.rules.tags.push("recommended");
+}
+
 freshImports(denoJson.imports);
 if (denoJson.imports["twind"]) {
   twindImports(denoJson.imports);
@@ -185,5 +220,17 @@ await start(manifest, { plugins: [twindPlugin(twindConfig)] });\n`;
   }
 }
 
-const manifest = await collect(resolvedDirectory);
-await generate(resolvedDirectory, manifest);
+const manifest = await collect(srcDirectory);
+await generate(srcDirectory, manifest);
+
+async function findSrcDirectory(
+  fileName: string,
+  directory: string,
+): Promise<string> {
+  for await (const entry of walk(directory)) {
+    if (entry.isFile && entry.name === fileName) {
+      return dirname(entry.path);
+    }
+  }
+  return resolvedDirectory;
+}
diff --git a/versions.json b/versions.json
index 4bb3310a685..37817f5563e 100644
--- a/versions.json
+++ b/versions.json
@@ -1,4 +1,5 @@
 [
+  "1.3.0",
   "1.2.0",
   "1.1.6",
   "1.1.5",
diff --git a/www/components/DocsSidebar.tsx b/www/components/DocsSidebar.tsx
index bd86dd17158..47eb988e457 100644
--- a/www/components/DocsSidebar.tsx
+++ b/www/components/DocsSidebar.tsx
@@ -1,13 +1,20 @@
-import { Head } from "$fresh/runtime.ts";
 import {
   CATEGORIES,
   TableOfContentsCategory,
   TableOfContentsCategoryEntry,
 } from "../data/docs.ts";
 import SearchButton from "../islands/SearchButton.tsx";
+import VersionSelect from "../islands/VersionSelect.tsx";
+import { type VersionLink } from "../routes/docs/[...slug].tsx";
 
-export default function DocsSidebar(props: { path: string; mobile?: boolean }) {
-  const id = String(Math.random()).replaceAll(".", "");
+export default function DocsSidebar(
+  props: {
+    path: string;
+    mobile?: boolean;
+    versionLinks: VersionLink[];
+    selectedVersion: string;
+  },
+) {
   return (
     <>
       {props.mobile
@@ -45,10 +52,17 @@ export default function DocsSidebar(props: { path: string; mobile?: boolean }) {
             </span>
           </button>
         )
-        : <SearchButton />}
+        : <SearchButton class="lg:hidden" />}
 
-      <ol class="list-decimal list-inside font-semibold nested">
-        {CATEGORIES.map((category) => (
+      <div class="mb-4">
+        <VersionSelect
+          selectedVersion={props.selectedVersion}
+          versions={props.versionLinks}
+        />
+      </div>
+
+      <ol class="list-decimal list-inside font-semibold nested ml-2.5">
+        {CATEGORIES[props.selectedVersion].map((category) => (
           <SidebarCategory path={props.path} category={category} />
         ))}
       </ol>
@@ -57,7 +71,7 @@ export default function DocsSidebar(props: { path: string; mobile?: boolean }) {
 }
 
 const link = "text(gray-900 hover:gray-600)";
-const linkActive = "text(green-600 hover:green-500)";
+const linkActive = "text(green-600 hover:green-500) font-bold";
 
 export function SidebarCategory(props: {
   path: string;
@@ -69,9 +83,11 @@ export function SidebarCategory(props: {
 
   return (
     <li class="my-2 block">
-      <a href={href} class={outerLink}>{title}</a>
+      <a href={href} class={outerLink}>
+        {title}
+      </a>
       {entries.length > 0 && (
-        <ol class="pl-4 list-decimal nested">
+        <ol class="pb-2 pl-4 list-decimal nested list-outside">
           {entries.map((entry) => (
             <SidebarEntry path={props.path} entry={entry} />
           ))}
@@ -87,10 +103,12 @@ export function SidebarEntry(props: {
 }) {
   const { title, href } = props.entry;
 
-  const innerLink = `${href == props.path ? linkActive : link} font-normal`;
+  const innerLink = `${
+    href == props.path ? linkActive : link
+  } transition-colors hover:text-green-500 font-normal`;
 
   return (
-    <li class="my-0.5">
+    <li class="py-0.5">
       <a href={href} class={innerLink}>{title}</a>
     </li>
   );
diff --git a/www/components/Footer.tsx b/www/components/Footer.tsx
index 7a786580f89..8c4dcaea569 100644
--- a/www/components/Footer.tsx
+++ b/www/components/Footer.tsx
@@ -1,3 +1,5 @@
+import * as Icons from "./Icons.tsx";
+
 const LINKS = [
   {
     title: "Source",
@@ -15,16 +17,40 @@ const LINKS = [
 
 export default function Footer() {
   return (
-    <footer class="border(t-2 gray-200) bg-gray-100 h-32 flex flex-col gap-4 justify-center">
-      <div class="mx-auto max-w-screen-lg flex items-center justify-center gap-8">
-        {LINKS.map((link) => (
-          <a href={link.href} class="text-gray-600 hover:underline">
-            {link.title}
-          </a>
-        ))}
-      </div>
-      <div class="text(gray-600 center)">
-        <span>© {new Date().getFullYear()} the fresh authors</span>
+    <footer class="border-t-2 border-gray-200 bg-gray-100 md:h-16 flex gap-4 justify-center">
+      <div class="flex flex-col sm:flex-row gap-4 justify-between items-center max-w-screen-xl mx-auto w-full px(4 sm:6 md:8) p-4">
+        <div class="text(gray-600 center)">
+          <span>© {new Date().getFullYear()} the fresh authors</span>
+        </div>
+
+        <div class="flex items-center gap-8">
+          {LINKS.map((link) => (
+            <a href={link.href} class="text-gray-600 hover:underline">
+              {link.title}
+            </a>
+          ))}
+        </div>
+
+        <ul class="flex justify-center items-center gap-4 md:ml-4 mt-2 mb-4 sm:mt-0 sm:mb-0 flex-wrap">
+          <li class="flex items-center">
+            <a
+              href="https://github.com/denoland/fresh"
+              class="hover:text-green-600 inline-block transition"
+              aria-label="GitHub"
+            >
+              <Icons.GitHub />
+            </a>
+          </li>
+          <li class="flex items-center">
+            <a
+              href="https://discord.com/invite/deno"
+              class="hover:text-green-600 inline-block transition"
+              aria-label="Discord"
+            >
+              <Icons.Discord />
+            </a>
+          </li>
+        </ul>
       </div>
     </footer>
   );
diff --git a/www/components/Header.tsx b/www/components/Header.tsx
index eac272850cf..7c4874cd733 100644
--- a/www/components/Header.tsx
+++ b/www/components/Header.tsx
@@ -1,21 +1,23 @@
 import DocsTitle from "./DocsTitle.tsx";
 import NavigationBar from "./NavigationBar.tsx";
+import SearchButton from "../islands/SearchButton.tsx";
 
 export default function Header(props: { title: string; active: string }) {
   const isHome = props.active == "/";
+  const isDocs = props.active.startsWith("/docs");
   return (
     <div>
       <header
-        class={"mx-auto max-w-screen-lg flex gap-3 " +
+        class={"mx-auto max-w-screen-xl flex gap-3 items-center " +
           (isHome ? "justify-end" : "justify-between")}
       >
-        {!isHome &&
-          (
-            <div class="p-4 flex items-center">
-              <Logo />
-              <DocsTitle title={props.title} />
-            </div>
-          )}
+        {!isHome && (
+          <div class="p-4 flex items-center">
+            <Logo />
+            <DocsTitle title={props.title} />
+          </div>
+        )}
+        {isDocs && <SearchButton class="grow mb-0 hidden lg:flex" />}
         <NavigationBar class="hidden md:flex" active={props.active} />
       </header>
       <NavigationBar class="md:hidden pb-3" active={props.active} />
@@ -26,12 +28,7 @@ export default function Header(props: { title: string; active: string }) {
 function Logo() {
   return (
     <a href="/" class="flex mr-3 items-center" aria-label="Top Page">
-      <img
-        src="/logo.svg"
-        alt="Fresh logo"
-        width={40}
-        height={40}
-      />
+      <img src="/logo.svg" alt="Fresh logo" width={40} height={40} />
     </a>
   );
 }
diff --git a/www/components/NavigationBar.tsx b/www/components/NavigationBar.tsx
index 20265728f3e..8104684c531 100644
--- a/www/components/NavigationBar.tsx
+++ b/www/components/NavigationBar.tsx
@@ -43,7 +43,7 @@ export default function NavigationBar(
         <li class="flex items-center">
           <a
             href="https://github.com/denoland/fresh"
-            class="hover:text-green-600 inline-block"
+            class="hover:text-green-600 inline-block transition"
             aria-label="GitHub"
           >
             <Icons.GitHub />
@@ -52,7 +52,7 @@ export default function NavigationBar(
         <li class="flex items-center">
           <a
             href="https://discord.com/invite/deno"
-            class="hover:text-green-600 inline-block"
+            class="hover:text-green-600 inline-block transition"
             aria-label="Discord"
           >
             <Icons.Discord />
diff --git a/www/components/Projects.tsx b/www/components/Projects.tsx
index d44f7c47bbf..0b6f19a2a7f 100644
--- a/www/components/Projects.tsx
+++ b/www/components/Projects.tsx
@@ -14,7 +14,7 @@ interface ProjectProps {
 export default function Projects(props: ProjectProps) {
   return (
     <div
-      class={`pt-8 grid grid-cols-1 md:grid-cols-3 items-center ${
+      class={`pt-8 grid grid-cols-1 sm:grid-cols-3 items-center ${
         props.class ?? ""
       }`}
     >
@@ -42,7 +42,7 @@ export default function Projects(props: ProjectProps) {
                 class="ml-2 text-gray-500 hover:text-gray-700"
               >
                 <span class="sr-only">GitHub</span>
-                <Icons.GitHub class="inline float-right" />
+                <Icons.GitHub class="inline float-right h-6 w-6" />
               </a>
             )}
           </div>
diff --git a/www/components/gallery/CodeBox.tsx b/www/components/gallery/CodeBox.tsx
index 5f66aceb10d..23d7d770162 100644
--- a/www/components/gallery/CodeBox.tsx
+++ b/www/components/gallery/CodeBox.tsx
@@ -1,7 +1,7 @@
 import { useSignal } from "@preact/signals";
 
-import Prism from "https://esm.sh/prismjs@1.27.0";
-import "https://esm.sh/prismjs@1.27.0/components/prism-typescript?no-check";
+import Prism from "https://esm.sh/prismjs@1.29.0";
+import "https://esm.sh/prismjs@1.29.0/components/prism-typescript?no-check";
 
 interface CodeBoxProps {
   code: string;
diff --git a/www/components/gallery/Hero.tsx b/www/components/gallery/Hero.tsx
index d9005dd0df2..b15d9947571 100644
--- a/www/components/gallery/Hero.tsx
+++ b/www/components/gallery/Hero.tsx
@@ -3,7 +3,7 @@ import IconChevronRight from "https://deno.land/x/tabler_icons_tsx@0.0.3/tsx/che
 export default function Hero() {
   return (
     <div
-      class="w-full flex px-8 h-96 justify-center items-center flex-col gap-8 bg-cover bg-center bg-no-repeat bg-gray-100 rounded-xl text-white"
+      class="w-full flex px-8 py-10 min-h-[24em] justify-center items-center flex-col gap-8 bg-cover bg-center bg-no-repeat bg-gray-100 rounded-xl text-white"
       style="background-image:linear-gradient(rgba(0, 0, 40, 0.8),rgba(0, 0, 40, 0.8)), url('/gallery/hero-bg.webp');"
     >
       <div class="space-y-4 text-center">
@@ -14,7 +14,7 @@ export default function Hero() {
         </p>
       </div>
 
-      <div>
+      <div class="flex flex-col md:flex-row items-center">
         <a
           href="#"
           class="block mt-4 text-blue-500 cursor-pointer inline-flex items-center group text-blue-800 bg-white px-8 py-2 rounded-md hover:bg-blue-50 font-bold"
diff --git a/www/data/docs.ts b/www/data/docs.ts
index 868495856b9..3a2a4a96d4c 100644
--- a/www/data/docs.ts
+++ b/www/data/docs.ts
@@ -1,11 +1,4 @@
-import RAW_TOC from "../../docs/toc.json" assert { type: "json" };
-
-type RawTableOfContents = Record<string, RawTableOfContentsEntry>;
-
-interface RawTableOfContentsEntry {
-  title: string;
-  pages?: [string, string][];
-}
+import toc from "../../docs/toc.ts";
 
 export interface TableOfContentsEntry {
   slug: string;
@@ -26,39 +19,83 @@ export interface TableOfContentsCategoryEntry {
   href: string;
 }
 
-export const TABLE_OF_CONTENTS: Record<string, TableOfContentsEntry> = {};
-export const CATEGORIES: TableOfContentsCategory[] = [];
+export const TABLE_OF_CONTENTS: Record<
+  string,
+  Record<string, TableOfContentsEntry>
+> = {};
+export const CATEGORIES: Record<string, TableOfContentsCategory[]> = {};
+
+export const VERSIONS = Object.keys(toc);
+export const CANARY_VERSION = toc.canary ? "canary" : "";
+export const LATEST_VERSION =
+  VERSIONS.find((version) => version !== "canary") ?? "";
+
+for (const version in toc) {
+  const RAW_VERSION = toc[version];
+  const versionSlug = version === LATEST_VERSION ? "" : `/${version}`;
+  TABLE_OF_CONTENTS[version] = {};
+  CATEGORIES[version] = [];
+
+  for (const parent in RAW_VERSION.content) {
+    const rawEntry = RAW_VERSION.content[parent];
+
+    // Allow versioned documentation to stack on each other. This should
+    // only be used for canary versions. This avoids having us to copy
+    // all documentation content and backport changes.
+    const fileVersion = rawEntry.link ?? version;
+    const versionFilePath = fileVersion === LATEST_VERSION
+      ? ""
+      : `/${fileVersion}`;
 
-for (const parent in (RAW_TOC as unknown as RawTableOfContents)) {
-  const rawEntry = (RAW_TOC as unknown as RawTableOfContents)[parent];
-  const href = `/docs/${parent}`;
-  const file = `docs/${parent}/index.md`;
-  const entry = {
-    slug: parent,
-    title: rawEntry.title,
-    href,
-    file,
-  };
-  TABLE_OF_CONTENTS[parent] = entry;
-  const category: TableOfContentsCategory = {
-    title: rawEntry.title,
-    href,
-    entries: [],
-  };
-  CATEGORIES.push(category);
-  if (rawEntry.pages) {
-    for (const [id, title] of rawEntry.pages) {
-      const slug = `${parent}/${id}`;
-      const href = `/docs/${slug}`;
-      const file = `docs/${slug}.md`;
-      const entry = { slug, title, category: parent, href, file };
-      TABLE_OF_CONTENTS[slug] = entry;
-      category.entries.push({
-        title,
-        href,
-      });
+    const href = `/docs${versionSlug}/${parent}`;
+    const file = `docs${versionFilePath}/${parent}/index.md`;
+
+    const entry = {
+      slug: parent,
+      title: rawEntry.title,
+      href,
+      file,
+    };
+    TABLE_OF_CONTENTS[version][parent] = entry;
+    const category: TableOfContentsCategory = {
+      title: rawEntry.title,
+      href,
+      entries: [],
+    };
+    CATEGORIES[version].push(category);
+    if (rawEntry.pages) {
+      for (const [id, title, linkedVersion] of rawEntry.pages) {
+        const slug = `${parent}/${id}`;
+
+        // Allow stacked documentation
+        const pageVersion = linkedVersion
+          ? linkedVersion.slice("link:".length)
+          : version;
+        const versionFilePath = !pageVersion || pageVersion === LATEST_VERSION
+          ? ""
+          : `/${pageVersion}`;
+
+        const href = `/docs${versionSlug}/${slug}`;
+
+        const file = `docs${versionFilePath}/${slug}.md`;
+        const entry = { slug, title, category: parent, href, file };
+        TABLE_OF_CONTENTS[version][slug] = entry;
+        category.entries.push({
+          title,
+          href,
+        });
+      }
     }
   }
 }
 
-export const SLUGS = Object.keys(TABLE_OF_CONTENTS);
+export function getFirstPageUrl(version: string) {
+  const group = TABLE_OF_CONTENTS[version];
+  if (group) {
+    for (const slug in group) {
+      return group[slug].href;
+    }
+  }
+
+  throw new Error(`Could not find version "${version}"`);
+}
diff --git a/www/data/showcase.json b/www/data/showcase.json
index e93c478c730..10283ec2f0f 100644
--- a/www/data/showcase.json
+++ b/www/data/showcase.json
@@ -330,7 +330,30 @@
     "image": "learn-mandarin"
   },
   {
-    "title": "Do not remove this, it's for prevent conflicting by trailing comma",
+    "title": "Deno Place",
+    "link": "https://deno-place.arruda.dev/",
+    "github": "https://github.com/arrudaricardo/deno_place",
+    "image": "deno-place"
+  },
+  {
+    "title": "Url shorter and Pastebin",
+    "link": "https://uspb.deno.dev/",
+    "github": "jneeee/uspb",
+    "image": "uspb"
+  },
+  {
+    "title": "Battleship",
+    "link": "https://battleship.deno.dev",
+    "github": "karelklima/battleship",
+    "image": "battleship"
+  },
+  {
+    "title": "Kanji.Academy",
+    "link": "https://kanji.academy",
+    "image": "kanji-academy"
+  },
+  {
+    "title": "Do not remove this, it's for preventing conflicts by trailing comma",
     "link": "",
     "github": "",
     "image": ""
diff --git a/www/deno.json b/www/deno.json
index bee87de37cc..eec43cc7caf 100644
--- a/www/deno.json
+++ b/www/deno.json
@@ -9,10 +9,10 @@
     "twind/": "https://esm.sh/twind@0.16.19/",
     "preact": "https://esm.sh/preact@10.15.1",
     "preact/": "https://esm.sh/preact@10.15.1/",
-    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.1.0",
+    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.2.0",
     "@preact/signals": "https://esm.sh/*@preact/signals@1.1.3",
     "@preact/signals-core": "https://esm.sh/@preact/signals-core@1.2.3",
-    "$std/": "https://deno.land/std@0.190.0/",
+    "$std/": "https://deno.land/std@0.193.0/",
     "$ga4": "https://raw.githubusercontent.com/denoland/ga4/main/mod.ts"
   },
   "compilerOptions": {
diff --git a/www/fresh.gen.ts b/www/fresh.gen.ts
index 95c92ee202a..94d38d9b4f8 100644
--- a/www/fresh.gen.ts
+++ b/www/fresh.gen.ts
@@ -7,16 +7,18 @@ import * as $1 from "./routes/_500.tsx";
 import * as $2 from "./routes/_middleware.ts";
 import * as $3 from "./routes/components.tsx";
 import * as $4 from "./routes/docs/[...slug].tsx";
-import * as $5 from "./routes/gfm.css.ts";
-import * as $6 from "./routes/index.tsx";
-import * as $7 from "./routes/raw.ts";
-import * as $8 from "./routes/showcase.tsx";
-import * as $9 from "./routes/update.tsx";
+import * as $5 from "./routes/docs/index.tsx";
+import * as $6 from "./routes/gfm.css.ts";
+import * as $7 from "./routes/index.tsx";
+import * as $8 from "./routes/raw.ts";
+import * as $9 from "./routes/showcase.tsx";
+import * as $10 from "./routes/update.tsx";
 import * as $$0 from "./islands/ComponentGallery.tsx";
 import * as $$1 from "./islands/CopyArea.tsx";
 import * as $$2 from "./islands/Counter.tsx";
 import * as $$3 from "./islands/LemonDrop.tsx";
 import * as $$4 from "./islands/SearchButton.tsx";
+import * as $$5 from "./islands/VersionSelect.tsx";
 
 const manifest = {
   routes: {
@@ -25,11 +27,12 @@ const manifest = {
     "./routes/_middleware.ts": $2,
     "./routes/components.tsx": $3,
     "./routes/docs/[...slug].tsx": $4,
-    "./routes/gfm.css.ts": $5,
-    "./routes/index.tsx": $6,
-    "./routes/raw.ts": $7,
-    "./routes/showcase.tsx": $8,
-    "./routes/update.tsx": $9,
+    "./routes/docs/index.tsx": $5,
+    "./routes/gfm.css.ts": $6,
+    "./routes/index.tsx": $7,
+    "./routes/raw.ts": $8,
+    "./routes/showcase.tsx": $9,
+    "./routes/update.tsx": $10,
   },
   islands: {
     "./islands/ComponentGallery.tsx": $$0,
@@ -37,6 +40,7 @@ const manifest = {
     "./islands/Counter.tsx": $$2,
     "./islands/LemonDrop.tsx": $$3,
     "./islands/SearchButton.tsx": $$4,
+    "./islands/VersionSelect.tsx": $$5,
   },
   baseUrl: import.meta.url,
 };
diff --git a/www/islands/CopyArea.tsx b/www/islands/CopyArea.tsx
index 073eef3aac1..ebdbbb58111 100644
--- a/www/islands/CopyArea.tsx
+++ b/www/islands/CopyArea.tsx
@@ -4,15 +4,15 @@ import { IS_BROWSER } from "$fresh/runtime.ts";
 import * as Icons from "../components/Icons.tsx";
 import { useSignal } from "@preact/signals";
 
-export default function CopyArea(props: { children: ComponentChildren }) {
+export default function CopyArea(props: { code: string }) {
   const copied = useSignal(false);
 
   async function handleClick() {
-    if (props.children === undefined || props.children === null) {
+    if (props.code === undefined || props.code === null) {
       return;
     }
     try {
-      await navigator.clipboard.writeText(props.children.toString());
+      await navigator.clipboard.writeText(props.code.toString());
       copied.value = true;
     } catch (error) {
       copied.value = false;
@@ -31,9 +31,9 @@ export default function CopyArea(props: { children: ComponentChildren }) {
   }, [copied.value]);
 
   return (
-    <div class="bg(gray-800) rounded text-white flex items-center">
+    <div class="bg(gray-800) rounded text-white flex items-center min-w-0">
       <pre class="overflow-x-auto flex-1 py-2 px-4">
-        {props.children}
+        {props.code}
       </pre>
 
       <div class="relative my-2 mr-4">
diff --git a/www/islands/Counter.tsx b/www/islands/Counter.tsx
index 55cea51e4b3..527909e2a59 100644
--- a/www/islands/Counter.tsx
+++ b/www/islands/Counter.tsx
@@ -1,7 +1,7 @@
 import { useSignal } from "@preact/signals";
 import { IS_BROWSER } from "$fresh/runtime.ts";
 import { RoundedButton } from "../components/Button.tsx";
-import { IconMinus, IconPlus } from "../components/Icons.tsx";
+import * as Icons from "../components/Icons.tsx";
 
 interface CounterProps {
   start: number;
@@ -9,23 +9,41 @@ interface CounterProps {
 
 export default function Counter(props: CounterProps) {
   const count = useSignal(props.start);
+
   return (
-    <div class="bg-gray-100 p-4 border border-gray-200 flex items-center justify-around">
-      <RoundedButton
-        title="Subtract 1"
-        onClick={() => count.value -= 1}
-        disabled={!IS_BROWSER || count.value <= 0}
-      >
-        <IconMinus />
-      </RoundedButton>
-      <div class="text-3xl tabular-nums">{count}</div>
-      <RoundedButton
-        title="Add 1"
-        onClick={() => count.value += 1}
-        disabled={!IS_BROWSER}
+    <div
+      class="bg-green-100 p-8 border-8 border-green-300 text-center"
+      style="border-radius: 1rem"
+    >
+      <h3 class="green-300 text-2xl font-bold text-green-700">
+        This area is interactive
+      </h3>
+      <p class="text-gray-600">
+        The server supplied the initial value of 3.
+      </p>
+      <div
+        class="flex justify-between items-center mt-4 mx-auto"
+        style="max-width: 20rem"
       >
-        <IconPlus />
-      </RoundedButton>
+        <RoundedButton
+          title="Subtract 1"
+          onClick={() => count.value -= 1}
+          disabled={!IS_BROWSER || count.value <= 0}
+        >
+          <Icons.IconMinus />
+        </RoundedButton>
+        <div class="text-6xl tabular-nums font-bold">
+          {count}
+        </div>
+
+        <RoundedButton
+          title="Add 1"
+          onClick={() => count.value += 1}
+          disabled={!IS_BROWSER}
+        >
+          <Icons.IconPlus />
+        </RoundedButton>
+      </div>
     </div>
   );
 }
diff --git a/www/islands/SearchButton.tsx b/www/islands/SearchButton.tsx
index 71a3cee9c10..a4c7084beb3 100644
--- a/www/islands/SearchButton.tsx
+++ b/www/islands/SearchButton.tsx
@@ -2,7 +2,7 @@ import { Head } from "$fresh/runtime.ts";
 import { useEffect, useRef } from "preact/hooks";
 import docsearch from "https://esm.sh/@docsearch/js@3";
 
-export default function SearchButton() {
+export default function SearchButton(props: { class?: string }) {
   const ref = useRef<HTMLDivElement>(null);
   useEffect(() => {
     if (ref.current) {
@@ -22,7 +22,7 @@ export default function SearchButton() {
           href="/docsearch.css"
         />
       </Head>
-      <div class="h-9 mb-6" ref={ref}></div>
+      <div class={"h-9 mb-6 " + (props.class ?? "")} ref={ref}></div>
     </>
   );
 }
diff --git a/www/islands/VersionSelect.tsx b/www/islands/VersionSelect.tsx
new file mode 100644
index 00000000000..cae991c5ac4
--- /dev/null
+++ b/www/islands/VersionSelect.tsx
@@ -0,0 +1,62 @@
+// Copyright 2022-2023 the Deno authors. All rights reserved. MIT license.
+
+import { IS_BROWSER } from "$fresh/runtime.ts";
+import { type VersionLink } from "../routes/docs/[...slug].tsx";
+
+export default function VersionSelect(
+  { versions, selectedVersion }: {
+    versions: VersionLink[];
+    selectedVersion: string;
+  },
+) {
+  const selectedIsLatest = selectedVersion === "latest";
+  const selectedIsCanary = selectedVersion === "canary";
+
+  return (
+    <>
+      <div class="relative">
+        <label htmlFor="version" class="sr-only">
+          Version
+        </label>
+        {selectedIsLatest && (
+          <div class="flex absolute pointer-events-none select-none w-full h-full items-center justify-end pr-8">
+            <div class="rounded-full px-2 py-1 text-xs tag-label bg-[#056CF025] text-blue-600">
+              Latest
+            </div>
+          </div>
+        )}
+        {selectedIsCanary && (
+          <div class="flex absolute pointer-events-none select-none w-full h-full items-center justify-end pr-8">
+            <div class="rounded-full px-2 py-1 text-xs tag-label bg-[#F0900525] text-yellow-600">
+              🚧 Preview
+            </div>
+          </div>
+        )}
+        <select
+          id="version"
+          class={`rounded-md block border border-gray-300 appearance-none bg-white form-select-bg font-semibold ${
+            selectedIsLatest ? "pr-22" : "pr-10"
+          } py-2 pl-3 w-full h-full leading-none sm:(text-sm leading-5) focus:(outline-none border-blue-300) hover:bg-gray-100`}
+          value={selectedVersion}
+          onChange={(e) => {
+            if (e.currentTarget.value !== selectedVersion) {
+              const entry = versions.find((entry) =>
+                entry.value === e.currentTarget.value
+              );
+              if (entry) {
+                location.href = entry.href;
+              }
+            }
+          }}
+          disabled={!IS_BROWSER}
+        >
+          {versions.map((entry) => (
+            <option key={entry.value} value={entry.value}>
+              {entry.label}
+            </option>
+          ))}
+        </select>
+      </div>
+    </>
+  );
+}
diff --git a/www/main_test.ts b/www/main_test.ts
index 383d7c97617..a0d8952b3f0 100644
--- a/www/main_test.ts
+++ b/www/main_test.ts
@@ -1,12 +1,15 @@
-import { assertEquals } from "$std/testing/asserts.ts";
+import { assertArrayIncludes, assertEquals } from "$std/testing/asserts.ts";
 import { delay } from "$std/async/delay.ts";
-import { startFreshServer } from "../tests/test_utils.ts";
+import { startFreshServer, withPageName } from "../tests/test_utils.ts";
+import { dirname, join } from "$std/path/mod.ts";
+
+const dir = dirname(import.meta.url);
 
 Deno.test("CORS should not set on GET /fresh-badge.svg", {
   sanitizeResources: false,
 }, async () => {
   const { serverProcess, lines, address } = await startFreshServer({
-    args: ["run", "-A", "./main.ts"],
+    args: ["run", "-A", join(dir, "./main.ts")],
   });
 
   const res = await fetch(`${address}/fresh-badge.svg`);
@@ -19,3 +22,58 @@ Deno.test("CORS should not set on GET /fresh-badge.svg", {
   // await for the server to close
   await delay(100);
 });
+
+Deno.test("shows version selector", {
+  sanitizeResources: false,
+}, async () => {
+  await withPageName(join(dir, "./main.ts"), async (page, address) => {
+    await page.goto(`${address}/docs`);
+    await page.waitForSelector("#version");
+
+    // Check that we redirected to the first page
+    assertEquals(page.url(), `${address}/docs/introduction`);
+
+    // Wait for version selector to be enabled
+    await page.waitForSelector("#version:not([disabled])");
+
+    const options = await page.$eval("#version", (el: HTMLSelectElement) => {
+      return Array.from(el.options).map((option) => ({
+        value: option.value,
+        label: option.textContent,
+      }));
+    });
+
+    assertEquals(options.length, 2);
+    assertArrayIncludes(options, [
+      {
+        value: "canary",
+        label: "canary",
+      },
+      {
+        value: "1.2",
+        label: "1.2.x",
+      },
+    ]);
+
+    const selectValue = await page.$eval(
+      "#version",
+      (el: HTMLSelectElement) => el.value,
+    );
+    assertEquals(selectValue, "1.2");
+
+    // Go to canary page
+    await Promise.all([
+      page.waitForNavigation(),
+      page.select("#version", "canary"),
+    ]);
+
+    await page.waitForSelector("#version:not([disabled])");
+    const selectValue2 = await page.$eval(
+      "#version",
+      (el: HTMLSelectElement) => el.value,
+    );
+    assertEquals(selectValue2, "canary");
+
+    assertEquals(page.url(), `${address}/docs/canary/introduction`);
+  });
+});
diff --git a/www/routes/_middleware.ts b/www/routes/_middleware.ts
index e92285916ba..ed0472270d4 100644
--- a/www/routes/_middleware.ts
+++ b/www/routes/_middleware.ts
@@ -61,6 +61,7 @@ function ga4(
 
     // Create basic report.
     const measurementId = GA4_MEASUREMENT_ID;
+    // @ts-ignore GA4Report doesn't even use the localAddress parameter
     const report = new GA4Report({ measurementId, request, response, conn });
 
     // Override the default (page_view) event.
diff --git a/www/routes/components.tsx b/www/routes/components.tsx
index 7aeda47ab80..caae4521ef3 100644
--- a/www/routes/components.tsx
+++ b/www/routes/components.tsx
@@ -45,7 +45,7 @@ export default function Home(props: PageProps<HomeProps>) {
         <title>{TITLE}</title>
         <link
           rel="stylesheet"
-          href="https://esm.sh/prismjs@1.27.0/themes/prism-dark.min.css"
+          href="https://esm.sh/prismjs@1.29.0/themes/prism-dark.min.css"
         />
         <meta name="description" content={DESCRIPTION} />
         <meta property="og:title" content={TITLE} />
@@ -53,6 +53,7 @@ export default function Home(props: PageProps<HomeProps>) {
         <meta property="og:type" content="website" />
         <meta property="og:url" content={props.url.href} />
         <meta property="og:image" content={ogImageUrl} />
+        <meta name="view-transition" content="same-origin" />
       </Head>
       <Header title="components" active="/components" />
 
diff --git a/www/routes/docs/[...slug].tsx b/www/routes/docs/[...slug].tsx
index c612cc3dc2e..10ebf029a25 100644
--- a/www/routes/docs/[...slug].tsx
+++ b/www/routes/docs/[...slug].tsx
@@ -1,52 +1,135 @@
-import { asset, Head } from "$fresh/runtime.ts";
 import { Handlers, PageProps } from "$fresh/server.ts";
-import { frontMatter, gfm } from "../../utils/markdown.ts";
-
-import Header from "../../components/Header.tsx";
-import DocsTitle from "../../components/DocsTitle.tsx";
+import { asset, Head } from "$fresh/runtime.ts";
 import DocsSidebar from "../../components/DocsSidebar.tsx";
+import DocsTitle from "../../components/DocsTitle.tsx";
 import Footer from "../../components/Footer.tsx";
+import Header from "../../components/Header.tsx";
 import {
-  SLUGS,
+  getFirstPageUrl,
+  LATEST_VERSION,
   TABLE_OF_CONTENTS,
   TableOfContentsEntry,
 } from "../../data/docs.ts";
+import { frontMatter, gfm } from "../../utils/markdown.ts";
+import toc from "../../../docs/toc.ts";
 
 interface Data {
   page: Page;
 }
 
+interface NavEntry {
+  title: string;
+  category?: string;
+  href: string;
+}
+
+export interface VersionLink {
+  label: string;
+  href: string;
+  value: string;
+}
+
 interface Page extends TableOfContentsEntry {
   markdown: string;
   data: Record<string, unknown>;
+  versionLinks: VersionLink[];
+  version: string;
+  prevNav?: NavEntry;
+  nextNav?: NavEntry;
 }
 
+const pattern = new URLPattern({ pathname: "/:version/:page*" });
+
 export const handler: Handlers<Data> = {
   async GET(_req, ctx) {
     const slug = ctx.params.slug;
-    if (slug === "") {
+
+    // Check if the slug is the index page of a version tag
+    if (TABLE_OF_CONTENTS[slug]) {
+      const href = getFirstPageUrl(slug);
       return new Response("", {
         status: 307,
-        headers: { location: "/docs/introduction" },
+        headers: { location: href },
       });
     }
-    if (slug === "concepts/architechture") {
-      return new Response("", {
-        status: 307,
-        headers: { location: "/docs/concepts/architecture" },
-      });
+
+    const match = pattern.exec("https://localhost/" + slug);
+    if (!match) {
+      return ctx.renderNotFound();
+    }
+
+    let { version, page = "" } = match.pathname.groups;
+    if (!version) {
+      return ctx.renderNotFound();
+    }
+
+    // Latest version doesn't show up in the url
+    if (!TABLE_OF_CONTENTS[version]) {
+      page = version + (page ? "/" + page : "");
+      version = LATEST_VERSION;
     }
 
-    const entry = TABLE_OF_CONTENTS[slug];
+    // Check if the page exists
+    const currentToc = TABLE_OF_CONTENTS[version];
+    const entry = currentToc[page];
     if (!entry) {
       return ctx.renderNotFound();
     }
+
+    // Build up the link map for the version selector.
+    const versionLinks: VersionLink[] = [];
+    for (const version in TABLE_OF_CONTENTS) {
+      const label = toc[version].label;
+      const maybeEntry = TABLE_OF_CONTENTS[version][page];
+
+      // Check if the same page is available for this version and
+      // link to that. Pick the index page for that version if an
+      // exact match doesn't exist.
+      versionLinks.push({
+        label,
+        value: version,
+        href: maybeEntry ? maybeEntry.href : getFirstPageUrl(version),
+      });
+    }
+
+    // Add previous and next page entry if available
+
+    const entryKeys = Object.keys(currentToc);
+    const idx = entryKeys.findIndex((name) => name === entry.slug);
+
+    let nextNav: NavEntry | undefined;
+    let prevNav: NavEntry | undefined;
+    const prevEntry = currentToc[entryKeys[idx - 1]];
+    const nextEntry = currentToc[entryKeys[idx + 1]];
+
+    if (prevEntry) {
+      let category = prevEntry.category;
+      category = category ? currentToc[category].title : "";
+      prevNav = { title: prevEntry.title, category, href: prevEntry.href };
+    }
+
+    if (nextEntry) {
+      let category = nextEntry.category;
+      category = category ? currentToc[category].title : "";
+      nextNav = { title: nextEntry.title, category, href: nextEntry.href };
+    }
+
+    // Parse markdown front matter
     const url = new URL(`../../../${entry.file}`, import.meta.url);
     const fileContent = await Deno.readTextFile(url);
     const { body, attrs } = frontMatter<Record<string, unknown>>(fileContent);
-    const page = { ...entry, markdown: body, data: attrs ?? {} };
-    const resp = ctx.render({ page });
-    return resp;
+
+    return ctx.render({
+      page: {
+        ...entry,
+        markdown: body,
+        data: attrs ?? {},
+        versionLinks,
+        version,
+        prevNav,
+        nextNav,
+      },
+    });
   },
 };
 
@@ -70,6 +153,7 @@ export default function DocsPage(props: PageProps<Data>) {
         <meta property="og:type" content="website" />
         <meta property="og:url" content={props.url.href} />
         <meta property="og:image" content={ogImageUrl} />
+        <meta name="view-transition" content="same-origin" />
       </Head>
       <div class="flex flex-col min-h-screen">
         <Header title="docs" active="/docs" />
@@ -83,8 +167,8 @@ export default function DocsPage(props: PageProps<Data>) {
 function Main(props: { path: string; page: Page }) {
   return (
     <div class="flex-1">
-      <MobileSidebar path={props.path} />
-      <div class="flex mx-auto max-w-screen-lg px-4 py-5 justify-end">
+      <MobileSidebar path={props.path} page={props.page} />
+      <div class="flex mx-auto max-w-screen-xl px-4 md:px-0 py-5 md:py-0 justify-end">
         <label
           for="docs_sidebar"
           class="px-4 py-3 md:hidden flex items-center hover:bg-gray-100 rounded gap-2"
@@ -103,20 +187,18 @@ function Main(props: { path: string; page: Page }) {
             >
             </path>
           </svg>
-          <div>
-            Menu
-          </div>
+          <div>Menu</div>
         </label>
       </div>
-      <div class="mx-auto max-w-screen-lg px-4 flex gap-6">
-        <DesktopSidebar path={props.path} />
+      <div class="mx-auto max-w-screen-xl px-4 flex gap-6 md:gap-8">
+        <DesktopSidebar path={props.path} page={props.page} />
         <Content page={props.page} />
       </div>
     </div>
   );
 }
 
-function MobileSidebar(props: { path: string }) {
+function MobileSidebar(props: { path: string; page: Page }) {
   return (
     <>
       <input
@@ -136,7 +218,12 @@ function MobileSidebar(props: { path: string }) {
             <DocsTitle title="docs" />
           </div>
           <nav class="pt-6 pb-16 px-4 overflow-x-auto">
-            <DocsSidebar mobile path={props.path} />
+            <DocsSidebar
+              mobile
+              path={props.path}
+              versionLinks={props.page.versionLinks}
+              selectedVersion={props.page.version}
+            />
           </nav>
         </div>
       </div>
@@ -144,10 +231,14 @@ function MobileSidebar(props: { path: string }) {
   );
 }
 
-function DesktopSidebar(props: { path: string }) {
+function DesktopSidebar(props: { path: string; page: Page }) {
   return (
-    <nav class="w-[16rem] flex-shrink-0 hidden md:block py-8 pr-4 border(r-2 gray-100)">
-      <DocsSidebar path={props.path} />
+    <nav class="w-[18rem] flex-shrink-0 hidden md:block py-7 pr-8">
+      <DocsSidebar
+        path={props.path}
+        versionLinks={props.page.versionLinks}
+        selectedVersion={props.page.version}
+      />
     </nav>
   );
 }
@@ -155,44 +246,47 @@ function DesktopSidebar(props: { path: string }) {
 function Content(props: { page: Page }) {
   const html = gfm.render(props.page.markdown);
   return (
-    <main class="py-6 overflow-hidden">
-      <h1 class="text(4xl gray-900) tracking-tight font-extrabold mt-6">
+    <main class="py-6 overflow-hidden md:mr-4 lg:mr-32">
+      <h1 class="text(4xl gray-900) tracking-tight font-extrabold mt-6 md:mt-0">
         {props.page.title}
       </h1>
       <div
         class="mt-6 markdown-body"
         dangerouslySetInnerHTML={{ __html: html }}
       />
-      <ForwardBackButtons slug={props.page.slug} />
+      <ForwardBackButtons
+        slug={props.page.slug}
+        version={props.page.version}
+        prev={props.page.prevNav}
+        next={props.page.nextNav}
+      />
     </main>
   );
 }
 
 const button = "p-2 bg-gray-100 w-full border(1 gray-200) grid";
 
-function ForwardBackButtons(props: { slug: string }) {
-  const currentIndex = SLUGS.findIndex((slug) => slug === props.slug);
-  const previousSlug = SLUGS[currentIndex - 1];
-  const nextSlug = SLUGS[currentIndex + 1];
-  const previous = TABLE_OF_CONTENTS[previousSlug];
-  const next = TABLE_OF_CONTENTS[nextSlug];
-
+function ForwardBackButtons(props: {
+  slug: string;
+  version: string;
+  prev?: NavEntry;
+  next?: NavEntry;
+}) {
+  const { prev, next } = props;
   const upper = "text(sm gray-600)";
   const category = "font-normal";
   const lower = "text-gray-900 font-medium";
 
   return (
     <div class="mt-8 flex flex(col md:row) gap-4">
-      {previous && (
-        <a href={previous.href} class={`${button} text-left`}>
+      {prev && (
+        <a href={prev.href} class={`${button} text-left`}>
           <span class={upper}>{"←"} Previous</span>
           <span class={lower}>
             <span class={category}>
-              {previous.category
-                ? `${TABLE_OF_CONTENTS[previous.category].title}: `
-                : ""}
+              {prev.category ? `${prev.category}: ` : ""}
             </span>
-            {previous.title}
+            {prev.title}
           </span>
         </a>
       )}
@@ -201,9 +295,7 @@ function ForwardBackButtons(props: { slug: string }) {
           <span class={upper}>Next {"→"}</span>
           <span class={lower}>
             <span class={category}>
-              {next.category
-                ? `${TABLE_OF_CONTENTS[next.category].title}: `
-                : ""}
+              {next.category ? `${next.category}: ` : ""}
             </span>
             {next.title}
           </span>
diff --git a/www/routes/docs/index.tsx b/www/routes/docs/index.tsx
new file mode 100644
index 00000000000..f957e652dc2
--- /dev/null
+++ b/www/routes/docs/index.tsx
@@ -0,0 +1,19 @@
+import { MultiHandler } from "$fresh/server.ts";
+
+export const handler: MultiHandler<void> = {
+  GET(_req, ctx) {
+    const slug = ctx.params.slug;
+
+    if (slug === "concepts/architechture") {
+      return new Response("", {
+        status: 307,
+        headers: { location: "/docs/concepts/architecture" },
+      });
+    }
+
+    return new Response("", {
+      status: 307,
+      headers: { location: "/docs/introduction" },
+    });
+  },
+};
diff --git a/www/routes/gfm.css.ts b/www/routes/gfm.css.ts
index 24818465951..e57a8641583 100644
--- a/www/routes/gfm.css.ts
+++ b/www/routes/gfm.css.ts
@@ -31,6 +31,11 @@ ol.nested li:before {
   list-style: numeric;
 }
 
+.markdown-body .highlight {
+  border: 1px solid #eaeef1;
+  border-radius: .5rem;
+}
+
 .toggle:checked + .toggled {
 	display: block;
 }
diff --git a/www/routes/index.tsx b/www/routes/index.tsx
index c84683cd318..777f5293cf6 100644
--- a/www/routes/index.tsx
+++ b/www/routes/index.tsx
@@ -11,10 +11,18 @@ import Projects from "../components/Projects.tsx";
 import projects from "../data/showcase.json" assert { type: "json" };
 import Header from "../components/Header.tsx";
 
+function isOpenGraphUA(header: string | null): boolean {
+  if (!header) {
+    return false;
+  }
+  return header.startsWith("Twitterbot") || header.startsWith("Slackbot");
+}
+
 export const handler: Handlers = {
   GET(req, ctx) {
     const accept = req.headers.get("accept");
-    if (accept && !accept.includes("text/html")) {
+    const userAgent = req.headers.get("user-agent");
+    if (!accept?.includes("text/html") && !isOpenGraphUA(userAgent)) {
       const path = `https://deno.land/x/fresh@${VERSIONS[0]}/init.ts`;
       return new Response(`Redirecting to ${path}`, {
         headers: { "Location": path },
@@ -43,6 +51,7 @@ export default function MainPage(props: PageProps) {
         <meta property="og:type" content="website" />
         <meta property="og:url" content={props.url.href} />
         <meta property="og:image" content={ogImageUrl} />
+        <meta name="view-transition" content="same-origin" />
       </Head>
 
       <div class="flex flex-col min-h-screen">
@@ -53,10 +62,10 @@ export default function MainPage(props: PageProps) {
           <Hero />
         </div>
         <div class="flex-1">
-          <Intro />
-          <GettingStarted origin={origin} />
+          <Intro origin={origin} />
           <Example />
           <Showcase />
+          <StartJourney />
         </div>
         <Footer />
       </div>
@@ -68,11 +77,11 @@ function HelloBar() {
   return (
     <a
       class="bg-green-400 text-black border(b green-500) p-3 text-center group"
-      href="https://deno.com/blog/fresh-1.1"
+      href="https://deno.com/blog/fresh-1.3"
     >
-      <b>Fresh v1.1</b> has been released with support for <b>automatic JSX</b>,
+      <b>Fresh v1.3</b> has been released with <b>async route components</b>,
       {" "}
-      <b>plugins</b>, <b>DevTools support</b>, and more!{"  "}
+      <b>plugin enhancements</b>, and more!{"  "}
       <span class="group-hover:underline">→</span>
     </a>
   );
@@ -89,11 +98,11 @@ function Hero() {
 }
 
 function Features() {
-  const item = "flex md:flex-col items-center gap-5";
-  const desc = "flex-1 md:text-center";
+  const item = "flex items-center gap-5";
+  const desc = "flex-1";
 
   return (
-    <div class="grid md:grid-cols-3 gap-6 md:gap-14">
+    <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6 md:gap-14">
       <div class={item}>
         <FeatureIcons.Globe />
         <div class={desc}>
@@ -140,148 +149,82 @@ function Features() {
   );
 }
 
-function Intro() {
+function Intro(props: { origin: string }) {
   return (
-    <section class="max-w-screen-md mx-auto my-16 px(4 sm:6 md:8) space-y-12">
-      <div class="md:flex items-center">
-        <div class="flex-1 text-center md:text-left">
-          <h2 class="py-2 text(5xl sm:5xl lg:5xl gray-900) sm:tracking-tight sm:leading-[1.1]! font-extrabold">
-            The <span class="text-green-600">next-gen</span> web framework.
-          </h2>
+    <section class="max-w-screen-xl mx-auto my-8 sm:my-16 px(4 sm:6 md:8) space-y-8 sm:space-y-16 lg:mb-32">
+      <div class="max-w-screen-xl mx-auto sm:my-8 md:my-16 sm:space-y-12 w-full">
+        <div class="md:flex items-center">
+          <div class="flex-1 text-center md:text-left">
+            <h2 class="py-2 text(5xl sm:5xl lg:6xl gray-900) sm:tracking-tight sm:leading-[1.1]! font-extrabold lg:max-w-lg mx-auto sm:mx-0">
+              The <span class="text-green-600">next-gen</span> web framework.
+            </h2>
 
-          <p class="mt-4 text-gray-600">
-            Built for speed, reliability, and simplicity.
-          </p>
-        </div>
+            <p class="mt-2 text-gray-600 text-xl">
+              Built for speed, reliability, and simplicity.
+            </p>
+            <div class="mt-8 flex flex-col justify-center md:justify-start sm:flex-row gap-4">
+              <div>
+                <a
+                  href="/docs/getting-started"
+                  class="inline-flex w-auto shrink-0 px-3 py-2 bg-white rounded border(gray-500 2) hover:bg-gray-200 active:bg-gray-300 disabled:(opacity-50 cursor-not-allowed) whitespace-nowrap"
+                >
+                  Get started
+                </a>
+              </div>
+              <div class="flex justify-center">
+                <CopyArea code={`deno run -A -r ${props.origin}`} />
+              </div>
+            </div>
+          </div>
 
-        <picture class="block mt-4 md:mt-0">
-          <img
-            src="/illustration/lemon-squash.svg"
-            class="w-80 mx-auto"
-            width={800}
-            height={678}
-            alt="deno is drinking fresh lemon squash"
-          />
-        </picture>
+          <picture class="block mt-8 md:mt-0 mx-auto w-60 md:w-96 md:mr-16 xl:mr-32">
+            <img
+              src="/illustration/lemon-squash.svg"
+              width={800}
+              height={678}
+              alt="deno is drinking fresh lemon squash"
+            />
+          </picture>
+        </div>
       </div>
-
-      <Features />
-
-      <p class="text-gray-600">
+      <p class="text-gray-600 text-xl">
         Fresh embraces the tried and true design of server side rendering and
         progressive enhancement on the client side.
       </p>
+      <Features />
     </section>
   );
 }
 
-function GettingStarted(props: { origin: string }) {
+function Example() {
   return (
-    <section class="max-w-screen-md mx-auto my-16 px(4 sm:6 md:8) space-y-4">
-      <h2 id="getting-started" class="text(3xl gray-600) font-bold">
-        <a href="#getting-started" class="hover:underline">
-          Getting Started
-        </a>
-      </h2>
-      <div class="text-gray-600 flex gap-1 mb-4 bg-gray-100 p-2 rounded">
-        <div class="text-gray-400">
-          <Icons.Info />
+    <section class="max-w-screen-xl mx-auto my-8 sm:my-16 md:my-24 px(4 sm:6 md:8) space-y-16">
+      <div class="flex gap-4 md:gap-16 flex-col md:flex-row justify-between items-center">
+        <div class="md:basis-1/2">
+          <h2 id="example" class="text(4xl gray-600) font-bold mb-4">
+            <a href="#example" class="hover:underline">
+              Interactive islands
+            </a>
+          </h2>
+          <p class="text-gray-600 mb-4">
+            Fresh optimizes the page by only shipping JavaScript for areas that
+            need it. The rest is completely static HTML rendered by the server.
+            This means the browser needs to load less code and can display pages
+            more quickly.
+          </p>
+        </div>
+        <div class="md:basis-1/2">
+          <Counter start={3} />
         </div>
-        <p>
-          <a href="https://deno.land" class="text-blue-600 hover:underline">
-            Deno CLI
-          </a>{" "}
-          version 1.25.0 or higher is required.{" "}
-          <a
-            href="https://deno.land/manual/getting_started/installation"
-            class="text-blue-600 hover:underline"
-          >
-            Install
-          </a>{" "}
-          or{" "}
-          <a
-            href="https://deno.land/manual/getting_started/installation#updating"
-            class="text-blue-600 hover:underline"
-          >
-            update
-          </a>.
-        </p>
       </div>
-      <p class="text-gray-600">
-        To bootstrap a new project:
-      </p>
-
-      <CopyArea>
-        {`deno run -A -r ${props.origin}`}
-      </CopyArea>
-
-      <p class="text-gray-600">
-        Enter the newly created project directory and run the following command
-        to start the development server:
-      </p>
-
-      <CopyArea>{`deno task start`}</CopyArea>
-
-      <p class="text-gray-600">
-        You can now open{" "}
-        <a
-          href="http://localhost:8000"
-          class="text-blue-600 hover:underline"
-        >
-          http://localhost:8000
-        </a>{" "}
-        in your browser to view the page.
-      </p>
-      <p class="text-gray-600">
-        A more in-depth{" "}
-        <a
-          href="/docs/getting-started"
-          class="text-blue-600 hover:underline"
-        >
-          <i>Getting Started</i>
-        </a>{" "}
-        guide is available in{" "}
-        <a href="/docs" class="text-blue-600 hover:underline">the docs</a>.
-      </p>
-    </section>
-  );
-}
-
-const timeFmt = new Intl.DateTimeFormat("en-US", {
-  timeStyle: "long",
-  hour12: false,
-});
-
-function Example() {
-  return (
-    <section class="max-w-screen-md mx-auto my-16 px(4 sm:6 md:8) space-y-4">
-      <h2 id="example" class="text(3xl gray-600) font-bold">
-        <a href="#example" class="hover:underline">
-          Example
-        </a>
-      </h2>
-      <p class="text-gray-600">
-        This text is being server side rendered on the fly. It was rendered at
-        {" "}
-        {timeFmt.format(new Date())}.
-      </p>
-      <p class="text-gray-600">
-        The counter below was rendered on the server with a starting value of 3,
-        and was then hydrated on the client to provide interactivity. Try out
-        the buttons!
-      </p>
-      <Counter start={3} />
-      <p class="text-gray-600">
-        Only the JS required to render that counter is sent to the client.
-      </p>
     </section>
   );
 }
 
 function Showcase() {
   return (
-    <section class="max-w-screen-md mx-auto my-16 px(4 sm:6 md:8) space-y-4">
-      <h2 id="showcase" class="text(3xl gray-600) font-bold">
+    <section class="max-w-screen-xl mx-auto space-y-16 px(4 sm:6 md:8) space-y-4">
+      <h2 id="showcase" class="text(4xl gray-600) font-bold mb-4">
         <a href="#showcase" class="hover:underline">
           Showcase
         </a>
@@ -290,7 +233,7 @@ function Showcase() {
         Below is a selection of projects that have been built with Fresh.
       </p>
       <Projects items={projects.slice(0, 3)} class="gap-8" />
-      <div class="flex gap-2 items-center justify-end text-blue-600">
+      <div class="flex gap-2 items-center justify-center sm:justify-end text-blue-600">
         <Icons.ArrowRight />
         <a href="./showcase" class="hover:underline focus:underline">
           View more
@@ -299,3 +242,25 @@ function Showcase() {
     </section>
   );
 }
+
+function StartJourney() {
+  return (
+    <section class="max-w-screen-xl mx-auto py-16 px(4 sm:6 md:8) space-y-4 md:mb-16">
+      <h2 class="text(4xl gray-600) md:text-5xl font mb-4 mt-0">
+        Start your Fresh journey
+      </h2>
+      <div class="flex flex-col md:flex-row justify-start items-center gap-4">
+        <p class="text(xl gray-600)">
+          Jump right in and build your website with fresh. Learn everything you
+          need to know in seconds.
+        </p>
+        <a
+          href="/docs/getting-started"
+          class="inline-block px-3 py-2 bg-white rounded border(gray-500 2) hover:bg-gray-200 active:bg-gray-300 disabled:(opacity-50 cursor-not-allowed) whitespace-nowrap"
+        >
+          Get started
+        </a>
+      </div>
+    </section>
+  );
+}
diff --git a/www/routes/raw.ts b/www/routes/raw.ts
index 8389d5f51b2..4121c3fa028 100644
--- a/www/routes/raw.ts
+++ b/www/routes/raw.ts
@@ -1,26 +1,37 @@
 import { RouteConfig } from "$fresh/server.ts";
 import { Handlers } from "$fresh/server.ts";
-import { parse } from "$std/semver/mod.ts";
+import { format, parse } from "$std/semver/mod.ts";
 import VERSIONS from "../../versions.json" assert { type: "json" };
+import { extname } from "$std/path/mod.ts";
 
 const BASE_URL = "https://raw.githubusercontent.com/denoland/fresh/";
 
+const contentTypes = new Map([
+  [".html", "text/plain"],
+  [".ts", "application/typescript"],
+  [".js", "application/javascript"],
+  [".tsx", "text/tsx"],
+  [".jsx", "text/jsx"],
+  [".json", "application/json"],
+  [".wasm", "application/wasm"],
+]);
+
 export const handler: Handlers = {
   async GET(req, ctx) {
     const accept = req.headers.get("Accept");
     const isHTML = accept?.includes("text/html");
     const { version, path } = ctx.params;
 
-    const semver = parse(version, { includePrerelease: true });
+    const semver = parse(version);
     if (!semver) {
       return new Response("Invalid version", { status: 400 });
     }
 
-    if (!VERSIONS.includes(semver.version)) {
+    if (!VERSIONS.includes(format(semver))) {
       return new Response("Version not found", { status: 404 });
     }
 
-    const url = `${BASE_URL}${semver.version}/${path}`;
+    const url = `${BASE_URL}${format(semver)}/${path}`;
     const r = await fetch(url, { redirect: "manual" });
     const response = new Response(r.body, r);
     response.headers.delete("content-encoding");
@@ -37,23 +48,11 @@ export const handler: Handlers = {
       return response;
     }
 
-    if (isHTML) {
-      response.headers.set("Content-Type", "text/plain");
-    } else if (path.endsWith(".ts")) {
-      response.headers.set("Content-Type", "application/typescript");
-    } else if (path.endsWith(".js")) {
-      response.headers.set("Content-Type", "application/javascript");
-    } else if (path.endsWith(".tsx")) {
-      response.headers.set("Content-Type", "text/tsx");
-    } else if (path.endsWith(".jsx")) {
-      response.headers.set("Content-Type", "text/jsx");
-    } else if (path.endsWith(".json")) {
-      response.headers.set("Content-Type", "application/json");
-    } else if (path.endsWith(".wasm")) {
-      response.headers.set("Content-Type", "application/wasm");
-    } else {
-      response.headers.set("Content-Type", "text/plain");
-    }
+    const value = isHTML
+      ? "text/plain"
+      : contentTypes.get(extname(path)) ?? "text/plain";
+    response.headers.set("Content-Type", value);
+
     return response;
   },
 };
diff --git a/www/routes/showcase.tsx b/www/routes/showcase.tsx
index 27e54e31e27..ef55d625d76 100644
--- a/www/routes/showcase.tsx
+++ b/www/routes/showcase.tsx
@@ -20,6 +20,7 @@ export default function ShowcasePage(props: PageProps) {
         <meta property="og:type" content="website" />
         <meta property="og:url" content={props.url.href} />
         <meta property="og:image" content={ogImageUrl} />
+        <meta name="view-transition" content="same-origin" />
       </Head>
       <Header title="showcase" active="/showcase" />
 
diff --git a/www/routes/update.tsx b/www/routes/update.tsx
index eb0900de53c..0a7c15e9812 100644
--- a/www/routes/update.tsx
+++ b/www/routes/update.tsx
@@ -1,14 +1,5 @@
-import { asset, Head } from "$fresh/runtime.ts";
 import { Handlers, PageProps } from "$fresh/server.ts";
-import Counter from "../islands/Counter.tsx";
-import LemonDrop from "../islands/LemonDrop.tsx";
-import Footer from "../components/Footer.tsx";
 import VERSIONS from "../../versions.json" assert { type: "json" };
-import * as FeatureIcons from "../components/FeatureIcons.tsx";
-import CopyArea from "../islands/CopyArea.tsx";
-import * as Icons from "../components/Icons.tsx";
-import Projects from "../components/Projects.tsx";
-import projects from "../data/showcase.json" assert { type: "json" };
 
 export const handler: Handlers = {
   GET(req) {
@@ -23,266 +14,3 @@ export const handler: Handlers = {
     });
   },
 };
-
-const TITLE = "fresh - The next-gen web framework.";
-const DESCRIPTION =
-  "Just in time edge rendering, island based interactivity, and no configuration TypeScript support using Deno.";
-
-export default function MainPage(props: PageProps) {
-  const ogImageUrl = new URL(asset("/home-og.png"), props.url).href;
-  const origin = `${props.url.protocol}//${props.url.host}`;
-
-  return (
-    <>
-      <Head>
-        <title>{TITLE}</title>
-        <meta name="description" content={DESCRIPTION} />
-        <meta property="og:title" content={TITLE} />
-        <meta property="og:description" content={DESCRIPTION} />
-        <meta property="og:type" content="website" />
-        <meta property="og:url" content={props.url.href} />
-        <meta property="og:image" content={ogImageUrl} />
-      </Head>
-      <div class="flex flex-col min-h-screen">
-        <Hero />
-        <div class="flex-1">
-          <Intro />
-          <GettingStarted origin={origin} />
-          <Example />
-          <Showcase />
-        </div>
-        <Footer />
-      </div>
-    </>
-  );
-}
-
-function Hero() {
-  return (
-    <>
-      <div class="flex justify-end items-center bg-green-300">
-        <a
-          href="/docs"
-          class="border(1 black) inline-flex items-center h-10 px-4 m-4 text-black bg-transparent rounded hover:bg-white"
-        >
-          Documentation
-        </a>
-      </div>
-      <section class="w-full flex justify-center items-center flex-col bg-green-300">
-        <LemonDrop />
-      </section>
-    </>
-  );
-}
-
-function Features() {
-  const item = "flex md:flex-col items-center gap-5";
-  const desc = "flex-1 md:text-center";
-
-  return (
-    <div class="grid md:grid-cols-3 gap-6 md:gap-14">
-      <div class={item}>
-        <FeatureIcons.Globe />
-        <div class={desc}>
-          <b>Just-in-time rendering</b> on the edge.
-        </div>
-      </div>
-
-      <div class={item}>
-        <FeatureIcons.Island />
-        <div class={desc}>
-          <b>Island based client hydration</b> for maximum interactivity.
-        </div>
-      </div>
-
-      <div class={item}>
-        <FeatureIcons.LightWeight />
-        <div class={desc}>
-          <b>Zero runtime overhead</b>: no JS is shipped to the client by
-          default.
-        </div>
-      </div>
-
-      <div class={item}>
-        <FeatureIcons.NoBuild />
-        <div class={desc}>
-          <b>No build step</b>.
-        </div>
-      </div>
-
-      <div class={item}>
-        <FeatureIcons.Gabage />
-        <div class={desc}>
-          <b>No configuration</b> necessary.
-        </div>
-      </div>
-
-      <div class={item}>
-        <FeatureIcons.TypeScript />
-        <div class={desc}>
-          <b>TypeScript support</b> out of the box.
-        </div>
-      </div>
-    </div>
-  );
-}
-
-function Intro() {
-  return (
-    <section class="max-w-screen-md mx-auto my-16 px(4 sm:6 md:8) space-y-12">
-      <div class="md:flex items-center">
-        <div class="flex-1 text-center md:text-left">
-          <h2 class="py-2 text(5xl sm:5xl lg:5xl gray-900) sm:tracking-tight sm:leading-[1.1]! font-extrabold">
-            The <span class="text-green-500">next-gen</span> web framework.
-          </h2>
-
-          <p class="mt-4 text-gray-600">
-            Built for speed, reliability, and simplicity.
-          </p>
-        </div>
-
-        <picture class="block mt-4 md:mt-0">
-          <img
-            src="/illustration/lemon-squash.svg"
-            class="w-80 mx-auto"
-            width={800}
-            height={678}
-            alt="deno is drinking fresh lemon squash"
-          />
-        </picture>
-      </div>
-
-      <Features />
-
-      <p class="text-gray-600">
-        Fresh embraces the tried and true design of server side rendering and
-        progressive enhancement on the client side.
-      </p>
-    </section>
-  );
-}
-
-function GettingStarted(props: { origin: string }) {
-  return (
-    <section class="max-w-screen-md mx-auto my-16 px(4 sm:6 md:8) space-y-4">
-      <h2 id="getting-started" class="text(3xl gray-600) font-bold">
-        <a href="#getting-started" class="hover:underline">
-          Getting Started
-        </a>
-      </h2>
-      <div class="text-gray-600 flex gap-1 mb-4 bg-gray-100 p-2 rounded">
-        <div class="text-gray-400">
-          <Icons.Info />
-        </div>
-        <p>
-          <a href="https://deno.land" class="text-blue-600 hover:underline">
-            Deno CLI
-          </a>{" "}
-          version 1.25.0 or higher is required.{" "}
-          <a
-            href="https://deno.land/manual/getting_started/installation"
-            class="text-blue-600 hover:underline"
-          >
-            Install
-          </a>{" "}
-          or{" "}
-          <a
-            href="https://deno.land/manual/getting_started/installation#updating"
-            class="text-blue-600 hover:underline"
-          >
-            update
-          </a>.
-        </p>
-      </div>
-      <p class="text-gray-600">
-        To bootstrap a new project:
-      </p>
-
-      <CopyArea>
-        {`deno run -A -r ${props.origin}`}
-      </CopyArea>
-
-      <p class="text-gray-600">
-        Enter the newly created project directory and run the following command
-        to start the development server:
-      </p>
-
-      <CopyArea>{`deno task start`}</CopyArea>
-
-      <p class="text-gray-600">
-        You can now open{" "}
-        <a
-          href="http://localhost:8000"
-          class="text-blue-600 hover:underline"
-        >
-          http://localhost:8000
-        </a>{" "}
-        in your browser to view the page.
-      </p>
-      <p class="text-gray-600">
-        A more in-depth{" "}
-        <a
-          href="/docs/getting-started"
-          class="text-blue-600 hover:underline"
-        >
-          <i>Getting Started</i>
-        </a>{" "}
-        guide is available in{" "}
-        <a href="/docs" class="text-blue-600 hover:underline">the docs</a>.
-      </p>
-    </section>
-  );
-}
-
-const timeFmt = new Intl.DateTimeFormat("en-US", {
-  timeStyle: "long",
-  hour12: false,
-});
-
-function Example() {
-  return (
-    <section class="max-w-screen-md mx-auto my-16 px(4 sm:6 md:8) space-y-4">
-      <h2 id="example" class="text(3xl gray-600) font-bold">
-        <a href="#example" class="hover:underline">
-          Example
-        </a>
-      </h2>
-      <p class="text-gray-600">
-        This text is being server side rendered on the fly. It was rendered at
-        {" "}
-        {timeFmt.format(new Date())}.
-      </p>
-      <p class="text-gray-600">
-        The counter below was rendered on the server with a starting value of 3,
-        and was then hydrated on the client to provide interactivity. Try out
-        the buttons!
-      </p>
-      <Counter start={3} />
-      <p class="text-gray-600">
-        Only the JS required to render that counter is sent to the client.
-      </p>
-    </section>
-  );
-}
-
-function Showcase() {
-  return (
-    <section class="max-w-screen-md mx-auto my-16 px(4 sm:6 md:8) space-y-4">
-      <h2 id="showcase" class="text(3xl gray-600) font-bold">
-        <a href="#showcase" class="hover:underline">
-          Showcase
-        </a>
-      </h2>
-      <p class="text-gray-600">
-        Below is a selection of projects that have been built with Fresh.
-      </p>
-      <Projects items={projects.slice(0, 3)} class="gap-8" />
-      <div class="flex gap-2 items-center justify-end text-blue-600">
-        <Icons.ArrowRight />
-        <a href="./showcase" class="hover:underline focus:underline">
-          View more
-        </a>
-      </div>
-    </section>
-  );
-}
diff --git a/www/static/docsearch.css b/www/static/docsearch.css
index 42036a38bb9..a96592030e3 100644
--- a/www/static/docsearch.css
+++ b/www/static/docsearch.css
@@ -11,6 +11,7 @@
 .DocSearch-Button{
   margin:0;
   width: 100%;
+  border-radius: 0.5rem;
 }
 .DocSearch-Button-Placeholder {
   display: initial;
diff --git a/www/static/showcase/battleship1x.jpg b/www/static/showcase/battleship1x.jpg
new file mode 100644
index 00000000000..baef3bf1cea
Binary files /dev/null and b/www/static/showcase/battleship1x.jpg differ
diff --git a/www/static/showcase/battleship2x.jpg b/www/static/showcase/battleship2x.jpg
new file mode 100644
index 00000000000..a0d55ec60cc
Binary files /dev/null and b/www/static/showcase/battleship2x.jpg differ
diff --git a/www/static/showcase/deno-place1x.jpg b/www/static/showcase/deno-place1x.jpg
new file mode 100644
index 00000000000..7fe05851d59
Binary files /dev/null and b/www/static/showcase/deno-place1x.jpg differ
diff --git a/www/static/showcase/deno-place2x.jpg b/www/static/showcase/deno-place2x.jpg
new file mode 100644
index 00000000000..8ef954e9605
Binary files /dev/null and b/www/static/showcase/deno-place2x.jpg differ
diff --git a/www/static/showcase/kanji-academy1x.jpg b/www/static/showcase/kanji-academy1x.jpg
new file mode 100644
index 00000000000..48a60556f13
Binary files /dev/null and b/www/static/showcase/kanji-academy1x.jpg differ
diff --git a/www/static/showcase/kanji-academy2x.jpg b/www/static/showcase/kanji-academy2x.jpg
new file mode 100644
index 00000000000..0f105b8f4ba
Binary files /dev/null and b/www/static/showcase/kanji-academy2x.jpg differ
diff --git a/www/static/showcase/uspb1x.jpg b/www/static/showcase/uspb1x.jpg
new file mode 100644
index 00000000000..1fc87e3c1ee
Binary files /dev/null and b/www/static/showcase/uspb1x.jpg differ
diff --git a/www/static/showcase/uspb2x.jpg b/www/static/showcase/uspb2x.jpg
new file mode 100644
index 00000000000..1da29d76849
Binary files /dev/null and b/www/static/showcase/uspb2x.jpg differ
diff --git a/www/twind.config.ts b/www/twind.config.ts
index 1cb89063e82..bb4387e2c93 100644
--- a/www/twind.config.ts
+++ b/www/twind.config.ts
@@ -14,4 +14,39 @@ export default {
       transparent: "transparent",
     },
   },
+  plugins: {
+    // Basic workaround for old twind version not supporting
+    // the `basis-*` keyword
+    basis: (parts) => {
+      let value;
+      const arr = parts[0].split("/");
+      if (arr.length === 2) {
+        value = `${(+arr[0] / +arr[1]) * 100}%`;
+      } else if (parts.length === 1) {
+        value = parts[0];
+      }
+      return {
+        "flex-basis": value,
+      };
+    },
+    "rounded-full": () => {
+      return {
+        "border-radius": "9999px",
+      };
+    },
+    "form-select-bg": () => {
+      return {
+        "background-image":
+          `url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20' fill='none'%3e%3cpath d='M7 7l3-3 3 3m0 6l-3 3-3-3' stroke='%239fa6b2' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round'/%3e%3c/svg%3e")`,
+        "background-position": "right 0.5rem center",
+        "background-size": "1.5em 1.5em",
+        "background-repeat": "no-repeat",
+      };
+    },
+    "grow": () => {
+      return {
+        "flex-grow": "1",
+      };
+    },
+  },
 } as Options;
diff --git a/www/utils/markdown.ts b/www/utils/markdown.ts
index 26fc1b27b9f..05b95b2dbdc 100644
--- a/www/utils/markdown.ts
+++ b/www/utils/markdown.ts
@@ -1,4 +1,4 @@
-export * as gfm from "https://deno.land/x/gfm@0.2.1/mod.ts";
+export * as gfm from "https://deno.land/x/gfm@0.2.5/mod.ts";
 import "https://esm.sh/prismjs@1.29.0/components/prism-jsx.js?no-check";
 import "https://esm.sh/prismjs@1.29.0/components/prism-typescript.js?no-check";
 import "https://esm.sh/prismjs@1.29.0/components/prism-tsx.js?no-check";
diff --git a/www/utils/screenshot.ts b/www/utils/screenshot.ts
index d8b06d68a23..cd181fd4c9d 100644
--- a/www/utils/screenshot.ts
+++ b/www/utils/screenshot.ts
@@ -1,6 +1,6 @@
 import puppeteer from "https://deno.land/x/puppeteer@16.2.0/mod.ts";
 import { Image } from "https://deno.land/x/imagescript@1.2.15/mod.ts";
-import { join } from "https://deno.land/std@0.190.0/path/mod.ts";
+import { join } from "https://deno.land/std@0.193.0/path/mod.ts";
 
 const url = Deno.args[0];
 const id = Deno.args[1];
