diff --git a/LICENSE b/LICENSE
index 3cd5b72c..cc4afa44 100644
--- a/LICENSE
+++ b/LICENSE
@@ -1,6 +1,6 @@
 MIT License
 
-Copyright (c) 2018-2021 Bartłomiej Iwańczuk and Steven Guerrero
+Copyright (c) 2018-2022 Bartłomiej Iwańczuk and Steven Guerrero
 
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
diff --git a/README.md b/README.md
index 8633507f..372e8d96 100644
--- a/README.md
+++ b/README.md
@@ -3,7 +3,7 @@
 ![Build Status](https://img.shields.io/github/workflow/status/denodrivers/postgres/ci?label=Build&logo=github&style=flat-square)
 [![Discord server](https://img.shields.io/discord/768918486575480863?color=blue&label=Ask%20for%20help%20here&logo=discord&style=flat-square)](https://discord.gg/HEdTCvZUSf)
 [![Manual](https://img.shields.io/github/v/release/denodrivers/postgres?color=orange&label=Manual&logo=deno&style=flat-square)](https://deno-postgres.com)
-[![Documentation](https://img.shields.io/github/v/release/denodrivers/postgres?color=yellow&label=Documentation&logo=deno&style=flat-square)](https://doc.deno.land/https/deno.land/x/postgres@v0.14.2/mod.ts)
+[![Documentation](https://img.shields.io/github/v/release/denodrivers/postgres?color=yellow&label=Documentation&logo=deno&style=flat-square)](https://doc.deno.land/https/deno.land/x/postgres@v0.14.3/mod.ts)
 [![License](https://img.shields.io/github/license/denodrivers/postgres?color=yellowgreen&label=License&style=flat-square)](LICENSE)
 
 A lightweight PostgreSQL driver for Deno focused on user experience
@@ -133,7 +133,7 @@ filtering, database inspection and test code lens can be achieved by setting up
 a local testing environment, as shown in the following steps:
 
 1. Start the development databases using the Docker service with the command\
-   `docker-compose up postgres_classic postgres_scram`\
+   `docker-compose up postgres_clear postgres_md5 postgres_scram`\
    Though using the detach (`-d`) option is recommended, this will make the
    databases run in the background unless you use docker itself to stop them.
    You can find more info about this
@@ -187,5 +187,5 @@ preserved their individual licenses and copyrights.
 
 Everything is licensed under the MIT License.
 
-All additional work is copyright 2018 - 2021 — Bartłomiej Iwańczuk and Steven
+All additional work is copyright 2018 - 2022 — Bartłomiej Iwańczuk and Steven
 Guerrero — All rights reserved.
diff --git a/connection/auth.ts b/connection/auth.ts
index 52a681c9..5a67abe6 100644
--- a/connection/auth.ts
+++ b/connection/auth.ts
@@ -1,9 +1,9 @@
-import { createHash } from "../deps.ts";
+import { Md5 } from "../deps.ts";
 
 const encoder = new TextEncoder();
 
 function md5(bytes: Uint8Array): string {
-  return createHash("md5").update(bytes).toString("hex");
+  return new Md5().update(bytes).toString("hex");
 }
 
 // AuthenticationMD5Password
diff --git a/connection/connection.ts b/connection/connection.ts
index 444e9e75..a5de4dba 100644
--- a/connection/connection.ts
+++ b/connection/connection.ts
@@ -150,7 +150,7 @@ export class Connection {
       // This will be removed once we move to async handling of messages by the frontend
       // However, unnotified disconnection will remain a possibility, that will likely
       // be handled in another place
-      throw new ConnectionError("The session was terminated by the database");
+      throw new ConnectionError("The session was terminated unexpectedly");
     }
     const length = readUInt32BE(this.#message_header, 1) - 4;
     const body = new Uint8Array(length);
@@ -877,9 +877,7 @@ export class Connection {
         return await this.#preparedQuery(query);
       }
     } catch (e) {
-      if (
-        e instanceof ConnectionError
-      ) {
+      if (e instanceof ConnectionError) {
         await this.end();
       }
       throw e;
@@ -894,10 +892,10 @@ export class Connection {
       await this.#bufWriter.write(terminationMessage);
       try {
         await this.#bufWriter.flush();
-        this.#closeConnection();
       } catch (_e) {
-        // This steps can fail if the underlying connection had been closed ungracefully
+        // This steps can fail if the underlying connection was closed ungracefully
       } finally {
+        this.#closeConnection();
         this.#onDisconnection();
       }
     }
diff --git a/connection/scram.ts b/connection/scram.ts
index dbafbb78..33130936 100644
--- a/connection/scram.ts
+++ b/connection/scram.ts
@@ -1,12 +1,31 @@
-import { base64, HmacSha256 } from "../deps.ts";
+import { base64 } from "../deps.ts";
 
-function assert(cond: unknown): asserts cond {
-  if (!cond) {
-    throw new Error("assertion failed");
-  }
+/** Number of random bytes used to generate a nonce */
+const defaultNonceSize = 16;
+const text_encoder = new TextEncoder();
+
+enum AuthenticationState {
+  Init,
+  ClientChallenge,
+  ServerChallenge,
+  ClientResponse,
+  ServerResponse,
+  Failed,
+}
+
+/**
+ * Collection of SCRAM authentication keys derived from a plaintext password
+ * in HMAC-derived binary format
+ */
+interface KeySignatures {
+  client: Uint8Array;
+  server: Uint8Array;
+  stored: Uint8Array;
 }
 
-/** Reason of authentication failure. */
+/**
+ * Reason of authentication failure
+ */
 export enum Reason {
   BadMessage = "server sent an ill-formed message",
   BadServerNonce = "server sent an invalid nonce",
@@ -16,18 +35,126 @@ export enum Reason {
   Rejected = "rejected by server",
 }
 
-/** SCRAM authentication state. */
-enum State {
-  Init,
-  ClientChallenge,
-  ServerChallenge,
-  ClientResponse,
-  ServerResponse,
-  Failed,
+function assert(cond: unknown): asserts cond {
+  if (!cond) {
+    throw new Error("Scram protocol assertion failed");
+  }
 }
 
-/** Number of random bytes used to generate a nonce. */
-const defaultNonceSize = 16;
+// TODO
+// Handle mapping and maybe unicode normalization.
+// Add tests for invalid string values
+/**
+ * Normalizes string per SASLprep.
+ * @see {@link https://tools.ietf.org/html/rfc3454}
+ * @see {@link https://tools.ietf.org/html/rfc4013}
+ */
+function assertValidScramString(str: string) {
+  const unsafe = /[^\x21-\x7e]/;
+  if (unsafe.test(str)) {
+    throw new Error(
+      "scram username/password is currently limited to safe ascii characters",
+    );
+  }
+}
+
+async function computeScramSignature(
+  message: string,
+  raw_key: Uint8Array,
+): Promise<Uint8Array> {
+  const key = await crypto.subtle.importKey(
+    "raw",
+    raw_key,
+    { name: "HMAC", hash: "SHA-256" },
+    false,
+    ["sign"],
+  );
+
+  return new Uint8Array(
+    await crypto.subtle.sign(
+      { name: "HMAC", hash: "SHA-256" },
+      key,
+      text_encoder.encode(message),
+    ),
+  );
+}
+
+function computeScramProof(signature: Uint8Array, key: Uint8Array): Uint8Array {
+  const digest = new Uint8Array(signature.length);
+  for (let i = 0; i < digest.length; i++) {
+    digest[i] = signature[i] ^ key[i];
+  }
+  return digest;
+}
+
+/**
+ * Derives authentication key signatures from a plaintext password
+ */
+async function deriveKeySignatures(
+  password: string,
+  salt: Uint8Array,
+  iterations: number,
+): Promise<KeySignatures> {
+  const pbkdf2_password = await crypto.subtle.importKey(
+    "raw",
+    text_encoder.encode(password),
+    "PBKDF2",
+    false,
+    ["deriveBits", "deriveKey"],
+  );
+  const key = await crypto.subtle.deriveKey(
+    {
+      hash: "SHA-256",
+      iterations,
+      name: "PBKDF2",
+      salt,
+    },
+    pbkdf2_password,
+    { name: "HMAC", hash: "SHA-256" },
+    false,
+    ["sign"],
+  );
+
+  const client = new Uint8Array(
+    await crypto.subtle.sign("HMAC", key, text_encoder.encode("Client Key")),
+  );
+  const server = new Uint8Array(
+    await crypto.subtle.sign("HMAC", key, text_encoder.encode("Server Key")),
+  );
+  const stored = new Uint8Array(await crypto.subtle.digest("SHA-256", client));
+
+  return { client, server, stored };
+}
+
+/** Escapes "=" and "," in a string. */
+function escape(str: string): string {
+  return str
+    .replace(/=/g, "=3D")
+    .replace(/,/g, "=2C");
+}
+
+function generateRandomNonce(size: number): string {
+  return base64.encode(crypto.getRandomValues(new Uint8Array(size)));
+}
+
+function parseScramAttributes(message: string): Record<string, string> {
+  const attrs: Record<string, string> = {};
+
+  for (const entry of message.split(",")) {
+    const pos = entry.indexOf("=");
+    if (pos < 1) {
+      throw new Error(Reason.BadMessage);
+    }
+
+    // TODO
+    // Replace with String.prototype.substring
+    const key = entry.substr(0, pos);
+    const value = entry.substr(pos + 1);
+    attrs[key] = value;
+  }
+
+  return attrs;
+}
 
 /**
  * Client composes and verifies SCRAM authentication messages, keeping track
@@ -35,56 +162,61 @@ const defaultNonceSize = 16;
  * @see {@link https://tools.ietf.org/html/rfc5802}
  */
 export class Client {
-  #authMessage: string;
-  #clientNonce: string;
-  #keys?: Keys;
+  #auth_message: string;
+  #client_nonce: string;
+  #key_signatures?: KeySignatures;
   #password: string;
-  #serverNonce?: string;
-  #state: State;
+  #server_nonce?: string;
+  #state: AuthenticationState;
   #username: string;
 
-  /** Constructor sets credentials and parameters used in an authentication. */
   constructor(username: string, password: string, nonce?: string) {
-    this.#username = username;
+    assertValidScramString(password);
+    assertValidScramString(username);
+
+    this.#auth_message = "";
+    this.#client_nonce = nonce ?? generateRandomNonce(defaultNonceSize);
     this.#password = password;
-    this.#clientNonce = nonce ?? generateNonce(defaultNonceSize);
-    this.#authMessage = "";
-    this.#state = State.Init;
+    this.#state = AuthenticationState.Init;
+    this.#username = escape(username);
   }
 
-  /** Composes client-first-message. */
+  /**
+   * Composes client-first-message
+   */
   composeChallenge(): string {
-    assert(this.#state === State.Init);
+    assert(this.#state === AuthenticationState.Init);
 
     try {
       // "n" for no channel binding, then an empty authzid option follows.
       const header = "n,,";
 
-      const username = escape(normalize(this.#username));
-      const challenge = `n=${username},r=${this.#clientNonce}`;
+      const challenge = `n=${this.#username},r=${this.#client_nonce}`;
       const message = header + challenge;
 
-      this.#authMessage += challenge;
-      this.#state = State.ClientChallenge;
+      this.#auth_message += challenge;
+      this.#state = AuthenticationState.ClientChallenge;
       return message;
     } catch (e) {
-      this.#state = State.Failed;
+      this.#state = AuthenticationState.Failed;
       throw e;
     }
   }
 
-  /** Processes server-first-message. */
+  /**
+   * Processes server-first-message
+   */
   async receiveChallenge(challenge: string) {
-    assert(this.#state === State.ClientChallenge);
+    assert(this.#state === AuthenticationState.ClientChallenge);
 
     try {
-      const attrs = parseAttributes(challenge);
+      const attrs = parseScramAttributes(challenge);
 
       const nonce = attrs.r;
-      if (!attrs.r || !attrs.r.startsWith(this.#clientNonce)) {
+      if (!attrs.r || !attrs.r.startsWith(this.#client_nonce)) {
         throw new Error(Reason.BadServerNonce);
       }
-      this.#serverNonce = nonce;
+      this.#server_nonce = nonce;
 
       let salt: Uint8Array | undefined;
       if (!attrs.s) {
@@ -101,202 +233,81 @@ export class Client {
         throw new Error(Reason.BadIterationCount);
       }
 
-      this.#keys = await deriveKeys(this.#password, salt, iterCount);
+      this.#key_signatures = await deriveKeySignatures(
+        this.#password,
+        salt,
+        iterCount,
+      );
 
-      this.#authMessage += "," + challenge;
-      this.#state = State.ServerChallenge;
+      this.#auth_message += "," + challenge;
+      this.#state = AuthenticationState.ServerChallenge;
     } catch (e) {
-      this.#state = State.Failed;
+      this.#state = AuthenticationState.Failed;
       throw e;
     }
   }
 
-  /** Composes client-final-message. */
+  /**
+   * Composes client-final-message
+   */
   async composeResponse(): Promise<string> {
-    assert(this.#state === State.ServerChallenge);
-    assert(this.#keys);
-    assert(this.#serverNonce);
+    assert(this.#state === AuthenticationState.ServerChallenge);
+    assert(this.#key_signatures);
+    assert(this.#server_nonce);
 
     try {
       // "biws" is the base-64 encoded form of the gs2-header "n,,".
-      const responseWithoutProof = `c=biws,r=${this.#serverNonce}`;
+      const responseWithoutProof = `c=biws,r=${this.#server_nonce}`;
 
-      this.#authMessage += "," + responseWithoutProof;
+      this.#auth_message += "," + responseWithoutProof;
 
       const proof = base64.encode(
-        computeProof(
-          await computeSignature(this.#authMessage, this.#keys.stored),
-          this.#keys.client,
+        computeScramProof(
+          await computeScramSignature(
+            this.#auth_message,
+            this.#key_signatures.stored,
+          ),
+          this.#key_signatures.client,
         ),
       );
       const message = `${responseWithoutProof},p=${proof}`;
 
-      this.#state = State.ClientResponse;
+      this.#state = AuthenticationState.ClientResponse;
       return message;
     } catch (e) {
-      this.#state = State.Failed;
+      this.#state = AuthenticationState.Failed;
       throw e;
     }
   }
 
-  /** Processes server-final-message. */
+  /**
+   * Processes server-final-message
+   */
   async receiveResponse(response: string) {
-    assert(this.#state === State.ClientResponse);
-    assert(this.#keys);
+    assert(this.#state === AuthenticationState.ClientResponse);
+    assert(this.#key_signatures);
 
     try {
-      const attrs = parseAttributes(response);
+      const attrs = parseScramAttributes(response);
 
       if (attrs.e) {
         throw new Error(attrs.e ?? Reason.Rejected);
       }
 
       const verifier = base64.encode(
-        await computeSignature(this.#authMessage, this.#keys.server),
+        await computeScramSignature(
+          this.#auth_message,
+          this.#key_signatures.server,
+        ),
       );
       if (attrs.v !== verifier) {
         throw new Error(Reason.BadVerifier);
       }
 
-      this.#state = State.ServerResponse;
+      this.#state = AuthenticationState.ServerResponse;
     } catch (e) {
-      this.#state = State.Failed;
+      this.#state = AuthenticationState.Failed;
       throw e;
     }
   }
 }
-
-/** Generates a random nonce string. */
-function generateNonce(size: number): string {
-  return base64.encode(crypto.getRandomValues(new Uint8Array(size)));
-}
-
-/** Parses attributes out of a SCRAM message. */
-function parseAttributes(str: string): Record<string, string> {
-  const attrs: Record<string, string> = {};
-
-  for (const entry of str.split(",")) {
-    const pos = entry.indexOf("=");
-    if (pos < 1) {
-      throw new Error(Reason.BadMessage);
-    }
-
-    const key = entry.substr(0, pos);
-    const value = entry.substr(pos + 1);
-    attrs[key] = value;
-  }
-
-  return attrs;
-}
-
-/** HMAC-derived binary key. */
-type Key = Uint8Array;
-
-/** Binary digest. */
-type Digest = Uint8Array;
-
-/** Collection of SCRAM authentication keys derived from a plaintext password. */
-interface Keys {
-  server: Key;
-  client: Key;
-  stored: Key;
-}
-
-/** Derives authentication keys from a plaintext password. */
-async function deriveKeys(
-  password: string,
-  salt: Uint8Array,
-  iterCount: number,
-): Promise<Keys> {
-  const ikm = bytes(normalize(password));
-  const key = await pbkdf2(
-    (msg: Uint8Array) => sign(msg, ikm),
-    salt,
-    iterCount,
-    1,
-  );
-  const server = await sign(bytes("Server Key"), key);
-  const client = await sign(bytes("Client Key"), key);
-  const stored = new Uint8Array(await crypto.subtle.digest("SHA-256", client));
-  return { server, client, stored };
-}
-
-/** Computes SCRAM signature. */
-function computeSignature(message: string, key: Key): Promise<Digest> {
-  return sign(bytes(message), key);
-}
-
-/** Computes SCRAM proof. */
-function computeProof(signature: Digest, key: Key): Digest {
-  const proof = new Uint8Array(signature.length);
-  for (let i = 0; i < proof.length; i++) {
-    proof[i] = signature[i] ^ key[i];
-  }
-  return proof;
-}
-
-/** Returns UTF-8 bytes encoding given string. */
-function bytes(str: string): Uint8Array {
-  return new TextEncoder().encode(str);
-}
-
-/**
- * Normalizes string per SASLprep.
- * @see {@link https://tools.ietf.org/html/rfc3454}
- * @see {@link https://tools.ietf.org/html/rfc4013}
- */
-function normalize(str: string): string {
-  // TODO: Handle mapping and maybe unicode normalization.
-  const unsafe = /[^\x21-\x7e]/;
-  if (unsafe.test(str)) {
-    throw new Error(
-      "scram username/password is currently limited to safe ascii characters",
-    );
-  }
-  return str;
-}
-
-/** Escapes "=" and "," in a string. */
-function escape(str: string): string {
-  return str
-    .replace(/=/g, "=3D")
-    .replace(/,/g, "=2C");
-}
-
-/** Computes HMAC of a message using given key. */
-// TODO
-// Migrate to crypto.subtle.sign on Deno 1.11
-// deno-lint-ignore require-await
-async function sign(msg: Uint8Array, key: Key): Promise<Digest> {
-  const hmac = new HmacSha256(key);
-  hmac.update(msg);
-  return new Uint8Array(hmac.arrayBuffer());
-}
-
-/**
- * Computes a PBKDF2 key block.
- * @see {@link https://tools.ietf.org/html/rfc2898}
- */
-async function pbkdf2(
-  prf: (_: Uint8Array) => Promise<Digest>,
-  salt: Uint8Array,
-  iterCount: number,
-  index: number,
-): Promise<Key> {
-  let block = new Uint8Array(salt.length + 4);
-  block.set(salt);
-  block[salt.length + 0] = (index >> 24) & 0xFF;
-  block[salt.length + 1] = (index >> 16) & 0xFF;
-  block[salt.length + 2] = (index >> 8) & 0xFF;
-  block[salt.length + 3] = index & 0xFF;
-  block = await prf(block);
-
-  const key = block;
-  for (let r = 1; r < iterCount; r++) {
-    block = await prf(block);
-    for (let i = 0; i < key.length; i++) {
-      key[i] ^= block[i];
-    }
-  }
-  return key;
-}
diff --git a/deps.ts b/deps.ts
index a1bc6d6f..ee3269f1 100644
--- a/deps.ts
+++ b/deps.ts
@@ -5,8 +5,7 @@ export {
   BufWriter,
 } from "https://deno.land/std@0.114.0/io/buffer.ts";
 export { copy } from "https://deno.land/std@0.114.0/bytes/mod.ts";
-export { createHash } from "https://deno.land/std@0.114.0/hash/mod.ts";
-export { HmacSha256 } from "https://deno.land/std@0.114.0/hash/sha256.ts";
+export { Md5 } from "https://deno.land/std@0.120.0/hash/md5.ts";
 export { deferred, delay } from "https://deno.land/std@0.114.0/async/mod.ts";
 export type { Deferred } from "https://deno.land/std@0.114.0/async/mod.ts";
 export { bold, yellow } from "https://deno.land/std@0.114.0/fmt/colors.ts";
diff --git a/docker-compose.yml b/docker-compose.yml
index 754ceb19..ae5e24be 100644
--- a/docker-compose.yml
+++ b/docker-compose.yml
@@ -1,7 +1,19 @@
 version: '3.8'
 
 services:
-  postgres_classic:
+  postgres_clear:
+    image: postgres:9
+    hostname: postgres
+    environment:
+      - POSTGRES_DB=postgres
+      - POSTGRES_PASSWORD=postgres
+      - POSTGRES_USER=postgres
+    volumes:
+      - ./docker/postgres_clear/data/:/var/lib/postgresql/host/
+      - ./docker/postgres_clear/init/:/docker-entrypoint-initdb.d/
+    ports:
+      - "6000:5432"
+  postgres_md5:
     image: postgres:14
     hostname: postgres
     environment:
@@ -9,8 +21,8 @@ services:
       - POSTGRES_PASSWORD=postgres
       - POSTGRES_USER=postgres
     volumes:
-      - ./docker/postgres_classic/data/:/var/lib/postgresql/host/
-      - ./docker/postgres_classic/init/:/docker-entrypoint-initdb.d/
+      - ./docker/postgres_md5/data/:/var/lib/postgresql/host/
+      - ./docker/postgres_md5/init/:/docker-entrypoint-initdb.d/
     ports:
       - "6001:5432"
   postgres_scram:
@@ -30,10 +42,11 @@ services:
   tests:
     build: .
     depends_on:
-      - postgres_classic
+      - postgres_clear
+      - postgres_md5
       - postgres_scram
     environment:
-      - WAIT_HOSTS=postgres_classic:5432,postgres_scram:5432
+      - WAIT_HOSTS=postgres_clear:5432,postgres_md5:5432,postgres_scram:5432
       # Wait thirty seconds after database goes online
       # For database metadata initialization
       - WAIT_AFTER_HOSTS=15
diff --git a/docker/certs/ca.crt b/docker/certs/ca.crt
index e96104dd..abb630ec 100644
--- a/docker/certs/ca.crt
+++ b/docker/certs/ca.crt
@@ -1,20 +1,20 @@
 -----BEGIN CERTIFICATE-----
-MIIDMTCCAhmgAwIBAgIUfkdvRA7spdYY2eBzMIaUpwdZLVswDQYJKoZIhvcNAQEL
+MIIDMTCCAhmgAwIBAgIUKLHJN8gpJJ4LwL/cWGMxeekyWCwwDQYJKoZIhvcNAQEL
 BQAwJzELMAkGA1UEBhMCVVMxGDAWBgNVBAMMD0V4YW1wbGUtUm9vdC1DQTAgFw0y
-MTA5MjkwNTE1NTBaGA8yMTIwMDkwNTA1MTU1MFowJzELMAkGA1UEBhMCVVMxGDAW
+MjAxMDcwMzAzNTBaGA8yMTIwMTIxNDAzMDM1MFowJzELMAkGA1UEBhMCVVMxGDAW
 BgNVBAMMD0V4YW1wbGUtUm9vdC1DQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCC
-AQoCggEBAOJWA8iyktDM3rcFOOmomxjS2/1MUThm6Cg1IlOJoPZmWp7NSssJoYhe
-OynOmV0RwlyYz0kOoHbW13eiIl28sJioLqP7zwvMMNwTFwdW760umg4RHwojgilT
-ataDKH4onbKWJWsRC7nD0E8KhViiyEdBZUayjwnOVnJCT0xLroYIU0TpzVgSiqq/
-qi827NHs82HaU6iVDs7cVvCrW6Lsc3RowmgFjvPo3WqBzo3HLhqTUL/YI4MnuLxs
-yLdoTYc+v/7p2O23IwLIzMzHCaS77jNP9e0deavi9l4skaI9Ly762Eem5d0qtzE5
-1/+IdhIfVkDtq5jzZtjbi7Wx410xfRMCAwEAAaNTMFEwHQYDVR0OBBYEFLuBbJIl
-zyQv4IaataQYMkNqlejoMB8GA1UdIwQYMBaAFLuBbJIlzyQv4IaataQYMkNqlejo
-MA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAJwPeK+ncvPhcjJt
-++oO83dPd+0IK1Tk02rcECia7Kuyp5jlIcUZ65JrMBq1xtcYR/ukGacZrK98qUaj
-rgjzSGqSiZZ/JNI+s7er2qZRscacOuOBlEXYaFbKPMp4E21BE0F3OAvd2h0PjFMz
-ambclnQtKc3Y0glm8Qj5+f1D6PgxhQ+RamV3OFIFbLg8mhp2gBjEW30AScwN+bkk
-uyCBnCopGbk0Zup0UuSkApDnueaff9j05igbFfVkJbp1ZeLNfpN/qDgnZqbn7Her
-/ugFfzsyevAhldxKEql2DdQQhpWsXHZSEsv0m56cgvl/sfsSeBzf2zkVUMgw632P
-7djdJtc=
+AQoCggEBAMZRF6YG2pN5HQ4F0Xnk0JeApa0GzKAisv0TTnmUHDKaM8WtVk6M48Co
+H7avyM4q1Tzfw+3kad2HcEFtZ3LNhztG2zE8lI9P82qNYmnbukYkyAzADpywzOeG
+CqbH4ejHhdNEZWP9wUteucJ5TnbC4u07c+bgNQb8crnfiW9Is+JShfe1agU6NKkZ
+GkF+/SYzOUS9geP3cj0BrtSboUz62NKl4dU+TMMUjmgWDXuwun5WB7kBm61z8nNq
+SAJOd1g5lWrEr+D32q8zN8gP09fT7XDZHXWA8+MdO2UB3VV+SSVo7Yn5QyiUrVvC
+An+etIE52K67OZTjrn6gw8lgmiX+PTECAwEAAaNTMFEwHQYDVR0OBBYEFIte+NgJ
+uUTwh7ptEzJD3zJXvqtCMB8GA1UdIwQYMBaAFIte+NgJuUTwh7ptEzJD3zJXvqtC
+MA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIEbNu38wBqUHlZY
+FQsNLmizA5qH4Bo+0TwDAHxa8twHarhkxPVpz8tA0Zw8CsQ56ow6JkHJblKXKZlS
+rwI2ciHUxTnvnBGiVmGgM3pz99OEKGRtHn8RRJrTI42P1a1NOqOAwMLI6cl14eCo
+UkHlgxMHtsrC5gZawPs/sfPg5AuuIZy6qjBLaByPBQTO14BPzlEcPzSniZjzPsVz
+w5cuVxzBoRxu+jsEzLqQBb24amO2bHshfG9TV1VVyDxaI0E5dGO3cO5BxpriQytn
+BMy3sgOVTnaZkVG9Pb2CRSZ7f2FZIgTCGsuj3oeZU1LdhUbnSdll7iLIFqUBohw/
+0COUBJ8=
 -----END CERTIFICATE-----
diff --git a/docker/certs/domains.txt b/docker/certs/domains.txt
index 43e1aafa..d7b045c6 100644
--- a/docker/certs/domains.txt
+++ b/docker/certs/domains.txt
@@ -4,5 +4,6 @@ keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
 subjectAltName = @alt_names
 [alt_names]
 DNS.1 = localhost
-DNS.2 = postgres_classic
-DNS.3 = postgres_scram
+DNS.2 = postgres_clear
+DNS.3 = postgres_md5
+DNS.4 = postgres_scram
diff --git a/docker/generate_tls_keys.sh b/docker/generate_tls_keys.sh
index b3c6af8f..9fcb19d8 100755
--- a/docker/generate_tls_keys.sh
+++ b/docker/generate_tls_keys.sh
@@ -10,9 +10,11 @@ openssl req -new -nodes -newkey rsa:2048 -keyout ./certs/server.key -out ./certs
 openssl x509 -req -sha256 -days 36135 -in ./certs/server.csr -CA ./certs/ca.pem -CAkey ./certs/ca.key -CAcreateserial -extfile ./certs/domains.txt -out ./certs/server.crt
 
 chmod 777 certs/server.crt
-cp -f certs/server.crt postgres_classic/data/
+cp -f certs/server.crt postgres_clear/data/
+cp -f certs/server.crt postgres_md5/data/
 cp -f certs/server.crt postgres_scram/data/
 
 chmod 777 certs/server.key
-cp -f certs/server.key postgres_classic/data/
+cp -f certs/server.key postgres_clear/data/
+cp -f certs/server.key postgres_md5/data/
 cp -f certs/server.key postgres_scram/data/
diff --git a/docker/postgres_classic/data/server.crt b/docker/postgres_classic/data/server.crt
deleted file mode 100755
index ea2fb4d9..00000000
--- a/docker/postgres_classic/data/server.crt
+++ /dev/null
@@ -1,22 +0,0 @@
------BEGIN CERTIFICATE-----
-MIIDkTCCAnmgAwIBAgIUCeSCBCVxR0+kf5GcadXrLln0WdYwDQYJKoZIhvcNAQEL
-BQAwJzELMAkGA1UEBhMCVVMxGDAWBgNVBAMMD0V4YW1wbGUtUm9vdC1DQTAgFw0y
-MTA5MjkwNTE1NTBaGA8yMTIwMDkwNTA1MTU1MFowZzELMAkGA1UEBhMCVVMxEjAQ
-BgNVBAgMCVlvdXJTdGF0ZTERMA8GA1UEBwwIWW91ckNpdHkxHTAbBgNVBAoMFEV4
-YW1wbGUtQ2VydGlmaWNhdGVzMRIwEAYDVQQDDAlsb2NhbGhvc3QwggEiMA0GCSqG
-SIb3DQEBAQUAA4IBDwAwggEKAoIBAQDMbJZmDVvPlwipJPBa8sIvl5eA+r2xFj0t
-GN90Nol0VhUxcH6wyo85ILxa+eMIywmYbs3JCdigYz3Y/1cEQ0Uc/Qaqqt28pDFH
-yx/mG6DudDp7kF+Yc6KQ3ZJiMjj++mpT8oJqGEn32VT0yXEWjs+6goafx76Zre/4
-K8mVIL+ve4CnWp15jNo7YMpvw0hCvM4Ev3MHYKn4XSR1nJlozizRb9k6UZJlcR3v
-8NS/AvXqzcJ8d+iCvl9X9YIZaHq8YKgf3Hd0qPqZwA1f/rDzTS583/xuZ04ngd5m
-gg88S5cd0JZ12mZnPYpWkJJWC/bs+14blaIjtdJURhegOTx2AIVjAgMBAAGjczBx
-MB8GA1UdIwQYMBaAFLuBbJIlzyQv4IaataQYMkNqlejoMAkGA1UdEwQCMAAwCwYD
-VR0PBAQDAgTwMDYGA1UdEQQvMC2CCWxvY2FsaG9zdIIQcG9zdGdyZXNfY2xhc3Np
-Y4IOcG9zdGdyZXNfc2NyYW0wDQYJKoZIhvcNAQELBQADggEBAEHjZQGpUW2r5VDy
-3l/BSjKk30I4GQdr58lSfWdh6ULGpOQ3yp1WgJWiH4eKSgozwFeOCqz8oWEKkIS0
-EZFnb0hXaZW2KcXRAco2oyRlQLmSs0XxPJiZNwVAOz1cvF8m/Rk0kbwzCczTPNgp
-N0/xMBxAnE3x7ExwA332gCJ1PQ6KMStMbjhRNb+FhrAdSe/ljzWtHrVEJ8WFsORD
-BjI6oVw1KdZTuzshVMxArW02DutdlssHMQNexYmM9k2fnHQc1zePtVJNJmWiG0/o
-lcHLdsy74AEkFw29X7jpq6Ivsz2HvU8cR14oYRxEY+bhXjqcdl67CKXR/i/sDYcq
-8kzqWZk=
------END CERTIFICATE-----
diff --git a/docker/postgres_classic/data/server.key b/docker/postgres_classic/data/server.key
deleted file mode 100755
index f324210e..00000000
--- a/docker/postgres_classic/data/server.key
+++ /dev/null
@@ -1,28 +0,0 @@
------BEGIN PRIVATE KEY-----
-MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDMbJZmDVvPlwip
-JPBa8sIvl5eA+r2xFj0tGN90Nol0VhUxcH6wyo85ILxa+eMIywmYbs3JCdigYz3Y
-/1cEQ0Uc/Qaqqt28pDFHyx/mG6DudDp7kF+Yc6KQ3ZJiMjj++mpT8oJqGEn32VT0
-yXEWjs+6goafx76Zre/4K8mVIL+ve4CnWp15jNo7YMpvw0hCvM4Ev3MHYKn4XSR1
-nJlozizRb9k6UZJlcR3v8NS/AvXqzcJ8d+iCvl9X9YIZaHq8YKgf3Hd0qPqZwA1f
-/rDzTS583/xuZ04ngd5mgg88S5cd0JZ12mZnPYpWkJJWC/bs+14blaIjtdJURheg
-OTx2AIVjAgMBAAECggEANBWutE3PCLNYt4/71ZBovauIJIq+bjJWX/koZfnHR+bu
-+2vIO89AcrPOifeFSyZASaBhuklR8nuWtIVKbIGfSGWHn1BtsrS7AanVdNGxTVA7
-3mPIl5VO5E4wD+jv8LdpA/6UD+gkYIv1Q3FX6QF2F/VNy8Qe4hUZQUgW0nJHpLQE
-KXSkOY9r4GMRWzRwpGr3YmR7ZQspBPHuSKzg71Tg0cWUB56uWHphPy1AKuWznVj4
-RavKMUB311Y+TFYCW0cPPA0dByb9i11SeYbbcBEZCTC8UQ5yCsB2EGpZeeO7pukp
-fI1XOxlrVSfiFhGkmtZJQnnsy8anlfJiVa6+CupUwQKBgQDy2Zi53CrIZpaeu3kt
-Msgd3FIQ3UjWHei/Icr35wBjmGKTkuyNikZEZx10v6lD1RK6HTL/5GABIgY617Kp
-KdicZb40/mdy2WqfjyVyMZkiRMQR6qFXp4+Pao5nt/Vr2ICbrT+VtsWnFxtmTa/w
-Wf5JSbImv3r6qc+LfE0Px5wAEwKBgQDXflReOv42BAakDMDk3mlUq9kiXQPF/goC
-XuacI04qv/XJqujtz5i3mRmKXt2Y5R8uiXWp9Z+ho+N6m3RIVq/9soIzzR9FDiQ3
-5fw3UnuU2KFGMshGwWcmdz0ffrzNjoWKaRQuHFvymdTpV7+bT1Vy4VrcmISA0iQA
-AyidP3svcQKBgQCvsrxrY53UZVx9tRcjm0TrTbZWGzMSLotwlQtatdczN1HCgR8B
-/FOAM7Y8/FmDCQpGes+mEV1gFHS7Z8kL2ImuBXJKtvCzSBd7Hz6xUq7++w98Auv+
-Fe2ojig/Y/l8sCPD/eEt+REhJXeeWYB7/TAbZ+UrYYehCPBuc1zxmLIF3wKBgQDA
-1O4ASH/0rBOZN0RhSVkuCH1MD7nxsYsZZfysmbc38ACsjsDTFWKOYHUHai6Xw+fs
-R9s/1GkdRr+nlnYuyUvBFL0IR7SEocvtLWNNygSGRHfEjmrDTgvU0vyiM1IWC0Qa
-gD8rp/rrk5Z/nCL8grhvDZO2NNDVSbYnQKxWUlkUMQKBgQCA2rOXvS+8IzY0tS4Y
-0hsuKZvriEGWIasSx3pIsIv5YQtBs/+cSldOWZ0e4cFZplforXZELI4bxpIP3FoV
-1Ve6Xp1XEDhLwYWYHauxfToT5/NEQA8rR0D50L5GrGj11mmxmK/jB4PHnredPSHt
-p5epz21mLgNZhemziafCZZ7nTw==
------END PRIVATE KEY-----
diff --git a/docker/postgres_classic/init/initialize_test_server.sql b/docker/postgres_classic/init/initialize_test_server.sql
deleted file mode 100644
index cc9cfdbe..00000000
--- a/docker/postgres_classic/init/initialize_test_server.sql
+++ /dev/null
@@ -1,5 +0,0 @@
-CREATE USER clear WITH PASSWORD 'postgres';
-GRANT ALL PRIVILEGES ON DATABASE POSTGRES TO clear;
-
-CREATE USER MD5 WITH PASSWORD 'postgres';
-GRANT ALL PRIVILEGES ON DATABASE POSTGRES TO MD5;
diff --git a/docker/postgres_clear/data/pg_hba.conf b/docker/postgres_clear/data/pg_hba.conf
new file mode 100755
index 00000000..4dbc2db5
--- /dev/null
+++ b/docker/postgres_clear/data/pg_hba.conf
@@ -0,0 +1,5 @@
+hostssl     postgres    clear                 0.0.0.0/0  password
+hostnossl   postgres    clear                 0.0.0.0/0  password
+hostssl     all         postgres              0.0.0.0/0  md5
+hostnossl   all         postgres              0.0.0.0/0  md5
+
diff --git a/docker/postgres_classic/data/postgresql.conf b/docker/postgres_clear/data/postgresql.conf
similarity index 100%
rename from docker/postgres_classic/data/postgresql.conf
rename to docker/postgres_clear/data/postgresql.conf
diff --git a/docker/postgres_clear/data/server.crt b/docker/postgres_clear/data/server.crt
new file mode 100755
index 00000000..5f656d0b
--- /dev/null
+++ b/docker/postgres_clear/data/server.crt
@@ -0,0 +1,22 @@
+-----BEGIN CERTIFICATE-----
+MIIDnTCCAoWgAwIBAgIUCeSCBCVxR0+kf5GcadXrLln0WdswDQYJKoZIhvcNAQEL
+BQAwJzELMAkGA1UEBhMCVVMxGDAWBgNVBAMMD0V4YW1wbGUtUm9vdC1DQTAgFw0y
+MjAxMDcwMzAzNTBaGA8yMTIwMTIxNDAzMDM1MFowZzELMAkGA1UEBhMCVVMxEjAQ
+BgNVBAgMCVlvdXJTdGF0ZTERMA8GA1UEBwwIWW91ckNpdHkxHTAbBgNVBAoMFEV4
+YW1wbGUtQ2VydGlmaWNhdGVzMRIwEAYDVQQDDAlsb2NhbGhvc3QwggEiMA0GCSqG
+SIb3DQEBAQUAA4IBDwAwggEKAoIBAQCwRoa0e8Oi6HI1Ixa4DW6S6V44fijWvDr9
+6mJqEoVY8X/ZXW6RGYpcCyXc/ZEAaBnqRcujylpcVgGePTH3hFnNkWfPDUOmKNIt
+fRK4jQL6dssv1mmW3s6Li5wS/UGq3CLH5jKGHNHKaIZapq0QgLmlv3dRF8SdwJB/
+B6q5XEFlNK+cAH5fiL2p8CD8AZGYxZ6kU3FDjN8PnQIQVnsj9G21/3ChYd3uC0/c
+wDcy9DTAoPZ6ZdZJ6wZkmtpidG+0VNA7esuVzLpcOOfrohemVeNPapFp73BskBPy
+kxgfrDHdaecqypZSo2keAWFx7se231QYaY0uXJYXtao6QSKCuha3AgMBAAGjfzB9
+MB8GA1UdIwQYMBaAFIte+NgJuUTwh7ptEzJD3zJXvqtCMAkGA1UdEwQCMAAwCwYD
+VR0PBAQDAgTwMEIGA1UdEQQ7MDmCCWxvY2FsaG9zdIIOcG9zdGdyZXNfY2xlYXKC
+DHBvc3RncmVzX21kNYIOcG9zdGdyZXNfc2NyYW0wDQYJKoZIhvcNAQELBQADggEB
+AGaPCbKlh9HXu1W+Q5FreyUgkbKhYV6j3GfNt47CKehVs8Q4qrLAg/k6Pl1Fxaxw
+jEorwuLaI7YVEIcJi2m4kb1ipIikCkIPt5K1Vo/GOrLoRfer8QcRQBMhM4kZMhlr
+MERl/PHpgllU0PQF/f95sxlFHqWTOiTomEite3XKvurkkAumcAxO2GiuDWK0CkZu
+WGsl5MNoVPT2jJ+xcIefw8anTx4IbElYbiWFC0MgnRTNrD+hHvKDKoVzZDqQKj/s
+7CYAv4m9jvv+06nNC5IyUd57hAv/5lt2e4U1bS4kvm0IWtW3tJBx/NSdybrVj5oZ
+McVPTeO5pAgwpZY8BFUdCvQ=
+-----END CERTIFICATE-----
diff --git a/docker/postgres_clear/data/server.key b/docker/postgres_clear/data/server.key
new file mode 100755
index 00000000..6d060512
--- /dev/null
+++ b/docker/postgres_clear/data/server.key
@@ -0,0 +1,28 @@
+-----BEGIN PRIVATE KEY-----
+MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCwRoa0e8Oi6HI1
+Ixa4DW6S6V44fijWvDr96mJqEoVY8X/ZXW6RGYpcCyXc/ZEAaBnqRcujylpcVgGe
+PTH3hFnNkWfPDUOmKNItfRK4jQL6dssv1mmW3s6Li5wS/UGq3CLH5jKGHNHKaIZa
+pq0QgLmlv3dRF8SdwJB/B6q5XEFlNK+cAH5fiL2p8CD8AZGYxZ6kU3FDjN8PnQIQ
+Vnsj9G21/3ChYd3uC0/cwDcy9DTAoPZ6ZdZJ6wZkmtpidG+0VNA7esuVzLpcOOfr
+ohemVeNPapFp73BskBPykxgfrDHdaecqypZSo2keAWFx7se231QYaY0uXJYXtao6
+QSKCuha3AgMBAAECggEAQgLHIwNN6c2eJyPyuA3foIhfzkwAQxnOBZQmMo6o/PvC
+4sVISHIGDB3ome8iw8I4IjDs53M5j2ZtyLIl6gjYEFEpTLIs6SZUPtCdmBrGSMD/
+qfRjKipZsowfcEUCuFcjdzRPK0XTkja+SWgtWwa5fsZKikWaTXD1K3zVhAB2RM1s
+jMo2UY+EcTfrkYA4FDv8KRHunRNyPOMYr/b7axjbh0xzzMCvfUSE42IglRw1tuiE
+ogKNY3nzYZvX8hXr3Ccy9PIA6ieehgFdBfEDDTPFI460gPyFU670Q52sHXIhV8lP
+eFZg9aJ2Xc27xZluYaGXJj7PDpekOVIIj3sI23/hEQKBgQDkEfXSMvXL1rcoiqlG
+iuLrQYGbmzNRkFaOztUhAqCu/sfiZYr82RejhMyMUDT1fCDtjXYnITcD6INYfwRX
+9rab/MSe3BIpRbGynEN29pLQqSloRu5qhXrus3cMixmgXhlBYPIAg+nT/dSRLUJl
+IR/Dh8uclCtM5uPCsv9R0ojaQwKBgQDF3MtIGby18WKvySf1uR8tFcZNFUqktpvS
+oHPcVI/SUxQkGF5bFZ6NyA3+9+Sfo6Zya46zv5XgMR8FvP1/TMNpIQ5xsbuk/pRc
+jx/Hx7QHE/MX/cEZGABjXkHptZhGv7sNdNWL8IcYk1qsTwzaIpbau1KCahkObscp
+X9+dAcwsfQKBgH4QU2FRm72FPI5jPrfoUw+YkMxzGAWwk7eyKepqKmkwGUpRuGaU
+lNVktS+lsfAzIXxNIg709BTr85X592uryjokmIX6vOslQ9inOT9LgdFmf6XM90HX
+8CB7AIXlaU/UU39o17tjLt9nwZRRgQ6nJYiNygUNfXWvdhuLl0ch6VVDAoGAPLbJ
+sfAj1fih/arOFjqd9GmwFcsowm4+Vl1h8AQKtdFEZucLXQu/QWZX1RsgDlRbKNUU
+TtfFF6w7Brm9V6iodcPs+Lo/CBwOTnCkodsHxPw8Jep5rEePJu6vbxWICn2e2jw1
+ouFFsybUNfdzzCO9ApVkdhw0YBdiCbIfncAFdMkCgYB1CmGeZ7fEl8ByCLkpIAke
+DMgO69cB2JDWugqZIzZT5BsxSCXvOm0J4zQuzThY1RvYKRXqg3tjNDmWhYll5tmS
+MEcl6hx1RbZUHDsKlKXkdBd1fDCALC0w4iTEg8OVCF4CM50T4+zuSoED9gCCItpK
+fCoYn3ScgCEJA3HdUGLy4g==
+-----END PRIVATE KEY-----
diff --git a/docker/postgres_classic/init/initialize_test_server.sh b/docker/postgres_clear/init/initialize_test_server.sh
similarity index 100%
rename from docker/postgres_classic/init/initialize_test_server.sh
rename to docker/postgres_clear/init/initialize_test_server.sh
diff --git a/docker/postgres_clear/init/initialize_test_server.sql b/docker/postgres_clear/init/initialize_test_server.sql
new file mode 100644
index 00000000..137a4cc5
--- /dev/null
+++ b/docker/postgres_clear/init/initialize_test_server.sql
@@ -0,0 +1,2 @@
+CREATE USER CLEAR WITH UNENCRYPTED PASSWORD 'postgres';
+GRANT ALL PRIVILEGES ON DATABASE POSTGRES TO CLEAR;
diff --git a/docker/postgres_classic/data/pg_hba.conf b/docker/postgres_md5/data/pg_hba.conf
similarity index 69%
rename from docker/postgres_classic/data/pg_hba.conf
rename to docker/postgres_md5/data/pg_hba.conf
index dbf38889..47653181 100755
--- a/docker/postgres_classic/data/pg_hba.conf
+++ b/docker/postgres_md5/data/pg_hba.conf
@@ -1,5 +1,3 @@
-hostssl     postgres    clear                 0.0.0.0/0  password
-hostnossl   postgres    clear                 0.0.0.0/0  password
 hostssl     all         postgres              0.0.0.0/0  md5
 hostnossl   all         postgres              0.0.0.0/0  md5
 hostssl     postgres    md5                   0.0.0.0/0  md5
diff --git a/docker/postgres_md5/data/postgresql.conf b/docker/postgres_md5/data/postgresql.conf
new file mode 100755
index 00000000..c94e3a22
--- /dev/null
+++ b/docker/postgres_md5/data/postgresql.conf
@@ -0,0 +1,3 @@
+ssl = on
+ssl_cert_file = 'server.crt'
+ssl_key_file = 'server.key'
diff --git a/docker/postgres_md5/data/server.crt b/docker/postgres_md5/data/server.crt
new file mode 100755
index 00000000..5f656d0b
--- /dev/null
+++ b/docker/postgres_md5/data/server.crt
@@ -0,0 +1,22 @@
+-----BEGIN CERTIFICATE-----
+MIIDnTCCAoWgAwIBAgIUCeSCBCVxR0+kf5GcadXrLln0WdswDQYJKoZIhvcNAQEL
+BQAwJzELMAkGA1UEBhMCVVMxGDAWBgNVBAMMD0V4YW1wbGUtUm9vdC1DQTAgFw0y
+MjAxMDcwMzAzNTBaGA8yMTIwMTIxNDAzMDM1MFowZzELMAkGA1UEBhMCVVMxEjAQ
+BgNVBAgMCVlvdXJTdGF0ZTERMA8GA1UEBwwIWW91ckNpdHkxHTAbBgNVBAoMFEV4
+YW1wbGUtQ2VydGlmaWNhdGVzMRIwEAYDVQQDDAlsb2NhbGhvc3QwggEiMA0GCSqG
+SIb3DQEBAQUAA4IBDwAwggEKAoIBAQCwRoa0e8Oi6HI1Ixa4DW6S6V44fijWvDr9
+6mJqEoVY8X/ZXW6RGYpcCyXc/ZEAaBnqRcujylpcVgGePTH3hFnNkWfPDUOmKNIt
+fRK4jQL6dssv1mmW3s6Li5wS/UGq3CLH5jKGHNHKaIZapq0QgLmlv3dRF8SdwJB/
+B6q5XEFlNK+cAH5fiL2p8CD8AZGYxZ6kU3FDjN8PnQIQVnsj9G21/3ChYd3uC0/c
+wDcy9DTAoPZ6ZdZJ6wZkmtpidG+0VNA7esuVzLpcOOfrohemVeNPapFp73BskBPy
+kxgfrDHdaecqypZSo2keAWFx7se231QYaY0uXJYXtao6QSKCuha3AgMBAAGjfzB9
+MB8GA1UdIwQYMBaAFIte+NgJuUTwh7ptEzJD3zJXvqtCMAkGA1UdEwQCMAAwCwYD
+VR0PBAQDAgTwMEIGA1UdEQQ7MDmCCWxvY2FsaG9zdIIOcG9zdGdyZXNfY2xlYXKC
+DHBvc3RncmVzX21kNYIOcG9zdGdyZXNfc2NyYW0wDQYJKoZIhvcNAQELBQADggEB
+AGaPCbKlh9HXu1W+Q5FreyUgkbKhYV6j3GfNt47CKehVs8Q4qrLAg/k6Pl1Fxaxw
+jEorwuLaI7YVEIcJi2m4kb1ipIikCkIPt5K1Vo/GOrLoRfer8QcRQBMhM4kZMhlr
+MERl/PHpgllU0PQF/f95sxlFHqWTOiTomEite3XKvurkkAumcAxO2GiuDWK0CkZu
+WGsl5MNoVPT2jJ+xcIefw8anTx4IbElYbiWFC0MgnRTNrD+hHvKDKoVzZDqQKj/s
+7CYAv4m9jvv+06nNC5IyUd57hAv/5lt2e4U1bS4kvm0IWtW3tJBx/NSdybrVj5oZ
+McVPTeO5pAgwpZY8BFUdCvQ=
+-----END CERTIFICATE-----
diff --git a/docker/postgres_md5/data/server.key b/docker/postgres_md5/data/server.key
new file mode 100755
index 00000000..6d060512
--- /dev/null
+++ b/docker/postgres_md5/data/server.key
@@ -0,0 +1,28 @@
+-----BEGIN PRIVATE KEY-----
+MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCwRoa0e8Oi6HI1
+Ixa4DW6S6V44fijWvDr96mJqEoVY8X/ZXW6RGYpcCyXc/ZEAaBnqRcujylpcVgGe
+PTH3hFnNkWfPDUOmKNItfRK4jQL6dssv1mmW3s6Li5wS/UGq3CLH5jKGHNHKaIZa
+pq0QgLmlv3dRF8SdwJB/B6q5XEFlNK+cAH5fiL2p8CD8AZGYxZ6kU3FDjN8PnQIQ
+Vnsj9G21/3ChYd3uC0/cwDcy9DTAoPZ6ZdZJ6wZkmtpidG+0VNA7esuVzLpcOOfr
+ohemVeNPapFp73BskBPykxgfrDHdaecqypZSo2keAWFx7se231QYaY0uXJYXtao6
+QSKCuha3AgMBAAECggEAQgLHIwNN6c2eJyPyuA3foIhfzkwAQxnOBZQmMo6o/PvC
+4sVISHIGDB3ome8iw8I4IjDs53M5j2ZtyLIl6gjYEFEpTLIs6SZUPtCdmBrGSMD/
+qfRjKipZsowfcEUCuFcjdzRPK0XTkja+SWgtWwa5fsZKikWaTXD1K3zVhAB2RM1s
+jMo2UY+EcTfrkYA4FDv8KRHunRNyPOMYr/b7axjbh0xzzMCvfUSE42IglRw1tuiE
+ogKNY3nzYZvX8hXr3Ccy9PIA6ieehgFdBfEDDTPFI460gPyFU670Q52sHXIhV8lP
+eFZg9aJ2Xc27xZluYaGXJj7PDpekOVIIj3sI23/hEQKBgQDkEfXSMvXL1rcoiqlG
+iuLrQYGbmzNRkFaOztUhAqCu/sfiZYr82RejhMyMUDT1fCDtjXYnITcD6INYfwRX
+9rab/MSe3BIpRbGynEN29pLQqSloRu5qhXrus3cMixmgXhlBYPIAg+nT/dSRLUJl
+IR/Dh8uclCtM5uPCsv9R0ojaQwKBgQDF3MtIGby18WKvySf1uR8tFcZNFUqktpvS
+oHPcVI/SUxQkGF5bFZ6NyA3+9+Sfo6Zya46zv5XgMR8FvP1/TMNpIQ5xsbuk/pRc
+jx/Hx7QHE/MX/cEZGABjXkHptZhGv7sNdNWL8IcYk1qsTwzaIpbau1KCahkObscp
+X9+dAcwsfQKBgH4QU2FRm72FPI5jPrfoUw+YkMxzGAWwk7eyKepqKmkwGUpRuGaU
+lNVktS+lsfAzIXxNIg709BTr85X592uryjokmIX6vOslQ9inOT9LgdFmf6XM90HX
+8CB7AIXlaU/UU39o17tjLt9nwZRRgQ6nJYiNygUNfXWvdhuLl0ch6VVDAoGAPLbJ
+sfAj1fih/arOFjqd9GmwFcsowm4+Vl1h8AQKtdFEZucLXQu/QWZX1RsgDlRbKNUU
+TtfFF6w7Brm9V6iodcPs+Lo/CBwOTnCkodsHxPw8Jep5rEePJu6vbxWICn2e2jw1
+ouFFsybUNfdzzCO9ApVkdhw0YBdiCbIfncAFdMkCgYB1CmGeZ7fEl8ByCLkpIAke
+DMgO69cB2JDWugqZIzZT5BsxSCXvOm0J4zQuzThY1RvYKRXqg3tjNDmWhYll5tmS
+MEcl6hx1RbZUHDsKlKXkdBd1fDCALC0w4iTEg8OVCF4CM50T4+zuSoED9gCCItpK
+fCoYn3ScgCEJA3HdUGLy4g==
+-----END PRIVATE KEY-----
diff --git a/docker/postgres_md5/init/initialize_test_server.sh b/docker/postgres_md5/init/initialize_test_server.sh
new file mode 100644
index 00000000..934ad771
--- /dev/null
+++ b/docker/postgres_md5/init/initialize_test_server.sh
@@ -0,0 +1,6 @@
+cat /var/lib/postgresql/host/postgresql.conf >> /var/lib/postgresql/data/postgresql.conf
+cp /var/lib/postgresql/host/pg_hba.conf /var/lib/postgresql/data
+cp /var/lib/postgresql/host/server.crt /var/lib/postgresql/data
+cp /var/lib/postgresql/host/server.key /var/lib/postgresql/data
+chmod 600 /var/lib/postgresql/data/server.crt
+chmod 600 /var/lib/postgresql/data/server.key
diff --git a/docker/postgres_md5/init/initialize_test_server.sql b/docker/postgres_md5/init/initialize_test_server.sql
new file mode 100644
index 00000000..a80978b7
--- /dev/null
+++ b/docker/postgres_md5/init/initialize_test_server.sql
@@ -0,0 +1,9 @@
+-- Create MD5 user and ensure password is stored as md5
+-- They get created as SCRAM-SHA-256 in newer versions
+CREATE USER MD5 WITH ENCRYPTED PASSWORD 'postgres';
+GRANT ALL PRIVILEGES ON DATABASE POSTGRES TO MD5;
+
+UPDATE PG_AUTHID
+SET ROLPASSWORD = 'md5'||MD5('postgres'||'md5')
+WHERE ROLNAME ILIKE 'MD5';
+
diff --git a/docker/postgres_scram/data/postgresql.conf b/docker/postgres_scram/data/postgresql.conf
index a7bb5d98..516110b2 100644
--- a/docker/postgres_scram/data/postgresql.conf
+++ b/docker/postgres_scram/data/postgresql.conf
@@ -1,3 +1,4 @@
+password_encryption = scram-sha-256
 ssl = on
 ssl_cert_file = 'server.crt'
 ssl_key_file = 'server.key'
\ No newline at end of file
diff --git a/docker/postgres_scram/data/server.crt b/docker/postgres_scram/data/server.crt
index ea2fb4d9..5f656d0b 100755
--- a/docker/postgres_scram/data/server.crt
+++ b/docker/postgres_scram/data/server.crt
@@ -1,22 +1,22 @@
 -----BEGIN CERTIFICATE-----
-MIIDkTCCAnmgAwIBAgIUCeSCBCVxR0+kf5GcadXrLln0WdYwDQYJKoZIhvcNAQEL
+MIIDnTCCAoWgAwIBAgIUCeSCBCVxR0+kf5GcadXrLln0WdswDQYJKoZIhvcNAQEL
 BQAwJzELMAkGA1UEBhMCVVMxGDAWBgNVBAMMD0V4YW1wbGUtUm9vdC1DQTAgFw0y
-MTA5MjkwNTE1NTBaGA8yMTIwMDkwNTA1MTU1MFowZzELMAkGA1UEBhMCVVMxEjAQ
+MjAxMDcwMzAzNTBaGA8yMTIwMTIxNDAzMDM1MFowZzELMAkGA1UEBhMCVVMxEjAQ
 BgNVBAgMCVlvdXJTdGF0ZTERMA8GA1UEBwwIWW91ckNpdHkxHTAbBgNVBAoMFEV4
 YW1wbGUtQ2VydGlmaWNhdGVzMRIwEAYDVQQDDAlsb2NhbGhvc3QwggEiMA0GCSqG
-SIb3DQEBAQUAA4IBDwAwggEKAoIBAQDMbJZmDVvPlwipJPBa8sIvl5eA+r2xFj0t
-GN90Nol0VhUxcH6wyo85ILxa+eMIywmYbs3JCdigYz3Y/1cEQ0Uc/Qaqqt28pDFH
-yx/mG6DudDp7kF+Yc6KQ3ZJiMjj++mpT8oJqGEn32VT0yXEWjs+6goafx76Zre/4
-K8mVIL+ve4CnWp15jNo7YMpvw0hCvM4Ev3MHYKn4XSR1nJlozizRb9k6UZJlcR3v
-8NS/AvXqzcJ8d+iCvl9X9YIZaHq8YKgf3Hd0qPqZwA1f/rDzTS583/xuZ04ngd5m
-gg88S5cd0JZ12mZnPYpWkJJWC/bs+14blaIjtdJURhegOTx2AIVjAgMBAAGjczBx
-MB8GA1UdIwQYMBaAFLuBbJIlzyQv4IaataQYMkNqlejoMAkGA1UdEwQCMAAwCwYD
-VR0PBAQDAgTwMDYGA1UdEQQvMC2CCWxvY2FsaG9zdIIQcG9zdGdyZXNfY2xhc3Np
-Y4IOcG9zdGdyZXNfc2NyYW0wDQYJKoZIhvcNAQELBQADggEBAEHjZQGpUW2r5VDy
-3l/BSjKk30I4GQdr58lSfWdh6ULGpOQ3yp1WgJWiH4eKSgozwFeOCqz8oWEKkIS0
-EZFnb0hXaZW2KcXRAco2oyRlQLmSs0XxPJiZNwVAOz1cvF8m/Rk0kbwzCczTPNgp
-N0/xMBxAnE3x7ExwA332gCJ1PQ6KMStMbjhRNb+FhrAdSe/ljzWtHrVEJ8WFsORD
-BjI6oVw1KdZTuzshVMxArW02DutdlssHMQNexYmM9k2fnHQc1zePtVJNJmWiG0/o
-lcHLdsy74AEkFw29X7jpq6Ivsz2HvU8cR14oYRxEY+bhXjqcdl67CKXR/i/sDYcq
-8kzqWZk=
+SIb3DQEBAQUAA4IBDwAwggEKAoIBAQCwRoa0e8Oi6HI1Ixa4DW6S6V44fijWvDr9
+6mJqEoVY8X/ZXW6RGYpcCyXc/ZEAaBnqRcujylpcVgGePTH3hFnNkWfPDUOmKNIt
+fRK4jQL6dssv1mmW3s6Li5wS/UGq3CLH5jKGHNHKaIZapq0QgLmlv3dRF8SdwJB/
+B6q5XEFlNK+cAH5fiL2p8CD8AZGYxZ6kU3FDjN8PnQIQVnsj9G21/3ChYd3uC0/c
+wDcy9DTAoPZ6ZdZJ6wZkmtpidG+0VNA7esuVzLpcOOfrohemVeNPapFp73BskBPy
+kxgfrDHdaecqypZSo2keAWFx7se231QYaY0uXJYXtao6QSKCuha3AgMBAAGjfzB9
+MB8GA1UdIwQYMBaAFIte+NgJuUTwh7ptEzJD3zJXvqtCMAkGA1UdEwQCMAAwCwYD
+VR0PBAQDAgTwMEIGA1UdEQQ7MDmCCWxvY2FsaG9zdIIOcG9zdGdyZXNfY2xlYXKC
+DHBvc3RncmVzX21kNYIOcG9zdGdyZXNfc2NyYW0wDQYJKoZIhvcNAQELBQADggEB
+AGaPCbKlh9HXu1W+Q5FreyUgkbKhYV6j3GfNt47CKehVs8Q4qrLAg/k6Pl1Fxaxw
+jEorwuLaI7YVEIcJi2m4kb1ipIikCkIPt5K1Vo/GOrLoRfer8QcRQBMhM4kZMhlr
+MERl/PHpgllU0PQF/f95sxlFHqWTOiTomEite3XKvurkkAumcAxO2GiuDWK0CkZu
+WGsl5MNoVPT2jJ+xcIefw8anTx4IbElYbiWFC0MgnRTNrD+hHvKDKoVzZDqQKj/s
+7CYAv4m9jvv+06nNC5IyUd57hAv/5lt2e4U1bS4kvm0IWtW3tJBx/NSdybrVj5oZ
+McVPTeO5pAgwpZY8BFUdCvQ=
 -----END CERTIFICATE-----
diff --git a/docker/postgres_scram/data/server.key b/docker/postgres_scram/data/server.key
index f324210e..6d060512 100755
--- a/docker/postgres_scram/data/server.key
+++ b/docker/postgres_scram/data/server.key
@@ -1,28 +1,28 @@
 -----BEGIN PRIVATE KEY-----
-MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDMbJZmDVvPlwip
-JPBa8sIvl5eA+r2xFj0tGN90Nol0VhUxcH6wyo85ILxa+eMIywmYbs3JCdigYz3Y
-/1cEQ0Uc/Qaqqt28pDFHyx/mG6DudDp7kF+Yc6KQ3ZJiMjj++mpT8oJqGEn32VT0
-yXEWjs+6goafx76Zre/4K8mVIL+ve4CnWp15jNo7YMpvw0hCvM4Ev3MHYKn4XSR1
-nJlozizRb9k6UZJlcR3v8NS/AvXqzcJ8d+iCvl9X9YIZaHq8YKgf3Hd0qPqZwA1f
-/rDzTS583/xuZ04ngd5mgg88S5cd0JZ12mZnPYpWkJJWC/bs+14blaIjtdJURheg
-OTx2AIVjAgMBAAECggEANBWutE3PCLNYt4/71ZBovauIJIq+bjJWX/koZfnHR+bu
-+2vIO89AcrPOifeFSyZASaBhuklR8nuWtIVKbIGfSGWHn1BtsrS7AanVdNGxTVA7
-3mPIl5VO5E4wD+jv8LdpA/6UD+gkYIv1Q3FX6QF2F/VNy8Qe4hUZQUgW0nJHpLQE
-KXSkOY9r4GMRWzRwpGr3YmR7ZQspBPHuSKzg71Tg0cWUB56uWHphPy1AKuWznVj4
-RavKMUB311Y+TFYCW0cPPA0dByb9i11SeYbbcBEZCTC8UQ5yCsB2EGpZeeO7pukp
-fI1XOxlrVSfiFhGkmtZJQnnsy8anlfJiVa6+CupUwQKBgQDy2Zi53CrIZpaeu3kt
-Msgd3FIQ3UjWHei/Icr35wBjmGKTkuyNikZEZx10v6lD1RK6HTL/5GABIgY617Kp
-KdicZb40/mdy2WqfjyVyMZkiRMQR6qFXp4+Pao5nt/Vr2ICbrT+VtsWnFxtmTa/w
-Wf5JSbImv3r6qc+LfE0Px5wAEwKBgQDXflReOv42BAakDMDk3mlUq9kiXQPF/goC
-XuacI04qv/XJqujtz5i3mRmKXt2Y5R8uiXWp9Z+ho+N6m3RIVq/9soIzzR9FDiQ3
-5fw3UnuU2KFGMshGwWcmdz0ffrzNjoWKaRQuHFvymdTpV7+bT1Vy4VrcmISA0iQA
-AyidP3svcQKBgQCvsrxrY53UZVx9tRcjm0TrTbZWGzMSLotwlQtatdczN1HCgR8B
-/FOAM7Y8/FmDCQpGes+mEV1gFHS7Z8kL2ImuBXJKtvCzSBd7Hz6xUq7++w98Auv+
-Fe2ojig/Y/l8sCPD/eEt+REhJXeeWYB7/TAbZ+UrYYehCPBuc1zxmLIF3wKBgQDA
-1O4ASH/0rBOZN0RhSVkuCH1MD7nxsYsZZfysmbc38ACsjsDTFWKOYHUHai6Xw+fs
-R9s/1GkdRr+nlnYuyUvBFL0IR7SEocvtLWNNygSGRHfEjmrDTgvU0vyiM1IWC0Qa
-gD8rp/rrk5Z/nCL8grhvDZO2NNDVSbYnQKxWUlkUMQKBgQCA2rOXvS+8IzY0tS4Y
-0hsuKZvriEGWIasSx3pIsIv5YQtBs/+cSldOWZ0e4cFZplforXZELI4bxpIP3FoV
-1Ve6Xp1XEDhLwYWYHauxfToT5/NEQA8rR0D50L5GrGj11mmxmK/jB4PHnredPSHt
-p5epz21mLgNZhemziafCZZ7nTw==
+MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCwRoa0e8Oi6HI1
+Ixa4DW6S6V44fijWvDr96mJqEoVY8X/ZXW6RGYpcCyXc/ZEAaBnqRcujylpcVgGe
+PTH3hFnNkWfPDUOmKNItfRK4jQL6dssv1mmW3s6Li5wS/UGq3CLH5jKGHNHKaIZa
+pq0QgLmlv3dRF8SdwJB/B6q5XEFlNK+cAH5fiL2p8CD8AZGYxZ6kU3FDjN8PnQIQ
+Vnsj9G21/3ChYd3uC0/cwDcy9DTAoPZ6ZdZJ6wZkmtpidG+0VNA7esuVzLpcOOfr
+ohemVeNPapFp73BskBPykxgfrDHdaecqypZSo2keAWFx7se231QYaY0uXJYXtao6
+QSKCuha3AgMBAAECggEAQgLHIwNN6c2eJyPyuA3foIhfzkwAQxnOBZQmMo6o/PvC
+4sVISHIGDB3ome8iw8I4IjDs53M5j2ZtyLIl6gjYEFEpTLIs6SZUPtCdmBrGSMD/
+qfRjKipZsowfcEUCuFcjdzRPK0XTkja+SWgtWwa5fsZKikWaTXD1K3zVhAB2RM1s
+jMo2UY+EcTfrkYA4FDv8KRHunRNyPOMYr/b7axjbh0xzzMCvfUSE42IglRw1tuiE
+ogKNY3nzYZvX8hXr3Ccy9PIA6ieehgFdBfEDDTPFI460gPyFU670Q52sHXIhV8lP
+eFZg9aJ2Xc27xZluYaGXJj7PDpekOVIIj3sI23/hEQKBgQDkEfXSMvXL1rcoiqlG
+iuLrQYGbmzNRkFaOztUhAqCu/sfiZYr82RejhMyMUDT1fCDtjXYnITcD6INYfwRX
+9rab/MSe3BIpRbGynEN29pLQqSloRu5qhXrus3cMixmgXhlBYPIAg+nT/dSRLUJl
+IR/Dh8uclCtM5uPCsv9R0ojaQwKBgQDF3MtIGby18WKvySf1uR8tFcZNFUqktpvS
+oHPcVI/SUxQkGF5bFZ6NyA3+9+Sfo6Zya46zv5XgMR8FvP1/TMNpIQ5xsbuk/pRc
+jx/Hx7QHE/MX/cEZGABjXkHptZhGv7sNdNWL8IcYk1qsTwzaIpbau1KCahkObscp
+X9+dAcwsfQKBgH4QU2FRm72FPI5jPrfoUw+YkMxzGAWwk7eyKepqKmkwGUpRuGaU
+lNVktS+lsfAzIXxNIg709BTr85X592uryjokmIX6vOslQ9inOT9LgdFmf6XM90HX
+8CB7AIXlaU/UU39o17tjLt9nwZRRgQ6nJYiNygUNfXWvdhuLl0ch6VVDAoGAPLbJ
+sfAj1fih/arOFjqd9GmwFcsowm4+Vl1h8AQKtdFEZucLXQu/QWZX1RsgDlRbKNUU
+TtfFF6w7Brm9V6iodcPs+Lo/CBwOTnCkodsHxPw8Jep5rEePJu6vbxWICn2e2jw1
+ouFFsybUNfdzzCO9ApVkdhw0YBdiCbIfncAFdMkCgYB1CmGeZ7fEl8ByCLkpIAke
+DMgO69cB2JDWugqZIzZT5BsxSCXvOm0J4zQuzThY1RvYKRXqg3tjNDmWhYll5tmS
+MEcl6hx1RbZUHDsKlKXkdBd1fDCALC0w4iTEg8OVCF4CM50T4+zuSoED9gCCItpK
+fCoYn3ScgCEJA3HdUGLy4g==
 -----END PRIVATE KEY-----
diff --git a/docker/postgres_scram/init/initialize_test_server.sql b/docker/postgres_scram/init/initialize_test_server.sql
index 45a8a3aa..4472ffa5 100644
--- a/docker/postgres_scram/init/initialize_test_server.sql
+++ b/docker/postgres_scram/init/initialize_test_server.sql
@@ -1,2 +1,2 @@
-CREATE USER SCRAM WITH PASSWORD 'postgres';
+CREATE USER SCRAM WITH ENCRYPTED PASSWORD 'postgres';
 GRANT ALL PRIVILEGES ON DATABASE POSTGRES TO SCRAM;
diff --git a/docs/README.md b/docs/README.md
index 38dcad96..3f099bb1 100644
--- a/docs/README.md
+++ b/docs/README.md
@@ -3,7 +3,7 @@
 ![Build Status](https://img.shields.io/github/workflow/status/denodrivers/postgres/ci?label=Build&logo=github&style=flat-square)
 [![Discord server](https://img.shields.io/discord/768918486575480863?color=blue&label=Ask%20for%20help%20here&logo=discord&style=flat-square)](https://discord.gg/HEdTCvZUSf)
 ![Manual](https://img.shields.io/github/v/release/denodrivers/postgres?color=orange&label=Manual&logo=deno&style=flat-square)
-[![Documentation](https://img.shields.io/github/v/release/denodrivers/postgres?color=yellow&label=Documentation&logo=deno&style=flat-square)](https://doc.deno.land/https/deno.land/x/postgres@v0.14.2/mod.ts)
+[![Documentation](https://img.shields.io/github/v/release/denodrivers/postgres?color=yellow&label=Documentation&logo=deno&style=flat-square)](https://doc.deno.land/https/deno.land/x/postgres@v0.14.3/mod.ts)
 ![License](https://img.shields.io/github/license/denodrivers/postgres?color=yellowgreen&label=License&style=flat-square)
 
 `deno-postgres` is a lightweight PostgreSQL driver for Deno focused on user
@@ -188,21 +188,33 @@ connection string. Although discouraged, this option is pretty useful when
 dealing with development databases or versions of Postgres that didn't support
 TLS encrypted connections.
 
-Sadly, stablishing a TLS connection in the way Postgres requires it isn't
-possible without the `Deno.startTls` API, which is currently marked as unstable.
-This is a situation that will be solved once this API is stabilized, however I
-don't have an estimated time of when that might happen.
-
-##### About invalid TLS certificates
+##### About invalid and custom TLS certificates
 
 There is a miriad of factors you have to take into account when using a
 certificate to encrypt your connection that, if not taken care of, can render
 your certificate invalid.
 
 When using a self signed certificate, make sure to specify the PEM encoded CA
-certificate in the `tls.caCertificates` option when creating the Postgres
-`Client` (Deno 1.15.0 later), or using the `--cert` option when starting Deno
-(Deno 1.12.2 or later).
+certificate using the `--cert` option when starting Deno (Deno 1.12.2 or later)
+or in the `tls.caCertificates` option when creating a client (Deno 1.15.0 later)
+
+```ts
+const client = new Client({
+  database: "test",
+  hostname: "localhost",
+  password: "password",
+  port: 5432,
+  user: "user",
+  tls: {
+    caCertificates: [
+      await Deno.readTextFile(
+        new URL("./my_ca_certificate.crt", import.meta.url),
+      ),
+    ],
+    enabled: false,
+  },
+});
+```
 
 TLS can be disabled from your server by editing your `postgresql.conf` file and
 setting the `ssl` option to `off`, or in the driver side by using the "disabled"
@@ -372,20 +384,30 @@ await runQuery("SELECT ID, NAME FROM users"); // [{id: 1, name: 'Carlos'}, {id:
 await runQuery("SELECT ID, NAME FROM users WHERE id = '1'"); // [{id: 1, name: 'Carlos'}, {id: 2, name: 'John'}, ...]
 ```
 
-## API
+## Executing queries
 
-### Queries
+### Executing simple queries
 
-#### Simple query
+Executing a query is as simple as providing the raw SQL to your client, it will
+automatically be queued, validated and processed so you can get a human
+readable, blazing fast result
 
 ```ts
 const result = await client.queryArray("SELECT ID, NAME FROM PEOPLE");
-console.log(result.rows);
+console.log(result.rows); // [[1, "Laura"], [2, "Jason"]]
 ```
 
-#### Prepared statement
+### Executing prepared statements
+
+Prepared statements are a Postgres mechanism designed to prevent SQL injection
+and maximize query performance for multiple queries (see
+https://security.stackexchange.com/questions/15214/are-prepared-statements-100-safe-against-sql-injection).
+The idea is simple, provide a base sql statement with placeholders for any
+variables required, and then provide said variables as arguments for the query
+call
 
 ```ts
+// Example using the simplified argument interface
 {
   const result = await client.queryArray(
     "SELECT ID, NAME FROM PEOPLE WHERE AGE > $1 AND AGE < $2",
@@ -395,8 +417,8 @@ console.log(result.rows);
   console.log(result.rows);
 }
 
+// Example using the advanced query interface
 {
-  // equivalent using QueryConfig interface
   const result = await client.queryArray({
     text: "SELECT ID, NAME FROM PEOPLE WHERE AGE > $1 AND AGE < $2",
     args: [10, 20],
@@ -405,7 +427,11 @@ console.log(result.rows);
 }
 ```
 
-#### Prepared statement with template strings
+#### Template strings
+
+Even thought the previous call is already pretty simple, it can be simplified
+even further by the use of template strings, offering all the benefits of
+prepared statements with a nice and clear syntaxis for your queries
 
 ```ts
 {
@@ -423,41 +449,61 @@ console.log(result.rows);
 }
 ```
 
-##### Why use template strings?
+Obviously, you can't pass any parameters provided by the `QueryOptions`
+interface such as explicitly named fields, so this API is best used when you
+have a straight forward statement that only requires arguments to work as
+intended
 
-Template string queries get executed as prepared statements, which protects your
-SQL against injection to a certain degree (see
-https://security.stackexchange.com/questions/15214/are-prepared-statements-100-safe-against-sql-injection).
+#### Regarding non argument parameters
 
-Also, they are easier to write and read than plain SQL queries and are more
-compact than using the `QueryOptions` interface
+A common assumption many people do when working with prepared statements is that
+they work the same way string interpolation works, by replacing the placeholders
+with whatever variables have been passed down to the query. However the reality
+is a little more complicated than that where only very specific parts of a query
+can use placeholders to indicate upcoming values
 
-For example, template strings can turn the following:
+That's the reason why the following works
 
-```ts
-await client.queryObject({
-  text: "SELECT ID, NAME FROM PEOPLE WHERE AGE > $1 AND AGE < $2",
-  args: [10, 20],
-});
+```sql
+SELECT MY_DATA FROM MY_TABLE WHERE MY_FIELD = $1
+-- $1 = "some_id"
 ```
 
-Into a much more readable:
+But the following throws
 
-```ts
-await client.queryObject
-  `SELECT ID, NAME FROM PEOPLE WHERE AGE > ${10} AND AGE < ${20}`;
+```sql
+SELECT MY_DATA FROM $1
+-- $1 = "MY_TABLE"
 ```
 
-However, a limitation of template strings is that you can't pass any parameters
-provided by the `QueryOptions` interface, so the only options you have available
-are really `text` and `args` to execute your query
+Specifically, you can't replace any keyword or specifier in a query, only
+literal values, such as the ones you would use in an `INSERT` or `WHERE` clause
 
-#### Generic Parameters
+This is specially hard to grasp when working with template strings, since the
+assumption that is made most of the time is that all items inside a template
+string call are being interpolated with the underlying string, however as
+explained above this is not the case, so all previous warnings about prepared
+statements apply here as well
+
+```ts
+// Valid statement
+const my_id = 17;
+await client.queryArray`UPDATE TABLE X SET Y = 0 WHERE Z = ${my_id}`;
+
+// Invalid attempt to replace an specifier
+const my_table = "IMPORTANT_TABLE";
+const my_other_id = 41;
+await client.queryArray
+  `DELETE FROM ${my_table} WHERE MY_COLUMN = ${my_other_id};`;
+```
+
+### Specifying result type
 
 Both the `queryArray` and `queryObject` functions have a generic implementation
-that allow users to type the result of the query
+that allows users to type the result of the executed query to obtain
+intellisense
 
-```typescript
+```ts
 {
   const array_result = await client.queryArray<[number, string]>(
     "SELECT ID, NAME FROM PEOPLE WHERE ID = 17",
@@ -489,10 +535,10 @@ that allow users to type the result of the query
 }
 ```
 
-#### Object query
+### Obtaining results as an object
 
 The `queryObject` function allows you to return the results of the executed
-query as a set objects, allowing easy management with interface like types.
+query as a set of objects, allowing easy management with interface-like types
 
 ```ts
 interface User {
@@ -508,9 +554,35 @@ const result = await client.queryObject<User>(
 const users = result.rows;
 ```
 
-However, the actual values of the query are determined by the aliases given to
-those columns inside the query, so executing something like the following will
-result in a totally different result to the one the user might expect
+#### Case transformation
+
+When consuming a database, specially one not managed by themselves but a
+external one, many developers have to face different naming standards that may
+disrupt the consistency of their codebase. And while there are simple solutions
+for that such as aliasing every query field that is done to the database, one
+easyb built-in solution allows developers to transform the incoming query names
+into the casing of their preference without any extra steps
+
+##### Camelcase
+
+To transform a query result into camelcase, you only need to provide the
+`camelcase` option on your query call
+
+```ts
+const { rows: result } = await client.queryObject({
+  camelcase: true,
+  text: "SELECT FIELD_X, FIELD_Y FROM MY_TABLE",
+});
+
+console.log(result); // [{ fieldX: "something", fieldY: "something else" }, ...]
+```
+
+#### Explicit field naming
+
+One little caveat to executing queries directly is that the resulting fields are
+determined by the aliases given to those columns inside the query, so executing
+something like the following will result in a totally different result to the
+one the user might expect
 
 ```ts
 const result = await client.queryObject(
diff --git a/tests/config.json b/tests/config.json
index d86768b4..8a3cc464 100644
--- a/tests/config.json
+++ b/tests/config.json
@@ -1,13 +1,22 @@
 {
   "ci": {
-    "postgres_classic": {
+    "postgres_clear": {
       "applicationName": "deno_postgres",
       "database": "postgres",
-      "hostname": "postgres_classic",
+      "hostname": "postgres_clear",
+      "password": "postgres",
+      "port": 5432,
+      "users": {
+        "clear": "clear"
+      }
+    },
+    "postgres_md5": {
+      "applicationName": "deno_postgres",
+      "database": "postgres",
+      "hostname": "postgres_md5",
       "password": "postgres",
       "port": 5432,
       "users": {
-        "clear": "clear",
         "main": "postgres",
         "md5": "md5",
         "tls_only": "tls_only"
@@ -25,7 +34,17 @@
     }
   },
   "local": {
-    "postgres_classic": {
+    "postgres_clear": {
+      "applicationName": "deno_postgres",
+      "database": "postgres",
+      "hostname": "localhost",
+      "password": "postgres",
+      "port": 6000,
+      "users": {
+        "clear": "clear"
+      }
+    },
+    "postgres_md5": {
       "applicationName": "deno_postgres",
       "database": "postgres",
       "hostname": "localhost",
diff --git a/tests/config.ts b/tests/config.ts
index 1f93c740..7803be08 100644
--- a/tests/config.ts
+++ b/tests/config.ts
@@ -1,13 +1,23 @@
-import { ClientOptions } from "../connection/connection_params.ts";
+import {
+  ClientConfiguration,
+  ClientOptions,
+} from "../connection/connection_params.ts";
+
+type Configuration = Omit<ClientConfiguration, "connection">;
 
 type ConfigFileConnection = Pick<
-  ClientOptions,
+  ClientConfiguration,
   "applicationName" | "database" | "hostname" | "password" | "port"
 >;
 
-type Classic = ConfigFileConnection & {
+type Clear = ConfigFileConnection & {
   users: {
     clear: string;
+  };
+};
+
+type Classic = ConfigFileConnection & {
+  users: {
     main: string;
     md5: string;
     tls_only: string;
@@ -21,7 +31,8 @@ type Scram = ConfigFileConnection & {
 };
 
 interface EnvironmentConfig {
-  postgres_classic: Classic;
+  postgres_clear: Clear;
+  postgres_md5: Classic;
   postgres_scram: Scram;
 }
 
@@ -47,49 +58,51 @@ const enabled_tls = {
 };
 
 const disabled_tls = {
+  caCertificates: [],
   enabled: false,
+  enforce: false,
 };
 
 export const getClearConfiguration = (
   tls: boolean,
 ): ClientOptions => {
   return {
-    applicationName: config.postgres_classic.applicationName,
-    database: config.postgres_classic.database,
-    hostname: config.postgres_classic.hostname,
-    password: config.postgres_classic.password,
-    port: config.postgres_classic.port,
+    applicationName: config.postgres_clear.applicationName,
+    database: config.postgres_clear.database,
+    hostname: config.postgres_clear.hostname,
+    password: config.postgres_clear.password,
+    port: config.postgres_clear.port,
     tls: tls ? enabled_tls : disabled_tls,
-    user: config.postgres_classic.users.clear,
+    user: config.postgres_clear.users.clear,
   };
 };
 
 /** MD5 authenticated user with privileged access to the database */
-export const getMainConfiguration = (): ClientOptions => {
+export const getMainConfiguration = (): Configuration => {
   return {
-    applicationName: config.postgres_classic.applicationName,
-    database: config.postgres_classic.database,
-    hostname: config.postgres_classic.hostname,
-    password: config.postgres_classic.password,
-    port: config.postgres_classic.port,
+    applicationName: config.postgres_md5.applicationName,
+    database: config.postgres_md5.database,
+    hostname: config.postgres_md5.hostname,
+    password: config.postgres_md5.password,
+    port: config.postgres_md5.port,
     tls: enabled_tls,
-    user: config.postgres_classic.users.main,
+    user: config.postgres_md5.users.main,
   };
 };
 
-export const getMd5Configuration = (tls: boolean): ClientOptions => {
+export const getMd5Configuration = (tls: boolean): Configuration => {
   return {
-    applicationName: config.postgres_classic.applicationName,
-    database: config.postgres_classic.database,
-    hostname: config.postgres_classic.hostname,
-    password: config.postgres_classic.password,
-    port: config.postgres_classic.port,
+    applicationName: config.postgres_md5.applicationName,
+    database: config.postgres_md5.database,
+    hostname: config.postgres_md5.hostname,
+    password: config.postgres_md5.password,
+    port: config.postgres_md5.port,
     tls: tls ? enabled_tls : disabled_tls,
-    user: config.postgres_classic.users.md5,
+    user: config.postgres_md5.users.md5,
   };
 };
 
-export const getScramConfiguration = (tls: boolean): ClientOptions => {
+export const getScramConfiguration = (tls: boolean): Configuration => {
   return {
     applicationName: config.postgres_scram.applicationName,
     database: config.postgres_scram.database,
@@ -101,14 +114,14 @@ export const getScramConfiguration = (tls: boolean): ClientOptions => {
   };
 };
 
-export const getTlsOnlyConfiguration = (): ClientOptions => {
+export const getTlsOnlyConfiguration = (): Configuration => {
   return {
-    applicationName: config.postgres_classic.applicationName,
-    database: config.postgres_classic.database,
-    hostname: config.postgres_classic.hostname,
-    password: config.postgres_classic.password,
-    port: config.postgres_classic.port,
+    applicationName: config.postgres_md5.applicationName,
+    database: config.postgres_md5.database,
+    hostname: config.postgres_md5.hostname,
+    password: config.postgres_md5.password,
+    port: config.postgres_md5.port,
     tls: enabled_tls,
-    user: config.postgres_classic.users.tls_only,
+    user: config.postgres_md5.users.tls_only,
   };
 };
diff --git a/tests/connection_test.ts b/tests/connection_test.ts
index 9561f2b8..61ae51c9 100644
--- a/tests/connection_test.ts
+++ b/tests/connection_test.ts
@@ -1,4 +1,9 @@
-import { assertEquals, assertThrowsAsync, deferred } from "./test_deps.ts";
+import {
+  assertEquals,
+  assertThrowsAsync,
+  deferred,
+  streams,
+} from "./test_deps.ts";
 import {
   getClearConfiguration,
   getMainConfiguration,
@@ -8,6 +13,40 @@ import {
 } from "./config.ts";
 import { Client, ConnectionError, PostgresError } from "../mod.ts";
 
+function createProxy(
+  target: Deno.Listener,
+  source: { hostname: string; port: number },
+): { aborter: AbortController; proxy: Promise<void> } {
+  const aborter = new AbortController();
+
+  const proxy = (async () => {
+    for await (const conn of target) {
+      let aborted = false;
+
+      const outbound = await Deno.connect({
+        hostname: source.hostname,
+        port: source.port,
+      });
+      aborter.signal.addEventListener("abort", () => {
+        conn.close();
+        outbound.close();
+        aborted = true;
+      });
+      await Promise.all([
+        streams.copy(conn, outbound),
+        streams.copy(outbound, conn),
+      ]).catch(() => {});
+
+      if (!aborted) {
+        conn.close();
+        outbound.close();
+      }
+    }
+  })();
+
+  return { aborter, proxy };
+}
+
 function getRandomString() {
   return Math.random().toString(36).substring(7);
 }
@@ -393,7 +432,7 @@ Deno.test("Attempts reconnection on disconnection", async function () {
           `INSERT INTO ${test_table} VALUES (${test_value}); COMMIT; SELECT PG_TERMINATE_BACKEND(${client.session.pid})`,
         ),
       ConnectionError,
-      "The session was terminated by the database",
+      "The session was terminated unexpectedly",
     );
     assertEquals(client.connected, false);
 
@@ -424,6 +463,44 @@ Deno.test("Attempts reconnection on disconnection", async function () {
   }
 });
 
+Deno.test("Attempts reconnection when connection is lost", async function () {
+  const cfg = getMainConfiguration();
+  const listener = Deno.listen({ hostname: "127.0.0.1", port: 0 });
+
+  const { aborter, proxy } = createProxy(listener, {
+    hostname: cfg.hostname,
+    port: Number(cfg.port),
+  });
+
+  const client = new Client({
+    ...cfg,
+    hostname: "127.0.0.1",
+    port: (listener.addr as Deno.NetAddr).port,
+    tls: {
+      enabled: false,
+    },
+  });
+
+  await client.queryObject("SELECT 1");
+
+  // This closes ongoing connections. The original connection is now dead, so
+  // a new connection should be established.
+  aborter.abort();
+
+  await assertThrowsAsync(
+    () => client.queryObject("SELECT 1"),
+    ConnectionError,
+    "The session was terminated unexpectedly",
+  );
+
+  // Make sure the connection was reestablished once the server comes back online
+  await client.queryObject("SELECT 1");
+  await client.end();
+
+  listener.close();
+  await proxy;
+});
+
 Deno.test("Doesn't attempt reconnection when attempts are set to zero", async function () {
   const client = new Client({
     ...getMainConfiguration(),
diff --git a/tests/test_deps.ts b/tests/test_deps.ts
index f19dab91..a0eece0c 100644
--- a/tests/test_deps.ts
+++ b/tests/test_deps.ts
@@ -8,3 +8,4 @@ export {
   assertThrowsAsync,
 } from "https://deno.land/std@0.114.0/testing/asserts.ts";
 export { fromFileUrl } from "https://deno.land/std@0.114.0/path/mod.ts";
+export * as streams from "https://deno.land/std@0.114.0/streams/conversion.ts";
