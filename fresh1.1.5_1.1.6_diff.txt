diff --git a/.github/dependabot.yml b/.github/dependabot.yml
new file mode 100644
index 00000000000..73f11c1f474
--- /dev/null
+++ b/.github/dependabot.yml
@@ -0,0 +1,8 @@
+version: 2
+updates:
+
+  - package-ecosystem: "github-actions"
+    directory: "/"
+    schedule:
+      # Check for updates to GitHub Actions every week
+      interval: "weekly"
\ No newline at end of file
diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml
index edac9897147..17ce471a7ea 100644
--- a/.github/workflows/ci.yml
+++ b/.github/workflows/ci.yml
@@ -14,16 +14,14 @@ jobs:
     timeout-minutes: 10
 
     strategy:
+      fail-fast: false
       matrix:
-        # TODO(kt3k): Change this back to ["v1.x", "canary"]
-        # when denoland/deno#18572 is released.
-        # Note: v1.32.2 and v1.32.3 are not compatible with Fresh.
-        deno: ["v1.32.1", "canary"]
+        deno: ["v1.x", "canary"]
         os: [macOS-latest, windows-latest, ubuntu-latest]
 
     steps:
       - name: Checkout repo
-        uses: actions/checkout@v2
+        uses: actions/checkout@v3
 
       - name: Setup Deno
         uses: denoland/setup-deno@v1
@@ -44,7 +42,7 @@ jobs:
 
       - name: Cache Chrome (Linux)
         if: startsWith(matrix.os, 'ubuntu')
-        uses: actions/cache@v2
+        uses: actions/cache@v3
         with:
           path: ~/.cache/deno/deno_puppeteer
           key: chrome-1022525-${{ runner.os }}-${{ hashFiles('tests/deps.ts') }}
@@ -52,7 +50,7 @@ jobs:
 
       - name: Cache Chrome (macOS)
         if: startsWith(matrix.os, 'mac')
-        uses: actions/cache@v2
+        uses: actions/cache@v3
         with:
           path: ~/Library/Caches/deno/deno_puppeteer
           key: chrome-1022525-${{ runner.os }}-${{ hashFiles('tests/deps.ts') }}
@@ -60,7 +58,7 @@ jobs:
 
       - name: Cache Chrome (Windows)
         if: startsWith(matrix.os, 'win')
-        uses: actions/cache@v2
+        uses: actions/cache@v3
         with:
           path: "C:\\Users\\RUNNER~1\\AppData\\Local\\deno\\deno_puppeteer"
           key: chrome-1022525-${{ runner.os }}-${{ hashFiles('tests/deps.ts') }}
diff --git a/.github/workflows/lighthouse.yml b/.github/workflows/lighthouse.yml
index 209e105aef0..26ec2ced53c 100644
--- a/.github/workflows/lighthouse.yml
+++ b/.github/workflows/lighthouse.yml
@@ -13,12 +13,10 @@ jobs:
       URL: ${{ github.event.deployment_status.environment_url }}
 
     steps:
-      - uses: actions/checkout@v2
+      - uses: actions/checkout@v3
 
-      - name: Install Node.js 16.x
-        uses: actions/setup-node@v1
-        with:
-          node-version: 16.x
+      - name: Install Node.js
+        uses: actions/setup-node@v3
 
       - name: Install Lighthouse CI
         run: npm install -g @lhci/cli@0.9.x
diff --git a/README.md b/README.md
index b36baf6096f..5b577df73c7 100644
--- a/README.md
+++ b/README.md
@@ -1,4 +1,5 @@
-[Documentation](#-documentation) | [Getting started](#-getting-started)
+[Documentation](#-documentation) | [Getting started](#-getting-started) |
+[API Reference](https://deno.land/x/fresh?doc)
 
 # fresh
 
diff --git a/deno.json b/deno.json
index 7eecd243064..51e728e7c0d 100644
--- a/deno.json
+++ b/deno.json
@@ -3,7 +3,7 @@
   "tasks": {
     "test": "deno test -A && deno check --config=www/deno.json www/main.ts www/dev.ts && deno check init.ts",
     "fixture": "deno run -A --watch=static/,routes/ tests/fixture/dev.ts",
-    "www": "deno run -A --watch=www/static/,www/routes/,docs/ www/dev.ts",
+    "www": "deno task --cwd=www start",
     "screenshot": "deno run -A www/utils/screenshot.ts"
   },
   "importMap": "./.vscode/import_map.json",
@@ -12,8 +12,6 @@
     "jsxImportSource": "preact"
   },
   "test": {
-    "files": {
-      "exclude": ["www/"]
-    }
+    "exclude": ["www/"]
   }
 }
diff --git a/docs/concepts/deployment.md b/docs/concepts/deployment.md
index 667d28e9509..f51bd8ca438 100644
--- a/docs/concepts/deployment.md
+++ b/docs/concepts/deployment.md
@@ -36,7 +36,7 @@ caching **will** cause your project to not function correctly.
 Here is an example `Dockerfile` for a Fresh project:
 
 ```dockerfile
-FROM denoland/deno:1.25.0
+FROM denoland/deno:1.33.2
 
 ARG GIT_REVISION
 ENV DENO_DEPLOYMENT_ID=${GIT_REVISION}
diff --git a/docs/concepts/forms.md b/docs/concepts/forms.md
new file mode 100644
index 00000000000..c972a090e78
--- /dev/null
+++ b/docs/concepts/forms.md
@@ -0,0 +1,59 @@
+---
+description: |
+  Robustly handle user inputs using HTML `<form>` elements client side, and form
+  submission handlers server side.
+---
+
+For stronger resiliency and user experience, Fresh relies on native browser
+support for form submissions with the HTML `<form>` element.
+
+In the browser, a `<form>` submit will send an HTML action (usually `GET` or
+`POST`) to the server, which responds with a new page to render.
+
+## POST request with `multipart/form-data`
+
+Forms can either submit as a `GET` request with URL search parameter encoding,
+or as a `POST` request with `multipart/form-data`.
+
+This example demonstrates how to handle `multipart/form-data` `<form>`
+submissions:
+
+```tsx
+// routes/subscribe.tsx
+import { Handlers } from "$fresh/server.ts";
+
+export const handler: Handlers = {
+  async GET(req, ctx) {
+    return await ctx.render();
+  },
+  async POST(req, ctx) {
+    const form = await req.formData();
+    const email = form.get("email")?.toString();
+
+    // Add email to list.
+
+    // Redirect user to thank you page.
+    const headers = new Headers();
+    headers.set("location", "/thanks-for-subscribing");
+    return new Response(null, {
+      status: 303, // See Other
+      headers,
+    });
+  },
+};
+
+export default function Subscribe() {
+  return (
+    <>
+      <form method="post">
+        <input type="email" name="email" value="" />
+        <button type="submit">Subscribe</button>
+      </form>
+    </>
+  );
+}
+```
+
+When the user submits the form, Deno will access a specific `email` value from a
+`formData()`, add the email to a list, and redirect the user to a thank you
+page.
diff --git a/docs/getting-started/dynamic-routes.md b/docs/getting-started/dynamic-routes.md
index 8d1dd457290..e5f4d50dd9f 100644
--- a/docs/getting-started/dynamic-routes.md
+++ b/docs/getting-started/dynamic-routes.md
@@ -1,31 +1,31 @@
 ---
 description: |
   Create a dynamic route in fresh by adding a dynamic segment to the route name
-  in the routes' file name on disk: `/greet/[name].tsx`.
+  in the routes' file name on disk: `/[name].tsx`.
 ---
 
 The `/about` route created on the last page is pretty static. It does not matter
 what query or path parameters are passed to the route, it will always render the
-same page. Let's create a `/greet/:name` that will render a page with a greeting
-that contains the name passed in the path.
+same page. Let's create a `/:name` that will render a page with a greeting that
+contains the name passed in the path.
 
 Before diving in, a quick refresher on "dynamic" routes. Dynamic routes don't
 just match a single static path, but rather a whole bunch of different paths
-based on a pattern. For example, the `/greet/:name` route will match the paths
-`/greet/Luca` and `/greet/John`, but not `/greet` or `/greet/Luca/John`.
+based on a pattern. For example, the `/:name` route will match the paths `/Luca`
+and `/John`, but not `/Luca/John`.
 
 Fresh supports dynamic routes out of the box through file system routing. To
 make any path segment dynamic, just put square brackets around that segment in
-the file name. For example the `/greet/:name` route maps to the file name
-`routes/greet/[name].tsx`.
+the file name. For example the `/:name` route maps to the file name
+`routes/[name].tsx`.
 
-Just like the static `/about` route, the dynamic `/greet/:name` route will
-render a page. The module must once again expose a component as a default
-export. This time the component will receive the matched path segment properties
-as arguments in its `props` object though.
+Just like the static `/about` route, the dynamic `/:name` route will render a
+page. The module must once again expose a component as a default export. This
+time the component will receive the matched path segment properties as arguments
+in its `props` object though.
 
 ```tsx
-// routes/greet/[name].tsx
+// routes/[name].tsx
 
 import { PageProps } from "$fresh/server.ts";
 
@@ -43,7 +43,7 @@ The `PageProps` interface actually contains a bunch of useful properties that
 can be used to customize the rendered output. Next to the matched url pattern
 parameters, the raw `url`, and the `route` name can also be found in here.
 
-Navigating to `https://localhost:8000/greet/Luca` will now render a page showing
+Navigating to `http://localhost:8000/Luca` will now render a page showing
 "Greetings to you, Luca!".
 
 The [_Concepts: Routing_][concepts-routing] page has more information about
diff --git a/docs/getting-started/form-submissions.md b/docs/getting-started/form-submissions.md
index ac1a3b944a6..c566ee68e1d 100644
--- a/docs/getting-started/form-submissions.md
+++ b/docs/getting-started/form-submissions.md
@@ -18,10 +18,10 @@ JavaScript to make them more interactive.
 
 The way forms work in the browser, is that they perform an HTML navigation
 action when the user submits the form. In most cases this means that when the
-form is submitted, a GET or POST request is sent to the server with the form
+form is submitted, a `GET` or `POST` request is sent to the server with the form
 data, which then responds with a new page to render.
 
-Fresh can handle both GET and POST requests through the
+Fresh can handle both `GET` and `POST` requests through the
 [custom handlers][custom-handlers] feature of routes. The handlers can perform
 any necessary processing on the form data, and then pass data to the
 `ctx.render()` call to render a new page.
@@ -71,6 +71,9 @@ query set as the `q` query parameter in the URL. The `GET` handler will then
 filter the names array based on the query, and pass it to the page component for
 rendering.
 
+[Learn more about using forms in Fresh][concepts-forms].
+
 <!-- TODO(lucacasonato): link to todo app example when that is built again -->
 
 [custom-handlers]: /docs/getting-started/custom-handlers
+[concepts-forms]: /docs/concepts/forms
diff --git a/docs/getting-started/running-locally.md b/docs/getting-started/running-locally.md
index 441fee5a871..4e4d32191e6 100644
--- a/docs/getting-started/running-locally.md
+++ b/docs/getting-started/running-locally.md
@@ -5,7 +5,8 @@ description: |
 ---
 
 The next step after scaffolding out a new project, is to actually start it. To
-do this you can just `deno task start`.
+do this you can just `deno task start`. Environment variables will be
+automatically read from `.env`.
 
 ```
 $ deno task start
diff --git a/docs/integrations/index.md b/docs/integrations/index.md
index 9608dfc2928..c89a706eaf6 100644
--- a/docs/integrations/index.md
+++ b/docs/integrations/index.md
@@ -18,3 +18,17 @@ A live demo can be found here: https://fresh-charts.deno.dev/
 Documentation for the module can be found here: https://deno.land/x/fresh_charts
 
 [chart-js]: https://www.chartjs.org/ "Chart.js"
+
+## `fresh_marionette`
+
+Fresh Marionette allows you to start writing end 2 end browser tests in your
+Fresh projects with a single import. Then you can run those browser tests in a
+GitHub Actions workflow.
+
+Documentation for the module can be found here:
+https://deno.land/x/fresh_marionette
+
+An example project that runs the tests in a GitHub Actions workflow:
+https://marionette.deno.dev
+
+Fresh Marionette works with VSCode too! - https://youtu.be/OG77NdqL164
diff --git a/docs/toc.json b/docs/toc.json
index 57c28365750..5ec37a830d9 100644
--- a/docs/toc.json
+++ b/docs/toc.json
@@ -21,6 +21,7 @@
     "pages": [
       ["architecture", "Architecture"],
       ["routes", "Routes"],
+      ["forms", "Forms"],
       ["islands", "Interactive islands"],
       ["static-files", "Static files"],
       ["middleware", "Route middleware"],
diff --git a/examples/counter/deno.json b/examples/counter/deno.json
index 8d9ac336cfe..b691b285acd 100644
--- a/examples/counter/deno.json
+++ b/examples/counter/deno.json
@@ -1,4 +1,5 @@
 {
+  "lock": false,
   "tasks": {
     "start": "deno run -A --watch=static/,routes/ dev.ts"
   },
diff --git a/init.ts b/init.ts
index 78e1475384b..1d892653a86 100644
--- a/init.ts
+++ b/init.ts
@@ -1,7 +1,11 @@
 import { join, parse, resolve } from "./src/dev/deps.ts";
 import { error } from "./src/dev/error.ts";
 import { collect, ensureMinDenoVersion, generate } from "./src/dev/mod.ts";
-import { freshImports, twindImports } from "./src/dev/imports.ts";
+import {
+  dotenvImports,
+  freshImports,
+  twindImports,
+} from "./src/dev/imports.ts";
 
 ensureMinDenoVersion();
 
@@ -84,9 +88,23 @@ if (useVSCode) {
   await Deno.mkdir(join(resolvedDirectory, ".vscode"), { recursive: true });
 }
 
+const GITIGNORE = `# dotenv environment variable files
+.env
+.env.development.local
+.env.test.local
+.env.production.local
+.env.local
+`;
+
+await Deno.writeTextFile(
+  join(resolvedDirectory, ".gitignore"),
+  GITIGNORE,
+);
+
 const importMap = { imports: {} as Record<string, string> };
 freshImports(importMap.imports);
 if (useTwind) twindImports(importMap.imports);
+dotenvImports(importMap.imports);
 const IMPORT_MAP_JSON = JSON.stringify(importMap, null, 2) + "\n";
 await Deno.writeTextFile(
   join(resolvedDirectory, "import_map.json"),
@@ -111,8 +129,8 @@ export default function Home() {
           alt="the fresh logo: a sliced lemon dripping with juice"
         />
         <p${useTwind ? ` class="my-6"` : ""}>
-          Welcome to \`fresh\`. Try updating this message in the ./routes/index.tsx
-          file, and refresh.
+          Welcome to \`fresh\`. Try updating this message in the
+          ./routes/index.tsx file, and refresh.
         </p>
         <Counter start={3} />
       </div>
@@ -250,6 +268,8 @@ let MAIN_TS = `/// <reference no-default-lib="true" />
 /// <reference lib="dom.asynciterable" />
 /// <reference lib="deno.ns" />
 
+import "$std/dotenv/load.ts";
+
 import { start } from "$fresh/server.ts";
 import manifest from "./fresh.gen.ts";
 `;
@@ -283,6 +303,7 @@ try {
 }
 
 const config = {
+  lock: false,
   tasks: {
     start: "deno run -A --watch=static/,routes/ dev.ts",
   },
@@ -352,11 +373,13 @@ await generate(resolvedDirectory, manifest);
 // not leak personal info (e.g. `/Users/MyName`)
 console.log("\n%cProject initialized!\n", "color: green; font-weight: bold");
 
-console.log(
-  `Enter your project directory using %ccd ${unresolvedDirectory}%c.`,
-  "color: cyan",
-  "",
-);
+if (unresolvedDirectory !== ".") {
+  console.log(
+    `Enter your project directory using %ccd ${unresolvedDirectory}%c.`,
+    "color: cyan",
+    "",
+  );
+}
 console.log(
   "Run %cdeno task start%c to start the project. %cCTRL-C%c to stop.",
   "color: cyan",
diff --git a/src/dev/imports.ts b/src/dev/imports.ts
index c27d5a2563f..692bb7d5d91 100644
--- a/src/dev/imports.ts
+++ b/src/dev/imports.ts
@@ -3,6 +3,7 @@ export const RECOMMENDED_PREACT_RTS_VERSION = "5.2.6";
 export const RECOMMENDED_PREACT_SIGNALS_VERSION = "1.1.3";
 export const RECOMMENDED_PREACT_SIGNALS_CORE_VERSION = "1.2.3";
 export const RECOMMENDED_TWIND_VERSION = "0.16.19";
+export const RECOMMENDED_STD_VERSION = "0.187.0";
 
 export function freshImports(imports: Record<string, string>) {
   imports["$fresh/"] = new URL("../../", import.meta.url).href;
@@ -20,3 +21,7 @@ export function twindImports(imports: Record<string, string>) {
   imports["twind"] = `https://esm.sh/twind@${RECOMMENDED_TWIND_VERSION}`;
   imports["twind/"] = `https://esm.sh/twind@${RECOMMENDED_TWIND_VERSION}/`;
 }
+
+export function dotenvImports(imports: Record<string, string>) {
+  imports["$std/"] = `https://deno.land/std@${RECOMMENDED_STD_VERSION}/`;
+}
diff --git a/src/runtime/main.ts b/src/runtime/main.ts
index 6f50338d516..d3451996af0 100644
--- a/src/runtime/main.ts
+++ b/src/runtime/main.ts
@@ -6,20 +6,20 @@ function createRootFragment(
   replaceNode: Node | Node[],
 ) {
   replaceNode = ([] as Node[]).concat(replaceNode);
-  const s = replaceNode[replaceNode.length - 1].nextSibling;
-  function insert(c: Node, r: Node) {
-    parent.insertBefore(c, r || s);
-  }
   // @ts-ignore this is fine
   return parent.__k = {
     nodeType: 1,
     parentNode: parent,
     firstChild: replaceNode[0],
     childNodes: replaceNode,
-    insertBefore: insert,
-    appendChild: insert,
-    removeChild: function (c: Node) {
-      parent.removeChild(c);
+    insertBefore(node: Node, child: Node) {
+      parent.insertBefore(node, child);
+    },
+    appendChild(child: Node) {
+      parent.appendChild(child);
+    },
+    removeChild(child: Node) {
+      parent.removeChild(child);
     },
   };
 }
diff --git a/src/server/bundle.ts b/src/server/bundle.ts
index 2c3a02133a6..7cfe71c5449 100644
--- a/src/server/bundle.ts
+++ b/src/server/bundle.ts
@@ -11,6 +11,7 @@ export interface JSXConfig {
 let esbuildInitialized: boolean | Promise<void> = false;
 async function ensureEsbuildInitialized() {
   if (esbuildInitialized === false) {
+    // deno-lint-ignore no-deprecated-deno-api
     if (Deno.run === undefined) {
       const wasmURL = new URL("./esbuild_v0.17.11.wasm", import.meta.url).href;
       esbuildInitialized = fetch(wasmURL).then(async (r) => {
diff --git a/src/server/constants.ts b/src/server/constants.ts
index c8946bba14d..4c042593a1b 100644
--- a/src/server/constants.ts
+++ b/src/server/constants.ts
@@ -1,12 +1,19 @@
 import { INTERNAL_PREFIX } from "../runtime/utils.ts";
+import { toHashString } from "./deps.ts";
 
 export const REFRESH_JS_URL = `${INTERNAL_PREFIX}/refresh.js`;
 export const ALIVE_URL = `${INTERNAL_PREFIX}/alive`;
-export const BUILD_ID = Deno.env.get("DENO_DEPLOYMENT_ID") ||
-  crypto.randomUUID();
 export const JS_PREFIX = `/js`;
 export const DEBUG = !Deno.env.get("DENO_DEPLOYMENT_ID");
 
+const deploymentId = Deno.env.get("DENO_DEPLOYMENT_ID") ||
+  crypto.randomUUID();
+const buildIdHash = await crypto.subtle.digest(
+  "SHA-1",
+  new TextEncoder().encode(deploymentId),
+);
+export const BUILD_ID = toHashString(buildIdHash, "hex");
+
 export function bundleAssetUrl(path: string) {
   return `${INTERNAL_PREFIX}${JS_PREFIX}/${BUILD_ID}${path}`;
 }
diff --git a/src/server/context.ts b/src/server/context.ts
index 77359bccbe6..0881c8e06fe 100644
--- a/src/server/context.ts
+++ b/src/server/context.ts
@@ -3,13 +3,13 @@ import {
   extname,
   fromFileUrl,
   RequestHandler,
-  rutt,
   Status,
   toFileUrl,
   typeByExtension,
   walk,
 } from "./deps.ts";
 import { h } from "preact";
+import * as router from "./router.ts";
 import { Manifest } from "./mod.ts";
 import { Bundler, JSXConfig } from "./bundle.ts";
 import { ALIVE_URL, BUILD_ID, JS_PREFIX, REFRESH_JS_URL } from "./constants.ts";
@@ -22,6 +22,7 @@ import {
   Handler,
   Island,
   Middleware,
+  MiddlewareHandlerContext,
   MiddlewareModule,
   MiddlewareRoute,
   Plugin,
@@ -198,7 +199,7 @@ export class ServerContext {
           url,
           name,
           component,
-          handler: handler ?? ((req) => rutt.defaultOtherHandler(req)),
+          handler: handler ?? ((req) => router.defaultOtherHandler(req)),
           csp: Boolean(config?.csp ?? false),
         };
       } else if (
@@ -217,7 +218,7 @@ export class ServerContext {
           name,
           component,
           handler: handler ??
-            ((req, ctx) => rutt.defaultErrorHandler(req, ctx, ctx.error)),
+            ((req, ctx) => router.defaultErrorHandler(req, ctx, ctx.error)),
           csp: Boolean(config?.csp ?? false),
         };
       }
@@ -310,20 +311,21 @@ export class ServerContext {
    * by fresh, including static files.
    */
   handler(): RequestHandler {
-    const inner = rutt.router<RouterState>(...this.#handlers());
-    const withMiddlewares = this.#composeMiddlewares(this.#middlewares);
+    const handlers = this.#handlers();
+    const inner = router.router<RouterState>(handlers);
+    const withMiddlewares = this.#composeMiddlewares(
+      this.#middlewares,
+      handlers.errorHandler,
+    );
     return async function handler(req: Request, connInfo: ConnInfo) {
-      // Redirect requests that end with a trailing slash
-      // to their non-trailing slash counterpart.
-      // Ex: /about/ -> /about
+      // Redirect requests that end with a trailing slash to their non-trailing
+      // slash counterpart.
       const url = new URL(req.url);
-      if (url.pathname.length > 1 && url.pathname.endsWith("/")) {
-        url.pathname = url.pathname.slice(0, -1);
+      if (cleanPathname(url)) {
         return Response.redirect(url.href, Status.TemporaryRedirect);
       }
 
-      // HEAD requests should be handled as GET requests
-      // but without the body.
+      // HEAD requests should be handled as GET requests but without the body.
       const originalMethod = req.method;
       // Internally, HEAD is handled in the same way as GET.
       if (req.method === "HEAD") {
@@ -346,11 +348,14 @@ export class ServerContext {
    * Identify which middlewares should be applied for a request,
    * chain them and return a handler response
    */
-  #composeMiddlewares(middlewares: MiddlewareRoute[]) {
+  #composeMiddlewares(
+    middlewares: MiddlewareRoute[],
+    errorHandler: router.ErrorHandler<RouterState>,
+  ) {
     return (
       req: Request,
       connInfo: ConnInfo,
-      inner: rutt.Handler<RouterState>,
+      inner: router.FinalHandler<RouterState>,
     ) => {
       // identify middlewares to apply, if any.
       // middlewares should be already sorted from deepest to shallow layer
@@ -358,30 +363,38 @@ export class ServerContext {
 
       const handlers: (() => Response | Promise<Response>)[] = [];
 
-      const ctx = {
+      const middlewareCtx: MiddlewareHandlerContext = {
         next() {
           const handler = handlers.shift()!;
           return Promise.resolve(handler());
         },
         ...connInfo,
         state: {},
+        destination: "route",
       };
 
       for (const mw of mws) {
         if (mw.handler instanceof Array) {
           for (const handler of mw.handler) {
-            handlers.push(() => handler(req, ctx));
+            handlers.push(() => handler(req, middlewareCtx));
           }
         } else {
           const handler = mw.handler;
-          handlers.push(() => handler(req, ctx));
+          handlers.push(() => handler(req, middlewareCtx));
         }
       }
 
-      handlers.push(() => inner(req, ctx));
-
-      const handler = handlers.shift()!;
-      return handler();
+      const ctx = {
+        ...connInfo,
+        state: middlewareCtx.state,
+      };
+      const { destination, handler } = inner(
+        req,
+        ctx,
+      );
+      handlers.push(handler);
+      middlewareCtx.destination = destination;
+      return middlewareCtx.next().catch((e) => errorHandler(req, ctx, e));
     };
   }
 
@@ -389,48 +402,53 @@ export class ServerContext {
    * This function returns all routes required by fresh as an extended
    * path-to-regex, to handler mapping.
    */
-  #handlers(): [
-    rutt.Routes<RouterState>,
-    {
-      otherHandler: rutt.Handler<RouterState>;
-      errorHandler: rutt.ErrorHandler<RouterState>;
-    },
-  ] {
-    const routes: rutt.Routes<RouterState> = {};
-
-    routes[`${INTERNAL_PREFIX}${JS_PREFIX}/${BUILD_ID}/:path*`] = this
-      .#bundleAssetRoute();
-
+  #handlers(): {
+    internalRoutes: router.Routes<RouterState>;
+    staticRoutes: router.Routes<RouterState>;
+    routes: router.Routes<RouterState>;
+
+    otherHandler: router.Handler<RouterState>;
+    errorHandler: router.ErrorHandler<RouterState>;
+  } {
+    const internalRoutes: router.Routes<RouterState> = {};
+    const staticRoutes: router.Routes<RouterState> = {};
+    const routes: router.Routes<RouterState> = {};
+
+    internalRoutes[`${INTERNAL_PREFIX}${JS_PREFIX}/${BUILD_ID}/:path*`] = {
+      default: this.#bundleAssetRoute(),
+    };
     if (this.#dev) {
-      routes[REFRESH_JS_URL] = () => {
-        const js =
-          `new EventSource("${ALIVE_URL}").addEventListener("message", function listener(e) { if (e.data !== "${BUILD_ID}") { this.removeEventListener('message', listener); location.reload(); } });`;
-        return new Response(js, {
-          headers: {
-            "content-type": "application/javascript; charset=utf-8",
-          },
-        });
+      internalRoutes[REFRESH_JS_URL] = {
+        default: () => {
+          return new Response(refreshJs(ALIVE_URL, BUILD_ID), {
+            headers: {
+              "content-type": "application/javascript; charset=utf-8",
+            },
+          });
+        },
       };
-      routes[ALIVE_URL] = () => {
-        let timerId: number | undefined = undefined;
-        const body = new ReadableStream({
-          start(controller) {
-            controller.enqueue(`data: ${BUILD_ID}\nretry: 100\n\n`);
-            timerId = setInterval(() => {
-              controller.enqueue(`data: ${BUILD_ID}\n\n`);
-            }, 1000);
-          },
-          cancel() {
-            if (timerId !== undefined) {
-              clearInterval(timerId);
-            }
-          },
-        });
-        return new Response(body.pipeThrough(new TextEncoderStream()), {
-          headers: {
-            "content-type": "text/event-stream",
-          },
-        });
+      internalRoutes[ALIVE_URL] = {
+        default: () => {
+          let timerId: number | undefined = undefined;
+          const body = new ReadableStream({
+            start(controller) {
+              controller.enqueue(`data: ${BUILD_ID}\nretry: 100\n\n`);
+              timerId = setInterval(() => {
+                controller.enqueue(`data: ${BUILD_ID}\n\n`);
+              }, 1000);
+            },
+            cancel() {
+              if (timerId !== undefined) {
+                clearInterval(timerId);
+              }
+            },
+          });
+          return new Response(body.pipeThrough(new TextEncoderStream()), {
+            headers: {
+              "content-type": "text/event-stream",
+            },
+          });
+        },
       };
     }
 
@@ -442,12 +460,14 @@ export class ServerContext {
       const { localUrl, path, size, contentType, etag } of this.#staticFiles
     ) {
       const route = sanitizePathToRegex(path);
-      routes[`GET@${route}`] = this.#staticFileHandler(
-        localUrl,
-        size,
-        contentType,
-        etag,
-      );
+      staticRoutes[route] = {
+        "GET": this.#staticFileHandler(
+          localUrl,
+          size,
+          contentType,
+          etag,
+        ),
+      };
     }
 
     const genRender = <Data = undefined>(
@@ -521,16 +541,23 @@ export class ServerContext {
     for (const route of this.#routes) {
       const createRender = genRender(route, Status.OK);
       if (typeof route.handler === "function") {
-        routes[route.pattern] = (req, ctx, params) =>
-          (route.handler as Handler)(req, {
-            ...ctx,
-            params,
-            render: createRender(req, params),
-            renderNotFound: createUnknownRender(req, {}),
-          });
+        routes[route.pattern] = {
+          default: (req, ctx, params) =>
+            (route.handler as Handler)(req, {
+              ...ctx,
+              params,
+              render: createRender(req, params),
+              renderNotFound: createUnknownRender(req, {}),
+            }),
+        };
       } else {
+        routes[route.pattern] = {};
         for (const [method, handler] of Object.entries(route.handler)) {
-          routes[`${method}@${route.pattern}`] = (req, ctx, params) =>
+          routes[route.pattern][method as router.KnownMethod] = (
+            req,
+            ctx,
+            params,
+          ) =>
             handler(req, {
               ...ctx,
               params,
@@ -541,7 +568,7 @@ export class ServerContext {
       }
     }
 
-    const otherHandler: rutt.Handler<RouterState> = (
+    const otherHandler: router.Handler<RouterState> = (
       req,
       ctx,
     ) =>
@@ -557,7 +584,7 @@ export class ServerContext {
       this.#error,
       Status.InternalServerError,
     );
-    const errorHandler: rutt.ErrorHandler<RouterState> = (
+    const errorHandler: router.ErrorHandler<RouterState> = (
       req,
       ctx,
       error,
@@ -577,7 +604,7 @@ export class ServerContext {
       );
     };
 
-    return [routes, { otherHandler, errorHandler }];
+    return { internalRoutes, staticRoutes, routes, otherHandler, errorHandler };
   }
 
   #staticFileHandler(
@@ -585,7 +612,7 @@ export class ServerContext {
     size: number,
     contentType: string,
     etag: string,
-  ): rutt.MatchHandler {
+  ): router.MatchHandler {
     return async (req: Request) => {
       const url = new URL(req.url);
       const key = url.searchParams.get(ASSET_CACHE_BUST_KEY);
@@ -623,7 +650,7 @@ export class ServerContext {
    * Returns a router that contains all fresh routes. Should be mounted at
    * constants.INTERNAL_PREFIX
    */
-  #bundleAssetRoute = (): rutt.MatchHandler => {
+  #bundleAssetRoute = (): router.MatchHandler => {
     return async (_req, _ctx, params) => {
       const path = `/${params.path}`;
       const file = await this.#bundler.get(path);
@@ -663,7 +690,7 @@ const DEFAULT_NOT_FOUND: UnknownPage = {
   pattern: "",
   url: "",
   name: "_404",
-  handler: (req) => rutt.defaultOtherHandler(req),
+  handler: (req) => router.defaultOtherHandler(req),
   csp: false,
 };
 
@@ -793,3 +820,31 @@ export function middlewarePathToPattern(baseRoute: string) {
   const compiledPattern = new URLPattern({ pathname: pattern });
   return { pattern, compiledPattern };
 }
+
+function refreshJs(aliveUrl: string, buildId: string) {
+  return `let es = new EventSource("${aliveUrl}");
+window.addEventListener("beforeunload", (event) => {
+  es.close();
+});
+es.addEventListener("message", function listener(e) {
+  if (e.data !== "${buildId}") {
+    this.removeEventListener("message", listener);
+    location.reload();
+  }
+});`;
+}
+
+/**
+ * Clean the pathname in the given URL by removing all trailing slashes.
+ *
+ * Returns true if the pathname was changed.
+ */
+export function cleanPathname(url: URL): boolean {
+  const pathname = url.pathname.replace(/\/+$/, "");
+  if (pathname === "") return false;
+  if (pathname !== url.pathname) {
+    url.pathname = pathname;
+    return true;
+  }
+  return false;
+}
diff --git a/src/server/deps.ts b/src/server/deps.ts
index 00e7cc52673..f333b97a747 100644
--- a/src/server/deps.ts
+++ b/src/server/deps.ts
@@ -15,15 +15,14 @@ export { Status } from "https://deno.land/std@0.178.0/http/http_status.ts";
 export {
   typeByExtension,
 } from "https://deno.land/std@0.178.0/media_types/mod.ts";
-
-// -- rutt --
-export * as rutt from "https://deno.land/x/rutt@0.1.0/mod.ts";
+export { toHashString } from "https://deno.land/std@0.178.0/crypto/to_hash_string.ts";
 
 // -- esbuild --
 // @deno-types="https://deno.land/x/esbuild@v0.17.11/mod.d.ts"
 import * as esbuildWasm from "https://deno.land/x/esbuild@v0.17.11/wasm.js";
 import * as esbuildNative from "https://deno.land/x/esbuild@v0.17.11/mod.js";
 // @ts-ignore trust me
+// deno-lint-ignore no-deprecated-deno-api
 const esbuild: typeof esbuildWasm = Deno.run === undefined
   ? esbuildWasm
   : esbuildNative;
diff --git a/src/server/router.ts b/src/server/router.ts
new file mode 100644
index 00000000000..24a7f15d22d
--- /dev/null
+++ b/src/server/router.ts
@@ -0,0 +1,193 @@
+import type { ConnInfo } from "./deps.ts";
+
+type HandlerContext<T = unknown> = T & ConnInfo;
+
+export type Handler<T = unknown> = (
+  req: Request,
+  ctx: HandlerContext<T>,
+) => Response | Promise<Response>;
+
+export type FinalHandler<T = unknown> = (
+  req: Request,
+  ctx: HandlerContext<T>,
+) => {
+  destination: DestinationKind;
+  handler: () => Response | Promise<Response>;
+};
+
+export type ErrorHandler<T = unknown> = (
+  req: Request,
+  ctx: HandlerContext<T>,
+  err: unknown,
+) => Response | Promise<Response>;
+
+type UnknownMethodHandler<T = unknown> = (
+  req: Request,
+  ctx: HandlerContext<T>,
+  knownMethods: KnownMethod[],
+) => Response | Promise<Response>;
+
+export type MatchHandler<T = unknown> = (
+  req: Request,
+  ctx: HandlerContext<T>,
+  match: Record<string, string>,
+) => Response | Promise<Response>;
+
+// deno-lint-ignore ban-types
+export interface Routes<T = {}> {
+  [key: string]: { [K in KnownMethod | "default"]?: MatchHandler<T> };
+}
+
+export type DestinationKind = "internal" | "static" | "route" | "notFound";
+
+// deno-lint-ignore ban-types
+export type InternalRoute<T = {}> = {
+  pattern: URLPattern;
+  methods: { [K in KnownMethod]?: MatchHandler<T> };
+  default?: MatchHandler<T>;
+  destination: DestinationKind;
+};
+
+export interface RouterOptions<T> {
+  internalRoutes: Routes<T>;
+  staticRoutes: Routes<T>;
+  routes: Routes<T>;
+  otherHandler: Handler<T>;
+  errorHandler: ErrorHandler<T>;
+  unknownMethodHandler?: UnknownMethodHandler<T>;
+}
+
+export type KnownMethod = typeof knownMethods[number];
+
+export const knownMethods = [
+  "GET",
+  "HEAD",
+  "POST",
+  "PUT",
+  "DELETE",
+  "OPTIONS",
+  "PATCH",
+] as const;
+
+export function defaultOtherHandler(_req: Request): Response {
+  return new Response(null, {
+    status: 404,
+  });
+}
+
+export function defaultErrorHandler(
+  _req: Request,
+  _ctx: HandlerContext,
+  err: unknown,
+): Response {
+  console.error(err);
+
+  return new Response(null, {
+    status: 500,
+  });
+}
+
+export function defaultUnknownMethodHandler(
+  _req: Request,
+  _ctx: HandlerContext,
+  knownMethods: KnownMethod[],
+): Response {
+  return new Response(null, {
+    status: 405,
+    headers: {
+      Accept: knownMethods.join(", "),
+    },
+  });
+}
+
+function processRoutes<T>(
+  processedRoutes: InternalRoute<T>[],
+  routes: Routes<T>,
+  destination: DestinationKind,
+) {
+  for (const [path, methods] of Object.entries(routes)) {
+    const entry: InternalRoute<T> = {
+      pattern: new URLPattern({ pathname: path }),
+      methods: {},
+      default: undefined,
+      destination,
+    };
+
+    for (const [method, handler] of Object.entries(methods)) {
+      if (method === "default") {
+        entry.default = handler;
+      } else if (knownMethods.includes(method as KnownMethod)) {
+        entry.methods[method as KnownMethod] = handler;
+      }
+    }
+
+    processedRoutes.push(entry);
+  }
+}
+
+export function router<T = unknown>(
+  {
+    internalRoutes,
+    staticRoutes,
+    routes,
+    otherHandler,
+    unknownMethodHandler,
+  }: RouterOptions<T>,
+): FinalHandler<T> {
+  unknownMethodHandler ??= defaultUnknownMethodHandler;
+
+  const processedRoutes: InternalRoute<T>[] = [];
+  processRoutes(processedRoutes, internalRoutes, "internal");
+  processRoutes(processedRoutes, staticRoutes, "static");
+  processRoutes(processedRoutes, routes, "route");
+
+  return (req, ctx) => {
+    for (const route of processedRoutes) {
+      const res = route.pattern.exec(req.url);
+
+      if (res !== null) {
+        const groups: Record<string, string> = {};
+        const matched = res?.pathname.groups;
+
+        for (const key in matched) {
+          const value = matched[key];
+
+          if (value !== undefined) {
+            groups[key] = decodeURIComponent(value);
+          }
+        }
+
+        for (const [method, handler] of Object.entries(route.methods)) {
+          if (req.method === method) {
+            return {
+              destination: route.destination,
+              handler: () => handler(req, ctx, groups),
+            };
+          }
+        }
+
+        if (route.default) {
+          return {
+            destination: route.destination,
+            handler: () => route.default!(req, ctx, groups),
+          };
+        } else {
+          return {
+            destination: route.destination,
+            handler: () =>
+              unknownMethodHandler!(
+                req,
+                ctx,
+                Object.keys(route.methods) as KnownMethod[],
+              ),
+          };
+        }
+      }
+    }
+
+    return {
+      destination: "notFound",
+      handler: () => otherHandler!(req, ctx),
+    };
+  };
+}
diff --git a/src/server/types.ts b/src/server/types.ts
index 0765ce7637f..e52ab3a4425 100644
--- a/src/server/types.ts
+++ b/src/server/types.ts
@@ -1,5 +1,6 @@
 import { ComponentType } from "preact";
-import { ConnInfo, rutt, ServeInit } from "./deps.ts";
+import { ConnInfo, ServeInit } from "./deps.ts";
+import * as router from "./router.ts";
 import { InnerRenderFunction, RenderContext } from "./render.ts";
 
 // --- APPLICATION CONFIGURATION ---
@@ -87,7 +88,7 @@ export type Handler<T = any, State = Record<string, unknown>> = (
 
 // deno-lint-ignore no-explicit-any
 export type Handlers<T = any, State = Record<string, unknown>> = {
-  [K in typeof rutt.knownMethods[number]]?: Handler<T, State>;
+  [K in router.KnownMethod]?: Handler<T, State>;
 };
 
 export interface RouteModule {
@@ -200,6 +201,7 @@ export interface MiddlewareHandlerContext<State = Record<string, unknown>>
   extends ConnInfo {
   next: () => Promise<Response>;
   state: State;
+  destination: router.DestinationKind;
 }
 
 export interface MiddlewareRoute extends Middleware {
diff --git a/tests/cli_test.ts b/tests/cli_test.ts
index 4f26f90fc19..a3c06f0da1e 100644
--- a/tests/cli_test.ts
+++ b/tests/cli_test.ts
@@ -8,6 +8,8 @@ import {
   retry,
   TextLineStream,
 } from "./deps.ts";
+import * as path from "$std/path/mod.ts";
+import { assertNotMatch } from "https://deno.land/std@0.178.0/testing/asserts.ts";
 
 type FileTree = {
   type: "file";
@@ -250,6 +252,7 @@ Deno.test({
               { "type": "file", "name": "extensions.json" },
             ],
           },
+          { "type": "file", "name": ".gitignore" },
         ],
       },
     ];
@@ -371,3 +374,27 @@ Deno.test("fresh-init error(help)", async function (t) {
     },
   );
 });
+
+Deno.test("fresh-init .", async function (t) {
+  // Preparation
+  const tmpDirName = await Deno.makeTempDir();
+
+  await t.step("execute init command", async () => {
+    const cliProcess = new Deno.Command(Deno.execPath(), {
+      args: [
+        "run",
+        "-A",
+        path.join(Deno.cwd(), "init.ts"),
+        ".",
+      ],
+      cwd: tmpDirName,
+      stdin: "null",
+      stdout: "piped",
+      stderr: "piped",
+    });
+    const { code, stdout } = await cliProcess.output();
+    const output = new TextDecoder().decode(stdout);
+    assertNotMatch(output, /Enter your project directory/);
+    assertEquals(code, 0);
+  });
+});
diff --git a/tests/deps.ts b/tests/deps.ts
index 4a9217d1bd1..22f8b1ab3ea 100644
--- a/tests/deps.ts
+++ b/tests/deps.ts
@@ -14,4 +14,7 @@ export {
 } from "https://deno.land/std@0.178.0/streams/text_line_stream.ts";
 export { delay } from "https://deno.land/std@0.178.0/async/delay.ts";
 export { retry } from "https://deno.land/std@0.178.0/async/retry.ts";
-export { default as puppeteer } from "https://deno.land/x/puppeteer@16.2.0/mod.ts";
+export {
+  default as puppeteer,
+  Page,
+} from "https://deno.land/x/puppeteer@16.2.0/mod.ts";
diff --git a/tests/fixture/deno.json b/tests/fixture/deno.json
index e99326100e2..a5d3115d3f8 100644
--- a/tests/fixture/deno.json
+++ b/tests/fixture/deno.json
@@ -1,4 +1,5 @@
 {
+  "lock": false,
   "importMap": "./import_map.json",
   "compilerOptions": {
     "jsx": "react-jsx",
diff --git a/tests/fixture/fresh.gen.ts b/tests/fixture/fresh.gen.ts
index 3060b7c8f0b..2e21274d45d 100644
--- a/tests/fixture/fresh.gen.ts
+++ b/tests/fixture/fresh.gen.ts
@@ -18,22 +18,26 @@ import * as $11 from "./routes/index.tsx";
 import * as $12 from "./routes/intercept.tsx";
 import * as $13 from "./routes/intercept_args.tsx";
 import * as $14 from "./routes/islands/index.tsx";
-import * as $15 from "./routes/layeredMdw/_middleware.ts";
-import * as $16 from "./routes/layeredMdw/layer2-no-mw/without_mw.ts";
-import * as $17 from "./routes/layeredMdw/layer2/_middleware.ts";
-import * as $18 from "./routes/layeredMdw/layer2/abc.ts";
-import * as $19 from "./routes/layeredMdw/layer2/index.ts";
-import * as $20 from "./routes/layeredMdw/layer2/layer3/[id].ts";
-import * as $21 from "./routes/layeredMdw/layer2/layer3/_middleware.ts";
-import * as $22 from "./routes/middleware_root.ts";
-import * as $23 from "./routes/not_found.ts";
-import * as $24 from "./routes/params.tsx";
-import * as $25 from "./routes/props/[id].tsx";
-import * as $26 from "./routes/static.tsx";
-import * as $27 from "./routes/wildcard.tsx";
+import * as $15 from "./routes/islands/root_fragment.tsx";
+import * as $16 from "./routes/islands/root_fragment_conditional_first.tsx";
+import * as $17 from "./routes/layeredMdw/_middleware.ts";
+import * as $18 from "./routes/layeredMdw/layer2-no-mw/without_mw.ts";
+import * as $19 from "./routes/layeredMdw/layer2/_middleware.ts";
+import * as $20 from "./routes/layeredMdw/layer2/abc.ts";
+import * as $21 from "./routes/layeredMdw/layer2/index.ts";
+import * as $22 from "./routes/layeredMdw/layer2/layer3/[id].ts";
+import * as $23 from "./routes/layeredMdw/layer2/layer3/_middleware.ts";
+import * as $24 from "./routes/middleware_root.ts";
+import * as $25 from "./routes/not_found.ts";
+import * as $26 from "./routes/params.tsx";
+import * as $27 from "./routes/props/[id].tsx";
+import * as $28 from "./routes/static.tsx";
+import * as $29 from "./routes/wildcard.tsx";
 import * as $$0 from "./islands/Counter.tsx";
-import * as $$1 from "./islands/Test.tsx";
-import * as $$2 from "./islands/kebab-case-counter-test.tsx";
+import * as $$1 from "./islands/RootFragment.tsx";
+import * as $$2 from "./islands/RootFragmentWithConditionalFirst.tsx";
+import * as $$3 from "./islands/Test.tsx";
+import * as $$4 from "./islands/kebab-case-counter-test.tsx";
 
 const manifest = {
   routes: {
@@ -52,24 +56,28 @@ const manifest = {
     "./routes/intercept.tsx": $12,
     "./routes/intercept_args.tsx": $13,
     "./routes/islands/index.tsx": $14,
-    "./routes/layeredMdw/_middleware.ts": $15,
-    "./routes/layeredMdw/layer2-no-mw/without_mw.ts": $16,
-    "./routes/layeredMdw/layer2/_middleware.ts": $17,
-    "./routes/layeredMdw/layer2/abc.ts": $18,
-    "./routes/layeredMdw/layer2/index.ts": $19,
-    "./routes/layeredMdw/layer2/layer3/[id].ts": $20,
-    "./routes/layeredMdw/layer2/layer3/_middleware.ts": $21,
-    "./routes/middleware_root.ts": $22,
-    "./routes/not_found.ts": $23,
-    "./routes/params.tsx": $24,
-    "./routes/props/[id].tsx": $25,
-    "./routes/static.tsx": $26,
-    "./routes/wildcard.tsx": $27,
+    "./routes/islands/root_fragment.tsx": $15,
+    "./routes/islands/root_fragment_conditional_first.tsx": $16,
+    "./routes/layeredMdw/_middleware.ts": $17,
+    "./routes/layeredMdw/layer2-no-mw/without_mw.ts": $18,
+    "./routes/layeredMdw/layer2/_middleware.ts": $19,
+    "./routes/layeredMdw/layer2/abc.ts": $20,
+    "./routes/layeredMdw/layer2/index.ts": $21,
+    "./routes/layeredMdw/layer2/layer3/[id].ts": $22,
+    "./routes/layeredMdw/layer2/layer3/_middleware.ts": $23,
+    "./routes/middleware_root.ts": $24,
+    "./routes/not_found.ts": $25,
+    "./routes/params.tsx": $26,
+    "./routes/props/[id].tsx": $27,
+    "./routes/static.tsx": $28,
+    "./routes/wildcard.tsx": $29,
   },
   islands: {
     "./islands/Counter.tsx": $$0,
-    "./islands/Test.tsx": $$1,
-    "./islands/kebab-case-counter-test.tsx": $$2,
+    "./islands/RootFragment.tsx": $$1,
+    "./islands/RootFragmentWithConditionalFirst.tsx": $$2,
+    "./islands/Test.tsx": $$3,
+    "./islands/kebab-case-counter-test.tsx": $$4,
   },
   baseUrl: import.meta.url,
   config,
diff --git a/tests/fixture/islands/RootFragment.tsx b/tests/fixture/islands/RootFragment.tsx
new file mode 100644
index 00000000000..9f1a268e5a2
--- /dev/null
+++ b/tests/fixture/islands/RootFragment.tsx
@@ -0,0 +1,15 @@
+import { useState } from "preact/hooks";
+
+export default function RootFragment() {
+  const [shown, setShown] = useState(false);
+
+  return (
+    <>
+      Hello
+      <div onClick={() => setShown(true)} id="root-fragment-click-me">
+        World
+      </div>
+      {shown && <div>I'm rendered now</div>}
+    </>
+  );
+}
diff --git a/tests/fixture/islands/RootFragmentWithConditionalFirst.tsx b/tests/fixture/islands/RootFragmentWithConditionalFirst.tsx
new file mode 100644
index 00000000000..1023615bdec
--- /dev/null
+++ b/tests/fixture/islands/RootFragmentWithConditionalFirst.tsx
@@ -0,0 +1,18 @@
+import { useState } from "preact/hooks";
+
+export default function RootFragmentWithConditionalFirst() {
+  const [shown, setShown] = useState(false);
+
+  return (
+    <>
+      {shown && <div>I'm rendered on top</div>}
+      Hello
+      <div
+        onClick={() => setShown(true)}
+        id="root-fragment-conditional-first-click-me"
+      >
+        World
+      </div>
+    </>
+  );
+}
diff --git a/tests/fixture/polyfill_deno_deploy.ts b/tests/fixture/polyfill_deno_deploy.ts
index c56adf826f2..73380028741 100644
--- a/tests/fixture/polyfill_deno_deploy.ts
+++ b/tests/fixture/polyfill_deno_deploy.ts
@@ -1,4 +1,5 @@
 // Simulate Deno Deploy environment
 
 //@ts-ignore: Remove Deno.run for simulating deno deploy env
+// deno-lint-ignore no-deprecated-deno-api
 delete Deno.run;
diff --git a/tests/fixture/routes/_middleware.ts b/tests/fixture/routes/_middleware.ts
index 526a865c202..99632588a89 100644
--- a/tests/fixture/routes/_middleware.ts
+++ b/tests/fixture/routes/_middleware.ts
@@ -50,8 +50,18 @@ async function rootHandler(
   return resp;
 }
 
+async function kindHandler(
+  _req: Request,
+  ctx: MiddlewareHandlerContext,
+) {
+  const resp = await ctx.next();
+  resp.headers.set("destination", ctx.destination);
+  return resp;
+}
+
 export const handler: MiddlewareHandler | MiddlewareHandler[] = [
   rootHandler,
   logHandler,
+  kindHandler,
   corsHandler,
 ];
diff --git a/tests/fixture/routes/islands/root_fragment.tsx b/tests/fixture/routes/islands/root_fragment.tsx
new file mode 100644
index 00000000000..a612a624089
--- /dev/null
+++ b/tests/fixture/routes/islands/root_fragment.tsx
@@ -0,0 +1,9 @@
+import RootFragment from "../../islands/RootFragment.tsx";
+
+export default function Home() {
+  return (
+    <div id="island-parent">
+      <RootFragment />
+    </div>
+  );
+}
diff --git a/tests/fixture/routes/islands/root_fragment_conditional_first.tsx b/tests/fixture/routes/islands/root_fragment_conditional_first.tsx
new file mode 100644
index 00000000000..49a517a6750
--- /dev/null
+++ b/tests/fixture/routes/islands/root_fragment_conditional_first.tsx
@@ -0,0 +1,9 @@
+import RootFragmentWithConditionalFirst from "../../islands/RootFragmentWithConditionalFirst.tsx";
+
+export default function Home() {
+  return (
+    <div id="island-parent">
+      <RootFragmentWithConditionalFirst />
+    </div>
+  );
+}
diff --git a/tests/fixture_jsx_pragma/deno.json b/tests/fixture_jsx_pragma/deno.json
index 2d47694593e..28cb918d845 100644
--- a/tests/fixture_jsx_pragma/deno.json
+++ b/tests/fixture_jsx_pragma/deno.json
@@ -1,3 +1,4 @@
 {
+  "lock": false,
   "importMap": "./import-map.json"
 }
diff --git a/tests/fixture_plugin/deno.json b/tests/fixture_plugin/deno.json
index e99326100e2..a5d3115d3f8 100644
--- a/tests/fixture_plugin/deno.json
+++ b/tests/fixture_plugin/deno.json
@@ -1,4 +1,5 @@
 {
+  "lock": false,
   "importMap": "./import_map.json",
   "compilerOptions": {
     "jsx": "react-jsx",
diff --git a/tests/fixture_twind_hydrate/deno.json b/tests/fixture_twind_hydrate/deno.json
index 8d9ac336cfe..b691b285acd 100644
--- a/tests/fixture_twind_hydrate/deno.json
+++ b/tests/fixture_twind_hydrate/deno.json
@@ -1,4 +1,5 @@
 {
+  "lock": false,
   "tasks": {
     "start": "deno run -A --watch=static/,routes/ dev.ts"
   },
diff --git a/tests/islands_test.ts b/tests/islands_test.ts
index bad8d121e7e..67b6d595a7d 100644
--- a/tests/islands_test.ts
+++ b/tests/islands_test.ts
@@ -2,6 +2,7 @@ import {
   assert,
   assertStringIncludes,
   delay,
+  Page,
   puppeteer,
   TextLineStream,
 } from "./deps.ts";
@@ -9,133 +10,198 @@ import {
 Deno.test({
   name: "island tests",
   async fn(t) {
-    // Preparation
-    const serverProcess = new Deno.Command(Deno.execPath(), {
-      args: ["run", "-A", "./tests/fixture/main.ts"],
-      stdout: "piped",
-      stderr: "inherit",
-    }).spawn();
-
-    const decoder = new TextDecoderStream();
-    const lines = serverProcess.stdout
-      .pipeThrough(decoder)
-      .pipeThrough(new TextLineStream());
-
-    let started = false;
-    for await (const line of lines) {
-      if (line.includes("Listening on http://")) {
-        started = true;
-        break;
+    await withPage(async (page) => {
+      async function counterTest(counterId: string, originalValue: number) {
+        const pElem = await page.waitForSelector(`#${counterId} > p`);
+
+        let value = await pElem?.evaluate((el) => el.textContent);
+        assert(value === `${originalValue}`, `${counterId} first value`);
+
+        const buttonPlus = await page.$(`#b-${counterId}`);
+        await buttonPlus?.click();
+
+        await delay(100);
+
+        value = await pElem?.evaluate((el) => el.textContent);
+        assert(value === `${originalValue + 1}`, `${counterId} click`);
       }
-    }
-    if (!started) {
+
+      await page.goto("http://localhost:8000/islands", {
+        waitUntil: "networkidle2",
+      });
+
+      await t.step("Ensure 3 islands on 1 page are revived", async () => {
+        await counterTest("counter1", 3);
+        await counterTest("counter2", 10);
+        await counterTest("kebab-case-file-counter", 5);
+      });
+
+      await t.step("Ensure an island revive an img 'hash' path", async () => {
+        // Ensure src path has __frsh_c=
+        const pElem = await page.waitForSelector(`#img-in-island`);
+        const srcString = (await pElem?.getProperty("src"))?.toString()!;
+        assertStringIncludes(srcString, "image.png?__frsh_c=");
+
+        // Ensure src path is the same as server rendered
+        const resp = await fetch(new Request("http://localhost:8000/islands"));
+        const body = await resp.text();
+
+        const imgFilePath = body.match(/img id="img-in-island" src="(.*?)"/)
+          ?.[1]!;
+        assertStringIncludes(srcString, imgFilePath);
+      });
+    });
+  },
+
+  sanitizeOps: false,
+  sanitizeResources: false,
+});
+
+async function withPage(fn: (page: Page) => Promise<void>) {
+  const serverProcess = new Deno.Command(Deno.execPath(), {
+    args: ["run", "-A", "./tests/fixture/main.ts"],
+    stdout: "piped",
+    stderr: "inherit",
+  }).spawn();
+
+  const textDecoderStream = new TextDecoderStream();
+  const textLineStream = new TextLineStream();
+
+  const lines = serverProcess.stdout
+    .pipeThrough(textDecoderStream)
+    .pipeThrough(textLineStream);
+
+  try {
+    if (!await didServerStart(lines)) {
       throw new Error("Server didn't start up");
     }
 
     await delay(100);
-
     const browser = await puppeteer.launch({ args: ["--no-sandbox"] });
-    const page = await browser.newPage();
-
-    async function counterTest(counterId: string, originalValue: number) {
-      const pElem = await page.waitForSelector(`#${counterId} > p`);
-      let value = await pElem?.evaluate((el) => el.textContent);
-      assert(value === `${originalValue}`, `${counterId} first value`);
 
-      const buttonPlus = await page.$(`#b-${counterId}`);
-      await buttonPlus?.click();
-      await delay(100);
-      value = await pElem?.evaluate((el) => el.textContent);
-      assert(value === `${originalValue + 1}`, `${counterId} click`);
+    try {
+      const page = await browser.newPage();
+      await fn(page);
+    } finally {
+      await browser.close();
     }
+  } finally {
+    await lines.cancel();
 
-    await page.goto("http://localhost:8000/islands", {
-      waitUntil: "networkidle2",
-    });
+    serverProcess.kill("SIGTERM");
 
-    await t.step("Ensure 3 islands on 1 page are revived", async () => {
-      await counterTest("counter1", 3);
-      await counterTest("counter2", 10);
-      await counterTest("kebab-case-file-counter", 5);
-    });
+    // Wait until the process exits
+    await serverProcess.status;
+  }
+}
+
+async function didServerStart(
+  stdoutLines: ReadableStream<string>,
+): Promise<boolean> {
+  for await (const line of stdoutLines) {
+    if (line.includes("Listening on http://")) {
+      return true;
+    }
+  }
 
-    await t.step("Ensure an island revive an img 'hash' path", async () => {
-      // Ensure src path has __frsh_c=
-      const pElem = await page.waitForSelector(`#img-in-island`);
-      const srcString = (await pElem?.getProperty("src"))?.toString()!;
-      assertStringIncludes(srcString, "image.png?__frsh_c=");
-
-      // Ensure src path is the same as server rendered
-      const resp = await fetch(new Request("http://localhost:8000/islands"));
-      const body = await resp.text();
-      const imgFilePath = body.match(/img id="img-in-island" src="(.*?)"/)
-        ?.[1]!;
-      assertStringIncludes(srcString, imgFilePath);
-    });
+  return false;
+}
 
-    await browser.close();
+Deno.test({
+  name: "island tests with </script>",
 
-    await lines.cancel();
-    serverProcess.kill("SIGTERM");
+  async fn(t) {
+    await withPage(async (page) => {
+      page.on("dialog", () => {
+        assert(false, "There is XSS");
+      });
+
+      await page.goto("http://localhost:8000/evil", {
+        waitUntil: "networkidle2",
+      });
+
+      await t.step("prevent XSS on Island", async () => {
+        const bodyElem = await page.waitForSelector(`body`);
+        const value = await bodyElem?.evaluate((el) => el.getInnerHTML());
+
+        assertStringIncludes(
+          value,
+          `{"message":"\\u003c/script\\u003e\\u003cscript\\u003ealert('test')\\u003c/script\\u003e"}`,
+          `XSS is not escaped`,
+        );
+      });
+    });
   },
+
   sanitizeOps: false,
   sanitizeResources: false,
 });
 
 Deno.test({
-  name: "island tests with </script>",
-  async fn(t) {
-    // Preparation
-    const serverProcess = new Deno.Command(Deno.execPath(), {
-      args: ["run", "-A", "./tests/fixture/main.ts"],
-      stdout: "piped",
-      stderr: "inherit",
-    }).spawn();
-
-    const decoder = new TextDecoderStream();
-    const lines = serverProcess.stdout
-      .pipeThrough(decoder)
-      .pipeThrough(new TextLineStream());
-
-    let started = false;
-    for await (const line of lines) {
-      if (line.includes("Listening on http://")) {
-        started = true;
-        break;
-      }
-    }
-    if (!started) {
-      throw new Error("Server didn't start up");
-    }
+  name: "island with fragment as root",
 
-    await delay(100);
+  async fn(_t) {
+    await withPage(async (page) => {
+      await page.goto("http://localhost:8000/islands/root_fragment", {
+        waitUntil: "networkidle2",
+      });
 
-    const browser = await puppeteer.launch({ args: ["--no-sandbox"] });
-    const page = await browser.newPage();
-    page.on("dialog", () => {
-      assert(false, "There is XSS");
-    });
+      const clickableSelector = "#root-fragment-click-me";
+
+      await page.waitForSelector(clickableSelector);
+
+      const contentBeforeClick = await getIslandParentTextContent();
+      assert(contentBeforeClick === "HelloWorld");
+
+      await page.click(clickableSelector);
+      await delay(100);
+
+      const contentAfterClick = await getIslandParentTextContent();
+      assert(contentAfterClick === "HelloWorldI'm rendered now");
 
-    await page.goto("http://localhost:8000/evil", {
-      waitUntil: "networkidle2",
+      async function getIslandParentTextContent() {
+        return await page.$eval(
+          "#island-parent",
+          (el: Element) => el.textContent,
+        );
+      }
     });
+  },
 
-    await t.step("prevent XSS on Island", async () => {
-      const bodyElem = await page.waitForSelector(`body`);
-      const value = await bodyElem?.evaluate((el) => el.getInnerHTML());
+  sanitizeOps: false,
+  sanitizeResources: false,
+});
 
-      assertStringIncludes(
-        value,
-        `{"message":"\\u003c/script\\u003e\\u003cscript\\u003ealert('test')\\u003c/script\\u003e"}`,
-        `XSS is not escaped`,
+Deno.test({
+  name: "island with fragment as root and conditional child first",
+
+  async fn(_t) {
+    await withPage(async (page) => {
+      await page.goto(
+        "http://localhost:8000/islands/root_fragment_conditional_first",
+        {
+          waitUntil: "networkidle2",
+        },
       );
-    });
 
-    await browser.close();
+      const clickableSelector = "#root-fragment-conditional-first-click-me";
+      await page.waitForSelector(clickableSelector);
 
-    await lines.cancel();
-    serverProcess.kill("SIGTERM");
+      const contentBeforeClick = await getIslandParentTextContent(page);
+      assert(contentBeforeClick === "HelloWorld");
+
+      await page.click(clickableSelector);
+      await delay(100);
+
+      const contentAfterClick = await getIslandParentTextContent(page);
+      assert(contentAfterClick === "I'm rendered on topHelloWorld");
+    });
   },
+
   sanitizeOps: false,
   sanitizeResources: false,
 });
+
+async function getIslandParentTextContent(page: Page) {
+  return await page.$eval("#island-parent", (el: Element) => el.textContent);
+}
diff --git a/tests/main_test.ts b/tests/main_test.ts
index 5e8f7116e6e..c1cd23eb189 100644
--- a/tests/main_test.ts
+++ b/tests/main_test.ts
@@ -175,6 +175,38 @@ Deno.test("redirect /pages/fresh/ to /pages/fresh", async () => {
   );
 });
 
+Deno.test("redirect /pages/////fresh///// to /pages/////fresh", async () => {
+  const resp = await router(
+    new Request("https://fresh.deno.dev/pages/////fresh/////"),
+  );
+  assert(resp);
+  assertEquals(resp.status, Status.TemporaryRedirect);
+  assertEquals(
+    resp.headers.get("location"),
+    "https://fresh.deno.dev/pages/////fresh",
+  );
+});
+
+Deno.test("redirect /pages/////fresh/ to /pages/////fresh", async () => {
+  const resp = await router(
+    new Request("https://fresh.deno.dev/pages/////fresh/"),
+  );
+  assert(resp);
+  assertEquals(resp.status, Status.TemporaryRedirect);
+  assertEquals(
+    resp.headers.get("location"),
+    "https://fresh.deno.dev/pages/////fresh",
+  );
+});
+
+Deno.test("no redirect for /pages/////fresh", async () => {
+  const resp = await router(
+    new Request("https://fresh.deno.dev/pages/////fresh"),
+  );
+  assert(resp);
+  assertEquals(resp.status, Status.NotFound);
+});
+
 Deno.test("/failure", async () => {
   const resp = await router(new Request("https://fresh.deno.dev/failure"));
   assert(resp);
@@ -494,6 +526,38 @@ Deno.test({
   },
 });
 
+Deno.test("middleware destination", async (t) => {
+  await t.step("internal", async () => {
+    const resp = await router(
+      new Request("https://fresh.deno.dev/_frsh/refresh.js"),
+    );
+    assert(resp);
+    assertEquals(resp.headers.get("destination"), "internal");
+    await resp.body?.cancel();
+  });
+
+  await t.step("static", async () => {
+    const resp = await router(new Request("https://fresh.deno.dev/foo.txt"));
+    assert(resp);
+    assertEquals(resp.headers.get("destination"), "static");
+    await resp.body?.cancel();
+  });
+
+  await t.step("route", async () => {
+    const resp = await router(new Request("https://fresh.deno.dev/"));
+    assert(resp);
+    assertEquals(resp.headers.get("destination"), "route");
+    await resp.body?.cancel();
+  });
+
+  await t.step("notFound", async () => {
+    const resp = await router(new Request("https://fresh.deno.dev/bar/bar"));
+    assert(resp);
+    assertEquals(resp.headers.get("destination"), "notFound");
+    await resp.body?.cancel();
+  });
+});
+
 Deno.test("experimental Deno.serve", {
   sanitizeOps: false,
   sanitizeResources: false,
diff --git a/www/components/DocsTitle.tsx b/www/components/DocsTitle.tsx
index 35df7f5c01c..5a08c6b1538 100644
--- a/www/components/DocsTitle.tsx
+++ b/www/components/DocsTitle.tsx
@@ -3,7 +3,7 @@ export default function DocsTitle(props: { title: string }) {
     <>
       <a
         href="/"
-        class="text(2xl gray-900) block flex items-center"
+        class="text(2xl gray-900) flex items-center"
       >
         <svg
           preserveAspectRatio="xMinYMin"
diff --git a/www/components/gallery/Carousel.tsx b/www/components/gallery/Carousel.tsx
new file mode 100644
index 00000000000..008250d15b1
--- /dev/null
+++ b/www/components/gallery/Carousel.tsx
@@ -0,0 +1,199 @@
+import { tw } from "twind";
+import { asset } from "$fresh/runtime.ts";
+import { useSignal } from "@preact/signals";
+import { useEffect, useRef } from "preact/hooks";
+import IconCircleChevronsRight from "https://deno.land/x/tabler_icons_tsx@0.0.3/tsx/circle-chevrons-right.tsx";
+import IconCircleChevronsLeft from "https://deno.land/x/tabler_icons_tsx@0.0.3/tsx/circle-chevrons-left.tsx";
+
+const SLIDE_DATA = [
+  {
+    color: "bg-green-300",
+    text: "slide one",
+    url: asset("/illustration/deno-plush.svg"),
+  },
+  {
+    color: "bg-yellow-300",
+    text: "slide two",
+    url: asset("/illustration/lemon-squash.svg"),
+  },
+  {
+    color: "bg-blue-300",
+    text: "slide three",
+    url: asset("/illustration/deno-plush.svg"),
+  },
+  {
+    color: "bg-yellow-300",
+    text: "slide four",
+    url: asset("/illustration/lemon-squash.svg"),
+  },
+];
+
+type SlideProps = {
+  class?: string;
+  key?: number;
+  data: {
+    color: string;
+    text: string;
+    url: string;
+  };
+};
+
+const Slide = (props: SlideProps) => {
+  const { key, data } = props;
+  const { color, text, url } = data;
+  if (props.class === undefined) props.class = "";
+  return (
+    <div
+      key={key}
+      class={`${props.class} ${color} h-80 w-full text-center text-black p-5`}
+    >
+      {text}
+      <img src={url} />
+    </div>
+  );
+};
+
+type CarouselProps = {
+  showNavigation?: boolean;
+  interval?: number;
+  currentSlide?: number;
+  automatic?: boolean;
+  class?: string;
+};
+
+const Carousel = (props: CarouselProps) => {
+  const NAVIGATION_COLOR = `hover:text-gray-300 text-white`;
+  const CHEVRON_STYLE =
+    `absolute z-30 w-10 h-10 ${NAVIGATION_COLOR} cursor-pointer`;
+  const SHOW_NAVIGATION = props.showNavigation === false ? false : true;
+  const SLIDE_INTERVAL = props.interval ? props.interval : 3500;
+  const currentSlide = useSignal(props.currentSlide ? props.currentSlide : 0);
+  const automatic = useSignal(props.automatic === false ? false : true);
+  const slideshowRef = useRef<HTMLDivElement>(null);
+
+  const slideClasses = (idx = 0) => {
+    let outgoingSlide = currentSlide.value - 1;
+    let incomingSlide = currentSlide.value + 1;
+    if (outgoingSlide === -1) outgoingSlide = SLIDE_DATA.length - 1;
+    if (incomingSlide === SLIDE_DATA.length) incomingSlide = 0;
+    // console.log(outgoingSlide, currentSlide.value, incomingSlide)
+    const TRANSITION_CLASS = () => {
+      if (currentSlide.value === idx) return "translate-x-0 z-20";
+      if (incomingSlide === idx) return "translate-x-full z-10";
+      if (outgoingSlide === idx) return "-translate-x-full z-10";
+      return "translate-x-full";
+    };
+    return tw`slide absolute top-0 left-0 transition-all ease-in-out duration-700 transform ${TRANSITION_CLASS}`;
+  };
+
+  const nextSlide = () => {
+    if (SLIDE_DATA.length === currentSlide.value + 1) {
+      currentSlide.value = 0;
+    } else {
+      currentSlide.value++;
+    }
+  };
+
+  const previousSlide = () => {
+    if (currentSlide.value === 0) {
+      currentSlide.value = SLIDE_DATA.length - 1;
+    } else {
+      currentSlide.value--;
+    }
+  };
+
+  const chevronClick = (doCallback = () => {}) => {
+    if (automatic.value) automatic.value = false;
+    return doCallback();
+  };
+
+  useEffect(() => {
+    const interval = setInterval(() => {
+      if (automatic.value) nextSlide();
+    }, SLIDE_INTERVAL);
+    return () => clearInterval(interval);
+  }, []);
+
+  const ArrowKeyNavigation = () => {
+    const keydownHandler = (event: KeyboardEvent) => {
+      if (automatic.value) automatic.value = false;
+      switch (event.code) {
+        case "ArrowLeft":
+          event.preventDefault();
+          previousSlide();
+          break;
+        case "ArrowRight":
+          event.preventDefault();
+          nextSlide();
+          break;
+        default:
+          break;
+      }
+    };
+    slideshowRef.current?.addEventListener("keydown", keydownHandler);
+    return () =>
+      slideshowRef.current?.removeEventListener("keydown", keydownHandler);
+  };
+  useEffect(ArrowKeyNavigation, []);
+
+  const goToSlide = (slide_index = 0) => {
+    if (automatic.value) automatic.value = false;
+    currentSlide.value = slide_index;
+  };
+
+  const DotsNavigation = () => (
+    <div
+      class={"slide_nav z-30 w-full absolute bottom-0 flex justify-center cursor-pointer"}
+    >
+      {SLIDE_DATA.map((_item, idx) => {
+        return (
+          <div
+            class={`px-1 ${NAVIGATION_COLOR}`}
+            onClick={() => {
+              goToSlide(idx);
+            }}
+            key={idx}
+          >
+            {idx === currentSlide.value ? <>●</> : <>○</>}
+          </div>
+        );
+      })}
+    </div>
+  );
+
+  return (
+    <div
+      ref={slideshowRef}
+      class={`slideshow relative flex-1 flex-end p-0 overflow-hidden ${
+        props.class !== undefined ? props.class : ""
+      }`}
+      tabIndex={0}
+    >
+      <IconCircleChevronsLeft
+        class={`left-0 ${CHEVRON_STYLE}`}
+        style="top: calc(50% - 20px)"
+        onClick={() => chevronClick(previousSlide)}
+      />
+      <IconCircleChevronsRight
+        class={`right-0 ${CHEVRON_STYLE}`}
+        style="top: calc(50% - 20px)"
+        onClick={() => chevronClick(nextSlide)}
+      />
+      {SLIDE_DATA.map((item, idx) => (
+        <Slide
+          data={item}
+          key={idx}
+          class={slideClasses(idx)}
+        />
+      ))}
+      {SHOW_NAVIGATION &&
+        <DotsNavigation />}
+      <Slide
+        data={SLIDE_DATA[0]}
+        class="opacity-0 pointer-events-none"
+      />
+    </div>
+  );
+};
+
+export default Carousel;
diff --git a/www/components/gallery/Features.tsx b/www/components/gallery/Features.tsx
index d6452ea449a..35c341ada8d 100644
--- a/www/components/gallery/Features.tsx
+++ b/www/components/gallery/Features.tsx
@@ -1,7 +1,7 @@
-import IconAlarm from "https://deno.land/x/tabler_icons_tsx@0.0.2/tsx/alarm.tsx";
-import IconAirBalloon from "https://deno.land/x/tabler_icons_tsx@0.0.2/tsx/air-balloon.tsx";
-import IconArmchair from "https://deno.land/x/tabler_icons_tsx@0.0.2/tsx/armchair.tsx";
-import IconChevronRight from "https://deno.land/x/tabler_icons_tsx@0.0.2/tsx/chevron-right.tsx";
+import IconAlarm from "https://deno.land/x/tabler_icons_tsx@0.0.3/tsx/alarm.tsx";
+import IconAirBalloon from "https://deno.land/x/tabler_icons_tsx@0.0.3/tsx/air-balloon.tsx";
+import IconArmchair from "https://deno.land/x/tabler_icons_tsx@0.0.3/tsx/armchair.tsx";
+import IconChevronRight from "https://deno.land/x/tabler_icons_tsx@0.0.3/tsx/chevron-right.tsx";
 
 export default function Features() {
   const featureItems = [
diff --git a/www/components/gallery/Footer.tsx b/www/components/gallery/Footer.tsx
index 1ca64b21978..f019a35fc2b 100644
--- a/www/components/gallery/Footer.tsx
+++ b/www/components/gallery/Footer.tsx
@@ -1,6 +1,6 @@
 import { ComponentChildren } from "preact";
-import LemonIcon from "https://deno.land/x/tabler_icons_tsx@0.0.1/tsx/lemon-2.tsx";
-import BrandGithub from "https://deno.land/x/tabler_icons_tsx@0.0.1/tsx/brand-github.tsx";
+import LemonIcon from "https://deno.land/x/tabler_icons_tsx@0.0.3/tsx/lemon-2.tsx";
+import BrandGithub from "https://deno.land/x/tabler_icons_tsx@0.0.3/tsx/brand-github.tsx";
 type Props = {
   children: ComponentChildren;
 };
diff --git a/www/components/gallery/Header.tsx b/www/components/gallery/Header.tsx
index 45cbabda666..6814012e59f 100644
--- a/www/components/gallery/Header.tsx
+++ b/www/components/gallery/Header.tsx
@@ -1,4 +1,4 @@
-import LemonIcon from "https://deno.land/x/tabler_icons_tsx@0.0.1/tsx/lemon-2.tsx";
+import LemonIcon from "https://deno.land/x/tabler_icons_tsx@0.0.3/tsx/lemon-2.tsx";
 
 type Props = {
   active: string;
diff --git a/www/components/gallery/Hero.tsx b/www/components/gallery/Hero.tsx
index fc70c9f5163..d9005dd0df2 100644
--- a/www/components/gallery/Hero.tsx
+++ b/www/components/gallery/Hero.tsx
@@ -1,4 +1,4 @@
-import IconChevronRight from "https://deno.land/x/tabler_icons_tsx@0.0.2/tsx/chevron-right.tsx";
+import IconChevronRight from "https://deno.land/x/tabler_icons_tsx@0.0.3/tsx/chevron-right.tsx";
 
 export default function Hero() {
   return (
diff --git a/www/data/showcase.json b/www/data/showcase.json
index 33bc35964c1..aa5896ce71a 100644
--- a/www/data/showcase.json
+++ b/www/data/showcase.json
@@ -1,4 +1,10 @@
 [
+  {
+    "title": "Deno SaaSKit",
+    "link": "https://saaskit.deno.dev/",
+    "github": "denoland/saaskit",
+    "image": "deno-saaskit"
+  },
   {
     "title": "Deno Merch",
     "link": "https://merch.deno.com/",
@@ -271,6 +277,52 @@
     "github": "shijianzhong/fresh-blog-system",
     "image": "fresh-blog-system"
   },
+  {
+    "title": "Alvaro Vanegas Sites",
+    "link": "https://ajvanegasv.dev/",
+    "github": "ajvanegasv/my-portfolio",
+    "image": "ajvanegasv"
+  },
+  {
+    "title": "Teams Template",
+    "link": "https://teams-template.deno.dev/",
+    "github": "davit-b/teams-template",
+    "image": "teams-template"
+  },
+  {
+    "title": "FestWithMe",
+    "link": "https://fest-with-me.deno.dev/",
+    "github": "rnaidenov/fest-with-me",
+    "image": "festwithme"
+  },
+  {
+    "title": "Pollify",
+    "link": "https://pollify.deno.dev/",
+    "github": "n4ze3m/pollify",
+    "image": "pollify"
+  },
+  {
+    "title": "JPT ChatGPT Rooms",
+    "link": "https://jpt.ma/",
+    "github": "zizwar/jpt",
+    "image": "jptchat"
+  },
+  {
+    "title": "Mieszko",
+    "link": "https://mieszko.xyz/",
+    "image": "mieszko"
+  },
+  {
+    "title": "Awesome Fresh",
+    "link": "https://uki00a.github.io/awesome-fresh/",
+    "image": "awesome-fresh"
+  },
+  {
+    "title": "Learn Mandarin",
+    "link": "https://mandarin.deno.dev/",
+    "github": "silvercrow/mandarin",
+    "image": "learn-mandarin"
+  },
   {
     "title": "Do not remove this, it's for prevent conflicting by trailing comma",
     "link": "",
diff --git a/www/deno.json b/www/deno.json
index 8d9ac336cfe..b691b285acd 100644
--- a/www/deno.json
+++ b/www/deno.json
@@ -1,4 +1,5 @@
 {
+  "lock": false,
   "tasks": {
     "start": "deno run -A --watch=static/,routes/ dev.ts"
   },
diff --git a/www/islands/ComponentGallery.tsx b/www/islands/ComponentGallery.tsx
index b14c96b65bf..78894954d1f 100644
--- a/www/islands/ComponentGallery.tsx
+++ b/www/islands/ComponentGallery.tsx
@@ -6,9 +6,10 @@ import Header from "../components/gallery/Header.tsx";
 import Footer from "../components/gallery/Footer.tsx";
 import Hero from "../components/gallery/Hero.tsx";
 import Features from "../components/gallery/Features.tsx";
+import Carousel from "../components/gallery/Carousel.tsx";
 import { ComponentChildren } from "preact";
-import IconHappy from "https://deno.land/x/tabler_icons_tsx@0.0.2/tsx/mood-crazy-happy.tsx";
-import IconHeart from "https://deno.land/x/tabler_icons_tsx@0.0.2/tsx/heart.tsx";
+import IconHappy from "https://deno.land/x/tabler_icons_tsx@0.0.3/tsx/mood-crazy-happy.tsx";
+import IconHeart from "https://deno.land/x/tabler_icons_tsx@0.0.3/tsx/heart.tsx";
 import Background from "../components/gallery/Background.tsx";
 import CodeBox from "../components/gallery/CodeBox.tsx";
 
@@ -22,7 +23,7 @@ interface SectionProps {
 function Section(props: SectionProps) {
   return (
     <div>
-      <h2 class="text-2xl font-bold py-2">
+      <h2 class="text-2xl font-bold py-2" id={props.title}>
         {props.title}
         {props.island && (
           <span class="text-sm font-normal inline-block bg-green-200 rounded px-2 mx-2">
@@ -110,6 +111,10 @@ export default function ComponentGallery(props: ComponentGalleryProps) {
       <Section title="Features" source={props.sources.Features}>
         <Features />
       </Section>
+
+      <Section title="Carousel" island={true} source={props.sources.Carousel}>
+        <Carousel />
+      </Section>
     </>
   );
 }
diff --git a/www/routes/components.tsx b/www/routes/components.tsx
index 85c8bd954fe..f2515dcf262 100644
--- a/www/routes/components.tsx
+++ b/www/routes/components.tsx
@@ -23,6 +23,7 @@ export const handler: Handlers<HomeProps> = {
         "Footer": await getSource("../components/gallery/Footer.tsx"),
         "Hero": await getSource("../components/gallery/Hero.tsx"),
         "Features": await getSource("../components/gallery/Features.tsx"),
+        "Carousel": await getSource("../components/gallery/Carousel.tsx"),
       },
     };
     return ctx.render(props);
@@ -45,7 +46,7 @@ export default function Home(props: PageProps<HomeProps>) {
       </Head>
       <Header title="components" active="/components" />
 
-      <section class="my-16 px(4 sm:6 md:8) mx-auto max-w-screen-lg space-y-5">
+      <section class="my-16 px(4 sm:6 md:8) mx-auto max-w-screen-lg space-y-4">
         <h2 class="text(3xl gray-600) font-bold">
           Fresh Components
         </h2>
diff --git a/www/routes/docs/[...slug].tsx b/www/routes/docs/[...slug].tsx
index 6ffd09d6548..7398bd62ffc 100644
--- a/www/routes/docs/[...slug].tsx
+++ b/www/routes/docs/[...slug].tsx
@@ -72,7 +72,7 @@ export default function DocsPage(props: PageProps<Data>) {
     </>
   );
 }
-import IconBooks from "https://deno.land/x/tabler_icons_tsx@0.0.1/tsx/books.tsx";
+
 function Main(props: { path: string; page: Page }) {
   return (
     <div class="flex-1">
diff --git a/www/static/docsearch.css b/www/static/docsearch.css
index c18b4a5f0a2..42036a38bb9 100644
--- a/www/static/docsearch.css
+++ b/www/static/docsearch.css
@@ -7,10 +7,14 @@
 /*! @docsearch/css 3.3.0 | MIT License | © Algolia, Inc. and contributors | https://docsearch.algolia.com */
 :root{--docsearch-primary-color:#5468ff;--docsearch-text-color:#1c1e21;--docsearch-spacing:12px;--docsearch-icon-stroke-width:1.4;--docsearch-highlight-color:var(--docsearch-primary-color);--docsearch-muted-color:#969faf;--docsearch-container-background:rgba(101,108,133,0.8);--docsearch-logo-color:#5468ff;--docsearch-modal-width:560px;--docsearch-modal-height:600px;--docsearch-modal-background:#f5f6f7;--docsearch-modal-shadow:inset 1px 1px 0 0 hsla(0,0%,100%,0.5),0 3px 8px 0 #555a64;--docsearch-searchbox-height:56px;--docsearch-searchbox-background:#ebedf0;--docsearch-searchbox-focus-background:#fff;--docsearch-searchbox-shadow:inset 0 0 0 2px var(--docsearch-primary-color);--docsearch-hit-height:56px;--docsearch-hit-color:#444950;--docsearch-hit-active-color:#fff;--docsearch-hit-background:#fff;--docsearch-hit-shadow:0 1px 3px 0 #d4d9e1;--docsearch-key-gradient:linear-gradient(-225deg,#d5dbe4,#f8f8f8);--docsearch-key-shadow:inset 0 -2px 0 0 #cdcde6,inset 0 0 1px 1px #fff,0 1px 2px 1px rgba(30,35,90,0.4);--docsearch-footer-height:44px;--docsearch-footer-background:#fff;--docsearch-footer-shadow:0 -1px 0 0 #e0e3e8,0 -3px 6px 0 rgba(69,98,155,0.12)}html[data-theme=dark]{--docsearch-text-color:#f5f6f7;--docsearch-container-background:rgba(9,10,17,0.8);--docsearch-modal-background:#15172a;--docsearch-modal-shadow:inset 1px 1px 0 0 #2c2e40,0 3px 8px 0 #000309;--docsearch-searchbox-background:#090a11;--docsearch-searchbox-focus-background:#000;--docsearch-hit-color:#bec3c9;--docsearch-hit-shadow:none;--docsearch-hit-background:#090a11;--docsearch-key-gradient:linear-gradient(-26.5deg,#565872,#31355b);--docsearch-key-shadow:inset 0 -2px 0 0 #282d55,inset 0 0 1px 1px #51577d,0 2px 2px 0 rgba(3,4,9,0.3);--docsearch-footer-background:#1e2136;--docsearch-footer-shadow:inset 0 1px 0 0 rgba(73,76,106,0.5),0 -4px 8px 0 rgba(0,0,0,0.2);--docsearch-logo-color:#fff;--docsearch-muted-color:#7f8497}.DocSearch-Button{align-items:center;background:var(--docsearch-searchbox-background);border:0;border-radius:40px;color:var(--docsearch-muted-color);cursor:pointer;display:flex;font-weight:500;height:36px;justify-content:space-between;margin:0 0 0 16px;padding:0 8px;user-select:none}.DocSearch-Button:active,.DocSearch-Button:focus,.DocSearch-Button:hover{background:var(--docsearch-searchbox-focus-background);box-shadow:var(--docsearch-searchbox-shadow);color:var(--docsearch-text-color);outline:none}.DocSearch-Button-Container{align-items:center;display:flex}.DocSearch-Search-Icon{stroke-width:1.6}.DocSearch-Button .DocSearch-Search-Icon{color:var(--docsearch-text-color)}.DocSearch-Button-Placeholder{font-size:1rem;padding:0 12px 0 6px}.DocSearch-Button-Keys{display:flex;min-width:calc(40px + .8em)}.DocSearch-Button-Key{align-items:center;background:var(--docsearch-key-gradient);border-radius:3px;box-shadow:var(--docsearch-key-shadow);color:var(--docsearch-muted-color);display:flex;height:18px;justify-content:center;margin-right:.4em;position:relative;padding:0 0 2px;border:0;top:-1px;width:20px}@media (max-width:768px){.DocSearch-Button-Keys,.DocSearch-Button-Placeholder{display:none}}.DocSearch--active{overflow:hidden!important}.DocSearch-Container,.DocSearch-Container *{box-sizing:border-box}.DocSearch-Container{background-color:var(--docsearch-container-background);height:100vh;left:0;position:fixed;top:0;width:100vw;z-index:200}.DocSearch-Container a{text-decoration:none}.DocSearch-Link{appearance:none;background:none;border:0;color:var(--docsearch-highlight-color);cursor:pointer;font:inherit;margin:0;padding:0}.DocSearch-Modal{background:var(--docsearch-modal-background);border-radius:6px;box-shadow:var(--docsearch-modal-shadow);flex-direction:column;margin:60px auto auto;max-width:var(--docsearch-modal-width);position:relative}.DocSearch-SearchBar{display:flex;padding:var(--docsearch-spacing) var(--docsearch-spacing) 0}.DocSearch-Form{align-items:center;background:var(--docsearch-searchbox-focus-background);border-radius:4px;box-shadow:var(--docsearch-searchbox-shadow);display:flex;height:var(--docsearch-searchbox-height);margin:0;padding:0 var(--docsearch-spacing);position:relative;width:100%}.DocSearch-Input{appearance:none;background:transparent;border:0;color:var(--docsearch-text-color);flex:1;font:inherit;font-size:1.2em;height:100%;outline:none;padding:0 0 0 8px;width:80%}.DocSearch-Input::placeholder{color:var(--docsearch-muted-color);opacity:1}.DocSearch-Input::-webkit-search-cancel-button,.DocSearch-Input::-webkit-search-decoration,.DocSearch-Input::-webkit-search-results-button,.DocSearch-Input::-webkit-search-results-decoration{display:none}.DocSearch-LoadingIndicator,.DocSearch-MagnifierLabel,.DocSearch-Reset{margin:0;padding:0}.DocSearch-MagnifierLabel,.DocSearch-Reset{align-items:center;color:var(--docsearch-highlight-color);display:flex;justify-content:center}.DocSearch-Container--Stalled .DocSearch-MagnifierLabel,.DocSearch-LoadingIndicator{display:none}.DocSearch-Container--Stalled .DocSearch-LoadingIndicator{align-items:center;color:var(--docsearch-highlight-color);display:flex;justify-content:center}@media screen and (prefers-reduced-motion:reduce){.DocSearch-Reset{animation:none;appearance:none;background:none;border:0;border-radius:50%;color:var(--docsearch-icon-color);cursor:pointer;right:0;stroke-width:var(--docsearch-icon-stroke-width)}}.DocSearch-Reset{animation:fade-in .1s ease-in forwards;appearance:none;background:none;border:0;border-radius:50%;color:var(--docsearch-icon-color);cursor:pointer;padding:2px;right:0;stroke-width:var(--docsearch-icon-stroke-width)}.DocSearch-Reset[hidden]{display:none}.DocSearch-Reset:focus{outline:none}.DocSearch-Reset:hover{color:var(--docsearch-highlight-color)}.DocSearch-LoadingIndicator svg,.DocSearch-MagnifierLabel svg{height:24px;width:24px}.DocSearch-Cancel{display:none}.DocSearch-Dropdown{max-height:calc(var(--docsearch-modal-height) - var(--docsearch-searchbox-height) - var(--docsearch-spacing) - var(--docsearch-footer-height));min-height:var(--docsearch-spacing);overflow-y:auto;overflow-y:overlay;padding:0 var(--docsearch-spacing);scrollbar-color:var(--docsearch-muted-color) var(--docsearch-modal-background);scrollbar-width:thin}.DocSearch-Dropdown::-webkit-scrollbar{width:12px}.DocSearch-Dropdown::-webkit-scrollbar-track{background:transparent}.DocSearch-Dropdown::-webkit-scrollbar-thumb{background-color:var(--docsearch-muted-color);border:3px solid var(--docsearch-modal-background);border-radius:20px}.DocSearch-Dropdown ul{list-style:none;margin:0;padding:0}.DocSearch-Label{font-size:.75em;line-height:1.6em}.DocSearch-Help,.DocSearch-Label{color:var(--docsearch-muted-color)}.DocSearch-Help{font-size:.9em;margin:0;user-select:none}.DocSearch-Title{font-size:1.2em}.DocSearch-Logo a{display:flex}.DocSearch-Logo svg{color:var(--docsearch-logo-color);margin-left:8px}.DocSearch-Hits:last-of-type{margin-bottom:24px}.DocSearch-Hits mark{background:none;color:var(--docsearch-highlight-color)}.DocSearch-HitsFooter{color:var(--docsearch-muted-color);display:flex;font-size:.85em;justify-content:center;margin-bottom:var(--docsearch-spacing);padding:var(--docsearch-spacing)}.DocSearch-HitsFooter a{border-bottom:1px solid;color:inherit}.DocSearch-Hit{border-radius:4px;display:flex;padding-bottom:4px;position:relative}@media screen and (prefers-reduced-motion:reduce){.DocSearch-Hit--deleting{transition:none}}.DocSearch-Hit--deleting{opacity:0;transition:all .25s linear}@media screen and (prefers-reduced-motion:reduce){.DocSearch-Hit--favoriting{transition:none}}.DocSearch-Hit--favoriting{transform:scale(0);transform-origin:top center;transition:all .25s linear;transition-delay:.25s}.DocSearch-Hit a{background:var(--docsearch-hit-background);border-radius:4px;box-shadow:var(--docsearch-hit-shadow);display:block;padding-left:var(--docsearch-spacing);width:100%}.DocSearch-Hit-source{background:var(--docsearch-modal-background);color:var(--docsearch-highlight-color);font-size:.85em;font-weight:600;line-height:32px;margin:0 -4px;padding:8px 4px 0;position:sticky;top:0;z-index:10}.DocSearch-Hit-Tree{color:var(--docsearch-muted-color);height:var(--docsearch-hit-height);opacity:.5;stroke-width:var(--docsearch-icon-stroke-width);width:24px}.DocSearch-Hit[aria-selected=true] a{background-color:var(--docsearch-highlight-color)}.DocSearch-Hit[aria-selected=true] mark{text-decoration:underline}.DocSearch-Hit-Container{align-items:center;color:var(--docsearch-hit-color);display:flex;flex-direction:row;height:var(--docsearch-hit-height);padding:0 var(--docsearch-spacing) 0 0}.DocSearch-Hit-icon{height:20px;width:20px}.DocSearch-Hit-action,.DocSearch-Hit-icon{color:var(--docsearch-muted-color);stroke-width:var(--docsearch-icon-stroke-width)}.DocSearch-Hit-action{align-items:center;display:flex;height:22px;width:22px}.DocSearch-Hit-action svg{display:block;height:18px;width:18px}.DocSearch-Hit-action+.DocSearch-Hit-action{margin-left:6px}.DocSearch-Hit-action-button{appearance:none;background:none;border:0;border-radius:50%;color:inherit;cursor:pointer;padding:2px}svg.DocSearch-Hit-Select-Icon{display:none}.DocSearch-Hit[aria-selected=true] .DocSearch-Hit-Select-Icon{display:block}.DocSearch-Hit-action-button:focus,.DocSearch-Hit-action-button:hover{background:rgba(0,0,0,.2);transition:background-color .1s ease-in}@media screen and (prefers-reduced-motion:reduce){.DocSearch-Hit-action-button:focus,.DocSearch-Hit-action-button:hover{transition:none}}.DocSearch-Hit-action-button:focus path,.DocSearch-Hit-action-button:hover path{fill:#fff}.DocSearch-Hit-content-wrapper{display:flex;flex:1 1 auto;flex-direction:column;font-weight:500;justify-content:center;line-height:1.2em;margin:0 8px;overflow-x:hidden;position:relative;text-overflow:ellipsis;white-space:nowrap;width:80%}.DocSearch-Hit-title{font-size:.9em}.DocSearch-Hit-path{color:var(--docsearch-muted-color);font-size:.75em}.DocSearch-Hit[aria-selected=true] .DocSearch-Hit-action,.DocSearch-Hit[aria-selected=true] .DocSearch-Hit-icon,.DocSearch-Hit[aria-selected=true] .DocSearch-Hit-path,.DocSearch-Hit[aria-selected=true] .DocSearch-Hit-text,.DocSearch-Hit[aria-selected=true] .DocSearch-Hit-title,.DocSearch-Hit[aria-selected=true] .DocSearch-Hit-Tree,.DocSearch-Hit[aria-selected=true] mark{color:var(--docsearch-hit-active-color)!important}@media screen and (prefers-reduced-motion:reduce){.DocSearch-Hit-action-button:focus,.DocSearch-Hit-action-button:hover{background:rgba(0,0,0,.2);transition:none}}.DocSearch-ErrorScreen,.DocSearch-NoResults,.DocSearch-StartScreen{font-size:.9em;margin:0 auto;padding:36px 0;text-align:center;width:80%}.DocSearch-Screen-Icon{color:var(--docsearch-muted-color);padding-bottom:12px}.DocSearch-NoResults-Prefill-List{display:inline-block;padding-bottom:24px;text-align:left}.DocSearch-NoResults-Prefill-List ul{display:inline-block;padding:8px 0 0}.DocSearch-NoResults-Prefill-List li{list-style-position:inside;list-style-type:"» "}.DocSearch-Prefill{appearance:none;background:none;border:0;border-radius:1em;color:var(--docsearch-highlight-color);cursor:pointer;display:inline-block;font-size:1em;font-weight:700;padding:0}.DocSearch-Prefill:focus,.DocSearch-Prefill:hover{outline:none;text-decoration:underline}.DocSearch-Footer{align-items:center;background:var(--docsearch-footer-background);border-radius:0 0 8px 8px;box-shadow:var(--docsearch-footer-shadow);display:flex;flex-direction:row-reverse;flex-shrink:0;height:var(--docsearch-footer-height);justify-content:space-between;padding:0 var(--docsearch-spacing);position:relative;user-select:none;width:100%;z-index:300}.DocSearch-Commands{color:var(--docsearch-muted-color);display:flex;list-style:none;margin:0;padding:0}.DocSearch-Commands li{align-items:center;display:flex}.DocSearch-Commands li:not(:last-of-type){margin-right:.8em}.DocSearch-Commands-Key{align-items:center;background:var(--docsearch-key-gradient);border-radius:2px;box-shadow:var(--docsearch-key-shadow);display:flex;height:18px;justify-content:center;margin-right:.4em;padding:0 0 1px;color:var(--docsearch-muted-color);border:0;width:20px}@media (max-width:768px){:root{--docsearch-spacing:10px;--docsearch-footer-height:40px}.DocSearch-Dropdown{height:100%}.DocSearch-Container{height:100vh;height:-webkit-fill-available;height:calc(var(--docsearch-vh, 1vh)*100);position:absolute}.DocSearch-Footer{border-radius:0;bottom:0;position:absolute}.DocSearch-Hit-content-wrapper{display:flex;position:relative;width:80%}.DocSearch-Modal{border-radius:0;box-shadow:none;height:100vh;height:-webkit-fill-available;height:calc(var(--docsearch-vh, 1vh)*100);margin:0;max-width:100%;width:100%}.DocSearch-Dropdown{max-height:calc(var(--docsearch-vh, 1vh)*100 - var(--docsearch-searchbox-height) - var(--docsearch-spacing) - var(--docsearch-footer-height))}.DocSearch-Cancel{appearance:none;background:none;border:0;color:var(--docsearch-highlight-color);cursor:pointer;display:inline-block;flex:none;font:inherit;font-size:1em;font-weight:500;margin-left:var(--docsearch-spacing);outline:none;overflow:hidden;padding:0;user-select:none;white-space:nowrap}.DocSearch-Commands,.DocSearch-Hit-Tree{display:none}}@keyframes fade-in{0%{opacity:0}to{opacity:1}}
 
+/* css for docs */
 .DocSearch-Button{
   margin:0;
   width: 100%;
 }
 .DocSearch-Button-Placeholder {
   display: initial;
+}
+.DocSearch-Container {
+  cursor: auto;
 }
\ No newline at end of file
diff --git a/www/static/showcase/ajvanegasv1x.jpg b/www/static/showcase/ajvanegasv1x.jpg
new file mode 100644
index 00000000000..53493f32a78
Binary files /dev/null and b/www/static/showcase/ajvanegasv1x.jpg differ
diff --git a/www/static/showcase/ajvanegasv2x.jpg b/www/static/showcase/ajvanegasv2x.jpg
new file mode 100644
index 00000000000..d6653fc0e34
Binary files /dev/null and b/www/static/showcase/ajvanegasv2x.jpg differ
diff --git a/www/static/showcase/awesome-fresh1x.jpg b/www/static/showcase/awesome-fresh1x.jpg
new file mode 100644
index 00000000000..d6211b8369f
Binary files /dev/null and b/www/static/showcase/awesome-fresh1x.jpg differ
diff --git a/www/static/showcase/awesome-fresh2x.jpg b/www/static/showcase/awesome-fresh2x.jpg
new file mode 100644
index 00000000000..053a4bb25b1
Binary files /dev/null and b/www/static/showcase/awesome-fresh2x.jpg differ
diff --git a/www/static/showcase/deno-saaskit1x.jpg b/www/static/showcase/deno-saaskit1x.jpg
new file mode 100644
index 00000000000..ffbc466325d
Binary files /dev/null and b/www/static/showcase/deno-saaskit1x.jpg differ
diff --git a/www/static/showcase/deno-saaskit2x.jpg b/www/static/showcase/deno-saaskit2x.jpg
new file mode 100644
index 00000000000..463edf779ef
Binary files /dev/null and b/www/static/showcase/deno-saaskit2x.jpg differ
diff --git a/www/static/showcase/festwithme1x.jpg b/www/static/showcase/festwithme1x.jpg
new file mode 100644
index 00000000000..a346ef16b24
Binary files /dev/null and b/www/static/showcase/festwithme1x.jpg differ
diff --git a/www/static/showcase/festwithme2x.jpg b/www/static/showcase/festwithme2x.jpg
new file mode 100644
index 00000000000..7449c9f568a
Binary files /dev/null and b/www/static/showcase/festwithme2x.jpg differ
diff --git a/www/static/showcase/jptchat1x.jpg b/www/static/showcase/jptchat1x.jpg
new file mode 100644
index 00000000000..0e48594b8da
Binary files /dev/null and b/www/static/showcase/jptchat1x.jpg differ
diff --git a/www/static/showcase/jptchat2x.jpg b/www/static/showcase/jptchat2x.jpg
new file mode 100644
index 00000000000..8fe4f99fefe
Binary files /dev/null and b/www/static/showcase/jptchat2x.jpg differ
diff --git a/www/static/showcase/learn-mandarin1x.jpg b/www/static/showcase/learn-mandarin1x.jpg
new file mode 100644
index 00000000000..c2dd7f849e2
Binary files /dev/null and b/www/static/showcase/learn-mandarin1x.jpg differ
diff --git a/www/static/showcase/learn-mandarin2x.jpg b/www/static/showcase/learn-mandarin2x.jpg
new file mode 100644
index 00000000000..8dd16a24b02
Binary files /dev/null and b/www/static/showcase/learn-mandarin2x.jpg differ
diff --git a/www/static/showcase/mieszko1x.jpg b/www/static/showcase/mieszko1x.jpg
new file mode 100644
index 00000000000..5918a7932d4
Binary files /dev/null and b/www/static/showcase/mieszko1x.jpg differ
diff --git a/www/static/showcase/mieszko2x.jpg b/www/static/showcase/mieszko2x.jpg
new file mode 100644
index 00000000000..f109f42a06f
Binary files /dev/null and b/www/static/showcase/mieszko2x.jpg differ
diff --git a/www/static/showcase/pollify1x.jpg b/www/static/showcase/pollify1x.jpg
new file mode 100644
index 00000000000..0bf3310dff2
Binary files /dev/null and b/www/static/showcase/pollify1x.jpg differ
diff --git a/www/static/showcase/pollify2x.jpg b/www/static/showcase/pollify2x.jpg
new file mode 100644
index 00000000000..83d9a64910b
Binary files /dev/null and b/www/static/showcase/pollify2x.jpg differ
diff --git a/www/static/showcase/teams-template1x.jpg b/www/static/showcase/teams-template1x.jpg
new file mode 100644
index 00000000000..688e47274a6
Binary files /dev/null and b/www/static/showcase/teams-template1x.jpg differ
diff --git a/www/static/showcase/teams-template2x.jpg b/www/static/showcase/teams-template2x.jpg
new file mode 100644
index 00000000000..81d89c6d3c0
Binary files /dev/null and b/www/static/showcase/teams-template2x.jpg differ
