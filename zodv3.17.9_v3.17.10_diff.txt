diff --git a/README.md b/README.md
index 3755747d9..bd04f1a5e 100644
--- a/README.md
+++ b/README.md
@@ -558,7 +558,7 @@ z.date().safeParse(new Date()); // success: true
 z.date().safeParse("2022-01-12T00:00:00.000Z"); // success: false
 ```
 
-You can customize certain error messages when creating a boolean schema.
+You can customize certain error messages when creating a date schema.
 
 ```ts
 const myDateSchema = z.date({
@@ -1704,7 +1704,7 @@ const Strings = z
 To transform data after parsing, use the `transform` method.
 
 ```ts
-const stringToNumber = z.string().transform((val) => myString.length);
+const stringToNumber = z.string().transform((val) => val.length);
 stringToNumber.parse("string"); // => 6
 ```
 
diff --git a/deno/lib/README.md b/deno/lib/README.md
index 0285de927..bd04f1a5e 100644
--- a/deno/lib/README.md
+++ b/deno/lib/README.md
@@ -558,7 +558,7 @@ z.date().safeParse(new Date()); // success: true
 z.date().safeParse("2022-01-12T00:00:00.000Z"); // success: false
 ```
 
-You can customize certain error messages when creating a boolean schema.
+You can customize certain error messages when creating a date schema.
 
 ```ts
 const myDateSchema = z.date({
@@ -1704,7 +1704,7 @@ const Strings = z
 To transform data after parsing, use the `transform` method.
 
 ```ts
-const stringToNumber = z.string().transform((val) => myString.length);
+const stringToNumber = z.string().transform((val) => val.length);
 stringToNumber.parse("string"); // => 6
 ```
 
@@ -1800,7 +1800,7 @@ z.optional(z.string());
 
 ### `.nullable`
 
-A convenience method that returns an nullable version of a schema.
+A convenience method that returns a nullable version of a schema.
 
 ```ts
 const nullableString = z.string().nullable(); // string | null
diff --git a/deno/lib/ZodError.ts b/deno/lib/ZodError.ts
index c7a66aa6b..b5739a2f8 100644
--- a/deno/lib/ZodError.ts
+++ b/deno/lib/ZodError.ts
@@ -357,7 +357,7 @@ export const defaultErrorMap = (
         if ("startsWith" in issue.validation) {
           message = `Invalid input: must start with "${issue.validation.startsWith}"`;
         } else if ("endsWith" in issue.validation) {
-          message = `Invalid input: must start with "${issue.validation.endsWith}"`;
+          message = `Invalid input: must end with "${issue.validation.endsWith}"`;
         } else {
           util.assertNever(issue.validation);
         }
diff --git a/package.json b/package.json
index 635630c43..7a73c3557 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "zod",
-  "version": "3.17.9",
+  "version": "3.17.10",
   "description": "TypeScript-first schema declaration and validation library with static type inference",
   "main": "./lib/index.js",
   "types": "./index.d.ts",
diff --git a/src/ZodError.ts b/src/ZodError.ts
index 01f4b45c7..7ddee45e3 100644
--- a/src/ZodError.ts
+++ b/src/ZodError.ts
@@ -357,7 +357,7 @@ export const defaultErrorMap = (
         if ("startsWith" in issue.validation) {
           message = `Invalid input: must start with "${issue.validation.startsWith}"`;
         } else if ("endsWith" in issue.validation) {
-          message = `Invalid input: must start with "${issue.validation.endsWith}"`;
+          message = `Invalid input: must end with "${issue.validation.endsWith}"`;
         } else {
           util.assertNever(issue.validation);
         }
