diff --git a/.gitignore b/.gitignore
index 83c31b24e..2e9402426 100644
--- a/.gitignore
+++ b/.gitignore
@@ -5,3 +5,4 @@ coverage
 .vscode
 .idea
 *.log
+src/playground.ts
diff --git a/README.md b/README.md
index 637ca5684..179568c08 100644
--- a/README.md
+++ b/README.md
@@ -34,7 +34,7 @@ Previous versions:
 - **Easier unions**. Use the `or` method to ZodType (the base class for all Zod schemas) to easily create union types like `z.string().or(z.number())`
 - **Easier intersections**. Use the `and` method to ZodType (the base class for all Zod schemas) to easily create intersection types
 - **Global error customization**. Use `z.setErrorMap(myErrorMap)` to _globally_ customize the error messages produced by Zod: [setErrorMap](ERROR_HANDLING.md#customizing-errors-with-zoderrormap)
-- **Maps and sets**. Zod now supports [`Map`](#maps) and [`Set`](#set) schemas.
+- **Maps and sets**. Zod now supports [`Map`](#maps) and [`Set`](#sets) schemas.
 - **Optional and nullable unwrapping**. ZodOptional and ZodNullable now have a `.unwrap()` method for retrieving the schema they wrap.
 - **A new implementation of transformers**. See the [Migration Guide](https://github.com/colinhacks/zod/blob/master/MIGRATION.md) section to understand the syntax changes.
 
@@ -1175,7 +1175,7 @@ stringSchema.parse(12); // throws Error('Non-string type: number');
 
 `.parseAsync(data:unknown): Promise<T>`
 
-If you use asynchronous [refinements](#refinements) or [transforms](#transformers) (more on those later), you'll need to use `.parseAsync`
+If you use asynchronous [refinements](#refine) or [transforms](#transform) (more on those later), you'll need to use `.parseAsync`
 
 ```ts
 const stringSchema = z.string().refine(async (val) => val.length > 20);
diff --git a/coverage.svg b/coverage.svg
index 1dc972cc8..5a228eb7a 100644
--- a/coverage.svg
+++ b/coverage.svg
@@ -1 +1 @@
-<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="116" height="20" role="img" aria-label="Coverage: 89.19%"><title>Coverage: 89.19%</title><linearGradient id="s" x2="0" y2="100%"><stop offset="0" stop-color="#bbb" stop-opacity=".1"/><stop offset="1" stop-opacity=".1"/></linearGradient><clipPath id="r"><rect width="116" height="20" rx="3" fill="#fff"/></clipPath><g clip-path="url(#r)"><rect width="63" height="20" fill="#555"/><rect x="63" width="53" height="20" fill="#dfb317"/><rect width="116" height="20" fill="url(#s)"/></g><g fill="#fff" text-anchor="middle" font-family="Verdana,Geneva,DejaVu Sans,sans-serif" text-rendering="geometricPrecision" font-size="110"><text aria-hidden="true" x="325" y="150" fill="#010101" fill-opacity=".3" transform="scale(.1)" textLength="530">Coverage</text><text x="325" y="140" transform="scale(.1)" fill="#fff" textLength="530">Coverage</text><text aria-hidden="true" x="885" y="150" fill="#010101" fill-opacity=".3" transform="scale(.1)" textLength="430">89.19%</text><text x="885" y="140" transform="scale(.1)" fill="#fff" textLength="430">89.19%</text></g></svg>
\ No newline at end of file
+<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="116" height="20" role="img" aria-label="Coverage: 89.41%"><title>Coverage: 89.41%</title><linearGradient id="s" x2="0" y2="100%"><stop offset="0" stop-color="#bbb" stop-opacity=".1"/><stop offset="1" stop-opacity=".1"/></linearGradient><clipPath id="r"><rect width="116" height="20" rx="3" fill="#fff"/></clipPath><g clip-path="url(#r)"><rect width="63" height="20" fill="#555"/><rect x="63" width="53" height="20" fill="#dfb317"/><rect width="116" height="20" fill="url(#s)"/></g><g fill="#fff" text-anchor="middle" font-family="Verdana,Geneva,DejaVu Sans,sans-serif" text-rendering="geometricPrecision" font-size="110"><text aria-hidden="true" x="325" y="150" fill="#010101" fill-opacity=".3" transform="scale(.1)" textLength="530">Coverage</text><text x="325" y="140" transform="scale(.1)" fill="#fff" textLength="530">Coverage</text><text aria-hidden="true" x="885" y="150" fill="#010101" fill-opacity=".3" transform="scale(.1)" textLength="430">89.41%</text><text x="885" y="140" transform="scale(.1)" fill="#fff" textLength="430">89.41%</text></g></svg>
\ No newline at end of file
diff --git a/deno/lib/__tests__/firstparty.test.ts b/deno/lib/__tests__/firstparty.test.ts
index 992b81abd..e8714137d 100644
--- a/deno/lib/__tests__/firstparty.test.ts
+++ b/deno/lib/__tests__/firstparty.test.ts
@@ -9,63 +9,63 @@ test("first party switch", () => {
   const def = myType._def;
 
   switch (def.typeName) {
-    case "ZodString":
+    case z.ZodFirstPartyTypeKind.ZodString:
       break;
-    case "ZodNumber":
+    case z.ZodFirstPartyTypeKind.ZodNumber:
       break;
-    case "ZodBigInt":
+    case z.ZodFirstPartyTypeKind.ZodBigInt:
       break;
-    case "ZodBoolean":
+    case z.ZodFirstPartyTypeKind.ZodBoolean:
       break;
-    case "ZodDate":
+    case z.ZodFirstPartyTypeKind.ZodDate:
       break;
-    case "ZodUndefined":
+    case z.ZodFirstPartyTypeKind.ZodUndefined:
       break;
-    case "ZodNull":
+    case z.ZodFirstPartyTypeKind.ZodNull:
       break;
-    case "ZodAny":
+    case z.ZodFirstPartyTypeKind.ZodAny:
       break;
-    case "ZodUnknown":
+    case z.ZodFirstPartyTypeKind.ZodUnknown:
       break;
-    case "ZodNever":
+    case z.ZodFirstPartyTypeKind.ZodNever:
       break;
-    case "ZodVoid":
+    case z.ZodFirstPartyTypeKind.ZodVoid:
       break;
-    case "ZodArray":
+    case z.ZodFirstPartyTypeKind.ZodArray:
       break;
-    case "ZodObject":
+    case z.ZodFirstPartyTypeKind.ZodObject:
       break;
-    case "ZodUnion":
+    case z.ZodFirstPartyTypeKind.ZodUnion:
       break;
-    case "ZodIntersection":
+    case z.ZodFirstPartyTypeKind.ZodIntersection:
       break;
-    case "ZodTuple":
+    case z.ZodFirstPartyTypeKind.ZodTuple:
       break;
-    case "ZodRecord":
+    case z.ZodFirstPartyTypeKind.ZodRecord:
       break;
-    case "ZodMap":
+    case z.ZodFirstPartyTypeKind.ZodMap:
       break;
-    case "ZodSet":
+    case z.ZodFirstPartyTypeKind.ZodSet:
       break;
-    case "ZodFunction":
+    case z.ZodFirstPartyTypeKind.ZodFunction:
       break;
-    case "ZodLazy":
+    case z.ZodFirstPartyTypeKind.ZodLazy:
       break;
-    case "ZodLiteral":
+    case z.ZodFirstPartyTypeKind.ZodLiteral:
       break;
-    case "ZodEnum":
+    case z.ZodFirstPartyTypeKind.ZodEnum:
       break;
-    case "ZodEffects":
+    case z.ZodFirstPartyTypeKind.ZodEffects:
       break;
-    case "ZodNativeEnum":
+    case z.ZodFirstPartyTypeKind.ZodNativeEnum:
       break;
-    case "ZodOptional":
+    case z.ZodFirstPartyTypeKind.ZodOptional:
       break;
-    case "ZodNullable":
+    case z.ZodFirstPartyTypeKind.ZodNullable:
       break;
-    case "ZodDefault":
+    case z.ZodFirstPartyTypeKind.ZodDefault:
       break;
-    case "ZodPromise":
+    case z.ZodFirstPartyTypeKind.ZodPromise:
       break;
     default:
       util.assertNever(def);
diff --git a/deno/lib/playground.ts b/deno/lib/playground.ts
deleted file mode 100644
index 6105c2377..000000000
--- a/deno/lib/playground.ts
+++ /dev/null
@@ -1,8 +0,0 @@
-import { z } from "./index.ts";
-
-const run = async () => {
-  z;
-};
-run();
-
-export {};
diff --git a/deno/lib/types.ts b/deno/lib/types.ts
index 1e6e1f29e..b657624fe 100644
--- a/deno/lib/types.ts
+++ b/deno/lib/types.ts
@@ -232,7 +232,7 @@ export abstract class ZodType<
     } else {
       returnType = new ZodEffects({
         schema: this,
-        typeName: "ZodEffects",
+        typeName: ZodFirstPartyTypeKind.ZodEffects,
         effects: [{ type: "refinement", refinement }],
       }) as any;
     }
@@ -269,7 +269,7 @@ export abstract class ZodType<
   ): ZodEffects<this, NewOut> {
     return new ZodEffects({
       schema: this,
-      typeName: "ZodEffects",
+      typeName: ZodFirstPartyTypeKind.ZodEffects,
       effects: [{ type: "transform", transform }],
     }) as any;
   }
@@ -291,7 +291,7 @@ export abstract class ZodType<
     return new ZodDefault({
       innerType: this,
       defaultValue: defaultValueFunc,
-      typeName: "ZodDefault",
+      typeName: ZodFirstPartyTypeKind.ZodDefault,
     }) as any;
   }
 
@@ -316,7 +316,7 @@ type ZodStringCheck =
 
 export interface ZodStringDef extends ZodTypeDef {
   checks: ZodStringCheck[];
-  typeName: "ZodString";
+  typeName: ZodFirstPartyTypeKind.ZodString;
 }
 
 const uuidRegex = /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[89ab][a-f0-9]{3}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;
@@ -520,7 +520,7 @@ export class ZodString extends ZodType<string, ZodStringDef> {
   static create = (): ZodString => {
     return new ZodString({
       checks: [],
-      typeName: "ZodString",
+      typeName: ZodFirstPartyTypeKind.ZodString,
     });
   };
 }
@@ -539,7 +539,7 @@ type ZodNumberCheck =
 
 export interface ZodNumberDef extends ZodTypeDef {
   checks: ZodNumberCheck[];
-  typeName: "ZodNumber";
+  typeName: ZodFirstPartyTypeKind.ZodNumber;
 }
 
 export class ZodNumber extends ZodType<number, ZodNumberDef> {
@@ -609,7 +609,7 @@ export class ZodNumber extends ZodType<number, ZodNumberDef> {
   static create = (): ZodNumber => {
     return new ZodNumber({
       checks: [],
-      typeName: "ZodNumber",
+      typeName: ZodFirstPartyTypeKind.ZodNumber,
     });
   };
 
@@ -743,7 +743,7 @@ export class ZodNumber extends ZodType<number, ZodNumberDef> {
 /////////////////////////////////////////
 
 export interface ZodBigIntDef extends ZodTypeDef {
-  typeName: "ZodBigInt";
+  typeName: ZodFirstPartyTypeKind.ZodBigInt;
 }
 
 export class ZodBigInt extends ZodType<bigint, ZodBigIntDef> {
@@ -765,7 +765,7 @@ export class ZodBigInt extends ZodType<bigint, ZodBigIntDef> {
   }
 
   static create = (): ZodBigInt => {
-    return new ZodBigInt({ typeName: "ZodBigInt" });
+    return new ZodBigInt({ typeName: ZodFirstPartyTypeKind.ZodBigInt });
   };
 }
 
@@ -777,7 +777,7 @@ export class ZodBigInt extends ZodType<bigint, ZodBigIntDef> {
 //////////////////////////////////////////
 //////////////////////////////////////////
 export interface ZodBooleanDef extends ZodTypeDef {
-  typeName: "ZodBoolean";
+  typeName: ZodFirstPartyTypeKind.ZodBoolean;
 }
 
 export class ZodBoolean extends ZodType<boolean, ZodBooleanDef> {
@@ -799,7 +799,7 @@ export class ZodBoolean extends ZodType<boolean, ZodBooleanDef> {
   }
 
   static create = (): ZodBoolean => {
-    return new ZodBoolean({ typeName: "ZodBoolean" });
+    return new ZodBoolean({ typeName: ZodFirstPartyTypeKind.ZodBoolean });
   };
 }
 
@@ -811,7 +811,7 @@ export class ZodBoolean extends ZodType<boolean, ZodBooleanDef> {
 ///////////////////////////////////////
 ///////////////////////////////////////
 export interface ZodDateDef extends ZodTypeDef {
-  typeName: "ZodDate";
+  typeName: ZodFirstPartyTypeKind.ZodDate;
 }
 
 export class ZodDate extends ZodType<Date, ZodDateDef> {
@@ -841,7 +841,7 @@ export class ZodDate extends ZodType<Date, ZodDateDef> {
   }
 
   static create = (): ZodDate => {
-    return new ZodDate({ typeName: "ZodDate" });
+    return new ZodDate({ typeName: ZodFirstPartyTypeKind.ZodDate });
   };
 }
 
@@ -853,7 +853,7 @@ export class ZodDate extends ZodType<Date, ZodDateDef> {
 ////////////////////////////////////////////
 ////////////////////////////////////////////
 export interface ZodUndefinedDef extends ZodTypeDef {
-  typeName: "ZodUndefined";
+  typeName: ZodFirstPartyTypeKind.ZodUndefined;
 }
 
 export class ZodUndefined extends ZodType<undefined, ZodUndefinedDef> {
@@ -875,7 +875,7 @@ export class ZodUndefined extends ZodType<undefined, ZodUndefinedDef> {
   }
 
   static create = (): ZodUndefined => {
-    return new ZodUndefined({ typeName: "ZodUndefined" });
+    return new ZodUndefined({ typeName: ZodFirstPartyTypeKind.ZodUndefined });
   };
 }
 
@@ -887,7 +887,7 @@ export class ZodUndefined extends ZodType<undefined, ZodUndefinedDef> {
 ///////////////////////////////////////
 ///////////////////////////////////////
 export interface ZodNullDef extends ZodTypeDef {
-  typeName: "ZodNull";
+  typeName: ZodFirstPartyTypeKind.ZodNull;
 }
 
 export class ZodNull extends ZodType<null, ZodNullDef> {
@@ -908,7 +908,7 @@ export class ZodNull extends ZodType<null, ZodNullDef> {
     return OK(data);
   }
   static create = (): ZodNull => {
-    return new ZodNull({ typeName: "ZodNull" });
+    return new ZodNull({ typeName: ZodFirstPartyTypeKind.ZodNull });
   };
 }
 
@@ -920,7 +920,7 @@ export class ZodNull extends ZodType<null, ZodNullDef> {
 //////////////////////////////////////
 //////////////////////////////////////
 export interface ZodAnyDef extends ZodTypeDef {
-  typeName: "ZodAny";
+  typeName: ZodFirstPartyTypeKind.ZodAny;
 }
 
 export class ZodAny extends ZodType<any, ZodAnyDef> {
@@ -934,7 +934,7 @@ export class ZodAny extends ZodType<any, ZodAnyDef> {
     return OK(data);
   }
   static create = (): ZodAny => {
-    return new ZodAny({ typeName: "ZodAny" });
+    return new ZodAny({ typeName: ZodFirstPartyTypeKind.ZodAny });
   };
 }
 
@@ -946,7 +946,7 @@ export class ZodAny extends ZodType<any, ZodAnyDef> {
 //////////////////////////////////////////
 //////////////////////////////////////////
 export interface ZodUnknownDef extends ZodTypeDef {
-  typeName: "ZodUnknown";
+  typeName: ZodFirstPartyTypeKind.ZodUnknown;
 }
 
 export class ZodUnknown extends ZodType<unknown, ZodUnknownDef> {
@@ -961,7 +961,7 @@ export class ZodUnknown extends ZodType<unknown, ZodUnknownDef> {
   }
 
   static create = (): ZodUnknown => {
-    return new ZodUnknown({ typeName: "ZodUnknown" });
+    return new ZodUnknown({ typeName: ZodFirstPartyTypeKind.ZodUnknown });
   };
 }
 
@@ -973,7 +973,7 @@ export class ZodUnknown extends ZodType<unknown, ZodUnknownDef> {
 ////////////////////////////////////////
 ////////////////////////////////////////
 export interface ZodNeverDef extends ZodTypeDef {
-  typeName: "ZodNever";
+  typeName: ZodFirstPartyTypeKind.ZodNever;
 }
 
 export class ZodNever extends ZodType<never, ZodNeverDef> {
@@ -990,7 +990,7 @@ export class ZodNever extends ZodType<never, ZodNeverDef> {
     return INVALID;
   }
   static create = (): ZodNever => {
-    return new ZodNever({ typeName: "ZodNever" });
+    return new ZodNever({ typeName: ZodFirstPartyTypeKind.ZodNever });
   };
 }
 
@@ -1002,7 +1002,7 @@ export class ZodNever extends ZodType<never, ZodNeverDef> {
 ///////////////////////////////////////
 ///////////////////////////////////////
 export interface ZodVoidDef extends ZodTypeDef {
-  typeName: "ZodVoid";
+  typeName: ZodFirstPartyTypeKind.ZodVoid;
 }
 
 export class ZodVoid extends ZodType<void, ZodVoidDef> {
@@ -1027,7 +1027,7 @@ export class ZodVoid extends ZodType<void, ZodVoidDef> {
   }
 
   static create = (): ZodVoid => {
-    return new ZodVoid({ typeName: "ZodVoid" });
+    return new ZodVoid({ typeName: ZodFirstPartyTypeKind.ZodVoid });
   };
 }
 
@@ -1041,7 +1041,7 @@ export class ZodVoid extends ZodType<void, ZodVoidDef> {
 export interface ZodArrayDef<T extends ZodTypeAny = ZodTypeAny>
   extends ZodTypeDef {
   type: T;
-  typeName: "ZodArray";
+  typeName: ZodFirstPartyTypeKind.ZodArray;
   minLength: { value: number; message?: string } | null;
   maxLength: { value: number; message?: string } | null;
 }
@@ -1182,7 +1182,7 @@ export class ZodArray<T extends ZodTypeAny> extends ZodType<
       type: schema,
       minLength: null,
       maxLength: null,
-      typeName: "ZodArray",
+      typeName: ZodFirstPartyTypeKind.ZodArray,
     });
   };
 }
@@ -1197,7 +1197,7 @@ export class ZodArray<T extends ZodTypeAny> extends ZodType<
 export interface ZodNonEmptyArrayDef<T extends ZodTypeAny = ZodTypeAny>
   extends ZodTypeDef {
   type: T;
-  typeName: "ZodArray";
+  typeName: ZodFirstPartyTypeKind.ZodArray;
   minLength: { value: number; message?: string } | null;
   maxLength: { value: number; message?: string } | null;
 }
@@ -1242,7 +1242,7 @@ export class ZodNonEmptyArray<T extends ZodTypeAny> extends ZodType<
       type: schema,
       minLength: null,
       maxLength: null,
-      typeName: "ZodArray",
+      typeName: ZodFirstPartyTypeKind.ZodArray,
     });
   };
 }
@@ -1332,7 +1332,7 @@ export const mergeObjects = <First extends AnyZodObject>(first: First) => <
     unknownKeys: first._def.unknownKeys,
     catchall: first._def.catchall,
     shape: () => mergedShape,
-    typeName: "ZodObject",
+    typeName: ZodFirstPartyTypeKind.ZodObject,
   }) as any;
   return merged;
 };
@@ -1377,7 +1377,7 @@ export interface ZodObjectDef<
   UnknownKeys extends UnknownKeysParam = UnknownKeysParam,
   Catchall extends ZodTypeAny = ZodTypeAny
 > extends ZodTypeDef {
-  typeName: "ZodObject";
+  typeName: ZodFirstPartyTypeKind.ZodObject;
   shape: () => T;
   catchall: Catchall;
   unknownKeys: UnknownKeys;
@@ -1599,7 +1599,7 @@ export class ZodObject<
       unknownKeys: merging._def.unknownKeys,
       catchall: merging._def.catchall,
       shape: () => mergedShape,
-      typeName: "ZodObject",
+      typeName: ZodFirstPartyTypeKind.ZodObject,
     }) as any;
     return merged;
   };
@@ -1714,7 +1714,7 @@ export class ZodObject<
       shape: () => shape,
       unknownKeys: "strip",
       catchall: ZodNever.create(),
-      typeName: "ZodObject",
+      typeName: ZodFirstPartyTypeKind.ZodObject,
     }) as any;
   };
 
@@ -1725,7 +1725,7 @@ export class ZodObject<
       shape: () => shape,
       unknownKeys: "strict",
       catchall: ZodNever.create(),
-      typeName: "ZodObject",
+      typeName: ZodFirstPartyTypeKind.ZodObject,
     }) as any;
   };
 
@@ -1734,7 +1734,7 @@ export class ZodObject<
       shape,
       unknownKeys: "strip",
       catchall: ZodNever.create(),
-      typeName: "ZodObject",
+      typeName: ZodFirstPartyTypeKind.ZodObject,
     }) as any;
   };
 }
@@ -1753,7 +1753,7 @@ export interface ZodUnionDef<
   T extends ZodUnionOptions = [ZodTypeAny, ZodTypeAny, ...ZodTypeAny[]]
 > extends ZodTypeDef {
   options: T;
-  typeName: "ZodUnion";
+  typeName: ZodFirstPartyTypeKind.ZodUnion;
 }
 
 // export type toOpts<T> = T extends ZodUnionOptions ? T : never;
@@ -1836,7 +1836,7 @@ export class ZodUnion<T extends ZodUnionOptions> extends ZodType<
   ): ZodUnion<T> => {
     return new ZodUnion({
       options: types,
-      typeName: "ZodUnion",
+      typeName: ZodFirstPartyTypeKind.ZodUnion,
     });
   };
 }
@@ -1854,7 +1854,7 @@ export interface ZodIntersectionDef<
 > extends ZodTypeDef {
   left: T;
   right: U;
-  typeName: "ZodIntersection";
+  typeName: ZodFirstPartyTypeKind.ZodIntersection;
 }
 
 function mergeValues(
@@ -1936,7 +1936,7 @@ export class ZodIntersection<
     return new ZodIntersection({
       left: left,
       right: right,
-      typeName: "ZodIntersection",
+      typeName: ZodFirstPartyTypeKind.ZodIntersection,
     });
   };
 }
@@ -1960,7 +1960,7 @@ export interface ZodTupleDef<
   T extends [ZodTypeAny, ...ZodTypeAny[]] | [] = [ZodTypeAny, ...ZodTypeAny[]]
 > extends ZodTypeDef {
   items: T;
-  typeName: "ZodTuple";
+  typeName: ZodFirstPartyTypeKind.ZodTuple;
 }
 
 export class ZodTuple<
@@ -2044,7 +2044,7 @@ export class ZodTuple<
   ): ZodTuple<T> => {
     return new ZodTuple({
       items: schemas,
-      typeName: "ZodTuple",
+      typeName: ZodFirstPartyTypeKind.ZodTuple,
     });
   };
 }
@@ -2059,7 +2059,7 @@ export class ZodTuple<
 export interface ZodRecordDef<Value extends ZodTypeAny = ZodTypeAny>
   extends ZodTypeDef {
   valueType: Value;
-  typeName: "ZodRecord";
+  typeName: ZodFirstPartyTypeKind.ZodRecord;
 }
 
 export class ZodRecord<Value extends ZodTypeAny = ZodTypeAny> extends ZodType<
@@ -2121,7 +2121,7 @@ export class ZodRecord<Value extends ZodTypeAny = ZodTypeAny> extends ZodType<
   ): ZodRecord<Value> => {
     return new ZodRecord({
       valueType,
-      typeName: "ZodRecord",
+      typeName: ZodFirstPartyTypeKind.ZodRecord,
     });
   };
 }
@@ -2139,7 +2139,7 @@ export interface ZodMapDef<
 > extends ZodTypeDef {
   valueType: Value;
   keyType: Key;
-  typeName: "ZodMap";
+  typeName: ZodFirstPartyTypeKind.ZodMap;
 }
 
 export class ZodMap<
@@ -2221,7 +2221,7 @@ export class ZodMap<
     return new ZodMap({
       valueType,
       keyType,
-      typeName: "ZodMap",
+      typeName: ZodFirstPartyTypeKind.ZodMap,
     });
   };
 }
@@ -2236,7 +2236,7 @@ export class ZodMap<
 export interface ZodSetDef<Value extends ZodTypeAny = ZodTypeAny>
   extends ZodTypeDef {
   valueType: Value;
-  typeName: "ZodSet";
+  typeName: ZodFirstPartyTypeKind.ZodSet;
 }
 
 export class ZodSet<Value extends ZodTypeAny = ZodTypeAny> extends ZodType<
@@ -2293,7 +2293,7 @@ export class ZodSet<Value extends ZodTypeAny = ZodTypeAny> extends ZodType<
   ): ZodSet<Value> => {
     return new ZodSet({
       valueType,
-      typeName: "ZodSet",
+      typeName: ZodFirstPartyTypeKind.ZodSet,
     });
   };
 }
@@ -2311,7 +2311,7 @@ export interface ZodFunctionDef<
 > extends ZodTypeDef {
   args: Args;
   returns: Returns;
-  typeName: "ZodFunction";
+  typeName: ZodFirstPartyTypeKind.ZodFunction;
 }
 
 export type OuterTypeOfFunction<
@@ -2473,7 +2473,7 @@ export class ZodFunction<
     return new ZodFunction({
       args: args || ZodTuple.create([]),
       returns: returns || ZodUnknown.create(),
-      typeName: "ZodFunction",
+      typeName: ZodFirstPartyTypeKind.ZodFunction,
     }) as any;
   };
 }
@@ -2488,7 +2488,7 @@ export class ZodFunction<
 export interface ZodLazyDef<T extends ZodTypeAny = ZodTypeAny>
   extends ZodTypeDef {
   getter: () => T;
-  typeName: "ZodLazy";
+  typeName: ZodFirstPartyTypeKind.ZodLazy;
 }
 
 export class ZodLazy<T extends ZodTypeAny> extends ZodType<
@@ -2512,7 +2512,7 @@ export class ZodLazy<T extends ZodTypeAny> extends ZodType<
   static create = <T extends ZodTypeAny>(getter: () => T): ZodLazy<T> => {
     return new ZodLazy({
       getter: getter,
-      typeName: "ZodLazy",
+      typeName: ZodFirstPartyTypeKind.ZodLazy,
     });
   };
 }
@@ -2526,7 +2526,7 @@ export class ZodLazy<T extends ZodTypeAny> extends ZodType<
 //////////////////////////////////////////
 export interface ZodLiteralDef<T extends any = any> extends ZodTypeDef {
   value: T;
-  typeName: "ZodLiteral";
+  typeName: ZodFirstPartyTypeKind.ZodLiteral;
 }
 
 export class ZodLiteral<T extends any> extends ZodType<T, ZodLiteralDef<T>> {
@@ -2553,7 +2553,7 @@ export class ZodLiteral<T extends any> extends ZodType<T, ZodLiteralDef<T>> {
   static create = <T extends Primitive>(value: T): ZodLiteral<T> => {
     return new ZodLiteral({
       value: value,
-      typeName: "ZodLiteral",
+      typeName: ZodFirstPartyTypeKind.ZodLiteral,
     });
   };
 }
@@ -2577,7 +2577,7 @@ type Values<T extends EnumValues> = {
 export interface ZodEnumDef<T extends EnumValues = EnumValues>
   extends ZodTypeDef {
   values: T;
-  typeName: "ZodEnum";
+  typeName: ZodFirstPartyTypeKind.ZodEnum;
 }
 
 export class ZodEnum<T extends [string, ...string[]]> extends ZodType<
@@ -2632,7 +2632,7 @@ export class ZodEnum<T extends [string, ...string[]]> extends ZodType<
   ): ZodEnum<T> => {
     return new ZodEnum({
       values: values,
-      typeName: "ZodEnum",
+      typeName: ZodFirstPartyTypeKind.ZodEnum,
     }) as any;
   };
 }
@@ -2647,7 +2647,7 @@ export class ZodEnum<T extends [string, ...string[]]> extends ZodType<
 export interface ZodNativeEnumDef<T extends EnumLike = EnumLike>
   extends ZodTypeDef {
   values: T;
-  typeName: "ZodNativeEnum";
+  typeName: ZodFirstPartyTypeKind.ZodNativeEnum;
 }
 
 type EnumLike = { [k: string]: string | number; [nu: number]: string };
@@ -2674,7 +2674,7 @@ export class ZodNativeEnum<T extends EnumLike> extends ZodType<
   static create = <T extends EnumLike>(values: T): ZodNativeEnum<T> => {
     return new ZodNativeEnum({
       values: values,
-      typeName: "ZodNativeEnum",
+      typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
     });
   };
 }
@@ -2689,7 +2689,7 @@ export class ZodNativeEnum<T extends EnumLike> extends ZodType<
 export interface ZodPromiseDef<T extends ZodTypeAny = ZodTypeAny>
   extends ZodTypeDef {
   type: T;
-  typeName: "ZodPromise";
+  typeName: ZodFirstPartyTypeKind.ZodPromise;
 }
 
 export class ZodPromise<T extends ZodTypeAny> extends ZodType<
@@ -2728,7 +2728,7 @@ export class ZodPromise<T extends ZodTypeAny> extends ZodType<
   static create = <T extends ZodTypeAny>(schema: T): ZodPromise<T> => {
     return new ZodPromise({
       type: schema,
-      typeName: "ZodPromise",
+      typeName: ZodFirstPartyTypeKind.ZodPromise,
     });
   };
 }
@@ -2757,7 +2757,7 @@ export type Effect<T> = InternalCheck<T> | Mod<T>;
 export interface ZodEffectsDef<T extends ZodTypeAny = ZodTypeAny>
   extends ZodTypeDef {
   schema: T;
-  typeName: "ZodEffects";
+  typeName: ZodFirstPartyTypeKind.ZodEffects;
   effects?: Effect<any>[];
 }
 
@@ -2868,7 +2868,7 @@ export class ZodEffects<
   constructor(def: ZodEffectsDef<T>) {
     super(def);
     // if (def.schema instanceof ZodEffects) {
-    //   throw new Error("ZodEffects cannot be nested.");
+    //   throw new Error(ZodFirstPartyTypeKind.ZodEffectscannot be nested.");
     // }
   }
 
@@ -2877,7 +2877,7 @@ export class ZodEffects<
   ): ZodEffects<I, I["_output"]> => {
     const newTx = new ZodEffects({
       schema,
-      typeName: "ZodEffects",
+      typeName: ZodFirstPartyTypeKind.ZodEffects,
     });
 
     return newTx;
@@ -2896,7 +2896,7 @@ export { ZodEffects as ZodTransformer };
 export interface ZodOptionalDef<T extends ZodTypeAny = ZodTypeAny>
   extends ZodTypeDef {
   innerType: T;
-  typeName: "ZodOptional";
+  typeName: ZodFirstPartyTypeKind.ZodOptional;
 }
 
 export type ZodOptionalType<T extends ZodTypeAny> = ZodOptional<T>;
@@ -2924,7 +2924,7 @@ export class ZodOptional<T extends ZodTypeAny> extends ZodType<
   static create = <T extends ZodTypeAny>(type: T): ZodOptional<T> => {
     return new ZodOptional({
       innerType: type,
-      typeName: "ZodOptional",
+      typeName: ZodFirstPartyTypeKind.ZodOptional,
     }) as any;
   };
 }
@@ -2939,7 +2939,7 @@ export class ZodOptional<T extends ZodTypeAny> extends ZodType<
 export interface ZodNullableDef<T extends ZodTypeAny = ZodTypeAny>
   extends ZodTypeDef {
   innerType: T;
-  typeName: "ZodNullable";
+  typeName: ZodFirstPartyTypeKind.ZodNullable;
 }
 
 export type ZodNullableType<T extends ZodTypeAny> = ZodNullable<T>;
@@ -2967,7 +2967,7 @@ export class ZodNullable<T extends ZodTypeAny> extends ZodType<
   static create = <T extends ZodTypeAny>(type: T): ZodNullable<T> => {
     return new ZodNullable({
       innerType: type,
-      typeName: "ZodNullable",
+      typeName: ZodFirstPartyTypeKind.ZodNullable,
     }) as any;
   };
 }
@@ -2983,7 +2983,7 @@ export interface ZodDefaultDef<T extends ZodTypeAny = ZodTypeAny>
   extends ZodTypeDef {
   innerType: T;
   defaultValue: () => util.noUndefined<T["_input"]>;
-  typeName: "ZodDefault";
+  typeName: ZodFirstPartyTypeKind.ZodDefault;
 }
 
 export class ZodDefault<T extends ZodTypeAny> extends ZodType<
@@ -3009,7 +3009,7 @@ export class ZodDefault<T extends ZodTypeAny> extends ZodType<
   static create = <T extends ZodTypeAny>(type: T): ZodOptional<T> => {
     return new ZodOptional({
       innerType: type,
-      typeName: "ZodOptional",
+      typeName: ZodFirstPartyTypeKind.ZodOptional,
     }) as any;
   };
 }
@@ -3028,6 +3028,37 @@ export const late = {
   object: ZodObject.lazycreate,
 };
 
+export enum ZodFirstPartyTypeKind {
+  ZodString = "ZodString",
+  ZodNumber = "ZodNumber",
+  ZodBigInt = "ZodBigInt",
+  ZodBoolean = "ZodBoolean",
+  ZodDate = "ZodDate",
+  ZodUndefined = "ZodUndefined",
+  ZodNull = "ZodNull",
+  ZodAny = "ZodAny",
+  ZodUnknown = "ZodUnknown",
+  ZodNever = "ZodNever",
+  ZodVoid = "ZodVoid",
+  ZodArray = "ZodArray",
+  ZodObject = "ZodObject",
+  ZodUnion = "ZodUnion",
+  ZodIntersection = "ZodIntersection",
+  ZodTuple = "ZodTuple",
+  ZodRecord = "ZodRecord",
+  ZodMap = "ZodMap",
+  ZodSet = "ZodSet",
+  ZodFunction = "ZodFunction",
+  ZodLazy = "ZodLazy",
+  ZodLiteral = "ZodLiteral",
+  ZodEnum = "ZodEnum",
+  ZodEffects = "ZodEffects",
+  ZodNativeEnum = "ZodNativeEnum",
+  ZodOptional = "ZodOptional",
+  ZodNullable = "ZodNullable",
+  ZodDefault = "ZodDefault",
+  ZodPromise = "ZodPromise",
+}
 export type ZodFirstPartySchemaTypes =
   | ZodString
   | ZodNumber
diff --git a/package.json b/package.json
index 055521884..7cbefc535 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "zod",
-  "version": "3.5.0",
+  "version": "3.5.1",
   "description": "TypeScript-first schema declaration and validation library with static type inference",
   "main": "./lib/index.js",
   "types": "./lib/index.d.ts",
diff --git a/src/__tests__/firstparty.test.ts b/src/__tests__/firstparty.test.ts
index b98299e00..6ad58d265 100644
--- a/src/__tests__/firstparty.test.ts
+++ b/src/__tests__/firstparty.test.ts
@@ -8,63 +8,63 @@ test("first party switch", () => {
   const def = myType._def;
 
   switch (def.typeName) {
-    case "ZodString":
+    case z.ZodFirstPartyTypeKind.ZodString:
       break;
-    case "ZodNumber":
+    case z.ZodFirstPartyTypeKind.ZodNumber:
       break;
-    case "ZodBigInt":
+    case z.ZodFirstPartyTypeKind.ZodBigInt:
       break;
-    case "ZodBoolean":
+    case z.ZodFirstPartyTypeKind.ZodBoolean:
       break;
-    case "ZodDate":
+    case z.ZodFirstPartyTypeKind.ZodDate:
       break;
-    case "ZodUndefined":
+    case z.ZodFirstPartyTypeKind.ZodUndefined:
       break;
-    case "ZodNull":
+    case z.ZodFirstPartyTypeKind.ZodNull:
       break;
-    case "ZodAny":
+    case z.ZodFirstPartyTypeKind.ZodAny:
       break;
-    case "ZodUnknown":
+    case z.ZodFirstPartyTypeKind.ZodUnknown:
       break;
-    case "ZodNever":
+    case z.ZodFirstPartyTypeKind.ZodNever:
       break;
-    case "ZodVoid":
+    case z.ZodFirstPartyTypeKind.ZodVoid:
       break;
-    case "ZodArray":
+    case z.ZodFirstPartyTypeKind.ZodArray:
       break;
-    case "ZodObject":
+    case z.ZodFirstPartyTypeKind.ZodObject:
       break;
-    case "ZodUnion":
+    case z.ZodFirstPartyTypeKind.ZodUnion:
       break;
-    case "ZodIntersection":
+    case z.ZodFirstPartyTypeKind.ZodIntersection:
       break;
-    case "ZodTuple":
+    case z.ZodFirstPartyTypeKind.ZodTuple:
       break;
-    case "ZodRecord":
+    case z.ZodFirstPartyTypeKind.ZodRecord:
       break;
-    case "ZodMap":
+    case z.ZodFirstPartyTypeKind.ZodMap:
       break;
-    case "ZodSet":
+    case z.ZodFirstPartyTypeKind.ZodSet:
       break;
-    case "ZodFunction":
+    case z.ZodFirstPartyTypeKind.ZodFunction:
       break;
-    case "ZodLazy":
+    case z.ZodFirstPartyTypeKind.ZodLazy:
       break;
-    case "ZodLiteral":
+    case z.ZodFirstPartyTypeKind.ZodLiteral:
       break;
-    case "ZodEnum":
+    case z.ZodFirstPartyTypeKind.ZodEnum:
       break;
-    case "ZodEffects":
+    case z.ZodFirstPartyTypeKind.ZodEffects:
       break;
-    case "ZodNativeEnum":
+    case z.ZodFirstPartyTypeKind.ZodNativeEnum:
       break;
-    case "ZodOptional":
+    case z.ZodFirstPartyTypeKind.ZodOptional:
       break;
-    case "ZodNullable":
+    case z.ZodFirstPartyTypeKind.ZodNullable:
       break;
-    case "ZodDefault":
+    case z.ZodFirstPartyTypeKind.ZodDefault:
       break;
-    case "ZodPromise":
+    case z.ZodFirstPartyTypeKind.ZodPromise:
       break;
     default:
       util.assertNever(def);
diff --git a/src/playground.ts b/src/playground.ts
deleted file mode 100644
index 0a9668079..000000000
--- a/src/playground.ts
+++ /dev/null
@@ -1,8 +0,0 @@
-import { z } from "./index";
-
-const run = async () => {
-  z;
-};
-run();
-
-export {};
diff --git a/src/types.ts b/src/types.ts
index b21000fff..5c0ff05b7 100644
--- a/src/types.ts
+++ b/src/types.ts
@@ -232,7 +232,7 @@ export abstract class ZodType<
     } else {
       returnType = new ZodEffects({
         schema: this,
-        typeName: "ZodEffects",
+        typeName: ZodFirstPartyTypeKind.ZodEffects,
         effects: [{ type: "refinement", refinement }],
       }) as any;
     }
@@ -269,7 +269,7 @@ export abstract class ZodType<
   ): ZodEffects<this, NewOut> {
     return new ZodEffects({
       schema: this,
-      typeName: "ZodEffects",
+      typeName: ZodFirstPartyTypeKind.ZodEffects,
       effects: [{ type: "transform", transform }],
     }) as any;
   }
@@ -291,7 +291,7 @@ export abstract class ZodType<
     return new ZodDefault({
       innerType: this,
       defaultValue: defaultValueFunc,
-      typeName: "ZodDefault",
+      typeName: ZodFirstPartyTypeKind.ZodDefault,
     }) as any;
   }
 
@@ -316,7 +316,7 @@ type ZodStringCheck =
 
 export interface ZodStringDef extends ZodTypeDef {
   checks: ZodStringCheck[];
-  typeName: "ZodString";
+  typeName: ZodFirstPartyTypeKind.ZodString;
 }
 
 const uuidRegex = /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[89ab][a-f0-9]{3}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;
@@ -520,7 +520,7 @@ export class ZodString extends ZodType<string, ZodStringDef> {
   static create = (): ZodString => {
     return new ZodString({
       checks: [],
-      typeName: "ZodString",
+      typeName: ZodFirstPartyTypeKind.ZodString,
     });
   };
 }
@@ -539,7 +539,7 @@ type ZodNumberCheck =
 
 export interface ZodNumberDef extends ZodTypeDef {
   checks: ZodNumberCheck[];
-  typeName: "ZodNumber";
+  typeName: ZodFirstPartyTypeKind.ZodNumber;
 }
 
 export class ZodNumber extends ZodType<number, ZodNumberDef> {
@@ -609,7 +609,7 @@ export class ZodNumber extends ZodType<number, ZodNumberDef> {
   static create = (): ZodNumber => {
     return new ZodNumber({
       checks: [],
-      typeName: "ZodNumber",
+      typeName: ZodFirstPartyTypeKind.ZodNumber,
     });
   };
 
@@ -743,7 +743,7 @@ export class ZodNumber extends ZodType<number, ZodNumberDef> {
 /////////////////////////////////////////
 
 export interface ZodBigIntDef extends ZodTypeDef {
-  typeName: "ZodBigInt";
+  typeName: ZodFirstPartyTypeKind.ZodBigInt;
 }
 
 export class ZodBigInt extends ZodType<bigint, ZodBigIntDef> {
@@ -765,7 +765,7 @@ export class ZodBigInt extends ZodType<bigint, ZodBigIntDef> {
   }
 
   static create = (): ZodBigInt => {
-    return new ZodBigInt({ typeName: "ZodBigInt" });
+    return new ZodBigInt({ typeName: ZodFirstPartyTypeKind.ZodBigInt });
   };
 }
 
@@ -777,7 +777,7 @@ export class ZodBigInt extends ZodType<bigint, ZodBigIntDef> {
 //////////////////////////////////////////
 //////////////////////////////////////////
 export interface ZodBooleanDef extends ZodTypeDef {
-  typeName: "ZodBoolean";
+  typeName: ZodFirstPartyTypeKind.ZodBoolean;
 }
 
 export class ZodBoolean extends ZodType<boolean, ZodBooleanDef> {
@@ -799,7 +799,7 @@ export class ZodBoolean extends ZodType<boolean, ZodBooleanDef> {
   }
 
   static create = (): ZodBoolean => {
-    return new ZodBoolean({ typeName: "ZodBoolean" });
+    return new ZodBoolean({ typeName: ZodFirstPartyTypeKind.ZodBoolean });
   };
 }
 
@@ -811,7 +811,7 @@ export class ZodBoolean extends ZodType<boolean, ZodBooleanDef> {
 ///////////////////////////////////////
 ///////////////////////////////////////
 export interface ZodDateDef extends ZodTypeDef {
-  typeName: "ZodDate";
+  typeName: ZodFirstPartyTypeKind.ZodDate;
 }
 
 export class ZodDate extends ZodType<Date, ZodDateDef> {
@@ -841,7 +841,7 @@ export class ZodDate extends ZodType<Date, ZodDateDef> {
   }
 
   static create = (): ZodDate => {
-    return new ZodDate({ typeName: "ZodDate" });
+    return new ZodDate({ typeName: ZodFirstPartyTypeKind.ZodDate });
   };
 }
 
@@ -853,7 +853,7 @@ export class ZodDate extends ZodType<Date, ZodDateDef> {
 ////////////////////////////////////////////
 ////////////////////////////////////////////
 export interface ZodUndefinedDef extends ZodTypeDef {
-  typeName: "ZodUndefined";
+  typeName: ZodFirstPartyTypeKind.ZodUndefined;
 }
 
 export class ZodUndefined extends ZodType<undefined, ZodUndefinedDef> {
@@ -875,7 +875,7 @@ export class ZodUndefined extends ZodType<undefined, ZodUndefinedDef> {
   }
 
   static create = (): ZodUndefined => {
-    return new ZodUndefined({ typeName: "ZodUndefined" });
+    return new ZodUndefined({ typeName: ZodFirstPartyTypeKind.ZodUndefined });
   };
 }
 
@@ -887,7 +887,7 @@ export class ZodUndefined extends ZodType<undefined, ZodUndefinedDef> {
 ///////////////////////////////////////
 ///////////////////////////////////////
 export interface ZodNullDef extends ZodTypeDef {
-  typeName: "ZodNull";
+  typeName: ZodFirstPartyTypeKind.ZodNull;
 }
 
 export class ZodNull extends ZodType<null, ZodNullDef> {
@@ -908,7 +908,7 @@ export class ZodNull extends ZodType<null, ZodNullDef> {
     return OK(data);
   }
   static create = (): ZodNull => {
-    return new ZodNull({ typeName: "ZodNull" });
+    return new ZodNull({ typeName: ZodFirstPartyTypeKind.ZodNull });
   };
 }
 
@@ -920,7 +920,7 @@ export class ZodNull extends ZodType<null, ZodNullDef> {
 //////////////////////////////////////
 //////////////////////////////////////
 export interface ZodAnyDef extends ZodTypeDef {
-  typeName: "ZodAny";
+  typeName: ZodFirstPartyTypeKind.ZodAny;
 }
 
 export class ZodAny extends ZodType<any, ZodAnyDef> {
@@ -934,7 +934,7 @@ export class ZodAny extends ZodType<any, ZodAnyDef> {
     return OK(data);
   }
   static create = (): ZodAny => {
-    return new ZodAny({ typeName: "ZodAny" });
+    return new ZodAny({ typeName: ZodFirstPartyTypeKind.ZodAny });
   };
 }
 
@@ -946,7 +946,7 @@ export class ZodAny extends ZodType<any, ZodAnyDef> {
 //////////////////////////////////////////
 //////////////////////////////////////////
 export interface ZodUnknownDef extends ZodTypeDef {
-  typeName: "ZodUnknown";
+  typeName: ZodFirstPartyTypeKind.ZodUnknown;
 }
 
 export class ZodUnknown extends ZodType<unknown, ZodUnknownDef> {
@@ -961,7 +961,7 @@ export class ZodUnknown extends ZodType<unknown, ZodUnknownDef> {
   }
 
   static create = (): ZodUnknown => {
-    return new ZodUnknown({ typeName: "ZodUnknown" });
+    return new ZodUnknown({ typeName: ZodFirstPartyTypeKind.ZodUnknown });
   };
 }
 
@@ -973,7 +973,7 @@ export class ZodUnknown extends ZodType<unknown, ZodUnknownDef> {
 ////////////////////////////////////////
 ////////////////////////////////////////
 export interface ZodNeverDef extends ZodTypeDef {
-  typeName: "ZodNever";
+  typeName: ZodFirstPartyTypeKind.ZodNever;
 }
 
 export class ZodNever extends ZodType<never, ZodNeverDef> {
@@ -990,7 +990,7 @@ export class ZodNever extends ZodType<never, ZodNeverDef> {
     return INVALID;
   }
   static create = (): ZodNever => {
-    return new ZodNever({ typeName: "ZodNever" });
+    return new ZodNever({ typeName: ZodFirstPartyTypeKind.ZodNever });
   };
 }
 
@@ -1002,7 +1002,7 @@ export class ZodNever extends ZodType<never, ZodNeverDef> {
 ///////////////////////////////////////
 ///////////////////////////////////////
 export interface ZodVoidDef extends ZodTypeDef {
-  typeName: "ZodVoid";
+  typeName: ZodFirstPartyTypeKind.ZodVoid;
 }
 
 export class ZodVoid extends ZodType<void, ZodVoidDef> {
@@ -1027,7 +1027,7 @@ export class ZodVoid extends ZodType<void, ZodVoidDef> {
   }
 
   static create = (): ZodVoid => {
-    return new ZodVoid({ typeName: "ZodVoid" });
+    return new ZodVoid({ typeName: ZodFirstPartyTypeKind.ZodVoid });
   };
 }
 
@@ -1041,7 +1041,7 @@ export class ZodVoid extends ZodType<void, ZodVoidDef> {
 export interface ZodArrayDef<T extends ZodTypeAny = ZodTypeAny>
   extends ZodTypeDef {
   type: T;
-  typeName: "ZodArray";
+  typeName: ZodFirstPartyTypeKind.ZodArray;
   minLength: { value: number; message?: string } | null;
   maxLength: { value: number; message?: string } | null;
 }
@@ -1182,7 +1182,7 @@ export class ZodArray<T extends ZodTypeAny> extends ZodType<
       type: schema,
       minLength: null,
       maxLength: null,
-      typeName: "ZodArray",
+      typeName: ZodFirstPartyTypeKind.ZodArray,
     });
   };
 }
@@ -1197,7 +1197,7 @@ export class ZodArray<T extends ZodTypeAny> extends ZodType<
 export interface ZodNonEmptyArrayDef<T extends ZodTypeAny = ZodTypeAny>
   extends ZodTypeDef {
   type: T;
-  typeName: "ZodArray";
+  typeName: ZodFirstPartyTypeKind.ZodArray;
   minLength: { value: number; message?: string } | null;
   maxLength: { value: number; message?: string } | null;
 }
@@ -1242,7 +1242,7 @@ export class ZodNonEmptyArray<T extends ZodTypeAny> extends ZodType<
       type: schema,
       minLength: null,
       maxLength: null,
-      typeName: "ZodArray",
+      typeName: ZodFirstPartyTypeKind.ZodArray,
     });
   };
 }
@@ -1332,7 +1332,7 @@ export const mergeObjects = <First extends AnyZodObject>(first: First) => <
     unknownKeys: first._def.unknownKeys,
     catchall: first._def.catchall,
     shape: () => mergedShape,
-    typeName: "ZodObject",
+    typeName: ZodFirstPartyTypeKind.ZodObject,
   }) as any;
   return merged;
 };
@@ -1377,7 +1377,7 @@ export interface ZodObjectDef<
   UnknownKeys extends UnknownKeysParam = UnknownKeysParam,
   Catchall extends ZodTypeAny = ZodTypeAny
 > extends ZodTypeDef {
-  typeName: "ZodObject";
+  typeName: ZodFirstPartyTypeKind.ZodObject;
   shape: () => T;
   catchall: Catchall;
   unknownKeys: UnknownKeys;
@@ -1599,7 +1599,7 @@ export class ZodObject<
       unknownKeys: merging._def.unknownKeys,
       catchall: merging._def.catchall,
       shape: () => mergedShape,
-      typeName: "ZodObject",
+      typeName: ZodFirstPartyTypeKind.ZodObject,
     }) as any;
     return merged;
   };
@@ -1714,7 +1714,7 @@ export class ZodObject<
       shape: () => shape,
       unknownKeys: "strip",
       catchall: ZodNever.create(),
-      typeName: "ZodObject",
+      typeName: ZodFirstPartyTypeKind.ZodObject,
     }) as any;
   };
 
@@ -1725,7 +1725,7 @@ export class ZodObject<
       shape: () => shape,
       unknownKeys: "strict",
       catchall: ZodNever.create(),
-      typeName: "ZodObject",
+      typeName: ZodFirstPartyTypeKind.ZodObject,
     }) as any;
   };
 
@@ -1734,7 +1734,7 @@ export class ZodObject<
       shape,
       unknownKeys: "strip",
       catchall: ZodNever.create(),
-      typeName: "ZodObject",
+      typeName: ZodFirstPartyTypeKind.ZodObject,
     }) as any;
   };
 }
@@ -1753,7 +1753,7 @@ export interface ZodUnionDef<
   T extends ZodUnionOptions = [ZodTypeAny, ZodTypeAny, ...ZodTypeAny[]]
 > extends ZodTypeDef {
   options: T;
-  typeName: "ZodUnion";
+  typeName: ZodFirstPartyTypeKind.ZodUnion;
 }
 
 // export type toOpts<T> = T extends ZodUnionOptions ? T : never;
@@ -1836,7 +1836,7 @@ export class ZodUnion<T extends ZodUnionOptions> extends ZodType<
   ): ZodUnion<T> => {
     return new ZodUnion({
       options: types,
-      typeName: "ZodUnion",
+      typeName: ZodFirstPartyTypeKind.ZodUnion,
     });
   };
 }
@@ -1854,7 +1854,7 @@ export interface ZodIntersectionDef<
 > extends ZodTypeDef {
   left: T;
   right: U;
-  typeName: "ZodIntersection";
+  typeName: ZodFirstPartyTypeKind.ZodIntersection;
 }
 
 function mergeValues(
@@ -1936,7 +1936,7 @@ export class ZodIntersection<
     return new ZodIntersection({
       left: left,
       right: right,
-      typeName: "ZodIntersection",
+      typeName: ZodFirstPartyTypeKind.ZodIntersection,
     });
   };
 }
@@ -1960,7 +1960,7 @@ export interface ZodTupleDef<
   T extends [ZodTypeAny, ...ZodTypeAny[]] | [] = [ZodTypeAny, ...ZodTypeAny[]]
 > extends ZodTypeDef {
   items: T;
-  typeName: "ZodTuple";
+  typeName: ZodFirstPartyTypeKind.ZodTuple;
 }
 
 export class ZodTuple<
@@ -2044,7 +2044,7 @@ export class ZodTuple<
   ): ZodTuple<T> => {
     return new ZodTuple({
       items: schemas,
-      typeName: "ZodTuple",
+      typeName: ZodFirstPartyTypeKind.ZodTuple,
     });
   };
 }
@@ -2059,7 +2059,7 @@ export class ZodTuple<
 export interface ZodRecordDef<Value extends ZodTypeAny = ZodTypeAny>
   extends ZodTypeDef {
   valueType: Value;
-  typeName: "ZodRecord";
+  typeName: ZodFirstPartyTypeKind.ZodRecord;
 }
 
 export class ZodRecord<Value extends ZodTypeAny = ZodTypeAny> extends ZodType<
@@ -2121,7 +2121,7 @@ export class ZodRecord<Value extends ZodTypeAny = ZodTypeAny> extends ZodType<
   ): ZodRecord<Value> => {
     return new ZodRecord({
       valueType,
-      typeName: "ZodRecord",
+      typeName: ZodFirstPartyTypeKind.ZodRecord,
     });
   };
 }
@@ -2139,7 +2139,7 @@ export interface ZodMapDef<
 > extends ZodTypeDef {
   valueType: Value;
   keyType: Key;
-  typeName: "ZodMap";
+  typeName: ZodFirstPartyTypeKind.ZodMap;
 }
 
 export class ZodMap<
@@ -2221,7 +2221,7 @@ export class ZodMap<
     return new ZodMap({
       valueType,
       keyType,
-      typeName: "ZodMap",
+      typeName: ZodFirstPartyTypeKind.ZodMap,
     });
   };
 }
@@ -2236,7 +2236,7 @@ export class ZodMap<
 export interface ZodSetDef<Value extends ZodTypeAny = ZodTypeAny>
   extends ZodTypeDef {
   valueType: Value;
-  typeName: "ZodSet";
+  typeName: ZodFirstPartyTypeKind.ZodSet;
 }
 
 export class ZodSet<Value extends ZodTypeAny = ZodTypeAny> extends ZodType<
@@ -2293,7 +2293,7 @@ export class ZodSet<Value extends ZodTypeAny = ZodTypeAny> extends ZodType<
   ): ZodSet<Value> => {
     return new ZodSet({
       valueType,
-      typeName: "ZodSet",
+      typeName: ZodFirstPartyTypeKind.ZodSet,
     });
   };
 }
@@ -2311,7 +2311,7 @@ export interface ZodFunctionDef<
 > extends ZodTypeDef {
   args: Args;
   returns: Returns;
-  typeName: "ZodFunction";
+  typeName: ZodFirstPartyTypeKind.ZodFunction;
 }
 
 export type OuterTypeOfFunction<
@@ -2473,7 +2473,7 @@ export class ZodFunction<
     return new ZodFunction({
       args: args || ZodTuple.create([]),
       returns: returns || ZodUnknown.create(),
-      typeName: "ZodFunction",
+      typeName: ZodFirstPartyTypeKind.ZodFunction,
     }) as any;
   };
 }
@@ -2488,7 +2488,7 @@ export class ZodFunction<
 export interface ZodLazyDef<T extends ZodTypeAny = ZodTypeAny>
   extends ZodTypeDef {
   getter: () => T;
-  typeName: "ZodLazy";
+  typeName: ZodFirstPartyTypeKind.ZodLazy;
 }
 
 export class ZodLazy<T extends ZodTypeAny> extends ZodType<
@@ -2512,7 +2512,7 @@ export class ZodLazy<T extends ZodTypeAny> extends ZodType<
   static create = <T extends ZodTypeAny>(getter: () => T): ZodLazy<T> => {
     return new ZodLazy({
       getter: getter,
-      typeName: "ZodLazy",
+      typeName: ZodFirstPartyTypeKind.ZodLazy,
     });
   };
 }
@@ -2526,7 +2526,7 @@ export class ZodLazy<T extends ZodTypeAny> extends ZodType<
 //////////////////////////////////////////
 export interface ZodLiteralDef<T extends any = any> extends ZodTypeDef {
   value: T;
-  typeName: "ZodLiteral";
+  typeName: ZodFirstPartyTypeKind.ZodLiteral;
 }
 
 export class ZodLiteral<T extends any> extends ZodType<T, ZodLiteralDef<T>> {
@@ -2553,7 +2553,7 @@ export class ZodLiteral<T extends any> extends ZodType<T, ZodLiteralDef<T>> {
   static create = <T extends Primitive>(value: T): ZodLiteral<T> => {
     return new ZodLiteral({
       value: value,
-      typeName: "ZodLiteral",
+      typeName: ZodFirstPartyTypeKind.ZodLiteral,
     });
   };
 }
@@ -2577,7 +2577,7 @@ type Values<T extends EnumValues> = {
 export interface ZodEnumDef<T extends EnumValues = EnumValues>
   extends ZodTypeDef {
   values: T;
-  typeName: "ZodEnum";
+  typeName: ZodFirstPartyTypeKind.ZodEnum;
 }
 
 export class ZodEnum<T extends [string, ...string[]]> extends ZodType<
@@ -2632,7 +2632,7 @@ export class ZodEnum<T extends [string, ...string[]]> extends ZodType<
   ): ZodEnum<T> => {
     return new ZodEnum({
       values: values,
-      typeName: "ZodEnum",
+      typeName: ZodFirstPartyTypeKind.ZodEnum,
     }) as any;
   };
 }
@@ -2647,7 +2647,7 @@ export class ZodEnum<T extends [string, ...string[]]> extends ZodType<
 export interface ZodNativeEnumDef<T extends EnumLike = EnumLike>
   extends ZodTypeDef {
   values: T;
-  typeName: "ZodNativeEnum";
+  typeName: ZodFirstPartyTypeKind.ZodNativeEnum;
 }
 
 type EnumLike = { [k: string]: string | number; [nu: number]: string };
@@ -2674,7 +2674,7 @@ export class ZodNativeEnum<T extends EnumLike> extends ZodType<
   static create = <T extends EnumLike>(values: T): ZodNativeEnum<T> => {
     return new ZodNativeEnum({
       values: values,
-      typeName: "ZodNativeEnum",
+      typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
     });
   };
 }
@@ -2689,7 +2689,7 @@ export class ZodNativeEnum<T extends EnumLike> extends ZodType<
 export interface ZodPromiseDef<T extends ZodTypeAny = ZodTypeAny>
   extends ZodTypeDef {
   type: T;
-  typeName: "ZodPromise";
+  typeName: ZodFirstPartyTypeKind.ZodPromise;
 }
 
 export class ZodPromise<T extends ZodTypeAny> extends ZodType<
@@ -2728,7 +2728,7 @@ export class ZodPromise<T extends ZodTypeAny> extends ZodType<
   static create = <T extends ZodTypeAny>(schema: T): ZodPromise<T> => {
     return new ZodPromise({
       type: schema,
-      typeName: "ZodPromise",
+      typeName: ZodFirstPartyTypeKind.ZodPromise,
     });
   };
 }
@@ -2757,7 +2757,7 @@ export type Effect<T> = InternalCheck<T> | Mod<T>;
 export interface ZodEffectsDef<T extends ZodTypeAny = ZodTypeAny>
   extends ZodTypeDef {
   schema: T;
-  typeName: "ZodEffects";
+  typeName: ZodFirstPartyTypeKind.ZodEffects;
   effects?: Effect<any>[];
 }
 
@@ -2868,7 +2868,7 @@ export class ZodEffects<
   constructor(def: ZodEffectsDef<T>) {
     super(def);
     // if (def.schema instanceof ZodEffects) {
-    //   throw new Error("ZodEffects cannot be nested.");
+    //   throw new Error(ZodFirstPartyTypeKind.ZodEffectscannot be nested.");
     // }
   }
 
@@ -2877,7 +2877,7 @@ export class ZodEffects<
   ): ZodEffects<I, I["_output"]> => {
     const newTx = new ZodEffects({
       schema,
-      typeName: "ZodEffects",
+      typeName: ZodFirstPartyTypeKind.ZodEffects,
     });
 
     return newTx;
@@ -2896,7 +2896,7 @@ export { ZodEffects as ZodTransformer };
 export interface ZodOptionalDef<T extends ZodTypeAny = ZodTypeAny>
   extends ZodTypeDef {
   innerType: T;
-  typeName: "ZodOptional";
+  typeName: ZodFirstPartyTypeKind.ZodOptional;
 }
 
 export type ZodOptionalType<T extends ZodTypeAny> = ZodOptional<T>;
@@ -2924,7 +2924,7 @@ export class ZodOptional<T extends ZodTypeAny> extends ZodType<
   static create = <T extends ZodTypeAny>(type: T): ZodOptional<T> => {
     return new ZodOptional({
       innerType: type,
-      typeName: "ZodOptional",
+      typeName: ZodFirstPartyTypeKind.ZodOptional,
     }) as any;
   };
 }
@@ -2939,7 +2939,7 @@ export class ZodOptional<T extends ZodTypeAny> extends ZodType<
 export interface ZodNullableDef<T extends ZodTypeAny = ZodTypeAny>
   extends ZodTypeDef {
   innerType: T;
-  typeName: "ZodNullable";
+  typeName: ZodFirstPartyTypeKind.ZodNullable;
 }
 
 export type ZodNullableType<T extends ZodTypeAny> = ZodNullable<T>;
@@ -2967,7 +2967,7 @@ export class ZodNullable<T extends ZodTypeAny> extends ZodType<
   static create = <T extends ZodTypeAny>(type: T): ZodNullable<T> => {
     return new ZodNullable({
       innerType: type,
-      typeName: "ZodNullable",
+      typeName: ZodFirstPartyTypeKind.ZodNullable,
     }) as any;
   };
 }
@@ -2983,7 +2983,7 @@ export interface ZodDefaultDef<T extends ZodTypeAny = ZodTypeAny>
   extends ZodTypeDef {
   innerType: T;
   defaultValue: () => util.noUndefined<T["_input"]>;
-  typeName: "ZodDefault";
+  typeName: ZodFirstPartyTypeKind.ZodDefault;
 }
 
 export class ZodDefault<T extends ZodTypeAny> extends ZodType<
@@ -3009,7 +3009,7 @@ export class ZodDefault<T extends ZodTypeAny> extends ZodType<
   static create = <T extends ZodTypeAny>(type: T): ZodOptional<T> => {
     return new ZodOptional({
       innerType: type,
-      typeName: "ZodOptional",
+      typeName: ZodFirstPartyTypeKind.ZodOptional,
     }) as any;
   };
 }
@@ -3028,6 +3028,37 @@ export const late = {
   object: ZodObject.lazycreate,
 };
 
+export enum ZodFirstPartyTypeKind {
+  ZodString = "ZodString",
+  ZodNumber = "ZodNumber",
+  ZodBigInt = "ZodBigInt",
+  ZodBoolean = "ZodBoolean",
+  ZodDate = "ZodDate",
+  ZodUndefined = "ZodUndefined",
+  ZodNull = "ZodNull",
+  ZodAny = "ZodAny",
+  ZodUnknown = "ZodUnknown",
+  ZodNever = "ZodNever",
+  ZodVoid = "ZodVoid",
+  ZodArray = "ZodArray",
+  ZodObject = "ZodObject",
+  ZodUnion = "ZodUnion",
+  ZodIntersection = "ZodIntersection",
+  ZodTuple = "ZodTuple",
+  ZodRecord = "ZodRecord",
+  ZodMap = "ZodMap",
+  ZodSet = "ZodSet",
+  ZodFunction = "ZodFunction",
+  ZodLazy = "ZodLazy",
+  ZodLiteral = "ZodLiteral",
+  ZodEnum = "ZodEnum",
+  ZodEffects = "ZodEffects",
+  ZodNativeEnum = "ZodNativeEnum",
+  ZodOptional = "ZodOptional",
+  ZodNullable = "ZodNullable",
+  ZodDefault = "ZodDefault",
+  ZodPromise = "ZodPromise",
+}
 export type ZodFirstPartySchemaTypes =
   | ZodString
   | ZodNumber
